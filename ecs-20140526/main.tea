/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('ecs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AcceptInquiredSystemEventRequest {
  choice?: string(name='Choice', description='> This parameter is in invitational preview and is unavailable to general users.', example='hide'),
  eventId?: string(name='EventId', description='The ID of the system event.', example='e-2zeielxl1qzq8slb****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the system event. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AcceptInquiredSystemEventResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4DD56CA6-6D75-4D33-BE34-E4A44EBE1C3D'),
}

model AcceptInquiredSystemEventResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AcceptInquiredSystemEventResponseBody(name='body'),
}

async function acceptInquiredSystemEventWithOptions(request: AcceptInquiredSystemEventRequest, runtime: Util.RuntimeOptions): AcceptInquiredSystemEventResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.choice)) {
    query['Choice'] = request.choice;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AcceptInquiredSystemEvent',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptInquiredSystemEvent(request: AcceptInquiredSystemEventRequest): AcceptInquiredSystemEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptInquiredSystemEventWithOptions(request, runtime);
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ActivateRouterInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ActivateRouterInterfaceResponse
 */
// Deprecated
async function activateRouterInterfaceWithOptions(request: ActivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): ActivateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateRouterInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ActivateRouterInterfaceRequest
  * @return ActivateRouterInterfaceResponse
 */
// Deprecated
async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateRouterInterfaceWithOptions(request, runtime);
}

model AddBandwidthPackageIpsRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  clientToken?: string(name='ClientToken'),
  ipCount?: string(name='IpCount'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddBandwidthPackageIpsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request AddBandwidthPackageIpsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddBandwidthPackageIpsResponse
 */
// Deprecated
async function addBandwidthPackageIpsWithOptions(request: AddBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): AddBandwidthPackageIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipCount)) {
    query['IpCount'] = request.ipCount;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBandwidthPackageIps',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request AddBandwidthPackageIpsRequest
  * @return AddBandwidthPackageIpsResponse
 */
// Deprecated
async function addBandwidthPackageIps(request: AddBandwidthPackageIpsRequest): AddBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBandwidthPackageIpsWithOptions(request, runtime);
}

model AddTagsRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. When the resources are instances, this parameter can be interpreted as InstanceId.', example='i-bp1gtjxuuvwj17zr****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy

All values must be lowercase.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://](http://https://).', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://](http://https://).', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
}

model AddTagsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddTagsResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Up to 20 tags can be added to each ECS resource.
  * *   `Tag.N.Key` must match `Tag.N.Value` based on the value of N.
  * *   If you add a tag that has the same key (`Tag.N.Key`) as an existing tag on the specified resource, the new tag value (`Tag.N.Value`) overwrites the original tag value.
  *
  * @param request AddTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddTagsResponse
 */
async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTags',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   Up to 20 tags can be added to each ECS resource.
  * *   `Tag.N.Key` must match `Tag.N.Value` based on the value of N.
  * *   If you add a tag that has the same key (`Tag.N.Key`) as an existing tag on the specified resource, the new tag value (`Tag.N.Value`) overwrites the original tag value.
  *
  * @param request AddTagsRequest
  * @return AddTagsResponse
 */
async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model AllocateDedicatedHostsRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period for a UDP session between a Server Load Balancer (SLB) instance and the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
    udpTimeout?: int32(name='UdpTimeout', description='The timeout period for a UDP session between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
  }(name='NetworkAttributes'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy used to migrate the instances deployed on the dedicated host when the dedicated host fails or needs to be repaired online. Valid values:

*   Migrate: The instances are migrated to another physical server and restarted.

    If cloud disks are attached to the dedicated host, the default value is Migrate.

*   Stop: The instances are stopped. If the dedicated host cannot be repaired, the instances are migrated to another physical machine and then restarted.

    If local disks are attached to the dedicated host, the default value is Stop.', example='Migrate'),
  autoPlacement?: string(name='AutoPlacement', description='Specifies whether to add the dedicated host to the resource pool for automatic deployment. If you create an ECS instance on a dedicated host without specifying the **DedicatedHostId** parameter, Alibaba Cloud selects a dedicated host from the resource pool to host the instance. For more information, see [Automatic deployment](~~118938~~). Valid values:

*   on: adds the dedicated host to the resource pool for automatic deployment.
*   off: does not add the dedicated host to the resource pool for automatic deployment.

Default value: on.

> If you do not want to add the dedicated host to the resource pool for automatic deployment, set this parameter to off.', example='off'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the dedicated host. Specify the time in the `ISO 8601` standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> 

*   It must be at least half an hour later than the current time.

*   It must be at most three years later than the current time.

*   If the value of seconds (ss) is not 00, it is automatically set to 00.', example='2019-08-21T12:30:24Z'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to automatically renew the subscription dedicated host.

> The **AutoRenew** parameter takes effect only when the **ChargeType** parameter is set to PrePaid.

Default value: false', example='false'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal duration of the dedicated host. The **AutoRenewPeriod** parameter takes effect and is required only when the **AutoRenew** parameter is set to true. Valid values:

Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, and 12.', example='1'),
  chargeType?: string(name='ChargeType', description='The billing method of the dedicated host. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient account balance or credits. Otherwise, `InvalidPayMethod` is returned.
*   PostPaid: pay-as-you-go.

Default value: PostPaid.', example='PrePaid'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio. You can configure CPU overcommit ratios only for the following dedicated host types: g6s, c6s, and r6s. Valid values: 1 to 5.

The CPU overcommit ratio affects the number of available vCPUs on a dedicated host. You can use the following formula to calculate the number of available vCPUs on a dedicated host: Number of available vCPUs = Number of physical CPU cores × 2 × CPU overcommit ratio. For example, the number of physical CPU cores on each g6s dedicated host is 52. If you set the CPU overcommit ratio of a g6s dedicated host to 4, the number of available vCPUs on the dedicated host is 416. For scenarios that have minimal requirements on CPU stability or where CPU load is not heavy, such as development and test environments, you can increase the number of available vCPUs on a dedicated host by increasing the CPU overcommit ratio. This way, you can deploy more ECS instances of the same specifications on the dedicated host and reduce the unit deployment cost.', example='1'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster in which to create the dedicated host.', example='dc-bp12wlf6am0vz9v2****'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='myDDH'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The dedicated host type. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to query the most recent list of dedicated host types.', example='ddh.c5'),
  description?: string(name='Description', description='The description of the dedicated host. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This-is-my-DDH'),
  minQuantity?: int32(name='MinQuantity', description='The minimum number of dedicated hosts to create. Valid values: 1 to 100.

> If the number of available dedicated hosts is less than the minimum number of dedicated hosts to create, the dedicated hosts fail to be created.', example='2'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The subscription duration of the dedicated host. The `Period` parameter is required and takes effect only when the `ChargeType` parameter is set to `PrePaid`. Valid values:

*   Valid values when the PeriodUnit parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.
*   Valid values when the PeriodUnit parameter is set to Year: 1, 2, 3, 4, and 5.', example='6'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription duration of the dedicated host. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
  quantity?: int32(name='Quantity', description='The number of dedicated hosts that you want to create. Valid values: 1 to 100.

Default value: 1.', example='2'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the dedicated host.', example='rg-bp67acfmxazb4ph***'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the dedicated host. Valid values of N: 1 to 20.

The tag value cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='Environment'),
      value?: string(name='Value', description='The value of tag N to add to the dedicated host. Valid values of N: 1 to 20.

The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain `http://` or `https://`.', example='Production'),
    }
  ](name='Tag', description='The tags of the command.'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the dedicated host.

This parameter is empty by default. If you do not specify a zone, the system selects a zone.', example='cn-hangzhou-f'),
}

model AllocateDedicatedHostsResponseBody = {
  dedicatedHostIdSets?: {
    dedicatedHostId?: [ string ](name='DedicatedHostId')
  }(name='DedicatedHostIdSets', description='The IDs of the dedicated hosts.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2A664A6-2933-4C64-88AE-5033D003****'),
}

model AllocateDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateDedicatedHostsResponseBody(name='body'),
}

/**
  * Before you create a dedicated host, you can call the [DescribeAvailableResource](~~66186~~) operation to query the resources available in a specific region or zone.
  * We recommend that you understand the billing methods of resources before you create a dedicated host. You are charged for resources used by the created dedicated host. For more information, see [Billing overview](~~68978~~).
  * *   You can create up to 100 pay-as-you-go or subscription dedicated hosts at a time.
  * *   After a dedicated host is created, you can use the returned dedicated host ID as the value of a request parameter to call the [DescribeDedicatedHosts](~~134242~~) operation to query the state of the dedicated host.
  * *   After you submit a request to create a dedicated host, an error is returned if a specific parameter is invalid or if the requested resources are insufficient. For more information about error causes, see the "Error codes" section of this topic.
  * *   After a dedicated host is created, you can call the [ModifyInstanceDeployment](~~134248~~) operation to migrate ECS instances from a shared host to the dedicated host. You can also migrate ECS instances from another dedicated host to the created dedicated host.
  *
  * @param request AllocateDedicatedHostsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocateDedicatedHostsResponse
 */
async function allocateDedicatedHostsWithOptions(request: AllocateDedicatedHostsRequest, runtime: Util.RuntimeOptions): AllocateDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.autoPlacement)) {
    query['AutoPlacement'] = request.autoPlacement;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.cpuOverCommitRatio)) {
    query['CpuOverCommitRatio'] = request.cpuOverCommitRatio;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.minQuantity)) {
    query['MinQuantity'] = request.minQuantity;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.networkAttributes)) {
    query['NetworkAttributes'] = request.networkAttributes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateDedicatedHosts',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you create a dedicated host, you can call the [DescribeAvailableResource](~~66186~~) operation to query the resources available in a specific region or zone.
  * We recommend that you understand the billing methods of resources before you create a dedicated host. You are charged for resources used by the created dedicated host. For more information, see [Billing overview](~~68978~~).
  * *   You can create up to 100 pay-as-you-go or subscription dedicated hosts at a time.
  * *   After a dedicated host is created, you can use the returned dedicated host ID as the value of a request parameter to call the [DescribeDedicatedHosts](~~134242~~) operation to query the state of the dedicated host.
  * *   After you submit a request to create a dedicated host, an error is returned if a specific parameter is invalid or if the requested resources are insufficient. For more information about error causes, see the "Error codes" section of this topic.
  * *   After a dedicated host is created, you can call the [ModifyInstanceDeployment](~~134248~~) operation to migrate ECS instances from a shared host to the dedicated host. You can also migrate ECS instances from another dedicated host to the created dedicated host.
  *
  * @param request AllocateDedicatedHostsRequest
  * @return AllocateDedicatedHostsResponse
 */
async function allocateDedicatedHosts(request: AllocateDedicatedHostsRequest): AllocateDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDedicatedHostsWithOptions(request, runtime);
}

model AllocateEipAddressRequest {
  activityId?: long(name='ActivityId'),
  bandwidth?: string(name='Bandwidth'),
  clientToken?: string(name='ClientToken'),
  ISP?: string(name='ISP'),
  internetChargeType?: string(name='InternetChargeType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AllocateEipAddressResponseBody = {
  allocationId?: string(name='AllocationId'),
  eipAddress?: string(name='EipAddress'),
  requestId?: string(name='RequestId'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  * > This operation has been upgraded. We recommend that you do not use it. For information about the new version of this operation, see [AllocateEipAddress](~~120192~~).
  *
  * @param request AllocateEipAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocateEipAddressResponse
 */
// Deprecated
async function allocateEipAddressWithOptions(request: AllocateEipAddressRequest, runtime: Util.RuntimeOptions): AllocateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateEipAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  * > This operation has been upgraded. We recommend that you do not use it. For information about the new version of this operation, see [AllocateEipAddress](~~120192~~).
  *
  * @param request AllocateEipAddressRequest
  * @return AllocateEipAddressResponse
 */
// Deprecated
async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressWithOptions(request, runtime);
}

model AllocatePublicIpAddressRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance to which you want to assign a public IP address.', example='i-bp1gtjxuuvwj17zr****'),
  ipAddress?: string(name='IpAddress', description='The public IP address. If you leave this parameter empty, the system randomly assigns a public IP address to the instance.', example='112.124.**.**'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='720'),
}

model AllocatePublicIpAddressResponseBody = {
  ipAddress?: string(name='IpAddress', description='The public IP address.', example='112.124.**.**'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AllocatePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocatePublicIpAddressResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   The instance to which you want to assign a public IP address must be in the **Running** or **Stopped** state.````
  * *   If `OperationLocks` in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is [locked for security reasons](~~25695~~) and cannot be assigned a public IP address.
  * *   You can assign only one public IP address to an instance. If the instance already has a public IP address, the `AllocatedAlready` error is returned.
  * *   After you assign a public IP address to an instance, you must restart the instance ([RebootInstance](~~25502~~)) or start the instance ([StartInstance](~~25500~~)) to make the public IP address take effect.
  * If an instance resides in a virtual private cloud (VPC), you can assign a public IP address to the instance or associate an elastic IP address (EIP) with the instance. For more information, see [AssociateEipAddress](~~36017~~).
  * > After you associate an EIP with an instance that resides in a VPC, you cannot assign a public IP address to the instance.
  *
  * @param request AllocatePublicIpAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AllocatePublicIpAddressResponse
 */
async function allocatePublicIpAddressWithOptions(request: AllocatePublicIpAddressRequest, runtime: Util.RuntimeOptions): AllocatePublicIpAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocatePublicIpAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   The instance to which you want to assign a public IP address must be in the **Running** or **Stopped** state.````
  * *   If `OperationLocks` in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is [locked for security reasons](~~25695~~) and cannot be assigned a public IP address.
  * *   You can assign only one public IP address to an instance. If the instance already has a public IP address, the `AllocatedAlready` error is returned.
  * *   After you assign a public IP address to an instance, you must restart the instance ([RebootInstance](~~25502~~)) or start the instance ([StartInstance](~~25500~~)) to make the public IP address take effect.
  * If an instance resides in a virtual private cloud (VPC), you can assign a public IP address to the instance or associate an elastic IP address (EIP) with the instance. For more information, see [AssociateEipAddress](~~36017~~).
  * > After you associate an EIP with an instance that resides in a VPC, you cannot assign a public IP address to the instance.
  *
  * @param request AllocatePublicIpAddressRequest
  * @return AllocatePublicIpAddressResponse
 */
async function allocatePublicIpAddress(request: AllocatePublicIpAddressRequest): AllocatePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicIpAddressWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-bp14yziiuvu3s6jn****'),
  diskIds?: string(name='diskIds', description='The IDs of disks. The value is a JSON array that consists of disk IDs. Separate the disk IDs with commas (,).', example='["d-bp14k9cxvr5uzy54****", "d-bp1dtj8v7x6u08iw****", "d-bp1c0tyj9tfli2r8****"]'),
  regionId?: string(name='regionId', description='The region ID of the automatic snapshot policy and the disks. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * *   Each disk can have only one automatic snapshot policy.
  * *   Each automatic snapshot policy can be applied to multiple disks.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['autoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['diskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyAutoSnapshotPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each disk can have only one automatic snapshot policy.
  * *   Each automatic snapshot policy can be applied to multiple disks.
  *
  * @param request ApplyAutoSnapshotPolicyRequest
  * @return ApplyAutoSnapshotPolicyResponse
 */
async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model AssignIpv6AddressesRequest {
  clientToken?: string(name='ClientToken'),
  ipv6Address?: [ string ](name='Ipv6Address', description='The IPv6 addresses that you want to assign to the ENI. You can specify up to 10 IPv6 addresses.

Example: Ipv6Address.1=2001:db8:1234:1a00::\\*\\*\\*\\*

> You must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but cannot specify both.', example='2001:db8:1234:1a00::****'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses that you want to generate at random for the ENI. Valid values: 1 to 10.

> You must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but cannot specify both.', example='1'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', description='> This parameter is in invitational preview and is unavailable for general users.'),
  ipv6PrefixCount?: int32(name='Ipv6PrefixCount', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.', example='eni-bp1iqejowblx6h8j****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssignIpv6AddressesResponseBody = {
  ipv6PrefixSets?: {
    ipv6Prefix?: [ string ](name='Ipv6Prefix')
  }(name='Ipv6PrefixSets', description='> This parameter is in invitational preview and is unavailable for general users.'),
  ipv6Sets?: {
    ipv6Address?: [ string ](name='Ipv6Address')
  }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI.'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.', example='eni-bp1iqejowblx6h8j****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignIpv6AddressesResponseBody(name='body'),
}

/**
  * You can specify IPv6 addresses within the CIDR block of the vSwitch that is connected to the ENI, or specify the number of IPv6 addresses that are automatically generated for the ENI. When you call this operation, take note of the following items:
  * *   IPv6 must be enabled for the vSwitch with which the ENI is associated. For more information, see [Enable IPv6 for a vSwitch](~~98923~~).
  * *   The ENI must be in the Available (Available) or InUse (InUse) state.
  * *   If you want to assign IPv6 addresses to a primary ENI, make sure that the instance to which the ENI is attached is in the Running (Running) or Stopped (Stopped) state.
  * *   The maximum number of IPv6 addresses that can be assigned to an ENI varies based on the instance type.
  *     *   If the ENI is in the Available (Available) state, it can be assigned a maximum of 10 IPv6 addresses.
  *     *   If the ENI is already attached to an Elastic Compute Service (ECS) instance, the maximum number of IPv6 addresses that can be assigned to the ENI varies based on the instance type. For more information, see [Overview of instance families](~~25378~~).
  * *   After the operation is called, the IPv6 addresses that are assigned to the ENI can be obtained from the response.
  *
  * @param request AssignIpv6AddressesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssignIpv6AddressesResponse
 */
async function assignIpv6AddressesWithOptions(request: AssignIpv6AddressesRequest, runtime: Util.RuntimeOptions): AssignIpv6AddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.ipv6Prefix)) {
    query['Ipv6Prefix'] = request.ipv6Prefix;
  }
  if (!Util.isUnset(request.ipv6PrefixCount)) {
    query['Ipv6PrefixCount'] = request.ipv6PrefixCount;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssignIpv6Addresses',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify IPv6 addresses within the CIDR block of the vSwitch that is connected to the ENI, or specify the number of IPv6 addresses that are automatically generated for the ENI. When you call this operation, take note of the following items:
  * *   IPv6 must be enabled for the vSwitch with which the ENI is associated. For more information, see [Enable IPv6 for a vSwitch](~~98923~~).
  * *   The ENI must be in the Available (Available) or InUse (InUse) state.
  * *   If you want to assign IPv6 addresses to a primary ENI, make sure that the instance to which the ENI is attached is in the Running (Running) or Stopped (Stopped) state.
  * *   The maximum number of IPv6 addresses that can be assigned to an ENI varies based on the instance type.
  *     *   If the ENI is in the Available (Available) state, it can be assigned a maximum of 10 IPv6 addresses.
  *     *   If the ENI is already attached to an Elastic Compute Service (ECS) instance, the maximum number of IPv6 addresses that can be assigned to the ENI varies based on the instance type. For more information, see [Overview of instance families](~~25378~~).
  * *   After the operation is called, the IPv6 addresses that are assigned to the ENI can be obtained from the response.
  *
  * @param request AssignIpv6AddressesRequest
  * @return AssignIpv6AddressesResponse
 */
async function assignIpv6Addresses(request: AssignIpv6AddressesRequest): AssignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignIpv6AddressesWithOptions(request, runtime);
}

model AssignPrivateIpAddressesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  ipv4Prefix?: [ string ](name='Ipv4Prefix', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv4PrefixCount?: int32(name='Ipv4PrefixCount', description='> 该参数正在邀测中，暂未开放使用。', example='hide'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='Secondary private IP address N to be automatically assigned from the CIDR block of the vSwitch that is connected to the ENI. Valid values of N:

*   When the ENI is in the Available (`Available`) state, the valid values of N are 1 to 50.
*   When the ENI is in the InUse (`InUse`) state, the valid values of N are subject to the instance type. For more information, see [Overview of instance families](~~25378~~).

To assign secondary private IP addresses to the ENI, you must specify `PrivateIpAddress.N` or `SecondaryPrivateIpAddressCount` but not both.', example='10.1.**.**'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount', description='The number of private IP addresses to be automatically assigned from the CIDR block of the vSwitch that is connected to the ENI.

To assign secondary private IP addresses to the ENI, you must specify `PrivateIpAddress.N` or `SecondaryPrivateIpAddressCount` but not both.', example='1'),
}

model AssignPrivateIpAddressesResponseBody = {
  assignedPrivateIpAddressesSet?: {
    ipv4PrefixSet?: {
      ipv4Prefixes?: [ string ](name='Ipv4Prefixes')
    }(name='Ipv4PrefixSet', description='> 该参数正在邀测中，暂未开放使用。'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.', example='eni-bp125p95hhdhn3ot****'),
    privateIpSet?: {
      privateIpAddress?: [ string ](name='PrivateIpAddress')
    }(name='PrivateIpSet', description='The secondary private IP addresses that are assigned to the ENI.'),
  }(name='AssignedPrivateIpAddressesSet', description='Details about the ENI and the secondary private IP addresses that are assigned to the ENI.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AssignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssignPrivateIpAddressesResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   The ENI to which you want to assign secondary private IP addresses must be in the Available (Available) or InUse (InUse) state.
  * *   When you assign secondary private IP addresses to a primary ENI, the instance to which the ENI is attached must be in the Running (Running) or Stopped (Stopped) state.
  * *   When an ENI is in the Available state, you can assign up to 50 secondary private IP addresses to it. When an ENI is attached to an instance, the number of secondary private IP addresses that can be assigned to the ENI is subject to the instance type. For more information, see [Overview of instance families](~~25378~~).
  * *   After you call this operation for an ENI, you can obtain the secondary private IP addresses that are assigned to the ENI from the response.
  *
  * @param request AssignPrivateIpAddressesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssignPrivateIpAddressesResponse
 */
async function assignPrivateIpAddressesWithOptions(request: AssignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ipv4Prefix)) {
    query['Ipv4Prefix'] = request.ipv4Prefix;
  }
  if (!Util.isUnset(request.ipv4PrefixCount)) {
    query['Ipv4PrefixCount'] = request.ipv4PrefixCount;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryPrivateIpAddressCount)) {
    query['SecondaryPrivateIpAddressCount'] = request.secondaryPrivateIpAddressCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssignPrivateIpAddresses',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * *   The ENI to which you want to assign secondary private IP addresses must be in the Available (Available) or InUse (InUse) state.
  * *   When you assign secondary private IP addresses to a primary ENI, the instance to which the ENI is attached must be in the Running (Running) or Stopped (Stopped) state.
  * *   When an ENI is in the Available state, you can assign up to 50 secondary private IP addresses to it. When an ENI is attached to an instance, the number of secondary private IP addresses that can be assigned to the ENI is subject to the instance type. For more information, see [Overview of instance families](~~25378~~).
  * *   After you call this operation for an ENI, you can obtain the secondary private IP addresses that are assigned to the ENI from the response.
  *
  * @param request AssignPrivateIpAddressesRequest
  * @return AssignPrivateIpAddressesResponse
 */
async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressesWithOptions(request, runtime);
}

model AssociateEipAddressRequest {
  allocationId?: string(name='AllocationId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request AssociateEipAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssociateEipAddressResponse
 */
// Deprecated
async function associateEipAddressWithOptions(request: AssociateEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateEipAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request AssociateEipAddressRequest
  * @return AssociateEipAddressResponse
 */
// Deprecated
async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressWithOptions(request, runtime);
}

model AssociateHaVipRequest {
  clientToken?: string(name='ClientToken'),
  haVipId?: string(name='HaVipId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request AssociateHaVipRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AssociateHaVipResponse
 */
// Deprecated
async function associateHaVipWithOptions(request: AssociateHaVipRequest, runtime: Util.RuntimeOptions): AssociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateHaVip',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request AssociateHaVipRequest
  * @return AssociateHaVipResponse
 */
// Deprecated
async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateHaVipWithOptions(request, runtime);
}

model AttachClassicLinkVpcRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance that is deployed in the classic network. You can call the [DescribeInstances](~~25506~~) operation to query available instances.', example='i-bp1gtjxuuvwj17zr****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', description='The ID of the VPC for which the ClassicLink feature is enabled. You can call the [DescribeVpcs](~~35739~~) operation to query available VPCs.', example='vpc-bp1j4z1sr8zxu4l8u****'),
}

model AttachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachClassicLinkVpcResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The instance that you want to connect to a VPC must be in the **Running** or **Stopped** state.
  * *   The ClassicLink feature must be enabled for the destination VPC. For more information, see [Create a ClassicLink connection](~~65413~~).
  * *   The instance and the VPC must reside in the same region.
  *
  * @param request AttachClassicLinkVpcRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachClassicLinkVpcResponse
 */
async function attachClassicLinkVpcWithOptions(request: AttachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): AttachClassicLinkVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachClassicLinkVpc',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The instance that you want to connect to a VPC must be in the **Running** or **Stopped** state.
  * *   The ClassicLink feature must be enabled for the destination VPC. For more information, see [Create a ClassicLink connection](~~65413~~).
  * *   The instance and the VPC must reside in the same region.
  *
  * @param request AttachClassicLinkVpcRequest
  * @return AttachClassicLinkVpcResponse
 */
async function attachClassicLinkVpc(request: AttachClassicLinkVpcRequest): AttachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachClassicLinkVpcWithOptions(request, runtime);
}

model AttachDiskRequest {
  bootable?: boolean(name='Bootable', description='Specifies whether to attach the disk as a system disk.

Default value: false.

> If you set `Bootable` to true, the instance must be in the No System Disk state.', example='false'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the disk when the instance is released. Valid values:

*   true: releases the disk when the instance is released.
*   false: does not release the data disk when the instance is released. The disk is retained as a pay-as-you-go data disk.

Default value: false.

When you specify this parameter, take note of the following items:

*   If `OperationLocks` in the DescribeInstances response contains `"LockReason" : "security"` for the instance to which the disk is attached, the instance is locked for security reasons. Regardless of whether you set `DeleteWithInstance` to `false`, the DeleteWithInstance parameter is ignored, and the disk is released when the instance is released.
*   You cannot specify this parameter for disks for which the multi-attach feature is enabled.', example='false'),
  device?: string(name='Device', description='The device name of the disk.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure compatibility.', example='testDeviceName'),
  diskId?: string(name='DiskId', description='The ID of the disk. The disk specified by the `DiskId` parameter and the instance specified by the `InstanceId` parameter must reside in the same zone.

> For more information about the limits on attaching a data disk and a system disk, see the "Usage notes" section of this topic.', example='d-bp1j4l5axzdy6ftk****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which you want to attach the disk.', example='i-bp1dq5lozx5f4pmd****'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair that you bind to the Linux instance when you attach the system disk.

*   Windows instances do not support logons based on SSH key pairs. The `Password` parameter takes effect even if the KeyPairName parameter is specified.
*   For Linux instances, the username and password-based logon method is disabled by default.', example='KeyPairTestName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password that is set when you attach the system disk. The password is applicable only to the administrator and root users. The password must be 8 to 30 characters in length and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. The following special characters are supported:

    ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/

For Windows instances, passwords cannot start with a forward slash (/).

> If `Password` is configured, we recommend that you send requests over HTTPS to prevent password leaks.', example='EcsV587!'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AttachDiskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk that you want to attach must be in the **Available** state.``
  * *   When the disk is attached as a data disk, take note of the following items:
  *     *   The instance must be in the **Running** or **Stopped** state.````
  *     *   If the disk was separately purchased, the billing method of the disk must be pay-as-you-go.
  *     *   If the disk is a system disk detached from an instance, no limits apply to the billing method of the disk.
  * *   When the disk is attached as a system disk, take note of the following items:
  *     *   The instance must be the original instance from which the system disk was detached.
  *     *   The instance must be in the **Stopped** state.``
  *     *   The logon credentials must be configured.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query the information of the instance, the instance is locked for security reasons and all operations are prohibited on the instance.
  *
  * @param request AttachDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachDiskResponse
 */
async function attachDiskWithOptions(request: AttachDiskRequest, runtime: Util.RuntimeOptions): AttachDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bootable)) {
    query['Bootable'] = request.bootable;
  }
  if (!Util.isUnset(request.deleteWithInstance)) {
    query['DeleteWithInstance'] = request.deleteWithInstance;
  }
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk that you want to attach must be in the **Available** state.``
  * *   When the disk is attached as a data disk, take note of the following items:
  *     *   The instance must be in the **Running** or **Stopped** state.````
  *     *   If the disk was separately purchased, the billing method of the disk must be pay-as-you-go.
  *     *   If the disk is a system disk detached from an instance, no limits apply to the billing method of the disk.
  * *   When the disk is attached as a system disk, take note of the following items:
  *     *   The instance must be the original instance from which the system disk was detached.
  *     *   The instance must be in the **Stopped** state.``
  *     *   The logon credentials must be configured.
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query the information of the instance, the instance is locked for security reasons and all operations are prohibited on the instance.
  *
  * @param request AttachDiskRequest
  * @return AttachDiskResponse
 */
async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDiskWithOptions(request, runtime);
}

model AttachInstanceRamRoleRequest {
  instanceIds?: string(name='InstanceIds', example='[“i-bp14ss25xca5ex1u****”, “i-bp154z5o1qjalfse****”, “i-bp10ws62o04ubhvi****”…]'),
  ownerId?: long(name='OwnerId'),
  policy?: string(name='Policy', example='{"Statement": [{"Action": ["*"],"Effect": "Allow","Resource": ["*"]}],"Version":"1"}'),
  ramRoleName?: string(name='RamRoleName', example='testRamRoleName'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AttachInstanceRamRoleResponseBody = {
  attachInstanceRamRoleResults?: {
    attachInstanceRamRoleResult?: [ 
    {
      code?: string(name='Code', example='200'),
      instanceId?: string(name='InstanceId', example='i-bp10ws62o04ubhvi****'),
      message?: string(name='Message', example='success'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='AttachInstanceRamRoleResult')
  }(name='AttachInstanceRamRoleResults'),
  failCount?: int32(name='FailCount', example='0'),
  ramRoleName?: string(name='RamRoleName', example='testRamRoleName'),
  requestId?: string(name='RequestId', example='D9553E4C-6C3A-4D66-AE79-9835AF705639'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model AttachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachInstanceRamRoleResponseBody(name='body'),
}

async function attachInstanceRamRoleWithOptions(request: AttachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): AttachInstanceRamRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachInstanceRamRole',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachInstanceRamRole(request: AttachInstanceRamRoleRequest): AttachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachInstanceRamRoleWithOptions(request, runtime);
}

model AttachKeyPairRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of instances to which you want to bind the SSH key pair. The value can be a JSON array that consists of up to 50 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp1gtjxuuvwj17zr****", "i-bp17b7zrsbjwvmfy****", … "i-bp1h6jmbefj1ytos****"]'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the SSH key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AttachKeyPairResponseBody = {
  failCount?: string(name='FailCount', description='The number of instances to which the SSH key pair fails to be bound.', example='0'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', description='The operation status code returned. 200 indicates that the operation was successful.', example='200'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-m5eg7be9ndloji64****'),
      message?: string(name='Message', description='The operation information returned. When the value of Code is 200, the value of Message is successful.', example='successful'),
      success?: string(name='Success', description='Indicates whether the request was successful.', example='true'),
    }
  ](name='Result')
  }(name='Results', description='An array that contains the results of the operation.'),
  totalCount?: string(name='TotalCount', description='The total number of instances to which the SSH key pair is bound.', example='2'),
}

model AttachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachKeyPairResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   SSH key pairs are not supported on Windows instances.
  * *   If an SSH key pair is bound to an instance, authentication by using the username and password is disabled for the instance.
  * *   If you bind an SSH key pair to an instance in the **running** state, you must call the [RebootInstance](~~25502~~) operation to restart the instance for the key pair to take effect.
  * *   If you bind an SSH key pair to an instance in the **stopped** state, you must call the [StartInstance](~~25500~~) operation to start the instance for the key pair to take effect.
  * *   If an instance is already bound to an SSH key pair, the new SSH key pair will replace the original one.
  *
  * @param request AttachKeyPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachKeyPairResponse
 */
async function attachKeyPairWithOptions(request: AttachKeyPairRequest, runtime: Util.RuntimeOptions): AttachKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachKeyPair',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   SSH key pairs are not supported on Windows instances.
  * *   If an SSH key pair is bound to an instance, authentication by using the username and password is disabled for the instance.
  * *   If you bind an SSH key pair to an instance in the **running** state, you must call the [RebootInstance](~~25502~~) operation to restart the instance for the key pair to take effect.
  * *   If you bind an SSH key pair to an instance in the **stopped** state, you must call the [StartInstance](~~25500~~) operation to start the instance for the key pair to take effect.
  * *   If an instance is already bound to an SSH key pair, the new SSH key pair will replace the original one.
  *
  * @param request AttachKeyPairRequest
  * @return AttachKeyPairResponse
 */
async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachKeyPairWithOptions(request, runtime);
}

model AttachNetworkInterfaceRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp16qstyvxj9gpqw****'),
  networkCardIndex?: int32(name='NetworkCardIndex', description='The index of the network interface controller (NIC).

> The value of this parameter varies based on the instance family of the specified instance. If the instance type of the specified instance does not support NICs, leave this parameter empty. If the instance type of the specified instance supports NICs, set this parameter to a valid value. For information about the valid values of this parameter, see [Instance families](~~25378~~).', example='0'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp17pdijfczax1huji****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='The ID of the trunk ENI.

> This parameter is unavailable.', example='eni-f8zapqwj1v1j4ia3****'),
  waitForNetworkConfigurationReady?: boolean(name='WaitForNetworkConfigurationReady', description='> This parameter is no longer supported.', example='null'),
}

model AttachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model AttachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AttachNetworkInterfaceResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   The ENI must be in the **Available** state. You can attach an ENI to only one instance that resides in the same zone and VPC as the ENI.``
  * *   The instance must be in the Running or Stopped state. When you attach ENIs to instances of specific instance types, make sure that the instances are in the Stopped state. For more information, see the "Instance types of the ECS instances that must be in the Stopped (Stopped) state" section in the [Bind an ENI](~~58503~~) topic.
  *     **
  *     **Note**If the last start time of the instance (including the start time of the instance if it is a new instance, the last restart time of the instance, and the last reactivation time of the instance) is before April 1st, 2018 and the instance is in the Running state, you must call the RebootInstance operation to restart the instance. If you do not call the RebootInstance operation to restart the instance, you cannot attach the ENI to the instance.
  * *   You can attach multiple ENIs to one instance. For more information, see [ENI overview](~~58496~~).
  * *   The vSwitch to which the ENI is connected must be in the same zone and VPC as the vSwitch to which the instance is connected.
  * *   This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status or events of the ENI to check whether the ENI is attached. The following figure shows the transitions between the statuses of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/zh-CN/20221124/esgu/AttachNetworkInterface.jpg) If the ENI is in the Attaching state, the ENI attachment request is sent and the ENI is being attached to the specified instance. If the ENI is in the InUse state, the ENI is attached to the specified instance. If the ENI is in the Available state, the ENI failed to be attached.
  * **For examples on how to call this operation, see **[Attach an ENI](~~471550~~).
  *
  * @param request AttachNetworkInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AttachNetworkInterfaceResponse
 */
async function attachNetworkInterfaceWithOptions(request: AttachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): AttachNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkCardIndex)) {
    query['NetworkCardIndex'] = request.networkCardIndex;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trunkNetworkInstanceId)) {
    query['TrunkNetworkInstanceId'] = request.trunkNetworkInstanceId;
  }
  if (!Util.isUnset(request.waitForNetworkConfigurationReady)) {
    query['WaitForNetworkConfigurationReady'] = request.waitForNetworkConfigurationReady;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachNetworkInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   The ENI must be in the **Available** state. You can attach an ENI to only one instance that resides in the same zone and VPC as the ENI.``
  * *   The instance must be in the Running or Stopped state. When you attach ENIs to instances of specific instance types, make sure that the instances are in the Stopped state. For more information, see the "Instance types of the ECS instances that must be in the Stopped (Stopped) state" section in the [Bind an ENI](~~58503~~) topic.
  *     **
  *     **Note**If the last start time of the instance (including the start time of the instance if it is a new instance, the last restart time of the instance, and the last reactivation time of the instance) is before April 1st, 2018 and the instance is in the Running state, you must call the RebootInstance operation to restart the instance. If you do not call the RebootInstance operation to restart the instance, you cannot attach the ENI to the instance.
  * *   You can attach multiple ENIs to one instance. For more information, see [ENI overview](~~58496~~).
  * *   The vSwitch to which the ENI is connected must be in the same zone and VPC as the vSwitch to which the instance is connected.
  * *   This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status or events of the ENI to check whether the ENI is attached. The following figure shows the transitions between the statuses of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/zh-CN/20221124/esgu/AttachNetworkInterface.jpg) If the ENI is in the Attaching state, the ENI attachment request is sent and the ENI is being attached to the specified instance. If the ENI is in the InUse state, the ENI is attached to the specified instance. If the ENI is in the Available state, the ENI failed to be attached.
  * **For examples on how to call this operation, see **[Attach an ENI](~~471550~~).
  *
  * @param request AttachNetworkInterfaceRequest
  * @return AttachNetworkInterfaceResponse
 */
async function attachNetworkInterface(request: AttachNetworkInterfaceRequest): AttachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachNetworkInterfaceWithOptions(request, runtime);
}

model AuthorizeSecurityGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of the security group rule.', example='This is description.'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='ALL'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:250:6000::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:250:6000::***'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of security group rule N. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of security group rule N. The values of this parameter are case-insensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='ALL'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> This parameter takes effect only if the destinations are ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot specify this parameter and `DestCidrIp` at the same time.', example='2001:250:6000::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> This parameter takes effect only if the sources are ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot specify this parameter and `SourceCidrIp` at the same time.', example='2001:250:6000::***'),
      nicType?: string(name='NicType', description='The network interface controller (NIC) type of security group rule N when the security group is in the classic network. Valid values:

*   internet: public NIC
*   intranet: internal NIC

If the security group is of the VPC type, you must set this parameter to intranet.

If you specify only DestGroupId when you configure access between security groups, you must set this parameter to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow inbound access. Valid values:

*   accept: allows inbound access.
*   drop: denies inbound access and does not return responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set Permissions.N.IpProtocol to GRE, the port number range is -1/-1.
*   If you set Permissions.N.IpProtocol to ALL, the port number range is -1/-1.

For more information, see [Common ports](~~40724~~).

Valid values of N: 1 to 100.', example='80/80'),
      priority?: string(name='Priority', description='The priority of security group rule N. A smaller value specifies a higher priority. Valid values: 1 to 100.

Default value: 1.

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourceGroupId?: string(name='SourceGroupId', description='The ID of the source security group that you want to reference in the security group rule.

*   Specify at least one of the following parameters: `SourceGroupId`, `SourceCidrIp`, `Ipv6SourceCidrIp`, and `SourcePrefixListId`.
*   If you specify `SourceGroupId` but do not specify `SourceCidrIp` or `Ipv6SourceCidrIp`, you must set `NicType` to `intranet`.
*   If you specify `SourceGroupId` and `SourceCidrIp`, `SourceCidrIp` takes precedence.

Valid values of N: 1 to 100.

Take note of the following items:

*   You cannot reference security groups as destinations or sources in the rules of advanced security groups.
*   You can reference up to 20 security groups as destinations or sources in the rules of each basic security group.', example='sg-bp67acfmxazb4p****'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group when you configure a security group rule across accounts.

*   If you do not specify `SourceGroupOwnerAccount` and `SourceGroupOwnerId`, access permissions are configured for another security group managed by your account.
*   If you specify `SourceCidrIp`, `SourceGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='test@aliyun.com'),
      sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the source security group when you configure a security group rule across accounts.

*   If you do not specify `SourceGroupOwnerAccount` and `SourceGroupOwnerId`, access permissions are configured for another security group managed by your account.
*   If you specify `SourceCidrIp`, `SourceGroupOwnerAccount` becomes invalid.

Valid values of N: 1 to 100.', example='1234567890'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   If you set Permissions.N.IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set Permissions.N.IpProtocol to ICMP, the port number range is -1/-1.
*   If you set Permissions.N.IpProtocol to GRE, the port number range is -1/-1.
*   If you set Permissions.N.IpProtocol to ALL, the port number range is -1/-1.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='7000/8000'),
      sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list that you want to reference in the security group rule. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

Valid values of N: 1 to 100.

Take note of the following items:

*   If the network type of a security group is classic network, you cannot reference prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section of the [Limits](~~25412#SecurityGroupQuota1~~) topic.
*   If you specify the `SourceCidrIp`, `Ipv6SourceCidrIp`, or `SourceGroupId` parameter, this parameter is ignored.', example='pl-x1j1k5ykzqlixdcy****'),
    }
  ](name='Permissions', description='The security group rules. You can specify up to 100 security group rules.'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to allow inbound access.', example='accept'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='22/22'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the rule priority.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8'),
  sourceGroupId?: string(name='SourceGroupId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupId` to specify the ID of the source security group.', example='sg-bp67acfmxazb4p****'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerAccount` to specify the Alibaba Cloud account that manages the source security group.', example='test@aliyun.com'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the source security group.', example='1234567890'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='22/22'),
  sourcePrefixListId?: string(name='SourcePrefixListId', description='This parameter is deprecated. Use `Permissions.N.SourcePrefixListId` to specify the ID of the source prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model AuthorizeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeSecurityGroupResponseBody(name='body'),
}

/**
  * In security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section of the [Limits](~~25412#SecurityGroupQuota1~~) topic.
  * *   The valid value of Priority ranges from 1 to 100. A smaller value specifies a higher priority.
  * *   If several security group rules have the same priority, drop rules take precedence.
  * *   The source can be a CIDR block that is specified by SourceCidrIp, Ipv6SourceCidrIp, or SourcePrefixListId. The source can also be Elastic Compute Service (ECS) instances in a security group that is specified by SourceGroupId.
  * *   You cannot reference security groups as sources or destinations in the rules of advanced security groups.
  * *   You can reference up to 20 security groups as sources or destinations in the rules of each basic security group.
  * *   If the specified security group rule already exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to specific parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be specified together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
  *     *   Parameters used to determine an inbound security group rule that controls access from a specific CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and SourceCidrIp. For a security group of the Virtual Private Cloud (VPC) type, you must set the NicType parameter to intranet. For a security group of the classic network type, you can set the NicType parameter to either internet or intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceCidrIp=10.0.0.0/8
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to determine an inbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceGroupOwnerAccount, and SourceGroupId. In this case, you must set the NicType parameter to intranet. To manage access between security groups in the classic network, you can allow or deny access from another security group within the same region to your security group. The security group that is allowed to access your security group can belong to your Alibaba Cloud account or another Alibaba Cloud account that is specified by SourceGroupOwnerAccount. To manage access between security groups in VPCs, you can allow or deny access from another security group within the same VPC to your security group. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceGroupId=sg-1651FBB**
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to determine an inbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and SourcePrefixListId. If you specify this group of parameters, prefix lists support only security groups in VPCs. You must set NicType to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourcePrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  * *   For examples on how to configure security group rules, see [Security groups for different use cases](~~25475~~) and [Security group quintuple rules](~~97439~~).
  *
  * @param request AuthorizeSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AuthorizeSecurityGroupResponse
 */
async function authorizeSecurityGroupWithOptions(request: AuthorizeSecurityGroupRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissions)) {
    query['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourceGroupId)) {
    query['SourceGroupId'] = request.sourceGroupId;
  }
  if (!Util.isUnset(request.sourceGroupOwnerAccount)) {
    query['SourceGroupOwnerAccount'] = request.sourceGroupOwnerAccount;
  }
  if (!Util.isUnset(request.sourceGroupOwnerId)) {
    query['SourceGroupOwnerId'] = request.sourceGroupOwnerId;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.sourcePrefixListId)) {
    query['SourcePrefixListId'] = request.sourcePrefixListId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section of the [Limits](~~25412#SecurityGroupQuota1~~) topic.
  * *   The valid value of Priority ranges from 1 to 100. A smaller value specifies a higher priority.
  * *   If several security group rules have the same priority, drop rules take precedence.
  * *   The source can be a CIDR block that is specified by SourceCidrIp, Ipv6SourceCidrIp, or SourcePrefixListId. The source can also be Elastic Compute Service (ECS) instances in a security group that is specified by SourceGroupId.
  * *   You cannot reference security groups as sources or destinations in the rules of advanced security groups.
  * *   You can reference up to 20 security groups as sources or destinations in the rules of each basic security group.
  * *   If the specified security group rule already exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to specific parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be specified together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
  *     *   Parameters used to determine an inbound security group rule that controls access from a specific CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and SourceCidrIp. For a security group of the Virtual Private Cloud (VPC) type, you must set the NicType parameter to intranet. For a security group of the classic network type, you can set the NicType parameter to either internet or intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceCidrIp=10.0.0.0/8
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to determine an inbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceGroupOwnerAccount, and SourceGroupId. In this case, you must set the NicType parameter to intranet. To manage access between security groups in the classic network, you can allow or deny access from another security group within the same region to your security group. The security group that is allowed to access your security group can belong to your Alibaba Cloud account or another Alibaba Cloud account that is specified by SourceGroupOwnerAccount. To manage access between security groups in VPCs, you can allow or deny access from another security group within the same VPC to your security group. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourceGroupId=sg-1651FBB**
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to determine an inbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and SourcePrefixListId. If you specify this group of parameters, prefix lists support only security groups in VPCs. You must set NicType to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroup
  *             &SecurityGroupId=sg-bp67acfmxazb4p****
  *             &Permissions.1.SourcePrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.SourceGroupOwnerAccount=test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  * *   For examples on how to configure security group rules, see [Security groups for different use cases](~~25475~~) and [Security group quintuple rules](~~97439~~).
  *
  * @param request AuthorizeSecurityGroupRequest
  * @return AuthorizeSecurityGroupResponse
 */
async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupWithOptions(request, runtime);
}

model AuthorizeSecurityGroupEgressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of security group rule N.', example='This is description.'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8'),
  destGroupId?: string(name='DestGroupId', description='This parameter is deprecated. Use `Permissions.N.DestGroupId` to specify the ID of the destination security group.', example='sg-bp67acfmxazb4p****'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerAccount` to specify the Alibaba Cloud account that manages the destination security group.', example='Test@aliyun.com'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the destination security group.', example='12345678910'),
  destPrefixListId?: string(name='DestPrefixListId', description='This parameter is deprecated. Use `Permissions.N.DestPrefixListId` to specify the ID of the destination prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='ALL'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6DestCidrIp` to specify the destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:db8:1234:1a00::***'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of security group rule N. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      destGroupId?: string(name='DestGroupId', description='The ID of the destination security group to be referenced in security group rule N.

*   At least one of `DestGroupId`, `DestCidrIp`, `Ipv6DestCidrIp`, and `DestPrefixListId` must be configured.
*   If `DestGroupId` is configured but `DestCidrIp` is not configured, the value of `NicType` must be set to intranet.
*   If both `DestGroupId` and `DestCidrIp` are configured, the value of `DestCidrIp` prevails by default.

Valid values of N: 1 to 100.

Take note of the following items:

*   For advanced security groups, security groups cannot be used as authorization objects.
*   For each basic security group, a maximum of 20 security groups can be used as authorization objects.', example='sg-bp67acfmxazb4p****'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group when you configure security group rule N across accounts.

*   If both `DestGroupOwnerAccount` and `DestGroupOwnerId` are not configured, the rule is created to control access to another security group within your Alibaba Cloud account.
*   If `DestCidrIp` is configured, `DestGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='Test@aliyun.com'),
      destGroupOwnerId?: long(name='DestGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the destination security group when you configure security group rule N across accounts.

*   If both `DestGroupOwnerId` and `DestGroupOwnerAccount` are not configured, the rule is created to control access to another security group within your Alibaba Cloud account.
*   If `DestCidrIp` is configured, `DestGroupOwnerId` is ignored.

Valid values of N: 1 to 100.', example='12345678910'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list to be referenced in security group rule N. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

Take note of the following items:

*   If a security group is in the classic network, you cannot reference prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you configured `DestCidrIp`, `Ipv6DestCidrIp`, or `DestGroupId`, DestPrefixListId is ignored.

Valid values of N: 1 to 100.', example='pl-x1j1k5ykzqlixdcy****'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of security group rule N. The value of this parameter is case-insensitive. Valid values:

*   TCP.
*   UDP.
*   ICMP.
*   ICMPv6.
*   GRE.
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='ALL'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> This parameter takes effect only when the destination is ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot configure both this parameter and `DestCidrIp`.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> This parameter takes effect only when the source is ECS instances that reside in VPCs and support IPv6 CIDR blocks. You cannot configure both this parameter and `SourceCidrIp`.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network interface controller (NIC) type of security group rule N when the security group is in the classic network. Valid values:

*   internet: public NIC

*   intranet: internal NIC

    *   If the security group is in a VPC, this parameter is set to intranet by default and cannot be changed.
    *   If you configure only DestGroupId when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow outbound access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.

Valid values of N: 1 to 100.', example='80/80'),
      priority?: string(name='Priority', description='The priority of security group rule N. A smaller value indicates a higher priority. Valid values: 1 to 100.

Default value: 1.

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for security group rule N. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='80/80'),
    }
  ](name='Permissions', description='The security group rules. Valid values of N: 1 to 100.'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to allow outbound access.', example='accept'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='80/80'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the rule priority.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the source security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-bp67acfmxazb4p****'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='80/80'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

/**
  * In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section in [](~~25412#SecurityGroupQuota1~~).
  * *   You can set Policy to accept or drop for each security group rule to allow or deny access.
  * *   The valid value of Priority ranges from 1 to 100. A smaller value indicates a higher priority.
  * *   When several security group rules have the same priority, drop rules take precedence.
  * *   The destination can be a CIDR block specified by DestCidrIp, Ipv6DestCidrIp, or DestPrefixListId or can be Elastic Compute Service (ECS) instances in a security group specified by DestGroupId.
  * *   For advanced security groups, security groups cannot be used as authorization objects.
  * *   For each basic security group, a maximum of 20 security groups can be used as authorization objects.
  * *   If the specified security group rule exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to some parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be configured together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by configuring one of the following groups of parameters. You cannot determine a security group rule by configuring only one parameter.
  *     *   Parameters used to specify a security group rule that controls access to a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestCidrIp. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.IpProtocol=ICMP
  *             &Permissions.1.DestCidrIp=10.0.0.0/8
  *             &Permissions.1.PortRange=-1/-1
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestGroupOwnerAccount, and DestGroupId. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestGroupId=sg-bp67acfmxazb4pi***
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestPrefixListId. In this case, prefix lists support only security groups in virtual private clouds (VPCs). NicType must be set to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *
  * @param request AuthorizeSecurityGroupEgressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AuthorizeSecurityGroupEgressResponse
 */
async function authorizeSecurityGroupEgressWithOptions(request: AuthorizeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.destGroupId)) {
    query['DestGroupId'] = request.destGroupId;
  }
  if (!Util.isUnset(request.destGroupOwnerAccount)) {
    query['DestGroupOwnerAccount'] = request.destGroupOwnerAccount;
  }
  if (!Util.isUnset(request.destGroupOwnerId)) {
    query['DestGroupOwnerId'] = request.destGroupOwnerId;
  }
  if (!Util.isUnset(request.destPrefixListId)) {
    query['DestPrefixListId'] = request.destPrefixListId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissions)) {
    query['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeSecurityGroupEgress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you call this operation, take note of the following items:
  * *   The total number of inbound and outbound security group rules in each security group cannot exceed 200. For more information, see the "Security group limits" section in [](~~25412#SecurityGroupQuota1~~).
  * *   You can set Policy to accept or drop for each security group rule to allow or deny access.
  * *   The valid value of Priority ranges from 1 to 100. A smaller value indicates a higher priority.
  * *   When several security group rules have the same priority, drop rules take precedence.
  * *   The destination can be a CIDR block specified by DestCidrIp, Ipv6DestCidrIp, or DestPrefixListId or can be Elastic Compute Service (ECS) instances in a security group specified by DestGroupId.
  * *   For advanced security groups, security groups cannot be used as authorization objects.
  * *   For each basic security group, a maximum of 20 security groups can be used as authorization objects.
  * *   If the specified security group rule exists in the security group, the call is successful but no security group rule is created.
  * *   The `Permissions.N` prefix is added to some parameters to generate new parameters. Original parameters and corresponding parameters prefixed with Permissions.N cannot be configured together. We recommend that you use parameters prefixed with `Permissions.N`.
  * *   You can determine a security group rule by configuring one of the following groups of parameters. You cannot determine a security group rule by configuring only one parameter.
  *     *   Parameters used to specify a security group rule that controls access to a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestCidrIp. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.IpProtocol=ICMP
  *             &Permissions.1.DestCidrIp=10.0.0.0/8
  *             &Permissions.1.PortRange=-1/-1
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Accept
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestGroupOwnerAccount, and DestGroupId. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestGroupId=sg-bp67acfmxazb4pi***
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *     *   Parameters used to specify a security group rule that controls access to a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, and DestPrefixListId. In this case, prefix lists support only security groups in virtual private clouds (VPCs). NicType must be set to intranet. Sample request:
  *             http(s)://ecs.aliyuncs.com/?Action=AuthorizeSecurityGroupEgress
  *             &SecurityGroupId=sg-bp67acfmxazb4ph***
  *             &Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy****
  *             &Permissions.1.DestGroupOwnerAccount=Test@aliyun.com
  *             &Permissions.1.IpProtocol=TCP
  *             &Permissions.1.PortRange=22/22
  *             &Permissions.1.NicType=intranet
  *             &Permissions.1.Policy=Drop
  *             &<Common request parameters>
  *
  * @param request AuthorizeSecurityGroupEgressRequest
  * @return AuthorizeSecurityGroupEgressResponse
 */
async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupEgressWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId', example='155780923770'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
  diskIds?: string(name='diskIds', description='The IDs of the disks for which you want to disable the automatic snapshot policy. To disable the automatic snapshot policy for multiple disks, you can set this parameter to a JSON array that consists of multiple disk IDs, such as \\["dxxxxxxxxx", "dyyyyyyyyy", … "dzzzzzzzzz"]. Separate the disk IDs with commas (,).', example='["d-bp14k9cxvr5uzy54****", "d-bp1dtj8v7x6u08iw****", "d-bp1c0tyj9tfli2r8****"]'),
  regionId?: string(name='regionId', description='The region ID of the automatic snapshot policy and the disks. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['diskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelAutoSnapshotPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelCopyImageRequest {
  imageId?: string(name='ImageId', description='The ID of the image that is being copied.', example='m-bp1caf3yicx5jlfl****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image copy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelCopyImageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After you cancel an image copy task, the image copy created in the destination region is deleted, and the copied image remains unchanged.
  * *   If the image copy task is complete, the CancelCopyImage operation fails, and an error is returned.
  *
  * @param request CancelCopyImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelCopyImageResponse
 */
async function cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: Util.RuntimeOptions): CancelCopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelCopyImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   After you cancel an image copy task, the image copy created in the destination region is deleted, and the copied image remains unchanged.
  * *   If the image copy task is complete, the CancelCopyImage operation fails, and an error is returned.
  *
  * @param request CancelCopyImageRequest
  * @return CancelCopyImageResponse
 */
async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCopyImageWithOptions(request, runtime);
}

model CancelImagePipelineExecutionRequest {
  executionId?: string(name='ExecutionId', description='The ID of the image build task.', example='exec-5fb8facb8ed7427c****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image build task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='>  This parameter is deprecated.', example='null'),
      value?: string(name='Value', description='>  This parameter is deprecated.', example='null'),
    }
  ](name='TemplateTag', description='> This parameter is deprecated.'),
}

model CancelImagePipelineExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelImagePipelineExecutionResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that the image build task to be canceled is in the BUILDING, DISTRIBUTING, or RELEASING state.
  *
  * @param request CancelImagePipelineExecutionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelImagePipelineExecutionResponse
 */
async function cancelImagePipelineExecutionWithOptions(request: CancelImagePipelineExecutionRequest, runtime: Util.RuntimeOptions): CancelImagePipelineExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.executionId)) {
    query['ExecutionId'] = request.executionId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelImagePipelineExecution',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that the image build task to be canceled is in the BUILDING, DISTRIBUTING, or RELEASING state.
  *
  * @param request CancelImagePipelineExecutionRequest
  * @return CancelImagePipelineExecutionResponse
 */
async function cancelImagePipelineExecution(request: CancelImagePipelineExecutionRequest): CancelImagePipelineExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelImagePipelineExecutionWithOptions(request, runtime);
}

model CancelPhysicalConnectionRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelPhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CancelPhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CancelPhysicalConnectionResponse
 */
// Deprecated
async function cancelPhysicalConnectionWithOptions(request: CancelPhysicalConnectionRequest, runtime: Util.RuntimeOptions): CancelPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelPhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CancelPhysicalConnectionRequest
  * @return CancelPhysicalConnectionResponse
 */
// Deprecated
async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPhysicalConnectionWithOptions(request, runtime);
}

model CancelSimulatedSystemEventsRequest {
  eventId?: [ string ](name='EventId', description='The IDs of simulated system events. You can specify up to 100 event IDs in a single request.', example='e-xhskHun1256****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CancelSimulatedSystemEventsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelSimulatedSystemEventsResponseBody(name='body'),
}

async function cancelSimulatedSystemEventsWithOptions(request: CancelSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CancelSimulatedSystemEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelSimulatedSystemEvents',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelSimulatedSystemEvents(request: CancelSimulatedSystemEventsRequest): CancelSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelSimulatedSystemEventsWithOptions(request, runtime);
}

model CancelTaskRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the task. You can call the [DescribeTasks](~~25622~~) operation to query the list of task IDs.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  taskId?: string(name='TaskId', description='The ID of the request.', example='t-bp198jigq7l0h5ac****'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTaskWithOptions(request: CancelTaskRequest, runtime: Util.RuntimeOptions): CancelTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelTask',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelTaskWithOptions(request, runtime);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConnectRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConnectRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ConnectRouterInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ConnectRouterInterfaceResponse
 */
// Deprecated
async function connectRouterInterfaceWithOptions(request: ConnectRouterInterfaceRequest, runtime: Util.RuntimeOptions): ConnectRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConnectRouterInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ConnectRouterInterfaceRequest
  * @return ConnectRouterInterfaceResponse
 */
// Deprecated
async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return connectRouterInterfaceWithOptions(request, runtime);
}

model ConvertNatPublicIpToEipRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance whose public IP address you want to convert into an EIP.', example='i-bp171jr36ge2ulvk****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ConvertNatPublicIpToEipResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ConvertNatPublicIpToEipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertNatPublicIpToEipResponseBody(name='body'),
}

/**
  * After a public IP address is converted into an EIP, the EIP is billed separately. Make sure that you understand the billing methods of EIPs. For more information, see [Billing overview](~~122035~~).
  * When you call this operation, make sure that the following requirements are met:
  * *   The instance is in the `Stopped` or `Running` state.********
  * *   No EIPs are associated with the instance.
  * *   The instance has no configuration change tasks that have not taken effect.
  * *   The public bandwidth of the instance is not 0 Mbit/s.
  * *   The instance uses the pay-by-traffic billing method for network usage.
  * *   If the instance is a subscription instance that resides in a VPC, the instance does not expire within 24 hours.
  *
  * @param request ConvertNatPublicIpToEipRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ConvertNatPublicIpToEipResponse
 */
async function convertNatPublicIpToEipWithOptions(request: ConvertNatPublicIpToEipRequest, runtime: Util.RuntimeOptions): ConvertNatPublicIpToEipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConvertNatPublicIpToEip',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After a public IP address is converted into an EIP, the EIP is billed separately. Make sure that you understand the billing methods of EIPs. For more information, see [Billing overview](~~122035~~).
  * When you call this operation, make sure that the following requirements are met:
  * *   The instance is in the `Stopped` or `Running` state.********
  * *   No EIPs are associated with the instance.
  * *   The instance has no configuration change tasks that have not taken effect.
  * *   The public bandwidth of the instance is not 0 Mbit/s.
  * *   The instance uses the pay-by-traffic billing method for network usage.
  * *   If the instance is a subscription instance that resides in a VPC, the instance does not expire within 24 hours.
  *
  * @param request ConvertNatPublicIpToEipRequest
  * @return ConvertNatPublicIpToEipResponse
 */
async function convertNatPublicIpToEip(request: ConvertNatPublicIpToEipRequest): ConvertNatPublicIpToEipResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertNatPublicIpToEipWithOptions(request, runtime);
}

model CopyImageRequest {
  destinationDescription?: string(name='DestinationDescription', description='The description of the image copy. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is a description example.'),
  destinationImageName?: string(name='DestinationImageName', description='The name of the image copy. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `acs:` or `aliyun`. The name cannot contain `http://` or `https://`. The name can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).', example='YourImageName'),
  destinationRegionId?: string(name='DestinationRegionId', description='The ID of the destination region to which the source custom image is copied.', example='cn-shanghai'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='> This parameter is unavailable.', example='hide'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the image copy.

Default value: false.', example='false'),
  imageId?: string(name='ImageId', description='The ID of the source custom image.', example='m-bp1h46wfpjsjastc****'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the key used to encrypt the image copy.', example='e522b26d-abf6-4e0d-b5da-04b7******3c'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the source custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the image copy belongs. If you do not specify this parameter, the image copy belongs to the default resource group.

> If you call the CopyImage operation as a Resource Access Management (RAM) user who is not authorized to manage the default resource group and do not specify the `ResourceGroupId` parameter, the `Forbidden: User not authorized to operate on the specified resource` error message is returned. You must specify the ID of a resource group that the RAM user is authorized to manage or authorize the RAM user to manage the default resource group before you call the CreateImage operation again.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image copy. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image copy. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
}

model CopyImageResponseBody = {
  imageId?: string(name='ImageId', description='The ID of the image copy.', example='m-bp1h46wfpjsjastd****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopyImageResponseBody(name='body'),
}

/**
  * After you copy a custom image (source image) to the destination region, you can use the image copy to create ECS instances by calling the RunInstances operation or replace the system disks of the ECS instances by calling the ReplaceSystemDisk operation in the destination region.
  * When you call this operation, take note of the following items:
  * *   You can copy only custom images that are in the `Available` state.
  * *   Custom images that you want to copy must belong to your Alibaba Cloud account or be shared to you by others, and cannot be copied across accounts.
  * *   When an image is being copied, the image copy cannot be deleted by calling the [DeleteImage](~~25537~~) operation. However, you can cancel the copying task that is running by calling the [CancelCopyImage](~~25539~~) operation.
  * *   A region can have only one image copying task running at a time. Other image copying tasks queue up for the current task to complete before the tasks can run in sequence.
  * *   You can configure the `ResourceGroupId` parameter to specify the resource group to which the image copy belongs. If you do not configure the `ResourceGroupId` parameter, the image copy belongs to the default resource group.
  *
  * @param request CopyImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CopyImageResponse
 */
async function copyImageWithOptions(request: CopyImageRequest, runtime: Util.RuntimeOptions): CopyImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationDescription)) {
    query['DestinationDescription'] = request.destinationDescription;
  }
  if (!Util.isUnset(request.destinationImageName)) {
    query['DestinationImageName'] = request.destinationImageName;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.encryptAlgorithm)) {
    query['EncryptAlgorithm'] = request.encryptAlgorithm;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you copy a custom image (source image) to the destination region, you can use the image copy to create ECS instances by calling the RunInstances operation or replace the system disks of the ECS instances by calling the ReplaceSystemDisk operation in the destination region.
  * When you call this operation, take note of the following items:
  * *   You can copy only custom images that are in the `Available` state.
  * *   Custom images that you want to copy must belong to your Alibaba Cloud account or be shared to you by others, and cannot be copied across accounts.
  * *   When an image is being copied, the image copy cannot be deleted by calling the [DeleteImage](~~25537~~) operation. However, you can cancel the copying task that is running by calling the [CancelCopyImage](~~25539~~) operation.
  * *   A region can have only one image copying task running at a time. Other image copying tasks queue up for the current task to complete before the tasks can run in sequence.
  * *   You can configure the `ResourceGroupId` parameter to specify the resource group to which the image copy belongs. If you do not configure the `ResourceGroupId` parameter, the image copy belongs to the default resource group.
  *
  * @param request CopyImageRequest
  * @return CopyImageResponse
 */
async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CopySnapshotRequest {
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is unavailable.', example='0'),
      roleType?: string(name='RoleType', description='> This parameter is unavailable.', example='null'),
      rolearn?: string(name='Rolearn', description='> This parameter is unavailable.', example='null'),
    }
  ](name='Arn', description='> This parameter is currently in invitational preview and unavailable for public use.'),
  destinationRegionId?: string(name='DestinationRegionId', description='The region ID of the new snapshot.', example='us-east-1'),
  destinationSnapshotDescription?: string(name='DestinationSnapshotDescription', description='The description of the new snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='CopySnapshotDemo'),
  destinationSnapshotName?: string(name='DestinationSnapshotName', description='The name of the new snapshot. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='CopySnapshotDemo'),
  destinationStorageLocationArn?: string(name='DestinationStorageLocationArn'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.

Default value: false.', example='false'),
  KMSKeyId?: string(name='KMSKeyId', description='The customer master keys (CMK) managed by Key Management Service (KMS) in the destination region.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the source snapshot. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-chengdu'),
  resourceGroupId?: string(name='ResourceGroupId', description='This parameter is unavailable.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retentionDays?: int32(name='RetentionDays', description='The retention period of the new snapshot. Unit: days. The new snapshot is automatically released when its retention period ends. Valid values: 1 to 65536.

This parameter is empty by default, which indicates that the snapshot is not automatically released.', example='60'),
  snapshotId?: string(name='SnapshotId', description='The ID of the source snapshot.', example='s-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the new snapshot. The tag key cannot be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with acs: or aliyun or contain http:// or https://.[](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the new snapshot. The tag value can be an empty string. The tag key must be 1 to 128 characters in length. The tag key cannot start with `acs:` or `aliyun` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tag key and value of the new snapshot.'),
}

model CopySnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8B26B44-0189-443E-9816-D951F596****'),
  snapshotId?: string(name='SnapshotId', description='The ID of the new snapshot.', example='s-bp17441ohwka0yui****'),
}

model CopySnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CopySnapshotResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   New snapshots (copies) cannot be used to roll back disks from which the source snapshots (originals) were created.
  * *   Encrypted snapshots cannot be copied.
  * *   Local snapshots cannot be copied.
  *
  * @param request CopySnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CopySnapshotResponse
 */
async function copySnapshotWithOptions(request: CopySnapshotRequest, runtime: Util.RuntimeOptions): CopySnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.destinationRegionId)) {
    query['DestinationRegionId'] = request.destinationRegionId;
  }
  if (!Util.isUnset(request.destinationSnapshotDescription)) {
    query['DestinationSnapshotDescription'] = request.destinationSnapshotDescription;
  }
  if (!Util.isUnset(request.destinationSnapshotName)) {
    query['DestinationSnapshotName'] = request.destinationSnapshotName;
  }
  if (!Util.isUnset(request.destinationStorageLocationArn)) {
    query['DestinationStorageLocationArn'] = request.destinationStorageLocationArn;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopySnapshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   New snapshots (copies) cannot be used to roll back disks from which the source snapshots (originals) were created.
  * *   Encrypted snapshots cannot be copied.
  * *   Local snapshots cannot be copied.
  *
  * @param request CopySnapshotRequest
  * @return CopySnapshotResponse
 */
async function copySnapshot(request: CopySnapshotRequest): CopySnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return copySnapshotWithOptions(request, runtime);
}

model CreateActivationRequest {
  description?: string(name='Description', description='The description of the activation code. The description can be 1 to 100 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  instanceCount?: int32(name='InstanceCount', description='The maximum number of times that the activation code can be used to register managed instances. Valid values: 1 to 1000.

Default value: 10.', example='10'),
  instanceName?: string(name='InstanceName', description='The default instance name prefix. The instance name prefix must be 1 to 50 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The instance name prefix can contain only letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:).

If you use the activation code created by calling the CreateActivation operation to register managed instances, the instances are assigned sequential names that are prefixed by the value of this parameter. You can also specify a new instance name to override the assigned sequential name when you register a managed instance.

If you specify InstanceName when you register a managed instance, an instance name in the format of `<InstanceName>-<Number>` is generated. The number of digits in the \\<Number> value is determined by that in the `InstanceCount` value. Example: `001`. If you do not specify InstanceName, the hostname (Hostname) is used as the instance name.', example='test-InstanceName'),
  ipAddressRange?: string(name='IpAddressRange', description='The IP addresses of hosts that are allowed to use the activation code. The value can be IPv4 addresses, IPv6 addresses, or CIDR blocks.', example='0.0.0.0/0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the activation code. Supported regions: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the activation code. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the activation code. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the activation code.'),
  timeToLiveInHours?: long(name='TimeToLiveInHours', description='The validity period of the activation code. The activation code cannot be used to register new instances after the validity period expires. Unit: hours. Valid values: 1 to 24.

Default value: 4.', example='4'),
}

model CreateActivationResponseBody = {
  activationCode?: string(name='ActivationCode', description='The value of the activation code. The value is returned only once after the CreateActivation operation is called and cannot be subsequently queried. Make sure that you properly save the return value.', example='a-hz0ch3SwhOlE1234+Xo32lAZC****'),
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
  requestId?: string(name='RequestId', description='The request ID.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
}

model CreateActivationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateActivationResponseBody(name='body'),
}

/**
  * After you use an activation code to register a server that is not provided by Alibaba Cloud as an Alibaba Cloud managed instance, you can use a variety of online services provided by Alibaba Cloud in the managed instance, such as Cloud Assistant, Operation Orchestration Service (OOS), and Apsara Devops.
  * A server that is not provided by Alibaba Cloud can be registered as an Alibaba Cloud managed instance only when the server can access the Internet and runs an operating system of one of the following versions:
  * *   Alibaba Cloud Linux 2, Alibaba Cloud Linux 3, and later
  * *   CentOS 6, CentOS 7, CentOS 8, and later
  * *   Debian 8, Debian 9, Debian 10, and later
  * *   Ubuntu 12, Ubuntu 14, Ubuntu 16, Ubuntu 18, and later
  * *   CoreOS
  * *   OpenSUSE
  * *   Red Hat 5, Red Hat 6, Red Hat 7, and later
  * *   SUSE Linux Enterprise Server (SLES) 11, SLES 12, SLES 15, and later
  * *   Windows Server 2012, Windows Server 2016, Windows Server 2019, and later
  * You can have up to 5,000 activation codes per Alibaba Cloud region. When the number of activation codes exceeds 1,000, the usage of the activation codes must be greater than 50% before you can proceed to create more activation codes.
  * > To view the usage of activation codes, click **Activation Code** on the **Manage Instances** tab of the **Cloud Assistant** page in the Elastic Compute Service (ECS) console.
  *
  * @param request CreateActivationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateActivationResponse
 */
async function createActivationWithOptions(request: CreateActivationRequest, runtime: Util.RuntimeOptions): CreateActivationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceCount)) {
    query['InstanceCount'] = request.instanceCount;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.ipAddressRange)) {
    query['IpAddressRange'] = request.ipAddressRange;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timeToLiveInHours)) {
    query['TimeToLiveInHours'] = request.timeToLiveInHours;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateActivation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you use an activation code to register a server that is not provided by Alibaba Cloud as an Alibaba Cloud managed instance, you can use a variety of online services provided by Alibaba Cloud in the managed instance, such as Cloud Assistant, Operation Orchestration Service (OOS), and Apsara Devops.
  * A server that is not provided by Alibaba Cloud can be registered as an Alibaba Cloud managed instance only when the server can access the Internet and runs an operating system of one of the following versions:
  * *   Alibaba Cloud Linux 2, Alibaba Cloud Linux 3, and later
  * *   CentOS 6, CentOS 7, CentOS 8, and later
  * *   Debian 8, Debian 9, Debian 10, and later
  * *   Ubuntu 12, Ubuntu 14, Ubuntu 16, Ubuntu 18, and later
  * *   CoreOS
  * *   OpenSUSE
  * *   Red Hat 5, Red Hat 6, Red Hat 7, and later
  * *   SUSE Linux Enterprise Server (SLES) 11, SLES 12, SLES 15, and later
  * *   Windows Server 2012, Windows Server 2016, Windows Server 2019, and later
  * You can have up to 5,000 activation codes per Alibaba Cloud region. When the number of activation codes exceeds 1,000, the usage of the activation codes must be greater than 50% before you can proceed to create more activation codes.
  * > To view the usage of activation codes, click **Activation Code** on the **Manage Instances** tab of the **Cloud Assistant** page in the Elastic Compute Service (ECS) console.
  *
  * @param request CreateActivationRequest
  * @return CreateActivationResponse
 */
async function createActivation(request: CreateActivationRequest): CreateActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createActivationWithOptions(request, runtime);
}

model CreateAutoProvisioningGroupRequest {
  launchConfiguration?: {
    arn?: [ 
      {
        assumeRoleFor?: long(name='AssumeRoleFor', description='This parameter is unavailable for public use.', example='123456789012****'),
        roleType?: string(name='RoleType', description='This parameter is unavailable for public use.', example='34458433936495****:alice'),
        rolearn?: string(name='Rolearn', description='This parameter is unavailable for public use.', example='acs:ram::123456789012****:role/adminrole'),
      }
    ](name='Arn', description='This parameter is unavailable for public use.'),
    autoReleaseTime?: string(name='AutoReleaseTime', description='按量付费实例的自动释放时间。按照[ISO8601](~~25696~~)标准表示，使用UTC+0时间。格式为：`yyyy-MM-ddTHH:mm:ssZ`。

- 如果秒（`ss`）取值不是`00`，则自动取为当前分钟（`mm`）开始时。

- 最短释放时间为当前时间半小时之后。

- 最长释放时间不能超过当前时间三年。', example='2018-01-01T12:05:00Z'),
    creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: the standard mode. For more information, see the "Standard mode" section in the [Burstable instances](~~59977~~) topic.
*   Unlimited: the unlimited mode. For more information, see the "Unlimited mode" section in [Burstable instances](~~59977~~).

This parameter is empty by default.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Standard'),
    dataDisk?: [ 
      {
        category?: string(name='Category', description='The category of data disk N. Valid values of N: 1 to 16. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: ESSD
*   cloud: basic disk.

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssd'),
        deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the data disk after the instance with which the disk is associated is released. Valid values:

*   true: yes
*   false: no

Default value: true.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='true'),
        description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length. The description can contain letters but cannot start with `http://` or `https://`. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='DataDisk_Description'),
        device?: string(name='Device', description='The mount target of the data disk. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='/dev/vd1'),
        diskName?: string(name='DiskName', description='The name of the data disk. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.

This parameter is empty by default.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssdData'),
        encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt data disk N. Valid values:

*   true
*   false

Default value: false.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='false'),
        kmsKeyId?: string(name='KmsKeyId', description='The ID of the Key Management Service (KMS) key to be used for the data disk. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
        performanceLevel?: string(name='PerformanceLevel', description='The PL of the ESSD that is used as the data disk. The number of PLs that you specify must be the same as the value of N in the `LaunchConfiguration.DataDisk.N.Category` parameter. Default value: PL1. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PL1'),
        size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

*   Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud_essd: depend on the `LaunchConfiguration.DataDisk.N.PerformanceLevel` value.

    *   Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when LaunchConfiguration.DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

*   Valid values when LaunchConfiguration.DataDisk.N.Category is set to cloud: 5 to 2000.

> The parameter value must be greater than or equal to the size of the snapshot specified by the `LaunchConfiguration.DataDisk.N.SnapshotId` parameter.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='20'),
        snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use to create the data disk. Valid values of N: 1 to 16.

After this parameter is specified, the `LaunchConfiguration.DataDisk.N.Size` parameter is ignored. The size of the data disk is the same as that of the snapshot specified by this parameter. Use snapshots created after July 15, 2013. Otherwise, an error is returned and your request is rejected.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='s-bp17441ohwka0yuh****'),
      }
    ](name='DataDisk', description='The cloud disks in the extended configurations of the launch template.'),
    deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1frxuzdg87zh4p****'),
    hostName?: string(name='HostName', description='The hostname of the instance. Take note of the following items:

*   The hostname cannot start or end with a period (.) or hyphen (-). The hostname cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate a hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
*   You cannot specify both the `LaunchConfiguration.HostName` and `LaunchConfiguration.HostNames.N` parameters. Otherwise, an error is returned.
*   If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='k8s-node-[1,4]-ecshost'),
    hostNames?: [ string ](name='HostNames', description='The hostname of the instance. You can use this parameter to specify different hostnames for multiple instances. Take note of the following items:

*   This parameter takes effect only when `AutoProvisioningGroupType` is set to instant.
*   The value of N indicates the number of instances. Valid values: 1 to 1000. The value of N must be the same as the TotalTargetCapacity value.
*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For a Windows instance, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. The hostname can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
*   You cannot specify both the `LaunchConfiguration.HostName` and `LaunchConfiguration.HostNames.N` parameters. Otherwise, an error is returned.
*   If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='ecs-host-01'),
    imageId?: string(name='ImageId', description='The ID of the image that you want to use to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available image resources. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='m-bp1g7004ksh0oeuc****'),
    instanceDescription?: string(name='InstanceDescription', description='The description of the instance. The description must be 2 to 256 characters in length. The description can contain letters but cannot start with `http://` or `https://`. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Instance_Description'),
    instanceName?: string(name='InstanceName', description='The name of the instance . The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). The default value of this parameter is the `InstanceId` value.

When you batch create instances, you can batch configure sequential names for the instances. For more information, see [Batch configure sequential names or hostnames for multiple instances](~~196048~~).

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='k8s-node-[1,4]-alibabacloud'),
    internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

> If the pay-by-traffic billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instances, use the pay-by-bandwidth billing method for network usage.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PayByTraffic'),
    internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the value of `LaunchConfiguration.InternetMaxBandwidthOut`, and the default value is the value of `LaunchConfiguration.InternetMaxBandwidthOut`.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='10'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='10'),
    ioOptimized?: string(name='IoOptimized', description='Specifies whether to create an I/O optimized instance. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

For instances of retired instance types, the default value is none. For instances of other instance types, the default value is optimized.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='optimized'),
    keyPairName?: string(name='KeyPairName', description='The name of the key pair to bind to the instance.

*   For Windows instances, this parameter is ignored. This parameter is empty by default.
*   By default, password-based logon is disabled for Linux instances.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='KeyPair_Name'),
    password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

``()`~!@#$%^&*-_+=|{}`[]`:;\\"<>,.?/``

For Windows instances, the password cannot start with a forward slash (/).

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='EcsV587!'),
    passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image. Valid values:

*   true: uses the preset password.
*   false: does not use the preset password.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='true'),
    ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='RAM_Name'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='rg-bp67acfmxazb4p****'),
    securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Indicates whether security hardening is enabled. Valid values:

*   Active: Security hardening is enabled. This value is applicable only to public images.
*   Deactive: Security hardening is disabled. This value is applicable to all image types.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='Active'),
    securityGroupId?: string(name='SecurityGroupId', description='The ID of security group N to which to assign the instance. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='sg-bp15ed6xe1yxeycg****'),
    securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of the security groups to which the new ECS instances belong.'),
    systemDisk?: {
      encryptAlgorithm?: string(name='EncryptAlgorithm', description='The algorithm to be used to encrypt data disks. Valid values:

*   aes-256
*   sm4-128

Default value: aes-256.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='aes-256'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt system disk N. Valid values:

*   true
*   false

Default value: false.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key that you want to use for the system disk.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
    }(name='SystemDisk', description='The information of the system disk on the instance. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.'),
    systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: enhanced SSD (ESSD)
*   cloud: basic disk.

For non-I/O optimized instances of retired instance types, the default value is cloud. For other instances, the default value is cloud_efficiency.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssd'),
    systemDiskDescription?: string(name='SystemDiskDescription', description='The description of the system disk. The description must be 2 to 256 characters in length. The description can contain letters but cannot start with `http://` or `https://`.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='SystemDisk_Description'),
    systemDiskName?: string(name='SystemDiskName', description='The name of the system disk. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.

This parameter is empty by default.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='cloud_ssdSystem'),
    systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel', description='The performance level of the ESSD that you want to use as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='PL0'),
    systemDiskSize?: int32(name='SystemDiskSize', description='The size of the system disk. Valid values: 20 to 500. Unit: GiB. This parameter value must be at least 20 and greater than or equal to the size of the image specified by the LaunchConfiguration.ImageId parameter.

Default value: 40 or the size of the image specified by the LaunchConfiguration.ImageId parameter, whichever is greater.

If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='40'),
    tag?: [ 
      {
        key?: string(name='Key', description='The key of the tag. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='TestKey'),
        value?: string(name='Value', description='The value of the tag. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or contain `http://` or `https://`. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='TestValue'),
      }
    ](name='Tag', description='The tags in the extended configurations of the launch template.'),
    userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The raw data can be up to 16 KB in size. If both the LaunchTemplateId and LaunchConfiguration.\\* parameters are specified, the LaunchTemplateId parameter takes precedence.', example='ZWNobyBoZWxsbyBlY3Mh'),
  }(name='LaunchConfiguration'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group. The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`.', example='apg-test'),
  autoProvisioningGroupType?: string(name='AutoProvisioningGroupType', description='The delivery type of the auto provisioning group. Valid values:

*   request: one-time asynchronous delivery. The auto provisioning group attempts to asynchronously deliver an instance cluster that meets the target capacity only once when it is started. The group does not retry the operation regardless of whether all the instances are delivered.
*   instant: one-time synchronous delivery. The auto provisioning group attempts to synchronously deliver an instance cluster that meets the target capacity only once when it is started. The list of delivered instances and the causes of delivery failures are returned in the response.
*   maintain: continuous delivery. The auto provisioning group attempts to deliver an instance cluster that meets the target capacity, and monitors the real-time capacity when it is started. If the target capacity of the auto provisioning group is not reached, the auto provisioning group continues to create instances until the target capacity is reached.

Default value: maintain.', example='maintain'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but make sure that the value is unique among different requests. The ClientToken value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  dataDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory', description='The category of the data disk. You can specify multiple disk categories, and the disk categories are prioritized in the order in which they are specified. If a specified disk category is unavailable, the system uses the next available disk category. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: ESSD
*   cloud: basic disk.', example='cloud_efficiency'),
    }
  ](name='DataDiskConfig', description='The information of data disks on the instance.'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='The type of supplemental instances. If the sum of the values of the `PayAsYouGoTargetCapacity` and `SpotTargetCapacity` parameters is smaller than the value of the `TotalTargetCapacity` parameter, the auto provisioning group creates instances of the specified type to meet the capacity requirements. Valid values:

*   PayAsYouGo: pay-as-you-go instances
*   Spot: preemptible instances.

Default value: Spot.', example='Spot'),
  description?: string(name='Description', description='The description of the auto provisioning group.', example='testDescription'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='Specifies whether to release the removed instances when the real-time capacity of the auto provisioning group exceeds the target capacity and a scale-in event is triggered. Valid values:

*   termination: releases the removed instances.
*   no-termination: only removes the instances from the auto provisioning group but does not release them.

Default value: no-termination.', example='termination'),
  hibernationOptionsConfigured?: boolean(name='HibernationOptionsConfigured', description='> This parameter is in invitational preview and is unavailable for general users.', example='false'),
  launchTemplateConfig?: [ 
    {
      architectures?: [ string ](name='Architectures', description='The architectures of the instance types.'),
      burstablePerformance?: string(name='BurstablePerformance', description='Specifies whether to include burstable instance types. Valid values:

*   Exclude: does not include burstable instance types.
*   Include: includes burstable instance types.
*   Required: includes only burstable instance types.

Default value: Include.', example='Include'),
      cores?: [ int32 ](name='Cores', description='The number of vCPU cores of the instance type.'),
      excludedInstanceTypes?: [ string ](name='ExcludedInstanceTypes', description='The instance types that you want to exclude.'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The instance family level in the intelligent configuration mode. This parameter is used to filter the available instance types that meet the specified criteria. Valid values:

*   EntryLevel: shared instance type. Instances of this level are the most cost-effective but may not provide stable computing performance. Instances of this level are suitable for business scenarios in which the CPU utilization is low. For more information, see [Shared instance families](~~108489~~).
*   EnterpriseLevel: enterprise level. Instances of this level provide stable performance and dedicated resources, and are suitable for scenarios in which high stability is required. For more information, see [Overview of instance families](~~25378~~).
*   CreditEntryLevel: This value is available only for burstable instances. CPU credits are used to ensure computing performance. Instances of this level are suitable for scenarios in which the CPU utilization is low but may fluctuate in specific cases. For more information, see [What are burstable instances?](~~59977~~).

Valid values of N: 1 to 10.', example='EnterpriseLevel'),
      instanceType?: string(name='InstanceType', description='The instance type in extended configuration N. Valid values of N: 1 to 20. For more information about the valid values of this parameter, see [Instance families](~~25378~~).', example='ecs.g5.large'),
      maxPrice?: double(name='MaxPrice', description='The maximum price of preemptible instances in extended configuration N.

**

**If you specify the **`LaunchTemplateConfig` parameter, you must also specify the `LaunchTemplateConfig.N.MaxPrice` parameter.', example='3'),
      maxQuantity?: int32(name='MaxQuantity', description='> This parameter is in invitational preview and is unavailable to general users.', example='false'),
      memories?: [ float ](name='Memories', description='The memory sizes of the instance type.'),
      priority?: int32(name='Priority', description='The priority of the extended configuration. A value of 0 indicates the highest priority. Valid values: 0 to ∞.', example='1'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in extended configuration N. The zone of the ECS instances created from the extended configuration is determined by the vSwitch.

> If you specify the `LaunchTemplateConfig` parameter, you must also specify the `LaunchTemplateConfig.N.VSwitchId` parameter.', example='vsw-sn5bsitu4lfzgc5o7****'),
      weightedCapacity?: double(name='WeightedCapacity', description='The weight of the instance type specified in the extended configuration. A greater weight indicates that a single instance has more computing power and fewer instances are required. The value must be greater than 0.

The weight is calculated based on the computing power of the instance type and the minimum computing power of a single instance in the cluster to be created by the auto provisioning group. For example, assume that the minimum computing power of a single instance is 8 vCPUs and 60 GiB of memory.

*   For an instance type with 8 vCPUs and 60 GiB of memory, you can set the weight to 1.
*   For an instance type with 16 vCPUs and 120 GiB of memory, you can set the weight to 2.', example='2'),
    }
  ](name='LaunchTemplateConfig', description='The extended configurations of the launch template.'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template associated with the auto provisioning group. You can call the [DescribeLaunchTemplates](~~73759~~) operation to query available launch templates. If both the LaunchTemplateId and `LaunchConfiguration.*` parameters are specified, the LaunchTemplateId parameter takes precedence.', example='lt-bp1fgzds4bdogu03****'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion', description='The version of the launch template associated with the auto provisioning group. You can call the [DescribeLaunchTemplateVersions](~~73761~~) operation to query the versions of available launch templates.

Default value: the default version of the launch template.', example='1'),
  maxSpotPrice?: float(name='MaxSpotPrice', description='The maximum price of preemptible instances in the auto provisioning group.

> If the `MaxSpotPrice` and `LaunchTemplateConfig.N.MaxPrice` parameters are both specified, the lower price is used.', example='2'),
  minTargetCapacity?: string(name='MinTargetCapacity', description='The minimum target capacity of the auto provisioning group. The value must be a positive integer.

When you specify this parameter, take note of the following items:

*   This parameter takes effect only when `AutoProvisioningGroupType` is set to instant.
*   If the number of instances that can be created in the current region is smaller than the value of this parameter, the operation cannot be called and no instances are created.
*   If the number of instances that can be created in the current region is greater than the value of this parameter, instances can be created based on the specified parameters.', example='20'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payAsYouGoAllocationStrategy?: string(name='PayAsYouGoAllocationStrategy', description='The policy for creating pay-as-you-go instances. Valid values:

*   lowest-price: cost optimization policy. The auto provisioning group attempts to create instances of the lowest-priced instance type.
*   prioritized: priority-based policy. The auto provisioning group attempts to create instances based on the priority specified by the `LaunchTemplateConfig.N.Priority` parameter.

Default value: lowest-price.', example='prioritized'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', description='The target capacity of pay-as-you-go instances in the auto provisioning group. The value must be smaller than the `TotalTargetCapacity` value.', example='30'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the auto provisioning group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the auto provisioning group.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotAllocationStrategy?: string(name='SpotAllocationStrategy', description='The policy for creating preemptible instances. Valid values:

*   lowest-price: cost optimization policy. The auto provisioning group attempts to create instances of the lowest-priced instance type.
*   diversified: balanced distribution policy. The auto provisioning group attempts to create instances in zones that are specified in extended configurations and then evenly distribute the instances across the zones.
*   capacity-optimized: capacity-optimized distribution policy. The auto provisioning group attempts to create instances that are of the optimal instance types across the optimal zones based on resource availability.

Default value: lowest-price.', example='diversified'),
  spotInstanceInterruptionBehavior?: string(name='SpotInstanceInterruptionBehavior', description='The operation to be performed on the preemptible instance when it is interrupted. Valid values:

*   stop: stops the preemptible instance.
*   terminate: releases the preemptible instance.

Default value: terminate.', example='terminate'),
  spotInstancePoolsToUseCount?: int32(name='SpotInstancePoolsToUseCount', description='The number of preemptible instances of the lowest-priced instance type to be created by the auto provisioning group. This parameter takes effect when the `SpotAllocationStrategy` parameter is set to `lowest-price`.

The value of SpotInstancePoolsToUseCount must be smaller than the N value specified in `LaunchTemplateConfig.N.*` parameters.', example='2'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', description='The target capacity of preemptible instances in the auto provisioning group. The value must be smaller than the `TotalTargetCapacity` value.', example='20'),
  systemDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory', description='The category of the system disk. You can specify multiple disk categories, and the disk categories are prioritized in the order in which they are specified. If a specified disk category is unavailable, the system uses the next available disk category. Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: ESSD
*   cloud: basic disk.', example='cloud_ssd'),
    }
  ](name='SystemDiskConfig', description='The information of system disks on the instance.'),
  terminateInstances?: boolean(name='TerminateInstances', description='Specifies whether to release instances in the auto provisioning group after the auto provisioning group is deleted. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: retains instances in the auto provisioning group.

Default value: false.', example='true'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='Specifies whether to release instances in the auto provisioning group after the auto provisioning group expires. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: only removes instances from the auto provisioning group but does not release them.

Default value: false.', example='true'),
  totalTargetCapacity?: string(name='TotalTargetCapacity', description='The total target capacity of the auto provisioning group. The value must be a positive integer.

The total target capacity of the auto provisioning group must be greater than or equal to the sum of the target capacity of pay-as-you-go instances specified by the `PayAsYouGoTargetCapacity` parameter and the target capacity of preemptible instances specified by the `SpotTargetCapacity` parameter.', example='60'),
  validFrom?: string(name='ValidFrom', description='The time at which to start the auto provisioning group. The period of time between this point in time and the point in time specified by the `ValidUntil` parameter is the effective time period of the auto provisioning group.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

By default, an auto provisioning group is started immediately after it is created.', example='2019-04-01T15:10:20Z'),
  validUntil?: string(name='ValidUntil', description='The expiration time of the auto provisioning group. The period of time between this point in time and the point in time specified by the `ValidFrom` parameter is the effective time period of the auto provisioning group.

Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

Default value: 2099-12-31T23:59:59Z.', example='2019-06-01T15:10:20Z'),
}

model CreateAutoProvisioningGroupResponseBody = {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-sn54avj8htgvtyh8****'),
  launchResults?: {
    launchResult?: [ 
    {
      amount?: int32(name='Amount', description='The number of instances. Valid values: 1 to 100000.', example='1'),
      errorCode?: string(name='ErrorCode', description='The error code returned when the instance cannot be created.', example='InvalidParameter'),
      errorMsg?: string(name='ErrorMsg', description='The error message returned when the instance cannot be created.', example='Specific parameter is not valid.'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds', description='The IDs of created instances.'),
      instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.', example='NoSpot'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='LaunchResult')
  }(name='LaunchResults', description='Details about the instances created by the auto provisioning group. The values of the parameters in this array are returned only when the AutoProvisioningGroupType parameter is set to `instant`.'),
  requestId?: string(name='RequestId', description='The request ID.', example='745CEC9F-0DD7-4451-9FE7-8B752F39****'),
}

model CreateAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoProvisioningGroupResponseBody(name='body'),
}

/**
  * *   Auto Provisioning is a service that allows quick deployment of an instance cluster that consists of preemptible and pay-as-you-go instances. Auto Provisioning supports push-button deployment of instance clusters across different billing methods, instance families, and zones. For more information, see [Use auto provisioning group-related API operations to create multiple ECS instances at the same time](~~200772~~).
  * *   Auto Provisioning uses auto provisioning groups to schedule and maintain computing resources. You can use auto provisioning groups to obtain a steady supply of computing resources. This helps reduce the impact on computing capacity when preemptible instances are reclaimed.
  * *   Auto Provisioning is provided free-of-charge. However, you are charged for instance resources that are created in auto provisioning groups. For more information about the billing, see [Overview](~~52088~~) and [Pay-as-you-go](~~40653~~).
  * *   If you specify both the `LaunchTemplate*` and `LaunchConfiguration.*` parameters, the LaunchTemplate\\* parameter takes precedence.
  *
  * @param request CreateAutoProvisioningGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAutoProvisioningGroupResponse
 */
async function createAutoProvisioningGroupWithOptions(request: CreateAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): CreateAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupName)) {
    query['AutoProvisioningGroupName'] = request.autoProvisioningGroupName;
  }
  if (!Util.isUnset(request.autoProvisioningGroupType)) {
    query['AutoProvisioningGroupType'] = request.autoProvisioningGroupType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dataDiskConfig)) {
    query['DataDiskConfig'] = request.dataDiskConfig;
  }
  if (!Util.isUnset(request.defaultTargetCapacityType)) {
    query['DefaultTargetCapacityType'] = request.defaultTargetCapacityType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.excessCapacityTerminationPolicy)) {
    query['ExcessCapacityTerminationPolicy'] = request.excessCapacityTerminationPolicy;
  }
  if (!Util.isUnset(request.hibernationOptionsConfigured)) {
    query['HibernationOptionsConfigured'] = request.hibernationOptionsConfigured;
  }
  if (!Util.isUnset(request.launchTemplateConfig)) {
    query['LaunchTemplateConfig'] = request.launchTemplateConfig;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateVersion)) {
    query['LaunchTemplateVersion'] = request.launchTemplateVersion;
  }
  if (!Util.isUnset(request.maxSpotPrice)) {
    query['MaxSpotPrice'] = request.maxSpotPrice;
  }
  if (!Util.isUnset(request.minTargetCapacity)) {
    query['MinTargetCapacity'] = request.minTargetCapacity;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payAsYouGoAllocationStrategy)) {
    query['PayAsYouGoAllocationStrategy'] = request.payAsYouGoAllocationStrategy;
  }
  if (!Util.isUnset(request.payAsYouGoTargetCapacity)) {
    query['PayAsYouGoTargetCapacity'] = request.payAsYouGoTargetCapacity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotAllocationStrategy)) {
    query['SpotAllocationStrategy'] = request.spotAllocationStrategy;
  }
  if (!Util.isUnset(request.spotInstanceInterruptionBehavior)) {
    query['SpotInstanceInterruptionBehavior'] = request.spotInstanceInterruptionBehavior;
  }
  if (!Util.isUnset(request.spotInstancePoolsToUseCount)) {
    query['SpotInstancePoolsToUseCount'] = request.spotInstancePoolsToUseCount;
  }
  if (!Util.isUnset(request.spotTargetCapacity)) {
    query['SpotTargetCapacity'] = request.spotTargetCapacity;
  }
  if (!Util.isUnset(request.systemDiskConfig)) {
    query['SystemDiskConfig'] = request.systemDiskConfig;
  }
  if (!Util.isUnset(request.terminateInstances)) {
    query['TerminateInstances'] = request.terminateInstances;
  }
  if (!Util.isUnset(request.terminateInstancesWithExpiration)) {
    query['TerminateInstancesWithExpiration'] = request.terminateInstancesWithExpiration;
  }
  if (!Util.isUnset(request.totalTargetCapacity)) {
    query['TotalTargetCapacity'] = request.totalTargetCapacity;
  }
  if (!Util.isUnset(request.validFrom)) {
    query['ValidFrom'] = request.validFrom;
  }
  if (!Util.isUnset(request.validUntil)) {
    query['ValidUntil'] = request.validUntil;
  }
  if (!Util.isUnset(request.launchConfiguration)) {
    query['LaunchConfiguration'] = request.launchConfiguration;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoProvisioningGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Auto Provisioning is a service that allows quick deployment of an instance cluster that consists of preemptible and pay-as-you-go instances. Auto Provisioning supports push-button deployment of instance clusters across different billing methods, instance families, and zones. For more information, see [Use auto provisioning group-related API operations to create multiple ECS instances at the same time](~~200772~~).
  * *   Auto Provisioning uses auto provisioning groups to schedule and maintain computing resources. You can use auto provisioning groups to obtain a steady supply of computing resources. This helps reduce the impact on computing capacity when preemptible instances are reclaimed.
  * *   Auto Provisioning is provided free-of-charge. However, you are charged for instance resources that are created in auto provisioning groups. For more information about the billing, see [Overview](~~52088~~) and [Pay-as-you-go](~~40653~~).
  * *   If you specify both the `LaunchTemplate*` and `LaunchConfiguration.*` parameters, the LaunchTemplate\\* parameter takes precedence.
  *
  * @param request CreateAutoProvisioningGroupRequest
  * @return CreateAutoProvisioningGroupResponse
 */
async function createAutoProvisioningGroup(request: CreateAutoProvisioningGroupRequest): CreateAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoProvisioningGroupWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='The retention period of the snapshot copy in the destination region. Unit: days. Valid values:

*   \\-1: The snapshot copy is permanently retained.
*   A value in the range of 1 to 65535: The snapshot copy is retained for the specified number of days.

Default value: -1.', example='30'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='Specifies whether to enable cross-region replication for snapshots.

*   true
*   false', example='false'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-aek2kkmhmhs****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageLocationArn?: string(name='StorageLocationArn', description='> This parameter is not publicly available.', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the snapshot. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. The tag key cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the snapshot. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. The tag value cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the snapshot.'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='The destination region to which to copy the snapshot. You can specify only a single destination region.', example='["cn-hangzhou"]'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with [http:// or https://. It can contain letters, digits, colons (.), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)

This parameter is empty by default.', example='TestName'),
  regionId?: string(name='regionId', description='The ID of the region in which to create the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  repeatWeekdays?: string(name='repeatWeekdays', description='The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to Monday to Sunday. 1 indicates Monday. Format description:

*   Set this parameter to a JSON-formatted array. For example, a value of \\["1"] specifies automatic snapshots to be created every Monday.
*   To schedule multiple automatic snapshots to be created in a week, you can specify multiple values. Separate the values with commas (,). You can specify a maximum of seven days. For example, a value of \\["1","3","5"] specifies automatic snapshots to be created every Monday, Wednesday, and Friday.', example='["1","2"]'),
  retentionDays?: int32(name='retentionDays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   A value in the range of 1 to 65535: The snapshot is retained for the specified number of days.

Default value: -1.', example='30'),
  timePoints?: string(name='timePoints', description='The points in time of the day at which to create automatic snapshots. The time must be in UTC+8. Unit: hours. Valid values: 0 to 23, which correspond to the 24 on-the-hour points in time from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Format description:

*   Set this parameter to a JSON-formatted array. For example, a value of \\["1"] specifies automatic snapshots to be created at 01:00:00.
*   To schedule multiple automatic snapshots to be created in a day, you can specify multiple values. Separate the values with commas (,). You can specify a maximum of 24 points in time. For example, a value of \\["1","3","5"] specifies automatic snapshots to be created at 01:00:00, 03:00:00, and 05:00:00.', example='["0", "1", … "23"]'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The automatic snapshot policy ID.', example='sp-bp12m37ccmxvbmi5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * When you call this operation to create an automatic snapshot policy, you can specify the days of the week on which to create automatic snapshots, the retention period of the automatic snapshots, and whether to enable cross-region replication for the snapshots in the policy to meet your diverse data backup requirements. After you create an automatic snapshot policy, you must call the [ApplyAutoSnapshotPolicy](~~25531~~) operation to apply it to disks. If you want to modify the automatic snapshot policy, you must call the [ModifyAutoSnapshotPolicyEx](~~25529~~) operation.
  * Take note of the following items:
  * *   You can create a maximum of 100 automatic snapshot policies per region for a single Alibaba Cloud account.
  * *   If an automatic snapshot is being created when the time scheduled for creating another automatic snapshot is due, the new snapshot task is skipped. This may occur when a disk contains a large volume of data. For example, you have scheduled snapshots to be created at 09:00:00, 10:00:00, 11:00:00, and 12:00:00 for a disk. The system starts to create a snapshot for the disk at 09:00:00. The process takes 80 minutes to complete because the disk contains a large volume of data and ends at 10:20:00. The system skips the automatic snapshot task scheduled for 10:00:00 and creates the next automatic snapshot for the disk at 11:00:00.
  * *   For information about how to copy a snapshot from one region to another, see the "Background information" section in [Copy a snapshot](~~159441~~).
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.copiedSnapshotsRetentionDays)) {
    query['CopiedSnapshotsRetentionDays'] = request.copiedSnapshotsRetentionDays;
  }
  if (!Util.isUnset(request.enableCrossRegionCopy)) {
    query['EnableCrossRegionCopy'] = request.enableCrossRegionCopy;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageLocationArn)) {
    query['StorageLocationArn'] = request.storageLocationArn;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetCopyRegions)) {
    query['TargetCopyRegions'] = request.targetCopyRegions;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyName)) {
    query['autoSnapshotPolicyName'] = request.autoSnapshotPolicyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeatWeekdays)) {
    query['repeatWeekdays'] = request.repeatWeekdays;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['retentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.timePoints)) {
    query['timePoints'] = request.timePoints;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAutoSnapshotPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation to create an automatic snapshot policy, you can specify the days of the week on which to create automatic snapshots, the retention period of the automatic snapshots, and whether to enable cross-region replication for the snapshots in the policy to meet your diverse data backup requirements. After you create an automatic snapshot policy, you must call the [ApplyAutoSnapshotPolicy](~~25531~~) operation to apply it to disks. If you want to modify the automatic snapshot policy, you must call the [ModifyAutoSnapshotPolicyEx](~~25529~~) operation.
  * Take note of the following items:
  * *   You can create a maximum of 100 automatic snapshot policies per region for a single Alibaba Cloud account.
  * *   If an automatic snapshot is being created when the time scheduled for creating another automatic snapshot is due, the new snapshot task is skipped. This may occur when a disk contains a large volume of data. For example, you have scheduled snapshots to be created at 09:00:00, 10:00:00, 11:00:00, and 12:00:00 for a disk. The system starts to create a snapshot for the disk at 09:00:00. The process takes 80 minutes to complete because the disk contains a large volume of data and ends at 10:20:00. The system skips the automatic snapshot task scheduled for 10:00:00 and creates the next automatic snapshot for the disk at 11:00:00.
  * *   For information about how to copy a snapshot from one region to another, see the "Background information" section in [Copy a snapshot](~~159441~~).
  *
  * @param request CreateAutoSnapshotPolicyRequest
  * @return CreateAutoSnapshotPolicyResponse
 */
async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateCapacityReservationRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool to generate after the capacity reservation takes effect. Valid values:

*   Open: open private pool
*   Target: targeted private pool

Default value: Open.', example='Open'),
    name?: string(name='Name', description='The capacity reservation name. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='crpTestName'),
  }(name='PrivatePoolOptions'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The `token` can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', description='The description of the capacity reservation. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='This is description.'),
  endTime?: string(name='EndTime', description='The time when the capacity reservation expires. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. For more information, see [ISO 8601](~~25696~~).', example='2021-10-30T06:32:00Z'),
  endTimeType?: string(name='EndTimeType', description='The release mode of the capacity reservation. Valid values:

*   Limited: The capacity reservation is automatically released at a specified time. If you specify this parameter, you must specify the `EndTime` parameter.
*   Unlimited: The capacity reservation is manually released. The capacity reservation can be released anytime.', example='Unlimited'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of instances for which the capacity of an instance type is reserved.', example='2'),
  instanceType?: string(name='InstanceType', description='The instance type. You can create a capacity reservation to reserve the capacity of only one instance type. You can call the [DescribeInstanceTypes](~~25620~~) operation to query the instance types provided by ECS.', example='ecs.g6.xlarge'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='The operating system of the image used by the instance. This parameter corresponds to the `Platform` parameter of regional reserved instances. If the operating system of a capacity reservation matches the operating system of a regional reserved instance, you can apply the regional reserved instance to offset fees of the unused capacity of the capacity reservation. Valid values:

*   Windows: Windows Server operating system
*   Linux: Linux and UNIX-like operating system

Default value: Linux.

> This parameter is unavailable.', example='Linux'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the capacity reservation.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The mode in which the capacity reservation takes effect. You can call the CreateCapacityReservation operation to create only immediate capacity reservations.

> If you do not specify this parameter, the capacity reservation immediately takes effect.', example='2021-10-30T05:32:00Z'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the capacity reservation. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the capacity reservation. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the capacity reservation.'),
  zoneId?: [ string ](name='ZoneId', description='The ID of the zone in which you want to create the capacity reservation. A capacity reservation can reserve resources within only one zone.', example='cn-hangzhou-h'),
}

model CreateCapacityReservationResponseBody = {
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The capacity reservation ID.', example='crp-bp67acfmxazb4****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCapacityReservationResponseBody(name='body'),
}

/**
  * When you create a capacity reservation, you can specify attributes such as a zone and an instance type. The system uses a private pool to reserve resources that match the specified attributes. For more information, see [Overview of Immediate Capacity Reservation](~~193633~~).
  * *   Currently, only immediate capacity reservations are supported. Immediate capacity reservations take effect immediately after you purchase them. After you purchase an immediate capacity reservation, you are charged for the specified instance type based on the pay-as-you-go billing method regardless of whether you use the capacity reservation to create pay-as-you-go instances. Billing stops when you manually release the capacity reservation or when the capacity reservation expires and is automatically released.
  *     *   You can call the [CreateInstance](~~25499~~) or [RunInstances](~~63440~~) operation to specify private pool attributes when you create instances. To modify the attributes of a private pool, you can call the [ModifyInstanceAttachmentAttributes](~~190006~~) operation. If an instance matches a private pool associated with a capacity reservation, you are charged based on the configurations of the instance such as the instance type, disks, and public bandwidth.
  *     *   Before you use a private pool associated with a capacity reservation to create pay-as-you-go instances, you are charged only for the specified instance type.
  * *   You can apply savings plans or regional reserved instances to offset hourly billing of unused immediate capacity reservations, and hourly fees of the instances that match the immediate capacity reservations. However, you cannot use zonal reserved instances to offset the hourly fees. We recommend that you purchase reserved instances or savings plans before you purchase immediate capacity reservations. This way, you can access resources free of charge within the coverage of the reserved instances or savings plans.
  * > You can call the CreateCapacityReservation operation to create only immediate capacity reservations. You can create immediate or scheduled capacity reservations in the Elastic Compute Service (ECS) console. For more information, see [Overview](~~193626#section-oil-qh5-xvx~~).
  *
  * @param request CreateCapacityReservationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCapacityReservationResponse
 */
async function createCapacityReservationWithOptions(request: CreateCapacityReservationRequest, runtime: Util.RuntimeOptions): CreateCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endTimeType)) {
    query['EndTimeType'] = request.endTimeType;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCapacityReservation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you create a capacity reservation, you can specify attributes such as a zone and an instance type. The system uses a private pool to reserve resources that match the specified attributes. For more information, see [Overview of Immediate Capacity Reservation](~~193633~~).
  * *   Currently, only immediate capacity reservations are supported. Immediate capacity reservations take effect immediately after you purchase them. After you purchase an immediate capacity reservation, you are charged for the specified instance type based on the pay-as-you-go billing method regardless of whether you use the capacity reservation to create pay-as-you-go instances. Billing stops when you manually release the capacity reservation or when the capacity reservation expires and is automatically released.
  *     *   You can call the [CreateInstance](~~25499~~) or [RunInstances](~~63440~~) operation to specify private pool attributes when you create instances. To modify the attributes of a private pool, you can call the [ModifyInstanceAttachmentAttributes](~~190006~~) operation. If an instance matches a private pool associated with a capacity reservation, you are charged based on the configurations of the instance such as the instance type, disks, and public bandwidth.
  *     *   Before you use a private pool associated with a capacity reservation to create pay-as-you-go instances, you are charged only for the specified instance type.
  * *   You can apply savings plans or regional reserved instances to offset hourly billing of unused immediate capacity reservations, and hourly fees of the instances that match the immediate capacity reservations. However, you cannot use zonal reserved instances to offset the hourly fees. We recommend that you purchase reserved instances or savings plans before you purchase immediate capacity reservations. This way, you can access resources free of charge within the coverage of the reserved instances or savings plans.
  * > You can call the CreateCapacityReservation operation to create only immediate capacity reservations. You can create immediate or scheduled capacity reservations in the Elastic Compute Service (ECS) console. For more information, see [Overview](~~193626#section-oil-qh5-xvx~~).
  *
  * @param request CreateCapacityReservationRequest
  * @return CreateCapacityReservationResponse
 */
async function createCapacityReservation(request: CreateCapacityReservationRequest): CreateCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCapacityReservationWithOptions(request, runtime);
}

model CreateCommandRequest {
  commandContent?: string(name='CommandContent', description='The working directory of the command on the instance.

Default value:

*   For Linux instances, the default value is the home directory of the root user, which is the `/root` directory.
*   For Windows instances, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32\\`.', example='ZWNobyAxMjM='),
  contentEncoding?: string(name='ContentEncoding', description='The tags to add to the command.', example='PlainText'),
  description?: string(name='Description', description='The command type. Valid values:

*   RunBatScript: batch commands. These commands are applicable to Windows instances.
*   RunPowerShellScript: PowerShell commands. These commands are applicable to Windows instances.
*   RunShellScript: shell commands. These commands are applicable to Linux instances.', example='testDescription'),
  enableParameter?: boolean(name='EnableParameter', description='The encoding mode of the command content (CommandContent). Valid values:

*   PlainText: The command content is not encoded.
*   Base64: The command content is Base64-encoded.

Default value: Base64.

> If the specified value of this parameter is invalid, Base64 is used by default.', example='false'),
  name?: string(name='Name', description='The description of the command. The description supports all character sets and can be up to 512 characters in length.', example='testName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The name of the command. The name supports all character sets and can be up to 128 characters in length.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The ID of the command.', example='TestValue'),
    }
  ](name='Tag', description='Tag N to add to the command.'),
  timeout?: long(name='Timeout', description='Specifies whether to use custom parameters in the command.

Default value: false.', example='60'),
  type?: string(name='Type', description='The Base64-encoded content of the command.

*   The parameter value must be Base64-encoded and cannot exceed 18 KB in size.

*   Custom parameters can be added to the command. To enable the custom parameter feature, you must set `EnableParameter` to true.

    *   Custom parameters are defined in the `{{}}` format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   The number of custom parameters cannot exceed 20.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.

*   You can specify built-in environment parameters as custom parameters. Then, when you run the command, these parameters are automatically specified by Cloud Assistant. You can specify the following built-in environment parameters:

    *   `{{ACS::RegionId}}`: the ID of the region.

    *   `{{ACS::AccountId}}`: the UID of the Alibaba Cloud account.

    *   `{{ACS::InstanceId}}`: the ID of the instance. When the command is run on multiple instances, if you want to specify `{{ACS::InstanceId}}` as a built-in environment variable, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::InstanceName}}`: the name of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceName}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.344
        *   Windows: 2.1.3.344

    *   `{{ACS::InvokeId}}`: the ID of the command task. If you want to specify `{{ACS::InvokeId}}` as a built-in environment variable, make sure that the version of the Cloud Assistant client is not earlier than the following one:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::CommandId}}`: the ID of the command. When you call the [RunCommand](~~141751~~) operation, if you want to specify `{{ACS::CommandId}}` as a built-in environment parameter, make sure that the version of the Cloud Assistant client is not earlier than the following ones:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309', example='RunShellScript'),
  workingDir?: string(name='WorkingDir', description='/root/', example='The maximum timeout period for the command execution on the instance. Unit: seconds. When a command cannot be run, a timeout error occurs. After that, the command process is forcefully terminated by canceling the PID of the command.

Default value: 60.'),
}

model CreateCommandResponseBody = {
  commandId?: string(name='CommandId', description='The ID of the request.', example='c-7d2a745b412b4601b2d47f6a768d****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCommandResponseBody(name='body'),
}

/**
  * The ID of the region in which to create the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request CreateCommandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCommandResponse
 */
async function createCommandWithOptions(request: CreateCommandRequest, runtime: Util.RuntimeOptions): CreateCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableParameter)) {
    query['EnableParameter'] = request.enableParameter;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.workingDir)) {
    query['WorkingDir'] = request.workingDir;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCommand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the region in which to create the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request CreateCommandRequest
  * @return CreateCommandResponse
 */
async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommandWithOptions(request, runtime);
}

model CreateDedicatedHostClusterRequest {
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='myDDHCluster'),
  description?: string(name='Description', description='The ID of the dedicated host cluster.', example='This-is-my-DDHCluster'),
  dryRun?: boolean(name='DryRun', description='The tags of the resource. You can enter most at 20 tags for the resource.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='Specifies whether to check the validity of the request without actually making the request. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether RAM users are authorized, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned and the request is made.

Default value: false', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the zone in which to create the dedicated host cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag value cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The ID of the resource group to which to assign the dedicated host cluster.', example='TestValue'),
    }
  ](name='Tag', description='The key of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.'),
  zoneId?: string(name='ZoneId', description='The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter. It cannot contain `http://` or `https://`.

This parameter is empty by default.', example='cn-hangzhou-f'),
}

model CreateDedicatedHostClusterResponseBody = {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the request.', example='dc-bp12wlf6bw0vz9v2****'),
  requestId?: string(name='RequestId', example='E2A664A6-2933-4C64-88AE-5033D003****'),
}

model CreateDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedHostClusterResponseBody(name='body'),
}

async function createDedicatedHostClusterWithOptions(request: CreateDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostCluster',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostCluster(request: CreateDedicatedHostClusterRequest): CreateDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostClusterWithOptions(request, runtime);
}

model CreateDemandRequest {
  amount?: int32(name='Amount', description='The number of instances. Valid values: 1 to 100000.', example='2'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The value of `ClientToken` can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  demandDescription?: string(name='DemandDescription', description='The description of the demand. The description must be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).', example='k8s-node-demand-desc'),
  demandName?: string(name='DemandName', description='The name of the demand. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with [http:// or https://](http://https://). It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

The default value is the instance type name.', example='k8s-node-demand'),
  endTime?: string(name='EndTime', description='The end time of the subscription period. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-dd HH:mm:ss format. The time must be in UTC.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the specified minute (mm). The value of EndTime is later than the value of Starttime. In most cases, the interval between the two times cannot be more than 10 days.', example='2019-12-10 12:05:00'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go. This is the default value.', example='PrePaid'),
  instanceType?: string(name='InstanceType', description='The instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Select instance types](~~58291~~) to learn how to select instance types.', example='ecs.c6.large'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The subscription period of the resource. Valid values:

*   Valid values when the value of PeriodUnit is Day: 1, 2, 3, 4, 5, and 6.
*   Valid values when the value of PeriodUnit is Week: 1, 2, 3, and 4.
*   Valid values when the value of PeriodUnit is Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Valid values:

*   Day
*   Week
*   Month. This is the default value.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The start time of the subscription period. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-dd HH:mm:ss format. The time must be in UTC.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the specified minute (mm). The value of EndTime must be later than the value of Starttime. In most cases, the interval between the two times cannot be more than 10 days.', example='2019-12-01 12:05:00'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

This parameter is empty by default. If you leave this parameter empty, the system randomly selects a zone.', example='cn-hangzhou-g'),
}

model CreateDemandResponseBody = {
  demandId?: string(name='DemandId', description='The ID of the demand.', example='ed-bp11n21kq00sl71p****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDemandResponseBody(name='body'),
}

/**
  * You can call this operation to file a demand for an ECS instance type. Alibaba Cloud provides the requested resources based on your demand.
  * You can file demands only for I/O optimized instance types and instances of the virtual private cloud (VPC) type.
  * > This operation is in internal preview and has not been officially released. We recommend that you do not call this operation.
  *
  * @param request CreateDemandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDemandResponse
 */
async function createDemandWithOptions(request: CreateDemandRequest, runtime: Util.RuntimeOptions): CreateDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.demandDescription)) {
    query['DemandDescription'] = request.demandDescription;
  }
  if (!Util.isUnset(request.demandName)) {
    query['DemandName'] = request.demandName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDemand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to file a demand for an ECS instance type. Alibaba Cloud provides the requested resources based on your demand.
  * You can file demands only for I/O optimized instance types and instances of the virtual private cloud (VPC) type.
  * > This operation is in internal preview and has not been officially released. We recommend that you do not call this operation.
  *
  * @param request CreateDemandRequest
  * @return CreateDemandResponse
 */
async function createDemand(request: CreateDemandRequest): CreateDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDemandWithOptions(request, runtime);
}

model CreateDeploymentSetRequest {
  clientToken?: string(name='ClientToken', description='The description of the deployment set. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='123e4567-e89b-12d3-a456-426655440000'),
  deploymentSetName?: string(name='DeploymentSetName', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='testDeploymentSetName'),
  description?: string(name='Description', description='The emergency solution to use in the situation where instances in the deployment set cannot be evenly distributed to different zones due to resource insufficiency after the instances failover. Valid values:

*   CancelMembershipAndStart: removes the instances from the deployment set and starts the instances immediately after they are failed over.
*   KeepStopped: leaves the instances in the Stopped state and starts them after resources are replenished.

Default value: CancelMembershipAndStart.', example='testDescription'),
  domain?: string(name='Domain', description='The name of the deployment set. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='Default'),
  granularity?: string(name='Granularity', description='The deployment domain. Set the value to Default.

Default: Instances in the deployment set are distributed only within the current zone.', example='host'),
  groupCount?: long(name='GroupCount', description='The deployment strategy. Valid values:

*   Availability: high availability strategy.
*   AvailabilityGroup: high availability group strategy.

Default value: Availability.', example='1'),
  onUnableToRedeployFailedInstance?: string(name='OnUnableToRedeployFailedInstance', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='CancelMembershipAndStart'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='Creates a deployment set in a specific region.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  strategy?: string(name='Strategy', description='The deployment granularity. Set the value to host.

host: Instances in the deployment set are dispersed at the granularity of hosts.', example='Availability'),
}

model CreateDeploymentSetResponseBody = {
  deploymentSetId?: string(name='DeploymentSetId', example='ds-bp1frxuzdg87zh4pzq****'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDeploymentSetResponseBody(name='body'),
}

async function createDeploymentSetWithOptions(request: CreateDeploymentSetRequest, runtime: Util.RuntimeOptions): CreateDeploymentSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deploymentSetName)) {
    query['DeploymentSetName'] = request.deploymentSetName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.groupCount)) {
    query['GroupCount'] = request.groupCount;
  }
  if (!Util.isUnset(request.onUnableToRedeployFailedInstance)) {
    query['OnUnableToRedeployFailedInstance'] = request.onUnableToRedeployFailedInstance;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDeploymentSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDeploymentSet(request: CreateDeploymentSetRequest): CreateDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentSetWithOptions(request, runtime);
}

model CreateDiagnosticMetricSetRequest {
  description?: string(name='Description', description='testDescription', example='The ID of the request.'),
  metricIds?: [ string ](name='MetricIds', description='The ID of diagnostic metric.'),
  metricSetName?: string(name='MetricSetName', description='my_dms', example='The IDs of diagnostic metrics. You can specify up to 100 diagnostic metric IDs.'),
  regionId?: string(name='RegionId', description='The type of the resource.

Default value: instance.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The name of the diagnostic metric set.', example='instance'),
}

model CreateDiagnosticMetricSetResponseBody = {
  metricSetId?: string(name='MetricSetId', example='dms-o7ymuutup5l*****'),
  requestId?: string(name='RequestId', description='The ID of the diagnostic metric set, which is the unique identifier of the set.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model CreateDiagnosticMetricSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnosticMetricSetResponseBody(name='body'),
}

async function createDiagnosticMetricSetWithOptions(request: CreateDiagnosticMetricSetRequest, runtime: Util.RuntimeOptions): CreateDiagnosticMetricSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.metricIds)) {
    query['MetricIds'] = request.metricIds;
  }
  if (!Util.isUnset(request.metricSetName)) {
    query['MetricSetName'] = request.metricSetName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnosticMetricSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnosticMetricSet(request: CreateDiagnosticMetricSetRequest): CreateDiagnosticMetricSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticMetricSetWithOptions(request, runtime);
}

model CreateDiagnosticReportRequest {
  endTime?: string(name='EndTime', description='The end of the reporting period. This parameter takes effect only for diagnostic metrics that do not need to be assessed by running Cloud Assistant commands in guest operating systems.', example='2022-07-11T14:00:00Z'),
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set. If this parameter is left empty, the dms-instancedefault set is used, which is the default diagnostic metric set provided for Elastic Compute Service (ECS) instances.', example='dms-uf6i0tv2refv8wz*****'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create a diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-uf6i0tv2refv8wz*****'),
  startTime?: string(name='StartTime', description='The beginning of the reporting period. This parameter takes effect only for diagnostic metrics that do not need to be assessed by running Cloud Assistant commands in guest operating systems.', example='2022-07-11T12:00:00Z'),
}

model CreateDiagnosticReportResponseBody = {
  reportId?: string(name='ReportId', description='The ID of the diagnostic report, which is the unique identifier of the report.', example='dr-uf6i0tv2refv8wz*****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model CreateDiagnosticReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiagnosticReportResponseBody(name='body'),
}

async function createDiagnosticReportWithOptions(request: CreateDiagnosticReportRequest, runtime: Util.RuntimeOptions): CreateDiagnosticReportResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.metricSetId)) {
    query['MetricSetId'] = request.metricSetId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDiagnosticReport',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDiagnosticReport(request: CreateDiagnosticReportRequest): CreateDiagnosticReportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiagnosticReportWithOptions(request, runtime);
}

model CreateDiskRequest {
  advancedFeatures?: string(name='AdvancedFeatures', description='This parameter is not publicly available.', example='hide'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='This parameter is not publicly available.', example='1000000000'),
      roleType?: string(name='RoleType', description='This parameter is not publicly available.', example='hide'),
      rolearn?: string(name='Rolearn', description='This parameter is not publicly available.', example='hide'),
    }
  ](name='Arn', description='This parameter is not publicly available.'),
  burstingEnabled?: boolean(name='BurstingEnabled', description='This parameter is not publicly available.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is left empty by default.', example='testDescription'),
  diskCategory?: string(name='DiskCategory', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD

Default value: cloud.', example='cloud_ssd'),
  diskName?: string(name='DiskName', description='The disk name. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is left empty by default.', example='testDiskName'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='This parameter is not publicly available.', example='hide'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true
*   false

Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the created subscription disk is automatically attached.

*   After you specify the instance ID, ResourceGroupId, Tag.N.Key, Tag.N.Value, ClientToken, and KMSKeyId are ignored.
*   You cannot specify ZoneId and InstanceId at the same time.

This parameter is empty by default. This indicates that a pay-as-you-go disk is created. The RegionId and ZoneId parameters specify where the disk resides.', example='i-bp18pnlg1ds9rky4****'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that you want to use for the disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40826X'),
  multiAttach?: string(name='MultiAttach', description='Specifies whether to enable the multi-attach feature for the disk. Valid values:

*   Disabled.
*   Enabled. Set the value to `Enabled` only for ESSDs.

Default value: Disabled.

> Disks for which the multi-attach feature is enabled support only the pay-as-you-go billing method. When `MultiAttach` is set to Enabled, you cannot specify `InstanceId`. You can call the [AttachDisk](~~25515~~) operation to attach disks to instances after the disks are created. Disks for which the multi-attach feature is enabled can be attached only as data disks.', example='Disabled'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

Default value: PL1.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
  provisionedIops?: long(name='ProvisionedIops', description='This parameter is not publicly available.', example='40000'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the disk.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  size?: int32(name='Size', description='The size of the disk. Unit: GiB. This parameter is required. Valid values:

*   Valid values when DiskCategory is set to cloud: 5 to 2,000

*   Valid values when DiskCategory is set to cloud_efficiency: 20 to 32,768

*   Valid values when DiskCategory is set to cloud_ssd: 20 to 32,768

*   Valid values when DiskCategory is set to cloud_essd: depends on the `PerformanceLevel` value.

    *   Valid values when PerformanceLevel is set to PL0: 40 to 32,768
    *   Valid values when PerformanceLevel is set to PL1: 20 to 32,768
    *   Valid values when PerformanceLevel is set to PL2: 461 to 32,768
    *   Valid values when PerformanceLevel is set to PL3: 1,261 to 32,768

If the `SnapshotId` parameter is specified, the following limits apply to the `SnapshotId` and `Size` parameters:

*   If the size of the snapshot specified by the `SnapshotId` parameter is greater than the specified `Size` value, the size of the created disk is equal to the specified snapshot size.
*   If the size of the snapshot specified by the `SnapshotId` parameter is smaller than the specified `Size` value, the size of the created disk is equal to the specified `Size` value.', example='2000'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use to create the disk. Snapshots that were created on or before July 15, 2013 cannot be used to create disks.

The following limits apply to the `SnapshotId` and `Size` parameters:

*   If the size of the snapshot specified by the `SnapshotId` parameter is greater than the specified `Size` value, the size of the created disk is equal to the specified snapshot size.
*   If the size of the snapshot specified by the `SnapshotId` parameter is smaller than the specified `Size` value, the size of the created disk is equal to the specified `Size` value.', example='s-bp67acfmxazb4p****'),
  storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. To create a disk in a specific dedicated block storage cluster, specify this parameter. For more information about dedicated block storage clusters, see [What is Dedicated Block Storage Cluster?](~~208883~~)

> You cannot specify storage set-related parameters (`StorageSetId` and `StorageSetPartitionNumber`) and the dedicated block storage cluster-related parameter (`StorageClusterId`) at the same time.', example='dbsc-j5e1sf2vaf5he8m2****'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.

> You cannot specify storage set-related parameters (`StorageSetId` and `StorageSetPartitionNumber`) and the dedicated block storage cluster-related parameter (`StorageClusterId`) at the same time.', example='ss-bp67acfmxazb4p****'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The number of partitions in the storage set. The value must be greater than or equal to 2 but cannot exceed the quota obtained by calling the [DescribeAccountAttributes](~~73772~~) operation.

Default value: 2.', example='3'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the disk. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the disk. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the disk.'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the pay-as-you-go disk.

*   If you do not specify InstanceId, you must specify ZoneId.
*   You cannot specify ZoneId and InstanceId at the same time.', example='cn-hangzhou-g'),
}

model CreateDiskResponseBody = {
  diskId?: string(name='DiskId', description='The disk ID.', example='d-bp131n0q38u3a4zi****'),
  orderId?: string(name='OrderId', description='The order ID.

> The order ID is returned only when you create a subscription disk.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDiskResponseBody(name='body'),
}

/**
  * *   When you create a disk, you can enable the multi-attach (`MultiAttach`) feature for the disk. We recommend that you familiarize yourself with the multi-attach feature and its limits before you enable it. For more information, see [NVMe protocol](~~256487~~) and [Use the multi-attach feature](~~262105~~).
  * *   The disk can be a basic disk, an ultra disk, a standard SSD, or an enhanced SSD (ESSD).
  * *   When you create disks, you may be charged for the resources used. We recommend that you get familiar with the Elastic Compute Service (ECS) billing methods before you create a disk. For more information, see [Billing overview](~~25398~~).
  * *   By default, `DeleteAutoSnapshot` is set to `true` when a disk is created. This indicates that when the disk is released, the automatic snapshots of the disk are also deleted. You can call the [ModifyDiskAttribute](~~25517~~) operation to modify the parameter.
  * *   If you do not configure the performance level when you create an ESSD, the performance level for the ESSD is PL1 by default. You can call the [ModifyDiskSpec](~~123780~~) operation to modify the performance level of the ESSD.
  * *   By default, for a disk that is created by calling this operation, the `Portable` attribute is set to `true` and the billing method is pay-as-you-go.
  *
  * @param request CreateDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateDiskResponse
 */
async function createDiskWithOptions(request: CreateDiskRequest, runtime: Util.RuntimeOptions): CreateDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.advancedFeatures)) {
    query['AdvancedFeatures'] = request.advancedFeatures;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.burstingEnabled)) {
    query['BurstingEnabled'] = request.burstingEnabled;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.encryptAlgorithm)) {
    query['EncryptAlgorithm'] = request.encryptAlgorithm;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.multiAttach)) {
    query['MultiAttach'] = request.multiAttach;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.provisionedIops)) {
    query['ProvisionedIops'] = request.provisionedIops;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.size)) {
    query['Size'] = request.size;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.storageClusterId)) {
    query['StorageClusterId'] = request.storageClusterId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   When you create a disk, you can enable the multi-attach (`MultiAttach`) feature for the disk. We recommend that you familiarize yourself with the multi-attach feature and its limits before you enable it. For more information, see [NVMe protocol](~~256487~~) and [Use the multi-attach feature](~~262105~~).
  * *   The disk can be a basic disk, an ultra disk, a standard SSD, or an enhanced SSD (ESSD).
  * *   When you create disks, you may be charged for the resources used. We recommend that you get familiar with the Elastic Compute Service (ECS) billing methods before you create a disk. For more information, see [Billing overview](~~25398~~).
  * *   By default, `DeleteAutoSnapshot` is set to `true` when a disk is created. This indicates that when the disk is released, the automatic snapshots of the disk are also deleted. You can call the [ModifyDiskAttribute](~~25517~~) operation to modify the parameter.
  * *   If you do not configure the performance level when you create an ESSD, the performance level for the ESSD is PL1 by default. You can call the [ModifyDiskSpec](~~123780~~) operation to modify the performance level of the ESSD.
  * *   By default, for a disk that is created by calling this operation, the `Portable` attribute is set to `true` and the billing method is pay-as-you-go.
  *
  * @param request CreateDiskRequest
  * @return CreateDiskResponse
 */
async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskWithOptions(request, runtime);
}

model CreateElasticityAssuranceRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool with which the elasticity assurance is associated. Valid values:

*   Open: open private pool
*   Target: specified private pool

Default value: Open.', example='Open'),
    name?: string(name='Name', description='The name of the elasticity assurance. The name must be 2 to 128 characters in length and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='eapTestName'),
  }(name='PrivatePoolOptions'),
  assuranceTimes?: string(name='AssuranceTimes', description='The total number of times that the elasticity assurance can be applied. Set the value to Unlimited. This value indicates that the elasticity assurance can be applied an unlimited number of times within its effective period.

Default value: Unlimited.', example='Unlimited'),
  clientToken?: string(name='ClientToken', description='The client token that you want to use to ensure the idempotency of the request. You can use the client to generate the token, but make sure that the token is unique among requests. The `token` can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', description='The description of the elasticity assurance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='This is description.'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of instances for which the capacity of an instance type is reserved.

Valid values: 1 to 1000.', example='2'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount', description='> This parameter is no longer used.', example='null'),
  instanceType?: [ string ](name='InstanceType', description='The instance types. Currently, an elasticity assurance can be created to reserve the capacity of a single instance type.', example='ecs.c6.xlarge'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The effective period of the elasticity assurance. The unit of the effective period is determined by the `PeriodUnit` value. Valid values:

*   When the `PeriodUnit` parameter is set to `Month`, the valid values are 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   When the `PeriodUnit` parameter is set to `Year`, the valid values are 1, 2, 3, 4, and 5.

Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the effective period of the elasticity assurance. Valid values:

*   Month
*   Year

Default value: Year.', example='Year'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the elasticity assurance is assigned.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The time when the elasticity assurance takes effect. The default value is the time when the CreateElasticityAssurance operation is called to create the elasticity assurance. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. For more information, see [ISO 8601](~~25696~~).', example='2020-10-30T06:32:00Z'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the elasticity assurance. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the elasticity assurance. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the elasticity assurance.'),
  zoneId?: [ string ](name='ZoneId', description='The zone IDs of the elasticity assurances. Currently, an elasticity assurance can be used to reserve resources within a single zone.', example='cn-hangzhou-h'),
}

model CreateElasticityAssuranceResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='1234567890'),
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The elasticity assurance ID.', example='eap-bp67acfmxazb4****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateElasticityAssuranceResponseBody(name='body'),
}

/**
  * Elasticity Assurance provides a new way to purchase and use resources with flexibility and assurance. It offers assured resource reservations for pay-as-you-go Elastic Compute Service (ECS) instances. For more information, see [Overview of Elasticity Assurance](~~193630~~).
  * *   Elasticity assurances are not refundable after purchase.
  * *   Elasticity assurances are applicable to only pay-as-you-go ECS instances.
  * *   Elasticity assurances only support unlimited mode. Therefore, you must set `AssuranceTimes` to `Unlimited`. Elasticity assurances in unlimited mode can be applied an unlimited number of times within their effective period and take effect immediately after they are purchased.
  *
  * @param request CreateElasticityAssuranceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateElasticityAssuranceResponse
 */
async function createElasticityAssuranceWithOptions(request: CreateElasticityAssuranceRequest, runtime: Util.RuntimeOptions): CreateElasticityAssuranceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assuranceTimes)) {
    query['AssuranceTimes'] = request.assuranceTimes;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceCpuCoreCount)) {
    query['InstanceCpuCoreCount'] = request.instanceCpuCoreCount;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateElasticityAssurance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Elasticity Assurance provides a new way to purchase and use resources with flexibility and assurance. It offers assured resource reservations for pay-as-you-go Elastic Compute Service (ECS) instances. For more information, see [Overview of Elasticity Assurance](~~193630~~).
  * *   Elasticity assurances are not refundable after purchase.
  * *   Elasticity assurances are applicable to only pay-as-you-go ECS instances.
  * *   Elasticity assurances only support unlimited mode. Therefore, you must set `AssuranceTimes` to `Unlimited`. Elasticity assurances in unlimited mode can be applied an unlimited number of times within their effective period and take effect immediately after they are purchased.
  *
  * @param request CreateElasticityAssuranceRequest
  * @return CreateElasticityAssuranceResponse
 */
async function createElasticityAssurance(request: CreateElasticityAssuranceRequest): CreateElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createElasticityAssuranceWithOptions(request, runtime);
}

model CreateForwardEntryRequest {
  externalIp?: string(name='ExternalIp'),
  externalPort?: string(name='ExternalPort'),
  forwardTableId?: string(name='ForwardTableId'),
  internalIp?: string(name='InternalIp'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateForwardEntryResponseBody = {
  forwardEntryId?: string(name='ForwardEntryId'),
  requestId?: string(name='RequestId'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateForwardEntryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateForwardEntryResponse
 */
// Deprecated
async function createForwardEntryWithOptions(request: CreateForwardEntryRequest, runtime: Util.RuntimeOptions): CreateForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateForwardEntry',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateForwardEntryRequest
  * @return CreateForwardEntryResponse
 */
// Deprecated
async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createForwardEntryWithOptions(request, runtime);
}

model CreateHaVipRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  ipAddress?: string(name='IpAddress'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateHaVipResponseBody = {
  haVipId?: string(name='HaVipId'),
  requestId?: string(name='RequestId'),
}

model CreateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateHaVipRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateHaVipResponse
 */
// Deprecated
async function createHaVipWithOptions(request: CreateHaVipRequest, runtime: Util.RuntimeOptions): CreateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHaVip',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateHaVipRequest
  * @return CreateHaVipResponse
 */
// Deprecated
async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHaVipWithOptions(request, runtime);
}

model CreateHpcClusterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the HPC cluster. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testHPCDescription'),
  name?: string(name='Name', description='The name of the HPC cluster. The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='hpc-Cluster-01'),
  ownerAccount?: string(name='OwnerAccount', description='RAM用户的账号登录名称。', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', description='RAM用户的虚拟账号ID。', example='1234567890'),
  regionId?: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='资源主账号的账号名称。', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源主账号的ID，亦即UID。', example='1234567890'),
}

model CreateHpcClusterResponseBody = {
  hpcClusterId?: string(name='HpcClusterId', description='The ID of cluster.', example='hpc-pnlg1ds9rky4****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHpcClusterResponseBody(name='body'),
}

async function createHpcClusterWithOptions(request: CreateHpcClusterRequest, runtime: Util.RuntimeOptions): CreateHpcClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateHpcCluster',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHpcCluster(request: CreateHpcClusterRequest): CreateHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHpcClusterWithOptions(request, runtime);
}

model CreateImageRequest {
  architecture?: string(name='Architecture', description='The system architecture of the system disk. If you specify a data disk snapshot to create the system disk of the custom image, you must use Architecture to specify the system architecture of the system disk. Valid values:

*   i386
*   x86\\_64
*   arm64

Default value: x86\\_64.', example='x86_64'),
  bootMode?: string(name='BootMode', description='The boot mode of the image. Valid values:

*   BIOS
*   UEFI

> You must be familiar with the boot modes supported by the specified image. When you use this parameter to change the boot mode of the image, specify a boot mode supported by the image to ensure that instances that use this image can be started as expected.', example='BIOS'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The image description. The description must be 2 to 256 characters in length and cannot start with [http:// or https://.](http://https://。)', example='ImageTestDescription'),
  detectionStrategy?: string(name='DetectionStrategy', description='The mode that you want to use to check the source image. If you do not specify this parameter, the source image is not checked. Only Linux images can be checked. Set the value to Standard, which indicates standard check mode.

The following items are checked in standard check mode:

*   Virtio: whether the virtio driver is installed.
*   Fstab: whether mounting configurations in the fstab file are correct.
*   Grub: whether GRand Unified Bootloader (GRUB) configurations are correct.
*   SystemImage: whether the image is valid. Do not import images that are in the ISO format or empty.
*   CloudInit: whether cloud-init is installed.
*   NVMe: whether the Non-Volatile Memory Express (NVMe) driver is installed.
*   Selinux: whether SElinux is enabled.
*   OnlineResizeFS: whether the root partition can be automatically resized.
*   Dhcp: whether Dynamic Host Configuration Protocol (DHCP) is enabled for network interface controllers (NICs).
*   RtcTimeMode: the RTC time mode.
*   Platform: the platform. Examples: Linux and Windows.
*   OSVersion: the operating system version. Example: Centos 7.9.
*   Architecture: the architecture. Examples: ARM and x86\\_64.
*   BootMode: the boot mode. Examples: UEFI and Legacy.
*   KernelVersion: the kernel version.
*   CloudAssistant: whether the Cloud Assistant client is installed.
*   SecurityCenterAgent: whether the Security Center agent is installed.', example='Standard'),
  diskDeviceMapping?: [ 
    {
      device?: string(name='Device', description='The device name of disk N in the custom image. Valid values:

*   For disks other than basic disks, such as standard SSDs, ultra disks, and enhanced SSDs (ESSDs), the valid values range from /dev/vda to /dev/vdz in ascending alphabetical order.
*   For basic disks, the valid values are in alphabetical order from /dev/xvda to /dev/xvdz.', example='/dev/vdb'),
      diskType?: string(name='DiskType', description='The type of disk N in the custom image. You can specify this parameter to create the system disk of the custom image from a data disk snapshot. If you do not specify this parameter, the disk type is determined by the corresponding snapshot. Valid values:

*   system: system disk
*   data: data disk', example='system'),
      size?: int32(name='Size', description='The size of disk N in the custom image. Unit: GiB. The valid values and default value of DiskDeviceMapping.N.Size depend on the value of DiskDeviceMapping.N.SnapshotId.

*   If no corresponding snapshot IDs are specified in the DiskDeviceMapping.N.SnapshotId value, the following valid values and default values are available for DiskDeviceMapping.N.Size:

    *   For basic disks, the valid values are 5 to 2000, and the default value is 5.
    *   For other types of disk, the valid values are 20 to 32768, and the default value is 20.

*   If a corresponding snapshot ID is specified in the DiskDeviceMapping.N.SnapshotId value, the value of DiskDeviceMapping.N.Size must be greater than or equal to the size of the specified snapshot. The default value of DiskDeviceMapping.N.Size is the size of the specified snapshot.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that is used to create the custom image.', example='s-bp17441ohwkdca0****'),
    }
  ](name='DiskDeviceMapping', description='The custom images.'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. The name must be 2 to 128 characters in length and can contain digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with acs: or aliyun. It cannot contain [http:// or https://.](http://https://。、（:）、（\\_）（-）。)', example='hangzhou-daily-update'),
  imageName?: string(name='ImageName', description='The image name. The name must be 2 to 128 characters in length and can contain digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with [http:// or https://.](http://https://。、（:）、（\\_）（-）。)', example='TestCentOS'),
  imageVersion?: string(name='ImageVersion', description='The image version.

> If you specify an instance by configuring `InstanceId`, and the instance uses an Alibaba Cloud Marketplace image or a custom image that is created from an Alibaba Cloud Marketplace image, you must leave this parameter empty or set this parameter to the value of ImageVersion of the instance.', example='2017011017'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1g6zv0ce8oghu7****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='The distribution of the operating system for the system disk in the custom image. If you specify a data disk snapshot to create the system disk of the custom image, you must use Platform to specify the distribution of the operating system for the system disk. Valid values:

*   CentOS
*   Ubuntu
*   SUSE
*   OpenSUSE
*   RedHat
*   Debian
*   CoreOS
*   Aliyun
*   Windows Server 2012
*   Windows 7
*   Customized Linux
*   Others Linux

Default value: Others Linux.', example='CentOS'),
  regionId?: string(name='RegionId', description='The region ID of the custom image that you want to create. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the custom image. If you leave this parameter empty, the image is assigned to the default resource group.

> If you call the CreateImage operation as a RAM user who is not authorized to manage the default resource group and leave `ResourceGroupId` empty, the `Forbidden: User not authorized to operate on the specified resource` error message is returned. Before you call the CreateImage operation again, you must specify the ID of a resource group that the RAM user is authorized to manage or authorize the RAM user to manage the default resource group.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that is used to create the custom image.', example='s-bp17441ohwkdca0****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the custom image. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with `aliyun` or `acs:`. The tag key cannot contain `http://` or `https://`.', example='KeyTest'),
      value?: string(name='Value', description='The value of tag N of the custom image. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with `acs:`. The tag value cannot contain `http://` or `https://`.', example='ValueTest'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateImageResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='m-bp146shijn7hujku****'),
  requestId?: string(name='RequestId', description='The request ID.', example='C8B26B44-0189-443E-9816-*******'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can use the created custom image only when the image is in the Available state.
  * *   If the responses contain `{"OperationLocks": {"LockReason" : "security"}}` when you query instance information, the instance is locked for security reasons. In this case, no operation can be performed on the instance.
  * You can call the CreateImage operation to create a custom image by using one of the following methods. The following request parameters are sorted by priority: `InstanceId` > `DiskDeviceMapping` > `SnapshotId`. If your request contains two or more parameters, the custom image is created based on the parameter that has a higher priority.
  * *   **Method 1**: Create a custom image from an instance. You need to only specify the instance ID (`InstanceId`). The instance must be in the `Running` or `Stopped` state. After the CreateImage operation is called, a snapshot is created for each disk of the instance. When you create a custom image from a running instance, some cache data may not be written to the disks. As a result, the data of the created custom image may be slightly inconsistent with that of the instance. We recommend that you create custom images from instances after you stop the instances ([StopInstances](~~155372~~)).
  * *   **Method 2**: Create a custom image from the system disk snapshot of an instance. You need to only specify the ID of the system disk snapshot (`SnapshotId`). The specified snapshot must be created on or after July 15, 2013.
  * *   **Method 3**: Create a custom image from multiple disk snapshots. You must specify the data mapping between the disks and the snapshots (`DiskDeviceMapping`).
  * When you use method 3 to create a custom image, take note of the following items:
  * *   You can specify only one system disk snapshot. The device name of the system disk must be /dev/xvda.
  * *   You can specify multiple data disk snapshots. The device names of the data disks must be unique and in alphabetical order from /dev/xvdb to /dev/xvdz.
  * *   You can leave the `SnapshotId` parameter empty. In this case, an empty data disk with a specified size is created.
  * *   The specified disk snapshot must be created on or after July 15, 2013.
  *
  * @param request CreateImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateImageResponse
 */
async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.architecture)) {
    query['Architecture'] = request.architecture;
  }
  if (!Util.isUnset(request.bootMode)) {
    query['BootMode'] = request.bootMode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.detectionStrategy)) {
    query['DetectionStrategy'] = request.detectionStrategy;
  }
  if (!Util.isUnset(request.diskDeviceMapping)) {
    query['DiskDeviceMapping'] = request.diskDeviceMapping;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageVersion)) {
    query['ImageVersion'] = request.imageVersion;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   You can use the created custom image only when the image is in the Available state.
  * *   If the responses contain `{"OperationLocks": {"LockReason" : "security"}}` when you query instance information, the instance is locked for security reasons. In this case, no operation can be performed on the instance.
  * You can call the CreateImage operation to create a custom image by using one of the following methods. The following request parameters are sorted by priority: `InstanceId` > `DiskDeviceMapping` > `SnapshotId`. If your request contains two or more parameters, the custom image is created based on the parameter that has a higher priority.
  * *   **Method 1**: Create a custom image from an instance. You need to only specify the instance ID (`InstanceId`). The instance must be in the `Running` or `Stopped` state. After the CreateImage operation is called, a snapshot is created for each disk of the instance. When you create a custom image from a running instance, some cache data may not be written to the disks. As a result, the data of the created custom image may be slightly inconsistent with that of the instance. We recommend that you create custom images from instances after you stop the instances ([StopInstances](~~155372~~)).
  * *   **Method 2**: Create a custom image from the system disk snapshot of an instance. You need to only specify the ID of the system disk snapshot (`SnapshotId`). The specified snapshot must be created on or after July 15, 2013.
  * *   **Method 3**: Create a custom image from multiple disk snapshots. You must specify the data mapping between the disks and the snapshots (`DiskDeviceMapping`).
  * When you use method 3 to create a custom image, take note of the following items:
  * *   You can specify only one system disk snapshot. The device name of the system disk must be /dev/xvda.
  * *   You can specify multiple data disk snapshots. The device names of the data disks must be unique and in alphabetical order from /dev/xvdb to /dev/xvdz.
  * *   You can leave the `SnapshotId` parameter empty. In this case, an empty data disk with a specified size is created.
  * *   The specified disk snapshot must be created on or after July 15, 2013.
  *
  * @param request CreateImageRequest
  * @return CreateImageResponse
 */
async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateImageComponentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  componentType?: string(name='ComponentType', description='The type of the image component. Only image build components are supported. Set the value to Build.

Default value: Build.', example='Build'),
  content?: string(name='Content', description='The content of the image component. The content consists of up to 127 commands.', example='RUN yum update -y'),
  description?: string(name='Description', description='The description. The description must be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).', example='This is description.'),
  name?: string(name='Name', description='The component name. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with http:// or https://.[ ](http://https://。、、、（:）、（\\_）、（.）（-）。)The name can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

> If you do not configure `Name`, the return value of `ImageComponentId` is used.', example='testComponent'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  systemType?: string(name='SystemType', description='The operating system type supported by the image component. Only Linux is supported. Set the value to Linux.

Default value: Linux.', example='Linux'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag key cannot start with acs: or aliyun.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag value cannot start with acs:.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateImageComponentResponseBody = {
  imageComponentId?: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateImageComponentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImageComponentResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   Only custom image components can be created.
  * *   The images must run Linux operating systems. This indicates that you must set `SystemType` to Linux.
  * *   You must set the image component type to image build component by setting the `ComponentType` parameter to Build.
  * *   You can use Dockerfile to edit the content of image components, and then pass the edited content into the `Content` parameter. The content size must not be greater than 16 KB. `FROM` commands cannot be used in image components. An image component supports up to 127 commands. For information about supported commands, see [Description of commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the Elastic Compute Service (ECS) console, but cannot call API operations to use image components to create image templates. For more information, see [Overview of Image Builder](~~197410~~).
  *
  * @param request CreateImageComponentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateImageComponentResponse
 */
async function createImageComponentWithOptions(request: CreateImageComponentRequest, runtime: Util.RuntimeOptions): CreateImageComponentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.componentType)) {
    query['ComponentType'] = request.componentType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemType)) {
    query['SystemType'] = request.systemType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImageComponent',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   Only custom image components can be created.
  * *   The images must run Linux operating systems. This indicates that you must set `SystemType` to Linux.
  * *   You must set the image component type to image build component by setting the `ComponentType` parameter to Build.
  * *   You can use Dockerfile to edit the content of image components, and then pass the edited content into the `Content` parameter. The content size must not be greater than 16 KB. `FROM` commands cannot be used in image components. An image component supports up to 127 commands. For information about supported commands, see [Description of commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the Elastic Compute Service (ECS) console, but cannot call API operations to use image components to create image templates. For more information, see [Overview of Image Builder](~~197410~~).
  *
  * @param request CreateImageComponentRequest
  * @return CreateImageComponentResponse
 */
async function createImageComponent(request: CreateImageComponentRequest): CreateImageComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageComponentWithOptions(request, runtime);
}

model CreateImagePipelineRequest {
  addAccount?: [ long ](name='AddAccount', description='The IDs of Alibaba Cloud accounts to which to share the image that will be created based on the image template. You can specify up to 20 account IDs.', example='1234567890'),
  baseImage?: string(name='BaseImage', description='The source image.

*   If you set `BaseImageType` to IMAGE, set the BaseImage parameter to the ID of a custom image.
*   If you set `BaseImageType` to IMAGE_FAMILY, set the BaseImage parameter to the name of an image family.', example='m-bp67acfmxazb4p****'),
  baseImageType?: string(name='BaseImageType', description='The type of the source image. Valid values:

*   IMAGE: image
*   IMAGE_FAMILY: image family', example='IMAGE'),
  buildContent?: string(name='BuildContent', description='The content of the image template. The content cannot exceed 16 KB in size and can contain up to 127 commands. For more information about the commands that are supported, see the "Usage notes" section of this topic.', example='FROM IMAGE:m-bp67acfmxazb4p****'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure', description='Specifies whether to release the intermediate instance when the image cannot be created. Valid values:

*   true
*   false

Default value: true.

> If the intermediate instance cannot be started, the instance is released by default.', example='true'),
  description?: string(name='Description', description='The description of the image template. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='This is description.'),
  imageName?: string(name='ImageName', description='The prefix of the image name. The prefix must be 2 to 64 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

The system generates the final complete image name that consists of the specified prefix and the ID of the build task (`ExecutionId`) in the format of `{ImageName}_{ExecutionId}`.', example='testImageName'),
  instanceType?: string(name='InstanceType', description='The instance type. You can call the [DescribeInstanceTypes](~~25620~~) to query instance types.

If you do not configure this parameter, an instance type that provides the fewest vCPUs and memory resources is automatically selected. This configuration is subject to resource availability of instance types. For example, the ecs.g6.large instance type is automatically selected. If available ecs.g6.large resources are insufficient, the ecs.g6.xlarge instance type is selected.', example='ecs.g6.large'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The size of the outbound public bandwidth for the intermediate instance. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='0'),
  name?: string(name='Name', description='The name of the image template. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

> If you do not specify the `Name` parameter, the return value of `ImagePipelineId` is used.', example='testImagePipeline'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size of the intermediate instance. Unit: GiB. Valid values: 20 to 500.

Default value: 40.', example='40'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20. You cannot specify empty strings as tag keys. The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value must be 0 to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the template.'),
  toRegionId?: [ string ](name='ToRegionId', description='The IDs of regions to which you want to distribute the image that is created based on the image template. You can specify up to 20 region IDs.

If you do not specify this parameter, the image is created only in the current region.', example='cn-hangzhou'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

If you do not specify this parameter, a new VPC and vSwitch are created. Make sure that the VPC quota in your account is sufficient. For more information, see [Limits and quotas](~~27750~~).', example='vsw-bp67acfmxazb4p****'),
}

model CreateImagePipelineResponseBody = {
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateImagePipelineResponseBody(name='body'),
}

/**
  * You can use image templates to specify custom image content and create images across regions and accounts. When you call this operation, take note of the following items:
  * *   You can create only custom image templates.
  * *   You can configure only public, custom, or shared Linux images or image families as the source images when you create image templates.
  * *   When you use an image template to create an image, you must create an intermediate Elastic Compute Service (ECS) instance to help create the image. The intermediate instance is billed by using the pay-as-you-go billing method. For more information, see [Pay-as-you-go](~~40653~~).
  * For the `BuildContent` parameter that specifies the content of image templates, take note of the following items:
  * *   If the `BuildContent` value contains `FROM` commands, the `FROM` commands override the values of `BaseImageType` that specifies the type of the source images and `BaseImage` that specifies the source image.
  * *   If the `BuildContent` value does not contain `FROM` commands, the system creates a `FROM` command that consists of the `BaseImageType` and `BaseImage` values in the format of `<BaseImageType>:<BaseImage>` and adds the command to the first line of the template content.
  * *   You can use Dockerfile to edit the content of image templates and then pass the edited content into the `BuildContent` parameter. The content of an image template cannot exceed 16 KB in size and can contain up to 127 commands. For information about commands supported by image templates, see [Description of commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the ECS console, but cannot call API operations to use image components to create image templates. For more information, see [Overview of Image Builder](~~197410~~).
  *
  * @param request CreateImagePipelineRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateImagePipelineResponse
 */
async function createImagePipelineWithOptions(request: CreateImagePipelineRequest, runtime: Util.RuntimeOptions): CreateImagePipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addAccount)) {
    query['AddAccount'] = request.addAccount;
  }
  if (!Util.isUnset(request.baseImage)) {
    query['BaseImage'] = request.baseImage;
  }
  if (!Util.isUnset(request.baseImageType)) {
    query['BaseImageType'] = request.baseImageType;
  }
  if (!Util.isUnset(request.buildContent)) {
    query['BuildContent'] = request.buildContent;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.deleteInstanceOnFailure)) {
    query['DeleteInstanceOnFailure'] = request.deleteInstanceOnFailure;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDiskSize)) {
    query['SystemDiskSize'] = request.systemDiskSize;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.toRegionId)) {
    query['ToRegionId'] = request.toRegionId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateImagePipeline',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use image templates to specify custom image content and create images across regions and accounts. When you call this operation, take note of the following items:
  * *   You can create only custom image templates.
  * *   You can configure only public, custom, or shared Linux images or image families as the source images when you create image templates.
  * *   When you use an image template to create an image, you must create an intermediate Elastic Compute Service (ECS) instance to help create the image. The intermediate instance is billed by using the pay-as-you-go billing method. For more information, see [Pay-as-you-go](~~40653~~).
  * For the `BuildContent` parameter that specifies the content of image templates, take note of the following items:
  * *   If the `BuildContent` value contains `FROM` commands, the `FROM` commands override the values of `BaseImageType` that specifies the type of the source images and `BaseImage` that specifies the source image.
  * *   If the `BuildContent` value does not contain `FROM` commands, the system creates a `FROM` command that consists of the `BaseImageType` and `BaseImage` values in the format of `<BaseImageType>:<BaseImage>` and adds the command to the first line of the template content.
  * *   You can use Dockerfile to edit the content of image templates and then pass the edited content into the `BuildContent` parameter. The content of an image template cannot exceed 16 KB in size and can contain up to 127 commands. For information about commands supported by image templates, see [Description of commands supported by Image Builder](~~200206~~).
  * You can use image components to create image templates in the ECS console, but cannot call API operations to use image components to create image templates. For more information, see [Overview of Image Builder](~~197410~~).
  *
  * @param request CreateImagePipelineRequest
  * @return CreateImagePipelineResponse
 */
async function createImagePipeline(request: CreateImagePipelineRequest): CreateImagePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImagePipelineWithOptions(request, runtime);
}

model CreateInstanceRequest {
  hibernationOptions?: {
    configured?: boolean(name='Configured', description='> This parameter is in invitational preview and is unavailable.', example='false'),
  }(name='HibernationOptions'),
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the private pool to use to create the instance. The ID of a private pool is the same as that of the elasticity assurance or capacity reservation for which the private pool is generated.', example='eap-bp67acfmxazb4****'),
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool to use to create the instance. A private pool is generated when an elasticity assurance or a capacity reservation takes effect. You can select a private pool when you create an instance. Valid values:

* Open: open private pool. The system selects a matching open private pool to create the instance. If no matching open private pools are found, resources in the public pool are used. When you set this parameter to Open, you can leave the `PrivatePoolOptions.Id` parameter empty.
* Target: specified private pool. The system uses the capacity in a specified private pool to create the instance. If the specified private pool is unavailable, the instance cannot be created. If you set this parameter to Target, you must specify the `PrivatePoolOptions.Id` parameter.
* None: no private pool. The capacity in private pools is not used.

Default value: None.

In the following scenarios, the PrivatePoolOptions.MatchCriteria parameter can be set only to `None` or left empty:

* Create a preemptible instance.
* Create an instance in the classic network.
* Create an instance on a dedicated host.', example='Open'),
  }(name='PrivatePoolOptions'),
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk. Valid values:

* cloud_essd: ESSD. When the parameter is set to this value, you can use the `SystemDisk.PerformanceLevel` parameter to specify the performance level of the disk.
* cloud_efficiency: ultra disk.
* cloud_ssd: standard SSD.
* cloud: basic disk.

For non-I/O optimized instances of retired instance types, the default value is cloud. For other instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='TestDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='SystemDiskName'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL1. Valid values:

* PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
* PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
* PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
* PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.

Default value: 40 or the size of the image, whichever is greater.', example='40'),
    storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use a disk in a dedicated block storage cluster as the system disk when you create the instance, you must specify this parameter. For more information about dedicated block storage clusters, see [What is Dedicated Block Storage Cluster?](~~208883~~)', example='dbsc-j5e1sf2vaf5he8m2****'),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity', description='Specifies whether to associate the instance on a dedicated host with the dedicated host. Valid values:

*   default: does not associate the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance is automatically deployed to another dedicated host in the automatic deployment resource pool if the available resources of the original dedicated host are insufficient.
*   host: associates the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance remains on the original dedicated host. If the available resources of the original dedicated host are insufficient, the instance cannot start.

Default value: default.', example='default'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is in invitational preview and is unavailable.', example='1234567890'),
      roleType?: string(name='RoleType', description='> This parameter is in invitational preview and is unavailable.', example='Primary'),
      rolearn?: string(name='Rolearn', description='> This parameter is in invitational preview and is unavailable.', example='acs:ram::123456789012****:role/adminrole'),
    }
  ](name='Arn', description='> This parameter is in invitational preview and is unavailable.'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PrePaid`. Default value: false. Valid values:

* true: enables auto-renewal.
* false: does not enable auto-renewal.', example='true'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal cycle of the instance. This parameter is required when AutoRenew is set to true.

Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, and 12', example='2'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  clusterId?: string(name='ClusterId', description='The ID of the cluster in which to create the instance.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='c-bp67acfmxazb4p****'),
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: the standard mode. For more information, see the "Standard mode" section in [Burstable instances](~~59977~~).
*   Unlimited: the unlimited mode. For more information, see the "Unlimited mode" section in [Burstable instances](~~59977~~).', example='Standard'),
  dataDisk?: [ 
    {
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   cloud: basic disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='TestDescription'),
      device?: string(name='Device', description='The mount point of data disk N.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='DataDiskName'),
      encryptAlgorithm?: string(name='EncryptAlgorithm', description='The algorithm to use to encrypt data disk N.', example='hide'),
      encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt data disk N.

Default value: false.', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key to use for data disk N.', example='0e478b7a-4262-4802-b8cb-00d****'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The N value must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL2'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

* Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

* Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

* Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL0: 40 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL1: 20 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL2: 461 to 32768.
    * Valid values when the DataDisk.N.PerformanceLevel parameter is set to PL3: 1261 to 32768.

* Valid values when DataDisk.N.Category is set to cloud: 5 to 2000.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16.

*   If the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored and the data disk is created with the size of the specified snapshot.
*   Use snapshots created after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
      storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use a disk in a dedicated block storage cluster as data disk N when you create the instance, you must specify this parameter.', example='dbsc-j5e1sf2vaf5he8m2****'),
    }
  ](name='DataDisk', description='The list of data disks.'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host on which to create the instance.

You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the list of dedicated host IDs.

If the `DedicatedHostId` parameter is specified, the `SpotStrategy` and `SpotPriceLimit` parameters are ignored. This is because preemptible instances cannot be created on dedicated hosts.', example='dh-bp67acfmxazb4p****'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable release protection for the instance. This parameter determines whether you can use the ECS console or call the [DeleteInstance](~~25507~~) operation to release the instance. Default value: false. Valid values:

*   true: enables release protection.
*   false: disables release protection.

>  This parameter is applicable only to pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group to which to deploy the instance. If the deployment set specified by the DeploymentSetId parameter uses the high availability group strategy (AvailabilityGroup), you can use the DeploymentSetGroupNo parameter to specify a deployment set group in the deployment set. Valid values: 1 to 7.', example='1'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****'),
  description?: string(name='Description', description='The description of the instance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='InstanceTest'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Default value: false. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether required parameters are specified, the request format, service limits, and available ECS resources. If the check fails, the corresponding error code is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked, and the request is made if the check succeeds.', example='false'),
  hostName?: string(name='HostName', description='The hostname of the instance.

* The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
* For a Windows instance, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
* For an instance that runs another type of operating system such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='LocalHostName'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster to which to assign the instance.', example='hpc-bp67acfmxazb4p****'),
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether to enable the access channel for instance metadata. Valid values:

*   enabled: enables the access channel for instance metadata.
*   disabled: disables the access channel for instance metadata.

Default value: enabled.

>  For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='0'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether to forcefully use the security-enhanced mode (IMDSv2) to access instance metadata. Valid values:

*   optional: does not forcibly use the security-enhanced mode (IMDSv2).
*   required: forcefully uses the security-enhanced mode (IMDSv2). After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

>  For more information about modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. You can set this parameter to obtain the latest available custom image from the specified image family to create the instance.

* ImageFamily must be empty if `ImageId` is specified.
* ImageFamily can be specified if `ImageId` is not specified.', example='hangzhou-daily-update'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. To use an Alibaba Cloud Marketplace image, you can view the `image ID` on the product page of the Alibaba Cloud Marketplace image. This parameter is required if you do not specify the `ImageFamily` parameter to obtain the latest available custom image from the specified image family.', example='ubuntu_18_04_64_20G_alibase_20190624.vhd'),
  innerIpAddress?: string(name='InnerIpAddress', description='The internal IP address to assign to the instance.', example='192.168.**.**'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Default value: PostPaid. Valid values:

* PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient balance or credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
* PostPaid: pay-as-you-go.', example='PrePaid'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). If you do not specify this parameter, the instance ID is used as the instance name by default.', example='2018-12-06T103200Z'),
  instanceType?: string(name='InstanceType', description='The instance type.

* Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
* Query available resources. You can call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.', example='ecs.g6.large'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Default value: PayByTraffic. Valid values:

* PayByBandwidth: pay-by-bandwidth
* PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

* When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
* When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='50'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='5'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

For retired instance types, the default value is none. For more information, see [Retired instance types](~~55263~~).

For other instance types, the default value is optimized.', example='optimized'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

>  For Windows instances, this parameter is ignored. This parameter is empty by default. The `Password` parameter takes effect even if the KeyPairName parameter is specified.', example='KeyPairTestName'),
  nodeControllerId?: string(name='NodeControllerId', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

```plain
( ) ` ~ ! @ # $ % ^ & * - _ + = | { } [ ] : ; \\" < > , . ? /
```

Take note of the following items:

* For security reasons, we recommend that you use HTTPS to send requests if the Password parameter is specified.
* Passwords of Windows instances cannot start with a forward slash (/).
* Passwords cannot be set for instances that run some types of operating systems such as Others Linux and Fedora CoreOS. For these instances, only key pairs can be set.', example='TestEcs123!'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the password preset in the image. When you use this parameter, leave Password empty and make sure that the selected image has a password preset.', example='false'),
  period?: int32(name='Period', description='The subscription period of the instance. The unit is specified by the `PeriodUnit` parameter. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. If the `DedicatedHostId` parameter is specified, the value of Period must not exceed the subscription period of the specified dedicated host. Valid values:

Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, and 12', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Valid values:

Month

Default value: Month.', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance. The private IP address must be an available IP address within the CIDR block of the specified vSwitch.', example='172.16.236.*'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='RAMTestName'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Active'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances in the same security group can communicate with each other.', example='sg-bp15ed6xe1yxeycg****'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   Protection periods of 2, 3, 4, 5, and 6 hours are in invitational preview. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='The interruption mode of the preemptible instance. Default value: Terminate. Set the value to Terminate, which specifies to release the instance.', example='Terminate'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. The value is accurate to three decimal places. This parameter is valid only when the `SpotStrategy` parameter is set to `SpotWithPriceLimit`.', example='0.98'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Default value: NoSpot. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.', example='NoSpot'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp1j4i2jdf3owlhe****'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set. Valid values: greater than or equal to 2.', example='2'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, disks, and primary elastic network interface (ENI). Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, disks, and primary ENI. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  tenancy?: string(name='Tenancy', description='Specifies whether to create the instance on a dedicated host. Valid values:

*   default: creates the instance on a non-dedicated host.
*   host: creates the instance on a dedicated host. If you do not specify the `DedicatedHostId` parameter, Alibaba Cloud selects a dedicated host for the instance.

Default value: default.', example='default'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='Specifies whether to use the system configurations for virtual machines provided by Alibaba Cloud (Windows: NTP and KMS. Linux: NTP and YUM).', example='true'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBlY3Mh'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required when you create an instance in a VPC. You can call the [DescribeVSwitches](~~35748~~) operation to query available vSwitches.

>  If the `VSwitchId` parameter is specified, the zone specified by the `ZoneId` parameter must be the zone where the specified vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch is located.', example='vsw-bp1s5fnvk4gn2tws0****'),
  vlanId?: string(name='VlanId', description='The ID of the virtual LAN (VLAN).', example='10'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

>  If the `VSwitchId` parameter is specified, the zone specified by the `ZoneId` parameter must be the zone where the specified vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch is located.

This parameter is empty by default.', example='cn-hangzhou-g'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
  orderId?: string(name='OrderId', description='The ID of the order. This parameter is returned only when `InstanceChargeType` is set to PrePaid.', example='1234567890'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  tradePrice?: float(name='TradePrice', description='The transaction price.', example='0.165'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

/**
  * > You can call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone. If you want to batch create instances that automatically enter the Running state after they are created, we recommend that you call the [RunInstances](~~63440~~) operation.
  * When you call this operation, take note of the following items:
  * * **Billing**:
  *     * You must fully understand the ECS billing methods before you create an instance because you may be charged for resources used by the instance. For more information, see [Billing overview](~~25398~~).
  *     * If you create a subscription instance (`PrePaid`), available coupons within your account are used by default.
  * * **Instance type**:
  *     * You can use the `IoOptimized` parameter to specify whether to create an I/O optimized instance.
  *     * Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
  *     * Query available resources. Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.
  * > If the `QuotaExceed.ElasticQuota` error is returned when you call this operation, it indicates that you have reached the maximum number of instances of the specified instance type that can be created within the specified region or the maximum number of vCPUs for all instance types in a zone. You can go to the [ECS console](https://ecs.console.aliyun.com/?spm=a2c8b.12215451.favorites.decs.5e3a336aMGTtzy#/privileges/quota) or [Quota Center](https://quotas.console.aliyun.com/products/ecs/quotas) to request a quota increase.
  * * **Image**:
  *     * The image determines the system disk configurations of the new instance. The system disk of the new instance is a clone of the specified image.
  *     * If you want to create instances with 512 MiB of memory, you cannot use Windows Server images except for Windows Server Semi-Annual Channel images.
  *     * If you want to create instances with 4 GiB or more of memory, you cannot use 32-bit OS image.
  * * **Network type**:
  *     * Each instance that resides in a virtual private cloud (VPC) must be connected to only a single vSwitch.
  *     * If the `VSwitchId` parameter is specified, the security group specified by `SecurityGroupId` and the vSwitch specified by `VSwitchId` must belong to the same VPC.
  *     * The value of `PrivateIpAddress` depends on that of `VSwitchId` and cannot be separately specified.`` If both the `VSwitchId` and `PrivateIpAddress` parameters are specified, the IP address specified by `PrivateIpAddress` must be available in the CIDR block of the specified vSwitch.
  * * **Public bandwidth**:
  *     * As of November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The throttling policy imposes the following constraints: Within a single region, the total maximum bandwidth value of all instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s and that of all instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *     * If you call the `CreateInstance` operation to create an instance, no public IP addresses are assigned to the instance. You can call the [AllocatePublicIpAddress](~~25544~~) operation to manually assign public IP addresses to instances.
  *     * Network usage fees are determined based on the settings of `InternetChargeType` and `InternetMaxBandwidthOut`.
  *     * The `InternetMaxBandwidthIn` value is irrelevant to billing because inbound data traffic is free of charge.
  *     * If `InternetChargeType` is set to PayByBandwidth, `InternetMaxBandwidthOut` specifies the fixed bandwidth value. A fixed bandwidth is a specified amount of public bandwidth allocated to an instance that uses the pay-by-bandwidth billing method for network usage.
  *     * If `InternetChargeType` is set to PayByTraffic, `InternetMaxBandwidthOut` specifies the peak bandwidth value. A peak bandwidth is the maximum amount of public bandwidth that an instance can consume when it uses the pay-by-traffic billing method for network usage. Network usage costs are calculated based on the volume of network traffic.
  * * **Security group**:
  *     * If no security groups are available in the region where you want to create an instance, you must call the [CreateSecurityGroup](~~25553~~) operation to create a security group in that region first.
  *     * The maximum number of instances that a security group can contain varies based on the security group type. For more information, see the "Security group limits" section in [Limits](~~25412~~).
  *     * Instances in the same security group can communicate with each other over the internal network. By default, instances in different security groups cannot communicate with each other. You can allow communication between instances by allowing mutual access between their security groups. For more information, see [AuthorizeSecurityGroup](~~25554~~) and [AuthorizeSecurityGroupEgress](~~25560~~).
  * * **Storage**:
  *     * The instance is assigned a system disk whose size is determined based on the specified image. The size of the system disk must be at least `20 GiB` and greater than or equal to the image size. For more information about system disk categories, see the description of the `SystemDisk.Category` parameter.
  *     * The system disk of an I/O optimized instance can only be an enhanced SSD (ESSD) (`cloud_essd`), a standard SSD (`cloud_ssd`), or an ultra disk (`cloud_efficiency`).
  *     * The maximum size of a data disk varies based on its category. For more information, see the description of the `DataDisk.N.Size` parameter.
  *     * A maximum of 16 data disks can be attached to each instance. The mount points of data disks are allocated by the system in alphabetical order from /dev/xvdb to /dev/xvdz.
  * * **User data**: If the instance type supports [user data](~~49121~~), you can use the UserData parameter to pass in user data. User data is encoded in Base64. We recommend that you do not pass in confidential information (such as passwords or private keys) in plaintext as user data. This is because the system does not encrypt `UserData` values when API requests are transmitted. If you must pass in confidential information, we recommend that you encrypt and encode the information in Base64 and then decode and decrypt the information in the same way within the instance.
  * * **Others**: When you call API operations by using Alibaba Cloud CLI or SDKs, you must delete periods (.) from some request parameters before you use the parameters. For example, use `SystemDiskCategory` instead of `SystemDisk.Category` as a request parameter.
  *
  * @param request CreateInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateInstanceResponse
 */
async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.creditSpecification)) {
    query['CreditSpecification'] = request.creditSpecification;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetGroupNo)) {
    query['DeploymentSetGroupNo'] = request.deploymentSetGroupNo;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.innerIpAddress)) {
    query['InnerIpAddress'] = request.innerIpAddress;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.nodeControllerId)) {
    query['NodeControllerId'] = request.nodeControllerId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotInterruptionBehavior)) {
    query['SpotInterruptionBehavior'] = request.spotInterruptionBehavior;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  if (!Util.isUnset(request.useAdditionalService)) {
    query['UseAdditionalService'] = request.useAdditionalService;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.hibernationOptions)) {
    query['HibernationOptions'] = request.hibernationOptions;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > You can call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone. If you want to batch create instances that automatically enter the Running state after they are created, we recommend that you call the [RunInstances](~~63440~~) operation.
  * When you call this operation, take note of the following items:
  * * **Billing**:
  *     * You must fully understand the ECS billing methods before you create an instance because you may be charged for resources used by the instance. For more information, see [Billing overview](~~25398~~).
  *     * If you create a subscription instance (`PrePaid`), available coupons within your account are used by default.
  * * **Instance type**:
  *     * You can use the `IoOptimized` parameter to specify whether to create an I/O optimized instance.
  *     * Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
  *     * Query available resources. Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.
  * > If the `QuotaExceed.ElasticQuota` error is returned when you call this operation, it indicates that you have reached the maximum number of instances of the specified instance type that can be created within the specified region or the maximum number of vCPUs for all instance types in a zone. You can go to the [ECS console](https://ecs.console.aliyun.com/?spm=a2c8b.12215451.favorites.decs.5e3a336aMGTtzy#/privileges/quota) or [Quota Center](https://quotas.console.aliyun.com/products/ecs/quotas) to request a quota increase.
  * * **Image**:
  *     * The image determines the system disk configurations of the new instance. The system disk of the new instance is a clone of the specified image.
  *     * If you want to create instances with 512 MiB of memory, you cannot use Windows Server images except for Windows Server Semi-Annual Channel images.
  *     * If you want to create instances with 4 GiB or more of memory, you cannot use 32-bit OS image.
  * * **Network type**:
  *     * Each instance that resides in a virtual private cloud (VPC) must be connected to only a single vSwitch.
  *     * If the `VSwitchId` parameter is specified, the security group specified by `SecurityGroupId` and the vSwitch specified by `VSwitchId` must belong to the same VPC.
  *     * The value of `PrivateIpAddress` depends on that of `VSwitchId` and cannot be separately specified.`` If both the `VSwitchId` and `PrivateIpAddress` parameters are specified, the IP address specified by `PrivateIpAddress` must be available in the CIDR block of the specified vSwitch.
  * * **Public bandwidth**:
  *     * As of November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The throttling policy imposes the following constraints: Within a single region, the total maximum bandwidth value of all instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s and that of all instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *     * If you call the `CreateInstance` operation to create an instance, no public IP addresses are assigned to the instance. You can call the [AllocatePublicIpAddress](~~25544~~) operation to manually assign public IP addresses to instances.
  *     * Network usage fees are determined based on the settings of `InternetChargeType` and `InternetMaxBandwidthOut`.
  *     * The `InternetMaxBandwidthIn` value is irrelevant to billing because inbound data traffic is free of charge.
  *     * If `InternetChargeType` is set to PayByBandwidth, `InternetMaxBandwidthOut` specifies the fixed bandwidth value. A fixed bandwidth is a specified amount of public bandwidth allocated to an instance that uses the pay-by-bandwidth billing method for network usage.
  *     * If `InternetChargeType` is set to PayByTraffic, `InternetMaxBandwidthOut` specifies the peak bandwidth value. A peak bandwidth is the maximum amount of public bandwidth that an instance can consume when it uses the pay-by-traffic billing method for network usage. Network usage costs are calculated based on the volume of network traffic.
  * * **Security group**:
  *     * If no security groups are available in the region where you want to create an instance, you must call the [CreateSecurityGroup](~~25553~~) operation to create a security group in that region first.
  *     * The maximum number of instances that a security group can contain varies based on the security group type. For more information, see the "Security group limits" section in [Limits](~~25412~~).
  *     * Instances in the same security group can communicate with each other over the internal network. By default, instances in different security groups cannot communicate with each other. You can allow communication between instances by allowing mutual access between their security groups. For more information, see [AuthorizeSecurityGroup](~~25554~~) and [AuthorizeSecurityGroupEgress](~~25560~~).
  * * **Storage**:
  *     * The instance is assigned a system disk whose size is determined based on the specified image. The size of the system disk must be at least `20 GiB` and greater than or equal to the image size. For more information about system disk categories, see the description of the `SystemDisk.Category` parameter.
  *     * The system disk of an I/O optimized instance can only be an enhanced SSD (ESSD) (`cloud_essd`), a standard SSD (`cloud_ssd`), or an ultra disk (`cloud_efficiency`).
  *     * The maximum size of a data disk varies based on its category. For more information, see the description of the `DataDisk.N.Size` parameter.
  *     * A maximum of 16 data disks can be attached to each instance. The mount points of data disks are allocated by the system in alphabetical order from /dev/xvdb to /dev/xvdz.
  * * **User data**: If the instance type supports [user data](~~49121~~), you can use the UserData parameter to pass in user data. User data is encoded in Base64. We recommend that you do not pass in confidential information (such as passwords or private keys) in plaintext as user data. This is because the system does not encrypt `UserData` values when API requests are transmitted. If you must pass in confidential information, we recommend that you encrypt and encode the information in Base64 and then decode and decrypt the information in the same way within the instance.
  * * **Others**: When you call API operations by using Alibaba Cloud CLI or SDKs, you must delete periods (.) from some request parameters before you use the parameters. For example, use `SystemDiskCategory` instead of `SystemDisk.Category` as a request parameter.
  *
  * @param request CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testKeyPairName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the enterprise resource group to which the SSH key pair belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to be bound to the key pair. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `aliyun` or `acs:`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the key pair. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain http:// or https://. It cannot start with acs:.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).', example='89:f0:ba:62:ac:b8:aa:e1:61:5e:fd:81:69:86:6d:6b:f0:c0:5a:**'),
  keyPairId?: string(name='KeyPairId', description='The ID of the SSH key pair.', example='ssh-bp67acfmxazb4p****'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName'),
  privateKeyBody?: string(name='PrivateKeyBody', description='The private key of the key pair. The private key is encoded with PEM in the PKCS#8 format.', example='MIIEpAIBAAKCAQEAtReyMzLIcBH78EV2zj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateKeyPairResponseBody(name='body'),
}

/**
  * ## Description
  * In addition to calling CreateKeyPair, you can create a key pair by using a third-party key pair generation tool and call the [ImportKeyPair](~~51774~~) operation to upload the key pair to an Alibaba Cloud region.
  * A maximum of 500 key pairs can be created in each region. For more information, see [Limits](~~25412~~).
  *
  * @param request CreateKeyPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateKeyPairResponse
 */
async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateKeyPair',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * In addition to calling CreateKeyPair, you can create a key pair by using a third-party key pair generation tool and call the [ImportKeyPair](~~51774~~) operation to upload the key pair to an Alibaba Cloud region.
  * A maximum of 500 key pairs can be created in each region. For more information, see [Limits](~~25412~~).
  *
  * @param request CreateKeyPairRequest
  * @return CreateKeyPairResponse
 */
async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model CreateLaunchTemplateRequest {
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to the system disk.', example='sp-gc7c37d4ylw7mtnk****'),
    burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for the system disk. Valid values:

*   true
*   false', example='true'),
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   cloud_essd: enhanced SSD (ESSD). You can use the `SystemDisk.PerformanceLevel` parameter to set the performance level of the ESSD to use as the system disk. cloud_auto: ESSD AutoPL disk.

For non-I/O optimized instances of a retired instance type, the default value is cloud. For other types of instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the system disk when the instance is released. Valid values:

*   true: releases the system disk when the instance is released.
*   false: does not release the system disk when the instance is released.

Default value: true.', example='true'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testSystemDiskDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testSystemDiskName'),
    encrypted?: string(name='Encrypted', description='系统盘是否加密。取值范围：

- true：加密。
- false：不加密。

默认值：false。

>中国香港D可用区、新加坡A可用区暂不支持在创建实例时加密系统盘。', example='false'),
    iops?: int32(name='Iops', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL0'),
    provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as the system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the SystemDisk.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.', example='40'),
  }(name='SystemDisk'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

*   If the value of seconds (`ss`) is not `00`, the time is automatically rounded to the nearest minute based on the value of minutes (`mm`).
*   The release time must be at least 30 minutes later than the current time.
*   The release time must be at most three years from the current time.', example='2018-01-01T12:05:00Z'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to data disk N.', example='sp-m5e7fa9ute44ssa****'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for data disk N. Valid values:

*   true
*   false', example='true'),
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD cloud_auto: ESSD AutoPL disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDataDiskDescription'),
      device?: string(name='Device', description='> This parameter will be removed in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='null'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDataDiskName'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt the data disk.', example='false'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as data disk N. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the DataDisk.N.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values when DataDisk.N.Category is set to cloud: 5 to 2000

*   Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16. When the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored. The data disk is created based on the size of the specified snapshot.

Use snapshots that were created on or after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
    }
  ](name='DataDisk', description='The data disks.'),
  deletionProtection?: boolean(name='DeletionProtection'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****'),
  description?: string(name='Description', description='The instance description. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testECSDescription'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Specifies whether to enable the operating system configuration of the instance.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='false'),
  hostName?: string(name='HostName', description='The instance hostname.

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='testHostName'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available images.', example='win2008r2_64_ent_sp1_en-us_40G_alibase_20170915.vhd'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud
*   self: custom images that you create.
*   others: shared images from other Alibaba Cloud accounts.
*   marketplace: [Alibaba Cloud Marketplace](https://market.aliyun.com/) images. If Alibaba Cloud Marketplace images are found, you can use these images without prior subscription. You must pay attention to the billing details of Alibaba Cloud Marketplace images.', example='system'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that you have sufficient balance and credit in your account. Otherwise, an `InvalidPayMethod` error is returned.
*   PostPaid: pay-as-you-go.', example='PrePaid'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testInstanceName'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance. For more information, see [Instance families](~~25378~~). Alternatively, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.', example='ecs.g5.large'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidths may be limited. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='10'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.', example='10'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether to create an I/O optimized instance. Valid values:

*   none: creates a non-I/O optimized instance.
*   optimized: creates an I/O optimized instance.', example='optimized'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the primary elastic network interface (ENI). Valid values: 1 to 10.', example='1'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. This parameter is empty by default.

*   For Windows instances, this parameter is ignored The `Password` parameter takes effect even if the KeyPairName parameter is specified.
*   For Linux instances, the password-based logon method is disabled by default.', example='testKeyPairName'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testLaunchTemplateName'),
  networkInterface?: [ 
    {
      description?: string(name='Description', description='The description of the secondary ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testEniDescription'),
      instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you do not need to set this parameter.', example='testEniName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the primary ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: uses the remote direct memory access (RDMA) communication mode with the Elastic RDMA Interface (ERI) enabled.', example='Standard'),
      primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary IP address to assign to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2.

    *   If the value of N is 1, you can configure a primary or secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, the specified number of instances are created and consecutive primary IP addresses starting from the specified one are assigned to the instances. In this case, you cannot attach secondary ENIs to the instances.
    *   If the value of N is 2, you can configure a primary ENI and a secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, you cannot set `NetworkInterface.2.InstanceType` to Secondary to attach a secondary ENI.

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, this parameter is equivalent to `PrivateIpAddress` and you cannot specify `PrivateIpAddress`.

*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, the specified primary IP address is assigned to the secondary ENI. The default value is an IP address that is randomly selected from within the CIDR block of the vSwitch to which to connect the secondary ENI.

> You can attach only a single secondary ENI when you create an instance. After the instance is created, you can call the [CreateNetworkInterface](~~58504~~) and [AttachNetworkInterface](~~58515~~) operations to attach more secondary ENIs.', example='192.168.**.**'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign secondary ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `SecurityGroupId` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupIds.N`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp15ed6xe1yxeycg****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign ENI N.

*   Valid values of the first N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you can configure a primary ENI and a secondary ENI.
*   The second N indicates that one or more security group IDs can be specified. The valid values of N vary based on the maximum number of security groups to which an instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).

Take note of the following items:

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter or `NetworkInterface.N.SecurityGroupId`. In this case, this parameter is equivalent to `SecurityGroupIds.N` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp67acfmxazb4p****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `VSwitchId` and you cannot specify `VSwitchId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the vSwitch to which to connect the instance.', example='vsw-bp1s5fnvk4gn2tws0****'),
    }
  ](name='NetworkInterface', description='The information of the ENI.'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image.

> If you set the PasswordInherit parameter to true, make sure that you leave the Password parameter empty and the selected image has a preset password.', example='false'),
  period?: int32(name='Period', description='The subscription duration of the instance. Unit: months. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.

To assign a private IP address to an instance that resides in a VPC, make sure that the IP address is an idle IP address within the CIDR block of the vSwitch specified by the `VSwitchId` parameter.', example='10.1.**.**'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='testRamRoleName'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance, Elastic Block Storage (EBS) device, and elastic network interface (ENI).', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening for the operating system. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Deactive'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances in the same security group can communicate with each other. A security group can contain up to 1,000 instances.

> You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.', example='sg-bp15ed6xe1yxeycg****'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of the security groups to which to assign the instance. The valid values of N are based on the maximum number of security groups to which the instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412~~).

> You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.', example='sg-bp15ed6xe1yxeycg7****'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that no protection period is configured for the preemptible instance.

Default value: 1.', example='1'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. The value is accurate to three decimal places. This parameter is valid only when the `SpotStrategy` parameter is set to `SpotWithPriceLimit`.', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.', example='NoSpot'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, EBS device, and ENI. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, EBS device, and ENI. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with acs: or aliyun or contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags of the launch template.'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='The ID of the resource group to which the launch template belongs.', example='rg-bp67acfmxazb4p****'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the launch template. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the launch template. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='TemplateTag', description='The tags to add to the launch template.'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBlY3Mh'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required if you specify the VpcId parameter.', example='vsw-bp1s5fnvk4gn2tws0****'),
  versionDescription?: string(name='VersionDescription', description='The description of the launch template version. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testVersionDescription'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12433upq1y5scen****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance.', example='cn-hangzhou-g'),
}

model CreateLaunchTemplateResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.', example='lt-m5eiaupmvm2op9d****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model CreateLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLaunchTemplateResponseBody(name='body'),
}

/**
  * ## Description
  * Launch templates contain preset configurations used to create instances, such as the region, image ID, instance type, security group ID, and public bandwidth settings. If a specific parameter is not included in a launch template, you must manually specify the parameter when you use the launch template to create an instance.
  * After you create a launch template (`CreateLaunchTemplate`), its version number is set to 1 by default. You can create multiple versions (`CreateLaunchTemplateVersion`) for the launch template. Version numbers start from 1 and increment by one. If you do not specify a template version number when you use a launch template to create instances ([RunInstances](~~63440~~)), the default version is used.
  * When you call this operation, take note of the following items:
  * *   You can create up to 30 launch templates in each region. Each launch template can have up to 30 versions.
  * *   Most parameters in launch templates are optional. When you create a launch template, ECS does not verify the existence or validity of specified parameter values. The validity of the parameter values are verified only when you use the launch template to create instances.
  * *   If you set a specific parameter in a launch template, you cannot filter out this parameter when you use the launch template to create instances ([RunInstances](~~63440~~)). For example, if you set the `HostName` parameter to LocalHost in a launch template and do not set the `HostName` parameter when you call the `RunInstances` operation to create instances from the launch template, the created instance still has a hostname of `LocalHost`. If you want to overwrite the `LocalHost` value of HostName provided by the launch template, you can set `HostName` to MyHost or another value when you call the `RunInstances` operation.
  *
  * @param request CreateLaunchTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateLaunchTemplateResponse
 */
async function createLaunchTemplateWithOptions(request: CreateLaunchTemplateRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableVmOsConfig)) {
    query['EnableVmOsConfig'] = request.enableVmOsConfig;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageOwnerAlias)) {
    query['ImageOwnerAlias'] = request.imageOwnerAlias;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.networkInterface)) {
    query['NetworkInterface'] = request.networkInterface;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.templateResourceGroupId)) {
    query['TemplateResourceGroupId'] = request.templateResourceGroupId;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.versionDescription)) {
    query['VersionDescription'] = request.versionDescription;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLaunchTemplate',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * Launch templates contain preset configurations used to create instances, such as the region, image ID, instance type, security group ID, and public bandwidth settings. If a specific parameter is not included in a launch template, you must manually specify the parameter when you use the launch template to create an instance.
  * After you create a launch template (`CreateLaunchTemplate`), its version number is set to 1 by default. You can create multiple versions (`CreateLaunchTemplateVersion`) for the launch template. Version numbers start from 1 and increment by one. If you do not specify a template version number when you use a launch template to create instances ([RunInstances](~~63440~~)), the default version is used.
  * When you call this operation, take note of the following items:
  * *   You can create up to 30 launch templates in each region. Each launch template can have up to 30 versions.
  * *   Most parameters in launch templates are optional. When you create a launch template, ECS does not verify the existence or validity of specified parameter values. The validity of the parameter values are verified only when you use the launch template to create instances.
  * *   If you set a specific parameter in a launch template, you cannot filter out this parameter when you use the launch template to create instances ([RunInstances](~~63440~~)). For example, if you set the `HostName` parameter to LocalHost in a launch template and do not set the `HostName` parameter when you call the `RunInstances` operation to create instances from the launch template, the created instance still has a hostname of `LocalHost`. If you want to overwrite the `LocalHost` value of HostName provided by the launch template, you can set `HostName` to MyHost or another value when you call the `RunInstances` operation.
  *
  * @param request CreateLaunchTemplateRequest
  * @return CreateLaunchTemplateResponse
 */
async function createLaunchTemplate(request: CreateLaunchTemplateRequest): CreateLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateWithOptions(request, runtime);
}

model CreateLaunchTemplateVersionRequest {
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to the system disk.', example='sp-bp1dgzpaxwc4load****'),
    burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature. Valid values:

*   true: encrypts the disk.
*   false: does not enable the performance burst feature.', example='true'),
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD.
*   cloud_essd: enhanced SSD (ESSD). You can use the `SystemDisk.PerformanceLevel` parameter to set the performance level of the ESSD to use as the system disk.

For non-I/O optimized instances of a retired instance type, the default value is cloud. For other types of instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the system disk when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testSystemDiskDescription'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='cloud_ssdSystem'),
    encrypted?: string(name='Encrypted', description='Specifies whether to encrypt the system disk. Valid values:

*   true
*   false

Default value: false

> You cannot encrypt system disks when you create instances in Hong Kong Zone D or Singapore Zone A.', example='false'),
    iops?: int32(name='Iops', description='> This parameter is unavailable.', example='30000'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to be used as the system disk. Default value: PL0. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL0'),
    provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as data disk N. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the size of the specified image.', example='40'),
  }(name='SystemDisk'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

*   If the value of `ss` is not `00`, the time is automatically rounded to the nearest minute based on the value of `mm`.
*   The specified time must be at least 30 minutes later than the current time.
*   The specified time can be at most three years from the current time.', example='2018-01-01T12:05:00Z'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to data disk N.', example='sp-bp67acfmxazb4p****'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature. Valid values:

*   true: encrypts the disk.
*   false: does not enable the performance burst feature.', example='true'),
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD.
*   cloud_essd: ESSD

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDataDiskDescription'),
      device?: string(name='Device', description='> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='null'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDataDiskName'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt data disk N.', example='false'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as data disk N. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values if you set the Category parameter to cloud: 5 to 2000.

*   Valid values if you set the Category parameter to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16. If the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored. The data disk is created with the size of the specified snapshot.

Use snapshots that were created on or after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
    }
  ](name='DataDisk', description='The data disks.'),
  deletionProtection?: boolean(name='DeletionProtection'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****'),
  description?: string(name='Description', description='The description of the instance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Specifies whether to enable the operating system configuration of the instance.', example='false'),
  hostName?: string(name='HostName', description='The hostname of the instance.

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).
*   For instances that run other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).', example='testHostName'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the Elastic Compute Service (ECS) instance. You can call the [DescribeImages](~~25534~~) operation to query available images.', example='win2008r2_64_ent_sp1_en-us_40G_alibase_20170915.vhd'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image.

> This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='system'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription. If you set this parameter to PrePaid, make sure that your account has sufficient credits. Otherwise, an `InvalidPayMethod` error is returned.
*   PostPaid: pay-as-you-go', example='PrePaid'),
  instanceName?: string(name='InstanceName', description='The instance name. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testInstanceName'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.', example='ecs.g5.large'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Default value: PayByTraffic. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter are 1 to 10 and the default value is 10.
*   If the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter range from 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='50'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.', example='5'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether to create an I/O optimized instance. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: creates an I/O optimized instance.', example='optimized'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the primary elastic network interface (ENI). Valid values: 1 to 10.', example='1'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair to bind to the instance.

*   For Windows instances, this parameter is ignored The `Password` parameter is valid even if the KeyPairName parameter is specified.
*   For Linux instances, the password-based logon method is disabled by default.', example='testKeyPairName'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template. For more information, see [DescribeLaunchTemplates](~~73759~~). You must specify `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template.', example='lt-m5eiaupmvm2op9d****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template. The name must be 2 to 128 characters in length, It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testLaunchTemplateName'),
  networkInterface?: [ 
    {
      description?: string(name='Description', description='The description of the secondary ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testNetworkInterfaceDescription'),
      instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the secondary ENI. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='testNetworkInterfaceName'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the primary ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: enables Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.', example='Standard'),
      primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the secondary ENI. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='192.168.**.**'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the secondary ENI. The security groups of the secondary ENI and of the instance must belong to the same VPC. The value of N in `NetworkInterface.N` cannot be greater than 1.

> The `NetworkInterface.N.SecurityGroupId` parameter and the `NetworkInterface.N.SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the secondary ENI. The security group and the secondary ENI must belong to the same VPC. The valid values of N in `SecurityGroupIds.N` depend on the maximum number of security groups to which the secondary ENI can belong. For more information, see the "Security group limits" section in [Limits](~~25412~~). The value of N in `NetworkInterface.N` cannot be greater than 1.

> The `NetworkInterface.N.SecurityGroupId` parameter and the `NetworkInterface.N.SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp67acfmxazb4p****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the secondary ENI. The instance and the ENI must be located within the same zone of the same VPC, but they can be connected to different vSwitches. The value of N in `NetworkInterface.N` cannot be greater than 1.', example='vsw-bp1s5fnvk4gn2tws0****'),
    }
  ](name='NetworkInterface', description='The information of the ENI.'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the password that is preconfigured in the image. Valid values:

*   true: uses the password that is preconfigured in the mage.
*   false: does not use the password that is preconfigured in the image.

Default value: false.

> If the PasswordInherit parameter is specified, you must leave the Password parameter empty. Before you use this parameter, make sure that a password is preset for the image.', example='false'),
  period?: int32(name='Period', description='The subscription period of the instance. Unit: months. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.

To assign a private IP address to an instance of the VPC type, make sure that the IP address is an idle IP address within the CIDR block of the vSwitch specified by the `VSwitchId` parameter.', example='10.1.**.**'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='testRamRoleName'),
  regionId?: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening for the operating system. Valid values:

*   Active: Security hardening is enabled. This value is applicable only to public images.
*   Deactive: Security hardening is disabled. This value is available to all types of images.', example='Active'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances within the same security group can access each other.

> The `SecurityGroupId` parameter and the `SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg****'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the instance. The valid values of N depend on the maximum number of security groups to which the instance can belong. For more information, see [Quantity limits](~~25412~~).

> The `SecurityGroupId` parameter and the `SecurityGroupIds.N` parameter are mutually exclusive.', example='sg-bp15ed6xe1yxeycg7****'),
  spotDuration?: int32(name='SpotDuration', description='The retention period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that no protection period is configured for the preemptible instance.

Default value: 1.', example='1'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the preemptible instance. A maximum of three decimal places are allowed.', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', description='The preemption policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Default value: NoSpot. Valid values:

*   NoSpot: The instance is created as a pay-as-you-go instance.
*   SpotWithPriceLimit: The instances of the compute node are preemptible instances. These types of instances have a specified maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.', example='NoSpot'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the instance, block storage devices, or primary ENI. Valid values of N: 1 to 5. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the instance, block storage devices, or primary ENI. Valid values of N: 1 to 5. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the activation code.'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The maximum size of raw data is 16 KB.', example='ZWNobyBoZWxsbyBl****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance. This parameter is required if you specify the VpcId parameter.', example='vsw-bp1s5fnvk4gn2tws0****'),
  versionDescription?: string(name='VersionDescription', description='The description of the launch template version. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testVersionDescription'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='vpc-bp12433upq1y5scen****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone to which the instance belongs.', example='cn-hangzhou-g'),
}

model CreateLaunchTemplateVersionResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId', description='启动模板ID。更多信息，请参见[DescribeLaunchTemplates](~~73759~~)。

使用启动模板创建实例时，您必须指定`LaunchTemplateId`或`LaunchTemplateName`以确定启动模板。', example='lt-bp1apo0bbbkuy0rj****'),
  launchTemplateVersionNumber?: long(name='LaunchTemplateVersionNumber', description='The version number of the launch template.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DExxxxx'),
}

model CreateLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateLaunchTemplateVersionResponseBody(name='body'),
}

/**
  * If you want to modify the parameters of a launch template version, you can create another version with different parameter settings for the launch template. A maximum of 30 versions can be created for each launch template.
  *
  * @param request CreateLaunchTemplateVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateLaunchTemplateVersionResponse
 */
async function createLaunchTemplateVersionWithOptions(request: CreateLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableVmOsConfig)) {
    query['EnableVmOsConfig'] = request.enableVmOsConfig;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageOwnerAlias)) {
    query['ImageOwnerAlias'] = request.imageOwnerAlias;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.networkInterface)) {
    query['NetworkInterface'] = request.networkInterface;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.versionDescription)) {
    query['VersionDescription'] = request.versionDescription;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateLaunchTemplateVersion',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you want to modify the parameters of a launch template version, you can create another version with different parameter settings for the launch template. A maximum of 30 versions can be created for each launch template.
  *
  * @param request CreateLaunchTemplateVersionRequest
  * @return CreateLaunchTemplateVersionResponse
 */
async function createLaunchTemplateVersion(request: CreateLaunchTemplateVersionRequest): CreateLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateVersionWithOptions(request, runtime);
}

model CreateNatGatewayRequest {
  bandwidthPackage?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      ipCount?: int32(name='IpCount'),
      zone?: string(name='Zone'),
    }
  ](name='BandwidthPackage'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model CreateNatGatewayResponseBody = {
  bandwidthPackageIds?: {
    bandwidthPackageId?: [ string ](name='BandwidthPackageId')
  }(name='BandwidthPackageIds'),
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds'),
  natGatewayId?: string(name='NatGatewayId'),
  requestId?: string(name='RequestId'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNatGatewayResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateNatGatewayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNatGatewayResponse
 */
// Deprecated
async function createNatGatewayWithOptions(request: CreateNatGatewayRequest, runtime: Util.RuntimeOptions): CreateNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackage)) {
    query['BandwidthPackage'] = request.bandwidthPackage;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatGateway',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateNatGatewayRequest
  * @return CreateNatGatewayResponse
 */
// Deprecated
async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatGatewayWithOptions(request, runtime);
}

model CreateNetworkInterfaceRequest {
  businessType?: string(name='BusinessType', description='> This parameter is no longer used.', example='null'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the ENI. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testDescription'),
  instanceType?: string(name='InstanceType', description='> This parameter is no longer used.', example='null'),
  ipv4Prefix?: [ string ](name='Ipv4Prefix', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv4PrefixCount?: int32(name='Ipv4PrefixCount', description='> 该参数正在邀测中，暂未开放使用。', example='hide'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N to assign to the ENI. Valid values of N: 1 to 10.

Example: Ipv6Address.1=2001:db8:1234:1a00::\\*\\*\\*\\*

> To assign IPv6 addresses to the ENI, you must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but not both.', example='2001:db8:1234:1a00::****'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the ENI. Valid values: 1 to 10.

> To assign IPv6 addresses to the ENI, you must specify `Ipv6Addresses.N` or `Ipv6AddressCount` but not both.', example='1'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv6PrefixCount?: int32(name='Ipv6PrefixCount', description='> 该参数正在邀测中，暂未开放使用。', example='hide'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='testNetworkInterfaceName'),
  networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication model of the ENI. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: enables Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.

> HighPerformance supports only the c7re RDMA-enhanced instance family. The maximum number of ENIs in the RDMA mode that can be attached to a c7re instance is determined by the instance type. The c7re instance family is in invitational preview in Beijing Zone K. For more information, see [Overview of instance families](~~25378~~).

Default value: Standard.', example='Standard'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the ENI.

The specified IP address must be an idle IP address within the CIDR block of the vSwitch with which to associate the ENI. If this parameter is not specified, an idle IP address is assigned from within the vSwitch CIDR block at random.', example='172.17.**.**'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='Secondary private IP address N to assign to the ENI. This IP address must be an idle IP address within the CIDR block of the vSwitch with which to associate the ENI. Valid values of N: 0 to 10.

> To assign secondary private IP addresses to the ENI, you can specify `PrivateIpAddress.N` and `SecondaryPrivateIpAddressCount` but not both.', example='172.17.**.**'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI. Valid values: 1 to 2048.

When you attach the ENI to an instance, make sure that the value of this parameter is less than the maximum number of queues per ENI that is allowed for the instance type. To view the maximum number of queues per ENI allowed for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation and then check the return value of `MaximumQueueNumberPerEni`.

This parameter is left empty by default. If you do not specify this parameter, the default number of queues per ENI for the instance type of an instance is used when you attach the ENI to the instance. To view the default number of queues per ENI for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation and then check the return value of `SecondaryEniQueueNumber`.', example='1'),
  queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is not publicly available.', example='22'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to assign the ENI. You can call the [ListResourceGroups](~~158855~~) operation to query the most recent resource group list.', example='rg-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount', description='The number of private IP addresses to be automatically created by ECS.', example='1'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the ENI. The security group and the ENI must belong to the same VPC.

> You must specify `SecurityGroupId` or `SecurityGroupIds.N` but not both.', example='sg-bp1fg655nh68xyz9i****'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the ENI. The security group and the ENI must belong to the same VPC. The valid values of N are determined based on the maximum number of security groups to which an ENI can be assigned. For more information, see [Limits](~~25412~~).

**

You must specify **SecurityGroupId** or SecurityGroupIds.N but not both.````', example='sg-bp1fg655nh68xyz9i****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the ENI. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the ENI. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the ENI.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which to associate the ENI. Private IP addresses are assigned to the ENI from within the CIDR block of the vSwitch.', example='vsw-bp1s5fnvk4gn2tws03****'),
  visible?: boolean(name='Visible', description='> This parameter is no longer used.', example='null'),
}

model CreateNetworkInterfaceResponseBody = {
  description?: string(name='Description', description='The description of the ENI.', example='testDescription'),
  ipv4PrefixSets?: {
    ipv4PrefixSet?: [ 
    {
      ipv4Prefix?: string(name='Ipv4Prefix', description='> 该参数正在邀测中，暂未开放使用。', example='hide'),
    }
  ](name='Ipv4PrefixSet')
  }(name='Ipv4PrefixSets', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv6PrefixSets?: {
    ipv6PrefixSet?: [ 
    {
      ipv6Prefix?: string(name='Ipv6Prefix', description='> 该参数正在邀测中，暂未开放使用。', example='hide'),
    }
  ](name='Ipv6PrefixSet')
  }(name='Ipv6PrefixSets', description='> 该参数正在邀测中，暂未开放使用。'),
  ipv6Sets?: {
    ipv6Set?: [ 
    {
      ipv6Address?: string(name='Ipv6Address', description='The IPv6 address.', example='2001:db8:1234:1a00::****'),
    }
  ](name='Ipv6Set')
  }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI.'),
  macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
  ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address.', example='true'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance to which the ENI is attached.', example='172.17.**.**'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets', description='The private IP addresses.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the ENI belongs.', example='rg-2ze88m67qx5z****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
  serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
  status?: string(name='Status', description='The state of the ENI.', example='Available'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The tag key of the ENI.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value of the ENI.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags of the ENI.'),
  type?: string(name='Type', description='The type of the ENI.', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-bp16usj2p27htro3****'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.', example='vpc-bp1j7w3gc1cexjqd****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the ENI.', example='cn-hangzhou-e'),
}

model CreateNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkInterfaceResponseBody(name='body'),
}

/**
  * ## Usage notes
  * Take note of the following items:
  * *   CreateNetworkInterface is a synchronous operation. After an ENI is created, the ENI immediately enters the Available state and can be attached to an Elastic Compute Service (ECS) instance.
  * *   If NetworkInterfaceId is empty in the response, no ENI is created. Call the operation again to create an ENI.
  * *   An ENI can be attached only to a single instance that resides in a virtual private cloud (VPC).
  * *   When an ENI is detached from an instance and attached to another instance, the attributes of the ENI remain unchanged and network traffic is redirected to the new instance.
  * *   If you want to assign IPv6 addresses when you create an ENI, make sure that IPv6 has been enabled for the vSwitch with which to associate the ENI. For more information, see [What is an IPv6 gateway?](~~98896~~)
  * *   A quota is imposed on the number of ENIs that can be created per Alibaba Cloud region per account. You can view the quota in the ECS console. For more information, see [View and increase resource quotas](~~184115~~).
  * **For information about examples on how to call this operation, see **[Create an ENI](~~471552~~).
  *
  * @param request CreateNetworkInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateNetworkInterfaceResponse
 */
async function createNetworkInterfaceWithOptions(request: CreateNetworkInterfaceRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ipv4Prefix)) {
    query['Ipv4Prefix'] = request.ipv4Prefix;
  }
  if (!Util.isUnset(request.ipv4PrefixCount)) {
    query['Ipv4PrefixCount'] = request.ipv4PrefixCount;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.ipv6Prefix)) {
    query['Ipv6Prefix'] = request.ipv6Prefix;
  }
  if (!Util.isUnset(request.ipv6PrefixCount)) {
    query['Ipv6PrefixCount'] = request.ipv6PrefixCount;
  }
  if (!Util.isUnset(request.networkInterfaceName)) {
    query['NetworkInterfaceName'] = request.networkInterfaceName;
  }
  if (!Util.isUnset(request.networkInterfaceTrafficMode)) {
    query['NetworkInterfaceTrafficMode'] = request.networkInterfaceTrafficMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.primaryIpAddress)) {
    query['PrimaryIpAddress'] = request.primaryIpAddress;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.queueNumber)) {
    query['QueueNumber'] = request.queueNumber;
  }
  if (!Util.isUnset(request.queuePairNumber)) {
    query['QueuePairNumber'] = request.queuePairNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.secondaryPrivateIpAddressCount)) {
    query['SecondaryPrivateIpAddressCount'] = request.secondaryPrivateIpAddressCount;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.visible)) {
    query['Visible'] = request.visible;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * Take note of the following items:
  * *   CreateNetworkInterface is a synchronous operation. After an ENI is created, the ENI immediately enters the Available state and can be attached to an Elastic Compute Service (ECS) instance.
  * *   If NetworkInterfaceId is empty in the response, no ENI is created. Call the operation again to create an ENI.
  * *   An ENI can be attached only to a single instance that resides in a virtual private cloud (VPC).
  * *   When an ENI is detached from an instance and attached to another instance, the attributes of the ENI remain unchanged and network traffic is redirected to the new instance.
  * *   If you want to assign IPv6 addresses when you create an ENI, make sure that IPv6 has been enabled for the vSwitch with which to associate the ENI. For more information, see [What is an IPv6 gateway?](~~98896~~)
  * *   A quota is imposed on the number of ENIs that can be created per Alibaba Cloud region per account. You can view the quota in the ECS console. For more information, see [View and increase resource quotas](~~184115~~).
  * **For information about examples on how to call this operation, see **[Create an ENI](~~471552~~).
  *
  * @param request CreateNetworkInterfaceRequest
  * @return CreateNetworkInterfaceResponse
 */
async function createNetworkInterface(request: CreateNetworkInterfaceRequest): CreateNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfaceWithOptions(request, runtime);
}

model CreateNetworkInterfacePermissionRequest {
  accountId?: long(name='AccountId', description='The ID of the ENI.', example='1234567890'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The permission on the ENI. Set the value to InstanceAttach.

InstanceAttach: allows authorized users to attach the ENI to an ECS instance. The ENI and the ECS instance must reside in the same zone.', example='eni-bp14v2sdd3v8htln****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  permission?: string(name='Permission', description='The ID of the request.', example='InstanceAttach'),
  regionId?: string(name='RegionId', description='The ID of the Alibaba Cloud partner (a certified ISV) or individual user.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateNetworkInterfacePermissionResponseBody = {
  networkInterfacePermission?: {
    accountId?: long(name='AccountId', description='The ID of the permission on the ENI.', example='1234567890'),
    networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the Alibaba Cloud partner (a certified ISV).', example='eni-bp14v2sdd3v8htln****'),
    networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId', description='The name of the Alibaba Cloud service.', example='eni-perm-bp1cs4lwn56lfb****'),
    permission?: string(name='Permission', description='The ID of the ENI.', example='InstanceAttach'),
    permissionState?: string(name='PermissionState', example='Granted'),
    serviceName?: string(name='ServiceName', description='The state of the permission on the ENI. Valid values:

*   Pending: The permission is being granted.
*   Granted: The permission is granted.
*   Revoking: The permission is being revoked.
*   Revoked: The permission is revoked.', example='Elastic Compute Service'),
  }(name='NetworkInterfacePermission', description='The permission on the ENI.'),
  requestId?: string(name='RequestId', description='Details about permissions on ENIs.', example='0FCD3DEF-63D3-4605-A818-805C8BD7DB87'),
}

model CreateNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkInterfacePermissionResponseBody(name='body'),
}

async function createNetworkInterfacePermissionWithOptions(request: CreateNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permission)) {
    query['Permission'] = request.permission;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkInterfacePermission',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkInterfacePermission(request: CreateNetworkInterfacePermissionRequest): CreateNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfacePermissionWithOptions(request, runtime);
}

model CreatePhysicalConnectionRequest {
  accessPointId?: string(name='AccessPointId'),
  circuitCode?: string(name='CircuitCode'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  lineOperator?: string(name='LineOperator'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerLocation?: string(name='PeerLocation'),
  portType?: string(name='PortType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type'),
  userCidr?: string(name='UserCidr'),
  bandwidth?: int32(name='bandwidth'),
}

model CreatePhysicalConnectionResponseBody = {
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  requestId?: string(name='RequestId'),
}

model CreatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreatePhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreatePhysicalConnectionResponse
 */
// Deprecated
async function createPhysicalConnectionWithOptions(request: CreatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.lineOperator)) {
    query['LineOperator'] = request.lineOperator;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantPhysicalConnectionId)) {
    query['RedundantPhysicalConnectionId'] = request.redundantPhysicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['bandwidth'] = request.bandwidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreatePhysicalConnectionRequest
  * @return CreatePhysicalConnectionResponse
 */
// Deprecated
async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionWithOptions(request, runtime);
}

model CreatePrefixListRequest {
  addressFamily?: string(name='AddressFamily', description='The IP address family. Valid values:

*   IPv4
*   IPv6', example='IPv4'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The `ClientToken` value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  description?: string(name='Description', description='The description of the prefix list. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  entry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block in entry N. Valid values of N: 0 to 200. Take note of the following items:

*   The total number of entries must not exceed the `MaxEntries` value.
*   CIDR block types are determined by the IP address family. You cannot combine IPv4 and IPv6 CIDR blocks in a single prefix list.
*   CIDR blocks must be unique across all entries in a prefix list. For example, you cannot specify 192.168.1.0/24 twice in the entries of the prefix list.
*   IP addresses are supported. The system converts IP addresses into CIDR blocks. For example, if you specify 192.168.1.100, the system converts it into the 192.168.1.100/32 CIDR block.
*   If an IPv6 CIDR block is used, the system converts it to the zero compression format and changes uppercase letters into lowercase ones. For example, if you specify 2001:0DB8:0000:0000:0000:0000:0000:0000/32, the system converts it into 2001:db8::/32.

For more information about CIDR blocks, see the "What is CIDR block?" section of the [Network FAQ](https://www.alibabacloud.com/help/doc-detail/40637.htm#title-gu4-uzk-12r) topic.

This parameter is empty by default.', example='192.168.1.0/24'),
      description?: string(name='Description', description='The description in entry N. The description must be 2 to 32 characters in length and cannot start with `http://` or `https://`. Valid values of N: 0 to 200.', example='Description Sample 01'),
    }
  ](name='Entry', description='前缀列表条目信息。'),
  maxEntries?: int32(name='MaxEntries', description='The maximum number of entries that the prefix list can contain. Valid values: 1 to 200.', example='10'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://`, `https://`, `com.aliyun`, or `com.alibabacloud`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='PrefixListNameSample'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the prefix list.', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePrefixListResponseBody = {
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model CreatePrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePrefixListResponseBody(name='body'),
}

/**
  * PrefixListNameSample
  *
  * @param request CreatePrefixListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreatePrefixListResponse
 */
async function createPrefixListWithOptions(request: CreatePrefixListRequest, runtime: Util.RuntimeOptions): CreatePrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressFamily)) {
    query['AddressFamily'] = request.addressFamily;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.entry)) {
    query['Entry'] = request.entry;
  }
  if (!Util.isUnset(request.maxEntries)) {
    query['MaxEntries'] = request.maxEntries;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrefixList',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * PrefixListNameSample
  *
  * @param request CreatePrefixListRequest
  * @return CreatePrefixListResponse
 */
async function createPrefixList(request: CreatePrefixListRequest): CreatePrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrefixListWithOptions(request, runtime);
}

model CreateRouteEntryRequest {
  clientToken?: string(name='ClientToken'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  nextHopId?: string(name='NextHopId'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList'),
  nextHopType?: string(name='NextHopType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouteEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateRouteEntryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRouteEntryResponse
 */
// Deprecated
async function createRouteEntryWithOptions(request: CreateRouteEntryRequest, runtime: Util.RuntimeOptions): CreateRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopList)) {
    query['NextHopList'] = request.nextHopList;
  }
  if (!Util.isUnset(request.nextHopType)) {
    query['NextHopType'] = request.nextHopType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouteEntry',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateRouteEntryRequest
  * @return CreateRouteEntryResponse
 */
// Deprecated
async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteEntryWithOptions(request, runtime);
}

model CreateRouterInterfaceRequest {
  accessPointId?: string(name='AccessPointId'),
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
  instanceChargeType?: string(name='InstanceChargeType'),
  name?: string(name='Name'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId'),
  oppositeRegionId?: string(name='OppositeRegionId'),
  oppositeRouterId?: string(name='OppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  pricingCycle?: string(name='PricingCycle'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  role?: string(name='Role'),
  routerId?: string(name='RouterId'),
  routerType?: string(name='RouterType'),
  spec?: string(name='Spec'),
  userCidr?: string(name='UserCidr'),
}

model CreateRouterInterfaceResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model CreateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateRouterInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRouterInterfaceResponse
 */
// Deprecated
async function createRouterInterfaceWithOptions(request: CreateRouterInterfaceRequest, runtime: Util.RuntimeOptions): CreateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessPointId)) {
    query['AccessPointId'] = request.accessPointId;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.healthCheckSourceIp)) {
    query['HealthCheckSourceIp'] = request.healthCheckSourceIp;
  }
  if (!Util.isUnset(request.healthCheckTargetIp)) {
    query['HealthCheckTargetIp'] = request.healthCheckTargetIp;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.oppositeAccessPointId)) {
    query['OppositeAccessPointId'] = request.oppositeAccessPointId;
  }
  if (!Util.isUnset(request.oppositeInterfaceId)) {
    query['OppositeInterfaceId'] = request.oppositeInterfaceId;
  }
  if (!Util.isUnset(request.oppositeInterfaceOwnerId)) {
    query['OppositeInterfaceOwnerId'] = request.oppositeInterfaceOwnerId;
  }
  if (!Util.isUnset(request.oppositeRegionId)) {
    query['OppositeRegionId'] = request.oppositeRegionId;
  }
  if (!Util.isUnset(request.oppositeRouterId)) {
    query['OppositeRouterId'] = request.oppositeRouterId;
  }
  if (!Util.isUnset(request.oppositeRouterType)) {
    query['OppositeRouterType'] = request.oppositeRouterType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.role)) {
    query['Role'] = request.role;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.routerType)) {
    query['RouterType'] = request.routerType;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRouterInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateRouterInterfaceRequest
  * @return CreateRouterInterfaceResponse
 */
// Deprecated
async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouterInterfaceWithOptions(request, runtime);
}

model CreateSecurityGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the security group. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

By default, this parameter is left empty.', example='testDescription'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security group belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.

The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). Default value: null.', example='testSecurityGroupName'),
  securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group.
*   enterprise: advanced security group. For more information, see [Advanced security groups](~~120621~~).', example='enterprise'),
  serviceManaged?: boolean(name='ServiceManaged', description='This parameter is not publicly available.', example='false'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N.

Valid values of N: 1 to 20. You cannot specify empty strings as tag keys. The tag key must be 1 to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N.

Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that you want to add to the security group.'),
  vpcId?: string(name='VpcId', description='The ID of the VPC in which you want to create the security group.

> The VpcId parameter is required only if you want to create security groups of the VPC type. In regions that support the classic network, you can create security groups of the classic network type without the need to specify the VpcId parameter.', example='vpc-bp1opxu1zkhn00gzv****'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1fg655nh68xyz9****'),
}

model CreateSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSecurityGroupResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can create up to 100 security groups in a single Alibaba Cloud region.
  * *   To create a security group of the Virtual Private Cloud (VPC) type, you must specify the VpcId parameter.
  *
  * @param request CreateSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSecurityGroupResponse
 */
async function createSecurityGroupWithOptions(request: CreateSecurityGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  if (!Util.isUnset(request.securityGroupType)) {
    query['SecurityGroupType'] = request.securityGroupType;
  }
  if (!Util.isUnset(request.serviceManaged)) {
    query['ServiceManaged'] = request.serviceManaged;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   You can create up to 100 security groups in a single Alibaba Cloud region.
  * *   To create a security group of the Virtual Private Cloud (VPC) type, you must specify the VpcId parameter.
  *
  * @param request CreateSecurityGroupRequest
  * @return CreateSecurityGroupResponse
 */
async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityGroupWithOptions(request, runtime);
}

model CreateSimulatedSystemEventsRequest {
  eventType?: string(name='EventType', description='The type of the system event. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system error.
*   InstanceFailure.Reboot: The instance is restarted due to an instance error.
*   SystemMaintenance.Stop: The instance is stopped due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Redeploy: The instance is redeployed due to a system error.
*   SystemFailure.Stop: The instance is stopped due to a system error.
*', example='SystemMaintenance.Reboot'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances. You can specify up to 100 instance IDs.', example='i-bp1gtjxuuvwj17zr****'),
  notBefore?: string(name='NotBefore', description='The scheduled start time of the event. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

> For events that occur due to system errors or instance errors, the simulated events of such events enter the `Executing` state when the simulated events are created. The value of `NotBefore` is the time when the simulated events enter the `Executed` state.', example='2018-12-01T06:32:31Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateSimulatedSystemEventsResponseBody = {
  eventIdSet?: {
    eventId?: [ string ](name='EventId')
  }(name='EventIdSet', description='The IDs of the simulated events.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model CreateSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSimulatedSystemEventsResponseBody(name='body'),
}

/**
  * You can use the ECS console, call [ECS API](~~63962~~) operations, or use CloudMonitor to view the scheduled simulated system events.
  * The following descriptions provide the lifecycle of a simulated system event:
  * *   Scheduled: The state of the simulated system event is automatically changed to Scheduled after it is scheduled.
  * *   Executed: The state of the simulated system event is automatically changed to Executed at the time specified by the NotBefore parameter if no manual intervention is involved.
  * *   Canceled: The state of the simulated system event is changed to Canceled if you cancel the event by calling the [CancelSimulatedSystemEvents](~~88808~~) operation.
  * *   Avoided: The state of the simulated system event generated from maintenance-triggered instance restart can be changed to Avoided if you restart the instance before the scheduled time of the simulated system event. The maintenance-triggered instance restart is indicated by the SystemMaintenance.Reboot value. For more information, see [RebootInstance](~~25502~~).
  *
  * @param request CreateSimulatedSystemEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSimulatedSystemEventsResponse
 */
async function createSimulatedSystemEventsWithOptions(request: CreateSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CreateSimulatedSystemEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.notBefore)) {
    query['NotBefore'] = request.notBefore;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSimulatedSystemEvents',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use the ECS console, call [ECS API](~~63962~~) operations, or use CloudMonitor to view the scheduled simulated system events.
  * The following descriptions provide the lifecycle of a simulated system event:
  * *   Scheduled: The state of the simulated system event is automatically changed to Scheduled after it is scheduled.
  * *   Executed: The state of the simulated system event is automatically changed to Executed at the time specified by the NotBefore parameter if no manual intervention is involved.
  * *   Canceled: The state of the simulated system event is changed to Canceled if you cancel the event by calling the [CancelSimulatedSystemEvents](~~88808~~) operation.
  * *   Avoided: The state of the simulated system event generated from maintenance-triggered instance restart can be changed to Avoided if you restart the instance before the scheduled time of the simulated system event. The maintenance-triggered instance restart is indicated by the SystemMaintenance.Reboot value. For more information, see [RebootInstance](~~25502~~).
  *
  * @param request CreateSimulatedSystemEventsRequest
  * @return CreateSimulatedSystemEventsResponse
 */
async function createSimulatedSystemEvents(request: CreateSimulatedSystemEventsRequest): CreateSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimulatedSystemEventsWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  category?: string(name='Category', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

By default, this parameter is left empty.', example='Standard'),
  clientToken?: string(name='ClientToken', description='The retention period of the snapshot. Valid values: 1 to 65536. Unit: days. The snapshot is automatically released when its retention period expires.

This parameter is empty by default, which indicates that the snapshot is not automatically released.', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The cloud disk ID.', example='testDescription'),
  diskId?: string(name='DiskId', description='Creates a snapshot for a disk.', example='d-bp1s5fnvk4gn2tws0****'),
  instantAccess?: boolean(name='InstantAccess', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique across requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='false'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The ID of the resource group to which to assign the snapshot.', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceGroupId?: string(name='ResourceGroupId', description='The snapshot type. Valid values:

*   Standard: normal snapshot
*   Flash: local snapshot

> This parameter will be removed in the future. We recommend that you use the `InstantAccess` parameter to ensure future compatibility. This parameter and the `InstantAccess` parameter cannot be specified at the same time. For more information, see the "Description" section of this topic.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  retentionDays?: int32(name='RetentionDays', description='The snapshot name. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.', example='30'),
  snapshotName?: string(name='SnapshotName', description='The local snapshot feature is replaced by the instant access feature. Parameter description:

*   If you used the local snapshot feature before December 14, 2020, you can use the `Category` or `InstantAccess` parameter as expected and must take note of the following items:

    *   The `Category` and `InstantAccess` parameters cannot be specified at the same time.
    *   If neither the `Category` nor `InstantAccess` parameters is specified, normal snapshots are created.

*   If you did not use the local snapshot feature before December 14, 2020, you can use the `InstantAccess` parameter but cannot use the `Category` parameter.

You cannot create snapshots for a disk in the following scenarios:

*   The number of manual snapshots of the disk has reached 256.
*   A snapshot is being created for the disk.
*   The instance to which the disk is attached has never been started.
*   The ECS instance to which the disk is attached is not in the **Stopped** or **Running** state.````
*   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.

When you create a snapshot, take note of the following items:

*   If a snapshot is being created, you cannot use this snapshot to create a custom image by calling the [CreateImage](~~25535~~) operation.
*   When a snapshot is being created for a disk that is attached to an instance, do not change the instance state.
*   You can create snapshots for a disk that is in the **Expired** state.`` If the release time scheduled for a disk arrives while a snapshot is being created for the disk, the snapshot is in the **Creating** state and is deleted when the disk is released.``', example='testSnapshotName'),
  storageLocationArn?: string(name='StorageLocationArn', description='The value of tag N that you want to add to the snapshot. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain [http:// or https://.](http://https://。)', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tags to add to the snapshot.', example='TestKey'),
      value?: string(name='Value', description='The tag key to add to the snapshot.

> This parameter will be deprecated in the future. We recommend that you use the Tag.N.key parameter to ensure future compatibility.', example='TestValue'),
    }
  ](name='Tag', description='Specifies whether to enable the instant access feature. Valid values:

*   true: enables the instant access feature. This feature can be enabled only for enhanced SSDs (ESSDs).

    **

    **Note**After the instant access feature is enabled, an instant access (IA) snapshot is created and can be used to roll back disks or create disks across zones even when the snapshot is being created. This feature ensures that a new ESSD snapshot is available for use as soon as possible regardless of its size.

*   false: does not enable the instant access feature. If InstantAccess is set to false, a normal snapshot is created.

Default value: false.

> This parameter and the `Category` parameter cannot be specified at the same time. For more information, see the "Description" section of this topic.'),
}

model CreateSnapshotResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotId?: string(name='SnapshotId', example='s-bp17441ohwka0yuh****'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotResponseBody(name='body'),
}

/**
  * The request ID.
  *
  * @param request CreateSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSnapshotResponse
 */
async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instantAccess)) {
    query['InstantAccess'] = request.instantAccess;
  }
  if (!Util.isUnset(request.instantAccessRetentionDays)) {
    query['InstantAccessRetentionDays'] = request.instantAccessRetentionDays;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['RetentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.storageLocationArn)) {
    query['StorageLocationArn'] = request.storageLocationArn;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The request ID.
  *
  * @param request CreateSnapshotRequest
  * @return CreateSnapshotResponse
 */
async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model CreateSnapshotGroupRequest {
  description?: string(name='Description', description='The description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  diskId?: [ string ](name='DiskId', description='The ID of cloud disk N for which you want to create snapshots. You can specify multiple cloud disk IDs across instances within the same zone. Valid values of N: 1 to 16. A single snapshot-consistent group can contain snapshots of up to 16 cloud disks whose total disk size does not exceed 32 TiB.

Take note of the following items:

*   You cannot specify both DiskId.N and `ExcludeDiskId.N` in the same request.
*   If `InstanceId` is set, you can use DiskId.N to specify only cloud disks attached to the instance specified by InstanceId, and you cannot use DiskId.N to specify cloud disks attached to multiple instances.'),
  excludeDiskId?: [ string ](name='ExcludeDiskId', description='The ID of cloud disk N for which you do not want to create snapshots. If this parameter is specified, the created snapshot-consistent group does not contain snapshots of the cloud disk. Valid values of N: 1 to 16.

This parameter is empty by default, which indicates that snapshots are created for all the disks of the instance.

> You cannot specify ExcludeDiskId.N and `DiskId.N` in the same request.', example='d-j6cf7l0ewidb78lq****'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-j6ca469urv8ei629****'),
  instantAccess?: boolean(name='InstantAccess', description='Specifies whether to enable the instant access feature. Valid values:

*   true
*   false

Default value: false.', example='false'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The number of days for which the instant access feature is available. Unit: days. Valid values: 1 to 65535.

This parameter takes effect only when `InstantAccess` is set to true. The instant access feature is automatically disabled when the specified duration ends.

This parameter is empty by default, which indicates that the expiration time of the instant access feature is determined by the time when snapshots are released.', example='1'),
  name?: string(name='Name', description='The name of the snapshot-consistent group. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:). It must start with a letter and cannot start with `http://` or `https://`.', example='testName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageLocationArn?: string(name='StorageLocationArn', description='> This parameter is unavailable for public use.', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the snapshot-consistent group. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the snapshot-consistent group. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
}

model CreateSnapshotGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='01ABBD93-1ABB-4D92-B496-1A3D20EC0697'),
  snapshotGroupId?: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group.', example='ssg-j6ciyh3k52qp7ovm****'),
}

model CreateSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSnapshotGroupResponseBody(name='body'),
}

/**
  * You can specify `InstanceId` to create a snapshot-consistent group for the specified cloud disks of an instance. You can also specify `DiskId.N` to create a snapshot-consistent group for multiple cloud disks that are attached to multiple instances within the same zone.
  * > You cannot specify both `DiskId.N` and `ExcludeDiskId.N` in the same request. If `InstanceId` is set, you can use `DiskId.N` to specify only cloud disks attached to the instance specified by InstanceId. You cannot use DiskId.N to specify cloud disks attached to multiple instances.
  * When you call this operation, take note of the following items:
  * *   The cloud disk for which you want to create a snapshot must be in the **In Use**or **Unattached** (`Available`) state.``
  *     *   If the cloud disk is in the **In Use** state, the instance to which the cloud disk is attached must be in the **Running**or **Stopped** state.``````
  *     *   If the cloud disk is in the **Unattached** (`Available`) state, make sure that the cloud disk has been attached to an ECS instance. Snapshots cannot be created for cloud disks that have never been attached to an ECS instance.
  * *   The snapshot-consistent group feature can be used to create snapshots only for enhanced SSDs (ESSDs).
  * *   A snapshot-consistent group can contain snapshots of up to 16 cloud disks (including the system disk and data disks) whose total disk size does not exceed 32 TiB.
  * *   Snapshots that you created by using the snapshot-consistent group feature are retained until they are deleted. We recommend that you delete unnecessary snapshots on a regular basis to prevent them from incurring excess fees.
  * *   Snapshot-consistent groups cannot be created for cloud disks that have the multi-attach feature enabled. If cloud disks for which the multi-attach feature is enabled are attached to an instance, you must set `ExcludeDiskId.N` to exclude these cloud disks.
  * For more information about the snapshot-consistent group feature, see [Create a snapshot-consistent group](~~199625~~).
  *
  * @param request CreateSnapshotGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSnapshotGroupResponse
 */
async function createSnapshotGroupWithOptions(request: CreateSnapshotGroupRequest, runtime: Util.RuntimeOptions): CreateSnapshotGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.excludeDiskId)) {
    query['ExcludeDiskId'] = request.excludeDiskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instantAccess)) {
    query['InstantAccess'] = request.instantAccess;
  }
  if (!Util.isUnset(request.instantAccessRetentionDays)) {
    query['InstantAccessRetentionDays'] = request.instantAccessRetentionDays;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageLocationArn)) {
    query['StorageLocationArn'] = request.storageLocationArn;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSnapshotGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify `InstanceId` to create a snapshot-consistent group for the specified cloud disks of an instance. You can also specify `DiskId.N` to create a snapshot-consistent group for multiple cloud disks that are attached to multiple instances within the same zone.
  * > You cannot specify both `DiskId.N` and `ExcludeDiskId.N` in the same request. If `InstanceId` is set, you can use `DiskId.N` to specify only cloud disks attached to the instance specified by InstanceId. You cannot use DiskId.N to specify cloud disks attached to multiple instances.
  * When you call this operation, take note of the following items:
  * *   The cloud disk for which you want to create a snapshot must be in the **In Use**or **Unattached** (`Available`) state.``
  *     *   If the cloud disk is in the **In Use** state, the instance to which the cloud disk is attached must be in the **Running**or **Stopped** state.``````
  *     *   If the cloud disk is in the **Unattached** (`Available`) state, make sure that the cloud disk has been attached to an ECS instance. Snapshots cannot be created for cloud disks that have never been attached to an ECS instance.
  * *   The snapshot-consistent group feature can be used to create snapshots only for enhanced SSDs (ESSDs).
  * *   A snapshot-consistent group can contain snapshots of up to 16 cloud disks (including the system disk and data disks) whose total disk size does not exceed 32 TiB.
  * *   Snapshots that you created by using the snapshot-consistent group feature are retained until they are deleted. We recommend that you delete unnecessary snapshots on a regular basis to prevent them from incurring excess fees.
  * *   Snapshot-consistent groups cannot be created for cloud disks that have the multi-attach feature enabled. If cloud disks for which the multi-attach feature is enabled are attached to an instance, you must set `ExcludeDiskId.N` to exclude these cloud disks.
  * For more information about the snapshot-consistent group feature, see [Create a snapshot-consistent group](~~199625~~).
  *
  * @param request CreateSnapshotGroupRequest
  * @return CreateSnapshotGroupResponse
 */
async function createSnapshotGroup(request: CreateSnapshotGroupRequest): CreateSnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotGroupWithOptions(request, runtime);
}

model CreateStorageSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the storage set. The description must be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).', example='testDescription'),
  maxPartitionNumber?: int32(name='MaxPartitionNumber', description='The maximum number of partitions supported by the storage set. The value must be greater than or equal to 2 but cannot exceed the quota that you obtained by calling the [DescribeAccountAttributes](~~73772~~) operation.

Default value: 2.', example='10'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with [http:// or https:// ](http://https://。、（:）、（\\_）（-）。).', example='testStorageSetName'),
  zoneId?: string(name='ZoneId', description='The zone ID of the storage set. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g'),
}

model CreateStorageSetResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
}

model CreateStorageSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateStorageSetResponseBody(name='body'),
}

/**
  * A storage set can distribute disks or Shared Block Storage devices to different locations. You can specify the number of partitions in a storage set. A larger number of partitions indicate more discrete distribution of disks or Shared Block Storage devices.
  * When you call this operation, take note of the following items:
  * *   The number of storage sets that you can create in a region is limited. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the limit.
  * *   The number of partitions in a zone is limited. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the limit.
  *
  * @param request CreateStorageSetRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateStorageSetResponse
 */
async function createStorageSetWithOptions(request: CreateStorageSetRequest, runtime: Util.RuntimeOptions): CreateStorageSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.maxPartitionNumber)) {
    query['MaxPartitionNumber'] = request.maxPartitionNumber;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateStorageSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A storage set can distribute disks or Shared Block Storage devices to different locations. You can specify the number of partitions in a storage set. A larger number of partitions indicate more discrete distribution of disks or Shared Block Storage devices.
  * When you call this operation, take note of the following items:
  * *   The number of storage sets that you can create in a region is limited. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the limit.
  * *   The number of partitions in a zone is limited. You can call the [DescribeAccountAttributes](~~73772~~) operation to query the limit.
  *
  * @param request CreateStorageSetRequest
  * @return CreateStorageSetResponse
 */
async function createStorageSet(request: CreateStorageSetRequest): CreateStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageSetWithOptions(request, runtime);
}

model CreateVSwitchRequest {
  cidrBlock?: string(name='CidrBlock'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchName?: string(name='VSwitchName'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVSwitchResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateVSwitchRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateVSwitchResponse
 */
// Deprecated
async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVSwitch',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateVSwitchRequest
  * @return CreateVSwitchResponse
 */
// Deprecated
async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model CreateVirtualBorderRouterRequest {
  circuitCode?: string(name='CircuitCode'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  localGatewayIp?: string(name='LocalGatewayIp'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerGatewayIp?: string(name='PeerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vbrOwnerId?: long(name='VbrOwnerId'),
  vlanId?: int32(name='VlanId'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
  vbrId?: string(name='VbrId'),
}

model CreateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request CreateVirtualBorderRouterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateVirtualBorderRouterResponse
 */
// Deprecated
async function createVirtualBorderRouterWithOptions(request: CreateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): CreateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.localGatewayIp)) {
    query['LocalGatewayIp'] = request.localGatewayIp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerGatewayIp)) {
    query['PeerGatewayIp'] = request.peerGatewayIp;
  }
  if (!Util.isUnset(request.peeringSubnetMask)) {
    query['PeeringSubnetMask'] = request.peeringSubnetMask;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vbrOwnerId)) {
    query['VbrOwnerId'] = request.vbrOwnerId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVirtualBorderRouter',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request CreateVirtualBorderRouterRequest
  * @return CreateVirtualBorderRouterResponse
 */
// Deprecated
async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualBorderRouterWithOptions(request, runtime);
}

model CreateVpcRequest {
  cidrBlock?: string(name='CidrBlock'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vpcName?: string(name='VpcName'),
}

model CreateVpcResponseBody = {
  requestId?: string(name='RequestId'),
  routeTableId?: string(name='RouteTableId'),
  VRouterId?: string(name='VRouterId'),
  vpcId?: string(name='VpcId'),
}

model CreateVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcResponseBody(name='body'),
}

/**
  * @deprecated : CreateVpc is deprecated, please use Vpc::2016-04-28::CreateVpc instead.
  *
  * @param request CreateVpcRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateVpcResponse
 */
// Deprecated
async function createVpcWithOptions(request: CreateVpcRequest, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpc',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated : CreateVpc is deprecated, please use Vpc::2016-04-28::CreateVpc instead.
  *
  * @param request CreateVpcRequest
  * @return CreateVpcResponse
 */
// Deprecated
async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcWithOptions(request, runtime);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeactivateRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeactivateRouterInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeactivateRouterInterfaceResponse
 */
// Deprecated
async function deactivateRouterInterfaceWithOptions(request: DeactivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeactivateRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactivateRouterInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeactivateRouterInterfaceRequest
  * @return DeactivateRouterInterfaceResponse
 */
// Deprecated
async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactivateRouterInterfaceWithOptions(request, runtime);
}

model DeleteActivationRequest {
  activationId?: string(name='ActivationId', description='The ID of the request.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the activation code.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteActivationResponseBody = {
  activation?: {
    activationId?: string(name='ActivationId', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
    creationTime?: string(name='CreationTime', description='The number of instances that were deregistered.', example='2021-01-20T06:00:00Z'),
    deregisteredCount?: int32(name='DeregisteredCount', description='The maximum number of times that the activation code can be used to register managed instances.', example='0'),
    description?: string(name='Description', description='The number of registered instances.', example='This is description.'),
    instanceCount?: int32(name='InstanceCount', description='The description of the activation code.', example='1'),
    instanceName?: string(name='InstanceName', description='The IP addresses of hosts that are allowed to use the activation code.', example='test-InstanceName'),
    ipAddressRange?: string(name='IpAddressRange', description='The validity period of the activation code. Unit: hours.', example='0.0.0.0/0'),
    registeredCount?: int32(name='RegisteredCount', description='The default instance name prefix.', example='0'),
    timeToLiveInHours?: long(name='TimeToLiveInHours', description='The ID of the activation code.', example='4'),
  }(name='Activation', description='The time when the activation code was created.'),
  requestId?: string(name='RequestId', description='Details of the activation code and its usage information.', example='4ECEEE12-56F1-4FBC-9AB1-890F74942176'),
}

model DeleteActivationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteActivationResponseBody(name='body'),
}

/**
  * $.parameters[4].schema.description
  *
  * @param request DeleteActivationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteActivationResponse
 */
async function deleteActivationWithOptions(request: DeleteActivationRequest, runtime: Util.RuntimeOptions): DeleteActivationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activationId)) {
    query['ActivationId'] = request.activationId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteActivation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * $.parameters[4].schema.description
  *
  * @param request DeleteActivationRequest
  * @return DeleteActivationResponse
 */
async function deleteActivation(request: DeleteActivationRequest): DeleteActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteActivationWithOptions(request, runtime);
}

model DeleteAutoProvisioningGroupRequest {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group to be deleted.', example='apg-bpuf6jel2bbl62wh13****'),
  ownerAccount?: string(name='OwnerAccount', example='123456'),
  ownerId?: long(name='OwnerId', example='123456'),
  regionId?: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456'),
  terminateInstances?: boolean(name='TerminateInstances', description='Specifies whether to release instances in the auto provisioning group. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: retains instances in the auto provisioning group.', example='true'),
}

model DeleteAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
}

model DeleteAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoProvisioningGroupResponseBody(name='body'),
}

async function deleteAutoProvisioningGroupWithOptions(request: DeleteAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): DeleteAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.terminateInstances)) {
    query['TerminateInstances'] = request.terminateInstances;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoProvisioningGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoProvisioningGroup(request: DeleteAutoProvisioningGroupRequest): DeleteAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoProvisioningGroupWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId', example='155780923770'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId', description='The ID of the automatic snapshot policy. You can call the [DescribeAutoSnapshotPolicyEx](~~25530~~) operation to query the available automatic snapshot policies.', example='sp-bp14yziiuvu3s6jn****'),
  regionId?: string(name='regionId', description='The region ID of the automatic snapshot policy. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['autoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoSnapshotPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteBandwidthPackageRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBandwidthPackageResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteBandwidthPackageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteBandwidthPackageResponse
 */
// Deprecated
async function deleteBandwidthPackageWithOptions(request: DeleteBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBandwidthPackage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteBandwidthPackageRequest
  * @return DeleteBandwidthPackageResponse
 */
// Deprecated
async function deleteBandwidthPackage(request: DeleteBandwidthPackageRequest): DeleteBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBandwidthPackageWithOptions(request, runtime);
}

model DeleteCommandRequest {
  commandId?: string(name='CommandId', example='c-4d34302d02424c5c8e10281e3a31****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='$.parameters[1].schema.enumValueTitles', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCommandResponseBody(name='body'),
}

async function deleteCommandWithOptions(request: DeleteCommandRequest, runtime: Util.RuntimeOptions): DeleteCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCommand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommandWithOptions(request, runtime);
}

model DeleteDedicatedHostClusterRequest {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostClusterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='11B55F58-D3A4-4A9B-9596-342420D02FF8'),
}

model DeleteDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDedicatedHostClusterResponseBody(name='body'),
}

async function deleteDedicatedHostClusterWithOptions(request: DeleteDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostCluster',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostCluster(request: DeleteDedicatedHostClusterRequest): DeleteDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostClusterWithOptions(request, runtime);
}

model DeleteDemandRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value that is unique among different requests. The `ClientToken` value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  demandId?: string(name='DemandId', description='The ID of the requirement.', example='ed-bp11n21kq00sl71p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  reason?: string(name='Reason', description='The reason for deleting the filing form. Enter details.', example='test-reason'),
  regionId?: string(name='RegionId', description='The region ID of the filed instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDemandResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDemandResponseBody(name='body'),
}

/**
  * >  This operation is in internal preview and has not been officially released. We recommend that you avoid using this operation.
  *
  * @param request DeleteDemandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDemandResponse
 */
async function deleteDemandWithOptions(request: DeleteDemandRequest, runtime: Util.RuntimeOptions): DeleteDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDemand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * >  This operation is in internal preview and has not been officially released. We recommend that you avoid using this operation.
  *
  * @param request DeleteDemandRequest
  * @return DeleteDemandResponse
 */
async function deleteDemand(request: DeleteDemandRequest): DeleteDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDemandWithOptions(request, runtime);
}

model DeleteDeploymentSetRequest {
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set. You cannot delete a deployment set that contains instances.', example='ds-bp1g5ahlkal88d7x****'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
}

model DeleteDeploymentSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDeploymentSetResponseBody(name='body'),
}

async function deleteDeploymentSetWithOptions(request: DeleteDeploymentSetRequest, runtime: Util.RuntimeOptions): DeleteDeploymentSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeploymentSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeploymentSet(request: DeleteDeploymentSetRequest): DeleteDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeploymentSetWithOptions(request, runtime);
}

model DeleteDiagnosticMetricSetsRequest {
  metricSetIds?: [ string ](name='MetricSetIds', description='The ID of diagnostic metric set.'),
  regionId?: string(name='RegionId', description='The IDs of diagnostic metric sets. You can specify up to 10 set IDs.', example='cn-hangzhou'),
}

model DeleteDiagnosticMetricSetsResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DeleteDiagnosticMetricSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiagnosticMetricSetsResponseBody(name='body'),
}

async function deleteDiagnosticMetricSetsWithOptions(request: DeleteDiagnosticMetricSetsRequest, runtime: Util.RuntimeOptions): DeleteDiagnosticMetricSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.metricSetIds)) {
    query['MetricSetIds'] = request.metricSetIds;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiagnosticMetricSets',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDiagnosticMetricSets(request: DeleteDiagnosticMetricSetsRequest): DeleteDiagnosticMetricSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiagnosticMetricSetsWithOptions(request, runtime);
}

model DeleteDiagnosticReportsRequest {
  regionId?: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reportIds?: [ string ](name='ReportIds', description='The IDs of diagnostic reports. You can specify up to 100 report IDs.'),
}

model DeleteDiagnosticReportsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DeleteDiagnosticReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiagnosticReportsResponseBody(name='body'),
}

/**
  * You can call this operation to delete the diagnostic reports that are no longer needed.
  *
  * @param request DeleteDiagnosticReportsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDiagnosticReportsResponse
 */
async function deleteDiagnosticReportsWithOptions(request: DeleteDiagnosticReportsRequest, runtime: Util.RuntimeOptions): DeleteDiagnosticReportsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reportIds)) {
    query['ReportIds'] = request.reportIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDiagnosticReports',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to delete the diagnostic reports that are no longer needed.
  *
  * @param request DeleteDiagnosticReportsRequest
  * @return DeleteDiagnosticReportsResponse
 */
async function deleteDiagnosticReports(request: DeleteDiagnosticReportsRequest): DeleteDiagnosticReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiagnosticReportsWithOptions(request, runtime);
}

model DeleteDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk that you want to release.', example='d-bp14k9cxvr5uzy5****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Manual snapshots of the disk are retained.
  * *   You can call the [ModifyDiskAttribute](~~25517~~) operation to configure whether to retain automatic snapshots of the disk or release the snapshots along with the disk. We recommend that you delete the snapshots that are no longer needed to maintain a sufficient quota for new automatic snapshots.
  * *   The disk must be in the Unattached (Available) state.
  * *   If the specified DiskId parameter does not exist, the request is ignored.
  *
  * @param request DeleteDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteDiskResponse
 */
async function deleteDiskWithOptions(request: DeleteDiskRequest, runtime: Util.RuntimeOptions): DeleteDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   Manual snapshots of the disk are retained.
  * *   You can call the [ModifyDiskAttribute](~~25517~~) operation to configure whether to retain automatic snapshots of the disk or release the snapshots along with the disk. We recommend that you delete the snapshots that are no longer needed to maintain a sufficient quota for new automatic snapshots.
  * *   The disk must be in the Unattached (Available) state.
  * *   If the specified DiskId parameter does not exist, the request is ignored.
  *
  * @param request DeleteDiskRequest
  * @return DeleteDiskResponse
 */
async function deleteDisk(request: DeleteDiskRequest): DeleteDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskWithOptions(request, runtime);
}

model DeleteForwardEntryRequest {
  forwardEntryId?: string(name='ForwardEntryId'),
  forwardTableId?: string(name='ForwardTableId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteForwardEntryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteForwardEntryResponse
 */
// Deprecated
async function deleteForwardEntryWithOptions(request: DeleteForwardEntryRequest, runtime: Util.RuntimeOptions): DeleteForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteForwardEntry',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteForwardEntryRequest
  * @return DeleteForwardEntryResponse
 */
// Deprecated
async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteForwardEntryWithOptions(request, runtime);
}

model DeleteHaVipRequest {
  clientToken?: string(name='ClientToken'),
  haVipId?: string(name='HaVipId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteHaVipRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteHaVipResponse
 */
// Deprecated
async function deleteHaVipWithOptions(request: DeleteHaVipRequest, runtime: Util.RuntimeOptions): DeleteHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHaVip',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteHaVipRequest
  * @return DeleteHaVipResponse
 */
// Deprecated
async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHaVipWithOptions(request, runtime);
}

model DeleteHpcClusterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** value must contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster.', example='hpc-cxvr5uzy54j0ya****'),
  ownerAccount?: string(name='OwnerAccount', example='EcsforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='EcsforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
}

model DeleteHpcClusterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHpcClusterResponseBody(name='body'),
}

async function deleteHpcClusterWithOptions(request: DeleteHpcClusterRequest, runtime: Util.RuntimeOptions): DeleteHpcClusterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHpcCluster',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHpcCluster(request: DeleteHpcClusterRequest): DeleteHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHpcClusterWithOptions(request, runtime);
}

model DeleteImageRequest {
  force?: boolean(name='Force', description='Specifies whether to forcibly delete the custom image. Valid values:

*   true: forcibly deletes the custom image, regardless of whether the image is being used by instances.
*   false: verifies that the image is not being used by instances, and deletes the image.

Default value: false.', example='false'),
  imageId?: string(name='ImageId', description='The ID of the image. If the specified custom image does not exist, the request is ignored.', example='m-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', description='RAM用户的虚拟账号ID。', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', description='资源主账号的账号名称。', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', description='资源主账号的ID，亦即UID。', example='155780923770'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteImageComponentRequest {
  imageComponentId?: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image component. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteImageComponentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImageComponentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImageComponentResponseBody(name='body'),
}

/**
  * Only custom image components can be deleted.
  *
  * @param request DeleteImageComponentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteImageComponentResponse
 */
async function deleteImageComponentWithOptions(request: DeleteImageComponentRequest, runtime: Util.RuntimeOptions): DeleteImageComponentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageComponentId)) {
    query['ImageComponentId'] = request.imageComponentId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImageComponent',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Only custom image components can be deleted.
  *
  * @param request DeleteImageComponentRequest
  * @return DeleteImageComponentResponse
 */
async function deleteImageComponent(request: DeleteImageComponentRequest): DeleteImageComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageComponentWithOptions(request, runtime);
}

model DeleteImagePipelineRequest {
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteImagePipelineResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImagePipelineResponseBody(name='body'),
}

/**
  * ## Description
  * If an image build task based on an image template is in the BUILDING, DISTRIBUTING, RELEASING, or CANCELLING state, you cannot delete the template. You can delete the template only when the image build task is in the SUCCESS, FAILED, or CANCELLED state. You can call the DescribeImagePipelineExecutions operation to query the details of an image build task.
  *
  * @param request DeleteImagePipelineRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteImagePipelineResponse
 */
async function deleteImagePipelineWithOptions(request: DeleteImagePipelineRequest, runtime: Util.RuntimeOptions): DeleteImagePipelineResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imagePipelineId)) {
    query['ImagePipelineId'] = request.imagePipelineId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImagePipeline',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * If an image build task based on an image template is in the BUILDING, DISTRIBUTING, RELEASING, or CANCELLING state, you cannot delete the template. You can delete the template only when the image build task is in the SUCCESS, FAILED, or CANCELLED state. You can call the DescribeImagePipelineExecutions operation to query the details of an image build task.
  *
  * @param request DeleteImagePipelineRequest
  * @return DeleteImagePipelineResponse
 */
async function deleteImagePipeline(request: DeleteImagePipelineRequest): DeleteImagePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagePipelineWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  force?: boolean(name='Force', description='Specifies whether to forcefully release the instance in the `Running` state. Valid values:****

*   true: forcefully releases the instance in the `Running` state.**** This operation is equivalent to performing a hard shut-down. Cache data that is not written to persistent storage will be lost.
*   false: normally releases the instance. This value is valid only for instances in the `Stopped` state.****

Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1g6zv0ce8oghu7****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='Specifies whether to release an expired subscription instance.

Default value: false.', example='false'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * *   After an instance is released, all the physical resources used by the instance are reclaimed by Alibaba Cloud. Data stored on the instance is deleted permanently and cannot be restored.
  * *   Disk settings may affect their behavior when the instances they are attached to are released. Take note of the following items:
  *     *   If `DeleteWithInstance` is set to false, the disks are retained as pay-as-you-go disks.
  *     *   If `DeleteWithInstance` is set to true, the disks are released along with the instance.
  *     *   If `DeleteAutoSnapshot` is set to false, automatic snapshots of the disks are retained.
  *     *   If `DeleteAutoSnapshot` is set to true, automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. In this case, even if the `DeleteWithInstance` parameter is set to `false` for the data disks that are attached to the instance, the parameter is ignored and the data disks are released along with the instance. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).``
  *
  * @param request DeleteInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstanceResponse
 */
async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.terminateSubscription)) {
    query['TerminateSubscription'] = request.terminateSubscription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After an instance is released, all the physical resources used by the instance are reclaimed by Alibaba Cloud. Data stored on the instance is deleted permanently and cannot be restored.
  * *   Disk settings may affect their behavior when the instances they are attached to are released. Take note of the following items:
  *     *   If `DeleteWithInstance` is set to false, the disks are retained as pay-as-you-go disks.
  *     *   If `DeleteWithInstance` is set to true, the disks are released along with the instance.
  *     *   If `DeleteAutoSnapshot` is set to false, automatic snapshots of the disks are retained.
  *     *   If `DeleteAutoSnapshot` is set to true, automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. In this case, even if the `DeleteWithInstance` parameter is set to `false` for the data disks that are attached to the instance, the parameter is ignored and the data disks are released along with the instance. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).``
  *
  * @param request DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteInstancesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run without performing the actual request. Default value: false. Valid values:

*   true: performs only a dry run. The system checks whether your AccessKey pair is valid, whether RAM users are granted permissions, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DRYRUN.SUCCESS error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  force?: boolean(name='Force', description='Specifies whether to forcefully release the instance that is in the **Running** (`Running`) state. Default value: false. Valid values:

*   true: forcefully releases the instance that is in the **Running** (`Running`) state. When the Force parameter is set to true, this operation is equivalent to a power-off operation. Temporary data in the memory and storage of the instance is erased and cannot be restored.
*   false: normally releases the instance. This value is valid only for instances that are in the **Stopped** (`Stopped`) state.', example='false'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances. You can specify up to 100 instance IDs in a single request.', example='i-bp1g6zv0ce8oghu7****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  terminateSubscription?: boolean(name='TerminateSubscription', description='Specifies whether to release an expired subscription instance.

Default value: false.', example='false'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7B7813C6-57BF-41XX-B12B-F172F65A6046'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstancesResponseBody(name='body'),
}

/**
  * *   After an Elastic Compute Service (ECS) instance is released, all the physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
  * *   Disks attached to the instance:
  *     *   The disks for which `DeleteWithInstance` is set to false are retained as pay-as-you-go disks.
  *     *   The disks for which `DeleteWithInstance` is set to true are released together with the instance.
  *     *   For disks for which `DeleteAutoSnapshot` is set to false, the automatic snapshots of the disks are retained.
  *     *   For disks for which `DeleteAutoSnapshot` is set to true, the automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If `OperationLocks` in the response contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~). Even if `DeleteWithInstance` is set to `false` for the data disks that are attached to the instance, this parameter is ignored and the data disks are released along with the instance.
  *
  * @param request DeleteInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteInstancesResponse
 */
async function deleteInstancesWithOptions(request: DeleteInstancesRequest, runtime: Util.RuntimeOptions): DeleteInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.terminateSubscription)) {
    query['TerminateSubscription'] = request.terminateSubscription;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After an Elastic Compute Service (ECS) instance is released, all the physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
  * *   Disks attached to the instance:
  *     *   The disks for which `DeleteWithInstance` is set to false are retained as pay-as-you-go disks.
  *     *   The disks for which `DeleteWithInstance` is set to true are released together with the instance.
  *     *   For disks for which `DeleteAutoSnapshot` is set to false, the automatic snapshots of the disks are retained.
  *     *   For disks for which `DeleteAutoSnapshot` is set to true, the automatic snapshots of the disks are released.
  *     *   Manual snapshots of the disks are retained.
  *     *   If `OperationLocks` in the response contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~). Even if `DeleteWithInstance` is set to `false` for the data disks that are attached to the instance, this parameter is ignored and the data disks are released along with the instance.
  *
  * @param request DeleteInstancesRequest
  * @return DeleteInstancesResponse
 */
async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstancesWithOptions(request, runtime);
}

model DeleteKeyPairsRequest {
  keyPairNames?: string(name='KeyPairNames', description='The names of SSH key pairs. The value can be a JSON array that consists of up to 100 key pair names. Separate multiple key pair names with commas (,).', example='["skp-bp67acfmxazb41****", "skp-bp67acfmxazb42****", … "skp-bp67acfmxazb4p3***"]'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After an SSH key pair is deleted, you cannot query the SSH key pair by calling the [DescribeKeyPairs](~~51773~~) operation.
  * *   If an SSH key pair is bound to one or more Elastic Compute Service (ECS) instances, the SSH key pair cannot be deleted.
  *
  * @param request DeleteKeyPairsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairNames)) {
    query['KeyPairNames'] = request.keyPairNames;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKeyPairs',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   After an SSH key pair is deleted, you cannot query the SSH key pair by calling the [DescribeKeyPairs](~~51773~~) operation.
  * *   If an SSH key pair is bound to one or more Elastic Compute Service (ECS) instances, the SSH key pair cannot be deleted.
  *
  * @param request DeleteKeyPairsRequest
  * @return DeleteKeyPairsResponse
 */
async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model DeleteLaunchTemplateRequest {
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the instance launch template. For more information, call the [DescribeLaunchTemplates](~~73759~~) operation.

You must specify the `LaunchTemplateId` parameter or the `LaunchTemplateName` parameter to determine an instance launch template.', example='lt-bp1apo0bbbkuy0rj****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the instance launch template.

You must specify the `LaunchTemplateId` parameter or the `LaunchTemplateName` parameter to determine an instance launch template.', example='testLaunchTemplateName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteLaunchTemplateResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId', description='启动模板ID。更多信息，请参见[DescribeLaunchTemplates](~~73759~~)。

使用启动模板创建实例时，您必须指定`LaunchTemplateId`或`LaunchTemplateName`以确定启动模板。', example='lt-bp1apo0bbbkuy0rj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLaunchTemplateResponseBody(name='body'),
}

async function deleteLaunchTemplateWithOptions(request: DeleteLaunchTemplateRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLaunchTemplate',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLaunchTemplate(request: DeleteLaunchTemplateRequest): DeleteLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateWithOptions(request, runtime);
}

model DeleteLaunchTemplateVersionRequest {
  deleteVersion?: [ long ](name='DeleteVersion', description='The version numbers of instance launch templates that to be deleted. You can specify at most 29 version numbers.', example='2'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the instance launch template. For more information, call the [DescribeLaunchTemplates](~~73759~~) operation.', example='lt-bp1apo0bbbkuy0rj****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the instance launch template.', example='testLaunchTemplateName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region to which the instance lauch template belongs. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteLaunchTemplateVersionResponseBody = {
  launchTemplateVersions?: {
    launchTemplateVersion?: [ 
    {
      launchTemplateId?: string(name='LaunchTemplateId', description='实例启动模板ID。', example='lt-m5eiaupmvm2op9d****'),
      launchTemplateVersionNumber?: long(name='LaunchTemplateVersionNumber', description='实例启动模板版本号。', example='2'),
    }
  ](name='LaunchTemplateVersion')
  }(name='LaunchTemplateVersions', description='实例启动模板版本。'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteLaunchTemplateVersionResponseBody(name='body'),
}

async function deleteLaunchTemplateVersionWithOptions(request: DeleteLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteVersion)) {
    query['DeleteVersion'] = request.deleteVersion;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLaunchTemplateVersion',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLaunchTemplateVersion(request: DeleteLaunchTemplateVersionRequest): DeleteLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateVersionWithOptions(request, runtime);
}

model DeleteNatGatewayRequest {
  natGatewayId?: string(name='NatGatewayId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteNatGatewayRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNatGatewayResponse
 */
// Deprecated
async function deleteNatGatewayWithOptions(request: DeleteNatGatewayRequest, runtime: Util.RuntimeOptions): DeleteNatGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatGateway',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteNatGatewayRequest
  * @return DeleteNatGatewayResponse
 */
// Deprecated
async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatGatewayWithOptions(request, runtime);
}

model DeleteNetworkInterfaceRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8htln****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F3CD6886-D8D0-4FEE-B93E-1B73239673DE'),
}

model DeleteNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkInterfaceResponseBody(name='body'),
}

/**
  * ##
  * *   The ENI must be in the Available state.
  * *   If the ENI is attached to an Elastic Compute Service (ECS) instance, you must call [DetachNetworkInterface](~~58514~~) to detach the ENI from the instance before you can delete the ENI.
  * *   After an ENI is deleted, the following situations occur:
  *     *   All the private IP addresses (including primary and secondary private IP addresses) of the ENI are automatically released.
  *     *   The ENI is automatically removed from its security groups.
  * *   This operation is an asynchronous operation. After this operation is called to delete an ENI, you can check the state or events of the ENI to determine whether the ENI is deleted. The following figure shows the transitions between the states of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/zh-CN/20221208/xual/DeleteNetworkInterface.jpg) - If the ENI is in the Deleting state, the ENI deletion request is sent, and the ENI is being deleted. - If the ENI is not found, the ENI is deleted. - If the ENI is stuck in the Deleting state, the ENI fails to be deleted, and you can re-initiate the request to delete the ENI.
  * **For information about examples on how to call this operation, see **[Delete an ENI](~~471553~~).
  *
  * @param request DeleteNetworkInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNetworkInterfaceResponse
 */
async function deleteNetworkInterfaceWithOptions(request: DeleteNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * *   The ENI must be in the Available state.
  * *   If the ENI is attached to an Elastic Compute Service (ECS) instance, you must call [DetachNetworkInterface](~~58514~~) to detach the ENI from the instance before you can delete the ENI.
  * *   After an ENI is deleted, the following situations occur:
  *     *   All the private IP addresses (including primary and secondary private IP addresses) of the ENI are automatically released.
  *     *   The ENI is automatically removed from its security groups.
  * *   This operation is an asynchronous operation. After this operation is called to delete an ENI, you can check the state or events of the ENI to determine whether the ENI is deleted. The following figure shows the transitions between the states of the ENI.
  * ![](https://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/file-manage-files/zh-CN/20221208/xual/DeleteNetworkInterface.jpg) - If the ENI is in the Deleting state, the ENI deletion request is sent, and the ENI is being deleted. - If the ENI is not found, the ENI is deleted. - If the ENI is stuck in the Deleting state, the ENI fails to be deleted, and you can re-initiate the request to delete the ENI.
  * **For information about examples on how to call this operation, see **[Delete an ENI](~~471553~~).
  *
  * @param request DeleteNetworkInterfaceRequest
  * @return DeleteNetworkInterfaceResponse
 */
async function deleteNetworkInterface(request: DeleteNetworkInterfaceRequest): DeleteNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfaceWithOptions(request, runtime);
}

model DeleteNetworkInterfacePermissionRequest {
  force?: boolean(name='Force'),
  networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteNetworkInterfacePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkInterfacePermissionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteNetworkInterfacePermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteNetworkInterfacePermissionResponse
 */
// Deprecated
async function deleteNetworkInterfacePermissionWithOptions(request: DeleteNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.networkInterfacePermissionId)) {
    query['NetworkInterfacePermissionId'] = request.networkInterfacePermissionId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkInterfacePermission',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteNetworkInterfacePermissionRequest
  * @return DeleteNetworkInterfacePermissionResponse
 */
// Deprecated
async function deleteNetworkInterfacePermission(request: DeleteNetworkInterfacePermissionRequest): DeleteNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfacePermissionWithOptions(request, runtime);
}

model DeletePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeletePhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeletePhysicalConnectionResponse
 */
// Deprecated
async function deletePhysicalConnectionWithOptions(request: DeletePhysicalConnectionRequest, runtime: Util.RuntimeOptions): DeletePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeletePhysicalConnectionRequest
  * @return DeletePhysicalConnectionResponse
 */
// Deprecated
async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalConnectionWithOptions(request, runtime);
}

model DeletePrefixListRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  regionId?: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePrefixListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DeletePrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePrefixListResponseBody(name='body'),
}

/**
  * The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request DeletePrefixListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeletePrefixListResponse
 */
async function deletePrefixListWithOptions(request: DeletePrefixListRequest, runtime: Util.RuntimeOptions): DeletePrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrefixList',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request DeletePrefixListRequest
  * @return DeletePrefixListResponse
 */
async function deletePrefixList(request: DeletePrefixListRequest): DeletePrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrefixListWithOptions(request, runtime);
}

model DeleteRouteEntryRequest {
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  nextHopId?: string(name='NextHopId'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouteEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteRouteEntryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRouteEntryResponse
 */
// Deprecated
async function deleteRouteEntryWithOptions(request: DeleteRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.destinationCidrBlock)) {
    query['DestinationCidrBlock'] = request.destinationCidrBlock;
  }
  if (!Util.isUnset(request.nextHopId)) {
    query['NextHopId'] = request.nextHopId;
  }
  if (!Util.isUnset(request.nextHopList)) {
    query['NextHopList'] = request.nextHopList;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteEntry',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteRouteEntryRequest
  * @return DeleteRouteEntryResponse
 */
// Deprecated
async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteEntryWithOptions(request, runtime);
}

model DeleteRouterInterfaceRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
  userCidr?: string(name='UserCidr'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRouterInterfaceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteRouterInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteRouterInterfaceResponse
 */
// Deprecated
async function deleteRouterInterfaceWithOptions(request: DeleteRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeleteRouterInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouterInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteRouterInterfaceRequest
  * @return DeleteRouterInterfaceResponse
 */
// Deprecated
async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouterInterfaceWithOptions(request, runtime);
}

model DeleteSecurityGroupRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID. You can call the [DescribeSecurityGroups](~~25556~~) operation to query the security group ID.', example='sg-bp1fg655nh68xyz9****'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

/**
  * Before you delete a security group, make sure that the security group does not contain instances and is not referenced by other security groups. Otherwise, the DeleteSecurityGroup request fails. You can call the [DescribeSecurityGroupReferences](~~57320~~) operation to query the reference details of the security group.
  *
  * @param request DeleteSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSecurityGroupResponse
 */
async function deleteSecurityGroupWithOptions(request: DeleteSecurityGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you delete a security group, make sure that the security group does not contain instances and is not referenced by other security groups. Otherwise, the DeleteSecurityGroup request fails. You can call the [DescribeSecurityGroupReferences](~~57320~~) operation to query the reference details of the security group.
  *
  * @param request DeleteSecurityGroupRequest
  * @return DeleteSecurityGroupResponse
 */
async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  force?: boolean(name='Force', description='Specifies whether to forcibly delete the snapshot that has been used to create disks. Valid values:

*   true: forcibly deletes the snapshot. After the snapshot is forcibly deleted, the disks created from this snapshot cannot be re-initialized.
*   false: does not forcibly delete the snapshot.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-bp1c0doj0taqyzzl****'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   If the snapshot does not exist, the request is ignored.
  * *   If the snapshot has been used to create custom images, the snapshot cannot be deleted. You need to call the [DeleteImage](~~25537~~) operation to delete the custom images before you can delete the snapshot.
  * *   If the snapshot has been used to create disks and `Force` is not specified or is set to `false`, the snapshot cannot be deleted directly. If you want to delete the snapshot, set `Force` to true to forcibly delete the snapshot. The disks created from the snapshot cannot be re-initialized after the snapshot is forcibly deleted.
  *
  * @param request DeleteSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   If the snapshot does not exist, the request is ignored.
  * *   If the snapshot has been used to create custom images, the snapshot cannot be deleted. You need to call the [DeleteImage](~~25537~~) operation to delete the custom images before you can delete the snapshot.
  * *   If the snapshot has been used to create disks and `Force` is not specified or is set to `false`, the snapshot cannot be deleted directly. If you want to delete the snapshot, set `Force` to true to forcibly delete the snapshot. The disks created from the snapshot cannot be re-initialized after the snapshot is forcibly deleted.
  *
  * @param request DeleteSnapshotRequest
  * @return DeleteSnapshotResponse
 */
async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteSnapshotGroupRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the snapshot-consistent group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotGroupId?: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group. You can call the [DescribeSnapshotGroups](~~210940~~) operation to query the IDs of one or more snapshot-consistent groups.', example='ssg-j6c9lpuyxo2uxxny****'),
}

model DeleteSnapshotGroupResponseBody = {
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code. This parameter is empty when the operation is successful.

For information about error codes and error messages, visit the [API error center](https://error-center.aliyun.com/status/product/Ecs).', example='400'),
      errorMsg?: string(name='ErrorMsg', description='The error message. This parameter is empty when the operation is successful.

For information about error codes and error messages, visit the [API error center](https://error-center.aliyun.com/status/product/Ecs).', example='testErrorMsg'),
      operationStatus?: string(name='OperationStatus', description='Indicates whether the operation was successful. If the operation was successful, a value of Success is returned. If the operation failed, an error code and an error message are returned.', example='Success'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name', description='The name of the resource.', example='SnapshotId'),
          value?: string(name='Value', description='The ID of the resource.', example='s-j6c9lpuyxo2uxxnx****'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet', description='Details about the resources.'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet', description='Details about the delete operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6EDE885A-FDC1-4FAE-BC44-6EACAEA6CC6E'),
}

model DeleteSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSnapshotGroupResponseBody(name='body'),
}

/**
  * If you have custom images that were created from a disk snapshot contained in a snapshot-consistent group, the disk snapshot is retained when the snapshot-consistent group is deleted. Before you can delete the disk snapshot, you must call the [DeleteImage](~~25537~~) operation to delete the custom images. After the custom images are deleted, you can call the [DeleteSnapshot](~~25525~~) operation to delete the disk snapshot.
  *
  * @param request DeleteSnapshotGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteSnapshotGroupResponse
 */
async function deleteSnapshotGroupWithOptions(request: DeleteSnapshotGroupRequest, runtime: Util.RuntimeOptions): DeleteSnapshotGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotGroupId)) {
    query['SnapshotGroupId'] = request.snapshotGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshotGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you have custom images that were created from a disk snapshot contained in a snapshot-consistent group, the disk snapshot is retained when the snapshot-consistent group is deleted. Before you can delete the disk snapshot, you must call the [DeleteImage](~~25537~~) operation to delete the custom images. After the custom images are deleted, you can call the [DeleteSnapshot](~~25525~~) operation to delete the disk snapshot.
  *
  * @param request DeleteSnapshotGroupRequest
  * @return DeleteSnapshotGroupResponse
 */
async function deleteSnapshotGroup(request: DeleteSnapshotGroupRequest): DeleteSnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotGroupWithOptions(request, runtime);
}

model DeleteStorageSetRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount', example='hide'),
  ownerId?: long(name='OwnerId', example='111'),
  regionId?: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
}

model DeleteStorageSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DeleteStorageSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteStorageSetResponseBody(name='body'),
}

async function deleteStorageSetWithOptions(request: DeleteStorageSetRequest, runtime: Util.RuntimeOptions): DeleteStorageSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteStorageSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteStorageSet(request: DeleteStorageSetRequest): DeleteStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageSetWithOptions(request, runtime);
}

model DeleteVSwitchRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVSwitchResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteVSwitchRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVSwitchResponse
 */
// Deprecated
async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVSwitch',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteVSwitchRequest
  * @return DeleteVSwitchResponse
 */
// Deprecated
async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DeleteVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vbrId?: string(name='VbrId'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteVirtualBorderRouterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVirtualBorderRouterResponse
 */
// Deprecated
async function deleteVirtualBorderRouterWithOptions(request: DeleteVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): DeleteVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVirtualBorderRouter',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteVirtualBorderRouterRequest
  * @return DeleteVirtualBorderRouterResponse
 */
// Deprecated
async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualBorderRouterWithOptions(request, runtime);
}

model DeleteVpcRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DeleteVpcRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteVpcResponse
 */
// Deprecated
async function deleteVpcWithOptions(request: DeleteVpcRequest, runtime: Util.RuntimeOptions): DeleteVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpc',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DeleteVpcRequest
  * @return DeleteVpcResponse
 */
// Deprecated
async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcWithOptions(request, runtime);
}

model DeregisterManagedInstanceRequest {
  instanceId?: string(name='InstanceId', description='The region ID. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='mi-hz01axdfas****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='$.parameters[1].schema.enumValueTitles', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeregisterManagedInstanceResponseBody = {
  instance?: {
    activationId?: string(name='ActivationId', description='The ID of the managed instance.', example='4ECEEE12-56F1-4FBC-9AB1-890F7494****'),
    agentVersion?: string(name='AgentVersion', description='The internal IP address of the managed instance.', example='2.2.0.102'),
    hostname?: string(name='Hostname', description='The public IP address of the managed instance.', example='test-Hostname'),
    instanceId?: string(name='InstanceId', description='The hostname of the managed instance.', example='mi-hz01axdfas****'),
    instanceName?: string(name='InstanceName', description='The time when the managed instance was registered.', example='test-InstanceName-001'),
    internetIp?: string(name='InternetIp', description='The time when the Cloud Assistant task was last executed.', example='47.8.**.**'),
    intranetIp?: string(name='IntranetIp', description='The ID of the activation code.', example='10.0.**.**'),
    invocationCount?: long(name='InvocationCount', example='2'),
    lastInvokedTime?: string(name='LastInvokedTime', description='Details of the managed instance.', example='2021-01-20T09:00:40Z'),
    machineId?: string(name='MachineId', example='e03231b37ab14e53b5795ad625fc****'),
    osType?: string(name='OsType', description='The name of the managed instance.', example='linux'),
    osVersion?: string(name='OsVersion', description='The operating system type of the managed instance.', example='Linux_#38~18.04.1-Ubuntu SMP Wed Jan 6 18:26:30 UTC 2021_x86_64'),
    registrationTime?: string(name='RegistrationTime', description='The version number of the Cloud Assistant client.', example='2021-01-20T08:57:56Z'),
  }(name='Instance', description='The request ID.'),
  requestId?: string(name='RequestId', description='The ID of the managed instance.', example='4ECEEE12-56F1-4FBC-9AB1-890F74942176'),
}

model DeregisterManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeregisterManagedInstanceResponseBody(name='body'),
}

async function deregisterManagedInstanceWithOptions(request: DeregisterManagedInstanceRequest, runtime: Util.RuntimeOptions): DeregisterManagedInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeregisterManagedInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deregisterManagedInstance(request: DeregisterManagedInstanceRequest): DeregisterManagedInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterManagedInstanceWithOptions(request, runtime);
}

model DescribeAccessPointsRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      attachedRegionNo?: string(name='AttachedRegionNo'),
      description?: string(name='Description'),
      hostOperator?: string(name='HostOperator'),
      location?: string(name='Location'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccessPointsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeAccessPointsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAccessPointsResponse
 */
// Deprecated
async function describeAccessPointsWithOptions(request: DescribeAccessPointsRequest, runtime: Util.RuntimeOptions): DescribeAccessPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessPoints',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeAccessPointsRequest
  * @return DescribeAccessPointsResponse
 */
// Deprecated
async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessPointsWithOptions(request, runtime);
}

model DescribeAccountAttributesRequest {
  attributeName?: [ string ](name='AttributeName', description='The type of resource quota N. Valid values of N: 1 to 8. Valid values:

*   instance-network-type: available network types

*   max-security-groups: the maximum number of security groups

*   max-elastic-network-interfaces: the maximum number of ENIs

*   max-postpaid-instance-vcpu-count: the maximum number of vCPUs for pay-as-you-go instances

*   max-spot-instance-vcpu-count: the maximum number of vCPUs for preemptible instances

*   used-postpaid-instance-vcpu-count: the number of vCPUs that have been allocated to pay-as-you-go instances

*   used-spot-instance-vcpu-count: the number of vCPUs that have been allocated to preemptible instances

*   max-postpaid-yundisk-capacity: the maximum capacity of pay-as-you-go data disks

*   used-postpaid-yundisk-capacity: the capacity of pay-as-you-go disks that have been created

*   max-dedicated-hosts: the maximum number of dedicated hosts

*   supported-postpaid-instance-types: the instance types of pay-as-you-go I/O optimized instances

*   max-axt-command-count: the maximum number of Cloud Assistant commands

*   max-axt-invocation-daily: the maximum number of Cloud Assistant command executions per day

*   real-name-authentication: whether the account has passed the real-name verification

    **

    **Note**You must pass the real-name verification before you create an ECS instance in the Chinese mainland regions.

*   max-cloud-assistant-activation-count: the maximum number of activation codes that can be created to use to register managed instances

This parameter is empty by default.', example='max-security-groups'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which the resource resides.', example='cn-hangzhou-b'),
}

model DescribeAccountAttributesResponseBody = {
  accountAttributeItems?: {
    accountAttributeItem?: [ 
    {
      attributeName?: string(name='AttributeName', description='The type of the resource quota in the specified region. Valid values:

*   instance-network-type: available network types
*   max-security-groups: the maximum number of security groups
*   max-elastic-network-interfaces: the maximum number of ENIs
*   max-postpaid-instance-vcpu-count: the maximum number of vCPUs for pay-as-you-go instances
*   max-spot-instance-vcpu-count: the maximum number of vCPUs for preemptible instances
*   used-postpaid-instance-vcpu-count: the number of vCPUs that have been allocated to pay-as-you-go instances
*   used-spot-instance-vcpu-count: the number of vCPUs that have been allocated to preemptible instances
*   max-postpaid-yundisk-capacity: the maximum capacity of pay-as-you-go data disks
*   used-postpaid-yundisk-capacity: the capacity of pay-as-you-go disks that have been created
*   max-dedicated-hosts: the maximum number of dedicated hosts
*   supported-postpaid-instance-types: the instance types of pay-as-you-go I/O optimized instances
*   max-axt-command-count: the maximum number of Cloud Assistant commands
*   max-axt-invocation-daily: the maximum number of Cloud Assistant command executions per day
*   real-name-authentication: whether the account has passed the real-name verification
*   max-cloud-assistant-activation-count: the maximum number of activation codes that can be created to use to register managed instances', example='max-security-groups'),
      attributeValues?: {
        valueItem?: [ 
        {
          count?: int32(name='Count', description='The number of privilege attributes in the account.', example='3'),
          diskCategory?: string(name='DiskCategory', description='The data disk category. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)', example='cloud_ssd'),
          expiredTime?: string(name='ExpiredTime', description='The expiration time of a privilege. This parameter is returned only when the account privilege has an expiration time. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-01-01T12:30:00Z'),
          instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.', example='PrePaid'),
          instanceType?: string(name='InstanceType', description='The type of the instance.', example='ecs.g5.large'),
          value?: string(name='Value', description='The value of the resource quota in the specified region. Valid values:

The values returned for the resource quotas to which the following AttributeName values correspond are 0 or positive integers:

*   max-security-groups
*   max-elastic-network-interfaces
*   max-postpaid-instance-vcpu-count
*   max-spot-instance-vcpu-count
*   used-postpaid-instance-vcpu-count
*   used-spot-instance-vcpu-count
*   max-postpaid-yundisk-capacity
*   used-postpaid-yundisk-capacity
*   max-dedicated-hosts
*   max-axt-command-count
*   max-axt-invocation-daily
*   max-cloud-assistant-activation-count

When the AttributeName parameter is set to supported-postpay-instance-types, an instance type is returned. For more information, see [Instance families](~~25378~~).

When the AttributeName parameter is set to real-name-authentications, one of the following values is returned:

*   yes
*   none
*   unnecessary

When the AttributeName parameter is set to instance-network-type, one of the following values is returned:

*   vpc
*   classic', example='800'),
          zoneId?: string(name='ZoneId', description='The ID of the zone in which the resource resides.', example='cn-hangzhou-b'),
        }
      ](name='ValueItem')
      }(name='AttributeValues', description='The specific values of resource quotas.'),
    }
  ](name='AccountAttributeItem')
  }(name='AccountAttributeItems', description='Details about account privileges specified by AccountAttributeItem in the specified region.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8CE45CD5-31FB-47C2-959D-CA8144CE****'),
}

model DescribeAccountAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAccountAttributesResponseBody(name='body'),
}

/**
  * After you [create](https://account.alibabacloud.com/register/intl_register.htm) an Alibaba Cloud account, you can create a specific number of ECS instances in different regions within the account. For more information, see [Limits](~~25412~~).
  * You can apply for a quota increase in the [Quota Center console](https://ecs.console.aliyun.com/?#/privilegeQuotaV2/region/cn-hangzhou?subTab=userQuota).
  *
  * @param request DescribeAccountAttributesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAccountAttributesResponse
 */
async function describeAccountAttributesWithOptions(request: DescribeAccountAttributesRequest, runtime: Util.RuntimeOptions): DescribeAccountAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attributeName)) {
    query['AttributeName'] = request.attributeName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccountAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you [create](https://account.alibabacloud.com/register/intl_register.htm) an Alibaba Cloud account, you can create a specific number of ECS instances in different regions within the account. For more information, see [Limits](~~25412~~).
  * You can apply for a quota increase in the [Quota Center console](https://ecs.console.aliyun.com/?#/privilegeQuotaV2/region/cn-hangzhou?subTab=userQuota).
  *
  * @param request DescribeAccountAttributesRequest
  * @return DescribeAccountAttributesResponse
 */
async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAttributesWithOptions(request, runtime);
}

model DescribeActivationsRequest {
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
  instanceName?: string(name='InstanceName', description='The default instance name prefix.', example='test-InstanceName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.

Valid values: 1 to 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the command. Supported regions: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the activation code. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag can be returned. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags can be returned. To query more than 1,000 resources that have specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the activation code. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the activation code.'),
}

model DescribeActivationsResponseBody = {
  activationList?: [ 
    {
      activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
      creationTime?: string(name='CreationTime', description='The time when the activation code was created.', example='2021-01-20T06:00:00Z'),
      deregisteredCount?: int32(name='DeregisteredCount', description='The number of instances that were deregistered.', example='1'),
      description?: string(name='Description', description='The description of the activation code.', example='This is description.'),
      disabled?: boolean(name='Disabled', description='Indicates whether the activation code is disabled.', example='false'),
      instanceCount?: int32(name='InstanceCount', description='The maximum number of times that the activation code can be used to register managed instances.', example='1'),
      instanceName?: string(name='InstanceName', description='The default instance name prefix.', example='test-InstanceName'),
      ipAddressRange?: string(name='IpAddressRange', description='The IP addresses of hosts that are allowed to use the activation code.', example='0.0.0.0/0'),
      registeredCount?: int32(name='RegisteredCount', description='The number of instances that were registered.', example='1'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the activation code.', example='owner'),
          tagValue?: string(name='TagValue', description='The tag value of the activation code.', example='zhangsan'),
        }
      ](name='Tags', description='The tags of the activation code.'),
      timeToLiveInHours?: long(name='TimeToLiveInHours', description='The validity period of the activation code. Unit: hours.', example='4'),
    }
  ](name='ActivationList', description='The activation codes and their usage information.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='4ECEEE12-56F1-4FBC-9AB1-890F74625134'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeActivationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeActivationsResponseBody(name='body'),
}

async function describeActivationsWithOptions(request: DescribeActivationsRequest, runtime: Util.RuntimeOptions): DescribeActivationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activationId)) {
    query['ActivationId'] = request.activationId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeActivations',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeActivations(request: DescribeActivationsRequest): DescribeActivationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActivationsWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupHistoryRequest {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-bp67acfmxazb4p****'),
  endTime?: string(name='EndTime', description='The end of the time range of the queried data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-06-20T15:10:20Z'),
  ownerAccount?: string(name='OwnerAccount', example='123456'),
  ownerId?: long(name='OwnerId', example='123456'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page. Pages start from page 1.

Default value: 1', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page. Maximum value: 100.

Default value: 10.', example='5'),
  regionId?: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456'),
  startTime?: string(name='StartTime', description='The beginning of the time range of the queried data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-04-01T15:10:20Z'),
}

model DescribeAutoProvisioningGroupHistoryResponseBody = {
  autoProvisioningGroupHistories?: {
    autoProvisioningGroupHistory?: [ 
    {
      activityDetails?: {
        activityDetail?: [ 
        {
          detail?: string(name='Detail', description='The execution details of instance creation performed by the single scheduling task.', example='New ECS instances "i-bp67acfmxazb4p****, i-bp67acfmxazb5p****" created.'),
          status?: string(name='Status', description='The execution status of instance creation performed by the single scheduling task. Valid values:

*   Successful: Instances are created.
*   Failed: Instances failed to be created.
*   InProgress: Instances are being created.
*   Warning: Some instances are created.', example='Successful'),
        }
      ](name='ActivityDetail')
      }(name='ActivityDetails', description='An array consisting of ActivityDetail data.'),
      lastEventTime?: string(name='LastEventTime', description='The execution time of the last instance creation performed by the single scheduling task.', example='2019-04-01T15:10:20Z'),
      startTime?: string(name='StartTime', description='The start time of executing the single scheduling task.', example='2019-04-01T15:10:20Z'),
      status?: string(name='Status', description='The execution status of the single scheduling task. Valid values:

*   prepare: The scheduling task is being executed.
*   success: The scheduling task is executed.
*   failed: The scheduling task failed to be executed.', example='success'),
      taskId?: string(name='TaskId', description='The ID of the scheduling task.', example='apg-task-bp67acfmxazb4p****'),
    }
  ](name='AutoProvisioningGroupHistory')
  }(name='AutoProvisioningGroupHistories', description='An array consisting of AutoProvisioningGroupHistory data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
  totalCount?: int32(name='TotalCount', description='The number of queried scheduling tasks in the auto provisioning group.', example='10'),
}

model DescribeAutoProvisioningGroupHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoProvisioningGroupHistoryResponseBody(name='body'),
}

async function describeAutoProvisioningGroupHistoryWithOptions(request: DescribeAutoProvisioningGroupHistoryRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoProvisioningGroupHistory',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoProvisioningGroupHistory(request: DescribeAutoProvisioningGroupHistoryRequest): DescribeAutoProvisioningGroupHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupHistoryWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupInstancesRequest {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-uf6jel2bbl62wh13****'),
  ownerAccount?: string(name='OwnerAccount', example='123456'),
  ownerId?: long(name='OwnerId', example='123456'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the auto provisioning group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='123456'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='123456'),
}

model DescribeAutoProvisioningGroupInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      CPU?: int32(name='CPU', description='The number of vCPUs.', example='2'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2017-12-10T04:04Z'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      instanceType?: string(name='InstanceType', description='The instance type of the ECS instance.', example='ecs.g5.large'),
      ioOptimized?: boolean(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
      isSpot?: boolean(name='IsSpot', description='Indicates whether the instance is a preemptible instance.', example='true'),
      memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='1024'),
      networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   vpc
*   classic', example='vpc'),
      osType?: string(name='OsType', description='The operating system type of the instance. Valid values:

*   windows
*   linux', example='linux'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the instance.', example='Running'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='Instance')
  }(name='Instances', description='An array consisting of Instance data.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
  totalCount?: int32(name='TotalCount', description='The number of queried instances in the auto provisioning group.', example='2'),
}

model DescribeAutoProvisioningGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoProvisioningGroupInstancesResponseBody(name='body'),
}

async function describeAutoProvisioningGroupInstancesWithOptions(request: DescribeAutoProvisioningGroupInstancesRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoProvisioningGroupInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoProvisioningGroupInstances(request: DescribeAutoProvisioningGroupInstancesRequest): DescribeAutoProvisioningGroupInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupInstancesWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupsRequest {
  autoProvisioningGroupId?: [ string ](name='AutoProvisioningGroupId', description='The ID of the auto provisioning group. You can specify up to 20 IDs.', example='apg-sn54avj8htgvtyh8****'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group.', example='testAutoProvisioningGroupName'),
  autoProvisioningGroupStatus?: [ string ](name='AutoProvisioningGroupStatus', description='The status of the auto provisioning group.', example='active'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='2'),
  regionId?: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeAutoProvisioningGroupsResponseBody = {
  autoProvisioningGroups?: {
    autoProvisioningGroup?: [ 
    {
      autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The ID of the auto provisioning group.', example='apg-sn54avj8htgvtyh8****'),
      autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto provisioning group.', example='EcsDocTest'),
      autoProvisioningGroupType?: string(name='AutoProvisioningGroupType', description='The delivery type of the auto provisioning group. Valid values:

*   request: the one-time delivery. When the auto provisioning group is started, the system delivers clusters only once. If the clusters fail to be delivered, the system does not retry the delivery.
*   maintain: continuous delivery. When the auto provisioning group is started, the system delivers clusters until the target capacity is reached. The system also monitors the capacity in real time. If the target capacity of the auto provisioning group is not reached, the system continues creating ECS instances until the target capacity is reached.', example='maintain'),
      creationTime?: string(name='CreationTime', description='The creation time.', example='2019-04-01T15:10:20Z'),
      excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='Specifies whether to release the removed instances when the capacity of the auto provisioning group exceeds the target capacity and a scale-in event is triggered. Valid values:

*   termination: releases the removed instances.
*   no-termination: removes the instances from the auto provisioning group but does not release them.', example='termination'),
      launchTemplateConfigs?: {
        launchTemplateConfig?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type that is specified in the extended configurations.', example='ecs.g5.large'),
          maxPrice?: float(name='MaxPrice', description='The maximum price of the instance type specified in the extended configurations.', example='3'),
          priority?: float(name='Priority', description='The priority of the instance type specified in the extended configurations. A value of 0 indicates the highest priority.', example='1'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch specified in the extended configurations.', example='vsw-sn5bsitu4lfzgc5o7****'),
          weightedCapacity?: float(name='WeightedCapacity', description='The weight of the instance type specified in the extended configurations.', example='2'),
        }
      ](name='LaunchTemplateConfig')
      }(name='LaunchTemplateConfigs', description='Details about the extended configurations.'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template associated with the auto provisioning group.', example='lt-bp1fgzds4bdogu03****'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion', description='The version of the launch template associated with the auto provisioning group.', example='1'),
      maxSpotPrice?: float(name='MaxSpotPrice', description='The maximum price for preemptible instances in the auto provisioning group.

> If both the MaxSpotPrice and LaunchTemplateConfig.N.MaxPrice parameters are specified, the smaller one of the two parameter values is used.

The LaunchTemplateConfig.N.MaxPrice parameter is set when the auto provisioning group is created, and cannot be modified.', example='2'),
      payAsYouGoOptions?: {
        allocationStrategy?: string(name='AllocationStrategy', description='The policy for creating pay-as-you-go instances. Valid values:

*   lowest-price: the cost optimization policy. The auto provisioning group selects the instance type of the lowest price to create pay-as-you-go instances.
*   prioritized: the priority-based policy. This policy indicates that instances are created based on the priority specified by the LaunchTemplateConfig.N.Priority parameter.

> The LaunchTemplateConfig.N.Priority parameter is set when the auto provisioning group is created, and cannot be modified.', example='prioritized'),
      }(name='PayAsYouGoOptions', description='The policies related to pay-as-you-go instances.'),
      regionId?: string(name='RegionId', description='The region ID of the auto provisioning group.', example='cn-hangzhou'),
      spotOptions?: {
        allocationStrategy?: string(name='AllocationStrategy', description='The policy for creating preemptible instances. Valid values:

*   lowest-price: the cost optimization policy. The auto provisioning group selects the instance type of the lowest price to create preemptible instances.
*   diversified: the balanced distribution policy. The auto provisioning group creates the instances in the zones that are specified in extended configurations and evenly distributes the instances across the zones.', example='diversified'),
        instanceInterruptionBehavior?: string(name='InstanceInterruptionBehavior', description='The action to be performed after the extra preemptible instances are stopped. Valid values:

*   stop: retains the extra preemptible instances in the stopped state.
*   terminate: releases the excess preemptible instances.', example='stop'),
        instancePoolsToUseCount?: int32(name='InstancePoolsToUseCount', description='The number of instances that the auto provisioning group creates by selecting the instance type of the lowest price.

> This parameter is set when the auto provisioning group is created, and cannot be modified.', example='2'),
      }(name='SpotOptions', description='The policy related to preemptible instances.'),
      state?: string(name='State', description='The overall status of instance scheduling of the auto provisioning group. Valid values:

*   fulfilled: Scheduling is complete and the instance cluster is delivered.
*   pending-fulfillment: The instances are being created.
*   pending-termination: The instances are being removed.
*   error: An exception occurred during scheduling and the instance cluster is not delivered.', example='fulfilled'),
      status?: string(name='Status', description='The status of the auto provisioning group. Valid values:

*   submitted: The auto provisioning group is created but has not started to execute scheduling tasks.
*   active: The auto provisioning group is executing scheduling tasks.
*   deleted: The auto provisioning group is deleted.
*   deleted-running: The auto provisioning group is being deleted.
*   modifying: The auto provisioning group is being modified.', example='submitted'),
      targetCapacitySpecification?: {
        defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='The billing method of supplemental instances. The target capacity of the auto provisioning group must be at least the sum of the pay-as-you-go instance capacity specified by the PayAsYouGoTargetCapacity parameter and the preemptible instance capacity specified by the SpotTargetCapacity parameter. Valid values:

*   PayAsYouGo: pay-as-you-go instances
*   Spot: preemptible instances', example='Spot'),
        payAsYouGoTargetCapacity?: float(name='PayAsYouGoTargetCapacity', description='The target capacity of pay-as-you-go instances in the auto provisioning group.', example='30'),
        spotTargetCapacity?: float(name='SpotTargetCapacity', description='The target capacity of preemptible instances in the auto provisioning group.', example='20'),
        totalTargetCapacity?: float(name='TotalTargetCapacity', description='The target capacity of the auto provisioning group. The capacity consists of the following parts:

*   PayAsYouGoTargetCapacity
*   SpotTargetCapacity
*   The supplemental capacity besides instance capacities specified by the PayAsYouGoTargetCapacity and SpotTargetCapacity parameters', example='60'),
      }(name='TargetCapacitySpecification', description='The settings of the target capacity of the auto provisioning group.'),
      terminateInstances?: boolean(name='TerminateInstances', description='Indicates whether the instances in the auto provisioning group are released when the auto provisioning group is deleted. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: retains instances in the auto provisioning group.', example='false'),
      terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='Indicates whether the instances in the auto provisioning group are released when the auto provisioning group expires. Valid values:

*   true: releases instances in the auto provisioning group.
*   false: removes instances from the auto provisioning group but does not release them.', example='true'),
      validFrom?: string(name='ValidFrom', description='The time at which the auto provisioning group is started. The provisioning group is effective to the point in time specified by the `ValidUntil` parameter.', example='2019-04-01T15:10:20Z'),
      validUntil?: string(name='ValidUntil', description='The time at which the auto provisioning group expires. The provisioning group is started from the point in time specified by the `ValidFrom` parameter.', example='2019-06-01T15:10:20Z'),
    }
  ](name='AutoProvisioningGroup')
  }(name='AutoProvisioningGroups', description='Details about the auto provisioning groups.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='745CEC9F-0DD7-4451-9FE7-8B752F39****'),
  totalCount?: int32(name='TotalCount', description='The number of queried auto provisioning groups.', example='10'),
}

model DescribeAutoProvisioningGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoProvisioningGroupsResponseBody(name='body'),
}

async function describeAutoProvisioningGroupsWithOptions(request: DescribeAutoProvisioningGroupsRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.autoProvisioningGroupName)) {
    query['AutoProvisioningGroupName'] = request.autoProvisioningGroupName;
  }
  if (!Util.isUnset(request.autoProvisioningGroupStatus)) {
    query['AutoProvisioningGroupStatus'] = request.autoProvisioningGroupStatus;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoProvisioningGroups',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoProvisioningGroups(request: DescribeAutoProvisioningGroupsRequest): DescribeAutoProvisioningGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupsWithOptions(request, runtime);
}

model DescribeAutoSnapshotPolicyExRequest {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The name of the automatic snapshot policy.', example='sp-bp67acfmxazb4ph****'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='The number of the page to return.

Page start from page 1.

Default value: 1.', example='TestName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='1'),
  pageSize?: int32(name='PageSize', description='The tags.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the automatic snapshot policy.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The number of entries returned per page.', example='rg-aek2kkmhmhs****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The value of tag N of the automatic snapshot policy. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with acs: or contain http:// or https://.', example='TestKey'),
      value?: string(name='Value', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='TestValue'),
    }
  ](name='Tag', description='The key of tag N of the automatic snapshot policy. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain http:// or https://.'),
}

model DescribeAutoSnapshotPolicyExResponseBody = {
  autoSnapshotPolicies?: {
    autoSnapshotPolicy?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The automatic snapshot is retained until it is deleted.
*   1 to 65536: The automatic snapshot is retained for the specified number of days.', example='sp-bp67acfmxazb4ph****'),
      autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='>  This parameter is in invitational preview and unavailable for general users.', example='testAutoSnapshotPolicyName'),
      copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='The ID of the automatic snapshot policy.', example='0'),
      creationTime?: string(name='CreationTime', description='The state of the automatic snapshot policy. Valid values:

*   Normal: The automatic snapshot policy is normal.
*   Expire: The automatic snapshot policy cannot be used because your account has overdue payments.', example='2019-12-10T16:00Z'),
      diskNums?: int32(name='DiskNums', description='>  This parameter is in invitational preview and unavailable for general users.', example='1'),
      enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to the days of the week. 1 indicates Monday. One or more days can be specified.', example='false'),
      regionId?: string(name='RegionId', description='The number of disks to which the automatic snapshot policy is applied.', example='cn-hangzhou'),
      repeatWeekdays?: string(name='RepeatWeekdays', description='The number of extended volumes to which the automatic snapshot policy is applied.', example='["6"]'),
      resourceGroupId?: string(name='ResourceGroupId', description='The tags of the automatic snapshot policy.', example='rg-aek2kkmhmhs****'),
      retentionDays?: int32(name='RetentionDays', description='The region ID of the automatic snapshot policy.', example='7'),
      status?: string(name='Status', description='The name of the automatic snapshot policy.', example='Normal'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag key of the automatic snapshot policy.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag value of the automatic snapshot policy.'),
      targetCopyRegions?: string(name='TargetCopyRegions', description='>  This parameter is in invitational preview and unavailable for general users.', example='test'),
      timePoints?: string(name='TimePoints', description='The time when the automatic snapshot policy was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.', example='["1"]'),
      volumeNums?: int32(name='VolumeNums', description='The ID of the resource group.', example='2'),
    }
  ](name='AutoSnapshotPolicy')
  }(name='AutoSnapshotPolicies', description='The points in time of the day at which to create automatic snapshots.

The time is displayed in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. 1 indicates 01:00:00. Multiple points in time can be specified.

The parameter value is a JSON array that contains up to 24 points in time separated by commas (,). Example: `["0", "1", ... "23"]`.'),
  pageNumber?: int32(name='PageNumber', description='The total number of automatic snapshot policies.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  requestId?: string(name='RequestId', description='The page number of the returned page.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='Details about the automatic snapshot policies.', example='1'),
}

model DescribeAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAutoSnapshotPolicyExResponseBody(name='body'),
}

async function describeAutoSnapshotPolicyExWithOptions(request: DescribeAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyName)) {
    query['AutoSnapshotPolicyName'] = request.autoSnapshotPolicyName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoSnapshotPolicyEx',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoSnapshotPolicyEx(request: DescribeAutoSnapshotPolicyExRequest): DescribeAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPolicyExWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  cores?: int32(name='Cores', description='The number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).

The Cores parameter takes effect only when the DestinationResource parameter is set to InstanceType.', example='2'),
  dataDiskCategory?: string(name='DataDiskCategory', description='The type of the data disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   ephemeral_ssd: local SSD.
*   cloud_essd: ESSD.', example='cloud_ssd'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
  destinationResource?: string(name='DestinationResource', description='The resource type to query. Valid values:

*   Zone: zone.
*   IoOptimized: I/O optimized resource.
*   InstanceType: instance type.
*   SystemDisk: system disk.
*   DataDisk: data disk.
*   Network: network type.
*   ddh: dedicated host.

For more information about how to configure the DestinationResource parameter, see the **Description** section of this topic.', example='InstanceType'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the resource. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go.

Default value: PostPaid.', example='PrePaid'),
  instanceType?: string(name='InstanceType', description='The instance types. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.

For more information about how to configure the InstanceType parameter, see the **Description** section of this topic.', example='ecs.g5.large'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is an I/O optimized instance. Valid values:

*   none: The instance is a non-I/O optimized instance.
*   optimized: The instance is an I/O optimized instance.

Default value: optimized.', example='optimized'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For more information, see [Instance families](~~25378~~).

The Memory parameter takes effect only when the DestinationResource parameter is set to InstanceType.', example='8.0'),
  networkCategory?: string(name='NetworkCategory', description='The network type of the cluster. Valid values:

*   vpc
*   classic', example='vpc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region for which to query resources. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance.
*   disk: cloud disk.
*   reservedinstance: reserved instance.
*   ddh: dedicated host.', example='instance'),
  scope?: string(name='Scope', description='The scope of the reserved instance. Valid values:

*   Region: regional.
*   Zone: zonal.', example='Region'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for pay-as-you-go instances. Valid values:

*   NoSpot: The instance is a pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.

Default value: NoSpot.

The SpotStrategy parameter takes effect only when the InstanceChargeType parameter is set to PostPaid.', example='NoSpot'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud: basic disk.
*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.
*   ephemeral_ssd: local SSD.
*   cloud_essd: enhanced SSD (ESSD).

Default value: cloud_efficiency.

> When the ResourceType parameter is set to instance and the DestinationResource parameter is set to DataDisk, you must set the SystemDiskCategory parameter. If you do not set this parameter, the default value takes effect.', example='cloud_ssd'),
  zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.

This parameter is empty by default. When this parameter is empty, the system returns resources that match the other criteria in all zones within the region specified by `RegionId`.', example='cn-hangzhou-e'),
}

model DescribeAvailableResourceResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      availableResources?: {
        availableResource?: [ 
        {
          supportedResources?: {
            supportedResource?: [ 
            {
              max?: int32(name='Max', description='The maximum number of available resources of a specific type. No value is returned when the parameter is empty.', example='2'),
              min?: int32(name='Min', description='The minimum number of available resources of a specific type. No value is returned when the parameter is empty.', example='1'),
              status?: string(name='Status', description='The state of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
              statusCategory?: string(name='StatusCategory', description='The resource category based on the stock. Valid values:

*   WithStock: Resources are in sufficient stock.
*   ClosedWithStock: Resources are insufficient. We recommend that you use other resources that are in sufficient stock.
*   WithoutStock: Resources are sold out and will be replenished. We recommend that you use other resources that are in sufficient stock.
*   ClosedWithoutStock: Resources are sold out and will not be replenished. We recommend that you use other resources that are in sufficient stock.', example='WithStock'),
              unit?: string(name='Unit', description='The unit of the resource type. No value is returned when the parameter is empty.', example='null'),
              value?: string(name='Value', description='The resource type.', example='ecs.d1ne.xlarge'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources', description='Details about the resources.'),
          type?: string(name='Type', description='The type of a resource. Valid values:

*   Zone: zone.
*   IoOptimized: I/O optimized resource.
*   InstanceType: instance type.
*   SystemDisk: system disk.
*   DataDisk: data disk.
*   Network: network type.
*   ddh: dedicated host.', example='InstanceType'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources', description='Details about the resources that can be created in the zone.'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
      status?: string(name='Status', description='The state of resources in the zone. Valid values:

*   Available
*   SoldOut', example='Available'),
      statusCategory?: string(name='StatusCategory', description='The resource category based on the stock. Valid values:

*   WithStock: Resources are in sufficient stock.
*   ClosedWithStock: Resources are insufficient. We recommend that you use other resources that are in sufficient stock.
*   WithoutStock: Resources are sold out and will be replenished. We recommend that you use other resources that are in sufficient stock.
*   ClosedWithoutStock: Resources are sold out and will not be replenished. We recommend that you use other resources that are in sufficient stock.', example='WithStock'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance resides.', example='cn-hangzhou-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones', description='Details about the zones in which resources are available.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0041D94C-FB92-4C49-B115-259DA1C*****'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

/**
  * The value of the `DestinationResource` parameter determines whether you need to specify additional parameters. The following sequence provides the order by which resources are filtered. You cannot query a higher order resource by specifying a lower order resource.
  * *   Sequence: `Zone > IoOptimized > InstanceType = Network = ddh > SystemDisk > DataDisk`
  * *   Examples:
  *     *   If you set `DestinationResource` to `DataDisk`, you must specify the `InstanceType` parameter or set the `ResourceType` parameter to `disk`.
  *     *   If you set `DestinationResource` to `SystemDisk`, you must specify the `InstanceType` parameter.
  *     *   If you set `DestinationResource` to `InstanceType`, you must specify the `IoOptimized` and `InstanceType` parameters.
  *     *   If you want to query available ecs.g5.large resources in all zones of the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to InstanceType, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *     *   If you want to query the zones where ecs.g5.large resources are available in the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to Zone, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *
  * @param request DescribeAvailableResourceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeAvailableResourceResponse
 */
async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.dataDiskCategory)) {
    query['DataDiskCategory'] = request.dataDiskCategory;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.destinationResource)) {
    query['DestinationResource'] = request.destinationResource;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.networkCategory)) {
    query['NetworkCategory'] = request.networkCategory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDiskCategory)) {
    query['SystemDiskCategory'] = request.systemDiskCategory;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableResource',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The value of the `DestinationResource` parameter determines whether you need to specify additional parameters. The following sequence provides the order by which resources are filtered. You cannot query a higher order resource by specifying a lower order resource.
  * *   Sequence: `Zone > IoOptimized > InstanceType = Network = ddh > SystemDisk > DataDisk`
  * *   Examples:
  *     *   If you set `DestinationResource` to `DataDisk`, you must specify the `InstanceType` parameter or set the `ResourceType` parameter to `disk`.
  *     *   If you set `DestinationResource` to `SystemDisk`, you must specify the `InstanceType` parameter.
  *     *   If you set `DestinationResource` to `InstanceType`, you must specify the `IoOptimized` and `InstanceType` parameters.
  *     *   If you want to query available ecs.g5.large resources in all zones of the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to InstanceType, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *     *   If you want to query the zones where ecs.g5.large resources are available in the China (Hangzhou) region, you must set RegionId to cn-hangzhou, DestinationResource to Zone, IoOptimized to optimized, and InstanceType to ecs.g5.large.``
  *
  * @param request DescribeAvailableResourceRequest
  * @return DescribeAvailableResourceResponse
 */
async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeBandwidthLimitationRequest {
  instanceChargeType?: string(name='InstanceChargeType', description='The preemption policy for the preemptible or pay-as-you-go instance. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with user-defined maximum hourly prices.
*   SpotAsPriceGo: The system automatically offers a bid, which is not higher than the pay-as-you-go price for the same instance type.

Default value: NoSpot.

>  This parameter takes effect only when the InstanceChargeType parameter is set to PostPaid.', example='The instance type. For more information about the values, see [Instance families](~~25378~~).

>  This parameter is required.'),
  instanceType?: string(name='InstanceType', description='Specifies the operation for which to query the maximum public bandwidth. Valid values:

*   Upgrade: upgrades the public bandwidth.
*   Downgrade: downgrades the public bandwidth.
*   Create: creates an ECS instance.

Default value: Create.', example='ecs.g5.large'),
  operationType?: string(name='OperationType', description='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E', example='Upgrade'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='PrePaid', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the request.', example='i-bp67acfmxazb4ph***'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotStrategy?: string(name='SpotStrategy', description='The ID of the resource.

>  This parameter is required when the OperationType parameter is set to Upgrade or Downgrade.', example='NoSpot'),
}

model DescribeBandwidthLimitationResponseBody = {
  bandwidths?: {
    bandwidth?: [ 
    {
      internetChargeType?: string(name='InternetChargeType', description='The minimum public bandwidth.', example='PayByTraffic'),
      max?: int32(name='Max', description='The unit of the public bandwidth.', example='100'),
      min?: int32(name='Min', description='DescribeBandwidthLimitation', example='0'),
      unit?: string(name='Unit', example='Mbps'),
    }
  ](name='Bandwidth')
  }(name='Bandwidths', description='The maximum public bandwidth.'),
  requestId?: string(name='RequestId', description='Details about the maximum public bandwidth.', example='The billing method for network usage. Valid values:

*   PayByBandwidth
*   PayByTraffic'),
}

model DescribeBandwidthLimitationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBandwidthLimitationResponseBody(name='body'),
}

async function describeBandwidthLimitationWithOptions(request: DescribeBandwidthLimitationRequest, runtime: Util.RuntimeOptions): DescribeBandwidthLimitationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBandwidthLimitation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBandwidthLimitation(request: DescribeBandwidthLimitationRequest): DescribeBandwidthLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthLimitationWithOptions(request, runtime);
}

model DescribeBandwidthPackagesRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  natGatewayId?: string(name='NatGatewayId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeBandwidthPackagesResponseBody = {
  bandwidthPackages?: {
    bandwidthPackage?: [ 
    {
      bandwidth?: string(name='Bandwidth'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      businessStatus?: string(name='BusinessStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      ISP?: string(name='ISP'),
      instanceChargeType?: string(name='InstanceChargeType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipCount?: string(name='IpCount'),
      name?: string(name='Name'),
      natGatewayId?: string(name='NatGatewayId'),
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          allocationId?: string(name='AllocationId'),
          ipAddress?: string(name='IpAddress'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='BandwidthPackage')
  }(name='BandwidthPackages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBandwidthPackagesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeBandwidthPackagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeBandwidthPackagesResponse
 */
// Deprecated
async function describeBandwidthPackagesWithOptions(request: DescribeBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeBandwidthPackagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBandwidthPackages',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeBandwidthPackagesRequest
  * @return DescribeBandwidthPackagesResponse
 */
// Deprecated
async function describeBandwidthPackages(request: DescribeBandwidthPackagesRequest): DescribeBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthPackagesWithOptions(request, runtime);
}

model DescribeCapacityReservationInstancesRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The token used to start the next query.', example='crp-bp67acfmxazb4****'),
  }(name='PrivatePoolOptions'),
  maxResults?: int32(name='MaxResults', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='10'),
  nextToken?: string(name='NextToken', description='The ID of the capacity reservation.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCapacityReservationInstancesResponseBody = {
  capacityReservationItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId', example='i-bp67acfmxazb4****'),
    }
  ](name='InstanceIdSet')
  }(name='CapacityReservationItem', description='The instance ID.'),
  maxResults?: int32(name='MaxResults', description='Details about the instances that match the capacity reservation.', example='10'),
  nextToken?: string(name='NextToken', description='The request ID.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The total number of entries returned.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The maximum number of entries returned per page.', example='10'),
}

model DescribeCapacityReservationInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCapacityReservationInstancesResponseBody(name='body'),
}

async function describeCapacityReservationInstancesWithOptions(request: DescribeCapacityReservationInstancesRequest, runtime: Util.RuntimeOptions): DescribeCapacityReservationInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCapacityReservationInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCapacityReservationInstances(request: DescribeCapacityReservationInstancesRequest): DescribeCapacityReservationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapacityReservationInstancesWithOptions(request, runtime);
}

model DescribeCapacityReservationsRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids', description='The IDs of capacity reservations. The value can be a JSON array that consists of up to 100 capacity reservation IDs. Separate the IDs with commas (,).', example='["crp-bp1gubrkqutenqdd****", "crp-bp67acfmxazb5****"]'),
  }(name='PrivatePoolOptions'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PostPaid: pay-as-you-go.
*   PrePaid: subscription.

Default value: PostPaid.', example='PostPaid'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.

Valid values: 1 to 100

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of the NextToken parameter.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='The operating system of the instance. Valid values:

*   windows: Windows operating systems.
*   linux: Linux operating systems.
*   all: all operating system types.

Default value: all.', example='linux'),
  regionId?: string(name='RegionId', description='The region ID of the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the capacity reservation belongs. If you specify this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of whether you specify this parameter.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The state of the capacity reservation. Valid values:

*   All: All states.
*   Pending: The capacity reservation is being initialized. Scheduled capacity reservations enter the Pending state after they are created.
*   Preparing: The capacity reservation is being prepared. Scheduled capacity reservations are in the Preparing state while resources are being provisioned.
*   Prepared: The capacity reservation is to take effect. After resources are provisioned, scheduled capacity reservations remain in the Prepared state until they take effect.
*   Active: The capacity reservation is in effect.
*   Released: The capacity reservation has been released manually or automatically when it expired.

Default value: Active.', example='Active'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20.

If you specify a single tag to query resources, up to 1,000 resources with this tag are returned in the response. If you specify multiple tags to query resources, up to 1,000 resources with all these tags are returned in the response. To query more than 1,000 resources with the specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the capacity reservation.', example='cn-hangzhou-h'),
}

model DescribeCapacityReservationsResponseBody = {
  capacityReservationSet?: {
    capacityReservationItem?: [ 
    {
      allocatedResources?: {
        allocatedResource?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
          totalAmount?: int32(name='TotalAmount', description='The total number of instances for which capacity of an instance type is reserved.', example='2'),
          usedAmount?: int32(name='UsedAmount', description='The number of instances that have used the capacity reservation.', example='2'),
          zoneId?: string(name='zoneId', description='The zone ID.', example='cn-hangzhou-h'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources', description='Details of the allocated resources.'),
      description?: string(name='Description', description='The description of the capacity reservation.', example='This is description.'),
      endTime?: string(name='EndTime', description='The time when the capacity reservation expires.', example='2021-02-19T03:02Z'),
      endTimeType?: string(name='EndTimeType', description='The release mode of the capacity reservation. Valid values:

*   Limited: The capacity reservation is automatically released at the specified time.
*   Unlimited: The capacity reservation is manually released. You can release the capacity reservation anytime.', example='Unlimited'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of instances in the capacity reservation. Valid values:

*   PostPaid: pay-as-you-go.
*   PrePaid: subscription.', example='PostPaid'),
      platform?: string(name='Platform', description='The operating system type of the instances. Valid values:

*   windows: Windows operating systems.
*   linux: Linux operating systems.', example='linux'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the capacity reservation.', example='crp-bp1gubrkqutenqdd****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The type of the private pool generated after the capacity reservation takes effect. Valid values:

*   Open: open private pool.
*   Target: targeted private pool.', example='Open'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName', description='The name of the capacity reservation.', example='crpTestName'),
      regionId?: string(name='RegionId', description='The region ID of the capacity reservation.', example='cn-hangzhou'),
      reservedInstanceId?: string(name='ReservedInstanceId', description='The ID of the reserved instance used with the capacity reservation.', example='ri-bpzhex2ulpzf53****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the capacity reservation belongs.', example='rg-bp67acfmxazb4p****'),
      savingPlanId?: string(name='SavingPlanId', description='The ID of the savings plan used with the capacity reservation.', example='spn-c29b5e18pJMT****'),
      startTime?: string(name='StartTime', description='The time when the capacity reservation takes effect.', example='2021-02-19T02:01Z'),
      startTimeType?: string(name='StartTimeType', description='The mode in which the capacity reservation takes effect. Valid values:

*   Now: The capacity reservation takes effect as soon as it is created.
*   Later: The capacity reservation takes effect at the specified time.', example='Now'),
      status?: string(name='Status', description='The state of the capacity reservation. Valid values:

*   Pending: The capacity reservation is being initialized.
*   Preparing: The capacity reservation is being prepared.
*   Prepared: The capacity reservation is to take effect.
*   Active: The capacity reservation is in effect.
*   Released: The capacity reservation has been released manually or automatically when it expired.', example='Active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the capacity reservation.'),
      timeSlot?: string(name='TimeSlot', description='> This parameter is in invitational preview and is not publicly available.', example='null'),
    }
  ](name='CapacityReservationItem')
  }(name='CapacityReservationSet', description='Details of the capacity reservations.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCapacityReservationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCapacityReservationsResponseBody(name='body'),
}

async function describeCapacityReservationsWithOptions(request: DescribeCapacityReservationsRequest, runtime: Util.RuntimeOptions): DescribeCapacityReservationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCapacityReservations',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCapacityReservations(request: DescribeCapacityReservationsRequest): DescribeCapacityReservationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapacityReservationsWithOptions(request, runtime);
}

model DescribeClassicLinkInstancesRequest {
  instanceId?: string(name='InstanceId', description='The instance ID. You can specify a maximum of 100 instance IDs in a single request. Separate the instance IDs with commas (,).', example='i-bp1a5zr3u7nq9cxh****'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber', description='The page number. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId', description='The VPC ID. The ClassicLink feature must be enabled for the specified VPC. For more information, see [Establish a ClassicLink connection](~~65413~~).', example='vpc-bp1vwnn14rqpyiczj****'),
}

model DescribeClassicLinkInstancesResponseBody = {
  links?: {
    link?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-test'),
      vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-test'),
    }
  ](name='Link')
  }(name='Links', description='The details of the ClassicLink connections between the instances reside in the classic network and VPCs.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of ClassicLink connections.', example='2'),
}

model DescribeClassicLinkInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClassicLinkInstancesResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   This operation applies only to instances that reside in the classic network.
  * *   You can query a maximum of 100 instances that reside in the classic network at a time.
  * *   At least one of the `VpcId` and `InstanceId` parameters must be configured.
  *
  * @param request DescribeClassicLinkInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClassicLinkInstancesResponse
 */
async function describeClassicLinkInstancesWithOptions(request: DescribeClassicLinkInstancesRequest, runtime: Util.RuntimeOptions): DescribeClassicLinkInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClassicLinkInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   This operation applies only to instances that reside in the classic network.
  * *   You can query a maximum of 100 instances that reside in the classic network at a time.
  * *   At least one of the `VpcId` and `InstanceId` parameters must be configured.
  *
  * @param request DescribeClassicLinkInstancesRequest
  * @return DescribeClassicLinkInstancesResponse
 */
async function describeClassicLinkInstances(request: DescribeClassicLinkInstancesRequest): DescribeClassicLinkInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClassicLinkInstancesWithOptions(request, runtime);
}

model DescribeCloudAssistantStatusRequest {
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances.', example='i-bp1iudwa5b1tqa****'),
  OSType?: string(name='OSType', description='The operating system type of the instance. Valid values:

*   Windows
*   Linux', example='Windows'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. If you specify **InstanceId**, this parameter does not take effect. Valid values: 1 to 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCloudAssistantStatusResponseBody = {
  instanceCloudAssistantStatusSet?: {
    instanceCloudAssistantStatus?: [ 
    {
      activeTaskCount?: long(name='ActiveTaskCount', description='The number of tasks that Cloud Assistant was running on the instance.', example='0'),
      cloudAssistantStatus?: string(name='CloudAssistantStatus', description='Indicates whether Cloud Assistant is running on the instance. Valid values:

*   true: Heartbeats are detected within 1 minute.
*   false: No heartbeats are detected within 1 minute.', example='true'),
      cloudAssistantVersion?: string(name='CloudAssistantVersion', description='The version number of Cloud Assistant Agent. If Cloud Assistant Agent is not installed or is not running, this parameter is left empty.', example='2.2.0.106'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1iudwa5b1tqa****'),
      invocationCount?: long(name='InvocationCount', description='The number of tasks that Cloud Assistant completed on the instance.', example='2'),
      lastHeartbeatTime?: string(name='LastHeartbeatTime', description='The last heartbeat time of Cloud Assistant. The value is updated once every minute.', example='2021-03-15T09:00:00Z'),
      lastInvokedTime?: string(name='LastInvokedTime', description='The time when commands were last run.', example='2021-03-15T08:00:00Z'),
      OSType?: string(name='OSType', description='The operating system type of the instance. Valid values:

*   Windows
*   Linux', example='Linux'),
      supportSessionManager?: boolean(name='SupportSessionManager', description='Indicates whether Cloud Assistant supports Session Manager on the instance. If Cloud Assistant does not support Session Manager, the Cloud Assistant running on the instance may be of an early version or Session Manager may not be supported in the specified region.', example='true'),
    }
  ](name='InstanceCloudAssistantStatus')
  }(name='InstanceCloudAssistantStatusSet', description='The installation states of Cloud Assistant Agent on the instances.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The total number of queried instances.', example='1'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

async function describeCloudAssistantStatusWithOptions(request: DescribeCloudAssistantStatusRequest, runtime: Util.RuntimeOptions): DescribeCloudAssistantStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.OSType)) {
    query['OSType'] = request.OSType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCloudAssistantStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudAssistantStatusWithOptions(request, runtime);
}

model DescribeClustersRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeClustersResponseBody = {
  clusters?: {
    cluster?: [ 
    {
      clusterId?: string(name='ClusterId'),
    }
  ](name='Cluster')
  }(name='Clusters'),
  requestId?: string(name='RequestId'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeClustersResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClusters',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeClustersRequest
  * @return DescribeClustersResponse
 */
// Deprecated
async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DescribeCommandsRequest {
  commandId?: string(name='CommandId', description='The command ID.', example='c-hz01272yr52****'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the `CommandContent` and `Output` response parameters. Valid values:

*   PlainText: returns the original command content and command output.
*   Base64: returns the Base64-encoded command content and command output.

Default value: Base64.', example='PlainText'),
  description?: string(name='Description', description='> This parameter is deprecated and does not take effect.', example='testDescription'),
  latest?: boolean(name='Latest', description='Specifies whether to query only the latest version of common commands if common commands are queried. This parameter does not affect the query for private commands. Valid values:

*   true: queries only the latest version of common commands.
*   false: queries all versions of common commands.

Default value: false.', example='true'),
  name?: string(name='Name', description='The command name. Partial command names are not supported.', example='testName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.

Valid values: 1 to 50.

Default value: 10.', example='10'),
  provider?: string(name='Provider', description='The provider of the common command. Take note of the following items:

*   If you do not specify this parameter, all the commands that you created are queried.

*   If you set this parameter to `AlibabaCloud`, all the common commands provided by Alibaba Cloud are queried.

*   If you set this parameter to a specific provider, all the common commands provided by the provider are queried. Examples:

    *   If you set `Provider` to AlibabaCloud.ECS.GuestOS, all the common commands provided by `AlibabaCloud.ECS.GuestOS` are queried.
    *   If you set `Provider` to AlibabaCloud.ECS.GuestOSDiagnose, all the common commands provided by `AlibabaCloud.ECS.GuestOSDiagnose` are queried.', example='AlibabaCloud'),
  regionId?: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the command.'),
  type?: string(name='Type', description='The command type. Valid values:

*   RunBatScript: batch command, applicable to Windows instances.
*   RunPowerShellScript: PowerShell command, applicable to Windows instances.
*   RunShellScript: shell command, applicable to Linux instances.', example='RunShellScript'),
}

model DescribeCommandsResponseBody = {
  commands?: {
    command?: [ 
    {
      category?: string(name='Category', description='The category of the common command.', example='“”'),
      commandContent?: string(name='CommandContent', description='The Base64-encoded command content.', example='Y2QgL3Jvb3Q='),
      commandId?: string(name='CommandId', description='The command ID.', example='c-hz01272yr52****'),
      creationTime?: string(name='CreationTime', description='The time when the command was created.', example='2020-11-17T06:52Z'),
      description?: string(name='Description', description='The command description.', example='testDescription'),
      enableParameter?: boolean(name='EnableParameter', description='Indicates whether the custom parameter feature was enabled for the command.', example='true'),
      invokeTimes?: int32(name='InvokeTimes', description='The number of tasks created by using the command.', example='2'),
      latest?: boolean(name='Latest', description='Indicates whether the common command is of the latest version. If multiple common commands from the same provider (`Provider`) belong to the same category and share the same name, these commands are different versions of the same command. This parameter is not returned for the Cloud Assistant commands that you created.', example='true'),
      name?: string(name='Name', description='The command name.', example='testName'),
      parameterDefinitions?: {
        parameterDefinition?: [ 
        {
          defaultValue?: string(name='DefaultValue', description='The default value of the custom parameter.', example='https://aliyun-client-assist.oss-accelerate.aliyuncs.com/linux/aliyun_assist_latest.rpm'),
          description?: string(name='Description', description='The description of the custom parameter.', example='Download path of Cloud Assistant Agent installation package'),
          parameterName?: string(name='ParameterName', description='The name of the custom parameter.', example='DownloadUrl'),
          possibleValues?: {
            possibleValue?: [ string ](name='PossibleValue')
          }(name='PossibleValues', description='The valid values of the custom enumeration parameter.'),
          required?: boolean(name='Required', description='Indicates whether the custom parameter is required. Valid values:

*   true
*   false

Default value: false.', example='true'),
        }
      ](name='ParameterDefinition')
      }(name='ParameterDefinitions', description='The custom parameters.'),
      parameterNames?: {
        parameterName?: [ string ](name='ParameterName')
      }(name='ParameterNames', description='The custom parameter names that are parsed from the command content specified when the command was being created. If the custom parameter feature is not enabled, an empty list is returned.'),
      provider?: string(name='Provider', description='The provider of the common command.', example='AlibabaCloud.ECS.GuestOS'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag of the command.', example='owner'),
          tagValue?: string(name='TagValue', description='The value of the tag of the command.', example='zhangsan'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the command.'),
      timeout?: long(name='Timeout', description='The timeout period.', example='3600'),
      type?: string(name='Type', description='The command type.', example='RunShellScript'),
      version?: int32(name='Version', description='The version of the common command. If multiple common commands from the same provider (`Provider`) belong to the same category and share the same name, these commands are different versions of the same command. This parameter is not returned for the Cloud Assistant commands that you created.', example='1'),
      workingDir?: string(name='WorkingDir', description='The working directory of the command.', example='/home/'),
    }
  ](name='Command')
  }(name='Commands', description='The queried commands.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', description='The total number of commands.', example='5'),
}

model DescribeCommandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCommandsResponseBody(name='body'),
}

/**
  * If you specify only `Action` and `RegionId` to call this operation, all the available commands (`CommandId`) that you created in the specified region are queried by default.
  *
  * @param request DescribeCommandsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCommandsResponse
 */
async function describeCommandsWithOptions(request: DescribeCommandsRequest, runtime: Util.RuntimeOptions): DescribeCommandsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.latest)) {
    query['Latest'] = request.latest;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.provider)) {
    query['Provider'] = request.provider;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCommands',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you specify only `Action` and `RegionId` to call this operation, all the available commands (`CommandId`) that you created in the specified region are queried by default.
  *
  * @param request DescribeCommandsRequest
  * @return DescribeCommandsResponse
 */
async function describeCommands(request: DescribeCommandsRequest): DescribeCommandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommandsWithOptions(request, runtime);
}

model DescribeDedicatedHostAutoRenewRequest {
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The region ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****,dh-bp1f9vxmno****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostAutoRenewResponseBody = {
  dedicatedHostRenewAttributes?: {
    dedicatedHostRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Indicates whether the subscription dedicated host is automatically renewed along with the subscription Elastic Compute Service (ECS) instances hosted on it if the new expiration time of the renewed instances is later than the expiration time of the dedicated host. Valid values:

*   AutoRenewWithEcs: The subscription dedicated host is automatically renewed along with the subscription ECS instances hosted on it.
*   StopRenewWithEcs: The subscription dedicated host is not automatically renewed along with the subscription ECS instances hosted on it.', example='false'),
      autoRenewWithEcs?: string(name='AutoRenewWithEcs', example='StopRenewWithEcs'),
      dedicatedHostId?: string(name='DedicatedHostId', description='Indicates whether the subscription dedicated host is automatically renewed. Valid values:

*   AutoRenewal: The dedicated host is automatically renewed.
*   Normal: The dedicated host is not automatically renewed, and you will receive notifications for renewal.
*   NotRenewal: The dedicated host is not renewed, and no expiration notification is sent. Notifications for renewal are automatically sent three days before the dedicated host expires. You can change the value of this parameter from NotRenewal to Normal for the dedicated host and manually renew it by calling the [RenewDedicatedHosts](~~93287~~) operation. Alternatively, you can set this parameter to AutoRenewal to configure the dedicated host to be automatically renewed.', example='dh-bp165p6xk2tlw61e****'),
      duration?: int32(name='Duration', description='The ID of the dedicated host.', example='0'),
      periodUnit?: string(name='PeriodUnit', description='The auto-renewal period.', example='Month'),
      renewalStatus?: string(name='RenewalStatus', description='Indicates whether the subscription dedicated host is automatically renewed. Valid values:

*   true: The dedicated host is automatically renewed.
*   false: The dedicated host is not automatically renewed.', example='Normal'),
    }
  ](name='DedicatedHostRenewAttribute')
  }(name='DedicatedHostRenewAttributes', description='The unit of the auto-renewal period. Valid values:

*   Week
*   Month'),
  requestId?: string(name='RequestId', description='Details about the auto-renewal attributes of the dedicated hosts.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeDedicatedHostAutoRenewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostAutoRenewResponseBody(name='body'),
}

async function describeDedicatedHostAutoRenewWithOptions(request: DescribeDedicatedHostAutoRenewRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAutoRenewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostAutoRenew',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostAutoRenew(request: DescribeDedicatedHostAutoRenewRequest): DescribeDedicatedHostAutoRenewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAutoRenewWithOptions(request, runtime);
}

model DescribeDedicatedHostClustersRequest {
  dedicatedHostClusterIds?: string(name='DedicatedHostClusterIds', description='The IDs of dedicated host clusters. The value can be a JSON array that consists of up to 100 dedicated host cluster IDs in the format of `["dc-xxxxxxxxx", "dc-yyyyyyyyy", ... "dc-zzzzzzzzz"]`. Separate the IDs with commas (,).', example='["dc-bp12wlf6am0vz9v2****", "dc-bp12wlf6am0vz9v3****"]'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster.', example='myDDHCluster'),
  lockReason?: string(name='LockReason', description='>  This parameter is unavailable for use.', example='null'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='5'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host cluster belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.  

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='>  This parameter is unavailable for use.', example='null'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the dedicated host cluster. Valid values of N: 1 to 20. The tag value cannot be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of the tags.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host cluster. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-f'),
}

model DescribeDedicatedHostClustersResponseBody = {
  dedicatedHostClusters?: {
    dedicatedHostCluster?: [ 
    {
      dedicatedHostClusterCapacity?: {
        availableInstanceTypes?: {
          availableInstanceType?: [ 
          {
            availableInstanceCapacity?: int32(name='AvailableInstanceCapacity', description='The available capacity of the ECS instance type.', example='0'),
            instanceType?: string(name='InstanceType', description='The ECS instance type.', example='ecs.c6.26xlarge'),
          }
        ](name='AvailableInstanceType')
        }(name='AvailableInstanceTypes', description='The available capacity of the Elastic Compute Service (ECS) instance types in the dedicated host cluster.'),
        availableMemory?: int32(name='AvailableMemory', description='The size of available memory. Unit: GiB.', example='4'),
        availableVcpus?: int32(name='AvailableVcpus', description='The number of available vCPUs.', example='2'),
        localStorageCapacities?: {
          localStorageCapacity?: [ 
          {
            availableDisk?: int32(name='AvailableDisk', description='The available capacity of the local disk. Unit: GiB.', example='20'),
            dataDiskCategory?: string(name='DataDiskCategory', description='The category of the data disk. Valid values:

- cloud: basic disk
- cloud_efficiency: ultra disk
- cloud_ssd: standard SSD
- ephemeral_ssd: local SSD
- cloud_essd: enhanced SSD (ESSD)', example='cloud'),
            totalDisk?: int32(name='TotalDisk', description='The total capacity of the local disk. Unit: GiB.', example='40'),
          }
        ](name='LocalStorageCapacity')
        }(name='LocalStorageCapacities', description='The local storage capacity.'),
        totalMemory?: int32(name='TotalMemory', description='The total memory size. Unit: GiB.', example='8'),
        totalVcpus?: int32(name='TotalVcpus', description='The total number of vCPUs.', example='4'),
      }(name='DedicatedHostClusterCapacity', description='The capacity of the dedicated host cluster.'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp12wlf6am0vz9v2****'),
      dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The name of the dedicated host cluster.', example='myDDHCluster'),
      dedicatedHostIds?: {
        dedicatedHostId?: [ string ](name='DedicatedHostId')
      }(name='DedicatedHostIds', description='The IDs of dedicated hosts in the dedicated host cluster.'),
      description?: string(name='Description', description='The description of the dedicated host cluster.', example='This-is-my-DDHCluster'),
      regionId?: string(name='RegionId', description='The region ID of the dedicated host cluster.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host cluster belongs.', example='rg-bp67acfmxazb4p****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the dedicated host cluster.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the dedicated host cluster.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the dedicated host cluster.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host cluster.', example='cn-hangzhou-f'),
    }
  ](name='DedicatedHostCluster')
  }(name='DedicatedHostClusters', description='Details about the dedicated host clusters.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='214A2187-B06F-4E49-A081-4D053466A8C7'),
  totalCount?: int32(name='TotalCount', description='The total number of dedicated host clusters.', example='2'),
}

model DescribeDedicatedHostClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostClustersResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if `DedicatedHostClusterIds` is set to an empty JSON array (`[]`), it is regarded as a valid filter condition and an empty result is returned.
  *
  * @param request DescribeDedicatedHostClustersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDedicatedHostClustersResponse
 */
async function describeDedicatedHostClustersWithOptions(request: DescribeDedicatedHostClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterIds)) {
    query['DedicatedHostClusterIds'] = request.dedicatedHostClusterIds;
  }
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostClusters',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if `DedicatedHostClusterIds` is set to an empty JSON array (`[]`), it is regarded as a valid filter condition and an empty result is returned.
  *
  * @param request DescribeDedicatedHostClustersRequest
  * @return DescribeDedicatedHostClustersResponse
 */
async function describeDedicatedHostClusters(request: DescribeDedicatedHostClustersRequest): DescribeDedicatedHostClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostClustersWithOptions(request, runtime);
}

model DescribeDedicatedHostTypesRequest {
  dedicatedHostType?: string(name='DedicatedHostType', description='The ID of the request.', example='ddh.sn1ne'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ECS instance family supported by the dedicated host type.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  supportedInstanceTypeFamily?: string(name='SupportedInstanceTypeFamily', description='The information about the dedicated host type.', example='ecs.sn1ne'),
}

model DescribeDedicatedHostTypesResponseBody = {
  dedicatedHostTypes?: {
    dedicatedHostType?: [ 
    {
      cores?: int32(name='Cores', description='The GPU model.', example='2'),
      cpuOverCommitRatioRange?: string(name='CpuOverCommitRatioRange', description='The size of the memory. Unit: GiB.', example='1-5'),
      dedicatedHostType?: string(name='DedicatedHostType', description='The total number of vGPUs.', example='ddh.sn1ne'),
      GPUSpec?: string(name='GPUSpec', description='The supported CPU overcommit ratio range.', example='gpu'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of physical CPUs.', example='0'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The number of local disks on a dedicated host.', example='0'),
      localStorageCategory?: string(name='LocalStorageCategory', description='The total number of vCPUs.', example='local'),
      memorySize?: float(name='MemorySize', description='The capacity of a local disk. Unit: GiB.', example='112.0'),
      physicalGpus?: int32(name='PhysicalGpus', description='Indicates whether the CPU overcommit ratio setting is supported.', example='2'),
      sockets?: int32(name='Sockets', description='The ECS instance family.', example='2'),
      supportCpuOverCommitRatio?: boolean(name='SupportCpuOverCommitRatio', description='The type of the dedicated host. You can submit a ticket to request more dedicated host types.', example='true'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies', description='The ECS instance types supported by the dedicated host.'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList'),
      totalVcpus?: int32(name='TotalVcpus', description='The number of physical GPUs.', example='56'),
      totalVgpus?: int32(name='TotalVgpus', description='The ECS instance families supported by the dedicated host.', example='10'),
    }
  ](name='DedicatedHostType')
  }(name='DedicatedHostTypes', description='The category of the local disks.'),
  requestId?: string(name='RequestId', description='The number of cores in a single physical CPU.', example='5FE5FF06-3A33-4658-8495-6445FC54E327'),
}

model DescribeDedicatedHostTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostTypesResponseBody(name='body'),
}

async function describeDedicatedHostTypesWithOptions(request: DescribeDedicatedHostTypesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.supportedInstanceTypeFamily)) {
    query['SupportedInstanceTypeFamily'] = request.supportedInstanceTypeFamily;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostTypes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostTypes(request: DescribeDedicatedHostTypesRequest): DescribeDedicatedHostTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostTypesWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which the dedicated host belongs.', example='dc-bp12wlf6am0vz9v2****'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The IDs of dedicated hosts. You can specify up to 100 dedicated host IDs in a single request. Separate the IDs with commas (,).', example='["dh-bp165p6xk2tlw61e****", "dh-bp1f9vxmno7emy96****"]'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='MyDDHTestName'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The dedicated host type. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to obtain the most recent list of dedicated host types.', example='ddh.g5'),
  lockReason?: string(name='LockReason', description='The reason why the dedicated host is locked. Valid values:

*   financial
*   security', example='financial'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of entries per page.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host belongs. When this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-aek3b6jzp66****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  socketDetails?: string(name='SocketDetails', description='Specifies whether to display socket information. Valid values:

*   true
*   false', example='true'),
  status?: string(name='Status', description='The service state of the dedicated host. Valid values:

*   Available: The dedicated host is running normally.
*   UnderAssessment: The dedicated host is available but has potential risks that may cause the ECS instances on the dedicated host to fail.
*   PermanentFailure: The dedicated host encounters permanent failures and is unavailable.
*   TempUnavailable: The dedicated host is temporarily unavailable.
*   Redeploying: The dedicated host is being restored.

Default value: Available.', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the dedicated host. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the dedicated host. Valid values of N: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The key of tag N of the dedicated host. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHosts?: {
    dedicatedHost?: [ 
    {
      schedulerOptions?: {
        managedPrivateSpaceId?: string(name='ManagedPrivateSpaceId'),
      }(name='SchedulerOptions'),
      actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy used to migrate the instances deployed on the dedicated host when the dedicated host fails. Valid values:

*   Migrate: The instances are migrated to another physical server. Instances that are not in the Stopped state when the dedicated host fails are restarted.
*   Stop: The instances are stopped. If the dedicated host cannot be restored, the instances are migrated to another physical server and restarted.

If the dedicated host has cloud disks attached, the default value is Migrate. If the dedicated host has local disks attached, the default value is Stop.', example='Migrate'),
      autoPlacement?: string(name='AutoPlacement', description='Indicates whether the dedicated host was added to the resource pool for automatic deployment. Valid values:

*   on: The dedicated host was added to the resource pool for automatic deployment.
*   off: The dedicated host was not added to the resource pool for automatic deployment.

For more information about automatic deployment, see the "[Automatic deployment](~~118938~~)" section in the Functions and features topic.', example='on'),
      autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the dedicated host. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2017-01-01T12:00Z'),
      capacity?: {
        availableLocalStorage?: int32(name='AvailableLocalStorage', description='The amount of available capacity on the local disks. Unit: GiB.', example='65'),
        availableMemory?: float(name='AvailableMemory', description='The amount of available memory. Unit: GiB.', example='25'),
        availableVcpus?: int32(name='AvailableVcpus', description='The number of available vCPUs.', example='5'),
        availableVgpus?: int32(name='AvailableVgpus', description='The number of available vGPUs.', example='2'),
        localStorageCategory?: string(name='LocalStorageCategory', description='The instance family that uses local disks.', example='i2'),
        socketCapacities?: {
          socketCapacity?: [ 
          {
            availableMemory?: float(name='AvailableMemory', description='The remaining capacity of the memory. Unit: GiB.', example='65'),
            availableVcpu?: int32(name='AvailableVcpu', description='The total number of vCPUs.', example='64'),
            socketId?: int32(name='SocketId', description='The socket ID.', example='1'),
            totalMemory?: float(name='TotalMemory', description='The total capacity of the memory. Unit: GiB.', example='128'),
            totalVcpu?: int32(name='TotalVcpu', description='The number of available vCPUs.', example='128'),
          }
        ](name='SocketCapacity')
        }(name='SocketCapacities', description='The socket capacities.'),
        totalLocalStorage?: int32(name='TotalLocalStorage', description='The total capacity of local disks. Unit: GiB.', example='512'),
        totalMemory?: float(name='TotalMemory', description='The total capacity of the memory. Unit: GiB.', example='1024'),
        totalVcpus?: int32(name='TotalVcpus', description='The total number of vCPUs.', example='56'),
        totalVgpus?: int32(name='TotalVgpus', description='The total number of vGPUs.', example='10'),
      }(name='Capacity', description='The performance specifications of the dedicated host.'),
      chargeType?: string(name='ChargeType', description='The billing method of the dedicated host.', example='Prepaid'),
      cores?: int32(name='Cores', description='The number of physical cores per CPU.', example='3'),
      cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio.', example='1'),
      creationTime?: string(name='CreationTime', description='The time when the dedicated host was created. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2018-01-01T12:00Z'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which the dedicated host belongs.', example='dc-bp12wlf6am0vz9v2****'),
      dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
      dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='MyDDHTestName'),
      dedicatedHostOwnerId?: long(name='DedicatedHostOwnerId', description='The ID of the dedicated host owner.', example='100************7'),
      dedicatedHostType?: string(name='DedicatedHostType', description='The type of the dedicated host.', example='ddh.g5'),
      description?: string(name='Description', description='The description of the dedicated host.', example='this-is-my-DDH'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time of the subscription dedicated host. The time follows the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2019-01-01T12:00Z'),
      GPUSpec?: string(name='GPUSpec', description='The GPU model.', example='gpu'),
      hostDetailInfo?: {
        serialNumber?: string(name='SerialNumber', description='This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='null'),
      }(name='HostDetailInfo', description='This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.'),
      instances?: {
        instance?: [ 
        {
          instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-bp14ot0ykf8w13a1****'),
          instanceOwnerId?: long(name='InstanceOwnerId', description='The ID of the ECS instance owner.', example='128************0'),
          instanceType?: string(name='InstanceType', description='The instance type of the ECS instance.', example='ecs.g5.large'),
          socketId?: string(name='SocketId', description='The ID of the socket to which the ECS instance belongs.', example='0,1'),
        }
      ](name='Instance')
      }(name='Instances', description='The ECS instances that were created on the dedicated host.'),
      machineId?: string(name='MachineId', description='The machine code of the dedicated host.', example='12aaa123456ff19dec12345d3026e****'),
      networkAttributes?: {
        slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period of the UDP session that was established between Server Load Balancer (SLB) and the dedicated host. Unit: seconds. Valid value: 60.', example='60'),
        udpTimeout?: int32(name='UdpTimeout', description='The timeout period of the UDP session that is established between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid value: 60.', example='60'),
      }(name='NetworkAttributes', description='The network attributes of the dedicated host.'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the EIP is locked. Valid values:

*   **financial**: The EIP is locked due to overdue payments.
*   **security**: The EIP is locked for security reasons.', example='financial'),
        }
      ](name='OperationLock')
      }(name='OperationLocks', description='The reasons why the resources of the dedicated host were locked.'),
      physicalGpus?: int32(name='PhysicalGpus', description='The number of physical GPUs.', example='10'),
      regionId?: string(name='RegionId', description='The region ID of the dedicated host.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the dedicated host belongs.', example='rg-aek3b6jzp66****'),
      saleCycle?: string(name='SaleCycle', description='The unit of the subscription period. Valid values:

*   Month
*   Year', example='Month'),
      sockets?: int32(name='Sockets', description='The number of physical CPUs.', example='5'),
      status?: string(name='Status', description='The service state of the dedicated host. Valid values:

*   Available: The dedicated host is running normally.
*   UnderAssessment: The dedicated host is available but has potential risks that may cause the ECS instances on the dedicated host to fail.
*   PermanentFailure: The dedicated host encounters permanent failures and is unavailable.', example='Available'),
      supportedCustomInstanceTypeFamilies?: {
        supportedCustomInstanceTypeFamily?: [ string ](name='SupportedCustomInstanceTypeFamily')
      }(name='SupportedCustomInstanceTypeFamilies', description='The custom ECS instance families supported by the dedicated host.'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies', description='The ECS instance families supported by the dedicated host.'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList', description='The ECS instance types supported by the dedicated host.'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the dedicated host.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the dedicated host.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the dedicated host.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the dedicated host.', example='cn-hangzhou-g'),
    }
  ](name='DedicatedHost')
  }(name='DedicatedHosts', description='The queried dedicated hosts.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='5'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='7654525A-9964-4ABB-8BCD-98F8835E809A'),
  totalCount?: int32(name='TotalCount', description='The total number of dedicated hosts.', example='3'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

/**
  * ## Usage notes
  * You can use one of the following methods to query the details of dedicated hosts:
  * *   Specify `DedicatedHostIds` to query the details of dedicated hosts.
  * *   Specify `DedicatedHostClusterId` to query the details of the dedicated hosts in a dedicated host cluster.
  *
  * @param request DescribeDedicatedHostsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDedicatedHostsResponse
 */
async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.socketDetails)) {
    query['SocketDetails'] = request.socketDetails;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHosts',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * You can use one of the following methods to query the details of dedicated hosts:
  * *   Specify `DedicatedHostIds` to query the details of dedicated hosts.
  * *   Specify `DedicatedHostClusterId` to query the details of the dedicated hosts in a dedicated host cluster.
  *
  * @param request DescribeDedicatedHostsRequest
  * @return DescribeDedicatedHostsResponse
 */
async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDemandsRequest {
  demandId?: string(name='DemandId', description='The ID of the filing ticket. If this parameter is specified, other optional request parameters are ignored.', example='ed-bp11n21kq00sl71p****'),
  demandStatus?: [ string ](name='DemandStatus', description='The status of the filing ticket or resource consumption. Valid values:

*   Creating: The filing ticket is being created.
*   Active: The filed resources are being supplied.
*   Expired: The filing ticket expires.
*   Finished: The filed resources are consumed.
*   Refused: The filing request is denied. To view the reason for denial, see the `Comment` parameter in the response.
*   Cancelled: The filing request is canceled.', example='Active'),
  demandType?: string(name='DemandType', description='The source of the filed instance. Default value: System. Valid values:

*   Custom: filed on your own.
*   System: filed by Alibaba Cloud.', example='Custom'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   true: performs a dry run. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are set. If the request fails the dry run, the corresponding error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and sends the request . If the request passes the dry run, a 2XX HTTP status code is returned and the operation is performed.', example='false'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PostPaid'),
  instanceType?: string(name='InstanceType', description='The instance type of the filed instance.', example='ecs.g6.xlarge'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the filed instance.', example='ecs.g6'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number of the page to return. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region for which to query resources. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='> This parameter is unavailable.', example='TestKey'),
      value?: string(name='Value', description='> This parameter is unavailable.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
  zoneId?: string(name='ZoneId', description='The ID of the zone for which to query resources. You can call the [DescribeZones](~~25610~~) operation to query the most recent list of zones.', example='cn-hangzhou-g'),
}

model DescribeDemandsResponseBody = {
  demands?: {
    demand?: [ 
    {
      availableAmount?: int32(name='AvailableAmount', description='The number of instances available for the filed resources.', example='10'),
      comment?: string(name='Comment', description='The feedback on the denied request for filing resources.', example='test-for-comment'),
      deliveringAmount?: int32(name='DeliveringAmount', description='The number of instances to be delivered in the filed resources.', example='20'),
      demandDescription?: string(name='DemandDescription', description='The description of the filing ticket.', example='test-DemandDescription'),
      demandId?: string(name='DemandId', description='The ID of the filing ticket.', example='ed-bp11n21kq00sl71p****'),
      demandName?: string(name='DemandName', description='The name of the filing ticket.', example='k8s-node-demand'),
      demandStatus?: string(name='DemandStatus', description='The status of the filing ticket or resource consumption. Valid values:

*   Creating: The filing ticket is being created.
*   Active: The filed resources are being supplied.
*   Expired: The filing ticket expires.
*   Finished: The filed resources are consumed.
*   Refused: The filing request is denied. For reasons why the request is denied, see the `Comment` parameter in the response.
*   Cancelled: The filing request is canceled. After the filing request is canceled, the delivery status of the resources becomes invalid.', example='Active'),
      demandTime?: string(name='DemandTime', description='The time when the filing ticket was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-02-26T12:00:00Z'),
      endTime?: string(name='EndTime', description='The expected end time for the purchase of the filed resources. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-03-03T15:00:00Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the filed resources. Valid values:

*   Prepaid: subscription
*   Postpaid: pay-as-you-go', example='Prepaid'),
      instanceType?: string(name='InstanceType', description='The instance type of the filed instance.', example='ecs.g6.xlarge'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the filed instance.', example='ecs.g6'),
      period?: int32(name='Period', description='The usage duration of the filed resources.', example='3'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the usage duration of the filed resources. Valid values:

*   Hour
*   Day
*
*   Month', example='Month'),
      startTime?: string(name='StartTime', description='The expected start time for the purchase of the filed resources. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-02-27T12:00:00Z'),
      supplyInfos?: {
        supplyInfo?: [ 
        {
          amount?: int32(name='Amount', description='The number of delivered instances.', example='30'),
          privatePoolId?: string(name='PrivatePoolId', description='The ID of the private pool that corresponds to the demand.', example='crp-bp1fv8sbhelbzjwx****'),
          supplyEndTime?: string(name='SupplyEndTime', description='The end time when the filed resources are delivered and available. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-03-03T15:00:00Z'),
          supplyStartTime?: string(name='SupplyStartTime', description='The start time when the filed resources are delivered and available. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-03-01T14:00:00Z'),
          supplyStatus?: string(name='SupplyStatus', description='The delivery status of the filed resource. Valid values:

*   Delivered: The filed resource is delivered.
*   Delivering: The filed resource is being delivered.', example='Delivering'),
        }
      ](name='SupplyInfo')
      }(name='SupplyInfos', description='Details about the delivery status of the filed resources.'),
      totalAmount?: int32(name='TotalAmount', description='The number of filed instances.', example='50'),
      usedAmount?: int32(name='UsedAmount', description='The number of consumed instances.', example='20'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the filed resource resides.', example='cn-hangzhou-g'),
    }
  ](name='Demand')
  }(name='Demands', description='The filing tickets whose regions meet the filter condition.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The number of queried filing tickets.', example='6'),
}

model DescribeDemandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDemandsResponseBody(name='body'),
}

/**
  * You can call this operation to query the details of resources you filed with Alibaba Cloud, including the types, delivery status, and consumption details of the resources.
  * By default, the filing tickets of I/O optimized VPC-type instances are queried.
  * For information about how to create (CreateDemand), modify (ModifyDemand), and delete (DeleteDemand) filing tickets on ECS resources, contact your account manager.
  *
  * @param request DescribeDemandsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDemandsResponse
 */
async function describeDemandsWithOptions(request: DescribeDemandsRequest, runtime: Util.RuntimeOptions): DescribeDemandsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.demandStatus)) {
    query['DemandStatus'] = request.demandStatus;
  }
  if (!Util.isUnset(request.demandType)) {
    query['DemandType'] = request.demandType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDemands',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the details of resources you filed with Alibaba Cloud, including the types, delivery status, and consumption details of the resources.
  * By default, the filing tickets of I/O optimized VPC-type instances are queried.
  * For information about how to create (CreateDemand), modify (ModifyDemand), and delete (DeleteDemand) filing tickets on ECS resources, contact your account manager.
  *
  * @param request DescribeDemandsRequest
  * @return DescribeDemandsResponse
 */
async function describeDemands(request: DescribeDemandsRequest): DescribeDemandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDemandsWithOptions(request, runtime);
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  strategy?: string(name='Strategy', description='The deployment strategy. Valid values:

*   Availability: high availability strategy.
*   AvailabilityGroup: high availability group strategy.
*   LowLatency: low latency strategy.

Default value: Availability.', example='Availability'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody = {
  instanceTypeFamilies?: string(name='InstanceTypeFamilies', description='The instance families that support deployment sets.', example='ecs.i2g,ecs.i1,ecs.i2ne,ecs.i2gne'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B7DB-A3DC7DE1****'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody(name='body'),
}

/**
  * ## Usage notes
  * For more information about instance families, see [Overview of instance families](~~25378~~).
  *
  * @param request DescribeDeploymentSetSupportedInstanceTypeFamilyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDeploymentSetSupportedInstanceTypeFamilyResponse
 */
async function describeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request: DescribeDeploymentSetSupportedInstanceTypeFamilyRequest, runtime: Util.RuntimeOptions): DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeploymentSetSupportedInstanceTypeFamily',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * For more information about instance families, see [Overview of instance families](~~25378~~).
  *
  * @param request DescribeDeploymentSetSupportedInstanceTypeFamilyRequest
  * @return DescribeDeploymentSetSupportedInstanceTypeFamilyResponse
 */
async function describeDeploymentSetSupportedInstanceTypeFamily(request: DescribeDeploymentSetSupportedInstanceTypeFamilyRequest): DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request, runtime);
}

model DescribeDeploymentSetsRequest {
  deploymentSetIds?: string(name='DeploymentSetIds', description='The IDs of deployment sets. The value can be a JSON array that consists of up to 100 deployment set IDs in the format of `["ds-xxxxxxxxx", "ds-yyyyyyyyy", … "ds-zzzzzzzzz"]`. Separate multiple deployment set IDs with commas (,).', example='["ds-bp67acfmxazb4ph****", "ds-bp67acfmxazb4pi****", … "ds-bp67acfmxazb4pj****"]'),
  deploymentSetName?: string(name='DeploymentSetName', description='The name of the deployment set. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testDeploymentSetName'),
  domain?: string(name='Domain', description='> The parameter is deprecated.', example='null'),
  granularity?: string(name='Granularity', description='> The parameter is deprecated.', example='null'),
  networkType?: string(name='NetworkType', description='> The parameter is deprecated.', example='null'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  strategy?: string(name='Strategy', description='The deployment strategy. Valid values:

*   Availability: high availability strategy.
*   AvailabilityGroup: high availability group strategy.', example='Availability'),
}

model DescribeDeploymentSetsResponseBody = {
  deploymentSets?: {
    deploymentSet?: [ 
    {
      capacities?: {
        capacity?: [ 
        {
          availableAmount?: int32(name='AvailableAmount', description='The number of ECS instances that can be added to the deployment set within the zone.', example='18'),
          usedAmount?: int32(name='UsedAmount', description='The number of ECS instances that belong to the zone in the deployment set.', example='2'),
          zoneId?: string(name='ZoneId', description='The ID of the zone. Only the zone IDs of existing ECS instances in the deployment set are returned.', example='cn-hangzhou-i'),
        }
      ](name='Capacity')
      }(name='Capacities', description='Details of the capacities of the deployment set. This parameter is valid only when the deployment set contains Elastic Compute Service (ECS) instances. The value contains the capacities of the deployment set in different zones.'),
      creationTime?: string(name='CreationTime', description='The time when the deployment set was created.', example='2021-12-07T06:01:46Z'),
      deploymentSetDescription?: string(name='DeploymentSetDescription', description='The description of the deployment set.', example='testDeploymentSetDescription'),
      deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp67acfmxazb4ph****'),
      deploymentSetName?: string(name='DeploymentSetName', description='The name of the deployment set.', example='testDeploymentSetName'),
      deploymentStrategy?: string(name='DeploymentStrategy', description='The deployment strategy. The value of this response parameter is that of the `Strategy` request parameter.', example='Availability'),
      domain?: string(name='Domain', description='The deployment domain.', example='default'),
      granularity?: string(name='Granularity', description='The deployment granularity.', example='host'),
      groupCount?: int32(name='GroupCount', description='The number of deployment set groups in the deployment set.

>  This parameter is valid only when the Strategy request parameter is set to AvailabilityGroup.', example='3'),
      instanceAmount?: int32(name='InstanceAmount', description='The number of instances in the deployment set.', example='3'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds', description='The IDs of the instances in the deployment set.'),
      strategy?: string(name='Strategy', description='The deployment strategy.', example='LooseDispersion'),
    }
  ](name='DeploymentSet')
  }(name='DeploymentSets', description='Details about the deployment sets.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the deployment set.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of deployment sets returned.', example='1'),
}

model DescribeDeploymentSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDeploymentSetsResponseBody(name='body'),
}

async function describeDeploymentSetsWithOptions(request: DescribeDeploymentSetsRequest, runtime: Util.RuntimeOptions): DescribeDeploymentSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentSetIds)) {
    query['DeploymentSetIds'] = request.deploymentSetIds;
  }
  if (!Util.isUnset(request.deploymentSetName)) {
    query['DeploymentSetName'] = request.deploymentSetName;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.strategy)) {
    query['Strategy'] = request.strategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeploymentSets',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeploymentSets(request: DescribeDeploymentSetsRequest): DescribeDeploymentSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeploymentSetsWithOptions(request, runtime);
}

model DescribeDiagnosticMetricSetsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10'),
  metricSetIds?: [ string ](name='MetricSetIds', description='The ID of diagnostic metric set N.'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticMetricSets operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID of the diagnostic metric set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric set.', example='instance'),
  type?: string(name='Type', description='The type of the diagnostic metric set. Valid values:

*   User: user-defined diagnostic metric set
*   Common: common diagnostic metric set

Default value: user.', example='User'),
}

model DescribeDiagnosticMetricSetsResponseBody = {
  metricSets?: [ 
    {
      description?: string(name='Description', description='The description of the diagnostic metric set.', example='connection issue diagnostics'),
      metricIds?: [ string ](name='MetricIds', description='The IDs of the diagnostic metrics.'),
      metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
      metricSetName?: string(name='MetricSetName', description='The name of the diagnostic metric set.', example='connection issue diagnostics'),
      resourceType?: string(name='ResourceType', description='The resource type supported by the diagnostic metric set.', example='instance'),
      type?: string(name='Type', description='The type of the diagnostic metric set. Valid values:

*   User: user-defined diagnostic metric set
*   Common: common diagnostic metric set', example='User'),
    }
  ](name='MetricSets', description='A collection of diagnostic metrics.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticMetricSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticMetricSetsResponseBody(name='body'),
}

async function describeDiagnosticMetricSetsWithOptions(request: DescribeDiagnosticMetricSetsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticMetricSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.metricSetIds)) {
    query['MetricSetIds'] = request.metricSetIds;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticMetricSets',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticMetricSets(request: DescribeDiagnosticMetricSetsRequest): DescribeDiagnosticMetricSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticMetricSetsWithOptions(request, runtime);
}

model DescribeDiagnosticMetricsRequest {
  maxResults?: int32(name='MaxResults', description='The ID of the request.', example='10'),
  metricIds?: [ string ](name='MetricIds', description='The ID of diagnostic metric.'),
  nextToken?: string(name='NextToken', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The IDs of diagnostic metrics.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticMetrics operation. Leave this parameter empty the first time you call this operation.', example='instance'),
}

model DescribeDiagnosticMetricsResponseBody = {
  metrics?: [ 
    {
      description?: string(name='Description', description='CPU diagnostic', example='The resource type supported by the diagnostic metric.'),
      guestMetric?: boolean(name='GuestMetric', description='The operating system type supported by the diagnostic metric. Valid values:

*   Windows
*   Linux
*   All: both Windows and Linux', example='true'),
      metricCategory?: string(name='MetricCategory', description='The description of the diagnostic metric.', example='CPU'),
      metricId?: string(name='MetricId', description='The name of the diagnostic metric.', example='GuestOS.WinFirewall'),
      metricName?: string(name='MetricName', description='CPU diagnostic', example='The category of the diagnostic metric.'),
      resourceType?: string(name='ResourceType', description='Indicates whether the diagnostic metric needs to be assessed by running a Cloud Assistant command in a guest operating system.', example='instance'),
      supportedOperatingSystem?: string(name='SupportedOperatingSystem', example='ALL'),
    }
  ](name='Metrics', description='The ID of the diagnostic metric.'),
  nextToken?: string(name='NextToken', description='The list of diagnostic metrics.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The query token returned in this call.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticMetricsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticMetricsResponseBody(name='body'),
}

async function describeDiagnosticMetricsWithOptions(request: DescribeDiagnosticMetricsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.metricIds)) {
    query['MetricIds'] = request.metricIds;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticMetrics',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticMetrics(request: DescribeDiagnosticMetricsRequest): DescribeDiagnosticMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticMetricsWithOptions(request, runtime);
}

model DescribeDiagnosticReportAttributesRequest {
  regionId?: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reportId?: string(name='ReportId', description='The ID of the diagnostic report.', example='dr-i-uf6i0tv2refv8wz*****'),
}

model DescribeDiagnosticReportAttributesResponseBody = {
  attributes?: string(name='Attributes', description='The extended attributes of the diagnostic report.', example='{
    "OfflineDiagReportStatus":"CONFIRMED"
}'),
  creationTime?: string(name='CreationTime', description='The time when the diagnostic report was created.', example='2022-07-11T12:00:00Z'),
  endTime?: string(name='EndTime', description='The end of the reporting period of the diagnostic report. The value is the EndTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T14:00:00Z'),
  finishedTime?: string(name='FinishedTime', description='The time when the diagnostic report was complete.', example='2022-07-11T14:00:00Z'),
  metricResults?: {
    metricResult?: [ 
    {
      issues?: {
        issue?: [ 
        {
          additional?: string(name='Additional', description='The additional data about the diagnosed issue. The value is a JSON string.', example='{
  "TotalPercent": 95,
  "TopUtilizationProcesses": [
    {
      "Pid": "1223",
      "CommandName": "/usr/bin/mem.py",
      "PhysicalMemoryPercent": 50
    }
  ]
}'),
          issueId?: string(name='IssueId', description='The ID of the diagnosed issue, which is the unique identifier of the issue.', example='GuestOS.CPU.HighUtiliz*****'),
          occurrenceTime?: string(name='OccurrenceTime', description='The time when the diagnosed issue occurred.', example='2022-07-11T14:00:00Z'),
          severity?: string(name='Severity', description='The severity level of the diagnosed issue. Valid values:

*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Info'),
        }
      ](name='Issue')
      }(name='Issues', description='The diagnosed issues.'),
      metricCategory?: string(name='MetricCategory', description='The category of the diagnostic metric.', example='CPU'),
      metricId?: string(name='MetricId', description='The ID of the diagnostic metric.', example='GuestOS.WinFirewall'),
      severity?: string(name='Severity', description='The severity level of the diagnostic metric. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   NotSupport: The version of the guest operating system does support diagnosing the metric.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
      status?: string(name='Status', description='The state of the diagnostic metric. Valid values:

*   InProgress.
*   Finished.
*   Failed.', example='Finished'),
    }
  ](name='MetricResult')
  }(name='MetricResults', description='The results of all diagnostic metrics in the diagnostic metric set.'),
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
  reportId?: string(name='ReportId', description='The ID of the diagnostic report, which is the unique identifier of the report.', example='dr-uf6i0tv2refv8wz*****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceId?: string(name='ResourceId', description='The resource ID.', example='i-uf6i0tv2refv8wz*****'),
  resourceType?: string(name='ResourceType', description='The type of the resource. ResourceType can only be set to instance, which indicates that only instances are supported.', example='instance'),
  severity?: string(name='Severity', description='The severity level of the diagnostic report. The value of this parameter is determined by the highest severity level of all diagnostic metrics. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate potential exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
  startTime?: string(name='StartTime', description='The beginning of the reporting period of the diagnostic report. The value is the StartTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T12:00:00Z'),
  status?: string(name='Status', description='The state of the diagnostic report. Valid values:

*   InProgress: The diagnostic is in progress.
*   Finished: The diagnostic is complete.
*   Failed: The diagnostic failed.', example='Finished'),
}

model DescribeDiagnosticReportAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticReportAttributesResponseBody(name='body'),
}

async function describeDiagnosticReportAttributesWithOptions(request: DescribeDiagnosticReportAttributesRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reportId)) {
    query['ReportId'] = request.reportId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticReportAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticReportAttributes(request: DescribeDiagnosticReportAttributesRequest): DescribeDiagnosticReportAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportAttributesWithOptions(request, runtime);
}

model DescribeDiagnosticReportsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is left empty, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeDiagnosticReports operation. Leave this parameter empty the first time you call this operation.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  regionId?: string(name='RegionId', description='The region ID of the diagnostic report. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reportIds?: [ string ](name='ReportIds', description='The IDs of diagnostic reports. You can specify up to 100 report IDs.'),
  resourceIds?: [ string ](name='ResourceIds', description='The IDs of resources. You can specify up to 100 resource IDs.'),
  severity?: string(name='Severity', description='The severity level of the diagnostic report. Valid values:

* Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
* Normal: No exceptions are detected.
* Info: Diagnostic information is recorded and may be related to exceptions.
* Warn: Diagnostic information is recorded and may indicate exceptions.
* Critical: Critical exceptions are detected.', example='Normal'),
  status?: string(name='Status', description='The state of the diagnostic report. Valid values:

*   InProgress: The diagnostic is in progress.
*   Failed: The diagnostic failed.
*   Finished: The diagnostic is complete.', example='Finished'),
}

model DescribeDiagnosticReportsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  reports?: {
    report?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the diagnostic report was created.', example='2022-07-11T12:00:00Z'),
      endTime?: string(name='EndTime', description='The end of the reporting period of the diagnostic report. The value is the EndTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T14:00:00Z'),
      finishedTime?: string(name='FinishedTime', description='The time when the diagnostic was complete.', example='2022-07-11T14:00:00Z'),
      issues?: {
        issue?: [ 
        {
          issueId?: string(name='IssueId', description='The unique ID of the diagnosed issue.', example='GuestOS.CPU.HighUtiliz*****'),
          metricCategory?: string(name='MetricCategory', description='The category of the diagnostic metric.', example='ECSService.GuestOS'),
          metricId?: string(name='MetricId', description='The ID of the diagnostic metric.', example='GuestOS.WinFirewall'),
          severity?: string(name='Severity', description='The severity level of the diagnostic metric. Valid values:

*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate exceptions.
*   Critical: Critical exceptions were detected.', example='Info'),
        }
      ](name='Issue')
      }(name='Issues', description='The list of issues.'),
      metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-bp17p0qwtr72zmu*****'),
      reportId?: string(name='ReportId', description='The ID of the diagnostic report.', example='dr-uf6i0tv2refv8wz*****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-uf6i0tv2refv8wz*****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
      severity?: string(name='Severity', description='The severity level of the diagnostic report. Valid values:

*   Unknown: The diagnostic has not started, failed to run, or exited unexpectedly without a diagnosis.
*   Normal: No exceptions were detected.
*   Info: Diagnostic information was recorded and may be related to exceptions.
*   Warn: Diagnostic information was recorded and may indicate exceptions.
*   Critical: Critical exceptions were detected.', example='Normal'),
      startTime?: string(name='StartTime', description='The beginning of the reporting period of the diagnostic report. The value is the StartTime value that was passed in when you called the [CreateDiagnosticReport](~~442490~~) operation to create the diagnostic report.', example='2022-07-11T12:00:00Z'),
      status?: string(name='Status', description='The state of the diagnostic report.', example='Finished'),
    }
  ](name='Report')
  }(name='Reports', description='The list of reports.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeDiagnosticReportsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiagnosticReportsResponseBody(name='body'),
}

async function describeDiagnosticReportsWithOptions(request: DescribeDiagnosticReportsRequest, runtime: Util.RuntimeOptions): DescribeDiagnosticReportsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reportIds)) {
    query['ReportIds'] = request.reportIds;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.severity)) {
    query['Severity'] = request.severity;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiagnosticReports',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiagnosticReports(request: DescribeDiagnosticReportsRequest): DescribeDiagnosticReportsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiagnosticReportsWithOptions(request, runtime);
}

model DescribeDiskMonitorDataRequest {
  diskId?: string(name='DiskId', description='The disk ID.', example='d-bp1bq5g3dxxo1x4o****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2014-07-23T12:09:00Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The interval at which you want to query the monitoring data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2014-07-23T12:07:00Z'),
}

model DescribeDiskMonitorDataResponseBody = {
  monitorData?: {
    diskMonitorData?: [ 
    {
      BPSRead?: int32(name='BPSRead', description='The read bandwidth of the system disk. Unit: byte/s.', example='0'),
      BPSTotal?: int32(name='BPSTotal', description='The total read and write bandwidth of the system disk. Unit: byte/s.', example='204'),
      BPSWrite?: int32(name='BPSWrite', description='The write bandwidth of the system disk. Unit: byte/s.', example='204'),
      diskId?: string(name='DiskId', description='The disk ID.', example='d-bp1bq5g3dxxo1x4o****'),
      IOPSRead?: int32(name='IOPSRead', description='The number of read I/O operations per second on the system disk.', example='0'),
      IOPSTotal?: int32(name='IOPSTotal', description='The total number of read and write I/O operations per second on the system disk.', example='0'),
      IOPSWrite?: int32(name='IOPSWrite', description='The number of write I/O operations per second on the system disk.', example='0'),
      latencyRead?: int32(name='LatencyRead', description='The read latency of the disk. Unit: microseconds.', example='0'),
      latencyWrite?: int32(name='LatencyWrite', description='The write latency of the disk. Unit: microseconds.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp to query the monitoring data. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2014-07-23T12:07:00Z'),
    }
  ](name='DiskMonitorData')
  }(name='MonitorData', description='The details about the monitoring data of the disk.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned monitoring data entries.', example='3'),
}

model DescribeDiskMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDiskMonitorDataResponseBody(name='body'),
}

/**
  * The monitoring data includes read IOPS, write IOPS, read bandwidth (byte/s), write bandwidth (byte/s), read latency (microseconds), and write latency (microseconds) of the disk.
  * When you call this operation, take note of the following items:
  * *   Only the monitoring data of disks that are in the Running (`In_use`) state can be queried. For more information, see [Disk states](~~25689~~).
  *     **
  *     **Note**Some information may be missing from the monitoring data of a disk because the disk is not in the In Use (`In_Use`) state and the system cannot obtain the relevant information.
  * *   A maximum of 400 monitoring data entries can be returned at a time. An error is returned if the value calculated based on the following formula is greater than 400: `(EndTime - StartTime)/Period`.
  * *   You can query the monitoring data in a maximum of the last 30 days. If the value of `StartTime` is greater than 30 days before the current time, an error is returned.
  *
  * @param request DescribeDiskMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDiskMonitorDataResponse
 */
async function describeDiskMonitorDataWithOptions(request: DescribeDiskMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The monitoring data includes read IOPS, write IOPS, read bandwidth (byte/s), write bandwidth (byte/s), read latency (microseconds), and write latency (microseconds) of the disk.
  * When you call this operation, take note of the following items:
  * *   Only the monitoring data of disks that are in the Running (`In_use`) state can be queried. For more information, see [Disk states](~~25689~~).
  *     **
  *     **Note**Some information may be missing from the monitoring data of a disk because the disk is not in the In Use (`In_Use`) state and the system cannot obtain the relevant information.
  * *   A maximum of 400 monitoring data entries can be returned at a time. An error is returned if the value calculated based on the following formula is greater than 400: `(EndTime - StartTime)/Period`.
  * *   You can query the monitoring data in a maximum of the last 30 days. If the value of `StartTime` is greater than 30 days before the current time, an error is returned.
  *
  * @param request DescribeDiskMonitorDataRequest
  * @return DescribeDiskMonitorDataResponse
 */
async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataWithOptions(request, runtime);
}

model DescribeDisksRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 used to query resources. Set the value to `CreationStartTime`. You can specify a time by setting both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the specified time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter 1 used to query resources. Set the value to a time. If you specify this parameter, you must also specify the `Filter.1.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='The attribute value. Set the value to IOPS, which indicates the maximum IOPS of the disk.', example='IOPS'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy that is applied to the cloud disk.', example='sp-m5e2w2jutw8bv31****'),
  category?: string(name='Category', description='The category of the cloud disk or local disk. Valid values:

*   all: all disk categories
*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD

Default value: all.', example='all'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Specifies whether to delete the automatic snapshots of the cloud disk after the disk is released.

*   true
*   false

Default value: false', example='false'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the cloud disk when its associated instance is released. Valid values:

*   true: The cloud disk is released when its associated instance is released.
*   false: The cloud disk is not released but is retained as a pay-as-you-go data disk after its associated instance is released.

Default value: false', example='false'),
  diskChargeType?: string(name='DiskChargeType', description='The disk billing method. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid'),
  diskIds?: string(name='DiskIds', description='The of disk IDs. The value is a JSON array that consists of up to 100 disk IDs. Separate the disk IDs with commas (,).', example='["d-bp67acfmxazb4p****", "d-bp67acfmxazb4g****", … "d-bp67acfmxazb4d****"]'),
  diskName?: string(name='DiskName', description='The cloud disk or local disk name.', example='testDiskName'),
  diskType?: string(name='DiskType', description='The disk type. Valid values:

*   all: system disk and data disk
*   system: system disk
*   data: data disk

Default value: all.', example='all'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run without performing the actual request. Valid values:

*   true: performs only a dry run. The systems checks whether your AccessKey pair is valid, whether RAM users are granted permissions, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false', example='false'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Specifies whether to enable the automatic snapshot policy feature for the cloud disk.

*   true
*   false

> By default, the automatic snapshot policy feature is enabled for cloud disks that are already created. Additionally, only the automatic snapshot policy needs to be applied to a cloud disk before you can use the automatic snapshot policy.', example='true'),
  enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy', description='Specifies whether an automatic snapshot policy is applied to the cloud disk.

*   true: An automatic snapshot policy is applied to the cloud disk.
*   false: No automatic snapshot policy is applied to the cloud disk.

Default value: false', example='false'),
  enableShared?: boolean(name='EnableShared', description='Specifies whether the disk is a Shared Block Storage device.', example='false'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to query only encrypted cloud disks.

*   true: queries only encrypted cloud disks.
*   false: does not query encrypted cloud disks.

Default value: false', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the cloud disk or local disk is attached.', example='i-bp67acfmxazb4q****'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
  lockReason?: string(name='LockReason', description='The reason why the disk is locked. Valid values:

*   financial: The disk is locked due to overdue payments.
*   security: The disk is locked due to security reasons.
*   recycling: The preemptible instance is locked and pending release.
*   dedicatedhostfinancial: The ECS instance is locked due to overdue payments of the dedicated host.', example='recycling'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default values:

*   If this parameter is not specified or is set to a value smaller than 10, the default value is 10.
*   If this parameter is set to a value greater than 500, the default value is 500.', example='50'),
  multiAttach?: string(name='MultiAttach', description='Specifies whether the multi-attach feature is enabled for the disk. Valid values:

*   Disabled: The multi-attach feature is not enabled for the disk.
*   Enabled: The multi-attach feature is enabled for the disk.
*   LegacyShared: Shared Block Storage devices are queried.

The multi-attach feature is available to select users. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/console.htm#/ticket/list).', example='Disabled'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value that was returned in the last call to this operation.

For more information about how to check the responses returned by this operation, see the preceding "Description" section.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.

Maximum value: 100.

Default value: 10.', example='10'),
  portable?: boolean(name='Portable', description='Specifies whether the disk is removable. Valid values:

*   true: The disk is removable. A removable disk can independently exist and can be attached to or detached from an instance within the same zone.
*   false: The disk is not removable. A disk that is not removable cannot independently exist nor can it be attached to or detached from an instance within the same zone.

The `Portable` attribute of the following disks is `false`, and these disks share the same lifecycle with their associated instances:

*   Local disks
*   Local SSDs
*   Subscription data disks', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the disk belongs. If you specify this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be returned.

> Resources in the default resource group are displayed in the response regardless of whether you specify this parameter.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot from which you create the cloud disk.', example='s-bp67acfmxazb4p****'),
  status?: string(name='Status', description='The state of the cloud disk. For more information, see [Disk states](~~25689~~). Valid values:

*   In_use
*   Available
*   Attaching
*   Detaching
*   Creating
*   ReIniting
*   All

Default value: All.', example='All'),
  tag?: [ 
    {
      key?: string(name='Key', description='The disk tag key. Valid values of N: 1 to 20.

Up to 1,000 resources that match the specified tags can be returned in the response. To query more than 1,000 resources that match the specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The disk tag value. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the disk.'),
  zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-g'),
}

model DescribeDisksResponseBody = {
  disks?: {
    disk?: [ 
    {
      attachedTime?: string(name='AttachedTime', description='The time when the cloud disk was last attached. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2021-06-07T06:08:56Z'),
      attachments?: {
        attachment?: [ 
        {
          attachedTime?: string(name='AttachedTime', description='The time when the disk was attached, which is displayed in UTC.', example='2021-06-07T06:08:56Z'),
          device?: string(name='Device', description='The device name.', example='/dev/xvda'),
          instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk was attached.', example='i-bp67acfmxazb4q****'),
        }
      ](name='Attachment')
      }(name='Attachments', description='The attachment information of the cloud disk. The value is an array that consists of the `Attachment` values. However, this value is not returned when you query Shared Block Storage devices.'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy that is applied to the cloud disk.', example='sp-bp67acfmxazb4p****'),
      bdfId?: string(name='BdfId', description='This parameter is currently only available to select users and unavailable for general users.', example='null'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='This parameter is unavailable for public use.', example='false'),
      category?: string(name='Category', description='The disk category. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_ssd'),
      creationTime?: string(name='CreationTime', description='The time when the disk was created.', example='2021-06-07T06:08:54Z'),
      deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Indicates whether the automatic snapshots of the cloud disk are deleted after the disk is released. Valid values:

*   true
*   false

Snapshots that are created by calling the [CreateSnapshot](~~25524~~) operation or by using the Elastic Compute Service (ECS) console are retained and not affected by this parameter.', example='false'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Indicates whether the cloud disk is released when its associated instance is released. Valid values:

*   true: The cloud disk is released when its associated instance is released.
*   false: The cloud disk is retained when its associated instance is released.', example='true'),
      description?: string(name='Description', description='The disk description.', example='testDescription'),
      detachedTime?: string(name='DetachedTime', description='The time when the cloud disk was last detached.', example='2021-06-07T21:01:22Z'),
      device?: string(name='Device', description='The device name of the disk on its associated instance. Example: /dev/xvdb. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the cloud disk based on the `Attachment` values.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='/dev/xvdb'),
      diskChargeType?: string(name='DiskChargeType', description='The disk billing method. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PrePaid'),
      diskId?: string(name='DiskId', description='The disk ID.', example='d-bp18um4r4f2fve24****'),
      diskName?: string(name='DiskName', description='The disk name.', example='testDiskName'),
      enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Indicates whether the automatic snapshot policy feature is enabled for the cloud disk.', example='false'),
      enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy', description='Indicates whether an automatic snapshot policy is configured for the cloud disk.', example='false'),
      encrypted?: boolean(name='Encrypted', description='Indicates whether the cloud disk is encrypted.', example='false'),
      expiredTime?: string(name='ExpiredTime', description='The time when the subscription cloud disk expires.', example='2021-07-07T16:00Z'),
      IOPS?: int32(name='IOPS', description='The maximum number of IOPS.', example='4000'),
      IOPSRead?: int32(name='IOPSRead', description='The maximum number of read operations per second.', example='2000'),
      IOPSWrite?: int32(name='IOPSWrite', description='The maximum number of write operations per second.', example='2000'),
      imageId?: string(name='ImageId', description='The ID of the image that was used to create the instance. This parameter is empty unless the cloud disk is created from an image. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='m-bp13aqm171qynt3u***'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk was attached. Take note of the following items:

*   This parameter has a value only when the `Status` value is `In_use`.
*   This parameter is empty for cloud disks that have the multi-attach feature enabled. You can query the attachment information of the cloud disk based on the `Attachment` values.', example='i-bp67acfmxazb4q****'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key that is used by the cloud disk.', example='0e478b7a-4262-4802-b8cb-00d3fb408***'),
      mountInstanceNum?: int32(name='MountInstanceNum', description='The number of instances to which the Shared Block Storage device is attached.', example='1'),
      mountInstances?: {
        mountInstance?: [ 
        {
          attachedTime?: string(name='AttachedTime', description='The time when the cloud disk was attached. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format and is displayed in UTC.', example='2017-12-05T2340:00Z'),
          device?: string(name='Device', description='The mount point of the disk.', example='/dev/xvda'),
          instanceId?: string(name='InstanceId', description='The ID of the instance to which the disk was attached.', example='i-bp1j4i2jdf3owlhe****'),
        }
      ](name='MountInstance')
      }(name='MountInstances', description='The attachment information of the Shared Block Storage device.'),
      multiAttach?: string(name='MultiAttach', description='Indicates whether the multi-attach feature is enabled for the cloud disk.', example='Disabled'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason', description='The security reason why the disk is locked.', example='security'),
        }
      ](name='OperationLock')
      }(name='OperationLocks', description='The reasons why the disk is locked.'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the enhanced SSD (ESSD). Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: An ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: An ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: An ESSD delivers up to 1,000,000 random read/write IOPS.', example='PL0'),
      portable?: boolean(name='Portable', description='Indicates whether the disk is removable.', example='false'),
      productCode?: string(name='ProductCode', description='The product code of the disk in Alibaba Cloud Marketplace.', example='jxsc000204'),
      provisionedIops?: long(name='ProvisionedIops', description='This parameter is unavailable for public use.', example='40000'),
      regionId?: string(name='RegionId', description='The region ID of the disk.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the disk belongs.', example='rg-bp67acfmxazb4p****'),
      serialNumber?: string(name='SerialNumber', description='The disk serial number.', example='bp18um4r4f2fve2****'),
      size?: int32(name='Size', description='The size of the disk. Unit: GiB.', example='60'),
      sourceSnapshotId?: string(name='SourceSnapshotId', description='The ID of the snapshot that was used to create the cloud disk.

This parameter is empty unless the cloud disk was created from a snapshot. The value of this parameter remains unchanged throughout the lifecycle of the cloud disk.', example='s-bp67acfmxazb4p****'),
      status?: string(name='Status', description='The state of the cloud disk. Valid values:

*   In_use
*   Available
*   Attaching
*   Detaching
*   Creating
*   ReIniting', example='In_use'),
      storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster to which the cloud disk belongs. If your cloud disk belongs to the public block storage cluster, an empty value is returned.', example='dbsc-j5e1sf2vaf5he8m2****'),
      storageSetId?: string(name='StorageSetId', description='The storage set ID.', example='ss-i-bp1j4i2jdf3owlhe****'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set.', example='11'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the disk.'),
      throughput?: int32(name='Throughput', description='The amount of data transferred per second. Unit: MB/s.', example='100'),
      type?: string(name='Type', description='The disk type. Valid values:

*   system: system disk
*   data: data disk', example='system'),
      zoneId?: string(name='ZoneId', description='The ID of the zone to which the cloud disk or local disk belongs.', example='cn-hangzhou-i'),
    }
  ](name='Disk')
  }(name='Disks', description='The details of the cloud disks or local disks.'),
  nextToken?: string(name='NextToken', description='The returned pagination token which can be used in the next request to retrieve a new page of results.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The returned page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='15'),
}

model DescribeDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisksResponseBody(name='body'),
}

/**
  * *   You can specify multiple request parameters such as `RegionId`, `ZoneId`, `DiskIds`, and `InstanceId` as filters. Specified parameters are evaluated by using the "AND" operator. If you specify more than one filter, the records that match all filters are returned.
  * *   The value of the `DiskIds` parameter is a JSON array. If it is not specified, it is not used as a filter, and if `DiskIds` is set to an empty JSON array, it is regarded as a valid filter, and an empty result is returned.
  * *   You can use one of the following methods to check the responses:
  *     *   Method 1: Use `NextToken` to configure the query token. Set the value to the `NextToken` value that was returned in the last call made to the DescribeDisks operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *     *   Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the page number to return.
  *     You can use only one of the preceding methods. If you require a large number of entries to be returned, we recommend that you use method 1. If `NextToken` is specified, `PageSize` and `PageNumber` do not take effect and `TotalCount` in the response is invalid.
  * *   A disk that has the multi-attach feature enabled can be attached to multiple instances. You can query the attachment information of the disk based on the `Attachment` values in the response.
  * When you call an API operation by using Alibaba Cloud CLI, you must specify the request parameter values of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeDisksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDisksResponse
 */
async function describeDisksWithOptions(request: DescribeDisksRequest, runtime: Util.RuntimeOptions): DescribeDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionalAttributes)) {
    query['AdditionalAttributes'] = request.additionalAttributes;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['AutoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.deleteAutoSnapshot)) {
    query['DeleteAutoSnapshot'] = request.deleteAutoSnapshot;
  }
  if (!Util.isUnset(request.deleteWithInstance)) {
    query['DeleteWithInstance'] = request.deleteWithInstance;
  }
  if (!Util.isUnset(request.diskChargeType)) {
    query['DiskChargeType'] = request.diskChargeType;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.enableAutoSnapshot)) {
    query['EnableAutoSnapshot'] = request.enableAutoSnapshot;
  }
  if (!Util.isUnset(request.enableAutomatedSnapshotPolicy)) {
    query['EnableAutomatedSnapshotPolicy'] = request.enableAutomatedSnapshotPolicy;
  }
  if (!Util.isUnset(request.enableShared)) {
    query['EnableShared'] = request.enableShared;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.multiAttach)) {
    query['MultiAttach'] = request.multiAttach;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.portable)) {
    query['Portable'] = request.portable;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisks',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can specify multiple request parameters such as `RegionId`, `ZoneId`, `DiskIds`, and `InstanceId` as filters. Specified parameters are evaluated by using the "AND" operator. If you specify more than one filter, the records that match all filters are returned.
  * *   The value of the `DiskIds` parameter is a JSON array. If it is not specified, it is not used as a filter, and if `DiskIds` is set to an empty JSON array, it is regarded as a valid filter, and an empty result is returned.
  * *   You can use one of the following methods to check the responses:
  *     *   Method 1: Use `NextToken` to configure the query token. Set the value to the `NextToken` value that was returned in the last call made to the DescribeDisks operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *     *   Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the page number to return.
  *     You can use only one of the preceding methods. If you require a large number of entries to be returned, we recommend that you use method 1. If `NextToken` is specified, `PageSize` and `PageNumber` do not take effect and `TotalCount` in the response is invalid.
  * *   A disk that has the multi-attach feature enabled can be attached to multiple instances. You can query the attachment information of the disk based on the `Attachment` values in the response.
  * When you call an API operation by using Alibaba Cloud CLI, you must specify the request parameter values of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeDisksRequest
  * @return DescribeDisksResponse
 */
async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksWithOptions(request, runtime);
}

model DescribeDisksFullStatusRequest {
  eventTime?: {
    end?: string(name='End', description='The end of the time range to query occurred events.

Specify the time in the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2018-05-08T02:48:52Z'),
    start?: string(name='Start', description='The beginning of the time range to query occurred events.

Specify the time in the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.', example='2018-05-06T02:43:10Z'),
  }(name='EventTime'),
  diskId?: [ string ](name='DiskId', description='The ID of EBS device N. Valid values of N: 1 to 100.', example='d-bp67acfmxazb4p****'),
  eventId?: [ string ](name='EventId', description='The ID of event N. Valid values of N: 1 to 100.', example='e-bp67acfmxazb4p****'),
  eventType?: string(name='EventType', description='The event type of the EBS device. Valid values:

*   Degraded: The performance of the EBS device is degraded.
*   SeverelyDegraded: The performance of the EBS device is severely degraded.
*   Stalled: The performance of the EBS device is severely affected.
*   ErrorDetected: The local disk is damaged.', example='Stalled'),
  healthStatus?: string(name='HealthStatus', description='The health status of the EBS device. Valid values:

*   Impaired: The EBS device is damaged.
*   Warning: The performance of the EBS device is degraded.
*   Initializing: The EBS device is being initialized.
*   InsufficientData: The status cannot be determined due to insufficient data.
*   NotApplicable: The EBS device cannot be used.', example='Warning'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1. The value must be a positive integer.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the EBS device. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the EBS device belongs. If you configure this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.', example='rg-aek2kkmhmhs****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The lifecycle status of the EBS device. For more information, see [Disk status](~~25689~~). Valid values:

*   In_use: The EBS device is in use.
*   Available: The EBS device can be attached.
*   Attaching: The EBS device is being attached.
*   Detaching: The EBS device is being detached.
*   Creating: The EBS device is being created.
*   ReIniting: The EBS device is being initialized.', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the EBS device. A key-value pair consists of a key specified by the Tag.N.Key parameter and a value specified by the `Tag.N.Value` parameter. The two parameters are associated with each other. Valid values of N: 1 to 20.

Up to 1,000 resources with the specified tags can be returned in the response.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the EBS device. A key-value pair consists of a key specified by the `Tag.N.Key` parameter and a value specified by the Tag.N.Value parameter. The two parameters are associated with each other. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the EBS device.'),
}

model DescribeDisksFullStatusResponseBody = {
  diskFullStatusSet?: {
    diskFullStatusType?: [ 
    {
      device?: string(name='Device', description='The name of the EBS device that is attached to an instance. Example: /dev/xvdb.

This parameter has a value only when the value of `Status` is `In_use`.

> This parameter will be deprecated in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='null'),
      diskEventSet?: {
        diskEventType?: [ 
        {
          eventEndTime?: string(name='EventEndTime', description='The time when the event ended.', example='2018-05-06T02:48:52Z'),
          eventId?: string(name='EventId', description='The ID of the event.', example='e-bp67acfmxazb4p****'),
          eventTime?: string(name='EventTime', description='The time when the event occurred.', example='2018-05-08T02:43:10Z'),
          eventType?: {
            code?: int32(name='Code', description='The code of the event type.', example='7'),
            name?: string(name='Name', description='The name of the event type. Valid values:

*   Degraded: The performance of the EBS device is degraded.
*   SeverelyDegraded: The performance of the EBS device is severely degraded.
*   Stalled: The performance of the EBS device is severely affected.
*   ErrorDetected: The local disk is damaged.', example='Stalled'),
          }(name='EventType', description='The type of the event.'),
          impactLevel?: string(name='ImpactLevel', description='The impact level of the event.', example='100'),
        }
      ](name='DiskEventType')
      }(name='DiskEventSet', description='The events about the EBS device.'),
      diskId?: string(name='DiskId', description='The EBS device ID.', example='d-bp67acfmxazb4p****'),
      healthStatus?: {
        code?: int32(name='Code', description='The code of the health status of the EBS device.', example='128'),
        name?: string(name='Name', description='The name of the health status of the EBS device.', example='Impaired'),
      }(name='HealthStatus', description='The health status of the EBS device.'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
      status?: {
        code?: int32(name='Code', description='The code of the lifecycle status of the EBS device.', example='129'),
        name?: string(name='Name', description='The name of the lifecycle status of the EBS device.', example='Available'),
      }(name='Status', description='The lifecycle status of the EBS device.'),
    }
  ](name='DiskFullStatusType')
  }(name='DiskFullStatusSet', description='The collection of full status information of the EBS devices.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of EBS devices for which full status information is returned.', example='2'),
}

model DescribeDisksFullStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDisksFullStatusResponseBody(name='body'),
}

/**
  * *   The full status information about an EBS device includes the lifecycle status specified by the `Status` parameter, health status specified by the `HealthStatus` parameter, and event type specified by the `EventType` parameter of the EBS device. You can filter the results based on these parameters.
  * *   The release time, scheduled execution time, and actual execution time of each EBS device event are identical. If you specify a period of time by using the `EventTime.Start` and `EventTime.End` parameters, all events that occurred within this period are queried. You can query events that occurred within the last seven days.
  *
  * @param request DescribeDisksFullStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeDisksFullStatusResponse
 */
async function describeDisksFullStatusWithOptions(request: DescribeDisksFullStatusRequest, runtime: Util.RuntimeOptions): DescribeDisksFullStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.healthStatus)) {
    query['HealthStatus'] = request.healthStatus;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.eventTime)) {
    query['EventTime'] = request.eventTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDisksFullStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The full status information about an EBS device includes the lifecycle status specified by the `Status` parameter, health status specified by the `HealthStatus` parameter, and event type specified by the `EventType` parameter of the EBS device. You can filter the results based on these parameters.
  * *   The release time, scheduled execution time, and actual execution time of each EBS device event are identical. If you specify a period of time by using the `EventTime.Start` and `EventTime.End` parameters, all events that occurred within this period are queried. You can query events that occurred within the last seven days.
  *
  * @param request DescribeDisksFullStatusRequest
  * @return DescribeDisksFullStatusResponse
 */
async function describeDisksFullStatus(request: DescribeDisksFullStatusRequest): DescribeDisksFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksFullStatusWithOptions(request, runtime);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  allocationId?: string(name='AllocationId'),
  associatedInstanceId?: string(name='AssociatedInstanceId'),
  associatedInstanceType?: string(name='AssociatedInstanceType'),
  chargeType?: string(name='ChargeType'),
  eipAddress?: string(name='EipAddress'),
  ISP?: string(name='ISP'),
  lockReason?: string(name='LockReason'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      allocationId?: string(name='AllocationId'),
      allocationTime?: string(name='AllocationTime'),
      bandwidth?: string(name='Bandwidth'),
      chargeType?: string(name='ChargeType'),
      eipBandwidth?: string(name='EipBandwidth'),
      expiredTime?: string(name='ExpiredTime'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      internetChargeType?: string(name='InternetChargeType'),
      ipAddress?: string(name='IpAddress'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeEipAddressesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEipAddressesResponse
 */
// Deprecated
async function describeEipAddressesWithOptions(request: DescribeEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEipAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.associatedInstanceId)) {
    query['AssociatedInstanceId'] = request.associatedInstanceId;
  }
  if (!Util.isUnset(request.associatedInstanceType)) {
    query['AssociatedInstanceType'] = request.associatedInstanceType;
  }
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.eipAddress)) {
    query['EipAddress'] = request.eipAddress;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipAddresses',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeEipAddressesRequest
  * @return DescribeEipAddressesResponse
 */
// Deprecated
async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipAddressesWithOptions(request, runtime);
}

model DescribeEipMonitorDataRequest {
  allocationId?: string(name='AllocationId'),
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth'),
      eipFlow?: int32(name='EipFlow'),
      eipPackets?: int32(name='EipPackets'),
      eipRX?: int32(name='EipRX'),
      eipTX?: int32(name='EipTX'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEipMonitorDataResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeEipMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEipMonitorDataResponse
 */
// Deprecated
async function describeEipMonitorDataWithOptions(request: DescribeEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEipMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEipMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeEipMonitorDataRequest
  * @return DescribeEipMonitorDataResponse
 */
// Deprecated
async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipMonitorDataWithOptions(request, runtime);
}

model DescribeElasticityAssuranceInstancesRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the elasticity assurance.', example='eap-bp67acfmxazb4****'),
  }(name='PrivatePoolOptions'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the query. Set the value to the NextToken value obtained from the response to the preceding request.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeElasticityAssuranceInstancesResponseBody = {
  elasticityAssuranceItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID', example='i-bp67acfmxazb4****'),
    }
  ](name='InstanceIdSet')
  }(name='ElasticityAssuranceItem', description='Details about the instances that match and use the elasticity assurance.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token used to start the next query.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeElasticityAssuranceInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeElasticityAssuranceInstancesResponseBody(name='body'),
}

/**
  * When an elasticity assurance expires, data about the association between the instances and the private pool generated by the elasticity assurance becomes invalid. When you call this operation to query the expired elasticity assurance, no value is returned.
  *
  * @param request DescribeElasticityAssuranceInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeElasticityAssuranceInstancesResponse
 */
async function describeElasticityAssuranceInstancesWithOptions(request: DescribeElasticityAssuranceInstancesRequest, runtime: Util.RuntimeOptions): DescribeElasticityAssuranceInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeElasticityAssuranceInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When an elasticity assurance expires, data about the association between the instances and the private pool generated by the elasticity assurance becomes invalid. When you call this operation to query the expired elasticity assurance, no value is returned.
  *
  * @param request DescribeElasticityAssuranceInstancesRequest
  * @return DescribeElasticityAssuranceInstancesResponse
 */
async function describeElasticityAssuranceInstances(request: DescribeElasticityAssuranceInstancesRequest): DescribeElasticityAssuranceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticityAssuranceInstancesWithOptions(request, runtime);
}

model DescribeElasticityAssurancesRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids', description='The IDs of the elasticity assurances. The value can be a JSON array that consists of up to 100 elasticity assurance IDs. Separate the IDs with commas (,).', example='["eap-bp67acfmxazb4****", "eap-bp67acfmxazb5****"]'),
  }(name='PrivatePoolOptions'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Set the value to PostPaid. Only pay-as-you-go instances can be created by using elasticity assurances.

Default value: PostPaid.', example='PostPaid'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='> This parameter is deprecated.', example='null'),
  regionId?: string(name='RegionId', description='The region ID of the elasticity assurances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If you configure this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of whether you configure this parameter.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The status of the elasticity assurances. Valid values:

*   All
*   Preparing
*   Prepared
*   Active
*   Released

Default value: Active.', example='Active'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20.

If you specify a tag to query resources, up to 1,000 resources with this tag are returned in the response. If you specify multiple tags to query resources, up to 1,000 resources with all these tags are returned in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the elasticity assurances.', example='cn-hangzhou-h'),
}

model DescribeElasticityAssurancesResponseBody = {
  elasticityAssuranceSet?: {
    elasticityAssuranceItem?: [ 
    {
      allocatedResources?: {
        allocatedResource?: [ 
        {
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c6.large'),
          totalAmount?: int32(name='TotalAmount', description='The total number of instances for which capacity of an instance type is reserved.', example='2'),
          usedAmount?: int32(name='UsedAmount', description='The number of instances that have used the elasticity assurance.', example='2'),
          zoneId?: string(name='zoneId', description='The zone ID.', example='cn-hangzhou-h'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources', description='Details about the allocated resources.'),
      description?: string(name='Description', description='The description of the elasticity assurance.', example='This is description.'),
      endTime?: string(name='EndTime', description='The time when the elasticity assurance expires.', example='2021-12-03T16:00Z'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. The value can be only PostPaid. Only pay-as-you-go instances can be created by using elasticity assurances.', example='PostPaid'),
      latestStartTime?: string(name='LatestStartTime', description='> This parameter is not publicly available.', example='null'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the elasticity assurance.', example='eap-bp1ir35kqtn8ywci****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The type of the private pool associated with the elasticity assurance. Valid values:

*   Open: open private pool
*   Target: specific private pool', example='Target'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName', description='The name of the elasticity assurance.', example='eapTestName'),
      regionId?: string(name='RegionId', description='The region ID of the elasticity assurance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      startTime?: string(name='StartTime', description='The time when the elasticity assurance takes effect.', example='2020-12-03T05:25Z'),
      startTimeType?: string(name='StartTimeType', description='Indicates when the elasticity assurance takes effect. Valid values:

*   Now: The elasticity assurance takes effect immediately after it is created.
*   Later: The elasticity assurance takes effect at a specified time.', example='Now'),
      status?: string(name='Status', description='The status of the elasticity assurance. Valid values:

*   Preparing
*   Prepared
*   Active
*   Released', example='Active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the elasticity assurance.'),
      totalAssuranceTimes?: string(name='TotalAssuranceTimes', description='The total number of times that the elasticity assurance is applied.', example='Unlimited'),
      usedAssuranceTimes?: int32(name='UsedAssuranceTimes', description='> This parameter is not publicly available.', example='0'),
    }
  ](name='ElasticityAssuranceItem')
  }(name='ElasticityAssuranceSet', description='Details about the elasticity assurances.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeElasticityAssurancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeElasticityAssurancesResponseBody(name='body'),
}

async function describeElasticityAssurancesWithOptions(request: DescribeElasticityAssurancesRequest, runtime: Util.RuntimeOptions): DescribeElasticityAssurancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeElasticityAssurances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeElasticityAssurances(request: DescribeElasticityAssurancesRequest): DescribeElasticityAssurancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticityAssurancesWithOptions(request, runtime);
}

model DescribeEniMonitorDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2018-05-21T12:22:00Z'),
  eniId?: string(name='EniId', description='The secondary ENI ID. By default, all secondary ENIs that are bound to the specified instance are queried.', example='eni-bp19da36d6xdwey****'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the secondary ENI is bound.', example='i-bp1a5zr3u7nq9cx****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The interval at which to retrieve monitoring data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2018-05-21T12:19:00Z'),
}

model DescribeEniMonitorDataResponseBody = {
  monitorData?: {
    eniMonitorData?: [ 
    {
      dropPacketRx?: string(name='DropPacketRx', description='The number of dropped packets received by the secondary ENI over the internal network.', example='0'),
      dropPacketTx?: string(name='DropPacketTx', description='The number of dropped packets sent by the secondary ENI over the internal network.', example='0'),
      eniId?: string(name='EniId', description='The secondary ENI ID.', example='eni-bp19da36d6xdwey****'),
      intranetRx?: string(name='IntranetRx', description='The average rate of data received by the secondary ENI over the internal network. Unit: Kbit/s.', example='0'),
      intranetTx?: string(name='IntranetTx', description='The average rate of data sent by the secondary ENI over the internal network. Unit: Kbit/s.', example='0'),
      packetRx?: string(name='PacketRx', description='The number of packets received by the secondary ENI over the internal network.', example='0'),
      packetTx?: string(name='PacketTx', description='The number of packets sent by the secondary ENI over the internal network.', example='0'),
      timeStamp?: string(name='TimeStamp', description='The timestamp to query the monitoring data. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-05-21T03:22:00Z'),
    }
  ](name='EniMonitorData')
  }(name='MonitorData', description='The details about the monitoring data of the secondary ENI.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model DescribeEniMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEniMonitorDataResponseBody(name='body'),
}

/**
  * The monitoring data includes traffic sent and received over the internal network, the number of packets sent and received by the secondary ENI, and the number of dropped packets sent and received by the secondary ENI. Specific information may be missing from the returned monitoring data. This is because the system cannot obtain the relevant information. For example, if the instance to which the secondary ENI is bound is in the Stopped state, or if the secondary ENI is not bound to an instance and is in the Available state, the monitoring data of the secondary ENI cannot be obtained. When you call this operation, take note of the following items:
  * *   Up to 400 monitoring data entries can be returned at a time. If the value that is calculated by using the following formula is greater than 400: (EndTime − StartTime)/Period, an error is returned.
  * *   Only the monitoring data within the last 30 days can be queried. If the value of StartTime is more than 30 days earlier than the time when you call this operation, an error is returned.
  *
  * @param request DescribeEniMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeEniMonitorDataResponse
 */
async function describeEniMonitorDataWithOptions(request: DescribeEniMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEniMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eniId)) {
    query['EniId'] = request.eniId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEniMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The monitoring data includes traffic sent and received over the internal network, the number of packets sent and received by the secondary ENI, and the number of dropped packets sent and received by the secondary ENI. Specific information may be missing from the returned monitoring data. This is because the system cannot obtain the relevant information. For example, if the instance to which the secondary ENI is bound is in the Stopped state, or if the secondary ENI is not bound to an instance and is in the Available state, the monitoring data of the secondary ENI cannot be obtained. When you call this operation, take note of the following items:
  * *   Up to 400 monitoring data entries can be returned at a time. If the value that is calculated by using the following formula is greater than 400: (EndTime − StartTime)/Period, an error is returned.
  * *   Only the monitoring data within the last 30 days can be queried. If the value of StartTime is more than 30 days earlier than the time when you call this operation, an error is returned.
  *
  * @param request DescribeEniMonitorDataRequest
  * @return DescribeEniMonitorDataResponse
 */
async function describeEniMonitorData(request: DescribeEniMonitorDataRequest): DescribeEniMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEniMonitorDataWithOptions(request, runtime);
}

model DescribeForwardTableEntriesRequest {
  forwardEntryId?: string(name='ForwardEntryId'),
  forwardTableId?: string(name='ForwardTableId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeForwardTableEntriesResponseBody = {
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      externalIp?: string(name='ExternalIp'),
      externalPort?: string(name='ExternalPort'),
      forwardEntryId?: string(name='ForwardEntryId'),
      forwardTableId?: string(name='ForwardTableId'),
      internalIp?: string(name='InternalIp'),
      internalPort?: string(name='InternalPort'),
      ipProtocol?: string(name='IpProtocol'),
      status?: string(name='Status'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeForwardTableEntriesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeForwardTableEntriesResponse
 */
// Deprecated
async function describeForwardTableEntriesWithOptions(request: DescribeForwardTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeForwardTableEntriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeForwardTableEntries',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeForwardTableEntriesRequest
  * @return DescribeForwardTableEntriesResponse
 */
// Deprecated
async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForwardTableEntriesWithOptions(request, runtime);
}

model DescribeHaVipsRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeHaVipsResponseBody = {
  haVips?: {
    haVip?: [ 
    {
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      haVipId?: string(name='HaVipId'),
      ipAddress?: string(name='IpAddress'),
      masterInstanceId?: string(name='MasterInstanceId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
    }
  ](name='HaVip')
  }(name='HaVips'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHaVipsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHaVipsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeHaVipsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeHaVipsResponse
 */
// Deprecated
async function describeHaVipsWithOptions(request: DescribeHaVipsRequest, runtime: Util.RuntimeOptions): DescribeHaVipsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHaVips',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeHaVipsRequest
  * @return DescribeHaVipsResponse
 */
// Deprecated
async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHaVipsWithOptions(request, runtime);
}

model DescribeHpcClustersRequest {
  clientToken?: string(name='ClientToken', description='The page number.

Pages start from page 1.

Default value: 1.', example='123e4567-e89b-12d3-a456-426655440000'),
  hpcClusterIds?: string(name='HpcClusterIds', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='["hpc-xxxxxxxxx", "hpc-yyyyyyyyy", … "hpc-zzzzzzzzz"]'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of entries per page.', example='1'),
  pageSize?: int32(name='PageSize', description='The request ID.', example='10'),
  regionId?: string(name='RegionId', description='The IDs of HPC clusters. The value is a JSON array that consists of up to 100 HPC cluster IDs. Separate the HPC cluster IDs with commas (,).', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeHpcClustersResponseBody = {
  hpcClusters?: {
    hpcCluster?: [ 
    {
      description?: string(name='Description', example='testDescription'),
      hpcClusterId?: string(name='HpcClusterId', description='The description of the HPC cluster.', example='hpc-bp1a5zr3u7nq9cx****'),
      name?: string(name='Name', example='testName'),
    }
  ](name='HpcCluster')
  }(name='HpcClusters', description='The name of the HPC cluster.'),
  pageNumber?: int32(name='PageNumber', description='Details about the HPC clusters. The value is an array that consists of the information of each HPC cluster.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number.', example='10'),
  requestId?: string(name='RequestId', description='The total number of HPC clusters.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The ID of the HPC cluster.', example='2'),
}

model DescribeHpcClustersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHpcClustersResponseBody(name='body'),
}

async function describeHpcClustersWithOptions(request: DescribeHpcClustersRequest, runtime: Util.RuntimeOptions): DescribeHpcClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.hpcClusterIds)) {
    query['HpcClusterIds'] = request.hpcClusterIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHpcClusters',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHpcClusters(request: DescribeHpcClustersRequest): DescribeHpcClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHpcClustersWithOptions(request, runtime);
}

model DescribeImageComponentsRequest {
  imageComponentId?: [ string ](name='ImageComponentId', description='The IDs of the image components. You can specify up to 20 image components.', example='ic-bp67acfmxazb4p****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value: 50.', example='50'),
  name?: string(name='Name', description='The name of the image component. You must specify an exact name to search for the image component.', example='testComponent'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeImageComponents operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****'),
  owner?: string(name='Owner', description='The type of the image component. Valid values:

*   SELF: the custom component that you created.
*   ALIYUN: the system component provided by Alibaba Cloud.', example='SELF'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image component. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image component. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image component. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags'),
}

model DescribeImageComponentsResponseBody = {
  imageComponent?: {
    imageComponentSet?: [ 
    {
      componentType?: string(name='ComponentType', description='The type of the image component.', example='Build'),
      content?: string(name='Content', description='The content of the image component.', example='RESTART'),
      creationTime?: string(name='CreationTime', description='The time when the image component was created.', example='2020-11-24T06:00:00Z'),
      description?: string(name='Description', description='The description of the image component.', example='This is description.'),
      imageComponentId?: string(name='ImageComponentId', description='The ID of the image component.', example='ic-bp67acfmxazb4p****'),
      name?: string(name='Name', description='The name of the image component.', example='testComponent'),
      owner?: string(name='Owner', description='The type of the image component. Valid values:

*   SELF: the custom component that you created.
*   ALIYUN: the system component provided by Alibaba Cloud.', example='SELF'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      systemType?: string(name='SystemType', description='The operating system type supported by the image component.', example='Linux'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the image component.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the image component.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the image component.'),
    }
  ](name='ImageComponentSet')
  }(name='ImageComponent', description='Details about the image components.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The query token returned in this call. For information about how to use this return value, see the "Description" section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of image components returned.', example='1'),
}

model DescribeImageComponentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageComponentsResponseBody(name='body'),
}

/**
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeImageComponents operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
  * @param request DescribeImageComponentsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageComponentsResponse
 */
async function describeImageComponentsWithOptions(request: DescribeImageComponentsRequest, runtime: Util.RuntimeOptions): DescribeImageComponentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageComponentId)) {
    query['ImageComponentId'] = request.imageComponentId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.owner)) {
    query['Owner'] = request.owner;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageComponents',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the DescribeImageComponents operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
  * @param request DescribeImageComponentsRequest
  * @return DescribeImageComponentsResponse
 */
async function describeImageComponents(request: DescribeImageComponentsRequest): DescribeImageComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageComponentsWithOptions(request, runtime);
}

model DescribeImageFromFamilyRequest {
  imageFamily?: string(name='ImageFamily', description='The name of the image family. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with http://, https://, acs:, or aliyun.', example='hangzhou-daily-update'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeImageFromFamilyResponseBody = {
  image?: {
    architecture?: string(name='Architecture', description='The image architecture. Valid values:

*   i386
*   x86\\_64', example='x86_64'),
    creationTime?: string(name='CreationTime', description='The time when the image was created.', example='2018-01-10T01:01:10Z'),
    description?: string(name='Description', description='The description of the image.', example='testDescription'),
    diskDeviceMappings?: {
      diskDeviceMapping?: [ 
      {
        device?: string(name='Device', description='The device name of the disk. Example: /dev/xvdb.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvdb'),
        format?: string(name='Format', description='The format of the image.', example='qcow2'),
        importOSSBucket?: string(name='ImportOSSBucket', description='The OSS bucket that contains the imported image file.', example='testEcsImport'),
        importOSSObject?: string(name='ImportOSSObject', description='The OSS object corresponding to the imported image file.', example='imageImport'),
        size?: string(name='Size', description='The size of the disk. Unit: GiB.', example='80'),
        snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp17ot2q7x72ggtw****'),
        type?: string(name='Type', description='The type of the image.', example='custom'),
      }
    ](name='DiskDeviceMapping')
    }(name='DiskDeviceMappings', description='The mappings between the disks and snapshots under the image.'),
    imageFamily?: string(name='ImageFamily', description='The name of the image family.', example='testImageFamily'),
    imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp1g7004ksh0oeuc****'),
    imageName?: string(name='ImageName', description='The name of the image.', example='testImageName'),
    imageOwnerAlias?: string(name='ImageOwnerAlias', description='The alias of the image owner. Valid values:

- system: public images provided by Alibaba Cloud
- self: your custom images
- others: shared images from other Alibaba Cloud accounts
- marketplace: Alibaba Cloud Marketplace images', example='self'),
    imageVersion?: string(name='ImageVersion', description='The version of the image.', example='2'),
    isCopied?: boolean(name='IsCopied', description='Indicates whether the image is a copy of another image.', example='false'),
    isSelfShared?: string(name='IsSelfShared', description='Indicates whether the image has been shared to other Alibaba Cloud accounts.', example='true'),
    isSubscribed?: boolean(name='IsSubscribed', description='Indicates whether you have subscribed to the image corresponding to the specified product code.', example='false'),
    isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Indicates whether the image supports cloud-init.', example='true'),
    isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Indicates whether the image can be used on I/O optimized instances.', example='true'),
    OSName?: string(name='OSName', description='The name of the operating system.', example='Alibaba Cloud Linux 2.1903'),
    OSType?: string(name='OSType', description='The type of the operating system. Valid values:

- windows
- linux', example='linux'),
    platform?: string(name='Platform', description='The platform of the operating system.', example='Aliyun'),
    productCode?: string(name='ProductCode', description='The product code of the Alibaba Cloud Marketplace image.', example='jxsc00****'),
    progress?: string(name='Progress', description='The image creation progress. Unit: percent (%).', example='100'),
    size?: int32(name='Size', description='The size of the image. Unit: GiB.', example='80'),
    status?: string(name='Status', description='The status of the image. Valid values:

- UnAvailable: The image is unavailable.
- Available: The image is available.
- Creating: The image is being created.
- CreateFailed: The image failed to be created.', example='Available'),
    tags?: {
      tag?: [ 
      {
        tagKey?: string(name='TagKey', description='The tag key of the image.', example='TestKey'),
        tagValue?: string(name='TagValue', description='The tag value of the image.', example='TestValue'),
      }
    ](name='Tag')
    }(name='Tags', description='An array that consists of Tag data.'),
    usage?: string(name='Usage', description='Indicates whether the image has been used to create ECS instances. Valid values:

- instance: The image has been used to create one or more ECS instances.
- none: The image has not been used to create ECS instances.', example='none'),
  }(name='Image', description='The image information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeImageFromFamilyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageFromFamilyResponseBody(name='body'),
}

/**
  * ## Description
  * *   This API operation only returns the available custom images that are newly created in the specified image family. Public images, Alibaba Cloud Marketplace images, community images, or shared images are not queried.
  * *   If no available custom images exist in the specified image family, the response is empty.
  *
  * @param request DescribeImageFromFamilyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImageFromFamilyResponse
 */
async function describeImageFromFamilyWithOptions(request: DescribeImageFromFamilyRequest, runtime: Util.RuntimeOptions): DescribeImageFromFamilyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageFromFamily',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   This API operation only returns the available custom images that are newly created in the specified image family. Public images, Alibaba Cloud Marketplace images, community images, or shared images are not queried.
  * *   If no available custom images exist in the specified image family, the response is empty.
  *
  * @param request DescribeImageFromFamilyRequest
  * @return DescribeImageFromFamilyResponse
 */
async function describeImageFromFamily(request: DescribeImageFromFamilyRequest): DescribeImageFromFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFromFamilyWithOptions(request, runtime);
}

model DescribeImagePipelineExecutionsRequest {
  executionId?: string(name='ExecutionId', description='The ID of the image creation task.', example='exec-5fb8facb8ed7427c****'),
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page. Valid values: 1 to 500.

Default value: 50.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of `NextToken`.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The status of the image creation task. You can specify multiple values. Separate the values with commas (,). Example: `BUILDING,DISTRIBUTING`. Valid values:

*   BUILDING
*   DISTRIBUTING
*   RELEASING
*   SUCCESS
*   FAILED
*   CANCELLING
*   CANCELLED

> If you want to query the image creation tasks in all states, specify all values.', example='BUILDING'),
  tag?: [ 
    {
      key?: string(name='Key', description='> This parameter is not publicly available.', example='null'),
      value?: string(name='Value', description='> This parameter is not publicly available.', example='null'),
    }
  ](name='Tag', description='> This parameter is not publicly available.'),
}

model DescribeImagePipelineExecutionsResponseBody = {
  imagePipelineExecution?: {
    imagePipelineExecutionSet?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the image creation task was created.', example='2020-11-24T06:00:00Z'),
      executionId?: string(name='ExecutionId', description='The ID of the image creation task.', example='exec-5fb8facb8ed7427c****'),
      imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp67acfmxazb4p****'),
      imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
      message?: string(name='Message', description='The data returned.', example='Create transition vpc "vpc-2ze70rc7093j9idu6****" success!'),
      modifiedTime?: string(name='ModifiedTime', description='The last modification time of the image creation task.', example='2020-11-25T06:00:00Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      status?: string(name='Status', description='The status of the image creation task. Valid values:

*   BUILDING
*   DISTRIBUTING
*   RELEASING
*   SUCCESS
*   FAILED
*   CANCELLING
*   CANCELLED', example='BUILDING'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='> This parameter is not publicly available.', example='null'),
          tagValue?: string(name='TagValue', description='> This parameter is not publicly available.', example='null'),
        }
      ](name='Tag')
      }(name='Tags', description='> This parameter is not publicly available.'),
    }
  ](name='ImagePipelineExecutionSet')
  }(name='ImagePipelineExecution', description='Details of the image creation task.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists. For information about how to use the returned value, see the "Usage notes" section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of returned image components.', example='1'),
}

model DescribeImagePipelineExecutionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagePipelineExecutionsResponseBody(name='body'),
}

/**
  * *   The image template that is specified by the `ImagePipelineId` parameter cannot be a deleted image template. When an image template is deleted, the corresponding image creation task is deleted.
  * *   You must specify `ImagePipelineId` or `ExecutionId`.
  * *   You can configure the query token by using the `NextToken` parameter. Set the value of NextToken to the value of `NextToken` that was returned the last time you called the `DescribeImagePipelineExecutions` operation. Then, use the `MaxResults` parameter to specify the maximum number of entries to return on each page to query the details of the image creation task.
  *
  * @param request DescribeImagePipelineExecutionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImagePipelineExecutionsResponse
 */
async function describeImagePipelineExecutionsWithOptions(request: DescribeImagePipelineExecutionsRequest, runtime: Util.RuntimeOptions): DescribeImagePipelineExecutionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.executionId)) {
    query['ExecutionId'] = request.executionId;
  }
  if (!Util.isUnset(request.imagePipelineId)) {
    query['ImagePipelineId'] = request.imagePipelineId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImagePipelineExecutions',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The image template that is specified by the `ImagePipelineId` parameter cannot be a deleted image template. When an image template is deleted, the corresponding image creation task is deleted.
  * *   You must specify `ImagePipelineId` or `ExecutionId`.
  * *   You can configure the query token by using the `NextToken` parameter. Set the value of NextToken to the value of `NextToken` that was returned the last time you called the `DescribeImagePipelineExecutions` operation. Then, use the `MaxResults` parameter to specify the maximum number of entries to return on each page to query the details of the image creation task.
  *
  * @param request DescribeImagePipelineExecutionsRequest
  * @return DescribeImagePipelineExecutionsResponse
 */
async function describeImagePipelineExecutions(request: DescribeImagePipelineExecutionsRequest): DescribeImagePipelineExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePipelineExecutionsWithOptions(request, runtime);
}

model DescribeImagePipelinesRequest {
  imagePipelineId?: [ string ](name='ImagePipelineId', description='The ID of image template N. Valid values of N: 1 to 20.', example='ip-2ze5tsl5bp6nf2b3****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 1 to 500.

Default value: 50.', example='50'),
  name?: string(name='Name', description='The name of the image template.', example='testImagePipeline'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeImagePipelines operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the image template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image template. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image template. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The key of tag N of the image template. Valid values of N: 1 to 20.'),
}

model DescribeImagePipelinesResponseBody = {
  imagePipeline?: {
    imagePipelineSet?: [ 
    {
      addAccounts?: {
        addAccount?: [ string ](name='AddAccount')
      }(name='AddAccounts', description='The IDs of Alibaba Cloud accounts to which to share the created image.'),
      baseImage?: string(name='BaseImage', description='The source image.

*   When `BaseImageType` is set to IMAGE, the value of this parameter is the ID of a custom image.
*   When `BaseImageType` is set to IMAGE_FAMILY, the value of this parameter is the name of an image family.', example='m-bp67acfmxazb4p****'),
      baseImageType?: string(name='BaseImageType', description='The type of the source image. Valid values:

*   IMAGE: custom image
*   IMAGE_FAMILY: image family', example='IMAGE'),
      buildContent?: string(name='BuildContent', description='The content of the image template.', example='FROM IMAGE:m-bp67acfmxazb4p****'),
      creationTime?: string(name='CreationTime', description='The time when the image template was created.', example='2020-11-24T06:00:00Z'),
      deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure', description='Indicates whether to release the intermediate instance when the image fails to be created.', example='true'),
      description?: string(name='Description', description='The description of the image template.', example='This is description.'),
      imageName?: string(name='ImageName', description='The name prefix of the created image.', example='testImageName'),
      imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
      instanceType?: string(name='InstanceType', description='The instance type of the intermediate instance.', example='ecs.g6.large'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The size of the outbound public bandwidth for the intermediate instance. Unit: Mbit/s.', example='0'),
      name?: string(name='Name', description='The name of the image template.', example='testImagePipeline'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp67acfmxazb4p****'),
      systemDiskSize?: int32(name='SystemDiskSize', description='The system disk size of the intermediate instance. Unit: GiB.', example='40'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the image template.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the image template.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the image template.'),
      toRegionIds?: {
        toRegionId?: [ string ](name='ToRegionId')
      }(name='ToRegionIds', description='The IDs of regions to which to distribute the created image.'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp67acfmxazb4p****'),
    }
  ](name='ImagePipelineSet')
  }(name='ImagePipeline', description='Details of the image templates.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The query token returned in this call. For information about how to use this return value, see the "Description" section in this topic.', example='AAAAAdDWBF2****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of image templates returned.', example='1'),
}

model DescribeImagePipelinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagePipelinesResponseBody(name='body'),
}

/**
  * ## Description
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the `DescribeImagePipelines` operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
  * @param request DescribeImagePipelinesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImagePipelinesResponse
 */
async function describeImagePipelinesWithOptions(request: DescribeImagePipelinesRequest, runtime: Util.RuntimeOptions): DescribeImagePipelinesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imagePipelineId)) {
    query['ImagePipelineId'] = request.imagePipelineId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImagePipelines',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can use `NextToken` to configure the query token. Set the value to the `NextToken` value that is returned in the last call to the `DescribeImagePipelines` operation. Then, use `MaxResults` to specify the maximum number of entries to return on each page.
  *
  * @param request DescribeImagePipelinesRequest
  * @return DescribeImagePipelinesResponse
 */
async function describeImagePipelines(request: DescribeImagePipelinesRequest): DescribeImagePipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePipelinesWithOptions(request, runtime);
}

model DescribeImageSharePermissionRequest {
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp1caf3yicx5jlfl****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeImageSharePermissionResponseBody = {
  accounts?: {
    account?: [ 
    {
      aliyunId?: string(name='AliyunId', description='The ID of the Alibaba Cloud account.', example='1234567890'),
      sharedTime?: string(name='SharedTime', description='The time when the image was shared. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2023-01-01T12:05:00Z'),
    }
  ](name='Account')
  }(name='Accounts', description='The Alibaba Cloud accounts.'),
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp1caf3yicx5jlfl****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  shareGroups?: {
    shareGroup?: [ 
    {
      group?: string(name='Group', description='The shared group.', example='all'),
    }
  ](name='ShareGroup')
  }(name='ShareGroups', description='The shared groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSharePermissionResponseBody(name='body'),
}

async function describeImageSharePermissionWithOptions(request: DescribeImageSharePermissionRequest, runtime: Util.RuntimeOptions): DescribeImageSharePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSharePermission',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSharePermissionWithOptions(request, runtime);
}

model DescribeImageSupportInstanceTypesRequest {
  actionType?: string(name='ActionType', description='The scenario in which you want to use the image. Valid values:

- CreateEcs (default): instance creation
- ChangeOS: replacement of the system disk or operating system', example='CreateEcs'),
  filter?: [ 
    {
      key?: string(name='Key', description='Filter N used to filter instance types.', example='imageId'),
      value?: string(name='Value', description='The ID of the image.', example='m-o6w3gy99qf89rkga****'),
    }
  ](name='Filter', description='The number of vCPUs of the instance type.'),
  imageId?: string(name='ImageId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='m-o6w3gy99qf89rkga****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='Details about the instance types that are supported by the image.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeImageSupportInstanceTypesResponseBody = {
  imageId?: string(name='ImageId', description='The key of filter N. Only the image ID can be used to filter instance types. Valid values:

*   imagId: image ID
*   filter: image ID', example='m-o6w3gy99qf89rkga****'),
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount', description='The number of vCPUs of the instance type.', example='1'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='DescribeImageSupportInstanceTypes', example='ecs.t1'),
      instanceTypeId?: string(name='InstanceTypeId', description='Queries the instance types supported by an image.', example='ecs.t1.xsmall'),
      memorySize?: float(name='MemorySize', description='The memory size of the instance type. Unit: GiB.', example='1024'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes', description='{
    "RequestId": "CF661E2D-4AFE-4BCD-959A-A65E14416B44",
    "RegionId": "cn-hangzhou",
    "ImageId": "ubuntu_16_0402_64_20G_alibase_20180409.vhd",
    "InstanceTypes": {
        "InstanceType": [{
            "InstanceTypeId": "ecs.t1.xsmall",
            "CpuCoreCount": 1,
            "MemorySize": 0.5,
            "InstanceTypeFamily": "ecs.t1"
        },
        {
            "InstanceTypeId": "ecs.t1.small",
            "CpuCoreCount": 1,
            "MemorySize": 1,
            "InstanceTypeFamily": "ecs.t1"
        }]
    }
}'),
  regionId?: string(name='RegionId', description='{
    "RequestId": "CF661E2D-4AFE-4BCD-959A-A65E14416B44",
    "RegionId": "cn-hangzhou",
    "ImageId": "ubuntu_16_0402_64_20G_alibase_20180409.vhd",
    "InstanceTypes": {
        "InstanceType": [{
            "InstanceTypeId": "ecs.t1.xsmall",
            "CpuCoreCount": 1,
            "MemorySize": 0.5,
            "InstanceTypeFamily": "ecs.t1"
        },
        {
            "InstanceTypeId": "ecs.t1.small",
            "CpuCoreCount": 1,
            "MemorySize": 1,
            "InstanceTypeFamily": "ecs.t1"
        }]
    }
}', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeImageSupportInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImageSupportInstanceTypesResponseBody(name='body'),
}

async function describeImageSupportInstanceTypesWithOptions(request: DescribeImageSupportInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeImageSupportInstanceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImageSupportInstanceTypes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeImageSupportInstanceTypes(request: DescribeImageSupportInstanceTypesRequest): DescribeImageSupportInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSupportInstanceTypesWithOptions(request, runtime);
}

model DescribeImagesRequest {
  actionType?: string(name='ActionType', description='The scenario in which the image is used. Valid values:

*   CreateEcs: instance creation
*   ChangeOS: replacement of the system disk or OS', example='CreateEcs'),
  architecture?: string(name='Architecture', description='The architecture of the image. Valid values:

*   i386
*   x86\\_64
*   arm64', example='i386'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run without performing the actual request.

*   true: performs only a dry run. The system checks whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false'),
  filter?: [ 
    {
      key?: string(name='Key', description='The key of the filter condition used to query resources. Valid values:

*   If you set this parameter to `CreationStartTime`, you can query the resources that were created after the point in time specified by the `Filter.N.Value` value.
*   If you set this parameter to `CreationEndTime`, you can query the resources that were created before the point in time as specified by the `Filter.N.Value` value.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter N used to query resources. When you specify this parameter, you must also specify `Filter.N.Key`. Make sure the time is in the `yyyy-MM-ddTHH:mmZ` format and in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter', description='The list of filter conditions used to query resources.'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. You can specify this parameter to query images of the specified image family.

This parameter is empty by default.', example='hangzhou-daily-update'),
  imageId?: string(name='ImageId', description='The image IDs.', example='m-bp1g7004ksh0oeuc****'),
  imageName?: string(name='ImageName', description='The image name.', example='testImageName'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', description='The image source. Valid values:

*   system: images that are provided by Alibaba Cloud and are not released in Alibaba Cloud Marketplace, which are different from public images in the Elastic Compute Service (ECS) console.

*   self: your custom images

*   others: shared images (images shared by other Alibaba Cloud accounts) and community images (publicly available custom images that are published by other Alibaba Cloud accounts). Take note of the following items:

    *   To query community images, you must set IsPublic to true.
    *   To query shared images, you must set IsPublic to false or leave IsPublic empty.

*   marketplace: images released by Alibaba Cloud or independent software vendors (ISVs) in the Alibaba Cloud Marketplace, which must be purchased together with ECS instances. Take note of the billing details of the images.

This parameter is empty by default.

> By default, this parameter is empty, which indicates that the following images are queried: public images provided by Alibaba Cloud, custom images in your repository, shared images from other Alibaba Cloud accounts, and community images that are published by other Alibaba Cloud accounts.', example='self'),
  imageOwnerId?: long(name='ImageOwnerId', description='The ID of the Alibaba Cloud account to which the image belongs. This parameter takes effect only when you query shared images or community images.', example='1234567890'),
  instanceType?: string(name='InstanceType', description='The instance type for which the image can be used.', example='ecs.g5.large'),
  isPublic?: boolean(name='IsPublic', description='Specifies whether to query published community images. Valid values:

*   true: queries published community images. When you set this parameter to true, you must set ImageOwnerAlias to others.
*   false: queries image types other than the community images type. The specific image types to be queried are determined by the ImageOwnerAlias value.

Default value: false.', example='false'),
  isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Specifies whether the image supports cloud-init.', example='true'),
  isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Specifies whether the image can be used on I/O optimized instances.', example='true'),
  OSType?: string(name='OSType', description='The operating system type of the image. Valid values:

*   windows
*   linux', example='linux'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.

Maximum value: 100.

Default value: 10.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the custom image belongs. If you specify this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be returned.

> Resources in the default resource group are displayed in the response regardless of whether you specify this parameter.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  showExpired?: boolean(name='ShowExpired', description='Specifies whether the subscription image has expired.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='false'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot used to create the custom image.', example='s-bp17ot2q7x72ggtw****'),
  status?: string(name='Status', description='The status of the image. By default, only images in the Available state are returned if you do not specify this parameter. Valid values:

*   Creating: The image is being created.
*   Waiting: The image is waiting to be processed.
*   Available: The image is available.
*   UnAvailable: The image is unavailable.
*   CreateFailed: The image cannot be created.
*   Deprecated: The image is deprecated.

Default value: Available. You can specify multiple values for this parameter. Separate the values with commas (,).', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag N key of the image. Valid values of N: 1 to 20.

Up to 1,000 resources that match the specified tags can be returned in the response. To query more than 1,000 resources that match the specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The tag value of the image. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags list.'),
  usage?: string(name='Usage', description='Specifies whether the image is running on an Elastic Compute Service (ECS) instance. Valid values:

*   instance: The image is already in use and running on an ECS instance.
*   none: The image is idle.', example='instance'),
}

model DescribeImagesResponseBody = {
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture', description='The architecture of the image. Valid values:

*   i386
*   x86\\_64
*   arm64', example='x86_64'),
      bootMode?: string(name='BootMode', description='The boot mode of the image. Valid values:

*   BIOS
*   UEFI

> When you use this parameter to change the boot mode of the image, specify a boot mode supported by the image. We recommend that you familiarize yourself with the boot modes supported by the specified image to ensure that instances that use this image can be started as expected.', example='BIOS'),
      creationTime?: string(name='CreationTime', description='The image creation time.', example='2019-11-15T06:07:05Z'),
      description?: string(name='Description', description='The image description.', example='Archive log for Oracle'),
      detectionOptions?: {
        items?: {
          item?: [ 
          {
            name?: string(name='Name', description='The name of the check item.', example='Nvme'),
            riskCode?: string(name='RiskCode', description='The risk that is detected on the check item.', example='NVMe.NotInstallded'),
            riskLevel?: string(name='RiskLevel', description='The severity level of the risk that is detected on the check item of the imported custom image. If the system detects a risk on the check item, this parameter is returned. If the system does not detect a risk on the check item, this parameter is not returned.

Valid values:

*   High: The check item is a high-risk item that may affect the startup of the instance and mustbe fixed at your earliest convenience.
*   Medium: The check item is a medium-risk item that may affect the startup performance or configurations of the instance. We recommend that you fix this item.', example='High'),
            value?: string(name='Value', description='The result of the check item.', example='Supported'),
          }
        ](name='Item')
        }(name='Items', description='The check items.'),
        status?: string(name='Status', description='The status of the image check task. Valid values:

*   Processing: The image check task is in progress.
*   Finished: The image check task is completed.', example='Processing'),
      }(name='DetectionOptions', description='Details about the check performed on the image.'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          device?: string(name='Device', description='The device name of the disk. Example: /dev/xvdb.

> This parameter will be removed in the future. To ensure compatibility, we recommend that you use other parameters.', example='/dev/xvda'),
          format?: string(name='Format', description='The image format.', example='qcow2'),
          importOSSBucket?: string(name='ImportOSSBucket', description='The Object Storage Service (OSS) bucket that contains the imported image file.', example='testEcsImport'),
          importOSSObject?: string(name='ImportOSSObject', description='The OSS object that corresponds to the imported image file.', example='imageImport'),
          progress?: string(name='Progress', description='The progress of an image copy task.', example='32%'),
          remainTime?: int32(name='RemainTime', description='The remaining amount of time required for an image copy task. Unit: seconds.', example='233'),
          size?: string(name='Size', description='The disk size.', example='60'),
          snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-bp17ot2q7x72ggtw****'),
          type?: string(name='Type', description='The image type.', example='system'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings', description='The mappings between the disks and snapshots in the image.'),
      features?: {
        nvmeSupport?: string(name='NvmeSupport', description='Indicates whether the image supports the Non-Volatile Memory Express (NVMe) protocol. Valid values:

*   supported: The image supports the NVMe protocol. Instances created from this image support NVMe.
*   unsupported: The image does not support the NVMe protocol. Instances created from this image do not support the NVMe protocol.', example='supported'),
      }(name='Features', description='The image attributes.'),
      imageFamily?: string(name='ImageFamily', description='The image family name.', example='hangzhou-daily-update'),
      imageId?: string(name='ImageId', description='The image ID.', example='m-bp1g7004ksh0oeuc****'),
      imageName?: string(name='ImageName', description='The image name.', example='testImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', description='The image source. Valid values:

*   system: public images provided by Alibaba Cloud
*   self: your custom images
*   others: shared images from other Alibaba Cloud accounts, or community images published by other Alibaba Cloud accounts
*   marketplace: Alibaba Cloud Marketplace images.', example='self'),
      imageOwnerId?: long(name='ImageOwnerId', description='The ID of the Alibaba Cloud account to which the image belongs. This parameter takes effect only when you query shared images or community images.', example='1234567890'),
      imageVersion?: string(name='ImageVersion', description='The image version.', example='2'),
      isCopied?: boolean(name='IsCopied', description='Indicates whether the image is a copy of another image.', example='false'),
      isPublic?: boolean(name='IsPublic', description='Indicates whether the image is publicly available. Publicly available images include public images provided by Alibaba Cloud and custom images published as community images. Valid values:

*   true: The image is publicly available.
*   false: The image is not publicly available.', example='false'),
      isSelfShared?: string(name='IsSelfShared', description='Indicates whether the custom image was shared to other Alibaba Cloud accounts.', example='true'),
      isSubscribed?: boolean(name='IsSubscribed', description='Indicates whether the Terms of Service of the image service that corresponds to the product code are accepted.', example='false'),
      isSupportCloudinit?: boolean(name='IsSupportCloudinit', description='Indicates whether the image supports cloud-init.', example='true'),
      isSupportIoOptimized?: boolean(name='IsSupportIoOptimized', description='Indicates whether the image can be used on I/O optimized instances.', example='true'),
      loginAsNonRootSupported?: boolean(name='LoginAsNonRootSupported', description='Indicates whether the image supports logons of non-root users. Valid values:

*   true: The image supports logons of non-root users.
*   false: The image does not support logons of non-root users.', example='false'),
      OSName?: string(name='OSName', description='The display name of the operating system in Chinese.', example='Windows Server 2016 Datacenter Edition 64-bit (Simplified Chinese)'),
      OSNameEn?: string(name='OSNameEn', description='The display name of the operating system in English.', example='Windows Server  2016 Data Center Edition 64bit Chinese Edition'),
      OSType?: string(name='OSType', description='The type of the operating system. Valid values:

*   windows
*   linux', example='windows'),
      platform?: string(name='Platform', description='The operating system.', example='Windows Server 2016'),
      productCode?: string(name='ProductCode', description='The product code of the Alibaba Cloud Marketplace image.', example='test000****'),
      progress?: string(name='Progress', description='The image creation progress. Unit: percent (%).', example='100%'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the image belongs.', example='rg-bp67acfmxazb4p****'),
      size?: int32(name='Size', description='The image size. Unit: GiB.', example='60'),
      status?: string(name='Status', description='The image status. Valid values:

*   UnAvailable: The image is unavailable.
*   Available: The image is available.
*   Creating: The image is being created.
*   CreateFailed: The image cannot be created.', example='Available'),
      supplierName?: string(name='SupplierName', description='The name of the provider that published the community image.', example='TestName'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of tag N of the image.', example='DTS'),
          tagValue?: string(name='TagValue', description='The value of tag N of the image.', example='Oracle'),
        }
      ](name='Tag')
      }(name='Tags', description='The image tags.'),
      usage?: string(name='Usage', description='Indicates whether the image was used to create ECS instances. Valid values:

*   instance: The image was used to create one or more ECS instances.
*   none: The image was not used to create ECS instances.', example='none'),
    }
  ](name='Image')
  }(name='Images', description='Details about the images.'),
  pageNumber?: int32(name='PageNumber', description='The page number returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the image.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='66189103-EDB2-43E2-BB60-BFF2B62F4EB8'),
  totalCount?: int32(name='TotalCount', description='The total number of images.', example='1'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeImagesResponseBody(name='body'),
}

/**
  * *   You can query your custom images, public images provided by Alibaba Cloud, Alibaba Cloud Marketplace images, and shared images from other Alibaba Cloud accounts.
  * *   This operation supports paged query. The response contains the total number of available images as well as the number of images on the returned page. By default, 10 entries are displayed on each page.
  * *   When you call an API operation by using Alibaba Cloud CLI, you must specify the request parameter values in their required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeImagesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeImagesResponse
 */
async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.architecture)) {
    query['Architecture'] = request.architecture;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.imageOwnerAlias)) {
    query['ImageOwnerAlias'] = request.imageOwnerAlias;
  }
  if (!Util.isUnset(request.imageOwnerId)) {
    query['ImageOwnerId'] = request.imageOwnerId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.isPublic)) {
    query['IsPublic'] = request.isPublic;
  }
  if (!Util.isUnset(request.isSupportCloudinit)) {
    query['IsSupportCloudinit'] = request.isSupportCloudinit;
  }
  if (!Util.isUnset(request.isSupportIoOptimized)) {
    query['IsSupportIoOptimized'] = request.isSupportIoOptimized;
  }
  if (!Util.isUnset(request.OSType)) {
    query['OSType'] = request.OSType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.showExpired)) {
    query['ShowExpired'] = request.showExpired;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usage)) {
    query['Usage'] = request.usage;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeImages',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can query your custom images, public images provided by Alibaba Cloud, Alibaba Cloud Marketplace images, and shared images from other Alibaba Cloud accounts.
  * *   This operation supports paged query. The response contains the total number of available images as well as the number of images on the returned page. By default, 10 entries are displayed on each page.
  * *   When you call an API operation by using Alibaba Cloud CLI, you must specify the request parameter values in their required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeImagesRequest
  * @return DescribeImagesResponse
 */
async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInstanceAttachmentAttributesRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of the instances. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='["i-bp67acfmxazb4****", "i-bp67acfmxazb5****", "i-bp67acfmxazb6****"]'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceAttachmentAttributesResponseBody = {
  instances?: {
    instance?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4****'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId', description='The ID of the private pool. If the value of `PrivatePoolOptionsMatchCriteria` is `Open`, the value of PrivatePoolOptionsId is the ID of the private pool that is automatically matched to the instance.', example='eap-bp67acfmxazb4****'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria', description='The match mode of the private pool. Valid values:

*   Open: open private pool. Instances automatically match an open private pool.
*   Target: specified private pool. Instances match a specified private pool.
*   None: no private pool. Instances do not use private pools.', example='Open'),
    }
  ](name='Instance')
  }(name='Instances', description='Details about the private pools that the instances match.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAttachmentAttributesResponseBody(name='body'),
}

/**
  * A private pool is generated after an elasticity assurance or a capacity reservation is created. The private pool is associated with information about the instances that are created by using the private pool. You can configure a private pool when you create an instance. This way, the instance matches the elasticity assurance or capacity reservation that is associated with the private pool.
  * When a private pool expires, data about the association between instances and the private pool becomes invalid. If you call this operation to query the information about the private pool, empty values are returned.
  *
  * @param request DescribeInstanceAttachmentAttributesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceAttachmentAttributesResponse
 */
async function describeInstanceAttachmentAttributesWithOptions(request: DescribeInstanceAttachmentAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttachmentAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAttachmentAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A private pool is generated after an elasticity assurance or a capacity reservation is created. The private pool is associated with information about the instances that are created by using the private pool. You can configure a private pool when you create an instance. This way, the instance matches the elasticity assurance or capacity reservation that is associated with the private pool.
  * When a private pool expires, data about the association between instances and the private pool becomes invalid. If you call this operation to query the information about the private pool, empty values are returned.
  *
  * @param request DescribeInstanceAttachmentAttributesRequest
  * @return DescribeInstanceAttachmentAttributesResponse
 */
async function describeInstanceAttachmentAttributes(request: DescribeInstanceAttachmentAttributesRequest): DescribeInstanceAttachmentAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttachmentAttributesWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-uf6f5trc95ug8t33****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceAttributeResponseBody = {
  clusterId?: string(name='ClusterId', description='The ID of the cluster to which the instance belongs.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='cls-bp67acfmxazb4p****'),
  cpu?: int32(name='Cpu', description='The number of vCPUs.', example='8'),
  creationTime?: string(name='CreationTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: standard mode. For more information, see the "Standard mode" section in [Overview](~~59977#section-svb-w9d-dju~~).
*   Unlimited: unlimited mode. For more information, see the "Unlimited mode" section in [Overview](~~59977#section-svb-w9d-dju~~).', example='Standard'),
  dedicatedHostAttribute?: {
    dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-2ze7qrzz6lvbfhr0****'),
    dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='ecs-autoui-create-ddh-temp'),
  }(name='DedicatedHostAttribute', description='Details about the dedicated host. It is an array that consists of the DedicatedHostClusterId, DedicatedHostId, and DedicatedHostName parameters.'),
  description?: string(name='Description', description='The description of the instance.', example='testDescription'),
  eipAddress?: {
    allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-wz9uilio26dfscamm****'),
    bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the EIP. Unit: Mbit/s.', example='8'),
    internetChargeType?: string(name='InternetChargeType', description='The metering method for network usage. Valid values:

*   PayByBandwidth
*   PayByTraffic

> When the **pay-by-traffic** method is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** metering method for network usage.', example='PayByTraffic'),
    ipAddress?: string(name='IpAddress', description='The ID of the elastic IP address (EIP).', example='30.21.**.**'),
  }(name='EipAddress', description='Details about the elastic IP address (EIP) associated with the instance.'),
  enableJumboFrame?: boolean(name='EnableJumboFrame', description='ECS实例是否开启了Jumbo frame特性。 可能值：

- true：开启。

- false：不开启。

更多信息，请参见[ECS实例MTU](~~200512~~)。', example='false'),
  expiredTime?: string(name='ExpiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
  hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
  imageId?: string(name='ImageId', description='The ID of the image that the instance is running.', example='m-bp1h46wfpjsjastc****'),
  innerIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='InnerIpAddress', description='The internal IP address of the instance located in the classic network.'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription.
*   PostPaid: pay-as-you-go', example='PrePaid'),
  instanceId?: string(name='InstanceId', description='The instance ID', example='i-uf6f5trc95ug8t33****'),
  instanceName?: string(name='InstanceName', description='The instance name.', example='testInstanceName'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
  instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
  internetChargeType?: string(name='InternetChargeType', description='The metering method for network usage. Valid values:

*   PayByBandwidth
*   PayByTraffic

> When the **pay-by-traffic** method is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** metering method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s.', example='50'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s.', example='5'),
  ioOptimized?: string(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
  memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='16384'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason', description='The reason why the instance was locked. Valid values:

*   financial: The dedicated host was locked due to overdue payments.
*   security: The instance was locked due to security reasons.
*   recycling: The preemptible instance was locked and pending release.
*   dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
*   refunded: The instance was locked because a refund was made for the instance.', example='financial'),
    }
  ](name='LockReason')
  }(name='OperationLocks', description='The reason why the instance was locked. Valid values:

*   financial: The dedicated host was locked due to overdue payments.
*   security: The instance was locked due to security reasons.
*   recycling: The preemptible instance was locked and pending release.
*   dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
*   refunded: The instance was locked because a refund was made for the instance.'),
  publicIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='PublicIpAddress', description='The public IP address of the instance.'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the instance belongs.'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the instance.', example='51d1353b-22bf-4567-a176-8b3e12e4****'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   Pending: The instance is being created.
*   Running: The instance is running.
*   Starting: The instance is being started.
*   Stopping: The instance is being stopped.
*   Stopped: The instance is stopped.', example='Running'),
  stoppedMode?: string(name='StoppedMode', description='Indicates whether the system implements billing after the instance is stopped. Valid values:

*   KeepCharging: The instance is stopped in standard mode. The billing of the instance continues after the instance is stopped, and resources are retained for the instance.
*   StopCharging: The instance is stopped in economical mode. The billing of some resources of the instance stops after the instance is stopped. When the instance is stopped, its resources such as vCPUs, memory, and public IP address are released. The instance may be unable to start again if some required resources are out of stock in the current region.
*   Not-applicable: The instance does not support economical mode.', example='KeepCharging'),
  vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you use other parameters.', example='10'),
  vpcAttributes?: {
    natIpAddress?: string(name='NatIpAddress', description='The NAT IP address of the instance. It is used by ECS instances in different VPCs for communication.', example='172.17.**.**'),
    privateIpAddress?: {
      ipAddress?: [ string ](name='IpAddress')
    }(name='PrivateIpAddress', description='The private IP address of the instance.'),
    vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance is connected.', example='vsw-uf6ixacqz8osrwnqb****'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9e4e9pmbcnj6ki6****'),
  }(name='VpcAttributes', description='The VPC attributes of the instance.'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance resides.', example='cn-hangzhou-g'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewAttributeRequest {
  instanceId?: string(name='InstanceId', description='The IDs of the instances. You can specify up to 100 subscription instance IDs in a single request. Separate multiple instance IDs with commas (,).

> `InstanceId` and `RenewalStatus` cannot be empty at the same time.', example='i-bp18x3z4hc7bixhx****,i-bp1g6zv0ce8oghu7****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: string(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.

Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  renewalStatus?: string(name='RenewalStatus', description='The auto-renewal state of the instance. Valid values:

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not to be renewed. The system sends no more expiration reminders, but sends only a non-renewal reminder three days before the expiration date. For an instance that is not to be renewed, you can call the [ModifyInstanceAutoRenewAttribute](~~52843~~) operation to change its auto-renewal status to `Normal`. Then, you can manually renew the instance or enable auto-renewal for the instance.', example='AutoRenewal'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewEnabled?: boolean(name='AutoRenewEnabled', description='Indicates whether auto-renewal is enabled.', example='false'),
      duration?: int32(name='Duration', description='The auto-renewal duration.', example='1'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp18x3z4hc7bixhx****'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the auto-renewal duration.', example='week'),
      renewalStatus?: string(name='RenewalStatus', description='The auto-renewal state of the instance. Valid values:

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not to be renewed. The system sends no more expiration reminders, but sends only a non-renewal reminder three days before the expiration date. For an instance that is not to be renewed, you can call the [ModifyInstanceAutoRenewAttribute](~~52843~~) operation to change its auto-renewal status to `Normal`. Then, you can manually renew the instance or enable auto-renewal for the instance.', example='Normal'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes', description='The renewal attributes of instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of queried instances.', example='6'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

/**
  * *   Before you configure auto-renewal or manual renewal for subscription instances, you can query the auto-renewal status of the instances.
  * *   This operation is applicable to only subscription instances. An error is returned if you call this operation on pay-as-you-go instances.
  *
  * @param request DescribeInstanceAutoRenewAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceAutoRenewAttributeResponse
 */
async function describeInstanceAutoRenewAttributeWithOptions(request: DescribeInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAutoRenewAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you configure auto-renewal or manual renewal for subscription instances, you can query the auto-renewal status of the instances.
  * *   This operation is applicable to only subscription instances. An error is returned if you call this operation on pay-as-you-go instances.
  *
  * @param request DescribeInstanceAutoRenewAttributeRequest
  * @return DescribeInstanceAutoRenewAttributeResponse
 */
async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeInstanceHistoryEventsRequest {
  eventPublishTime?: {
    end?: string(name='End', description='The end of the time range in which to query published system events. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-01T06:32:31Z'),
    start?: string(name='Start', description='The beginning of the time range in which to query published system events. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T06:32:31Z'),
  }(name='EventPublishTime'),
  notBefore?: {
    end?: string(name='End', description='The latest scheduled end time for the system event. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-01T06:32:31Z'),
    start?: string(name='Start', description='The earliest scheduled start time for the system event. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T06:32:31Z'),
  }(name='NotBefore'),
  eventCycleStatus?: string(name='EventCycleStatus', description='The lifecycle state of the system event. This parameter takes effect only when InstanceEventCycleStatus.N is not specified. Valid values:

*   Scheduled
*   Avoided
*   Executing
*   Executed
*   Canceled
*   Failed
*   Inquiring', example='Executed'),
  eventId?: [ string ](name='EventId', description='The ID of system event N. Valid values of N: 1 to 100. You can repeat this parameter to pass multiple values.', example='e-uf64yvznlao4jl2c****'),
  eventType?: string(name='EventType', description='The type of the system event. This parameter takes effect only when InstanceEventType.N is not specified. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system error.
*   SystemFailure.Redeploy: The instance is redeployed due to a system error.
*   SystemFailure.Delete: The instance is released due to an instance creation failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance error.
*   InstanceExpiration.Stop: The subscription instance is stopped due to expiration.
*   InstanceExpiration.Delete: The subscription instance is released due to expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.

>  For more information, see [Overview](~~66574~~). The values of this parameter are applicable only to instance system events, but not to disk system events.', example='SystemMaintenance.Reboot'),
  impactLevel?: string(name='ImpactLevel', description='>  This parameter is not publicly available.', example='null'),
  instanceEventCycleStatus?: [ string ](name='InstanceEventCycleStatus', description='The lifecycle state of system event N. Valid values of N: 1 to 7. You can repeat this parameter to pass multiple values. Valid values:

*   Scheduled
*   Avoided
*   Executing
*   Executed
*   Canceled
*   Failed
*   Inquiring', example='Executed'),
  instanceEventType?: [ string ](name='InstanceEventType', description='The type of system event N. Valid values of N: 1 to 30. You can repeat this parameter to pass multiple values. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemMaintenance.Redeploy: The instance is redeployed due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system error.
*   SystemFailure.Redeploy: The instance is redeployed due to a system error.
*   SystemFailure.Delete: The instance is released due to an instance creation failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance error.
*   InstanceExpiration.Stop: The subscription instance is stopped due to expiration.
*   InstanceExpiration.Delete: The subscription instance is released due to expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.

>  For more information, see [Overview](~~66574~~). The values of this parameter are applicable only to instance system events, but not to disk system events.', example='SystemMaintenance.Reboot'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. If this parameter is not specified, the system events of all instances in the specified region are queried.', example='i-uf678mass4zvr9n1****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call [DescribeRegions](~~25609~~) to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the resource belongs.', example='rg-bp67acfmxazb4p****'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N. Valid values of N: 1 to 100. You can repeat this parameter to pass multiple values. Valid values:

*   When `ResourceType` is set to instance, ResourceId.N specifies the ID of instance N.
*   When `ResourceType` is set to ddh, ResourceId.N specifies the ID of dedicated host N.
*   When `ResourceType` is set to managedhost, ResourceId.N specifies the ID of physical machine N from a smart hosting pool.

If this parameter is not specified, the system events of all resources of the type specified by `ResourceType` in the region specified by `RegionId` are queried.

>  We recommend that you use `ResourceId.N` to specify one or more resource IDs. If you specify both `ResourceId.N` and `InstanceId`, `ResourceId.N` takes precedence by default.', example='i-uf678mass4zvr9n1****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   ddh: dedicated host
*   managehost: physical machine in a smart hosting pool

Default value: instance.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
}

model DescribeInstanceHistoryEventsResponseBody = {
  instanceSystemEventSet?: {
    instanceSystemEventType?: [ 
    {
      eventCycleStatus?: {
        code?: int32(name='Code', description='The state code of the system event.', example='0'),
        name?: string(name='Name', description='The state name of the system event.', example='Executed'),
      }(name='EventCycleStatus', description='The lifecycle state of the system event.'),
      eventFinishTime?: string(name='EventFinishTime', description='The time when the system event ended. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-01T06:35:31Z'),
      eventId?: string(name='EventId', description='The ID of the system event.', example='e-uf64yvznlao4jl2c****'),
      eventPublishTime?: string(name='EventPublishTime', description='The time when the system event was published. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-11-30T06:32:31Z'),
      eventType?: {
        code?: int32(name='Code', description='The code of the system event type.', example='34'),
        name?: string(name='Name', description='The name of the system event type.', example='InstanceExpiration.Stop'),
      }(name='EventType', description='The type of the system event.'),
      extendedAttribute?: {
        canAccept?: string(name='CanAccept', description='Indicates whether the event can be handled.', example='true'),
        code?: string(name='Code', description='The code of the security violation.', example='PR111'),
        device?: string(name='Device', description='The device name of the local disk.', example='/dev/vda'),
        diskId?: string(name='DiskId', description='The ID of the local disk.', example='d-diskid1'),
        hostId?: string(name='HostId', description='The ID of the host.', example='dh-bp1ewce1gk3iwv2****'),
        hostType?: string(name='HostType', description='The type of the host. Valid values:

- ddh: dedicated host
- managehost: physical machine in a smart hosting pool', example='ddh'),
        inactiveDisks?: {
          inactiveDisk?: [ 
          {
            creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-11-30T06:32:31Z'),
            deviceCategory?: string(name='DeviceCategory', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_efficiency'),
            deviceSize?: string(name='DeviceSize', description='The size of the disk. Unit: GiB.', example='80'),
            deviceType?: string(name='DeviceType', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='data'),
            releaseTime?: string(name='ReleaseTime', description='The time when the disk was released. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-11-30T06:32:31Z'),
          }
        ](name='InactiveDisk')
        }(name='InactiveDisks', description='The information about the inactive disks that have been released and must be cleared.'),
        migrationOptions?: {
          migrationOption?: [ string ](name='MigrationOption')
        }(name='MigrationOptions', description='The migration solution of the instance. Valid value: MigrationPlan, which indicates that instances can be migrated only by using migration plans.'),
        onlineRepairPolicy?: string(name='OnlineRepairPolicy', description='The online repair policy for the damaged disk. Valid value: IsolateOnly, which indicates that damaged disks are isolated but not repaired.', example='IsolateOnly'),
        punishDomain?: string(name='PunishDomain', description='The illegal domain name.', example='1228.test.com'),
        punishType?: string(name='PunishType', description='The type of the penalty.', example='ecs_message_alert'),
        punishUrl?: string(name='PunishUrl', description='The illegal URL.', example='http://1228.test.com/1'),
        rack?: string(name='Rack', description='The rack number of the cloud box.', example='A01'),
        responseResult?: string(name='ResponseResult'),
      }(name='ExtendedAttribute', description='The extended attribute of the system event.'),
      impactLevel?: string(name='ImpactLevel', description='The impact level of the system event.', example='100'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-uf678mass4zvr9n1****'),
      notBefore?: string(name='NotBefore', description='The scheduled start time of the system event. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2017-12-06T00:00:00Z'),
      reason?: string(name='Reason', description='The reason why the system event was scheduled.', example='System maintenance is scheduled due to ***.'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   ddh: dedicated host
*   managehost: physical machine in a smart hosting pool', example='instance'),
    }
  ](name='InstanceSystemEventType')
  }(name='InstanceSystemEventSet', description='The information about instance system events.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances returned.', example='2'),
}

model DescribeInstanceHistoryEventsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceHistoryEventsResponseBody(name='body'),
}

/**
  * *   You can query system events that were completed within the last 30 days. No limits apply to the time range for querying uncompleted system events.
  * *   You can also specify InstanceEventCycleStatus to query the system events that are in the Scheduled, Executing, or Inquiring state.
  *
  * @param request DescribeInstanceHistoryEventsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceHistoryEventsResponse
 */
async function describeInstanceHistoryEventsWithOptions(request: DescribeInstanceHistoryEventsRequest, runtime: Util.RuntimeOptions): DescribeInstanceHistoryEventsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventCycleStatus)) {
    query['EventCycleStatus'] = request.eventCycleStatus;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.impactLevel)) {
    query['ImpactLevel'] = request.impactLevel;
  }
  if (!Util.isUnset(request.instanceEventCycleStatus)) {
    query['InstanceEventCycleStatus'] = request.instanceEventCycleStatus;
  }
  if (!Util.isUnset(request.instanceEventType)) {
    query['InstanceEventType'] = request.instanceEventType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.eventPublishTime)) {
    query['EventPublishTime'] = request.eventPublishTime;
  }
  if (!Util.isUnset(request.notBefore)) {
    query['NotBefore'] = request.notBefore;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceHistoryEvents',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can query system events that were completed within the last 30 days. No limits apply to the time range for querying uncompleted system events.
  * *   You can also specify InstanceEventCycleStatus to query the system events that are in the Scheduled, Executing, or Inquiring state.
  *
  * @param request DescribeInstanceHistoryEventsRequest
  * @return DescribeInstanceHistoryEventsResponse
 */
async function describeInstanceHistoryEvents(request: DescribeInstanceHistoryEventsRequest): DescribeInstanceHistoryEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHistoryEventsWithOptions(request, runtime);
}

model DescribeInstanceMaintenanceAttributesRequest {
  instanceId?: [ string ](name='InstanceId', description='The instance IDs. You can specify up to 100 instance IDs.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceMaintenanceAttributesResponseBody = {
  maintenanceAttributes?: {
    maintenanceAttribute?: [ 
    {
      actionOnMaintenance?: {
        defaultValue?: string(name='DefaultValue', description='The default maintenance action.', example='AutoRecover'),
        supportedValues?: {
          supportedValue?: [ string ](name='SupportedValue')
        }(name='SupportedValues', description='The supported maintenance actions.'),
        value?: string(name='Value', description='The current maintenance action. Valid values:

*   Stop: stops the instance.
*   AutoRecover: automatically recovers the instance.
*   AutoRedeploy: redeploys the instance, which may damage the data disks attached to the instance.', example='Stop'),
      }(name='ActionOnMaintenance', description='The attributes of the maintenance action of the instance.'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
      maintenanceWindows?: {
        maintenanceWindow?: [ 
        {
          endTime?: string(name='EndTime', description='The end time of the maintenance window.', example='18:00:00'),
          startTime?: string(name='StartTime', description='The start time of the maintenance window.', example='02:00:00'),
        }
      ](name='MaintenanceWindow')
      }(name='MaintenanceWindows', description='The maintenance windows.'),
      notifyOnMaintenance?: boolean(name='NotifyOnMaintenance', description='Indicates whether an event notification was sent before maintenance.', example='false'),
    }
  ](name='MaintenanceAttribute')
  }(name='MaintenanceAttributes', description='The maintenance attributes.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of queried maintenance attributes.', example='100'),
}

model DescribeInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceMaintenanceAttributesResponseBody(name='body'),
}

/**
  * This operation is used to query the specified maintenance policy of an instance, which contains the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the action that you specify in response to instance shutdown.
  *
  * @param request DescribeInstanceMaintenanceAttributesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceMaintenanceAttributesResponse
 */
async function describeInstanceMaintenanceAttributesWithOptions(request: DescribeInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceMaintenanceAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is used to query the specified maintenance policy of an instance, which contains the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the action that you specify in response to instance shutdown.
  *
  * @param request DescribeInstanceMaintenanceAttributesRequest
  * @return DescribeInstanceMaintenanceAttributesResponse
 */
async function describeInstanceMaintenanceAttributes(request: DescribeInstanceMaintenanceAttributesRequest): DescribeInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model DescribeInstanceModificationPriceRequest {
  systemDisk?: {
    category?: string(name='Category', description='The category of the system disk. You must specify this parameter only when you upgrade a non-I/O optimized instance of a retired instance type to an I/O optimized instance of an available instance type. For more information about instance types, see [Instance families](~~25378~~) and [Retired instance types](~~55263~~).

Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD

This parameter is empty by default.', example='cloud_ssd'),
  }(name='SystemDisk'),
  dataDisk?: [ 
    {
      category?: string(name='Category', description='The category of data disk N. You can specify this parameter if you want to query the pricing information about newly attached subscription data disks. Valid values of N: 1 to 16. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   cloud: basic disk

This parameter is empty by default.

> When you call the DescribeInstanceModificationPrice operation, you must specify at least one of the following parameters: `InstanceType` and `DataDisk.N.*`.', example='cloud_essd'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of data disk N that is an enhanced SSD (ESSD). The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

Default value: PL1.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      size?: int32(name='Size', description='The capacity of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values:

*   Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depends on the value of `DataDisk.N.PerformanceLevel`.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud: 5 to 2000.

The default value is the minimum capacity allowed for the specified data disk category.', example='100'),
    }
  ](name='DataDisk', description='The information about the data disk.'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to query pricing information for a configuration upgrade.', example='i-bp1f2o4ldh8l****'),
  instanceType?: string(name='InstanceType', description='The new instance type. We recommend that you call the [DescribeResourcesModification](~~66187~~) operation to query the instance types available for configuration upgrades in a specified zone.

> When you call the DescribeInstanceModificationPrice operation, you must specify at least one of the following parameters: `InstanceType` and `DataDisk.N.*`.', example='ecs.g6e.large'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceModificationPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit.

Alibaba Cloud China site (aliyun.com): CNY

Alibaba Cloud International site (alibabacloud.com): USD', example='CNY'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='61.320'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='175.200'),
      tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='113.880'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.', example='Upgrade offers'),
        ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1234567890'),
      }
    ](name='Rule')
    }(name='Rules', description='The promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and promotion rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A3DC3196-379B-4F32-A2C5-B937134FAD8A'),
}

model DescribeInstanceModificationPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceModificationPriceResponseBody(name='body'),
}

/**
  * *   Pricing information can be queried for unexpired subscription ECS instances only when you upgrade their configurations. The pricing information cannot be queried when the instance configurations are downgraded.
  * *   Pricing information cannot be queried for pay-as-you-go ECS instances when you change their configurations. Prices of existing pay-as-you-go ECS instances whose configurations are changed are the same as those of new pay-as-you-go instances. You can call the [DescribePrice](~~107829~~) operation to query the latest prices of ECS instances.
  * *   Before you upgrade the configurations of an instance, we recommend that you call the [DescribeResourcesModification](~~66187~~) operation to query the instance types available for configuration upgrades in a specified zone.
  *
  * @param request DescribeInstanceModificationPriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceModificationPriceResponse
 */
async function describeInstanceModificationPriceWithOptions(request: DescribeInstanceModificationPriceRequest, runtime: Util.RuntimeOptions): DescribeInstanceModificationPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceModificationPrice',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Pricing information can be queried for unexpired subscription ECS instances only when you upgrade their configurations. The pricing information cannot be queried when the instance configurations are downgraded.
  * *   Pricing information cannot be queried for pay-as-you-go ECS instances when you change their configurations. Prices of existing pay-as-you-go ECS instances whose configurations are changed are the same as those of new pay-as-you-go instances. You can call the [DescribePrice](~~107829~~) operation to query the latest prices of ECS instances.
  * *   Before you upgrade the configurations of an instance, we recommend that you call the [DescribeResourcesModification](~~66187~~) operation to query the instance types available for configuration upgrades in a specified zone.
  *
  * @param request DescribeInstanceModificationPriceRequest
  * @return DescribeInstanceModificationPriceResponse
 */
async function describeInstanceModificationPrice(request: DescribeInstanceModificationPriceRequest): DescribeInstanceModificationPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceModificationPriceWithOptions(request, runtime);
}

model DescribeInstanceMonitorDataRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (`ss`) is not `00`, the time is rounded up to the next minute.', example='2014-10-30T08:00:00Z'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1a36962lrhj4ab****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The interval at which to retrieve monitoring data. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (`ss`) is not `00`, the time is rounded up to the next minute.', example='2014-10-29T23:00:00Z'),
}

model DescribeInstanceMonitorDataResponseBody = {
  monitorData?: {
    instanceMonitorData?: [ 
    {
      BPSRead?: int32(name='BPSRead', description='The read bandwidth of the cloud disks (system disk and data disks). Unit: Byte/s.', example='1000'),
      BPSWrite?: int32(name='BPSWrite', description='The write bandwidth of the cloud disks (system disk and data disks). Unit: Byte/s.', example='13585'),
      CPU?: int32(name='CPU', description='The vCPU utilization of the instance. Unit: percent (%).', example='2'),
      CPUAdvanceCreditBalance?: float(name='CPUAdvanceCreditBalance', description='The overdrawn CPU credits of the burstable instance.', example='0.4'),
      CPUCreditBalance?: float(name='CPUCreditBalance', description='The total number of CPU credits of the burstable instance.', example='120'),
      CPUCreditUsage?: float(name='CPUCreditUsage', description='The number of CPU credits consumed by the burstable instance.', example='30'),
      CPUNotpaidSurplusCreditUsage?: float(name='CPUNotpaidSurplusCreditUsage', description='The unpaid overdrawn CPU credits.', example='0.5'),
      IOPSRead?: int32(name='IOPSRead', description='The number of read I/O operations per second on the cloud disks (system disk and data disks).', example='1000'),
      IOPSWrite?: int32(name='IOPSWrite', description='The number of write I/O operations per second on the cloud disks (system disk and data disks).', example='200'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1a36962lrhj4****'),
      internetBandwidth?: int32(name='InternetBandwidth', description='The public bandwidth of the instance. Unit: Kbit/s.', example='10'),
      internetRX?: int32(name='InternetRX', description='The Internet traffic received by the instance during the period that is specified by the `Period` parameter. The period starts from the point in time that is specified by the `TimeStamp` parameter. Unit: Kbit.', example='122'),
      internetTX?: int32(name='InternetTX', description='The Internet traffic sent by the instance during the period that is specified by the `Period` parameter. The period starts from the point in time that is specified by the `TimeStamp` parameter. Unit: Kbit.', example='343'),
      intranetBandwidth?: int32(name='IntranetBandwidth', description='The internal bandwidth of the instance. Unit: Kbit/s.', example='10'),
      intranetRX?: int32(name='IntranetRX', description='The internal data traffic received by the instance during the period that is specified by the `Period` parameter. The period starts from the point in time that is specified by the `TimeStamp` parameter. Unit: Kbit.', example='122'),
      intranetTX?: int32(name='IntranetTX', description='The internal data traffic sent by the instance during the period that is specified by the `Period` parameter. The period starts from the point in time that is specified by the `TimeStamp` parameter. Unit: Kbit.', example='343'),
      timeStamp?: string(name='TimeStamp', description='The timestamp of the monitoring data.', example='2014-10-30T05:00:00Z'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData', description='The monitoring data of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInstanceMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceMonitorDataResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   Up to 400 monitoring data entries can be returned at a time. An error is returned if the value that is calculated by using the following formula is greater than 400: `(EndTime − StartTime)/Period`.
  * *   You can query the monitoring data of the last 30 days. If the value of the `StartTime` parameter is more than 30 days earlier than the current time, an error is returned.
  * *   In some scenarios, such as when the instance is in the Stopped state, the system cannot obtain the relevant information and a portion may be missing from the returned monitoring data.
  *
  * @param request DescribeInstanceMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceMonitorDataResponse
 */
async function describeInstanceMonitorDataWithOptions(request: DescribeInstanceMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeInstanceMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   Up to 400 monitoring data entries can be returned at a time. An error is returned if the value that is calculated by using the following formula is greater than 400: `(EndTime − StartTime)/Period`.
  * *   You can query the monitoring data of the last 30 days. If the value of the `StartTime` parameter is more than 30 days earlier than the current time, an error is returned.
  * *   In some scenarios, such as when the instance is in the Stopped state, the system cannot obtain the relevant information and a portion may be missing from the returned monitoring data.
  *
  * @param request DescribeInstanceMonitorDataRequest
  * @return DescribeInstanceMonitorDataResponse
 */
async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMonitorDataWithOptions(request, runtime);
}

model DescribeInstanceRamRoleRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of instances. You can specify up to 100 instance IDs in a single request. You must specify at least one of the `InstanceIds` and `RamRoleName` parameters.', example='["i-bp67acfmxazb1p****", "i-bp67acfmxazb2p****", "bp67acfmxazb3p****"…]'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='10'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created. You must specify at least one of the `InstanceIds` and `RamRoleName` parameters.', example='EcsServiceRole-EcsDocGuideTest'),
  regionId?: string(name='RegionId', description='The region ID of the instance RAM role. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceRamRoleResponseBody = {
  instanceRamRoleSets?: {
    instanceRamRoleSet?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp67acfmxazb4p****'),
      ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='EcsServiceRole-EcsDocGuideTest'),
    }
  ](name='InstanceRamRoleSet')
  }(name='InstanceRamRoleSets', description='Details about the instance RAM roles.'),
  regionId?: string(name='RegionId', description='The region ID of the instance RAM role.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instance RAM roles returned.', example='1'),
}

model DescribeInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceRamRoleResponseBody(name='body'),
}

/**
  * ## Description
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeInstanceRamRoleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceRamRoleResponse
 */
async function describeInstanceRamRoleWithOptions(request: DescribeInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DescribeInstanceRamRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceRamRole',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeInstanceRamRoleRequest
  * @return DescribeInstanceRamRoleResponse
 */
async function describeInstanceRamRole(request: DescribeInstanceRamRoleRequest): DescribeInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRamRoleWithOptions(request, runtime);
}

model DescribeInstanceStatusRequest {
  clusterId?: string(name='ClusterId', description='The cluster ID of the instances.', example='cls-bp67acfmxazb4p****'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances. When you use this parameter to specify multiple instance IDs, separate the IDs with commas(,). Example: `InstanceId.1=i-bp1j4i2jdf3owlhe****, InstanceId.2=i-bp1j4i2jdf3o1234****`.', example='i-bp1j4i2jdf3owlhe****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instances. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-d'),
}

model DescribeInstanceStatusResponseBody = {
  instanceStatuses?: {
    instanceStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1j4i2jdf3owlhe****'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   Pending: The instance is being created.
*   Running: The instance is running.
*   Starting: The instance is being started.
*   Stopping: The instance is being stopped.
*   Stopped: The instance is stopped.', example='Running'),
    }
  ](name='InstanceStatus')
  }(name='InstanceStatuses', description='The status information of the instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances.', example='58'),
}

model DescribeInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceStatusResponseBody(name='body'),
}

/**
  * *   For information about the lifecycle states of an ECS instance, see [Instance states](~~25687~~).
  * *   You can also call this operation to query the list of ECS instances.
  *
  * @param request DescribeInstanceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceStatusResponse
 */
async function describeInstanceStatusWithOptions(request: DescribeInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   For information about the lifecycle states of an ECS instance, see [Instance states](~~25687~~).
  * *   You can also call this operation to query the list of ECS instances.
  *
  * @param request DescribeInstanceStatusRequest
  * @return DescribeInstanceStatusResponse
 */
async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatusWithOptions(request, runtime);
}

model DescribeInstanceTopologyRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of one or more ECS instances. You can specify a maximum of 100 instance IDs.', example='["i-bp67acfmxazb4p****"]'),
  ownerId?: long(name='OwnerId', example='111'),
  regionId?: string(name='RegionId', description='The region ID of the ECS instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
}

model DescribeInstanceTopologyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  topologys?: {
    topology?: [ 
    {
      hostId?: string(name='HostId', description='The ID of the host where the ECS instance resides. This parameter is encrypted and cannot match the ID of the ECS instance. However, if the values of this parameter for different ECS instances are the same, the ECS instances reside on the same host.', example='ZWNobyBo****'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-bp67acfmxazb4p****'),
    }
  ](name='Topology')
  }(name='Topologys', description='Details about the topology.'),
}

model DescribeInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTopologyResponseBody(name='body'),
}

/**
  * > The DescribeInstanceTopology operation is in invitational preview and is not commercially available.
  *
  * @param request DescribeInstanceTopologyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceTopologyResponse
 */
async function describeInstanceTopologyWithOptions(request: DescribeInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeInstanceTopologyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTopology',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > The DescribeInstanceTopology operation is in invitational preview and is not commercially available.
  *
  * @param request DescribeInstanceTopologyRequest
  * @return DescribeInstanceTopologyResponse
 */
async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTopologyWithOptions(request, runtime);
}

model DescribeInstanceTypeFamiliesRequest {
  generation?: string(name='Generation', description='The generation of the instance family. For more information, see [Instance families](~~25378~~). Valid values:

*   ecs-1: Generation I, which consists of the earliest and cost-effective instance types
*   ecs-2: Generation II, which provides upgraded software and hardware and higher performance than Generation I
*   ecs-3: Generation III, which consists of high-performance instance families and is suitable for different business scenarios
*   ecs-4: Generation IV, which consists of enterprise-level instance families (such as g5, c5, and r5), Bare Metal Instance families (such as ebmc5s, ebmg5s, and ebmr5s), and burstable instance families (such as t5) that can meet a wide variety of business requirements with lower latency
*   ecs-5: Generation V, which consists of enterprise-level instance families (such as g6, c6, and r6), Bare Metal Instance families (such as ebmg6, ebmg6e, and ebmc6), and storage enhanced instance families (such as g6e) and delivers quick response and higher performance
*   ecs-6: Generation VI, which consists of enterprise-level instance families (such as hfc7, hfg7, and hfr7) and Bare Metal Instance families (such as ebmhfg7) and is in invitational preview', example='ecs-5'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
}

model DescribeInstanceTypeFamiliesResponseBody = {
  instanceTypeFamilies?: {
    instanceTypeFamily?: [ 
    {
      generation?: string(name='Generation', description='The generation of the instance family.', example='ecs-5'),
      instanceTypeFamilyId?: string(name='InstanceTypeFamilyId', description='The ID of the instance family.', example='ecs.g6'),
    }
  ](name='InstanceTypeFamily')
  }(name='InstanceTypeFamilies', description='Details about instance families.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeInstanceTypeFamiliesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTypeFamiliesResponseBody(name='body'),
}

async function describeInstanceTypeFamiliesWithOptions(request: DescribeInstanceTypeFamiliesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypeFamiliesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.generation)) {
    query['Generation'] = request.generation;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTypeFamilies',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceTypeFamilies(request: DescribeInstanceTypeFamiliesRequest): DescribeInstanceTypeFamiliesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypeFamiliesWithOptions(request, runtime);
}

model DescribeInstanceTypesRequest {
  cpuArchitecture?: string(name='CpuArchitecture', description='The CPU architecture. Valid values:

*   X86
*   ARM', example='X86'),
  GPUSpec?: string(name='GPUSpec', description='The GPU model.

> Fuzzy match is supported. For example, if an instance type provides NVIDIA V100 GPUs and you set this parameter to NVIDIA, information about the instance type is queried.', example='NVIDIA V100'),
  instanceCategory?: string(name='InstanceCategory', description='The category of the instance type. Valid values:

*   General-purpose: general-purpose instance type
*   Compute-optimized: compute-optimized instance type
*   Memory-optimized: memory-optimized instance type
*   Big data: big data instance type
*   Local SSDs: instance type with local SSDs
*   High Clock Speed: instance type with high clock speeds
*   Enhanced: enhanced instance type
*   Shared: shared instance type
*   Compute-optimized with GPU: GPU-accelerated compute-optimized instance type
*   Visual Compute-optimized: visual compute-optimized instance type
*   Heterogeneous Service: heterogeneous service instance type
*   Compute-optimized with FPGA: FPGA-accelerated compute-optimized instance type
*   Compute-optimized with NPU: NPU-accelerated compute-optimized instance type
*   ECS Bare Metal: ECS Bare Metal Instance type
*   Super Computing Cluster: Super Computing Cluster (SCC) instance type', example='Big data'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel: entry level (shared)
*   EnterpriseLevel: enterprise level
*   CreditEntryLevel: credit-based entry level', example='EntryLevel'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family to which the instance type belongs. For information about the valid values of this parameter, see [DescribeInstanceTypeFamilies](~~25621~~).

For more information about instance families, see [Instance families](~~25378~~).', example='ecs.g6'),
  instanceTypes?: [ string ](name='InstanceTypes', description='Instance type N. Valid values of N: 1 to 10. If this parameter is empty, information about all instance types is queried.', example='ecs.g6.large'),
  localStorageCategory?: string(name='LocalStorageCategory', description='The category of local disks. For more information, see [Local disks](~~63138#section_n2w\\_8yc\\_5u1~~). Valid values:

*   local_hdd_pro: local Serial Advanced Technology Attachment (SATA) HDDs, which are used by d1ne or d1 instances
*   local_ssd_pro: local Non-Volatile Memory Express (NVMe) SSDs, which are used by i2, i2g, i1, ga1, or gn5 instances', example='local_ssd_pro'),
  maxResults?: long(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 1600.

Default value: 1600.', example='10'),
  maximumCpuCoreCount?: int32(name='MaximumCpuCoreCount', description='The maximum number of vCPUs. The value must be a positive integer.

> If an instance type has more vCPUs than the specified value, information about the instance type is not queried.', example='10'),
  maximumCpuSpeedFrequency?: float(name='MaximumCpuSpeedFrequency', description='The maximum clock speed.

> If an instance type uses processors that have a higher clock speed than the specified value, information about the instance type is not queried.', example='3.2'),
  maximumCpuTurboFrequency?: float(name='MaximumCpuTurboFrequency', description='The maximum turbo frequency.

> If an instance type uses processors that deliver a higher turbo frequency than the specified value, information about the instance type is not queried.', example='4.1'),
  maximumGPUAmount?: int32(name='MaximumGPUAmount', description='The maximum number of GPUs. The value must be a positive integer.

> If an instance type provides more GPUs than the specified value, information about the instance type is not queried.', example='10'),
  maximumMemorySize?: float(name='MaximumMemorySize', description='The maximum memory size. Unit: GiB.

> If the memory size of an instance type is larger than the specified value, information about the instance type is not queried.', example='60'),
  minimumBaselineCredit?: int32(name='MinimumBaselineCredit', description='The minimum baseline CPU performance (overall baseline performance of all vCPUs) per t5 or t6 burstable instance.

> If a t5 or t6 instance type provides baseline CPU performance that is lower than the specified value, information about the instance type is not queried.', example='12'),
  minimumCpuCoreCount?: int32(name='MinimumCpuCoreCount', description='The minimum number of vCPUs. The value must be a positive integer.

> If an instance type has fewer vCPUs than the specified value, information about the instance type is not queried.', example='2'),
  minimumCpuSpeedFrequency?: float(name='MinimumCpuSpeedFrequency', description='The minimum clock speed.

> If an instance type uses processors that have a lower clock speed than the specified value, information about the instance type is not queried.', example='2.5'),
  minimumCpuTurboFrequency?: float(name='MinimumCpuTurboFrequency', description='The minimum turbo frequency.

> If an instance type uses processors that deliver a lower turbo frequency than the specified value, information about the instance type is not queried.', example='3.2'),
  minimumDiskQuantity?: int32(name='MinimumDiskQuantity', description='The minimum number of cloud disks.

> If an instance type supports fewer cloud disks than the specified value, information about the instance type is not queried.', example='4'),
  minimumEniIpv6AddressQuantity?: int32(name='MinimumEniIpv6AddressQuantity', description='The minimum number of IPv6 addresses per ENI.

> If an instance type supports fewer IPv6 addresses per ENI than the specified value, information about the instance type is not queried.', example='2'),
  minimumEniPrivateIpAddressQuantity?: int32(name='MinimumEniPrivateIpAddressQuantity', description='The minimum number of IPv4 addresses per ENI.

> If an instance type supports fewer IPv4 addresses per ENI than the specified value, information about the instance type is not queried.', example='2'),
  minimumEniQuantity?: int32(name='MinimumEniQuantity', description='The minimum number of elastic network interfaces (ENIs).

> If an instance type supports fewer ENIs than the specified value, information about the instance type is not queried.', example='4'),
  minimumEriQuantity?: int32(name='MinimumEriQuantity', description='The minimum number of ERIs.

> If an instance type supports fewer ERIs than the specified value, information about the instance type is not queried.', example='0'),
  minimumGPUAmount?: int32(name='MinimumGPUAmount', description='The minimum number of GPUs. The value must be a positive integer.

> If an instance type provides fewer GPUs than the specified value, information about the instance type is not queried.', example='3'),
  minimumInitialCredit?: int32(name='MinimumInitialCredit', description='The minimum initial CPU credits per t5 or t6 burstable instance.

> If a t5 or t6 instance type provides less initial vCPU credits than the specified value, information about the instance type is not queried.', example='12'),
  minimumInstanceBandwidthRx?: int32(name='MinimumInstanceBandwidthRx', description='The minimum inbound internal bandwidth. Unit: Kbit/s.

> If an instance type provides an inbound internal bandwidth that is lower than the specified value, information about the instance type is not queried.', example='12288'),
  minimumInstanceBandwidthTx?: int32(name='MinimumInstanceBandwidthTx', description='The minimum outbound internal bandwidth. Unit: Kbit/s.

> If an instance type provides an outbound internal bandwidth that is lower than the specified value, information about the instance type is not queried.', example='12288'),
  minimumInstancePpsRx?: long(name='MinimumInstancePpsRx', description='The minimum inbound packet forwarding rate over the internal network. Unit: pps.

> If an instance type provides an inbound packet forwarding rate over the internal network that is lower than the specified value, information about the instance type is not queried.', example='15'),
  minimumInstancePpsTx?: long(name='MinimumInstancePpsTx', description='The minimum outbound packet forwarding rate over the internal network. Unit: pps.

> If an instance type provides an outbound packet forwarding rate over the internal network that is lower than the specified value, information about the instance type is not queried.', example='15'),
  minimumLocalStorageAmount?: int32(name='MinimumLocalStorageAmount', description='The minimum number of local disks.

> If an instance type supports fewer local disks than the specified value, information about the instance type is not queried.', example='4'),
  minimumLocalStorageCapacity?: long(name='MinimumLocalStorageCapacity', description='The capacity of each local disk. Unit: GiB.', example='40'),
  minimumMemorySize?: float(name='MinimumMemorySize', description='The minimum memory size. Unit: GiB.

> If the memory size of an instance type is smaller than the specified value, information about the instance type is not queried.', example='20'),
  minimumPrimaryEniQueueNumber?: int32(name='MinimumPrimaryEniQueueNumber', description='The minimum default number of queues per primary network interface controller (NIC).

> If an instance type supports fewer queues per primary NIC than the specified value, information about the instance type is not queried.', example='8'),
  minimumQueuePairNumber?: int32(name='MinimumQueuePairNumber', description='The minimum number of queue pair (QP) queues per elastic RDMA interface (ERI).

> If an instance type supports fewer QP queues per ERI than the specified value, information about the instance type is not queried.', example='8'),
  minimumSecondaryEniQueueNumber?: int32(name='MinimumSecondaryEniQueueNumber', description='The minimum default number of queues per secondary NIC.

> If an instance type supports fewer queues per secondary NIC than the specified value, information about the instance type is not queried.', example='4'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the NextToken value returned in the previous call to the DescribeInstanceTypes operation. Leave this parameter empty the first time you call this operation.', example='e71d8a535bd9cc11'),
  nvmeSupport?: string(name='NvmeSupport', description='Specifies whether cloud disks can be attached by using the NVMe protocol. Valid values:

*   required: Cloud disks can be attached by using the NVMe protocol.
*   unsupported: Cloud disk cannot be attached by using the NVMe protocol.', example='required'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalProcessorModel?: string(name='PhysicalProcessorModel', description='The CPU model.

> Fuzzy match is supported. For example, if an instance type uses Intel Xeon (Ice Lake) Platinum 8369B processors and you set this parameter to Intel, information about the instance type is queried.', example='Intel Xeon(Ice Lake) Platinum 8369B'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceTypesResponseBody = {
  instanceTypes?: {
    instanceType?: [ 
    {
      baselineCredit?: int32(name='BaselineCredit', description='The baseline CPU performance (overall baseline performance of all vCPUs) per t5 or t6 burstable instance.', example='4'),
      cpuArchitecture?: string(name='CpuArchitecture', description='The CPU architecture. Valid values:

*   X86
*   ARM', example='X86'),
      cpuCoreCount?: int32(name='CpuCoreCount', description='The number of vCPUs.', example='4'),
      cpuSpeedFrequency?: float(name='CpuSpeedFrequency', description='The CPU base frequency. Unit: GHz.', example='2.7'),
      cpuTurboFrequency?: float(name='CpuTurboFrequency', description='The CPU turbo frequency. Unit: GHz.', example='3.5'),
      diskQuantity?: int32(name='DiskQuantity', description='The maximum number of cloud disks.', example='17'),
      eniIpv6AddressQuantity?: int32(name='EniIpv6AddressQuantity', description='The maximum number of IPv6 addresses per ENI.', example='1'),
      eniPrivateIpAddressQuantity?: int32(name='EniPrivateIpAddressQuantity', description='The maximum number of IPv4 addresses per ENI.', example='10'),
      eniQuantity?: int32(name='EniQuantity', description='The maximum number of ENIs.', example='3'),
      eniTotalQuantity?: int32(name='EniTotalQuantity', description='The maximum number of NICs, including the primary NIC, ENIs, and trunk NICs.

> This parameter is in invitational preview and is unavailable to general users.', example='0'),
      eniTrunkSupported?: boolean(name='EniTrunkSupported', description='Indicates whether NICs on instances of the instance type support trunking.

> This parameter is in invitational preview and is unavailable to general users.', example='true'),
      eriQuantity?: int32(name='EriQuantity', description='The number of ERIs.

> This parameter is in invitational preview and is unavailable to general users.', example='0'),
      GPUAmount?: int32(name='GPUAmount', description='The number of GPUs.', example='0'),
      GPUMemorySize?: float(name='GPUMemorySize', description='The amount of GPU memory per GPU. Unit: GiB.', example='32'),
      GPUSpec?: string(name='GPUSpec', description='The GPU model.', example='NVIDIA V100'),
      initialCredit?: int32(name='InitialCredit', description='The initial vCPU credits per t5 or t6 burstable instance.', example='120InstancePpsTx'),
      instanceBandwidthRx?: int32(name='InstanceBandwidthRx', description='The maximum inbound internal bandwidth. Unit: Kbit/s.', example='1024000'),
      instanceBandwidthTx?: int32(name='InstanceBandwidthTx', description='The maximum outbound internal bandwidth. Unit: Kbit/s.', example='1024000'),
      instanceCategory?: string(name='InstanceCategory', description='The category of the instance type. Valid values:

*   General-purpose: general-purpose instance type
*   Compute-optimized: compute-optimized instance type
*   Memory-optimized: memory-optimized instance type
*   Big data: big data instance type
*   Local SSDs: instance type with local SSDs
*   High Clock Speed: instance type with high clock speeds
*   Enhanced: enhanced instance type
*   Shared: shared instance type
*   Compute-optimized with GPU: GPU-accelerated compute-optimized instance type
*   Visual Compute-optimized: visual compute-optimized instance type
*   Heterogeneous Service: heterogeneous service instance type
*   Compute-optimized with FPGA: FPGA-accelerated compute-optimized instance type
*   Compute-optimized with NPU: NPU-accelerated compute-optimized instance type
*   ECS Bare Metal: ECS Bare Metal Instance type
*   Super Computing Cluster: SCC instance type', example='Big data'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel: entry level (shared).
*   EnterpriseLevel: enterprise level.
*   CreditEntryLevel: credit-based entry level. For more information, see [Overview](~~59977~~).', example='EnterpriseLevel'),
      instancePpsRx?: long(name='InstancePpsRx', description='The inbound packet forwarding rate over the internal network. Unit: pps.', example='500000'),
      instancePpsTx?: long(name='InstancePpsTx', description='The outbound packet forwarding rate over the internal network. Unit: pps.', example='500000'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family.', example='ecs.g6'),
      instanceTypeId?: string(name='InstanceTypeId', description='The ID of the instance type.', example='ecs.g6.large'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of local disks.', example='1'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The capacity of each local disk. Unit: GiB.', example='5000'),
      localStorageCategory?: string(name='LocalStorageCategory', description='The category of local disks. For more information, see [Local disks](~~63138~~). Valid values:

*   local_hdd_pro: local SATA HDDs, which are used by d1ne or d1 instances
*   local_ssd_pro: local NVMe SSDs, which are used by i2, i2g, i1, ga1, or gn5 instances', example='local_ssd_pro'),
      maximumQueueNumberPerEni?: int32(name='MaximumQueueNumberPerEni', description='The maximum number of queues per ENI (including primary ENI and secondary ENI).', example='4'),
      memorySize?: float(name='MemorySize', description='The memory size. Unit: GiB.', example='16'),
      networkCardQuantity?: int32(name='NetworkCardQuantity', description='The number of NICs.', example='100'),
      networkCards?: {
        networkCardInfo?: [ 
        {
          networkCardIndex?: int32(name='NetworkCardIndex', description='The index of the NIC.', example='1'),
        }
      ](name='NetworkCardInfo')
      }(name='NetworkCards', description='Details about NICs.'),
      networkEncryptionSupport?: boolean(name='NetworkEncryptionSupport', description='Indicates whether to allow network traffic transmitted over virtual private clouds (VPCs) to be encrypted. Valid values:

*   true: allows network traffic transmitted over VPCs to be encrypted.
*   false: does not allow network traffic transmitted over VPCs to be encrypted.', example='true'),
      nvmeSupport?: string(name='NvmeSupport', description='Indicates whether cloud disks can be attached by using the NVMe protocol. Valid values:

*   required: Cloud disks can be attached by using the NVMe protocol.
*   unsupported: Cloud disk cannot be attached by using the NVMe protocol.', example='unsupported'),
      physicalProcessorModel?: string(name='PhysicalProcessorModel', description='The CPU model.', example='Intel Xeon(Ice Lake) Platinum 8369B'),
      primaryEniQueueNumber?: int32(name='PrimaryEniQueueNumber', description='The default number of queues per primary NIC.', example='4'),
      queuePairNumber?: int32(name='QueuePairNumber', description='The maximum number of QP queues per ERI.', example='22'),
      secondaryEniQueueNumber?: int32(name='SecondaryEniQueueNumber', description='The default number of queues per secondary ENI.', example='4'),
      totalEniQueueQuantity?: int32(name='TotalEniQueueQuantity', description='The maximum number of queues on ENIs that the instance type supports.', example='12'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes', description='Details about the instance types.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='e71d8a535bd9cc11'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='00827261-20B7-4562-83F2-4DF39876A45A'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

/**
  * ## Description
  * Before you call this operation, take note of the following items:
  * *   The MaxResults parameter specifies the maximum number of entries to return on each page. The maximum value of this parameter is changed from 1600 to 100. If you called this operation in 2022, you can continue to use 1600 as the maximum value of MaxResults until November 15, 2023. As of November 15, 2023, only 100 can be used as the maximum value of MaxResults. If you do not specify the NextToken parameter when you call the DescribeInstanceTypes operation, only the first page of results that contains up to 100 entries is returned. If you want to retrieve more results, specify the NextToken parameter to perform paged queries, or specify filter conditions to filter results. For information about the best practices for using DescribeInstanceTypes, see [Compare the specifications of instance types](https://help.aliyun.com/practice_detail/461278) .
  * *   We recommend that you specify the MaxResults and NextToken parameters to perform paged queries. The first time you call the DescribeInstanceTypes operation, specify MaxResults to limit the maximum number of entries to return in the call. If the number of entries to return exceeds the specified value of MaxResults, the response includes a NextToken value. You can set NextToken to the return value and specify MaxResults in your next request to DescribeInstanceTypes to retrieve the next page of results.
  * *   The DescribeInstanceTypes operation is used to query only the specifications and performance information of instance types. To query instance types that are available in a specific region, call the [DescribeAvailableResource](~~66186~~) operation.
  * *   To use special instance types such as instance types that are unavailable for purchase, [submit a ticket](https://selfservice.console.aliyun.com/ticket/createIndex.htm).
  *
  * @param request DescribeInstanceTypesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceTypesResponse
 */
async function describeInstanceTypesWithOptions(request: DescribeInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cpuArchitecture)) {
    query['CpuArchitecture'] = request.cpuArchitecture;
  }
  if (!Util.isUnset(request.GPUSpec)) {
    query['GPUSpec'] = request.GPUSpec;
  }
  if (!Util.isUnset(request.instanceCategory)) {
    query['InstanceCategory'] = request.instanceCategory;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.localStorageCategory)) {
    query['LocalStorageCategory'] = request.localStorageCategory;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.maximumCpuCoreCount)) {
    query['MaximumCpuCoreCount'] = request.maximumCpuCoreCount;
  }
  if (!Util.isUnset(request.maximumCpuSpeedFrequency)) {
    query['MaximumCpuSpeedFrequency'] = request.maximumCpuSpeedFrequency;
  }
  if (!Util.isUnset(request.maximumCpuTurboFrequency)) {
    query['MaximumCpuTurboFrequency'] = request.maximumCpuTurboFrequency;
  }
  if (!Util.isUnset(request.maximumGPUAmount)) {
    query['MaximumGPUAmount'] = request.maximumGPUAmount;
  }
  if (!Util.isUnset(request.maximumMemorySize)) {
    query['MaximumMemorySize'] = request.maximumMemorySize;
  }
  if (!Util.isUnset(request.minimumBaselineCredit)) {
    query['MinimumBaselineCredit'] = request.minimumBaselineCredit;
  }
  if (!Util.isUnset(request.minimumCpuCoreCount)) {
    query['MinimumCpuCoreCount'] = request.minimumCpuCoreCount;
  }
  if (!Util.isUnset(request.minimumCpuSpeedFrequency)) {
    query['MinimumCpuSpeedFrequency'] = request.minimumCpuSpeedFrequency;
  }
  if (!Util.isUnset(request.minimumCpuTurboFrequency)) {
    query['MinimumCpuTurboFrequency'] = request.minimumCpuTurboFrequency;
  }
  if (!Util.isUnset(request.minimumDiskQuantity)) {
    query['MinimumDiskQuantity'] = request.minimumDiskQuantity;
  }
  if (!Util.isUnset(request.minimumEniIpv6AddressQuantity)) {
    query['MinimumEniIpv6AddressQuantity'] = request.minimumEniIpv6AddressQuantity;
  }
  if (!Util.isUnset(request.minimumEniPrivateIpAddressQuantity)) {
    query['MinimumEniPrivateIpAddressQuantity'] = request.minimumEniPrivateIpAddressQuantity;
  }
  if (!Util.isUnset(request.minimumEniQuantity)) {
    query['MinimumEniQuantity'] = request.minimumEniQuantity;
  }
  if (!Util.isUnset(request.minimumEriQuantity)) {
    query['MinimumEriQuantity'] = request.minimumEriQuantity;
  }
  if (!Util.isUnset(request.minimumGPUAmount)) {
    query['MinimumGPUAmount'] = request.minimumGPUAmount;
  }
  if (!Util.isUnset(request.minimumInitialCredit)) {
    query['MinimumInitialCredit'] = request.minimumInitialCredit;
  }
  if (!Util.isUnset(request.minimumInstanceBandwidthRx)) {
    query['MinimumInstanceBandwidthRx'] = request.minimumInstanceBandwidthRx;
  }
  if (!Util.isUnset(request.minimumInstanceBandwidthTx)) {
    query['MinimumInstanceBandwidthTx'] = request.minimumInstanceBandwidthTx;
  }
  if (!Util.isUnset(request.minimumInstancePpsRx)) {
    query['MinimumInstancePpsRx'] = request.minimumInstancePpsRx;
  }
  if (!Util.isUnset(request.minimumInstancePpsTx)) {
    query['MinimumInstancePpsTx'] = request.minimumInstancePpsTx;
  }
  if (!Util.isUnset(request.minimumLocalStorageAmount)) {
    query['MinimumLocalStorageAmount'] = request.minimumLocalStorageAmount;
  }
  if (!Util.isUnset(request.minimumLocalStorageCapacity)) {
    query['MinimumLocalStorageCapacity'] = request.minimumLocalStorageCapacity;
  }
  if (!Util.isUnset(request.minimumMemorySize)) {
    query['MinimumMemorySize'] = request.minimumMemorySize;
  }
  if (!Util.isUnset(request.minimumPrimaryEniQueueNumber)) {
    query['MinimumPrimaryEniQueueNumber'] = request.minimumPrimaryEniQueueNumber;
  }
  if (!Util.isUnset(request.minimumQueuePairNumber)) {
    query['MinimumQueuePairNumber'] = request.minimumQueuePairNumber;
  }
  if (!Util.isUnset(request.minimumSecondaryEniQueueNumber)) {
    query['MinimumSecondaryEniQueueNumber'] = request.minimumSecondaryEniQueueNumber;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.nvmeSupport)) {
    query['NvmeSupport'] = request.nvmeSupport;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalProcessorModel)) {
    query['PhysicalProcessorModel'] = request.physicalProcessorModel;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceTypes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * Before you call this operation, take note of the following items:
  * *   The MaxResults parameter specifies the maximum number of entries to return on each page. The maximum value of this parameter is changed from 1600 to 100. If you called this operation in 2022, you can continue to use 1600 as the maximum value of MaxResults until November 15, 2023. As of November 15, 2023, only 100 can be used as the maximum value of MaxResults. If you do not specify the NextToken parameter when you call the DescribeInstanceTypes operation, only the first page of results that contains up to 100 entries is returned. If you want to retrieve more results, specify the NextToken parameter to perform paged queries, or specify filter conditions to filter results. For information about the best practices for using DescribeInstanceTypes, see [Compare the specifications of instance types](https://help.aliyun.com/practice_detail/461278) .
  * *   We recommend that you specify the MaxResults and NextToken parameters to perform paged queries. The first time you call the DescribeInstanceTypes operation, specify MaxResults to limit the maximum number of entries to return in the call. If the number of entries to return exceeds the specified value of MaxResults, the response includes a NextToken value. You can set NextToken to the return value and specify MaxResults in your next request to DescribeInstanceTypes to retrieve the next page of results.
  * *   The DescribeInstanceTypes operation is used to query only the specifications and performance information of instance types. To query instance types that are available in a specific region, call the [DescribeAvailableResource](~~66186~~) operation.
  * *   To use special instance types such as instance types that are unavailable for purchase, [submit a ticket](https://selfservice.console.aliyun.com/ticket/createIndex.htm).
  *
  * @param request DescribeInstanceTypesRequest
  * @return DescribeInstanceTypesResponse
 */
async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypesWithOptions(request, runtime);
}

model DescribeInstanceVncPasswdRequest {
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceVncPasswdResponseBody = {
  requestId?: string(name='RequestId'),
  vncPasswd?: string(name='VncPasswd'),
}

model DescribeInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceVncPasswdResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeInstanceVncPasswdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceVncPasswdResponse
 */
// Deprecated
async function describeInstanceVncPasswdWithOptions(request: DescribeInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncPasswdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceVncPasswd',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeInstanceVncPasswdRequest
  * @return DescribeInstanceVncPasswdResponse
 */
// Deprecated
async function describeInstanceVncPasswd(request: DescribeInstanceVncPasswdRequest): DescribeInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncPasswdWithOptions(request, runtime);
}

model DescribeInstanceVncUrlRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp1hzoinajzkh91h****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  vncUrl?: string(name='VncUrl', description='The URL of the VNC management terminal.', example='wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3DDvh%252FIA%252BYc73gWO48cBx2gBxUDVzaAnSKr74pq30mzqUYgeUMcB%252FbkNixDxdEA996'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   The URL returned is valid only for 15 seconds. If a connection is not established within 15 seconds after a successful query, the URL expires and you must query it again.
  * *   The **KeepAlive** time of a connection to a VNC management terminal is 60 seconds. If you do not interact with the VNC management terminal for 60 seconds, the VNC management terminal is automatically disconnected.
  * *   When you disconnect from the VNC management terminal, you can reconnect to the VNC management terminal up to 30 times a minute.
  * *   You must append the following parameters to the end of the `https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?` URL: `vncUrl`, `instanceId`, `isWindows` (True or False), and `password`. Connect these parameters with ampersands (`&`).
  *     *   `vncUrl:` the `VncUrl` value returned after a successful query.
  *     *   `instanceId:` the ID of your instance.
  *     *   `isWindows:` specifies whether the operating system of the instance is Windows. Set the parameter to `true` if the operating system is Windows. Set the parameter to `false` if the operating system is not Windows.
  *     *   `password:` Optional. A six-character password used to connect to the VNC management terminal. It can contain digits and letters. You do not need to enter your password again when the connection is being established if you set this parameter.
  *         Example:
  *         ```
  *         https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%****&instanceId=i-wz9hhwq5a6tm****&isWindows=true
  *                 
  *         ```
  *         Or:
  *         ```
  *         https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%****&instanceId=i-wz9hhwq5a6tm****&isWindows=true&password=****
  *                
  *         ```
  *
  * @param request DescribeInstanceVncUrlRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceVncUrlResponse
 */
async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceVncUrl',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   The URL returned is valid only for 15 seconds. If a connection is not established within 15 seconds after a successful query, the URL expires and you must query it again.
  * *   The **KeepAlive** time of a connection to a VNC management terminal is 60 seconds. If you do not interact with the VNC management terminal for 60 seconds, the VNC management terminal is automatically disconnected.
  * *   When you disconnect from the VNC management terminal, you can reconnect to the VNC management terminal up to 30 times a minute.
  * *   You must append the following parameters to the end of the `https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?` URL: `vncUrl`, `instanceId`, `isWindows` (True or False), and `password`. Connect these parameters with ampersands (`&`).
  *     *   `vncUrl:` the `VncUrl` value returned after a successful query.
  *     *   `instanceId:` the ID of your instance.
  *     *   `isWindows:` specifies whether the operating system of the instance is Windows. Set the parameter to `true` if the operating system is Windows. Set the parameter to `false` if the operating system is not Windows.
  *     *   `password:` Optional. A six-character password used to connect to the VNC management terminal. It can contain digits and letters. You do not need to enter your password again when the connection is being established if you set this parameter.
  *         Example:
  *         ```
  *         https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%****&instanceId=i-wz9hhwq5a6tm****&isWindows=true
  *                 
  *         ```
  *         Or:
  *         ```
  *         https://g.alicdn.com/aliyun/ecs-console-vnc2/0.0.8/index.html?vncUrl=ws%3A%2F%****&instanceId=i-wz9hhwq5a6tm****&isWindows=true&password=****
  *                
  *         ```
  *
  * @param request DescribeInstanceVncUrlRequest
  * @return DescribeInstanceVncUrlResponse
 */
async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 used to query resources. Set the value to `CreationStartTime`. You can specify a time by setting both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter 1 used to query resources. Set the value to a time. If you specify this parameter, you must also specify the `Filter.1.Key` parameter. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2017-12-05T22:40Z'),
    }
  ](name='Filter'),
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='The value of attribute N. Valid values of N: 1 to 20.', example='META_OPTIONS'),
  deviceAvailable?: boolean(name='DeviceAvailable', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='false'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Default value: false. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether your AccessKey pair is valid, whether RAM users are granted required permissions, and whether the required parameters are specified. If the check fails, the corresponding error is returned. If the check succeeds, the DryRunOperation error code is returned.
*   false: The validity of the request is checked. If the check succeeds, a 2XX HTTP status code is returned and the request is made.', example='false'),
  eipAddresses?: string(name='EipAddresses', description='The elastic IP addresses (EIPs) of instances. This parameter is valid when InstanceNetworkType is set to vpc. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["42.1.1.**", "42.1.2.**", … "42.1.10.**"]'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the High Performance Computing (HPC) cluster to which the instance belongs.', example='hpc-bp67acfmxazb4p****'),
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether the access channel is enabled for instance metadata. Valid values:

*   enabled
*   disabled

Default value: enabled.

>  For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='0'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether the security hardening mode (IMDSv2) is forcefully used to access instance metadata. Valid values:

*   optional: The security hardening mode (IMDSv2) is not forcefully used.
*   required: The security hardening mode (IMDSv2) is forcefully used. After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

>  For more information about modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional'),
  imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp67acfmxazb4p****'),
  innerIpAddresses?: string(name='InnerIpAddresses', description='The internal IP addresses of instances located in the classic network. This parameter is valid when InstanceNetworkType is set to classic. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["10.1.1.1", "10.1.2.1", … "10.1.10.1"]'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PostPaid: pay-as-you-go
*   PrePaid: subscription', example='PostPaid'),
  instanceIds?: string(name='InstanceIds', description='The IDs of instances. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='["i-bp67acfmxazb4p****", "i-bp67acfmxazb4p****", … "i-bp67acfmxazb4p****"]'),
  instanceName?: string(name='InstanceName', description='The name of the instance. Fuzzy search with the asterisk (\\*) wildcard characters is supported.', example='Test'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
  instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the instance.', example='ecs.g5'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

>  When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instances, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  ioOptimized?: boolean(name='IoOptimized', description='Specifies whether the instance is I/O optimized.', example='true'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N of the elastic network interface (ENI). You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair bound to the instance.', example='KeyPairNameTest'),
  lockReason?: string(name='LockReason', description='The reason why the instance is locked. Valid values:

*   financial: The instance is locked due to overdue payments.
*   security: The instance is locked due to security reasons.
*   recycling: The preemptible instance is locked and pending release.
*   dedicatedhostfinancial: The instance is locked due to overdue payments for the dedicated host.
*   refunded: The instance is locked because a refund is made for the instance.', example='security'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Maximum value: 100.

Default value:

*   If this parameter is not specified or is set to a value smaller than 10, the default value is 10.
*   If this parameter is set to a value greater than 100, the default value is 100.', example='10'),
  needSaleCycle?: boolean(name='NeedSaleCycle', description='>  This parameter is currently in invitational preview and unavailable for general users.', example='false'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to the DescribeInstances operation.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  privateIpAddresses?: string(name='PrivateIpAddresses', description='The private IP addresses of instances located in VPCs. This parameter is valid when InstanceNetworkType is set to vpc. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["172.16.1.1", "172.16.2.1", … "172.16.10.1"]'),
  publicIpAddresses?: string(name='PublicIpAddresses', description='The public IP addresses of instances. The value can be a JSON array that consists of up to 100 IP addresses. Separate the IP addresses with commas (,).', example='["42.1.1.**", "42.1.2.**", … "42.1.10.**"]'),
  rdmaIpAddresses?: string(name='RdmaIpAddresses', description='The Remote Direct Memory Access (RDMA) IP address of the HPC instance.', example='10.10.10.102'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the instance belongs.', example='sg-bp67acfmxazb4p****'),
  status?: string(name='Status', description='The state of the instance. Valid values:

*   Pending: The instance is being created.
*   Running: The instance is running.
*   Starting: The instance is being started.
*   Stopping: The instance is being stopped.
*   Stopped: The instance is stopped.', example='Running'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the instance. Valid values of N: 1 to 20.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the instance. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the instance is connected.', example='vsw-bp67acfmxazb4p****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the instance belongs.', example='v-bp67acfmxazb4p****'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the pay-as-you-go instance.', example='2017-12-10T04:04Z'),
      clusterId?: string(name='ClusterId', description='The ID of the cluster to which the instance belongs.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='c-bp67acfmxazb4p****'),
      cpu?: int32(name='Cpu', description='The number of vCPUs.', example='8'),
      cpuOptions?: {
        coreCount?: int32(name='CoreCount', description='The number of physical CPU cores.', example='2'),
        numa?: string(name='Numa', description='The number of threads allocated. Valid value: 2.', example='2'),
        threadsPerCore?: int32(name='ThreadsPerCore', description='The number of threads per CPU core.', example='4'),
      }(name='CpuOptions', description='Details about the CPU options.'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: standard mode. For more information, see the "Standard mode" section in [Overview](~~59977~~).
*   Unlimited: unlimited mode. For more information, see the "Unlimited mode" section in [Overview](~~59977~~).', example='Standard'),
      dedicatedHostAttribute?: {
        dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp67acfmxazb4h****'),
        dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp67acfmxazb4p****'),
        dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host.', example='testDedicatedHostName'),
      }(name='DedicatedHostAttribute', description='Details about the dedicated host. It is an array that consists of the DedicatedHostClusterId, DedicatedHostId, and DedicatedHostName parameters.'),
      dedicatedInstanceAttribute?: {
        affinity?: string(name='Affinity', description='Indicates whether the instance on the dedicated host is associated with the dedicated host. Valid values: 

- default: The instance is not associated with the dedicated host. When the instance is started from economical mode, the instance may be automatically deployed on another dedicated host in the automatic deployment resource pool.
- host: The instance is associated with the dedicated host. When the instance is started from economical mode, the instance is still deployed on the original dedicated host.', example='default'),
        tenancy?: string(name='Tenancy', description='Indicates whether the instance is hosted on a dedicated host. Valid values:

- default: The instance is not hosted on a dedicated host.
- host: The instance is hosted on a dedicated host.', example='default'),
      }(name='DedicatedInstanceAttribute', description='The attributes of the instance on the dedicated host.'),
      deletionProtection?: boolean(name='DeletionProtection', description='The release protection attribute of the instance. This parameter indicates whether you can use the ECS console or call the DeleteInstance operation to release the instance.

*   true: Release protection is enabled for the instance.
*   false: Release protection is disabled for the instance.

>  This parameter is applicable only to pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false'),
      deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group to which the instance belongs in a deployment set.', example='1'),
      deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set in which the instance is deployed.', example='ds-bp67acfmxazb4p****'),
      description?: string(name='Description', description='The description of the instance.', example='testDescription'),
      deviceAvailable?: boolean(name='DeviceAvailable', description='Indicates whether data disks can be attached to the instance.', example='true'),
      ecsCapacityReservationAttr?: {
        capacityReservationId?: string(name='CapacityReservationId', description='The ID of the capacity reservation.', example='cr-bp67acfmxazb4p****'),
        capacityReservationPreference?: string(name='CapacityReservationPreference', description='The preference of the capacity reservation.', example='cr-bp67acfmxazb4p****'),
      }(name='EcsCapacityReservationAttr', description='Details about the capacity reservation related to the instance.'),
      eipAddress?: {
        allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='eip-2ze88m67qx5z****'),
        bandwidth?: int32(name='Bandwidth', description='The maximum public bandwidth of the EIP. Unit: Mbit/s.', example='5'),
        internetChargeType?: string(name='InternetChargeType', description='The billing method of the EIP. Valid values: 

- PayByBandwidth
- PayByTraffic', example='PayByTraffic'),
        ipAddress?: string(name='IpAddress', description='The EIP.', example='42.112.**.**'),
        isSupportUnassociate?: boolean(name='IsSupportUnassociate', description='Indicates whether the EIP can be disassociated.', example='true'),
      }(name='EipAddress', description='Details about the EIP associated with the instance.'),
      expiredTime?: string(name='ExpiredTime', description='The time when the instance expires. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      GPUAmount?: int32(name='GPUAmount', description='The number of GPUs for the instance type.', example='4'),
      GPUSpec?: string(name='GPUSpec', description='The category of GPUs for the instance type.', example='NVIDIA V100'),
      hibernationOptions?: {
        configured?: boolean(name='Configured', description='>  This parameter is in invitational preview and is unavailable for general users.', example='false'),
      }(name='HibernationOptions', description='>  This parameter is in invitational preview and is unavailable for general users.'),
      hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
      hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster to which the instance belongs.', example='hpc-bp67acfmxazb4p****'),
      ISP?: string(name='ISP', description='>  This parameter is in invitational preview and is unavailable for general users.', example='null'),
      imageId?: string(name='ImageId', description='The ID of the image that the instance is running.', example='m-bp67acfmxazb4p****'),
      imageOptions?: {
        loginAsNonRoot?: boolean(name='LoginAsNonRoot', description='Indicates whether the instance that uses the image supports logons of the ecs-user user. Valid values: 

- true: The instance that uses the image supports logons of the ecs-user user.
- false: The instance that uses the image does not support logons of the ecs-user user.', example='false'),
      }(name='ImageOptions', description='Details about the image options.'),
      innerIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='InnerIpAddress', description='The internal IP addresses of the instance located in the classic network.'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='PostPaid'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='InstanceNameTest'),
      instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic
*   vpc', example='vpc'),
      instanceType?: string(name='InstanceType', description='The instance type of the instance.', example='ecs.g5.large'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family of the instance.', example='ecs.g5'),
      internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic', example='PayByTraffic'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s.', example='50'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s.', example='5'),
      ioOptimized?: boolean(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
      keyPairName?: string(name='KeyPairName', description='The name of the key pair bound to the instance.', example='testKeyPairName'),
      localStorageAmount?: int32(name='LocalStorageAmount', description='The number of local disks attached to the instance.', example='2'),
      localStorageCapacity?: long(name='LocalStorageCapacity', description='The capacity of local disks attached to the instance.', example='1000'),
      memory?: int32(name='Memory', description='The memory size of the instance. Unit: MiB.', example='16384'),
      metadataOptions?: {
        httpEndpoint?: string(name='HttpEndpoint', description='Indicates whether the access channel is enabled for instance metadata. Valid values:

- enabled
- disabled', example='enabled'),
        httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='>  This parameter is unavailable.', example='0'),
        httpTokens?: string(name='HttpTokens', description='Indicates whether the security hardening mode (IMDSv2) is forcefully used to access instance metadata. Valid values: 

- optional: The security hardening mode (IMDSv2) is not forcefully used.
- required: The security hardening mode (IMDSv2) is forcefully used.', example='optional'),
      }(name='MetadataOptions', description='Details about the metadata options.'),
      networkInterfaces?: {
        networkInterface?: [ 
        {
          ipv4PrefixSets?: {
            ipv4PrefixSet?: [ 
            {
              ipv4Prefix?: string(name='Ipv4Prefix', description='The IPv4 prefix.', example='47.122.*.*/19'),
            }
          ](name='Ipv4PrefixSet')
          }(name='Ipv4PrefixSets', description='The sets of IPv4 prefix.'),
          ipv6PrefixSets?: {
            ipv6PrefixSet?: [ 
            {
              ipv6Prefix?: string(name='Ipv6Prefix', description='The IPv6 prefix.', example='2001:1111:*:*::/64'),
            }
          ](name='Ipv6PrefixSet')
          }(name='Ipv6PrefixSets', description='The sets of IPv6 prefix.'),
          ipv6Sets?: {
            ipv6Set?: [ 
            {
              ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2408:4321:180:1701:94c7:bc38:3bfa:***'),
            }
          ](name='Ipv6Set')
          }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI. This parameter has a value only when the `AdditionalAttributes.N` request parameter is set to `NETWORK_PRIMARY_ENI_IP`.'),
          macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:32:b4:**'),
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-2zeh9atclduxvf1z****'),
          primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the ENI.', example='172.17.**.***'),
          privateIpSets?: {
            privateIpSet?: [ 
            {
              primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address.', example='true'),
              privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the instance to which the ENI is bound.', example='172.17.**.**'),
            }
          ](name='PrivateIpSet')
          }(name='PrivateIpSets', description='Details about the private IP address.'),
          type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary', example='Primary'),
        }
      ](name='NetworkInterface')
      }(name='NetworkInterfaces', description='Details about the ENIs bound to the instance.'),
      OSName?: string(name='OSName', description='The name of the operating system of the instance.', example='CentOS  7.4 64 位'),
      OSNameEn?: string(name='OSNameEn', description='The English name of the operating system of the instance.', example='CentOS  7.4 64 bit'),
      OSType?: string(name='OSType', description='The type of the operating system of the instance. Valid values:

*   windows
*   linux', example='linux'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockMsg?: string(name='LockMsg', description='The message returned when the instance was locked.', example='The specified instance is locked due to financial reason.'),
          lockReason?: string(name='LockReason', description='The reason why the instance was locked. Valid values:

- financial: The instance was locked due to overdue payments.
- security: The instance was locked due to security reasons.
- recycling: The preemptible instance was locked and pending release.
- dedicatedhostfinancial: The instance was locked due to overdue payments for the dedicated host.
- refunded: The instance was locked because a refund was made for the instance.', example='Recycling'),
        }
      ](name='LockReason')
      }(name='OperationLocks', description='The reasons why the instance was locked.'),
      publicIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='PublicIpAddress', description='The public IP addresses of the instance.'),
      rdmaIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='RdmaIpAddress', description='The RDMA IP addresses of the HPC instance.'),
      recyclable?: boolean(name='Recyclable', description='Indicates whether the instance can be recycled.', example='false'),
      regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs.', example='rg-bp67acfmxazb4p****'),
      saleCycle?: string(name='SaleCycle', description='>  The parameter is discontinued.', example='month'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds', description='The IDs of the security groups to which the instance belongs.'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the instance.', example='51d1353b-22bf-4567-a176-8b3e12e4****'),
      spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   Protection periods of 2, 3, 4, 5, and 6 hours are in invitational preview. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that the preemptible instance has no protection period.

>  This parameter is returned when the SpotStrategy parameter is set to SpotWithPriceLimit or SpotAsPriceGo.', example='1'),
      spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. It can be accurate to three decimal places. This parameter is valid only when the SpotStrategy parameter is set to SpotWithPriceLimit.', example='0.98'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.', example='NoSpot'),
      startTime?: string(name='StartTime', description='The time when the instance was last started. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC. For more information, see [ISO 8601](~~25696~~).', example='2017-12-10T04:04Z'),
      status?: string(name='Status', description='The state of the instance.', example='Running'),
      stoppedMode?: string(name='StoppedMode', description='Indicates whether the instance continues to be billed after it is stopped. Valid values:

*   KeepCharging: The instance is stopped in standard mode. The billing of the instance continues after the instance is stopped, and resources are retained for the instance.
*   StopCharging: The instance is stopped in economical mode. The billing of some resources of the instance stops after the instance is stopped. When the instance is stopped, its resources such as vCPUs, memory, and public IP address are released. The instance may be unable to start again if some required resources are out of stock in the current region.
*   Not-applicable: The instance does not support economical mode.', example='KeepCharging'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the instance.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the instance.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the instance.'),
      vlanId?: string(name='VlanId', description='The virtual LAN (VLAN) ID of the instance.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='10'),
      vpcAttributes?: {
        natIpAddress?: string(name='NatIpAddress', description='The NAT IP address of the instance. It is used by ECS instances in different VPCs for communication.', example='172.17.**.**'),
        privateIpAddress?: {
          ipAddress?: [ string ](name='IpAddress')
        }(name='PrivateIpAddress', description='The private IP addresses of the instance.'),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-2zeh0r1pabwtg6wcs****'),
        vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2zeuphj08tt7q3brd****'),
      }(name='VpcAttributes', description='The VPC attributes of the instance.'),
      zoneId?: string(name='ZoneId', description='The zone ID of the instance.', example='cn-hangzhou-g'),
    }
  ](name='Instance')
  }(name='Instances', description='Details about the instances.'),
  nextToken?: string(name='NextToken', description='The query token returned in this call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances returned.

>  If you specify the `MaxResults` and `NextToken` parameters to perform a paged query, the value of the `TotalCount` response parameter is invalid.', example='1'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesResponseBody(name='body'),
}

/**
  * * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
  * * If you are using a Resource Access Management (RAM) user or RAM role that does not have the permissions to call this operation, an empty list is returned. You can include the `DryRun` parameter in your request to check whether the empty list is caused by lack of permissions.
  * * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  * * You can use one of the following methods to check the responses:
  *     * Method 1: During a paged query, when you call the DescribeInstances operation to retrieve the first page of results, set `MaxResults` to specify the maximum number of entries to return in the call. The return value of `NextToken` is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeInstances operation to retrieve a new page of results, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  *     * Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `MaxResults` or `NextToken` is specified, the `PageSize` and `PageNumber` request parameters do not take effect and the `TotalCount` response parameter is invalid.
  *
  * @param request DescribeInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstancesResponse
 */
async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionalAttributes)) {
    query['AdditionalAttributes'] = request.additionalAttributes;
  }
  if (!Util.isUnset(request.deviceAvailable)) {
    query['DeviceAvailable'] = request.deviceAvailable;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.eipAddresses)) {
    query['EipAddresses'] = request.eipAddresses;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.innerIpAddresses)) {
    query['InnerIpAddresses'] = request.innerIpAddresses;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.needSaleCycle)) {
    query['NeedSaleCycle'] = request.needSaleCycle;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIpAddresses)) {
    query['PrivateIpAddresses'] = request.privateIpAddresses;
  }
  if (!Util.isUnset(request.publicIpAddresses)) {
    query['PublicIpAddresses'] = request.publicIpAddresses;
  }
  if (!Util.isUnset(request.rdmaIpAddresses)) {
    query['RdmaIpAddresses'] = request.rdmaIpAddresses;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * * You can specify multiple request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
  * * If you are using a Resource Access Management (RAM) user or RAM role that does not have the permissions to call this operation, an empty list is returned. You can include the `DryRun` parameter in your request to check whether the empty list is caused by lack of permissions.
  * * When you call an API operation by using Alibaba Cloud CLI, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  * * You can use one of the following methods to check the responses:
  *     * Method 1: During a paged query, when you call the DescribeInstances operation to retrieve the first page of results, set `MaxResults` to specify the maximum number of entries to return in the call. The return value of `NextToken` is a pagination token, which can be used in the next call to retrieve a new page of results. When you call the DescribeInstances operation to retrieve a new page of results, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  *     * Method 2: Use `PageSize` to specify the number of entries to return on each page and then use `PageNumber` to specify the number of the page to return.
  *         You can use only one of the preceding methods. If a large number of entries are to be returned, we recommend that you use method 1. When `MaxResults` or `NextToken` is specified, the `PageSize` and `PageNumber` request parameters do not take effect and the `TotalCount` response parameter is invalid.
  *
  * @param request DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstancesFullStatusRequest {
  eventPublishTime?: {
    end?: string(name='End', description='The end of the period during which system events are published. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-07T00:00:00Z'),
    start?: string(name='Start', description='The beginning of the period during which system events are published. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T00:00:00Z'),
  }(name='EventPublishTime'),
  notBefore?: {
    end?: string(name='End', description='The end of the period during which O\\&M tasks related to scheduled system events are executed. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T00:00:00Z'),
    start?: string(name='Start', description='The beginning of the period during which O\\&M tasks related to scheduled system events are executed. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-12-07T00:00:00Z'),
  }(name='NotBefore'),
  eventId?: [ string ](name='EventId', description='The IDs of the event. You can specify up to 100 event IDs in a single request.', example='e-bp1hygp5b04o56l0****'),
  eventType?: string(name='EventType', description='The type of the system event. This parameter is valid only when the InstanceEventType.N parameter is not specified. Valid values:

*   SystemMaintenance.Reboot: The instance is restarted due to system maintenance.
*   SystemFailure.Reboot: The instance is restarted due to a system failure.
*   InstanceFailure.Reboot: The instance is restarted due to an instance failure.
*   InstanceExpiration.Stop: The subscription instance is stopped due to expiration.
*   InstanceExpiration.Delete: The subscription instance is released due to expiration.
*   AccountUnbalanced.Stop: The pay-as-you-go instance is stopped due to an overdue payment.
*   AccountUnbalanced.Delete: The pay-as-you-go instance is released due to an overdue payment.', example='InstanceExpiration.Stop'),
  healthStatus?: string(name='HealthStatus', description='The health state of the instance. Valid values:

*   Impaired: The instance is impaired.
*   Warning: The performance of the instance is degraded.
*   Maintaining: The instance is being maintained.
*   Initializing: The instance is being initialized.
*   InsufficientData: The state cannot be determined due to insufficient data.
*   NotApplicable: The state is not applicable.

All these values are case-sensitive.', example='Maintaining'),
  instanceEventType?: [ string ](name='InstanceEventType', description='The types of system events. You can specify up to 30 event types in a single request.', example='InstanceExpiration.Stop'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances. You can specify up to 100 instance IDs in a single request.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. The value must be a positive integer.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The lifecycle state of the instance. Valid values:

*   Starting
*   Running
*   Stopped', example='Running'),
}

model DescribeInstancesFullStatusResponseBody = {
  instanceFullStatusSet?: {
    instanceFullStatusType?: [ 
    {
      healthStatus?: {
        code?: int32(name='Code', description='The code of the health state.', example='64'),
        name?: string(name='Name', description='The name of the health state.', example='Warning'),
      }(name='HealthStatus', description='The health state of the instance.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
      scheduledSystemEventSet?: {
        scheduledSystemEventType?: [ 
        {
          eventCycleStatus?: {
            code?: int32(name='Code', description='The code of the event state.', example='24'),
            name?: string(name='Name', description='The name of the event state.', example='Scheduled'),
          }(name='EventCycleStatus', description='The state of the event.'),
          eventId?: string(name='EventId', description='The ID of the event.', example='e-bp1hygp5b04o56l0****'),
          eventPublishTime?: string(name='EventPublishTime', description='The time when the event was published. The time is displayed in UTC.', example='2017-11-30T06:32:31Z'),
          eventType?: {
            code?: int32(name='Code', description='The code of the event type.', example='1'),
            name?: string(name='Name', description='The name of the event type.', example='SystemMaintenance.Reboot'),
          }(name='EventType', description='The type of the event.'),
          extendedAttribute?: {
            device?: string(name='Device', description='The device name of the local disk.', example='/dev/vdb'),
            diskId?: string(name='DiskId', description='The ID of the local disk.', example='d-bp67acfmxazb4p****'),
            inactiveDisks?: {
              inactiveDisk?: [ 
              {
                creationTime?: string(name='CreationTime', description='The time when the disk was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2018-07-27T13:53:25Z'),
                deviceCategory?: string(name='DeviceCategory', description='The category of the disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)
*   local_ssd_pro: I/O-intensive local disk
*   local_hdd_pro: throughput-intensive local disk
*   ephemeral: retired local disk
*   ephemeral_ssd: retired local SSD', example='cloud_ssd'),
                deviceSize?: string(name='DeviceSize', description='The size of the disk. Unit: GiB.', example='80'),
                deviceType?: string(name='DeviceType', description='The type of the disk. Valid values:

*   system: system disk
*   data: data disk', example='system'),
                releaseTime?: string(name='ReleaseTime', description='The time when the disk was released. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2019-07-27T13:53:25Z'),
              }
            ](name='InactiveDisk')
            }(name='InactiveDisks', description='Details about the inactive cloud disks or local disks that have been released and must be cleared.'),
          }(name='ExtendedAttribute', description='The extended attributes of system events generated for instances that have local disks attached.'),
          impactLevel?: string(name='ImpactLevel', description='The impact level of the event.', example='100'),
          notBefore?: string(name='NotBefore', description='The scheduled time when to execute the O\\&M task related to the event. The time is displayed in UTC.', example='2017-12-07T00:00:00Z'),
          reason?: string(name='Reason', description='The reason why the event was scheduled.', example='A simulated event.'),
        }
      ](name='ScheduledSystemEventType')
      }(name='ScheduledSystemEventSet', description='Details about the scheduled system events.'),
      status?: {
        code?: int32(name='Code', description='The code of the instance lifecycle state.', example='1'),
        name?: string(name='Name', description='The name of the instance lifecycle state.', example='Running'),
      }(name='Status', description='The lifecycle state of the instance.'),
    }
  ](name='InstanceFullStatusType')
  }(name='InstanceFullStatusSet', description='Details about the full status information of instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeInstancesFullStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstancesFullStatusResponseBody(name='body'),
}

/**
  * The response includes instance states and instance system events that are in the Scheduled state.
  * If a period is specified, events are queried based on the specified period.
  *
  * @param request DescribeInstancesFullStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstancesFullStatusResponse
 */
async function describeInstancesFullStatusWithOptions(request: DescribeInstancesFullStatusRequest, runtime: Util.RuntimeOptions): DescribeInstancesFullStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.eventType)) {
    query['EventType'] = request.eventType;
  }
  if (!Util.isUnset(request.healthStatus)) {
    query['HealthStatus'] = request.healthStatus;
  }
  if (!Util.isUnset(request.instanceEventType)) {
    query['InstanceEventType'] = request.instanceEventType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.eventPublishTime)) {
    query['EventPublishTime'] = request.eventPublishTime;
  }
  if (!Util.isUnset(request.notBefore)) {
    query['NotBefore'] = request.notBefore;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstancesFullStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The response includes instance states and instance system events that are in the Scheduled state.
  * If a period is specified, events are queried based on the specified period.
  *
  * @param request DescribeInstancesFullStatusRequest
  * @return DescribeInstancesFullStatusResponse
 */
async function describeInstancesFullStatus(request: DescribeInstancesFullStatusRequest): DescribeInstancesFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesFullStatusWithOptions(request, runtime);
}

model DescribeInvocationResultsRequest {
  commandId?: string(name='CommandId', description='The execution results.', example='c-hz0jdfwcsr****'),
  contentEncoding?: string(name='ContentEncoding', description='The number of entries to return on each page.

Maximum value: 50.

Default value: 10.', example='PlainText'),
  includeHistory?: boolean(name='IncludeHistory', description='The information about the tag.', example='false'),
  instanceId?: string(name='InstanceId', description='The page number of the returned page.', example='i-bp1i7gg30r52z2em****'),
  invokeId?: string(name='InvokeId', description='The ID of the command execution.', example='t-hz0jdfwd9f****'),
  invokeRecordStatus?: string(name='InvokeRecordStatus', description='The page number of the page to return.

Pages start from page 1.

Default value: 1.', example='Running'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The ID of the command.', example='1'),
  pageSize?: long(name='PageSize', description='The ID of the container.', example='1'),
  regionId?: string(name='RegionId', description='The number of entries returned per page.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The name of the user who ran the command on the instance.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The ID of the instance', example='TestKey'),
      value?: string(name='Value', description='The execution state of the command.', example='TestValue'),
    }
  ](name='Tag', description='The error code returned when the command cannot be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   InstanceNotExists: The specified instance does not exist is released.
*   InstanceReleased: The instance was released while the command was being run on the instance.
*   InstanceNotRunning: The instance is not in the Running state while the command is being run.
*   CommandNotApplicable: The command is not applicable to the specified instance.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The cron expression used to specify the execution time is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client is not responding.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The request to send the command timed out.
*   ExecutionTimeout: The command execution timed out.
*   ExecutionException: An exception occurred while the command was being run.
*   ExecutionInterrupted: The execution was interrupted.
*   ExitCodeNonzero: The command execution is complete, but the exit code is not 0.'),
}

model DescribeInvocationResultsResponseBody = {
  invocation?: {
    invocationResults?: {
      invocationResult?: [ 
      {
        commandId?: string(name='CommandId', description='The ID of the request.', example='c-hz0jdfwcsr****'),
        containerId?: string(name='ContainerId', description='The container ID.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
        containerName?: string(name='ContainerName', description='The name of the container.', example='test-container'),
        dropped?: int32(name='Dropped', description='The key of the tag.', example='0'),
        errorCode?: string(name='ErrorCode', description='The tags of the command execution.', example='InstanceNotExists'),
        errorInfo?: string(name='ErrorInfo', description='The name of the container.', example='the specified instance does not exists'),
        exitCode?: long(name='ExitCode', description='The error message returned when the command is not successfully sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   the specified instance does not exists: The specified instance does not exist is released.
*   the instance has released when create task: The instance was released while the command was being run on the instance.
*   the instance is not running when create task: The instance is not in the Running state while the command is being run.
*   the command is not applicable: The command is not applicable to the specified instance.
*   the specified account does not exists: The specified account does not exist.
*   the specified directory does not exists: The specified directory does not exist.
*   the cron job expression is invalid: The cron expression that specifies the execution time is invalid.
*   the aliyun service is not running on the instance: The Cloud Assistance client is not running.
*   the aliyun service in the instance does not response: The Cloud Assistant client is not responding.
*   the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
*   the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
*   the command delivery has been timeout: The request to send the command timed out.
*   the command execution has been timeout: The command execution timed out.
*   the command execution got an exception: An exception occurred while the command is being run.
*   the command execution has been interrupted: The command execution was interrupted.
*   the command execution exit code is not zero: The command execution is complete, but the exit code is not 0.', example='0'),
        finishedTime?: string(name='FinishedTime', description='The ID of the command execution. You can call the [DescribeInvocations](~~64840~~) operation to query the execution IDs.', example='2019-12-20T06:15:56Z'),
        instanceId?: string(name='InstanceId', description='The key of tag N of the command execution. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources with this tag can be returned. If multiple tags are specified to query resources, up to 1,000 resources with all these tags can be returned. To query more than 1,000 resources with specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='i-bp1i7gg30r52z2em****'),
        invocationStatus?: string(name='InvocationStatus', description='The exit code of the command execution.

*   For Linux instances, the value is the exit code of the shell command.
*   For Windows instances, the value is the exit code of the batch or PowerShell command.', example='Success'),
        invokeId?: string(name='InvokeId', description='The ID of the instance.', example='t-hz0jdfwd9f****'),
        invokeRecordStatus?: string(name='InvokeRecordStatus', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='Running'),
        output?: string(name='Output', description='The execution state on a single instance. Valid values:

*   Pending: The command is being verified or sent.

*   Invalid: The specified command type or parameter is invalid.

*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and the command is sent to the instance within 1 minute.

*   Running: The command is being run on the instance.

*   Success:

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The last execution succeeds, the exit code is 0, and the specified cycle ends.

*   Failed:

    *   Command that is set to run only once: The execution is complete, but the exit code is not 0.
    *   Command that is set to run on a schedule: The last execution is complete, the exit code is not 0, and the specified cycle is about to end.

*   Error: The execution cannot proceed due to an exception.

*   Timeout: The execution times out.

*   Cancelled: The execution is canceled, and the command is not run.

*   Stopping: The running command is being stopped.

*   Terminated: The command is terminated while it is being run.

*   Scheduled:

    *   Command that is set to run only once: The command is not applicable.
    *   Command that is set to run on a schedule: The command is waiting to be run.', example='MTU6MzA6MDEK'),
        repeats?: int32(name='Repeats', description='The value of the tag.', example='0'),
        startTime?: string(name='StartTime', description='The total number of the commands.', example='2019-12-20T06:15:55Z'),
        stopTime?: string(name='StopTime', description='The encoding method of the `Output` response parameter. Valid values:

*   PlainText: returns the original command content and command output.
*   Base64: returns the Base64-encoded command content and command output.

Default value: Base64.', example='2020-01-19T09:15:47Z'),
        tags?: {
          tag?: [ 
          {
            tagKey?: string(name='TagKey', description='The tag key of the command task.', example='owner'),
            tagValue?: string(name='TagValue', description='The tag value of the command task.', example='zhangsan'),
          }
        ](name='Tag')
        }(name='Tags', description='The tags of the command task.'),
        username?: string(name='Username', description='Queries the execution results of one or more Cloud Assistant commands on an Elastic Compute Service (ECS) instance.', example='test'),
      }
    ](name='InvocationResult')
    }(name='InvocationResults', description='The tags to use for query.'),
    pageNumber?: long(name='PageNumber', description='The execution state of the command. Valid values:

*   Running
*   Finished
*   Failed
*   Stopped

> To ensure compatibility, we recommend that you use the `InvocationStatus` parameter instead of the InvokeRecordStatus parameter.', example='1'),
    pageSize?: long(name='PageSize', description='The information about the tag.', example='1'),
    totalCount?: long(name='TotalCount', description='Specifies whether to return the results of historical scheduled executions. Valid values:

*   true: returns the results of historical scheduled executions. When this parameter is set to true, the `InvokeId` parameter must be set to the ID of a scheduled execution.
*   false: does not return the results of historical scheduled executions.

Default value: false.', example='1'),
  }(name='Invocation', description='The time when the command stopped being run on the instance. If you called the `StopInvocation` operation to manually stop the execution, the value is the time when you called the operation.'),
  requestId?: string(name='RequestId', description='The size of the text that is truncated and discarded when the `Output` value exceeds 24 KB in size.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model DescribeInvocationResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationResultsResponseBody(name='body'),
}

/**
  * The number of times that the command is run on the instance.
  * *   If the command is set to run only once on the instance, the value is 0 or 1.
  * *   If the command is set to run on a schedule on the instance, the value is the number of times that the command is run.
  *
  * @param request DescribeInvocationResultsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationResultsResponse
 */
async function describeInvocationResultsWithOptions(request: DescribeInvocationResultsRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.includeHistory)) {
    query['IncludeHistory'] = request.includeHistory;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.invokeRecordStatus)) {
    query['InvokeRecordStatus'] = request.invokeRecordStatus;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocationResults',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The number of times that the command is run on the instance.
  * *   If the command is set to run only once on the instance, the value is 0 or 1.
  * *   If the command is set to run on a schedule on the instance, the value is the number of times that the command is run.
  *
  * @param request DescribeInvocationResultsRequest
  * @return DescribeInvocationResultsResponse
 */
async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultsWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  commandId?: string(name='CommandId', description='The command ID. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.', example='c-hz0jdfwcsr****'),
  commandName?: string(name='CommandName', description='The command name.', example='CommandTestName'),
  commandType?: string(name='CommandType', description='The command type. If this parameter and `InstanceId` are both specified, this parameter does not take effect.', example='RunShellScript'),
  contentEncoding?: string(name='ContentEncoding', description='The encoding mode of the `CommandContent` and `Output` response parameters. Valid values:

*   PlainText: returns the original command content and command outputs.
*   Base64: returns the Base64-encoded command content and command outputs.

Default value: Base64.', example='PlainText'),
  includeOutput?: boolean(name='IncludeOutput', description='Specifies whether to return the command outputs in the response.

*   true: The command outputs are returned. When this parameter is set to true, you must specify `InvokeId`, `InstanceId`, or both.
*   false: The command outputs are not returned.

Default value: false', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of instance N. When you specify this parameter, the system queries all the execution records of all the commands that run on the instance.', example='i-bp1i7gg30r52z2em****'),
  invokeId?: string(name='InvokeId', description='The command task ID.', example='t-hz0jdfwd9f****'),
  invokeStatus?: string(name='InvokeStatus', description='The overall execution state of the command. The value of this parameter depends on the execution states on all involved instances. Valid values:

*   Running:

    *   Scheduled execution: Before you manually stop the execution of the command, the overall execution state is always Running.
    *   One-time execution: If the execution is in progress on one or more instances, the overall execution state is Running.

*   Finished:

    *   Scheduled execution: The overall execution state can never be Finished.
    *   One-time execution: The execution is complete on all instances, or the execution is manually stopped on some instances and is complete on other instances.

*   Failed:

    *   Scheduled execution: The overall execution state can never be Failed.
    *   One-time execution: The execution fails on all instances.

*   PartialFailed:

    *   Scheduled execution: The overall execution state can never be PartialFailed.
    *   One-time execution: The execution fails on some instances.

*   Stopped: The execution is stopped.', example='Finished'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number of the page to return.

Page numbers start from 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return per page.

Maximum value: 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  repeatMode?: string(name='RepeatMode', description='The execution mode of the command. Valid values:

*   Once: immediately runs the command.
*   Period: The command is run on a schedule.
*   NextRebootOnly: The command is automatically run the next time the instance starts.
*   EveryReboot: The command is automatically run every time the instance starts.

This parameter is empty by default, which indicates that commands run in all modes are queried.', example='Once'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. After you set this parameter, command execution results in the specified resource group are queried.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command. You can specify up to 20 tag keys for the command. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. You can specify up to 20 tag values for the command. The tag value can be an empty string. It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags that are added to the command.'),
  timed?: boolean(name='Timed', description='Specifies whether to query commands that are to be automatically run. Valid values:

*   true: queries commands that meet the following requirements: The commands are run by calling the `RunCommand` or `InvokeCommand` operation with `RepeatMode` set to `Period`, `NextRebootOnly`, or `EveryReboot`. The executions of the commands are not canceled and not complete or are not stopped and not complete.

*   false: queries commands that meet the following requirements:

    *   The commands are run by calling the `RunCommand` or `InvokeCommand` operation with `RepeatMode` set to `Once`.
    *   The executions of the commands are canceled, stopped, or complete.

Default value: false.', example='true'),
}

model DescribeInvocationsResponseBody = {
  invocations?: {
    invocation?: [ 
    {
      commandContent?: string(name='CommandContent', description='The Base64-encoded command content.', example='cnBtIC1xYSB8IGdyZXAgdnNm****'),
      commandDescription?: string(name='CommandDescription', description='The command description.', example='testDescription'),
      commandId?: string(name='CommandId', description='The command ID.', example='c-hz0jdfwcsr****'),
      commandName?: string(name='CommandName', description='The command name.', example='CommandTestName'),
      commandType?: string(name='CommandType', description='The command type.', example='RunShellScript'),
      containerId?: string(name='ContainerId', description='The container ID.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
      containerName?: string(name='ContainerName', description='The container name.', example='test-container'),
      creationTime?: string(name='CreationTime', description='The time when the command task was created.', example='2020-01-19T09:15:46Z'),
      frequency?: string(name='Frequency', description='The schedule on which to run the command. For information about the value specifications, see [Cron expression](~~64769~~).', example='0 */20 * * * *'),
      invocationStatus?: string(name='InvocationStatus', description='The overall execution state of the command. The value of this parameter depends on the execution states on all the involved instances. Valid values:

*   Pending: The command is being verified or sent. When the execution state on at least one instance is Pending, the overall execution state is Pending.

*   Scheduled: The command scheduled to run is sent and pending execution. When the execution state on at least one instance is Scheduled, the overall execution state is Scheduled.

*   Running: The command is being run on the instances. When the execution state on at least one instance is Running, the overall execution state is Running.

*   Success: When the execution state on at least one instance is Success and the execution state on other instances is Stopped or Success, the overall execution state is Success.

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The last execution is complete, the exit code is 0, and the specified cycle ends.

*   Failed: When the execution state on all instances is Stopped or Failed, the overall execution state is Failed. When the execution state on an instance is one of the following values, Failed is returned as the overall execution state:

    *   Invalid: The command is invalid.
    *   Aborted: The command failed to be sent.
    *   Failed: The command execution is complete, but the exit code is not 0.
    *   Timeout: The execution timed out.
    *   Error: An error occurred while the command was being run on the instance.

*   Stopping: The command task is being stopped. When the execution state on at least one instance is Stopping, the overall execution state is Stopping.

*   Stopped: The command task is stopped. When the execution state on all instances is Stopped, the overall execution state is Stopped. When the execution state on an instance is one of the following values, Stopped is returned as the overall execution state:

    *   Cancelled: The command task is canceled.
    *   Terminated: The command task is terminated.

*   PartialFailed: The execution is complete on some instances and fails on other instances. When the execution state is Success on some instances and is Failed or Stopped on other instances, the overall execution state is PartialFailed.

> The `InvokeStatus` response parameter functions similarly to this parameter. We recommend that you ignore InvokeStatus and check the value of InvocationStatus.', example='Running'),
      invokeId?: string(name='InvokeId', description='The command task ID.', example='t-hz0jdfwd9f****'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime', description='The start time of the execution.', example='2019-12-20T06:15:54Z'),
          dropped?: int32(name='Dropped', description='The size of the text that is truncated and discarded when the Output value exceeds 24 KB in size.', example='0'),
          errorCode?: string(name='ErrorCode', description='The code that indicates why the command failed to be sent or run. Valid values:

*   If this parameter is empty, the command is run normally.
*   InstanceNotExists: The instance does not exist or was released.
*   InstanceReleased: The instance was released while the command was being run.
*   InstanceNotRunning: The instance was not in the Running state while the command started to be run.
*   CommandNotApplicable: The command is not applicable to the specified instance.
*   AccountNotExists: The specified account does not exist.
*   DirectoryNotExists: The specified directory does not exist.
*   BadCronExpression: The cron expression used to specify a schedule is invalid.
*   ClientNotRunning: The Cloud Assistant client is not running.
*   ClientNotResponse: The Cloud Assistant client does not respond.
*   ClientIsUpgrading: The Cloud Assistant client is being upgraded.
*   ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
*   DeliveryTimeout: The request to send the command timed out.
*   ExecutionTimeout: The execution timed out.
*   ExecutionException: An exception occurs while the command is being run.
*   ExecutionInterrupted: The execution was interrupted.
*   ExitCodeNonzero: The execution is complete, but the exit code is not 0.', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', description='Details about the reason why the command failed to be sent or run. Valid values:

*   If this parameter is empty, the execution is normal.
*   the specified instance does not exists
*   the instance has released when create task
*   the instance is not running when create task
*   the command is not applicable
*   the specified account does not exists
*   the specified directory does not exists
*   the cron job expression is invalid
*   the aliyun service is not running on the instance
*   the aliyun service in the instance does not response
*   the aliyun service in the instance is upgrading now
*   the aliyun service in the instance is upgrading now
*   the command delivery has been timeout
*   the command execution has been timeout
*   the command execution got an exception
*   the command execution has been interrupted
*   the command execution exit code is not zero', example='the specified instance does not exists'),
          exitCode?: long(name='ExitCode', description='The exit code of the execution. Valid values:

*   For Linux instances, the exit code is the exit code of the shell process.
*   For Windows instances, the exit code is the exit code of the batch or PowerShell process.', example='0'),
          finishTime?: string(name='FinishTime', description='The end time of the execution.', example='2019-12-20T06:15:56Z'),
          instanceId?: string(name='InstanceId', description='The instance ID', example='i-bp1i7gg30r52z2em****'),
          instanceInvokeStatus?: string(name='InstanceInvokeStatus', description='The execution state on a single instance.

> We recommend that you ignore this parameter and check the value of the `InvocationStatus` response parameter for the overall execution state.', example='Finished'),
          invocationStatus?: string(name='InvocationStatus', description='The execution state on a single instance. Valid values:

*   Pending: The command is being verified or sent.

*   Invalid: The specified command type or parameter is invalid.

*   Aborted: The command failed to be sent. To send a command to an instance, make sure that the instance is in the Running state and that the command is sent within 1 minute.

*   Running: The command is being run on the instance.

*   Success:

    *   Command that is set to run only once: The execution is complete, and the exit code is 0.
    *   Command that is set to run on a schedule: The previous execution is complete, the exit code is 0, and the specified cycle ends.

*   Failed:

    *   Command that is set to run only once: The execution is complete, but the exit code is not 0.
    *   Command that is set to run on a schedule: The previous execution is complete, the exit code is not 0, and the specified cycle is about to end.

*   Error: The execution cannot proceed due to an exception.

*   Timeout: The execution times out.

*   Cancelled: The execution is canceled, and the command is not started.

*   Stopping: The command task is being stopped.

*   Terminated: The command task is terminated while it is being run.

*   Scheduled:

    *   Command that is set to run only once: The overall execution state can never be Scheduled.
    *   Command that is set to run on a schedule: The command is pending execution.', example='Success'),
          output?: string(name='Output', description='The command output.', example='OutPutTestmsg'),
          repeats?: int32(name='Repeats', description='The number of times that the command is run on the instance.

*   If the execution is a one-time execution, the value is 0 or 1.
*   If the execution is a scheduled execution, the value is the number of times that the command is run.', example='0'),
          startTime?: string(name='StartTime', description='The time when the command started to be run on the instance.', example='2019-12-20T06:15:55Z'),
          stopTime?: string(name='StopTime', description='The time when the command stopped being run on the instance. If you call the `StopInvocation` operation to manually stop the execution, the value is the time when you called the operation.', example='2020-01-19T09:15:47Z'),
          timed?: boolean(name='Timed', description='Indicates whether the command is to be automatically run.', example='false'),
          updateTime?: string(name='UpdateTime', description='The time when the execution state was updated.', example='2020-01-19T09:15:47Z'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances', description='Details about the instances on which the command is run.'),
      invokeStatus?: string(name='InvokeStatus', description='The overall execution state of the command.

> We recommend that you ignore this parameter and check the value of the `InvocationStatus` response parameter for the overall execution state.', example='Finished'),
      parameters?: string(name='Parameters', description='The custom parameters in the command.', example='{}'),
      repeatMode?: string(name='RepeatMode', description='Indicates the execution mode of the command. Valid values:

*   Once: immediately runs the command.
*   Period: The command is run on a schedule.
*   NextRebootOnly: The command is automatically run the next time the instance starts.
*   EveryReboot: automatically runs the command every time the instance starts.', example='Once'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the command task.', example='owner'),
          tagValue?: string(name='TagValue', description='The tag value of the command task.', example='zhangsan'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the command task.'),
      timed?: boolean(name='Timed', description='Indicates whether the command is to be automatically run.', example='false'),
      timeout?: long(name='Timeout', description='The maximum timeout period for the command execution on the instance. Unit: seconds.

When a command cannot be run, the command execution times out. When a command execution times out, the Cloud Assistant client forcefully terminates the command process by canceling the PID of the command.', example='60'),
      username?: string(name='Username', description='The username that was used to run the command on the instance.', example='root'),
      workingDir?: string(name='WorkingDir', description='The execution path of the command.', example='/home/'),
    }
  ](name='Invocation')
  }(name='Invocations', description='Details about the command executions.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', description='The total number of the commands.', example='1'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvocationsResponseBody(name='body'),
}

/**
  * *   After you run a command, the command may not succeed or return the expected result. You can call this operation to query the execution result.
  * *   You can query information about command executions within the last four weeks. A maximum of 100,000 entries of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInvocationsResponse
 */
async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.commandName)) {
    query['CommandName'] = request.commandName;
  }
  if (!Util.isUnset(request.commandType)) {
    query['CommandType'] = request.commandType;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.includeOutput)) {
    query['IncludeOutput'] = request.includeOutput;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.invokeStatus)) {
    query['InvokeStatus'] = request.invokeStatus;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeatMode)) {
    query['RepeatMode'] = request.repeatMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timed)) {
    query['Timed'] = request.timed;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvocations',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you run a command, the command may not succeed or return the expected result. You can call this operation to query the execution result.
  * *   You can query information about command executions within the last four weeks. A maximum of 100,000 entries of execution information can be retained.
  *
  * @param request DescribeInvocationsRequest
  * @return DescribeInvocationsResponse
 */
async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeKeyPairsRequest {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='Details about the key pairs.', example='ABC1234567'),
  keyPairName?: string(name='KeyPairName', description='The value of tag N of the key pair. Valid values of N: 1 to 20.', example='*SshKey*'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **DescribeKeyPairs**.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The tag key of the key pair.', example='rg-amnhr7u7c7hj****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

>  Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='TestKey'),
      value?: string(name='Value', description='The region ID of the key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='TestValue'),
    }
  ](name='Tag', description='The fingerprint of the key pair.'),
}

model DescribeKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime', description='The number of entries returned per page.', example='2019-12-04T13:35:00Z'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='Queries one or more key pairs.', example='ABC1234567'),
      keyPairName?: string(name='KeyPairName', description='The ID of the request.', example='testKeyPairName'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-amnhr7u7c7hj****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='TestKey'),
          tagValue?: string(name='TagValue', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='KeyPair')
  }(name='KeyPairs', description='The page number of the returned page.'),
  pageNumber?: int32(name='PageNumber', description='The ID of the resource group.', example='1'),
  pageSize?: int32(name='PageSize', description='The tags of the key pair.', example='10'),
  requestId?: string(name='RequestId', description='The tag value of the key pair.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1'),
}

model DescribeKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKeyPairsResponseBody(name='body'),
}

async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairFingerPrint)) {
    query['KeyPairFingerPrint'] = request.keyPairFingerPrint;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKeyPairs',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DescribeLaunchTemplateVersionsRequest {
  defaultVersion?: boolean(name='DefaultVersion', description='Specifies whether to query the default version.', example='true'),
  detailFlag?: boolean(name='DetailFlag', description='Specifies whether to query the configurations of the launch template. Valid values:

*   true: queries the basic information and other details of the launch template. The details include the image ID and system disk size.
*   false: queries only the basic information of the launch template. The basic information includes the template ID, template name, and default version.

Default value: true.', example='true'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.

You must set LaunchTemplateId or LaunchTemplateName to specify a launch template.', example='lt-bp168lnahrdwl39p****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template.', example='testLaunchTemplateName'),
  launchTemplateVersion?: [ long ](name='LaunchTemplateVersion', description='Version N of the launch template.', example='1'),
  maxVersion?: long(name='MaxVersion', description='The maximum version number in the version range to query.', example='10'),
  minVersion?: long(name='MinVersion', description='The minimum version number in the version range to query.', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the launch template.

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeLaunchTemplateVersionsResponseBody = {
  launchTemplateVersionSets?: {
    launchTemplateVersionSet?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the launch template was created.', example='2022-01-17T08:22:43Z'),
      createdBy?: string(name='CreatedBy', description='The creator of the launch template.', example='123456789****'),
      defaultVersion?: boolean(name='DefaultVersion', description='Indicates whether the launch template version is the default version.', example='true'),
      launchTemplateData?: {
        systemDisk?: {
          autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
          burstingEnabled?: boolean(name='BurstingEnabled'),
          category?: string(name='Category'),
          deleteWithInstance?: boolean(name='DeleteWithInstance'),
          description?: string(name='Description'),
          diskName?: string(name='DiskName'),
          encrypted?: string(name='Encrypted'),
          iops?: int32(name='Iops'),
          performanceLevel?: string(name='PerformanceLevel'),
          provisionedIops?: long(name='ProvisionedIops'),
          size?: int32(name='Size'),
        }(name='SystemDisk'),
        autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance.', example='2018-05-14T14:18:00Z'),
        dataDisks?: {
          dataDisk?: [ 
          {
            autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy.', example='sp-wz91dz3ghear2a5s****'),
            burstingEnabled?: boolean(name='BurstingEnabled', description='Indicates whether to enable the performance burst feature. Valid values:

*   true: enables the performance burst feature.
*   false: does not enable the performance burst feature.', example='true'),
            category?: string(name='Category', description='The category of the data disk.', example='cloud_ssd'),
            deleteWithInstance?: boolean(name='DeleteWithInstance', description='Indicates whether to release the data disk when the instance is released.', example='true'),
            description?: string(name='Description', description='The description of the data disk.', example='testDiskDescription'),
            device?: string(name='Device', description='The device name of the data disk.

>  This parameter will be removed in the future. We recommend that you use other parameters to ensure future compatibility.', example='/dev/xvda'),
            diskName?: string(name='DiskName', description='The name of the data disk.', example='testDiskName'),
            encrypted?: string(name='Encrypted', description='Indicates whether to encrypt the data disk.', example='false'),
            performanceLevel?: string(name='PerformanceLevel', description='The performance level of ESSD to use as the data disk. This parameter is returned only when tne value of `Category` is cloud_essd. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.', example='PL1'),
            provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

>  This parameter is available only if the corresponding disk category parameter is set to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
            size?: int32(name='Size', description='The size of the data disk.', example='2000'),
            snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create the data disk.', example='s-bp67acfmxazb4p****'),
          }
        ](name='DataDisk')
        }(name='DataDisks', description='Details about the data disks.'),
        deletionProtection?: boolean(name='DeletionProtection'),
        deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp1brhwhoqinyjd6****'),
        description?: string(name='Description', description='The description of the instance.', example='testInstanceDescription'),
        enableVmOsConfig?: boolean(name='EnableVmOsConfig', description='Indicates whether to enable the operating system configuration of the instance.', example='false'),
        hostName?: string(name='HostName', description='The hostname of the instance.', example='testHostName'),
        imageId?: string(name='ImageId', description='The ID of the image.', example='m-bp67acfmxazb4p****'),
        imageOwnerAlias?: string(name='ImageOwnerAlias', description='The source of the image. Valid values:

*   system: public images provided by Alibaba Cloud
*   self: custom images that you create
*   others: shared images from other Alibaba Cloud accounts
*   marketplace: Alibaba Cloud Marketplace images', example='system'),
        instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go', example='Postpaid'),
        instanceName?: string(name='InstanceName', description='The name of the instance.', example='testInstanceName'),
        instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.g5.large'),
        internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage.', example='PayByTraffic'),
        internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth.', example='5'),
        internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth.', example='100'),
        ioOptimized?: string(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='none'),
        ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to assign to the instance.', example='1'),
        keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
        networkInterfaces?: {
          networkInterface?: [ 
          {
            description?: string(name='Description', description='The description of the secondary ENI.', example='testNetworkInterfacesDescription'),
            instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.s2.xlarge'),
            networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the secondary ENI.', example='testNetworkInterfaceName'),
            networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the ENI. Valid values:

*   Standard: The TCP communication mode is used.
*   HighPerformance: Elastic RDMA Interface (ERI) is enabled and the remote direct memory access (RDMA) communication mode is used.

> This parameter can have a value of HighPerformance only when the ENI is attached to a c7re RDMA-enhanced instance that resides in Beijing Zone K.', example='Standard'),
            primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IP address of the secondary ENI.', example='203.0.*.*'),
            securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the ENI. The security group and the ENI must belong to the same VPC.

> You must specify `SecurityGroupId` or `SecurityGroupIds.N` but not both.', example='sg-bp67acfmxazb4p****'),
            securityGroupIds?: {
              securityGroupId?: [ string ](name='SecurityGroupId')
            }(name='SecurityGroupIds', description='The ID of security group *N* with which you want to associate the ECS instance. Valid values of *N* vary based on the maximum number of security groups with which the instance can be associated. For more information, see the "Security group limits" section in the [Limits](~~25412~~) topic.

>  You cannot specify the **SecurityGroupId** and **SecurityGroupIds.N** parameters at the same time.'),
            vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the secondary ENI.', example='vsw-bp67acfmxazb4p****'),
          }
        ](name='NetworkInterface')
        }(name='NetworkInterfaces', description='Details about the secondary elastic network interfaces (ENIs).'),
        networkType?: string(name='NetworkType', description='The network type. Valid values:

*   classic: classic network
*   vpc: VPC', example='vpc'),
        passwordInherit?: boolean(name='PasswordInherit', description='Indicates whether to use the password preset in the image.', example='true'),
        period?: int32(name='Period', description='The subscription duration.', example='1'),
        privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance.', example='10.1.**.**'),
        ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='testRamRoleName'),
        resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the launch template belongs.', example='rg-bp67acfmxazb4p****'),
        securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Indicates whether to enable security hardening.', example='active'),
        securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance.

>  The `SecurityGroupId` and `SecurityGroupIds` parameters are mutually exclusive in the response.', example='sg-bp67acfmxazb4p****'),
        securityGroupIds?: {
          securityGroupId?: [ string ](name='SecurityGroupId')
        }(name='SecurityGroupIds', description='The IDs of the security groups to which to assign the instance. The valid values of N are based on the maximum number of security groups to which the instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412~~).

> You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.'),
        spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

Take note of the following items:

*   The following protection periods are in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   A value of 0 indicates that no protection period is configured for the preemptible instance.', example='1'),
        spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the preemptible instance.', example='0.98'),
        spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is created as a regular pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.', example='NoSpot'),
        tags?: {
          instanceTag?: [ 
          {
            key?: string(name='Key', description='The key of the tag to add to the instance.', example='TestKey'),
            value?: string(name='Value', description='The value of the tag to add to the instance.', example='TestValue'),
          }
        ](name='InstanceTag')
        }(name='Tags', description='The tags to add to the instance.'),
        userData?: string(name='UserData', description='The user data of the instance, which is Base64-encoded.', example='SGVsbG9FQ1M='),
        vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect the instance.', example='vsw-bp67acfmxazb4p****'),
        vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC).', example='v-bp67acfmxazb4p****'),
        zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-g'),
      }(name='LaunchTemplateData', description='The configurations of the launch template.'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template.', example='lt-bp67acfmxazb4p****'),
      launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template.', example='testLaunchTemplateName'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the launch template was modified.', example='2022-01-17T08:40:00Z'),
      versionDescription?: string(name='VersionDescription', description='The description of the launch template version.', example='testVersionDescription'),
      versionNumber?: long(name='VersionNumber', description='The number of the launch template version.', example='1'),
    }
  ](name='LaunchTemplateVersionSet')
  }(name='LaunchTemplateVersionSets', description='Details about the launch template versions.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3989ED0C-20A1-4351-A127-2067FF8390AX'),
  totalCount?: int32(name='TotalCount', description='The total number of launch templates.', example='1'),
}

model DescribeLaunchTemplateVersionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLaunchTemplateVersionsResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeLaunchTemplateVersions\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeLaunchTemplateVersionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeLaunchTemplateVersionsResponse
 */
async function describeLaunchTemplateVersionsWithOptions(request: DescribeLaunchTemplateVersionsRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplateVersionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultVersion)) {
    query['DefaultVersion'] = request.defaultVersion;
  }
  if (!Util.isUnset(request.detailFlag)) {
    query['DetailFlag'] = request.detailFlag;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.launchTemplateVersion)) {
    query['LaunchTemplateVersion'] = request.launchTemplateVersion;
  }
  if (!Util.isUnset(request.maxVersion)) {
    query['MaxVersion'] = request.maxVersion;
  }
  if (!Util.isUnset(request.minVersion)) {
    query['MinVersion'] = request.minVersion;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLaunchTemplateVersions',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeLaunchTemplateVersions\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeLaunchTemplateVersionsRequest
  * @return DescribeLaunchTemplateVersionsResponse
 */
async function describeLaunchTemplateVersions(request: DescribeLaunchTemplateVersionsRequest): DescribeLaunchTemplateVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplateVersionsWithOptions(request, runtime);
}

model DescribeLaunchTemplatesRequest {
  launchTemplateId?: [ string ](name='LaunchTemplateId', description='The IDs of launch templates. You can specify up to 100 launch template IDs. You must specify LaunchTemplateId or LaunchTemplateName to determine a launch template.', example='lt-m5e3ofjr1zn1aw7q****'),
  launchTemplateName?: [ string ](name='LaunchTemplateName', description='The names of launch templates. You can specify up to 100 launch template names.', example='wd-152630748****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page.

Default value: 10.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the resource group to which the launch template belongs. If you specify this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be returned.

> Resources in the default resource group are displayed in the response regardless of whether you specify this parameter.', example='10'),
  regionId?: string(name='RegionId', description='The tags of the launch template.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId', description='The IDs of launch templates. You can specify up to 100 launch template IDs. You must specify LaunchTemplateId or LaunchTemplateName to determine a launch template.', example='rg-acfmxazb4p****'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='The value of tag N of the launch template. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='TestValue'),
    }
  ](name='TemplateTag', description='The tag of the launch template.'),
}

model DescribeLaunchTemplatesResponseBody = {
  launchTemplateSets?: {
    launchTemplateSet?: [ 
    {
      createTime?: string(name='CreateTime', description='The ID of the resource group to which the launch template belongs.', example='2018-05-14T14:18:00Z'),
      createdBy?: string(name='CreatedBy', description='The latest version number of the launch template.', example='1234567890'),
      defaultVersionNumber?: long(name='DefaultVersionNumber', description='The time when the launch template was modified.', example='1'),
      latestVersionNumber?: long(name='LatestVersionNumber', description='The tags of the launch template.', example='1'),
      launchTemplateId?: string(name='LaunchTemplateId', description='The time when the launch template was created.', example='lt-m5e3ofjr1zn1aw7q****'),
      launchTemplateName?: string(name='LaunchTemplateName', description='The default version number of the launch template.', example='wd-152630748****'),
      modifiedTime?: string(name='ModifiedTime', description='The ID of the launch template.', example='2018-05-14T14:18:00Z'),
      resourceGroupId?: string(name='ResourceGroupId', description='The creator of the launch template.', example='rg-acfmxazb4p****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', example='TestKey'),
          tagValue?: string(name='TagValue', description='The key of tag N of the launch template.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag of the launch template.'),
    }
  ](name='LaunchTemplateSet')
  }(name='LaunchTemplateSets', description='The information about the launch template.'),
  pageNumber?: int32(name='PageNumber', description='The total number of launch templates.', example='1'),
  pageSize?: int32(name='PageSize', description='The ID of the request.', example='10'),
  requestId?: string(name='RequestId', description='The page number of the returned page.', example='04F0F334-1335-436C-A1D7-6C044FE12CBA'),
  totalCount?: int32(name='TotalCount', description='The information about the launch templates.', example='1'),
}

model DescribeLaunchTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLaunchTemplatesResponseBody(name='body'),
}

async function describeLaunchTemplatesWithOptions(request: DescribeLaunchTemplatesRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateResourceGroupId)) {
    query['TemplateResourceGroupId'] = request.templateResourceGroupId;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLaunchTemplates',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLaunchTemplates(request: DescribeLaunchTemplatesRequest): DescribeLaunchTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplatesWithOptions(request, runtime);
}

model DescribeLimitationRequest {
  limitation?: string(name='Limitation'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeLimitationResponseBody = {
  limitation?: string(name='Limitation'),
  requestId?: string(name='RequestId'),
  value?: string(name='Value'),
}

model DescribeLimitationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeLimitationResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeLimitationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeLimitationResponse
 */
// Deprecated
async function describeLimitationWithOptions(request: DescribeLimitationRequest, runtime: Util.RuntimeOptions): DescribeLimitationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.limitation)) {
    query['Limitation'] = request.limitation;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLimitation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeLimitationRequest
  * @return DescribeLimitationResponse
 */
// Deprecated
async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLimitationWithOptions(request, runtime);
}

model DescribeManagedInstancesRequest {
  activationId?: string(name='ActivationId', description='The ID of the activation code.', example='4ECEEE12-56F1-4FBC-9AB1-890F7494****'),
  instanceId?: [ string ](name='InstanceId', description='The ID of managed instance N. Valid values of N: 1 to 50.', example='mi-hz018jrc1o0****'),
  instanceIp?: string(name='InstanceIp', description='The internal or public IP address of the managed instance.', example='192.168.**.**'),
  instanceName?: string(name='InstanceName', description='The name of the managed instance.', example='my-webapp-server'),
  osType?: string(name='OsType', description='The operating system type of the managed instance. Valid values:

*   windows
*   linux', example='windows'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.

Valid values: 1 to 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the managed instance. Supported regions: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).

You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the managed instance. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the managed instance. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the managed instance.'),
}

model DescribeManagedInstancesResponseBody = {
  instances?: [ 
    {
      activationId?: string(name='ActivationId', description='The ID of the activation code.', example='3704F543-F768-43FA-9864-897F75B3****'),
      agentVersion?: string(name='AgentVersion', description='The version number of Cloud Assistant Agent.', example='2.2.0.102'),
      connected?: boolean(name='Connected', description='Indicates whether the managed instance is connected. Valid values:

*   true: The managed instance is connected and you can manage the instance by using Cloud Assistant.
*   false: The managed instance is not connected because the managed instance is down or because Cloud Assistant Agent is not installed correctly.', example='true'),
      hostname?: string(name='Hostname', description='The hostname of the managed instance.', example='demo'),
      instanceId?: string(name='InstanceId', description='The ID of the managed instance.', example='mi-hz018jrc1o0****'),
      instanceName?: string(name='InstanceName', description='The name of the managed instance.', example='webAPP-linux-01'),
      internetIp?: string(name='InternetIp', description='The public IP address of the managed instance.', example='40.65.**.**'),
      intranetIp?: string(name='IntranetIp', description='The internal IP address of the managed instance.', example='10.0.**.**'),
      invocationCount?: long(name='InvocationCount', description='The number of times that Cloud Assistant tasks were executed on the managed instance.', example='1'),
      lastInvokedTime?: string(name='LastInvokedTime', description='The time when the Cloud Assistant task was last executed.', example='2021-01-20T09:00:40Z'),
      machineId?: string(name='MachineId', description='The machine code of the managed instance.', example='e03231b37ab14e53b5795ad625fc****'),
      osType?: string(name='OsType', description='The operating system type of the managed instance.', example='Linux'),
      osVersion?: string(name='OsVersion', description='The version information of the operating system.', example='Linux_#38~18.04.1-Ubuntu SMP Wed Jan 6 18:26:30 UTC 2021_x86_64'),
      registrationTime?: string(name='RegistrationTime', description='The time when the managed instance was registered.', example='2021-01-20T08:57:56Z'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of tag N of the managed instance. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The value of tag N of the managed instance. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
        }
      ](name='Tags', description='The tags of the managed instance.'),
    }
  ](name='Instances', description='The queried managed instances.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='77115469-F2C5-4ECA-94F7-FA04F2FD****'),
  totalCount?: long(name='TotalCount', description='The total number of queried managed instances.', example='1'),
}

model DescribeManagedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeManagedInstancesResponseBody(name='body'),
}

async function describeManagedInstancesWithOptions(request: DescribeManagedInstancesRequest, runtime: Util.RuntimeOptions): DescribeManagedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activationId)) {
    query['ActivationId'] = request.activationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceIp)) {
    query['InstanceIp'] = request.instanceIp;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeManagedInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeManagedInstances(request: DescribeManagedInstancesRequest): DescribeManagedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeManagedInstancesWithOptions(request, runtime);
}

model DescribeNatGatewaysRequest {
  natGatewayId?: string(name='NatGatewayId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model DescribeNatGatewaysResponseBody = {
  natGateways?: {
    natGateway?: [ 
    {
      bandwidthPackageIds?: {
        bandwidthPackageId?: [ string ](name='BandwidthPackageId')
      }(name='BandwidthPackageIds'),
      businessStatus?: string(name='BusinessStatus'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds'),
      instanceChargeType?: string(name='InstanceChargeType'),
      name?: string(name='Name'),
      natGatewayId?: string(name='NatGatewayId'),
      regionId?: string(name='RegionId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='NatGateway')
  }(name='NatGateways'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeNatGatewaysRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeNatGatewaysResponse
 */
// Deprecated
async function describeNatGatewaysWithOptions(request: DescribeNatGatewaysRequest, runtime: Util.RuntimeOptions): DescribeNatGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatGateways',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeNatGatewaysRequest
  * @return DescribeNatGatewaysResponse
 */
// Deprecated
async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatGatewaysWithOptions(request, runtime);
}

model DescribeNetworkInterfaceAttributeRequest {
  attribute?: string(name='Attribute', description='The attributes of the ENI.', example='test'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='> This parameter is unavailable.', example='TestKey'),
      value?: string(name='Value', description='> This parameter is unavailable.', example='TestValue'),
    }
  ](name='Tag', description='> This parameter is unavailable.'),
}

model DescribeNetworkInterfaceAttributeResponseBody = {
  associatedPublicIp?: {
    allocationId?: string(name='AllocationId', description='The ID of the EIP.', example='null'),
    publicIpAddress?: string(name='PublicIpAddress', description='The EIP.', example='116.62.**.**'),
  }(name='AssociatedPublicIp', description='The elastic IP address (EIP) that is associated with the secondary private IP address of the ENI.'),
  attachment?: {
    deviceIndex?: int32(name='DeviceIndex', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
    instanceId?: string(name='InstanceId', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
    memberNetworkInterfaceIds?: {
      memberNetworkInterfaceId?: [ string ](name='MemberNetworkInterfaceId')
    }(name='MemberNetworkInterfaceIds', description='> This parameter is in invitational preview and is unavailable.'),
    networkCardIndex?: int32(name='NetworkCardIndex', description='网卡挂载指定的物理网卡索引。
- 如果网卡是未挂载（Available）状态或者挂载时未指定索引，则不返回此值。
- 如果网卡是已挂载（InUse）状态且挂载时指定，此值表示网卡挂载指定的物理网卡索引。', example='0'),
    trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='hide'),
  }(name='Attachment', description='> This parameter is in invitational preview and is unavailable.'),
  bondInterfaceSpecification?: {
    bondMode?: string(name='BondMode', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    slaveInterfaceSpecification?: {
      slaveInterfaceSpecificationSet?: [ 
      {
        bondNetworkInterfaceId?: string(name='BondNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        slaveNetworkInterfaceId?: string(name='SlaveNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        workState?: string(name='WorkState', description='> This parameter is in invitational preview and is unavailable.', example='null'),
      }
    ](name='SlaveInterfaceSpecificationSet')
    }(name='SlaveInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  }(name='BondInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  creationTime?: string(name='CreationTime', description='The time when the ENI was created.', example='2019-12-25T12:31:31Z'),
  description?: string(name='Description', description='The description of the ENI.', example='testDescription'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is attached.

> If the ENI is managed and controlled by other Alibaba Cloud services, no instance ID is returned.', example='i-bp1e2l6djkndyuli****'),
  ipv4PrefixSets?: {
    ipv4PrefixSet?: [ 
    {
      ipv4Prefix?: string(name='Ipv4Prefix', description='The IPv4 address prefix.', example='47.122.*.*/24'),
    }
  ](name='Ipv4PrefixSet')
  }(name='Ipv4PrefixSets', description='The IPv4 address prefixes of the ENI.'),
  ipv6PrefixSets?: {
    ipv6PrefixSet?: [ 
    {
      ipv6Prefix?: string(name='Ipv6Prefix', description='The IPv6 address prefix.', example='2001:1111:*:*::/64'),
    }
  ](name='Ipv6PrefixSet')
  }(name='Ipv6PrefixSets', description='The IPv6 address prefixes of the ENI.'),
  ipv6Sets?: {
    ipv6Set?: [ 
    {
      ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2001:db8:1234:1a00::****'),
    }
  ](name='Ipv6Set')
  }(name='Ipv6Sets', description='The IPv6 addresses of the ENI.'),
  macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp125p95hhdhn3ot****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
  networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the ENI. Valid values:

*   Standard: The TCP communication mode is used.
*   HighPerformance: Elastic RDMA Interface (ERI) is enabled and the remote direct memory access (RDMA) communication mode is used.

> This parameter can have a value of HighPerformance only when the ENI is attached to a c7re RDMA-enhanced instance that resides in Beijing Zone K.', example='Standard'),
  ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='10.1.**.**'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
        publicIpAddress?: string(name='PublicIpAddress', description='The EIP.', example='116.62.**.**'),
      }(name='AssociatedPublicIp', description='The EIP that is associated with the secondary private IP address of the ENI.'),
      primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address. Valid values:

*   true: The IP address is the primary private IP address.
*   false: The IP address is the secondary private IP address.', example='true'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets', description='Details about the private IP addresses.'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI.

*   For a primary ENI: The default number of queues that the instance type supports for the ENI is returned.

*   For a secondary ENI:

    *   When the ENI is in the InUse state, the following situations occur for the QueueNumber parameter:

        *   If the number of queues supported by the ENI has not been modified, the default number of queues that the instance type supports for the ENI is returned.
        *   If the number of queues supported by the ENI has been modified, the new number of queues is returned.

    *   When the ENI is in the Available state, the following situations occur for the QueueNumber parameter:

        *   If the number of queues supported by the ENI has not been modified, the return value is empty.
        *   If the number of queues supported by the ENI has been modified, the new number of queues is returned.', example='8'),
  queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable.', example='22'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instance belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
  serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
  serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
  slaveInterfaceSpecification?: {
    bondNetworkInterfaceId?: string(name='BondNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    slaveNetworkInterfaceId?: string(name='SlaveNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    workState?: string(name='WorkState', description='> This parameter is in invitational preview and is unavailable.', example='null'),
  }(name='SlaveInterfaceSpecification', description='> This parameter is in invitational preview and is unavailable.'),
  status?: string(name='Status', description='The state of the ENI. Valid values:

*   Available: The ENI is not attached to an instance.
*   Attaching: The ENI is being attached to an instance.
*   InUse: The ENI is attached to an instance.
*   Detaching: The ENI is being detached from an instance.
*   Deleting: The ENI is being deleted.

This parameter is empty by default, which indicates that all states are queried.', example='Available'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags of the ENI.'),
  type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-bp1s5fnvk4gn2tws0****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the ENI belongs.', example='vpc-bp67acfmxazb4p****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-g'),
}

model DescribeNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInterfaceAttributeResponseBody(name='body'),
}

async function describeNetworkInterfaceAttributeWithOptions(request: DescribeNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attribute)) {
    query['Attribute'] = request.attribute;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInterfaceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkInterfaceAttribute(request: DescribeNetworkInterfaceAttributeRequest): DescribeNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfaceAttributeWithOptions(request, runtime);
}

model DescribeNetworkInterfacePermissionsRequest {
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of ENI N. You must specify `NetworkInterfaceId` or `NetworkInterfacePermissionId.N` to determine the query range.', example='eni-bp17pdijfczax****'),
  networkInterfacePermissionId?: [ string ](name='NetworkInterfacePermissionId', description='The IDs of ENI permissions. You can specify up to 100 ENI permission IDs.', example='eni-perm-bp1cs4lwn56lfb****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the ENI permission. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeNetworkInterfacePermissionsResponseBody = {
  networkInterfacePermissions?: {
    networkInterfacePermission?: [ 
    {
      accountId?: long(name='AccountId', description='The ID of the Alibaba Cloud partner (a certified ISV) or individual user.', example='1234567890'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of ENI N.', example='eni-bp14v2sdd3v8htln****'),
      networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId', description='The ID of the ENI permission.', example='eni-perm-bp1cs4lwn56lfb****'),
      permission?: string(name='Permission', description='The ENI permission.', example='InstanceAttach'),
      permissionState?: string(name='PermissionState', description='The status of the ENI permission. Valid values:

*   Pending: The permission is being granted.
*   Granted: The permission is granted.
*   Revoking: The permission is being revoked.
*   Revoked: The permission is revoked.', example='Granted'),
      serviceName?: string(name='ServiceName', description='The name of the Alibaba Cloud service.', example='Elastic Compute Service'),
    }
  ](name='NetworkInterfacePermission')
  }(name='NetworkInterfacePermissions', description='Details about the ENI permissions.'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='0FCD3DEF-63D3-4605-A818-805C8BD7DB87'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeNetworkInterfacePermissionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInterfacePermissionsResponseBody(name='body'),
}

async function describeNetworkInterfacePermissionsWithOptions(request: DescribeNetworkInterfacePermissionsRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacePermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.networkInterfacePermissionId)) {
    query['NetworkInterfacePermissionId'] = request.networkInterfacePermissionId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInterfacePermissions',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkInterfacePermissions(request: DescribeNetworkInterfacePermissionsRequest): DescribeNetworkInterfacePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacePermissionsWithOptions(request, runtime);
}

model DescribeNetworkInterfacesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is attached.', example='i-bp1e2l6djkndyuli****'),
  ipv6Address?: [ string ](name='Ipv6Address', description='An array that consists of the IPv6 address of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.', example='2408:4321:180:1701:94c7:bc38:3bfa:****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid values: 10 to 500.

Default values:

*   If this parameter is not specified or if this parameter is set to a value less than 10, the default value is 10.
*   If this parameter is set to a value greater than 500, the default value is 500.', example='50'),
  networkInterfaceId?: [ string ](name='NetworkInterfaceId', description='An array that consists of the IDs of the ENIs. You specify multiple ENI IDs. Valid values of N: 1 to 100.', example='eni-bp125p95hhdhn3ot****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='test-eni-name'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the last call to this operation.

For more information about how to check the responses returned by this operation, see the preceding "Description" section.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters to perform a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 1000.

Default value: 10.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='100'),
  primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary private IPv4 address of the ENI.', example='192.168.**.**'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='An array that consists of the secondary private IPv4 addresses of the ENI. You can specify multiple secondary private IPv4 addresses. Valid values of N: 1 to 100.', example='192.168.**.**'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the ENI belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be returned.

> Resources in the default resource group are displayed in the response regardless of how this parameter is set.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which the secondary ENI belongs.

*   To query the details of secondary ENIs based on the ID of a security group, specify this parameter.
*   To query the details of primary ENIs based on the ID of a security group, call the [DescribeInstances](~~25506~~) operation and specify the `SecurityGroupId` parameter.', example='sg-bp144yr32sx6ndw****'),
  serviceManaged?: boolean(name='ServiceManaged', description='Specifies whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
  status?: string(name='Status', description='The state of the ENI. Valid values:

*   Available: The ENI is available.
*   Attaching: The ENI is being attached to an instance.
*   InUse: The ENI is attached to an instance.
*   Detaching: The ENI is being detached from an instance.
*   Deleting: The ENI is being deleted.

This parameter is empty by default, which indicates that ENIs in all states are queried.', example='Available'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the ENI. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the ENI. Valid values of N: 1 to 20.

If a single tag is specified to query ENIs, up to 1,000 ENIs that have this tag can be returned. If multiple tags are specified to query ENIs, up to 1,000 ENIs that have all these tags can be returned. To query more than 1,000 resources that have specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestValue'),
    }
  ](name='Tag', description='The tags to use for query.'),
  type?: string(name='Type', description='The type of the ENI. Valid values:

*   Primary
*   Secondary

This parameter is empty by default, which indicates that both primary and secondary ENIs are queried.', example='Secondary'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the ENI is associated.', example='vsw-bp16usj2p27htro3****'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the ENI belongs.', example='vsw-bp16usj2p27htro3****'),
}

model DescribeNetworkInterfacesResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
        publicIpAddress?: string(name='PublicIpAddress', description='The EIP of the ENI.', example='116.62.**.**'),
      }(name='AssociatedPublicIp', description='Details about the EIP that is associated with the secondary private IP address of the ENI.'),
      attachment?: {
        deviceIndex?: int32(name='DeviceIndex', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
        instanceId?: string(name='InstanceId', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
        networkCardIndex?: int32(name='NetworkCardIndex', description='The index of the network interface controller (NIC).

*   If the ENI is in the Available state or no NIC index is specified when the ENI is attached, this parameter has no value.
*   If the ENI is in the InUse state and an NIC index is specified when the ENI is attached, the specified NIC index is returned as the value of this parameter.', example='0'),
        trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
      }(name='Attachment', description='> This parameter is in invitational preview and is unavailable.'),
      creationTime?: string(name='CreationTime', description='The time when the ENI was created.', example='2019-12-25T12:31:31Z'),
      description?: string(name='Description', description='The description of the ENI.', example='DescriptionTest'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the ENI is attached.

> If the ENI is managed and controlled by other Alibaba Cloud services, no instance ID is returned.', example='i-bp1e2l6djkndyuli****'),
      ipv4PrefixSets?: {
        ipv4PrefixSet?: [ 
        {
          ipv4Prefix?: string(name='Ipv4Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
        }
      ](name='Ipv4PrefixSet')
      }(name='Ipv4PrefixSets', description='> This parameter is in invitational preview and is unavailable for general users.'),
      ipv6PrefixSets?: {
        ipv6PrefixSet?: [ 
        {
          ipv6Prefix?: string(name='Ipv6Prefix', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
        }
      ](name='Ipv6PrefixSet')
      }(name='Ipv6PrefixSets', description='> This parameter is in invitational preview and is unavailable for general users.'),
      ipv6Sets?: {
        ipv6Set?: [ 
        {
          ipv6Address?: string(name='Ipv6Address', description='The IPv6 address assigned to the ENI.', example='2408:4321:180:1701:94c7:bc38:3bfa:****'),
        }
      ](name='Ipv6Set')
      }(name='Ipv6Sets', description='The IPv6 addresses assigned to the ENI.'),
      macAddress?: string(name='MacAddress', description='The media access control (MAC) address of the ENI.', example='00:16:3e:12:**:**'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.', example='eni-bp125p95hhdhn3ot****'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI.', example='my-eni-name'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of the ENI. Valid values:

*   Standard: the TCP communication mode is used.
*   HighPerformance: enables the Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.

> You can set this parameter to HighPerformance only when the ENI is attached to a c7re RDMA-enhanced instance that resides in Beijing Zone K.', example='Standard'),
      ownerId?: string(name='OwnerId', description='The ID of the account to which the ENI belongs.', example='123456****'),
      privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          associatedPublicIp?: {
            allocationId?: string(name='AllocationId', description='> This parameter is in invitational preview and is unavailable for general users.', example='null'),
            publicIpAddress?: string(name='PublicIpAddress', description='The EIP of the ENI.', example='116.62.**.**'),
          }(name='AssociatedPublicIp', description='The elastic IP address (EIP) associated with the ENI.'),
          primary?: boolean(name='Primary', description='Indicates whether the IP address is the primary private IP address. Valid values:

*   true: The IP address is the primary private IP address.
*   false: The IP address is the secondary private IP address.', example='true'),
          privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address of the ENI.', example='172.17.**.**'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets', description='Details about the private IP addresses of the ENI.'),
      queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI.

*   If the ENI is a secondary ENI in the InUse state and the number of queues supported by the ENI has never been modified, the default number of queues per secondary ENI that the instance type supports is returned.
*   If the number of queues supported by the secondary ENI has been modified, the new number of queues is returned.
*   If the ENI is a secondary ENI in the Available state and the number of queues supported by the ENI has never been modified, an empty value is returned.
*   If the ENI is a primary ENI, the default number of queues per primary ENI that the instance type supports is returned.', example='8'),
      queuePairNumber?: int32(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable to the public.', example='0'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the ENI belongs.', example='rg-2ze88m67qx5z****'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds', description='The IDs of the security groups to which the ENI belongs.'),
      serviceID?: long(name='ServiceID', description='The ID of the distributor to which the ENI belongs.', example='12345678910'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the ENI is an Alibaba Cloud service or a distributor.', example='true'),
      status?: string(name='Status', description='The state of the ENI.', example='Available'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the ENI.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the ENI.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the ENI.'),
      type?: string(name='Type', description='The type of the ENI.', example='Secondary'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch with which the ENI is associated.', example='vsw-bp16usj2p27htro3****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.', example='vpc-bp1j7w3gc1cexjqd****'),
      zoneId?: string(name='ZoneId', description='The zone ID of the ENI.', example='cn-hangzhou-e'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets', description='Details about the ENIs.'),
  nextToken?: string(name='NextToken', description='The returned pagination token which can be used in the next request to retrieve a new page of results.', example='AAAAAdDWBF2****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

> This parameter will be removed in the future. We recommend that you use the NextToken and MaxResults parameters for a paged query.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of ENIs.

> If you specify the `MaxResults` and `NextToken` parameters to perform a paged query, the value of the `TotalCount` response parameter is invalid.', example='2'),
}

model DescribeNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNetworkInterfacesResponseBody(name='body'),
}

/**
  * The `DescribeNetworkInterfaces` operation supports paged queries. During a paged query, when you call the DescribeNetworkInterfaces operation to retrieve the first page of results, set `MaxResults` to limit the maximum number of entries to return in the call. The return value of `NextToken` is a pagination token, which can be used in the next call to retrieve a new page of results. When you perform the next request, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  * > You must specify `MaxResults` or `NextToken` for the system to return results based on the preceding pagination mechanism. Otherwise, the system paginates the results based on the `PageNumber` and `PageSize` parameters.
  *
  * @param request DescribeNetworkInterfacesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeNetworkInterfacesResponse
 */
async function describeNetworkInterfacesWithOptions(request: DescribeNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.networkInterfaceName)) {
    query['NetworkInterfaceName'] = request.networkInterfaceName;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.primaryIpAddress)) {
    query['PrimaryIpAddress'] = request.primaryIpAddress;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.serviceManaged)) {
    query['ServiceManaged'] = request.serviceManaged;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInterfaces',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The `DescribeNetworkInterfaces` operation supports paged queries. During a paged query, when you call the DescribeNetworkInterfaces operation to retrieve the first page of results, set `MaxResults` to limit the maximum number of entries to return in the call. The return value of `NextToken` is a pagination token, which can be used in the next call to retrieve a new page of results. When you perform the next request, set `NextToken` to the `NextToken` value returned in the previous call and set `MaxResults` to specify the maximum number of entries to return in this call.
  * > You must specify `MaxResults` or `NextToken` for the system to return results based on the preceding pagination mechanism. Otherwise, the system paginates the results based on the `PageNumber` and `PageSize` parameters.
  *
  * @param request DescribeNetworkInterfacesRequest
  * @return DescribeNetworkInterfacesResponse
 */
async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacesWithOptions(request, runtime);
}

model DescribeNewProjectEipMonitorDataRequest {
  allocationId?: string(name='AllocationId'),
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeNewProjectEipMonitorDataResponseBody = {
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipBandwidth?: int32(name='EipBandwidth'),
      eipFlow?: int32(name='EipFlow'),
      eipPackets?: int32(name='EipPackets'),
      eipRX?: int32(name='EipRX'),
      eipTX?: int32(name='EipTX'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeNewProjectEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNewProjectEipMonitorDataResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeNewProjectEipMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeNewProjectEipMonitorDataResponse
 */
// Deprecated
async function describeNewProjectEipMonitorDataWithOptions(request: DescribeNewProjectEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeNewProjectEipMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNewProjectEipMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeNewProjectEipMonitorDataRequest
  * @return DescribeNewProjectEipMonitorDataResponse
 */
// Deprecated
async function describeNewProjectEipMonitorData(request: DescribeNewProjectEipMonitorDataRequest): DescribeNewProjectEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNewProjectEipMonitorDataWithOptions(request, runtime);
}

model DescribePhysicalConnectionsRequest {
  clientToken?: string(name='ClientToken'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
}

model DescribePhysicalConnectionsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      adLocation?: string(name='AdLocation'),
      bandwidth?: long(name='Bandwidth'),
      businessStatus?: string(name='BusinessStatus'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      enabledTime?: string(name='EnabledTime'),
      lineOperator?: string(name='LineOperator'),
      name?: string(name='Name'),
      peerLocation?: string(name='PeerLocation'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
      portNumber?: string(name='PortNumber'),
      portType?: string(name='PortType'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePhysicalConnectionsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribePhysicalConnectionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribePhysicalConnectionsResponse
 */
// Deprecated
async function describePhysicalConnectionsWithOptions(request: DescribePhysicalConnectionsRequest, runtime: Util.RuntimeOptions): DescribePhysicalConnectionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePhysicalConnections',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribePhysicalConnectionsRequest
  * @return DescribePhysicalConnectionsResponse
 */
// Deprecated
async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhysicalConnectionsWithOptions(request, runtime);
}

model DescribePrefixListAssociationsRequest {
  maxResults?: int32(name='MaxResults', description='The query token that is returned in this call. If the return value is empty, no more data is returned.', example='10'),
  nextToken?: string(name='NextToken', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', description='The query token. Set the value to the `NextToken` value returned in the previous call to the DescribePrefixListAssociations operation. Leave this parameter empty the first time you call this operation.', example='pl-x1j1k5ykzqlixdcy****'),
  regionId?: string(name='RegionId', description='The ID of the prefix list.', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePrefixListAssociationsResponseBody = {
  nextToken?: string(name='NextToken', description='The ID of the request.', example='AAAAAdDWBF2****'),
  prefixListAssociations?: {
    prefixListAssociation?: [ 
    {
      resourceId?: string(name='ResourceId', description='The type of the resource.', example='sg-bp11ujym6xsff6l0****'),
      resourceType?: string(name='ResourceType', example='securitygroup'),
    }
  ](name='PrefixListAssociation')
  }(name='PrefixListAssociations', description='The ID of the resource.'),
  requestId?: string(name='RequestId', description='Details about the resources that are associated with the prefix list.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListAssociationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePrefixListAssociationsResponseBody(name='body'),
}

async function describePrefixListAssociationsWithOptions(request: DescribePrefixListAssociationsRequest, runtime: Util.RuntimeOptions): DescribePrefixListAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrefixListAssociations',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrefixListAssociations(request: DescribePrefixListAssociationsRequest): DescribePrefixListAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrefixListAssociationsWithOptions(request, runtime);
}

model DescribePrefixListAttributesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', description='The time when the prefix list was created.', example='pl-x1j1k5ykzqlixdcy****'),
  regionId?: string(name='RegionId', description='The ID of the prefix list.', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePrefixListAttributesResponseBody = {
  addressFamily?: string(name='AddressFamily', description='The name of the prefix list.', example='IPv4'),
  creationTime?: string(name='CreationTime', description='The maximum number of entries that the prefix list can contain.', example='2021-02-20T07:11Z'),
  description?: string(name='Description', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6', example='This is description.'),
  entries?: {
    entry?: [ 
    {
      cidr?: string(name='Cidr', example='192.168.1.0/24'),
      description?: string(name='Description', description='The CIDR block in the entry in the prefix list.', example='Description Sample 01'),
    }
  ](name='Entry')
  }(name='Entries', description='The description of the entry in the prefix list.'),
  maxEntries?: int32(name='MaxEntries', description='The ID of the request.', example='10'),
  prefixListId?: string(name='PrefixListId', description='Details about the entries in the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  prefixListName?: string(name='PrefixListName', description='The ID of the prefix list.', example='PrefixListNameSample'),
  requestId?: string(name='RequestId', description='The description of the prefix list.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePrefixListAttributesResponseBody(name='body'),
}

async function describePrefixListAttributesWithOptions(request: DescribePrefixListAttributesRequest, runtime: Util.RuntimeOptions): DescribePrefixListAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrefixListAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePrefixListAttributes(request: DescribePrefixListAttributesRequest): DescribePrefixListAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrefixListAttributesWithOptions(request, runtime);
}

model DescribePrefixListsRequest {
  addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6

This parameter is empty by default, which indicates that all prefix lists are queried.', example='IPv4'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The query token. Set the value to the `NextToken` value returned in the previous call to the DescribePrefixLists operation. Leave this parameter empty the first time you call this operation.', example='AAAAAdDWBF2****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: [ string ](name='PrefixListId', description='The IDs of prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='PrefixListNameSample'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePrefixListsResponseBody = {
  nextToken?: string(name='NextToken', description='The query token returned in this call. If the return value is empty, no more data is returned.', example='AAAAAdDWBF2****'),
  prefixLists?: {
    prefixList?: [ 
    {
      addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6', example='IPv4'),
      associationCount?: int32(name='AssociationCount', description='The number of associated resources.', example='1'),
      creationTime?: string(name='CreationTime', description='The time when the prefix list was created.', example='2021-02-20T07:11Z'),
      description?: string(name='Description', description='The description of the prefix list.', example='This is description.'),
      maxEntries?: int32(name='MaxEntries', description='The maximum number of entries that the prefix list can contain.', example='20'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
      prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='PrefixListNameSample'),
    }
  ](name='PrefixList')
  }(name='PrefixLists', description='Details about the prefix lists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model DescribePrefixListsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePrefixListsResponseBody(name='body'),
}

/**
  * ## Description
  * You can specify the `AddressFamily`, `PrefixListId.N`, and `PrefixListName` request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
  * @param request DescribePrefixListsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribePrefixListsResponse
 */
async function describePrefixListsWithOptions(request: DescribePrefixListsRequest, runtime: Util.RuntimeOptions): DescribePrefixListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressFamily)) {
    query['AddressFamily'] = request.addressFamily;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrefixLists',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * You can specify the `AddressFamily`, `PrefixListId.N`, and `PrefixListName` request parameters to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
  * @param request DescribePrefixListsRequest
  * @return DescribePrefixListsResponse
 */
async function describePrefixLists(request: DescribePrefixListsRequest): DescribePrefixListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrefixListsWithOptions(request, runtime);
}

model DescribePriceRequest {
  dataDisk?: [
    {
      category?: string(name='Category', description='The type of data disk N. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   ephemeral_ssd: local SSD
*   cloud_essd: ESSD

Valid values of N: 1 to 16.', example='cloud_ssd'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of data disk N when the disk is an ESSD. This parameter is valid only when `DataDisk.N.Category` is set to cloud_essd. Valid values:

*   PL0
*   PL1 (default)
*   PL2
*   PL3

Valid values of N: 1 to 16.', example='PL1'),
      size?: long(name='Size', description='The size of data disk N. Unit: GiB. Valid values:

*   Valid values when Category is set to cloud: 5 to 2000.

*   Valid values when Category is set to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the value of `DataDisk.N.PerformanceLevel`.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.4.PerformanceLevel is set to PL3: 1261 to 32768.

*   Valid values when DataDisk.N.Category is set to ephemeral_ssd: 5 to 800.

Valid values of N: 1 to 16.', example='2000'),
    }
  ](name='DataDisk'),
  schedulerOptions?: {
    dedicatedHostId?: string(name='DedicatedHostId', description='专有宿主机ID。您可以通过[DescribeDedicatedHosts ](~~134242~~)查询专有宿主机ID列表。', example='dh-bp67acfmxazb4p****'),
  }(name='SchedulerOptions'),
  systemDisk?: {
    category?: string(name='Category', description='The type of the system disk. Valid values:

*   cloud: basic disk
*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   ephemeral_ssd: local SSD
*   cloud_essd: enhanced SSD (ESSD)

Description of the default values:

*   When the InstanceType parameter is set to a retired instance type and `IoOptimized` is set to `none`, the default value of this parameter is `cloud`.
*   In other cases, the default value of this parameter is `cloud_efficiency`.

> If you want to query the prices of system disks, you must also specify `ImageId`.', example='cloud_ssd'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the system disk when the disk is an ESSD. This parameter is valid only when `SystemDiskCategory` is set to cloud_essd. Valid values:

PL0, PL1 (default), PL2, PL3.', example='PL1'),
    size?: int32(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

Default value: 20 or the image size, whichever is greater.', example='80'),
  }(name='SystemDisk'),
  amount?: int32(name='Amount', description='The number of ECS instances. You can specify this parameter when you want to query the prices of multiple instances that have specific specifications. Valid values: 1 to 1000.

Default value: 1.', example='1'),
  assuranceTimes?: string(name='AssuranceTimes', description='The total number of times that the elasticity assurance can be applied. Set the value to Unlimited. This value indicates that the elasticity assurance can be applied an unlimited number of times within its effective period.

Default value: Unlimited.', example='Unlimited'),
  capacity?: int32(name='Capacity', description='The storage capacity. Unit: GiB.', example='1024'),
  dedicatedHostType?: string(name='DedicatedHostType', description='The type of the dedicated host. You can call the [DescribeDedicatedHostTypes](~~134240~~) operation to query the most recent list of dedicated host types.', example='ddh.c5'),
  imageId?: string(name='ImageId', description='The image ID. An image contains the runtime environment to load when an instance is started. You can call the [DescribeImages](~~25534~~) operation to query the available images. If you do not specify this parameter, the system queries the prices of Linux images.', example='centos_7_05_64_20G_alibase_20181212.vhd'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of reserved instances for an instance type.

Valid values: 1 to 1000.', example='100'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount', description='The total number of vCPUs supported by the elasticity assurance. When you call this API operation, the system calculates the number of instances that an elasticity assurance must support based on the specified value of InstanceType. The calculated value is rounded up to the nearest integer.

> When you call this API operation to query the price of an elasticity assurance, you can only specify either InstanceCoreCpuCount or InstanceAmount.', example='1024'),
  instanceNetworkType?: string(name='InstanceNetworkType', description='The network type of the instance. Valid values:

*   classic: classic network
*   vpc: Virtual Private Cloud (VPC)

Default value: vpc.', example='vpc'),
  instanceType?: string(name='InstanceType', description='The instance type. When `ResourceType` is set to `instance`, you must specify this parameter. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent list of instance types.', example='ecs.g6.large'),
  instanceTypeList?: [ string ](name='InstanceTypeList', description='The instance types. You can select only a single instance type when you configure an elasticity assurance in unlimited mode.', example='ecs.g6.xlarge'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

Default value: PayByTraffic', example='PayByTraffic'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='5'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.

When the instance type specified by the InstanceType parameter belongs to [Generation I instance families](~~55263~~), the default value of this parameter is none.

When the instance type specified by the InstanceType parameter does not belong to [Generation I instance families](~~55263~~), the default value of this parameter is optimized.', example='optimized'),
  isp?: string(name='Isp', description='The Internet service provider (ISP). Valid values:

*   cmcc: China Mobile
*   telecom: China Telecom
*   unicom: China Unicom
*   multiCarrier: multi-line ISP', example='cmcc'),
  offeringType?: string(name='OfferingType', description='The payment option of the reserved instance. Valid values:

*   No Upfront
*   Partial Upfront
*   All Upfront', example='All Upfront'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The billing cycle of the ECS instance. Valid values:

*   Valid values when PriceUnit is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values when PriceUnit is set to Year: 1, 2, 3, 4, and 5.
*   Set the value to 1 when PriceUnit is set to Hour.

Default value: 1.', example='1'),
  platform?: string(name='Platform', description='The operating system of the image that is used by the instance. Valid values:

*   Windows: Windows Server operating system
*   Linux: Linux and UNIX-like operating system', example='Linux'),
  priceUnit?: string(name='PriceUnit', description='The pricing unit of the ECS resource. Valid values:

*   Month
*   Year
*   Hour (default)', example='Year'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The resource type. Valid values:

*   instance: queries the most recent prices of ECS instances. When this parameter is set to `instance`, you must specify `InstanceType`.
*   disk: queries the most recent prices of cloud disks. When this parameter is set to `disk`, you must specify `DataDisk.1.Category` and `DataDisk.1.Size`.
*   bandwidth: queries the most recent prices of network usage.
*   ddh: queries the most recent prices of dedicated hosts.
*   ElasticityAssurance: queries the most recent prices of elasticity assurances. When this parameter is set to `ElasticityAssurance`, you must specify `InstanceType`.
*   CapacityReservation: queries the most recent prices of capacity reservations. When this parameter is set to `CapacityReservation`, you must specify `InstanceType`.

Default value: instance.', example='instance'),
  scope?: string(name='Scope', description='The scope of the reserved instance. Valid values:

*   Region: regional
*   Zone: zonal

Default value: Region.', example='Zone'),
  spotDuration?: int32(name='SpotDuration', description='The retention period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6

*   The following protection periods are unavailable: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, [submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex) and enter the following information: - The specifications and number of the resources. Example: ecs.g6.8xlarge 1000. - The region where the resources reside. Example: China (Beijing). - The period of time during which the resources are used every day. Example: 1:00 to 4: 00 every day.
*   A value of 0 indicates that no protection period is specified for the preemptible instance.

Default value: 1.', example='1'),
  spotStrategy?: string(name='SpotStrategy', description='The preemption policy for the pay-as-you-go instance. Valid values:

*   NoSpot: The instance is created as a pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.

Default value: NoSpot

> This parameter is valid only when `PriceUnit` is set to Hour and `Period` is set to 1. The default value of `PriceUnit` is `Hour` and the default value of `Period` is `1`. Therefore, you do not need to set `PriceUnit` and `Period` when you set SpotStrategy.', example='NoSpot'),
  zoneId?: string(name='ZoneId', description='The zone ID.

> Prices of preemptible instances vary based on zones. When you query the price of a preemptible instance, specify ZoneId.', example='cn-hagzhou-i'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
          originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
          resource?: string(name='Resource', description='The resource name.', example='instance'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description', description='The description of the pricing rule.', example='Receive a 15% discount on a 1-year subscription'),
              ruleId?: long(name='RuleId', description='The ID of the pricing rule.', example='587'),
            }
          ](name='Rule')
          }(name='SubRules', description='Details about the pricing rules.'),
          tradePrice?: float(name='TradePrice', description='The transaction price.', example='3712.8'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos', description='Details about the price.

> This parameter is in invitational preview and is unavailable for public use.'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
      reservedInstanceHourPrice?: float(name='ReservedInstanceHourPrice', description='The hourly price of the reserved instance for which the No Upfront or Partial Upfront payment option is used.', example='1'),
      tradePrice?: float(name='TradePrice', description='The transaction price of the order. The transaction price is equal to the original price minus the discount.', example='3712.8'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.', example='Receive a 15% discount on a 1-year subscription'),
        ruleId?: long(name='RuleId', description='The ID of the pricing rule.', example='587'),
      }
    ](name='Rule')
    }(name='Rules', description='Details about the promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and promotion rules.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePriceResponseBody(name='body'),
}

/**
  * *   The required parameters vary based on the type of resource whose prices you want to query.
  *     *   When `ResourceType` is set to instance, you must specify `InstanceType`.
  *     *   When `ResourceType` is set to disk, you must specify `DataDisk.1.Category` and `DataDisk.1.Size`. When `ResourceType` is set to disk, only pay-as-you-go prices of cloud disks are returned. In this case, `PriceUnit` can be set only to `Hour`.
  *     *   When `ResourceType` is set to ddh, you must specify `DedicatedHostType`.
  *     *   When `ResourceType` is set to ElasticityAssurance, you must specify `InstanceType`.
  *     *   When `ResourceType` is set to CapacityReservation, you must specify `InstanceType`.
  * *   When `ResourceType` is set to bandwidth, only the pay-by-traffic (`PayByTraffic`) prices of network usage is returned.
  * *   When `ResourceType` is set to instance, the prices of up to four data disks can be queried.
  * *   By default, `ChargeType` is set to `PostPaid`. You can specify `PriceUnit` to query the prices of ECS resources that have different billing cycles.
  *
  * @param request DescribePriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribePriceResponse
 */
async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.assuranceTimes)) {
    query['AssuranceTimes'] = request.assuranceTimes;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.dedicatedHostType)) {
    query['DedicatedHostType'] = request.dedicatedHostType;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceCpuCoreCount)) {
    query['InstanceCpuCoreCount'] = request.instanceCpuCoreCount;
  }
  if (!Util.isUnset(request.instanceNetworkType)) {
    query['InstanceNetworkType'] = request.instanceNetworkType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeList)) {
    query['InstanceTypeList'] = request.instanceTypeList;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.priceUnit)) {
    query['PriceUnit'] = request.priceUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrice',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The required parameters vary based on the type of resource whose prices you want to query.
  *     *   When `ResourceType` is set to instance, you must specify `InstanceType`.
  *     *   When `ResourceType` is set to disk, you must specify `DataDisk.1.Category` and `DataDisk.1.Size`. When `ResourceType` is set to disk, only pay-as-you-go prices of cloud disks are returned. In this case, `PriceUnit` can be set only to `Hour`.
  *     *   When `ResourceType` is set to ddh, you must specify `DedicatedHostType`.
  *     *   When `ResourceType` is set to ElasticityAssurance, you must specify `InstanceType`.
  *     *   When `ResourceType` is set to CapacityReservation, you must specify `InstanceType`.
  * *   When `ResourceType` is set to bandwidth, only the pay-by-traffic (`PayByTraffic`) prices of network usage is returned.
  * *   When `ResourceType` is set to instance, the prices of up to four data disks can be queried.
  * *   By default, `ChargeType` is set to `PostPaid`. You can specify `PriceUnit` to query the prices of ECS resources that have different billing cycles.
  *
  * @param request DescribePriceRequest
  * @return DescribePriceResponse
 */
async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRecommendInstanceTypeRequest {
  cores?: int32(name='Cores', description='The number of vCPUs of the instance.

> If you specify both `Cores` and `Memory`, the system returns all instance types that match the values of the parameters.', example='2'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

Default value: PostPaid.', example='PostPaid'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel
*   EnterpriseLevel
*   CreditEntryLevel For more information, see [Burstable instance families](~~59977~~).', example='EnterpriseLevel'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list.

> If you specify `InstanceType`, the `Cores` and `Memory` parameters are ignored.', example='ecs.hfg6.large'),
  instanceTypeFamily?: [ string ](name='InstanceTypeFamily', description='Specifies the instance families from which the alternative instance types are selected. You can specify up to 10 instance families.', example='ecs.hfg6'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. The IoOptimized parameter cannot be specified when the instance is not I/O optimized. Valid values:

*   optimized: The instance is I/O optimized.
*   none: The instance is not I/O optimized.

Default value: optimized.

If you query alternative instance types for retired instance types, this parameter is set to none by default.', example='optimized'),
  maxPrice?: float(name='MaxPrice', description='The maximum hourly price for pay-as-you-go instances or preemptible instances.

>  This parameter takes effect only when `SpotStrategy` is set to `SpotWithPriceLimit`.', example='10.0'),
  memory?: float(name='Memory', description='The memory size of the instance. Unit: GiB.

> If you specify both `Cores` and `Memory`, the system returns all instance types that match the values of the parameters.', example='8.0'),
  networkType?: string(name='NetworkType', description='The network type of the instance. Valid values:

*   classic
*   vpc

Default value: vpc.', example='vpc'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priorityStrategy?: string(name='PriorityStrategy', description='The policy that is used to recommend instance types. Valid values:

*   InventoryFirst: recommends instance types in descending order of resource availability.
*   PriceFirst: recommends instance types in ascending order of hourly price per vCPU.
*   NewProductFirst: recommends the latest instance types first.

Default value: InventoryFirst.', example='PriceFirst'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scene?: string(name='Scene', description='Specifies the scenarios in which the instance type is recommended. Valid values:

*   UPGRADE: instance type upgrade or downgrade
*   CREATE: instance creation

Default value: CREATE.', example='CREATE'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy of preemptible instances. Valid values:

*   NoSpot: The instance is a pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is a preemptible instance for which the market price is automatically used as the bid price. The market price can be up to the pay-as-you-go price.

> The `SpotStrategy` parameter takes effect only when `InstanceChargeType` is set to `PostPaid`.

Default value: NoSpot.', example='NoSpot'),
  systemDiskCategory?: string(name='SystemDiskCategory', description='The category of the system disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: SSD
*   cloud_essd: ESSD
*   cloud: basic disk

For non-I/O optimized instances, the default value is cloud.

For I/O optimized instances, the default value is cloud_efficiency.', example='cloud_ssd'),
  zoneId?: string(name='ZoneId', description='The zone ID. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

We recommend that you set the value of ZoneMatchMode to Include, which is the default value. This way, the system recommends instance types that are available in the zone specified by the ZoneId parameter based on priority. The system also recommends instance types that are available in other zones within the same region.', example='cn-hangzhou-f'),
  zoneMatchMode?: string(name='ZoneMatchMode', description='Specifies whether to recommend only instance types in the zone specified by ZoneId. Valid values:

*   Strict: recommends only instance types that are available in zones specified by the ZoneId parameter.
*   Include: recommends instance types that are available in zones specified by the ZoneId parameter and other zones within the same region.

If `ZoneId` is specified, the default value of this parameter is Strict. This value indicates that only alternative instance types in the zone specified by ZoneId are recommended.', example='Strict'),
}

model DescribeRecommendInstanceTypeResponseBody = {
  data?: {
    recommendInstanceType?: [ 
    {
      commodityCode?: string(name='CommodityCode', description='The commodity code of the instance type.', example='ecs'),
      instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance.', example='PostPaid'),
      instanceType?: {
        cores?: int32(name='Cores', description='The number of vCPUs of the instance type.', example='1'),
        generation?: string(name='Generation', description='The generation of the instance family.', example='ecs-4'),
        instanceType?: string(name='InstanceType', description='The name of the instance type.', example='ecs.hfg6.large'),
        instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family.', example='ecs.hfg6'),
        memory?: int32(name='Memory', description='The memory size of the instance type. Unit: MB.', example='8192'),
        supportIoOptimized?: string(name='SupportIoOptimized', description='Indicates whether the instance type supports I/O optimization.', example='optimized'),
      }(name='InstanceType', description='The name of the instance type.'),
      networkType?: string(name='NetworkType', description='The network type of the instance.', example='vpc'),
      priority?: int32(name='Priority', description='The priority based on which the system sorts the instance types.', example='2'),
      regionId?: string(name='RegionId', description='The region ID of the instance type.', example='cn-hangzhou'),
      scene?: string(name='Scene', description='The scenarios in which the instance type is recommended.', example='CREATE'),
      spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the preemptible instance.', example='NoSpot'),
      zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance type is available.', example='cn-hangzhou-h'),
      zones?: {
        zone?: [ 
        {
          networkTypes?: {
            networkType?: [ string ](name='NetworkType')
          }(name='NetworkTypes', description='The details of network types of instance types.'),
          zoneNo?: string(name='ZoneNo', description='The ID of the zone where the instance type is available.', example='cn-hangzhou-h'),
        }
      ](name='zone')
      }(name='Zones', description='The details of the zones where the instance types resides.'),
    }
  ](name='RecommendInstanceType')
  }(name='Data', description='The details of the recommended instance types.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeRecommendInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRecommendInstanceTypeResponseBody(name='body'),
}

async function describeRecommendInstanceTypeWithOptions(request: DescribeRecommendInstanceTypeRequest, runtime: Util.RuntimeOptions): DescribeRecommendInstanceTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.maxPrice)) {
    query['MaxPrice'] = request.maxPrice;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.priorityStrategy)) {
    query['PriorityStrategy'] = request.priorityStrategy;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scene)) {
    query['Scene'] = request.scene;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.systemDiskCategory)) {
    query['SystemDiskCategory'] = request.systemDiskCategory;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.zoneMatchMode)) {
    query['ZoneMatchMode'] = request.zoneMatchMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecommendInstanceType',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecommendInstanceType(request: DescribeRecommendInstanceTypeRequest): DescribeRecommendInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecommendInstanceTypeWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The natural language that is used to filter responses. For more information, visit [RFC 7231](https://tools.ietf.org/html/rfc7231). Valid values:

*   zh-CN: Chinese
*   en-US: English
*   ja: Japanese

Default value: zh-CN.', example='zh-CN'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription. If this parameter is set to PrePaid, make sure that you have sufficient balance or credits in your account. Otherwise, the InvalidPayMethod error code is returned.
*   PostPaid: pay-as-you-go.

Default value: PostPaid.', example='PrePaid'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: Elastic Compute Service (ECS) instance
*   disk: disk
*   reservedinstance: reserved instance
*   scu: storage capacity unit (SCU)

Default value: instance.', example='instance'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Qingdao)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='ecs.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-qingdao-et2-bo1'),
      status?: string(name='Status', description='Indicates whether clusters are sold out. Valid values:

*   available
*   soldOut', example='available'),
    }
  ](name='Region')
  }(name='Regions', description='Details about the regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

/**
  * ****
  *
  * @param request DescribeRegionsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRegionsResponse
 */
async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ****
  *
  * @param request DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest {
  expectedRenewDay?: int32(name='ExpectedRenewDay', description='The synchronized expiration date. If you specify this parameter, the price for renewing a specified instance to the specified synchronized expiration date is queried. Valid values: 1 to 28.

For information about how to synchronize the expiration dates of instances, see [Synchronize the expiration dates of instances](~~108486~~).

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='5'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The renewal period. Valid values:

*   Valid values when the `PriceUnit` parameter is set to `Month`: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
*   Valid values when the `PriceUnit` parameter is set to `Year`: 1, 2, 3.

Default value: 1.

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the `ExpectedRenewDay` parameter are mutually exclusive.', example='1'),
  priceUnit?: string(name='PriceUnit', description='The unit of the renewal period. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. If the `ResourceType` parameter is set to`  instance `, the value of the `ResourceId` parameter is the ID of the specified instance.``', example='i-bp1f2o4ldh8l29zv****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Set the value to instance.

Default value: instance.', example='instance'),
}

model DescribeRenewalPriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency', description='The currency unit.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
          originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
          resource?: string(name='Resource', description='The name of the resource that corresponds to the price.', example='instance'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description', description='The description of the pricing rule.', example='Receive a 15% discount on a 1-year subscription.'),
              ruleId?: long(name='RuleId', description='The ID of the pricing rule.', example='1234567890'),
            }
          ](name='Rule')
          }(name='SubRules', description='Details about the pricing rules.'),
          tradePrice?: float(name='TradePrice', description='The transaction price.', example='3712.8'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos', description='Details about the resource prices.'),
      discountPrice?: float(name='DiscountPrice', description='The discount.', example='655.2'),
      originalPrice?: float(name='OriginalPrice', description='The original price.', example='4368'),
      tradePrice?: float(name='TradePrice', description='The transaction price, which is equal to the original price minus the discount.', example='3712.8'),
    }(name='Price', description='The price.'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description', description='The description of the promotion rule.', example='Receive a 15% discount on a 1-year subscription'),
        ruleId?: long(name='RuleId', description='The ID of the promotion rule.', example='1234567890'),
      }
    ](name='Rule')
    }(name='Rules', description='Details about the promotion rules.'),
  }(name='PriceInfo', description='Details about the prices and promotion rules.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

/**
  * *   You can call this operation to query the price for renewing a subscription instance for a specific period of time or to a synchronized expiration date.
  * *   Take note of the following items:
  *     *   If you specify only the required parameters, the price for renewing an instance for one month is queried by default.
  *     *   The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the synchronized expiration date-related parameter (`ExpectedRenewDay`) are mutually exclusive. You cannot set these parameters together to query the prices for renewing a specified instance for a period of time and to a synchronized expiration date at the same time.
  *
  * @param request DescribeRenewalPriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRenewalPriceResponse
 */
async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expectedRenewDay)) {
    query['ExpectedRenewDay'] = request.expectedRenewDay;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.priceUnit)) {
    query['PriceUnit'] = request.priceUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRenewalPrice',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to query the price for renewing a subscription instance for a specific period of time or to a synchronized expiration date.
  * *   Take note of the following items:
  *     *   If you specify only the required parameters, the price for renewing an instance for one month is queried by default.
  *     *   The renewal period-related parameter pair (`Period` and `PeriodUnit`) and the synchronized expiration date-related parameter (`ExpectedRenewDay`) are mutually exclusive. You cannot set these parameters together to query the prices for renewing a specified instance for a period of time and to a synchronized expiration date at the same time.
  *
  * @param request DescribeRenewalPriceRequest
  * @return DescribeRenewalPriceResponse
 */
async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribeReservedInstanceAutoRenewAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the reserved instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='The IDs of the reserved instances.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeReservedInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  reservedInstanceRenewAttributes?: {
    reservedInstanceRenewAttribute?: [ 
    {
      duration?: int32(name='Duration', description='The auto-renewal duration.', example='1'),
      periodUnit?: string(name='PeriodUnit', description='The unit of the auto-renewal duration.

Valid values: Year and Month.', example='Month'),
      renewalStatus?: string(name='RenewalStatus', description='The auto-renewal status of the reserved instance. Valid values:

*   AutoRenewal: The reserved instance is automatically renewed.
*   Normal: You must manually renew the reserved instance.', example='AutoRenewal'),
      reservedInstanceId?: string(name='ReservedInstanceId', description='The ID of the reserved instance.', example='ecsri-ajdfaj****'),
    }
  ](name='ReservedInstanceRenewAttribute')
  }(name='ReservedInstanceRenewAttributes', description='Details about the auto-renewal settings of the reserved instances.'),
}

model DescribeReservedInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function describeReservedInstanceAutoRenewAttributeWithOptions(request: DescribeReservedInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeReservedInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstanceAutoRenewAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstanceAutoRenewAttribute(request: DescribeReservedInstanceAutoRenewAttributeRequest): DescribeReservedInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeReservedInstancesRequest {
  allocationType?: string(name='AllocationType', description='The allocation type. Valid values:

*   Normal: queries all reserved instances that belong to the current account.
*   Shared: queries reserved instances that are shared between the main account and linked accounts.

Default value: Normal.', example='Normal'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~).', example='ecs.g5.large'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family. For more information, see [Instance families](~~25378~~).', example='ecs.g5'),
  lockReason?: string(name='LockReason', description='The reason why the instance is locked. Valid values:

*   financial: You have an overdue payment in your account, or the reserved instance has expired.
*   security: The reserved instance is locked for security reasons.', example='security'),
  offeringType?: string(name='OfferingType', description='The payment option of the reserved instances. Valid values:

*   No Upfront
*   Partial Upfront
*   All Upfront', example='All Upfront'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Maximum value: 100.

Default value: 10.', example='50'),
  regionId?: string(name='RegionId', description='The region ID of the instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='The ID of reserved instance N. Valid values of N: 1 to 100.', example='ri-bpzhex2ulpzf53****'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='The name of the reserved instance.', example='testReservedInstanceName'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scope?: string(name='Scope', description='The scope of the reserved instances. Valid values:

*   Region
*   Zone

Default value: Region.', example='Region'),
  status?: [ string ](name='Status', description='The status of reserved instance N. Valid values of N: 1 to 100. Valid values:

*   Creating
*   Active
*   Expired
*   Updating', example='Active'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the reserved instance. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag key cannot start with acs: or aliyun.

Up to 1,000 resources with the specified tags can be returned in the response. To query more than 1,000 resources with the specified tags, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the reserved instance. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag value cannot start with acs:.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the instances.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the reserved instances. This parameter is required when Scope is set to Zone. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-z'),
}

model DescribeReservedInstancesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='E572643C-6A29-49D6-9D4E-6CFA4E063A3E'),
  reservedInstances?: {
    reservedInstance?: [ 
    {
      allocationStatus?: string(name='AllocationStatus', description='Indicates the sharing status of the reserved instance when the AllocationType parameter is set to Shared. Valid values:

*   allocated: The reserved instance is allocated to another account.
*   beAllocated: The reserved instance is allocated by another account.', example='allocated'),
      creationTime?: string(name='CreationTime', description='The creation time.', example='2018-12-10T12:07Z'),
      description?: string(name='Description', description='The description.', example='testDescription'),
      expiredTime?: string(name='ExpiredTime', description='The expiration time.', example='2019-12-10T12:07Z'),
      instanceAmount?: int32(name='InstanceAmount', description='The number of pay-as-you-go instances that are of the same instance type as the reserved instance and can be matched to the reserved instance.', example='10'),
      instanceType?: string(name='InstanceType', description='The instance type of the pay-as-you-go instances that can be matched to the reserved instance.', example='ecs.g5.large'),
      offeringType?: string(name='OfferingType', description='The payment option.', example='All Upfront'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason', description='The reason why the instance is locked.', example='security'),
        }
      ](name='OperationLock')
      }(name='OperationLocks', description='Details about the lock status of the reserved instance.'),
      platform?: string(name='Platform', description='The operating system of the image used by the instance. Valid values:

*   Windows
*   Linux', example='Linux'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      reservedInstanceId?: string(name='ReservedInstanceId', description='The reserved instance ID.', example='ri-bpzhex2ulpzf53****'),
      reservedInstanceName?: string(name='ReservedInstanceName', description='The name.', example='riZbpzhex2ulpzf53****'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='EcsDocTest'),
      scope?: string(name='Scope', description='The scope.', example='region'),
      startTime?: string(name='StartTime', description='The effective time.', example='2018-12-10T12:00Z'),
      status?: string(name='Status', description='The status.', example='Active'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='Details about the tags of the reserved instance.'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-z'),
    }
  ](name='ReservedInstance')
  }(name='ReservedInstances', description='Details about the reserved instances.'),
  totalCount?: int32(name='TotalCount', description='The total number of reserved instances.', example='1'),
}

model DescribeReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeReservedInstancesResponseBody(name='body'),
}

async function describeReservedInstancesWithOptions(request: DescribeReservedInstancesRequest, runtime: Util.RuntimeOptions): DescribeReservedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationType)) {
    query['AllocationType'] = request.allocationType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.lockReason)) {
    query['LockReason'] = request.lockReason;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReservedInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReservedInstances(request: DescribeReservedInstancesRequest): DescribeReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstancesWithOptions(request, runtime);
}

model DescribeResourceByTagsRequest {
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

Default value: 50.', example='50'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   keypair: SSH key pair
*   launchtemplate: launch template

All the preceding values must be lowercase.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20 The tag key cannot be an empty string. It can be up to 128 characters in length.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20 The tag value can be an empty string. It can be up to 128 characters in length.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
}

model DescribeResourceByTagsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1C1E5359-71D7-44D8-8FAA-0327B549157X'),
  resources?: {
    resource?: [ 
    {
      regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-bp16t2cgmiiy7t1c****'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
    }
  ](name='Resource')
  }(name='Resources', description='An array consisting of Resource data.'),
  totalCount?: int32(name='TotalCount', description='The total number of resources returned.', example='8'),
}

model DescribeResourceByTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceByTagsResponseBody(name='body'),
}

async function describeResourceByTagsWithOptions(request: DescribeResourceByTagsRequest, runtime: Util.RuntimeOptions): DescribeResourceByTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceByTags',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceByTags(request: DescribeResourceByTagsRequest): DescribeResourceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceByTagsWithOptions(request, runtime);
}

model DescribeResourcesModificationRequest {
  conditions?: [ string ](name='Conditions', description='The condition. If you specify this parameter, the system queries the resource types that the resource can be changed to after the resource meets the specified condition.

Set the value to DiskCategory, which indicates a disk category change. When you set this parameter to DiskCategory, the system queries the instance types that the instance can be changed to after a disk category change.'),
  cores?: int32(name='Cores', description='The number of vCPU cores of the instance type. For information about the values, see [Overview of instance families](~~25378~~). This parameter takes effect only when DestinationResource is set to InstanceType.', example='2'),
  destinationResource?: string(name='DestinationResource', description='The target resource type. Valid values:

*   InstanceType
*   SystemDisk', example='InstanceType'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Overview of instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent instance type list. This parameter is required when DestinationResource is set to SystemDisk.', example='ecs.g5.large'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For information about the values, see [Overview of instance families](~~25378~~). This parameter takes effect only when DestinationResource is set to InstanceType.', example='8.0'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', description='Specifies whether cross-cluster instance type upgrades are supported. Valid values:

*   true
*   false

Default value: false.

When MigrateAcrossZone is set to true and you upgrade the instance type of an Elastic Compute Service (ECS) instance based on the returned information, take note of the following items:

*   Instances that reside in the classic network:

    *   For [retired instance types](~~55263~~), when a non-I/O-optimized instance is upgraded to an I/O-optimized instance, the private IP address, disk device names, and software authorization codes of the instance change. For Linux instances, basic disks (cloud) are identified as xvd\\* such as xvda and xvdb, and ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified as vd\\* such as vda and vdb.
    *   For [instance families available for purchase](~~25378~~), when the instance type of an instance is changed, the private IP address of the instance changes.

*   Instances that reside in virtual private clouds (VPCs): For [retired instance types](~~55263~~), when a non-I/O-optimized instance is upgraded to an I/O-optimized instance, the disk device names and software authorization codes of the instance change. For Linux instances, basic disks (cloud) are identified as xvd\\* such as xvda and xvdb, and ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified as vd\\* such as vda and vdb.', example='true'),
  operationType?: string(name='OperationType', description='The operation of changing resource configurations.

*   Valid values for subscription resources:

    *   Upgrade
    *   Downgrade
    *   RenewDowngrade
    *   RenewModify

*   Valid values for pay-as-you-go resources: Upgrade

Default value: Upgrade.', example='Upgrade'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. For example, when DestinationResource is set to InstanceType, this parameter can be interpreted as InstanceId.', example='i-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-e'),
}

model DescribeResourcesModificationResponseBody = {
  availableZones?: {
    availableZone?: [ 
    {
      availableResources?: {
        availableResource?: [ 
        {
          conditionSupportedResources?: {
            conditionSupportedResource?: [ 
            {
              conditions?: {
                condition?: [ 
                {
                  key?: string(name='Key', description='The condition name. Valid value:

DiskCategory, which indicates a disk category change.', example='DiskCategory'),
                }
              ](name='Condition')
              }(name='Conditions', description='The conditions.'),
              max?: int32(name='Max', description='The maximum resource specification value. This parameter is not returned if it has no value.', example='2'),
              min?: int32(name='Min', description='The minimum resource specification value. This parameter is not returned if it has no value.', example='1'),
              status?: string(name='Status', description='The stock status of the resource. Valid values:

- Available
- SoldOut', example='Available'),
              statusCategory?: string(name='StatusCategory', description='The category of resource based on stock status. Valid values:

- WithStock: resources that are in sufficient stock
- ClosedWithStock: resources that are in insufficient stock
- WithoutStock: resources that are out of stock', example='WithStock'),
              unit?: string(name='Unit', description='The resource specification unit. This parameter is not returned if it has no value.', example='null'),
              value?: string(name='Value', description='The resource type.', example='ecs.g5.large'),
            }
          ](name='ConditionSupportedResource')
          }(name='ConditionSupportedResources', description='The resource types that resources can be changed to after the resources meet specified conditions.'),
          supportedResources?: {
            supportedResource?: [ 
            {
              max?: int32(name='Max', description='The maximum resource specification value. This parameter is not returned if it has no value.', example='2'),
              min?: int32(name='Min', description='The minimum resource specification value. This parameter is not returned if it has no value.', example='1'),
              status?: string(name='Status', description='The status of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
              statusCategory?: string(name='StatusCategory', description='The category of resource based on stock status. Valid values:

*   WithStock: resources that are in sufficient stock
*   ClosedWithStock: resources that are in insufficient stock
*   WithoutStock: resources that are out of stock', example='WithStock'),
              unit?: string(name='Unit', description='The resource specification unit. This parameter is not returned if it has no value.', example='null'),
              value?: string(name='Value', description='The resource type.', example='ecs.g5.large'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources', description='The information about the resources.'),
          type?: string(name='Type', description='The type of resource. Valid values:

*   Zone
*   IoOptimized
*   InstanceType
*   SystemDisk
*   DataDisk
*   Network', example='InstanceType'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources', description='The resources that are available in the zone.'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the resource. Valid values:

*   Available
*   SoldOut', example='Available'),
      statusCategory?: string(name='StatusCategory', description='The category of resource based on stock status. Valid values:

*   WithStock: resources that are in sufficient stock
*   ClosedWithStock: resources that are in insufficient stock
*   WithoutStock: resources that are out of stock', example='WithStock'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-e'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones', description='The information about the queried zones.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeResourcesModificationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcesModificationResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeResourcesModification\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeResourcesModificationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeResourcesModificationResponse
 */
async function describeResourcesModificationWithOptions(request: DescribeResourcesModificationRequest, runtime: Util.RuntimeOptions): DescribeResourcesModificationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.conditions)) {
    query['Conditions'] = request.conditions;
  }
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.destinationResource)) {
    query['DestinationResource'] = request.destinationResource;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.migrateAcrossZone)) {
    query['MigrateAcrossZone'] = request.migrateAcrossZone;
  }
  if (!Util.isUnset(request.operationType)) {
    query['OperationType'] = request.operationType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourcesModification',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeResourcesModification\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeResourcesModificationRequest
  * @return DescribeResourcesModificationResponse
 */
async function describeResourcesModification(request: DescribeResourcesModificationRequest): DescribeResourcesModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcesModificationWithOptions(request, runtime);
}

model DescribeRouteTablesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
  routeTableName?: string(name='RouteTableName'),
  routerId?: string(name='RouterId'),
  routerType?: string(name='RouterType'),
  VRouterId?: string(name='VRouterId'),
}

model DescribeRouteTablesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          nextHopType?: string(name='NextHopType'),
          nextHops?: {
            nextHop?: [ 
            {
              enabled?: int32(name='Enabled'),
              nextHopId?: string(name='NextHopId'),
              nextHopType?: string(name='NextHopType'),
              weight?: int32(name='Weight'),
            }
          ](name='NextHop')
          }(name='NextHops'),
          routeTableId?: string(name='RouteTableId'),
          status?: string(name='Status'),
          type?: string(name='Type'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys'),
      routeTableId?: string(name='RouteTableId'),
      routeTableType?: string(name='RouteTableType'),
      VRouterId?: string(name='VRouterId'),
    }
  ](name='RouteTable')
  }(name='RouteTables'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouteTablesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRouteTablesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRouteTablesResponse
 */
// Deprecated
async function describeRouteTablesWithOptions(request: DescribeRouteTablesRequest, runtime: Util.RuntimeOptions): DescribeRouteTablesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routeTableId)) {
    query['RouteTableId'] = request.routeTableId;
  }
  if (!Util.isUnset(request.routeTableName)) {
    query['RouteTableName'] = request.routeTableName;
  }
  if (!Util.isUnset(request.routerId)) {
    query['RouterId'] = request.routerId;
  }
  if (!Util.isUnset(request.routerType)) {
    query['RouterType'] = request.routerType;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteTables',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRouteTablesRequest
  * @return DescribeRouteTablesResponse
 */
// Deprecated
async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteTablesWithOptions(request, runtime);
}

model DescribeRouterInterfacesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRouterInterfacesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      businessStatus?: string(name='BusinessStatus'),
      chargeType?: string(name='ChargeType'),
      connectedTime?: string(name='ConnectedTime'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      endTime?: string(name='EndTime'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      name?: string(name='Name'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      oppositeRouterId?: string(name='OppositeRouterId'),
      oppositeRouterType?: string(name='OppositeRouterType'),
      role?: string(name='Role'),
      routerId?: string(name='RouterId'),
      routerInterfaceId?: string(name='RouterInterfaceId'),
      routerType?: string(name='RouterType'),
      spec?: string(name='Spec'),
      status?: string(name='Status'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouterInterfacesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRouterInterfacesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeRouterInterfacesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeRouterInterfacesResponse
 */
// Deprecated
async function describeRouterInterfacesWithOptions(request: DescribeRouterInterfacesRequest, runtime: Util.RuntimeOptions): DescribeRouterInterfacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouterInterfaces',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeRouterInterfacesRequest
  * @return DescribeRouterInterfacesResponse
 */
// Deprecated
async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouterInterfacesWithOptions(request, runtime);
}

model DescribeSecurityGroupAttributeRequest {
  direction?: string(name='Direction', description='The direction in which the security group rule is applied. Valid values:

*   egress: outbound.
*   ingress: inbound.
*   all: outbound and inbound.

Default value: all.', example='all'),
  nicType?: string(name='NicType', description='The network interface card (NIC) type of the security group rule.

*   Valid values for rules of security groups in the classic network:

    *   internet (default)
    *   intranet

    **

    **Note**You can query security group rules of only one NIC type in a single call. To query security group rules of both NIC types, call the operation twice.

*   If the security group is in a virtual private cloud (VPC), set the value to intranet. This is also the default value.

    **

    **Note**If you set this parameter to internet or leave this parameter empty, the value of intranet is automatically used.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp1gxw6bznjjvhu3****'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  description?: string(name='Description', description='The description of the security group.', example='This is description.'),
  innerAccessPolicy?: string(name='InnerAccessPolicy', description='The access control policy of the security group. Valid values:

*   Accept: All instances in the security group can communicate with each other.
*   Drop: All instances in the security group are isolated from each other.', example='Accept'),
  permissions?: {
    permission?: [ 
    {
      createTime?: string(name='CreateTime', description='The time at which the security group rule was created. The time is displayed in UTC.', example='2018-12-12T07:28:38Z'),
      description?: string(name='Description', description='The description of the security group.', example='Description Sample 01'),
      destCidrIp?: string(name='DestCidrIp', description='The destination CIDR block for outbound access control.', example='0.0.0.0/0'),
      destGroupId?: string(name='DestGroupId', description='The ID of the destination security group for outbound access control.', example='sg-bp1czdx84jd88i7v****'),
      destGroupName?: string(name='DestGroupName', description='The name of the destination security group.', example='testDestGroupName'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group.', example='1234567890'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list for outbound access control.', example='pl-x1j1k5ykzqlixabc****'),
      destPrefixListName?: string(name='DestPrefixListName', description='The name of the destination prefix list.', example='DestPrefixListName Sample'),
      direction?: string(name='Direction', description='The direction in which the security group rule is applied.', example='ingress'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol.', example='TCP'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network type.', example='intranet'),
      policy?: string(name='Policy', description='The access control policy.', example='Accept'),
      portRange?: string(name='PortRange', description='The port range.', example='80/80'),
      priority?: string(name='Priority', description='The priority of the rule.', example='1'),
      securityGroupRuleId?: string(name='SecurityGroupRuleId', description='The ID of the security group rule.', example='sgr-bp12kewq32dfwrdi****'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source CIDR block for inbound access control.', example='0.0.0.0/0'),
      sourceGroupId?: string(name='SourceGroupId', description='The source security group for inbound access control.', example='sg-bp12kc4rqohaf2js****'),
      sourceGroupName?: string(name='SourceGroupName', description='The name of the source security group.', example='testSourceGroupName1'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group.', example='1234567890'),
      sourcePortRange?: string(name='SourcePortRange', description='The source port range.', example='80/80'),
      sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list for inbound access control.', example='pl-x1j1k5ykzqlixdcy****'),
      sourcePrefixListName?: string(name='SourcePrefixListName', description='The name of the source prefix list.', example='SourcePrefixListName Sample'),
    }
  ](name='Permission')
  }(name='Permissions', description='Details about the security group rules.'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the destination security group.', example='sg-bp1gxw6bznjjvhu3****'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the destination security group.', example='SecurityGroupName Sample'),
  vpcId?: string(name='VpcId', description='The ID of the VPC. If a VPC ID is returned, the network type of the security group is VPC. If no VPC ID is returned, the network type of the security group is classic network.', example='vpc-bp1opxu1zkhn00gzv****'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

async function describeSecurityGroupAttributeWithOptions(request: DescribeSecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroupAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupAttributeWithOptions(request, runtime);
}

model DescribeSecurityGroupReferencesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the security group.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='The ID of security group N. Valid values of N: 1 to 10.', example='sg-bp14vtedjtobkvi****'),
}

model DescribeSecurityGroupReferencesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  securityGroupReferences?: {
    securityGroupReference?: [ 
    {
      referencingSecurityGroups?: {
        referencingSecurityGroup?: [ 
        {
          aliUid?: string(name='AliUid', description='The ID of the Alibaba Cloud account to which the security group belongs.', example='123456****'),
          securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4j****'),
        }
      ](name='ReferencingSecurityGroup')
      }(name='ReferencingSecurityGroups', description='Details about the security groups whose rules are referencing the specified security groups.'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the specified security group.', example='sg-bp67acfmxazb4p****'),
    }
  ](name='SecurityGroupReference')
  }(name='SecurityGroupReferences', description='Details about the references to the specified security groups.'),
}

model DescribeSecurityGroupReferencesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityGroupReferencesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   A security group can be referenced by the inbound or outbound rules of other security groups.
  * *   Up to 100 entries can be returned each time.
  * *   If a security group cannot be deleted by calling the [DeleteSecurityGroup](~~25558~~) operation, you can call the DescribeSecurityGroupReferences operation to check whether the security group is referenced by the rules of other security groups. If the security group is referenced by the rules of other security groups, you must remove the reference before you can delete the security group.
  *
  * @param request DescribeSecurityGroupReferencesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSecurityGroupReferencesResponse
 */
async function describeSecurityGroupReferencesWithOptions(request: DescribeSecurityGroupReferencesRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupReferencesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroupReferences',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   A security group can be referenced by the inbound or outbound rules of other security groups.
  * *   Up to 100 entries can be returned each time.
  * *   If a security group cannot be deleted by calling the [DeleteSecurityGroup](~~25558~~) operation, you can call the DescribeSecurityGroupReferences operation to check whether the security group is referenced by the rules of other security groups. If the security group is referenced by the rules of other security groups, you must remove the reference before you can delete the security group.
  *
  * @param request DescribeSecurityGroupReferencesRequest
  * @return DescribeSecurityGroupReferencesResponse
 */
async function describeSecurityGroupReferences(request: DescribeSecurityGroupReferencesRequest): DescribeSecurityGroupReferencesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupReferencesWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request passes the dry run, the DryRunOperation error code is returned. Otherwise, an error message is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false'),
  fuzzyQuery?: boolean(name='FuzzyQuery', description='> This parameter is deprecated.', example='null'),
  isQueryEcsCount?: boolean(name='IsQueryEcsCount', description='> This parameter is deprecated.', example='null'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page. If you specify this parameter, both `MaxResults` and `NextToken` are used for a paged query.

Maximum value: 100.

Default value: 10.', example='10'),
  networkType?: string(name='NetworkType', description='The network type of the security group. Valid values:

*   vpc
*   classic', example='vpc'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.', example='e71d8a535bd9cc11'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.

> This parameter will be deprecated in the future. We recommend that you use NextToken and MaxResults for a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Valid values: 1 to 50.

Default value: 10.

> This parameter will be deprecated in the future. We recommend that you use NextToken and MaxResults for a paged query.', example='10'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security group belongs. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response. You can call the [ListResourceGroups](~~158855~~) operation to query the most recent resource group list.

> Resources in the default resource group are displayed in the response regardless of how this parameter is configured.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-bp67acfmxazb4p****'),
  securityGroupIds?: string(name='SecurityGroupIds', description='The security group IDs. Set this parameter to a JSON array that consists of up to 100 security group IDs. Separate the security group IDs with commas (,).', example='["sg-bp67acfmxazb4p****", "sg-bp67acfmxazb4p****", "sg-bp67acfmxazb4p****",....]'),
  securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='SGTestName'),
  securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group

> If you do not specify this parameter, both basic and advanced security groups are queried.', example='normal'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the security group. Valid values of N: 1 to 20.

Up to 1,000 resources that match the tags specified can be returned in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the security group. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the security groups.'),
  vpcId?: string(name='VpcId', description='The ID of the virtual private cloud (VPC) to which the security group belongs.', example='vpc-bp67acfmxazb4p****'),
}

model DescribeSecurityGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. If the return value of this parameter is empty when MaxResults and NextToken are used for a paged query, no next page exists.', example='e71d8a535bd9cc11'),
  pageNumber?: int32(name='PageNumber', description='The page number.

> This parameter will be deprecated in the future. We recommend that you use NextToken and MaxResults for a paged query.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

> This parameter will be deprecated in the future. We recommend that you use NextToken and MaxResults for a paged query.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the security group.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  securityGroups?: {
    securityGroup?: [ 
    {
      availableInstanceAmount?: int32(name='AvailableInstanceAmount', description='> This parameter is in invitational preview and is not publicly available.', example='0'),
      creationTime?: string(name='CreationTime', description='The time when the security group was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.', example='2021-08-31T03:12:29Z'),
      description?: string(name='Description', description='The description of the security group.', example='TestDescription'),
      ecsCount?: int32(name='EcsCount', description='> This parameter is in invitational preview and is not publicly available.', example='0'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the security group belongs.', example='rg-bp67acfmxazb4p****'),
      securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-bp67acfmxazb4p****'),
      securityGroupName?: string(name='SecurityGroupName', description='The name of the security group.', example='SGTestName'),
      securityGroupType?: string(name='SecurityGroupType', description='The type of the security group. Valid values:

*   normal: basic security group
*   enterprise: advanced security group', example='normal'),
      serviceID?: long(name='ServiceID', description='The ID of the distributor to which the security group belongs.', example='12345678910'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the user of the security group is an Alibaba Cloud service or a distributor.', example='false'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the security group.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the security group.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the security groups.'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the security group belongs.', example='vpc-bp67acfmxazb4p****'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups', description='The details about the security groups.'),
  totalCount?: int32(name='TotalCount', description='The total number of security groups returned. If `MaxResults` and `NextToken` are specified in the request, the value of this parameter is not returned.', example='20'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   The basic information about security groups includes their IDs and descriptions. The response returns security groups ordered in descending order based on their IDs.
  * *   We recommend that you use NextToken and MaxResults for a paged query. We recommend that you use MaxResults to specify the maximum number of entries to return in each request. The return value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. When you perform the next request, set NextToken to the value that is returned for NextToken in the previous call and use MaxResults to specify the maximum number of entries to return in this call. If the return value of NextToken is empty, the current page of results is the last page and no more results are to be returned.
  * *   When you use Alibaba Cloud CLI to call an API operation, you must specify values for request parameters of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeSecurityGroupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSecurityGroupsResponse
 */
async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.fuzzyQuery)) {
    query['FuzzyQuery'] = request.fuzzyQuery;
  }
  if (!Util.isUnset(request.isQueryEcsCount)) {
    query['IsQueryEcsCount'] = request.isQueryEcsCount;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  if (!Util.isUnset(request.securityGroupType)) {
    query['SecurityGroupType'] = request.securityGroupType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityGroups',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   The basic information about security groups includes their IDs and descriptions. The response returns security groups ordered in descending order based on their IDs.
  * *   We recommend that you use NextToken and MaxResults for a paged query. We recommend that you use MaxResults to specify the maximum number of entries to return in each request. The return value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. When you perform the next request, set NextToken to the value that is returned for NextToken in the previous call and use MaxResults to specify the maximum number of entries to return in this call. If the return value of NextToken is empty, the current page of results is the last page and no more results are to be returned.
  * *   When you use Alibaba Cloud CLI to call an API operation, you must specify values for request parameters of different data types in the required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeSecurityGroupsRequest
  * @return DescribeSecurityGroupsResponse
 */
async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model DescribeSendFileResultsRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to query file sending records.', example='i-hz0jdfwd9f****'),
  invokeId?: string(name='InvokeId', description='The ID of the file sending task.', example='f-hz0jdfwd9f****'),
  name?: string(name='Name', description='The name of the file whose sending records you want to query.', example='test.txt'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.

Valid values: 1 to 50.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the ECS instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. After you set this parameter, file sending results in the specified resource group are queried.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the file sending task. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the file sending task. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags list.'),
}

model DescribeSendFileResultsResponseBody = {
  invocations?: {
    invocation?: [ 
    {
      content?: string(name='Content', description='The content of the file.', example='#!/bin/bash  echo "Current User is :"  echo $(ps | grep "$$" | awk \\"{print $2}\\")'),
      contentType?: string(name='ContentType', description='The content type of the file. Valid values:

*   PlainText
*   Base64', example='PlainText'),
      creationTime?: string(name='CreationTime', description='The time when the file sending task was created.', example='2019-12-20T06:15:54Z'),
      description?: string(name='Description', description='The description of the file.', example='This is a test file.'),
      fileGroup?: string(name='FileGroup', description='The user group of the file.', example='test'),
      fileMode?: string(name='FileMode', description='The permissions on the file.', example='777'),
      fileOwner?: string(name='FileOwner', description='The owner of the file.', example='test'),
      invocationStatus?: string(name='InvocationStatus', description='The overall sending state of the file. The overall sending state of the file depends on its sending state on all the destination instances. Valid values:

*   Pending: The file is being verified or sent.
*   Invalid: The file is invalid.
*   Running: The file is being sent to the instances.
*   Aborted: The file failed to be sent to the instances. To send a file to an instance, make sure that the instance is in the Running state and the file can be sent within 1 minute.
*   Success: The file is sent.
*   Failed: The file failed to be created on the instances.
*   Error: An error occurs and interrupts the file sending task.
*   Timeout: The file sending task times out.
*   Cancelled: The file sending task is canceled.
*   Stopping: The file sending task is being stopped.
*   Terminated: The file sending task is terminated.', example='Success'),
      invokeId?: string(name='InvokeId', description='The ID of the file sending task.', example='f-hz0jdfwd9f****'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime', description='The time when the file sending task was created.', example='2019-12-20T06:15:54Z'),
          errorCode?: string(name='ErrorCode', description='The error code returned when the file failed to be sent to the instance. Valid values:

*   Null: The file is sent to the instance.
*   InstanceNotExists: The instance does not exist or has been released.
*   InstanceReleased: The instance is released while the file is being sent.
*   InstanceNotRunning: The instance is not running when the file sending task is being created.
*   AccountNotExists: The specified account does not exist.
*   ClientNotRunning: Cloud Assistant Agent is not running.
*   ClientNotResponse: Cloud Assistant Agent does not respond.
*   ClientIsUpgrading: Cloud Assistant Agent is being upgraded.
*   ClientNeedUpgrade: Cloud Assistant Agent needs to be upgraded.
*   DeliveryTimeout: The file sending task timed out.
*   FileCreateFail: The file failed to be created.
*   FileAlreadyExists: A file with the same name already exists in the specified directory.
*   FileContentInvalid: The file content is invalid.
*   FileNameInvalid: The file name is invalid.
*   FilePathInvalid: The specified directory is invalid.
*   FileAuthorityInvalid: The specified permissions on the file are invalid.
*   UserGroupNotExists: The specified user group does not exist.', example='InstanceNotExists'),
          errorInfo?: string(name='ErrorInfo', description='The error message returned when the file failed to be sent or the file sending task failed to be executed. Valid values:

*   Null: The file is sent to the instance.
*   the specified instance does not exists
*   the specified instance has been released
*   the instance is not running when create task
*   the specified account does not exists
*   the aliyun service is not running on the instance
*   the aliyun service in the instance does not response
*   the aliyun service in the instance is upgrading now
*   the aliyun service in the instance need upgrade
*   the command delivery has been timeout
*   the file creation is failed due to unknown error
*   the authority of file is invalid
*   File content is empty
*   the content of file is invalid
*   File already exists
*   File name is invalid
*   File path is invalid
*   Owner not exists
*   Group not exists
*   Mode is invalid', example='the instance is not running when create task'),
          finishTime?: string(name='FinishTime', description='The time when the file sending task was completed.', example='2019-12-20T06:15:54Z'),
          instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-uf614fhehhz****'),
          invocationStatus?: string(name='InvocationStatus', description='The state of the file sending task.', example='Success'),
          startTime?: string(name='StartTime', description='The time when the file sending task started to be executed on the instance.', example='2019-12-20T06:15:54Z'),
          updateTime?: string(name='UpdateTime', description='The time when the task status was updated.', example='2019-12-20T06:15:54Z'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances', description='The destination instances.'),
      name?: string(name='Name', description='The name of the file.', example='test.txt'),
      overwrite?: string(name='Overwrite', description='Indicates whether a file in the destination directory is overwritten if the file has the same name as the sent file.', example='false'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the file sending task.', example='owner'),
          tagValue?: string(name='TagValue', description='The tag value of the file sending task.', example='zhangsan'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the file sending task.'),
      targetDir?: string(name='TargetDir', description='The destination directory.', example='/home/user'),
      vmCount?: int32(name='VmCount', description='The number of instances to which the file was sent.', example='1'),
    }
  ](name='Invocation')
  }(name='Invocations', description='The queried file sending records.'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: long(name='TotalCount', description='The total number of file sending tasks queried.', example='2'),
}

model DescribeSendFileResultsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSendFileResultsResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   When you send a file, the file may fail to be sent to specified Elastic Compute Service (ECS) instances. You can call this operation to check the file sending results.
  * *   You can call this operation to query the file sending records within the last six weeks.
  *
  * @param request DescribeSendFileResultsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSendFileResultsResponse
 */
async function describeSendFileResultsWithOptions(request: DescribeSendFileResultsRequest, runtime: Util.RuntimeOptions): DescribeSendFileResultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSendFileResults',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * *   When you send a file, the file may fail to be sent to specified Elastic Compute Service (ECS) instances. You can call this operation to check the file sending results.
  * *   You can call this operation to query the file sending records within the last six weeks.
  *
  * @param request DescribeSendFileResultsRequest
  * @return DescribeSendFileResultsResponse
 */
async function describeSendFileResults(request: DescribeSendFileResultsRequest): DescribeSendFileResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSendFileResultsWithOptions(request, runtime);
}

model DescribeSnapshotGroupsRequest {
  additionalAttributes?: [ string ](name='AdditionalAttributes', description='This parameter is unavailable.', example='hide'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-j6ca469urv8ei629****'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  name?: string(name='Name', description='The name of the snapshot-consistent group.', example='testName'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Set the value to the NextToken value that is returned from the last call.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the snapshot-consistent group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotGroupId?: [ string ](name='SnapshotGroupId', description='The ID of snapshot-consistent group N. Valid values of N: 1 to 10.', example='ssg-j6ciyh3k52qp7ovm****'),
  status?: [ string ](name='Status', description='The state of snapshot-consistent group N. Valid values of the second N: 1, 2, and 3. Valid values:

*   progressing: The snapshot-consistent group is being created.
*   accomplished: The snapshot-consistent group is created.
*   failed: The snapshot-consistent group fails to be created.', example='accomplished'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the snapshot-consistent group. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the snapshot-consistent group. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the snapshot-consistent group.'),
}

model DescribeSnapshotGroupsResponseBody = {
  nextToken?: string(name='NextToken', description='The token used to start the next query.

> If the return value is empty, no more data exists.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F9A4CC4-362F-469A-B9EF-B3204EF8AA3A'),
  snapshotGroups?: {
    snapshotGroup?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the snapshot-consistent group was created.', example='2021-03-23T10:58:48Z'),
      description?: string(name='Description', description='The description of the snapshot-consistent group.', example='This is description.'),
      instanceId?: string(name='InstanceId', description='The ID of the instance to which the snapshot-consistent group belongs. This parameter has a value only when all disk snapshots in the snapshot-consistent group belong to the same instance. If disk snapshots in the snapshot-consistent group belong to different instances, you can use parameters starting with `Snapshots.Snapshot.Tags.` in the response to view the ID of the instance to which each snapshot in the snapshot-consistent group belongs.', example='i-j6ca469urv8ei629****'),
      name?: string(name='Name', description='The name of the snapshot-consistent group.', example='testName'),
      progressStatus?: string(name='ProgressStatus', description='> This parameter is unavailable.', example='null'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the snapshot-consistent group belongs.', example='rg-bp67acfmxazb4p****'),
      snapshotGroupId?: string(name='SnapshotGroupId', description='The ID of the snapshot-consistent group.', example='ssg-j6ciyh3k52qp7ovm****'),
      snapshots?: {
        snapshot?: [ 
        {
          instantAccess?: boolean(name='InstantAccess', description='Indicates whether the instant access feature was enabled. Valid values:

*   true: The instant access feature was enabled. This feature can be enabled only for enhanced SSDs (ESSDs).
*   false: The instant access feature was disabled. The snapshot is a normal snapshot for which the instant access feature was disabled.', example='true'),
          instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The retention period of the instant access feature. After the retention period ends, the snapshot is automatically released.', example='3'),
          progress?: string(name='Progress', description='The progress of the snapshot creation task. Unit: percent (%).', example='100%'),
          snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-j6cbzmrlbf09w72q****'),
          sourceDiskId?: string(name='SourceDiskId', description='The ID of the source disk. This parameter is retained even after the source disk is released.', example='d-j6c3ogynmvpi6wy7****'),
          sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system: system disk
*   data: data disk', example='system'),
          tags?: {
            tag?: [ 
            {
              key?: string(name='Key', description='The tag key of each snapshot in the snapshot-consistent group. The default values of Key and Value contain the details of the instance to which the snapshot belongs.', example='acs:ecs:createFrom'),
              value?: string(name='Value', description='The tag value of each snapshot in the snapshot- consistent group. The default values of Key and Value contain the details of the instance to which the snapshot belongs.', example='i-bp11qm0o3dk4iuc****'),
            }
          ](name='Tag')
          }(name='Tags', description='The tags of the snapshots in the snapshot-consistent group. The default value contains the details of the instance to which the snapshot belongs.'),
        }
      ](name='Snapshot')
      }(name='Snapshots', description='Details of the snapshots in the snapshot-consistent group.'),
      status?: string(name='Status', description='The state of the snapshot-consistent group. Valid values:

*   progressing: The snapshot-consistent group is being created.
*   accomplished: The snapshot-consistent group is created.
*   failed: The snapshot-consistent group fails to be created.', example='accomplished'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key of the snapshot-consistent group.', example='TestKey'),
          value?: string(name='Value', description='The tag value of the snapshot-consistent group.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the snapshot-consistent group.'),
    }
  ](name='SnapshotGroup')
  }(name='SnapshotGroups', description='Details of the snapshot-consistent groups.'),
}

model DescribeSnapshotGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotGroupsResponseBody(name='body'),
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `SnapshotGroupId.N`, and `Status.N` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
  * @param request DescribeSnapshotGroupsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSnapshotGroupsResponse
 */
async function describeSnapshotGroupsWithOptions(request: DescribeSnapshotGroupsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.additionalAttributes)) {
    query['AdditionalAttributes'] = request.additionalAttributes;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotGroupId)) {
    query['SnapshotGroupId'] = request.snapshotGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshotGroups',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can specify multiple request parameters such as `InstanceId`, `SnapshotGroupId.N`, and `Status.N` to be queried. Specified parameters have logical AND relations. Only the specified parameters are included in the filter conditions.
  *
  * @param request DescribeSnapshotGroupsRequest
  * @return DescribeSnapshotGroupsResponse
 */
async function describeSnapshotGroups(request: DescribeSnapshotGroupsRequest): DescribeSnapshotGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotGroupsWithOptions(request, runtime);
}

model DescribeSnapshotLinksRequest {
  diskIds?: string(name='DiskIds', description='The disk IDs. You can specify a JSON array that contains a maximum of 100 disk IDs. Separate the disk IDs with commas (,).', example='["d-bp1d6tsvznfghy7y****", "d-bp1ippxbaql9zet7****", … "d-bp1ib7bcz07lcxa9****"]'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1h6jmbefj2cyqs****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='50'),
  regionId?: string(name='RegionId', description='The region ID of the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotLinkIds?: string(name='SnapshotLinkIds', description='The snapshot chain IDs. You can specify a JSON array that contains a maximum of 100 snapshot chain IDs. Separate the snapshot chain IDs with commas (,).', example='["sl-bp1grgphbcc9brb5****", "sl-bp1c4izumvq0i5bs****", … "sl-bp1akk7isz866dds****"]'),
}

model DescribeSnapshotLinksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotLinks?: {
    snapshotLink?: [ 
    {
      category?: string(name='Category', description='The type of the snapshot.

> This parameter will be removed in the future. We recommend that you configure `InstantAccess` to ensure compatibility.', example='standard'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1h6jmbefj2cyqs****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='testInstanceName'),
      instantAccess?: boolean(name='InstantAccess', description='Indicates whether the instant access feature is enabled. Valid values:

*   true: The instant access feature is enabled. This feature can be enabled only for enhanced SSDs (ESSDs).
*   false: The instant access feature is disabled. The snapshot is a normal snapshot for which the instant access feature is disabled.', example='false'),
      regionId?: string(name='RegionId', description='The ID of the region where the source disk of the snapshot chain is located.', example='cn-hangzhou'),
      snapshotLinkId?: string(name='SnapshotLinkId', description='The snapshot chain IDs.', example='sl-2ze0y1jwzpb1geqx****'),
      sourceDiskId?: string(name='SourceDiskId', description='The source disk ID. This parameter is retained even if the source disk is deleted.', example='d-bp1d6tsvznfghy7y****'),
      sourceDiskName?: string(name='SourceDiskName', description='The name of the source disk.', example='testSourceDiskName'),
      sourceDiskSize?: int32(name='SourceDiskSize', description='The size of the source disk. Unit: GiB.', example='40'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system: system disk
*   data: data disk', example='data'),
      totalCount?: int32(name='TotalCount', description='The total number of snapshots.', example='1'),
      totalSize?: long(name='TotalSize', description='The total size of all snapshots in the snapshot chain. Unit: bytes.', example='2097152'),
    }
  ](name='SnapshotLink')
  }(name='SnapshotLinks', description='The details about the snapshot chains.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='9'),
}

model DescribeSnapshotLinksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotLinksResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can configure multiple request parameters, such as `RegionId`, `DiskIds`, and `InstanceId`, to query snapshot chains. The parameters have logical AND relations.
  * *   Only the configured parameters are used as filter conditions. If `DiskIds` and `SnapshotLinkIds` are set to empty JSON arrays, the values are considered as valid filter conditions. In this case, an empty result is returned.
  *
  * @param request DescribeSnapshotLinksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSnapshotLinksResponse
 */
async function describeSnapshotLinksWithOptions(request: DescribeSnapshotLinksRequest, runtime: Util.RuntimeOptions): DescribeSnapshotLinksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotLinkIds)) {
    query['SnapshotLinkIds'] = request.snapshotLinkIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshotLinks',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   You can configure multiple request parameters, such as `RegionId`, `DiskIds`, and `InstanceId`, to query snapshot chains. The parameters have logical AND relations.
  * *   Only the configured parameters are used as filter conditions. If `DiskIds` and `SnapshotLinkIds` are set to empty JSON arrays, the values are considered as valid filter conditions. In this case, an empty result is returned.
  *
  * @param request DescribeSnapshotLinksRequest
  * @return DescribeSnapshotLinksResponse
 */
async function describeSnapshotLinks(request: DescribeSnapshotLinksRequest): DescribeSnapshotLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotLinksWithOptions(request, runtime);
}

model DescribeSnapshotMonitorDataRequest {
  category?: string(name='Category', description='The type of the snapshot. Valid values:

*   Standard: normal snapshot.
*   Flash: local snapshot.

Default value: Standard.', example='Standard'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2019-05-10T03:00:00Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The interval at which to query the monitoring data of snapshot sizes. Unit: seconds. Valid values:

*   60
*   600
*   3600

Default value: 60.', example='60'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of seconds (ss) is not 00, the time is rounded up to the next minute.', example='2019-05-10T00:00:00Z'),
}

model DescribeSnapshotMonitorDataResponseBody = {
  monitorData?: {
    dataPoint?: [ 
    {
      size?: long(name='Size', description='The total size of snapshots. Unit: bytes.', example='243036848128'),
      timeStamp?: string(name='TimeStamp', description='The timestamp that corresponds to a snapshot size.', example='2019-05-10T04:00:00Z'),
    }
  ](name='DataPoint')
  }(name='MonitorData', description='The monitoring data of snapshot sizes.'),
  requestId?: string(name='RequestId', description='The request ID.', example='9F8163A8-F5DE-47A2-A572-4E062D223E09'),
}

model DescribeSnapshotMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotMonitorDataResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   Up to 400 entries of monitoring data can be returned at a time. If the result of the `(EndTime - StartTime)/Period` formula is greater than 400, an error is returned.
  * *   Only the monitored data within the last 30 days can be queried. If the value of `StartTime` is more than 30 days earlier than the time when you call this operation, an error is returned.
  *
  * @param request DescribeSnapshotMonitorDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSnapshotMonitorDataResponse
 */
async function describeSnapshotMonitorDataWithOptions(request: DescribeSnapshotMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeSnapshotMonitorDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshotMonitorData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   Up to 400 entries of monitoring data can be returned at a time. If the result of the `(EndTime - StartTime)/Period` formula is greater than 400, an error is returned.
  * *   Only the monitored data within the last 30 days can be queried. If the value of `StartTime` is more than 30 days earlier than the time when you call this operation, an error is returned.
  *
  * @param request DescribeSnapshotMonitorDataRequest
  * @return DescribeSnapshotMonitorDataResponse
 */
async function describeSnapshotMonitorData(request: DescribeSnapshotMonitorDataRequest): DescribeSnapshotMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotMonitorDataWithOptions(request, runtime);
}

model DescribeSnapshotPackageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The region ID of the snapshot. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  regionId?: string(name='RegionId', description='The ID of the request.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeSnapshotPackageResponseBody = {
  pageNumber?: int32(name='PageNumber', description='Details about the OSS storage plans.', example='1'),
  pageSize?: int32(name='PageSize', description='The page number of the returned page.', example='10'),
  requestId?: string(name='RequestId', description='The total number of returned OSS storage plans.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotPackages?: {
    snapshotPackage?: [ 
    {
      displayName?: string(name='DisplayName', description='The time when the OSS storage plan was purchased. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='testDisplayName'),
      endTime?: string(name='EndTime', description='The maximum storage capacity offered by the OSS storage plan.', example='2018-11-30T06:32:31Z'),
      initCapacity?: long(name='InitCapacity', example='500'),
      startTime?: string(name='StartTime', description='DescribeSnapshotPackage', example='2017-11-30T06:32:31Z'),
    }
  ](name='SnapshotPackage')
  }(name='SnapshotPackages', description='The time when the OSS storage plan expires. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.'),
  totalCount?: int32(name='TotalCount', description='The name of the OSS storage plan.', example='1'),
}

model DescribeSnapshotPackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotPackageResponseBody(name='body'),
}

async function describeSnapshotPackageWithOptions(request: DescribeSnapshotPackageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotPackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshotPackage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSnapshotPackage(request: DescribeSnapshotPackageRequest): DescribeSnapshotPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotPackageWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  filter?: [
    {
      key?: string(name='Key', description='The key of filter 1 that is used to query resources. Set the value to `CreationStartTime`. You can specify a time by configuring both `Filter.1.Key` and `Filter.1.Value` to query resources that were created after the time.', example='CreationStartTime'),
      value?: string(name='Value', description='The value of filter 1 that is used to query resources. Set the value to a time. If you configure this parameter, you must also configure `Filter.1.Key`. Specify the time in the `yyyy-MM-ddTHH:mmZ` format. The time must be in UTC.', example='2019-12-13T17:00Z'),
    }
  ](name='Filter'),
  category?: string(name='Category', description='The type of the snapshot. Valid values:

*   Standard: normal snapshot
*   Flash: local snapshot

The local snapshot feature is replaced by the instant access feature. When you configure this parameter, take note of the following items:

*   If you have used local snapshots before December 14, 2020, you can use this parameter.
*   If you have not used local snapshots before December 14, 2020, you cannot use this parameter.

> This parameter will be deprecated in the future. We recommend that you use other parameters to ensure future compatibility.', example='Standard'),
  diskId?: string(name='DiskId', description='The disk ID.', example='d-bp67acfmxazb4p****'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request passes the dry run, the DryRunOperation error code is returned. Otherwise, an error message is returned.
*   false (default): performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether the snapshot is encrypted. Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used for the data disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page. Maximum value: 1 to 100.

Default value: 10.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Valid values: 1 to 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the disk. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID. If you configure this parameter to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.

> Resources in the default resource group are displayed in the response regardless of whether you configure this parameter.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotIds?: string(name='SnapshotIds', description='The IDs of snapshots. You can specify a JSON array that consists of up to 100 snapshot IDs. Separate the snapshot IDs with commas (,).', example='["s-bp67acfmxazb4p****", "s-bp67acfmxazb5p****", … "s-bp67acfmxazb6p****"]'),
  snapshotLinkId?: string(name='SnapshotLinkId', description='The snapshot chain ID. You can specify a JSON array that contains up to 100 snapshot chain IDs. Separate the snapshot chain IDs with commas (,).', example='["sl-bp1grgphbcc9brb5****", "sl-bp1c4izumvq0i5bs****", … "sl-bp1akk7isz866dds****"]'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot.', example='testSnapshotName'),
  snapshotType?: string(name='SnapshotType', description='The type of the snapshot. Valid values:

*   auto: automatic snapshot
*   user: manual snapshot
*   all (default): all snapshot types', example='all'),
  sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   System: system disk
*   data: data disk

> The value of this parameter is case-insensitive.', example='Data'),
  status?: string(name='Status', description='The status of the snapshot. Valid values:

*   progressing: The snapshot is being created.
*   accomplished: The snapshot is created.
*   failed: The snapshot fails to be created.
*   all (default): This value indicates all snapshot states.', example='all'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the snapshot. Valid values of N: 1 to 20.

Up to 1,000 resources that match the tags specified can be returned in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the snapshot. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  usage?: string(name='Usage', description='Specifies whether the snapshot has been used to create custom images or disks. Valid values:

*   image: The snapshot has been used to create custom images.
*   disk: The snapshot has been used to create disks.
*   image_disk: The snapshot has been used to create both custom images and data disks.
*   none: The snapshot has not been used to create custom images or disks.', example='none'),
}

model DescribeSnapshotsResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshots?: {
    snapshot?: [ 
    {
      category?: string(name='Category', description='The type of the snapshot.

>  This parameter will be deprecated in the future. We recommend that you use `InstantAccess` to ensure future compatibility.', example='standard'),
      creationTime?: string(name='CreationTime', description='The time when the snapshot was created. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-08-20T14:52:28Z'),
      description?: string(name='Description', description='The description of the snapshot.', example='testDescription'),
      encrypted?: boolean(name='Encrypted', description='Indicates whether the snapshot was encrypted.', example='false'),
      instantAccess?: boolean(name='InstantAccess', description='Indicates whether the instant access feature is enabled. Valid values:

*   true. This feature can be enabled only for enhanced SSDs (ESSDs).
*   false. The snapshot is a normal snapshot for which the instant access feature is disabled.', example='false'),
      instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays', description='The validity period of the instant access feature. The instant access feature is automatically disabled when the specified period expires.

By default, the value of this parameter is the same as the value of the `RetentionDays` parameter.', example='30'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key used for the data disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
      lastModifiedTime?: string(name='LastModifiedTime', description='The time when the snapshot was last changed. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-08-25T14:18:09Z'),
      productCode?: string(name='ProductCode', description='The product number inherited from Alibaba Cloud Marketplace.', example='jxsc000****'),
      progress?: string(name='Progress', description='The progress of the snapshot creation task in percentage.', example='100%'),
      remainTime?: int32(name='RemainTime', description='The remaining time that is required to create the snapshot. Unit: seconds.', example='38'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-bp67acfmxazb4p****'),
      retentionDays?: int32(name='RetentionDays', description='The retention period of the automatic snapshot. Unit: day.', example='30'),
      snapshotId?: string(name='SnapshotId', description='The snapshot ID.', example='s-bp67acfmxazb4p****'),
      snapshotName?: string(name='SnapshotName', description='The display name of the snapshot. This parameter is returned only if a snapshot display name was specified when the snapshot was created.', example='testSnapshotName'),
      snapshotSN?: string(name='SnapshotSN', description='The serial number of the snapshot.', example='64472-116742336-61976****'),
      snapshotType?: string(name='SnapshotType', description='The type of the snapshot. Valid values:

*   auto or timer: automatic snapshot
*   user: manual snapshot
*   all: all snapshot types', example='all'),
      sourceDiskId?: string(name='SourceDiskId', description='The source disk ID. This parameter is retained even after the source disk is released.', example='d-bp67acfmxazb4ph****'),
      sourceDiskSize?: string(name='SourceDiskSize', description='The capacity of the source disk. Unit: GiB.', example='40'),
      sourceDiskType?: string(name='SourceDiskType', description='The type of the source disk. Valid values:

*   system
*   data', example='system'),
      sourceRegionId?: string(name='SourceRegionId', description='The region ID of the source snapshot.', example='cn-hangzhou'),
      sourceSnapshotId?: string(name='SourceSnapshotId', description='The source snapshot ID.', example='s-bp67acfmxazb4p****'),
      sourceStorageType?: string(name='SourceStorageType', description='The type of the source disk.

> This parameter will be deprecated in the future. We recommend that you use other parameters to ensure future compatibility.', example='disk'),
      status?: string(name='Status', description='The status of the snapshot. Valid values:

*   progressing
*   accomplished
*   failed', example='accomplished'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The tag key of the snapshot.', example='TestKey'),
          tagValue?: string(name='TagValue', description='The tag value of the snapshot.', example='TestValue'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags.'),
      usage?: string(name='Usage', description='Indicates whether the snapshot has been used to create custom images or disks. Valid values:

*   image
*   disk
*   image_disk
*   none', example='image'),
    }
  ](name='Snapshot')
  }(name='Snapshots', description='The details about the snapshots.'),
  totalCount?: int32(name='TotalCount', description='The total number of snapshots returned.', example='1'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

/**
  * You can configure multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to query snapshots. Configured parameters have logical AND relations. Only the configured parameters are included in the filter conditions.
  * When you use Alibaba Cloud CLI to call an API operation, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeSnapshotsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSnapshotsResponse
 */
async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    query['SnapshotIds'] = request.snapshotIds;
  }
  if (!Util.isUnset(request.snapshotLinkId)) {
    query['SnapshotLinkId'] = request.snapshotLinkId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  if (!Util.isUnset(request.snapshotType)) {
    query['SnapshotType'] = request.snapshotType;
  }
  if (!Util.isUnset(request.sourceDiskType)) {
    query['SourceDiskType'] = request.sourceDiskType;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.usage)) {
    query['Usage'] = request.usage;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshots',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can configure multiple request parameters such as `InstanceId`, `DiskId`, and `SnapshotIds` to query snapshots. Configured parameters have logical AND relations. Only the configured parameters are included in the filter conditions.
  * When you use Alibaba Cloud CLI to call an API operation, you must specify request parameter values of different data types in required formats. For more information, see [Parameter format overview](~~110340~~).
  *
  * @param request DescribeSnapshotsRequest
  * @return DescribeSnapshotsResponse
 */
async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSnapshotsUsageRequest {
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the snapshot. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
}

model DescribeSnapshotsUsageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  snapshotCount?: int32(name='SnapshotCount', description='The number of snapshots stored in the current region.', example='5'),
  snapshotSize?: long(name='SnapshotSize', description='The total size of snapshots stored in the current region. Unit: byte.', example='122'),
}

model DescribeSnapshotsUsageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSnapshotsUsageResponseBody(name='body'),
}

/**
  * If you want to view the snapshot usage information about each disk in the current region, we recommend that you call the [DescribeSnapshotLinks](~~55837~~) operation to query snapshot chain information.
  *
  * @param request DescribeSnapshotsUsageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSnapshotsUsageResponse
 */
async function describeSnapshotsUsageWithOptions(request: DescribeSnapshotsUsageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsUsageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSnapshotsUsage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If you want to view the snapshot usage information about each disk in the current region, we recommend that you call the [DescribeSnapshotLinks](~~55837~~) operation to query snapshot chain information.
  *
  * @param request DescribeSnapshotsUsageRequest
  * @return DescribeSnapshotsUsageResponse
 */
async function describeSnapshotsUsage(request: DescribeSnapshotsUsageRequest): DescribeSnapshotsUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsUsageWithOptions(request, runtime);
}

model DescribeSpotAdviceRequest {
  cores?: int32(name='Cores', description='The number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).', example='2'),
  gpuAmount?: int32(name='GpuAmount', description='The number of GPUs that a GPU-accelerated instance has. For information about the valid values, see [GPU-accelerated compute optimized instance types](~~108496~~).', example='2'),
  gpuSpec?: string(name='GpuSpec', description='The GPU type. Valid values:

*   NVIDIA P4
*   NVIDIA T4
*   NVIDIA P100
*   NVIDIA V100
*   NVIDIA A100

This parameter is left empty by default, which indicates that all GPU types are queried. For more information, see [GPU-accelerated compute optimized instance types](~~108496~~).', example='NVIDIA T4'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', description='The level of the instance family. Valid values:

*   EntryLevel.
*   EnterpriseLevel.
*   CreditEntryLevel. For more information, see [Overview of burstable instances](~~59977~~).

This parameter is left empty by default, which indicates that instance families at all levels are queried.', example='EntryLevel'),
  instanceTypeFamily?: string(name='InstanceTypeFamily', description='The instance family. For more information, see [Instance families](~~25378~~).', example='ecs.c5'),
  instanceTypes?: [ string ](name='InstanceTypes', description='The instance types. You can specify up to 10 instance types.', example='ecs.c5.large'),
  memory?: float(name='Memory', description='The memory size of the instance type. Unit: GiB. For more information, see [Instance families](~~25378~~).', example='8.0'),
  minCores?: int32(name='MinCores', description='The minimum number of vCPUs of the instance type. For more information, see [Instance families](~~25378~~).', example='2'),
  minMemory?: float(name='MinMemory', description='The minimum memory size of the instance type. For more information, see [Instance families](~~25378~~).', example='8.0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId', description='The zone ID.

This parameter is left empty by default, which indicates that all zones in the specified region are queried.', example='cn-hangzhou-i'),
}

model DescribeSpotAdviceResponseBody = {
  availableSpotZones?: {
    availableSpotZone?: [ 
    {
      availableSpotResources?: {
        availableSpotResource?: [ 
        {
          averageSpotDiscount?: int32(name='AverageSpotDiscount', description='The percentage of the average preemptible instance price relative to the pay-as-you-go instance price in the last 30 days. Unit: %. Valid values: 1 to 100.

You can calculate the average preemptible instance price based on the return value. For example, if the pay-as-you-go instance price is 1 and the return value of this parameter is 20, the average preemptible instance price in the last 30 days is 0.2.', example='20'),
          instanceType?: string(name='InstanceType', description='The instance type.', example='ecs.c5.large'),
          interruptRateDesc?: string(name='InterruptRateDesc', description='The release rate range of preemptible instances in the last 30 days, which corresponds to the value of the `InterruptionRate` parameter. Valid values:

*   0-3%
*   3-5%
*   5-10%
*   10-100%', example='0-3%'),
          interruptionRate?: float(name='InterruptionRate', description='The average release rate of preemptible instances in the last 30 days. Unit: %.', example='0'),
        }
      ](name='AvailableSpotResource')
      }(name='AvailableSpotResources', description='Details about preemptible instances in the last 30 days, including the release rate of preemptible instances and percentages of average prices of preemptible instances relative to pay-as-you-go instance prices.'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-i'),
    }
  ](name='AvailableSpotZone')
  }(name='AvailableSpotZones', description='Details about preemptible instances in the zones of the specified region.

> The return values are sorted based on the historical percentages of average prices of preemptible instances of the specified instance type relative to pay-as-you-go instance prices.'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DescribeSpotAdviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSpotAdviceResponseBody(name='body'),
}

/**
  * *   You can call this operation to query information that is generated for preemptible instances in the last 30 days and select suitable instance types based on the query results. The information that you can query includes:
  *     *   Average release rate of preemptible instances
  *     *   Percentage of the average preemptible instance price relative to the pay-as-you-go instance price
  *     *   Average preemptible instance price that is calculated based on the preceding percentage
  * *   This operation is applicable only to I/O optimized preemptible instances that reside in virtual private clouds (VPCs).
  * *   You can use one of the following methods to query information that is generated for preemptible instances in the last 30 days:
  *     *   Configure `Cores` and `Memory` or `MinCores` and `MinMemory` to query information about an instance type that meets the specified vCPU and memory requirements.
  *     *   Configure the `InstanceTypes.N` parameter to query information about a specified instance type.
  *     *   Configure `Cores` and `Memory` or `MinCores` and `MinMemory`, and then configure `InstanceTypeFamily` or `InstanceFamilyLevel` to query information about an instance type that meets the specified vCPU and memory requirements within the specified instance family or at a specified instance family level.
  *
  * @param request DescribeSpotAdviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSpotAdviceResponse
 */
async function describeSpotAdviceWithOptions(request: DescribeSpotAdviceRequest, runtime: Util.RuntimeOptions): DescribeSpotAdviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cores)) {
    query['Cores'] = request.cores;
  }
  if (!Util.isUnset(request.gpuAmount)) {
    query['GpuAmount'] = request.gpuAmount;
  }
  if (!Util.isUnset(request.gpuSpec)) {
    query['GpuSpec'] = request.gpuSpec;
  }
  if (!Util.isUnset(request.instanceFamilyLevel)) {
    query['InstanceFamilyLevel'] = request.instanceFamilyLevel;
  }
  if (!Util.isUnset(request.instanceTypeFamily)) {
    query['InstanceTypeFamily'] = request.instanceTypeFamily;
  }
  if (!Util.isUnset(request.instanceTypes)) {
    query['InstanceTypes'] = request.instanceTypes;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.minCores)) {
    query['MinCores'] = request.minCores;
  }
  if (!Util.isUnset(request.minMemory)) {
    query['MinMemory'] = request.minMemory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpotAdvice',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation to query information that is generated for preemptible instances in the last 30 days and select suitable instance types based on the query results. The information that you can query includes:
  *     *   Average release rate of preemptible instances
  *     *   Percentage of the average preemptible instance price relative to the pay-as-you-go instance price
  *     *   Average preemptible instance price that is calculated based on the preceding percentage
  * *   This operation is applicable only to I/O optimized preemptible instances that reside in virtual private clouds (VPCs).
  * *   You can use one of the following methods to query information that is generated for preemptible instances in the last 30 days:
  *     *   Configure `Cores` and `Memory` or `MinCores` and `MinMemory` to query information about an instance type that meets the specified vCPU and memory requirements.
  *     *   Configure the `InstanceTypes.N` parameter to query information about a specified instance type.
  *     *   Configure `Cores` and `Memory` or `MinCores` and `MinMemory`, and then configure `InstanceTypeFamily` or `InstanceFamilyLevel` to query information about an instance type that meets the specified vCPU and memory requirements within the specified instance family or at a specified instance family level.
  *
  * @param request DescribeSpotAdviceRequest
  * @return DescribeSpotAdviceResponse
 */
async function describeSpotAdvice(request: DescribeSpotAdviceRequest): DescribeSpotAdviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotAdviceWithOptions(request, runtime);
}

model DescribeSpotPriceHistoryRequest {
  endTime?: string(name='EndTime', description='The beginning of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. The specified time can be up to 30 days earlier than the specified EndTime value.

This parameter is empty by default. If this parameter is empty, the time that is 3 hours earlier than the specified EndTime value is used.', example='2017-08-22T08:45:08Z'),
  instanceType?: string(name='InstanceType', description='The network type of the preemptible instance. Valid values:

*   classic: classic network
*   vpc: Virtual Private Cloud (VPC)', example='ecs.t1.xsmall'),
  ioOptimized?: string(name='IoOptimized', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   The following protection periods are available in invitational preview: 2, 3, 4, 5, and 6 hours. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='optimized'),
  networkType?: string(name='NetworkType', description='The zone ID of the preemptible instance.', example='vpc'),
  OSType?: string(name='OSType', description='The end of the time range to query. Specify the time in the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.

This parameter is empty by default. If this parameter is empty, the current time is used.', example='linux'),
  offset?: int32(name='Offset', description='The type of the operating system platform. Valid values:

*   linux
*   windows', example='0'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='Queries the price history of a preemptible instance within the last 30 days.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotDuration?: int32(name='SpotDuration', description='The instance type of the preemptible instance.', example='1'),
  startTime?: string(name='StartTime', description='Specifies whether the instance is I/O optimized. Valid values:

*   optimized: The instance is I/O optimized.
*   none: The instance is not I/O optimized.

For instances of generation I instance families, the default value is none.

For instances of other instance families, the default value is optimized.', example='2017-08-22T08:45:08Z'),
  zoneId?: string(name='ZoneId', description='The region ID of the preemptible instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou-g'),
}

model DescribeSpotPriceHistoryResponseBody = {
  currency?: string(name='Currency', description='The ID of the request.', example='CNY'),
  nextOffset?: int32(name='NextOffset', description='The currency unit of the price.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='1000'),
  requestId?: string(name='RequestId', description='The line from which the next query starts.

Default value: 0.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  spotPrices?: {
    spotPriceType?: [ 
    {
      instanceType?: string(name='InstanceType', example='ecs.g5.large'),
      ioOptimized?: string(name='IoOptimized', description='Details about the price history of the preemptible instance.', example='optimized'),
      networkType?: string(name='NetworkType', description='The time that corresponds to the queried spot price. The time is in the `yyyy-MM-ddTHH:mm:ssZ` format.', example='vpc'),
      originPrice?: float(name='OriginPrice', example='0.354'),
      spotPrice?: float(name='SpotPrice', description='The zone ID of the preemptible instance.', example='0.036'),
      timestamp?: string(name='Timestamp', description='The spot price (market price) of the preemptible instance.', example='2019-11-19T06:00:00Z'),
      zoneId?: string(name='ZoneId', description='Indicates whether the preemptible instance is I/O optimized.', example='cn-hangzhou-c'),
    }
  ](name='SpotPriceType')
  }(name='SpotPrices', description='The start line of the next page. It is the value of the `Offset` request parameter.'),
}

model DescribeSpotPriceHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSpotPriceHistoryResponseBody(name='body'),
}

async function describeSpotPriceHistoryWithOptions(request: DescribeSpotPriceHistoryRequest, runtime: Util.RuntimeOptions): DescribeSpotPriceHistoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.OSType)) {
    query['OSType'] = request.OSType;
  }
  if (!Util.isUnset(request.offset)) {
    query['Offset'] = request.offset;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSpotPriceHistory',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSpotPriceHistory(request: DescribeSpotPriceHistoryRequest): DescribeSpotPriceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotPriceHistoryWithOptions(request, runtime);
}

model DescribeStorageCapacityUnitsRequest {
  allocationType?: string(name='AllocationType', description='The allocation type. Valid values:

*   Normal: queries SCUs that belong to the current Alibaba Cloud account.
*   Shared: queries SCUs shared between the Alibaba Cloud account and RAM users.

Default value: Normal.', example='Normal'),
  capacity?: int32(name='Capacity', description='The capacity of the SCU. Unit: GiB. Valid values: 20, 40, 100, 200, 500, 1024, 2048, 5120, 10240, 20480, and 51200.', example='20'),
  name?: string(name='Name', description='The name of the SCU. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testScuName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the SCU. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: [ string ](name='Status', description='The state of SCUs. You can specify 1 to 4 types of state. Valid values:

*   Creating: The SCUs are being created.
*   Active: The SCUs are in effect.
*   Expired: The SCUs have expired.
*   Pending: The SCUs have not taken effect.', example='Active'),
  storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId', description='One or multiple SCU IDs. You can specify 1 to 100 SCU IDs.', example='scu-bp67acfmxazb4p****'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the SCU. N is the identifier for the tag, which you can use to set and query the tag. Valid values of N: 1 to 20.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the SCU. N is the identifier for the tag, which you can use to set and query the tag. The value of N must coincide with `Tag.N.Key`. Valid values of N: 1 to 20.', example='TestValue'),
    }
  ](name='Tag', description='The tags of the SCUs.'),
}

model DescribeStorageCapacityUnitsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageCapacityUnits?: {
    storageCapacityUnit?: [ 
    {
      allocationStatus?: string(name='AllocationStatus', description='Indicates the allocation state of the SCU when the AllocationType parameter is set to Shared. Valid values:

*   allocated: The SCU is allocated to other accounts.
*   BeAllocated: The SCU is allocated from another account.', example='allocated'),
      capacity?: int32(name='Capacity', description='The capacity of the SCU.', example='20'),
      creationTime?: string(name='CreationTime', description='The time when the SCU was created.', example='2021-08-17T02:55Z'),
      description?: string(name='Description', description='The description of the SCU.', example='testScuDescription'),
      expiredTime?: string(name='ExpiredTime', description='The time when the SCU expires.', example='2021-09-17T16:00Z'),
      name?: string(name='Name', description='The name of the SCU.', example='testScuName'),
      regionId?: string(name='RegionId', description='The region ID of the SCU.', example='cn-hangzhou'),
      startTime?: string(name='StartTime', description='The time when the SCU took effect.', example='2021-08-17T02:55Z'),
      status?: string(name='Status', description='The state of the SCU.', example='Active'),
      storageCapacityUnitId?: string(name='StorageCapacityUnitId', description='The ID of the SCU.', example='scu-bp67acfmxazb4p****'),
      tags?: {
        tag?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of tag N.', example='TestValue'),
          tagValue?: string(name='TagValue', description='The value of tag N.', example='TestKey'),
        }
      ](name='Tag')
      }(name='Tags', description='The tag key-value pairs of the SCU.'),
    }
  ](name='StorageCapacityUnit')
  }(name='StorageCapacityUnits', description='Details about the SCUs.'),
  totalCount?: int32(name='TotalCount', description='The total number of SCUs.', example='1'),
}

model DescribeStorageCapacityUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageCapacityUnitsResponseBody(name='body'),
}

async function describeStorageCapacityUnitsWithOptions(request: DescribeStorageCapacityUnitsRequest, runtime: Util.RuntimeOptions): DescribeStorageCapacityUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationType)) {
    query['AllocationType'] = request.allocationType;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.storageCapacityUnitId)) {
    query['StorageCapacityUnitId'] = request.storageCapacityUnitId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageCapacityUnits',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageCapacityUnits(request: DescribeStorageCapacityUnitsRequest): DescribeStorageCapacityUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageCapacityUnitsWithOptions(request, runtime);
}

model DescribeStorageSetDetailsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  diskIds?: string(name='DiskIds', description='The IDs of disks or Shared Block Storage devices. The value can be a JSON array that consists of up to 100 disk or Shared Block Storage device IDs. Separate the IDs with commas (,).', example='["d-bp1d6tsvznfghy7y****", "d-bp1ippxbaql9zet7****", … "d-bp1ib7bcz07l****"]'),
  ownerAccount?: string(name='OwnerAccount', example='hide'),
  ownerId?: long(name='OwnerId', example='111'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set.', example='3'),
}

model DescribeStorageSetDetailsResponseBody = {
  disks?: {
    disk?: [ 
    {
      category?: string(name='Category', description='The category of the disk or Shared Block Storage device.', example='cloud_ssd'),
      creationTime?: string(name='CreationTime', description='The time when the disk or Shared Block Storage device was created.', example='2019-06-01T00:00:00Z'),
      diskId?: string(name='DiskId', description='The ID of the disk or Shared Block Storage device.', example='d-bp67acfmxazb4p****'),
      diskName?: string(name='DiskName', description='The name of the disk or Shared Block Storage device.', example='testDiskName'),
      regionId?: string(name='RegionId', description='The region to which the disk or Shared Block Storage device belongs.', example='cn-hangzhou'),
      storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The number of partitions in the storage set.', example='3'),
      zoneId?: string(name='ZoneId', description='The zone to which the disk or Shared Block Storage device belongs.', example='cn-hangzhou-g'),
    }
  ](name='Disk')
  }(name='Disks', description='Details about the disks or Shared Block Storage devices in the storage set.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='49765E79-0D5D-4451-B3AE-580A20831846'),
  totalCount?: int32(name='TotalCount', description='The total number of storage sets.', example='1'),
}

model DescribeStorageSetDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageSetDetailsResponseBody(name='body'),
}

async function describeStorageSetDetailsWithOptions(request: DescribeStorageSetDetailsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageSetDetails',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageSetDetails(request: DescribeStorageSetDetailsRequest): DescribeStorageSetDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetDetailsWithOptions(request, runtime);
}

model DescribeStorageSetsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount', example='hide'),
  ownerId?: long(name='OwnerId', example='111'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Pages start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: 100.

Default value: 10.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  storageSetIds?: string(name='StorageSetIds', description='The IDs of storage sets. The value is a JSON array that consists of up to 100 storage set IDs. Separate the IDs with commas (,).', example='["ss-bp1d6tsvznfghy7y****", "ss-bp1ippxbaql9zet7****", … "ss-bp1ib7bcz07l****"]'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='storageSetTest'),
  zoneId?: string(name='ZoneId', description='The zone ID of the storage set. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g'),
}

model DescribeStorageSetsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageSets?: {
    storageSet?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the storage set was created.', example='2019-06-01T00:00:00Z'),
      description?: string(name='Description', description='The description of the storage set.', example='testDescription'),
      regionId?: string(name='RegionId', description='The ID of the region to which the storage set belongs.', example='cn-hangzhou'),
      storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp1d6tsvznfghy7y****'),
      storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='testStorageSetName'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions supported by the storage set.', example='3'),
      zoneId?: string(name='ZoneId', description='The ID of the zone to which the storage set belongs.', example='cn-hangzhou-g'),
    }
  ](name='StorageSet')
  }(name='StorageSets', description='Details about the storage sets. The value of this parameter is an array that consists of StorageSet data.'),
  totalCount?: int32(name='TotalCount', description='The total number of storage sets.', example='20'),
}

model DescribeStorageSetsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeStorageSetsResponseBody(name='body'),
}

async function describeStorageSetsWithOptions(request: DescribeStorageSetsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetIds)) {
    query['StorageSetIds'] = request.storageSetIds;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStorageSets',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStorageSets(request: DescribeStorageSetsRequest): DescribeStorageSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetsWithOptions(request, runtime);
}

model DescribeTagsRequest {
  category?: string(name='Category', description='> This parameter will be deprecated in the future. We recommend that you use other parameters to ensure future compatibility.', example='null'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Page starts from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Valid values: 1 to 100.

Default value: 50.', example='50'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: string(name='ResourceId', description='The ID of the resource to which the tags are added. If the resource is an instance, the value of this parameter is the ID of the instance.', example='s-946ntx4wr****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource to which the tags are added. Valid values:

*   instance: Elastic Compute Service (ECS) instance.
*   disk: disk.
*   snapshot: snapshot.
*   image: image.
*   securitygroup: security group.
*   volume: storage volume.
*   eni: elastic network interface (ENI).
*   ddh: dedicated host.
*   keypair: SSH key pair.
*   launchtemplate: launch template.
*   reservedinstance: reserved instance.
*   snapshotpolicy: automatic snapshot policy.

All values must be in lowercase letters.', example='snapshot'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://.](http://https://。)', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot start with acs: or aliyun. It cannot contain [http:// or https://.](http://https://。)', example='TestValue'),
    }
  ](name='Tag', description='The tags of the resource.'),
}

model DescribeTagsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B04B8CF3-4489-432D-83BA-6F128E4F2295'),
  tags?: {
    tag?: [ 
    {
      resourceTypeCount?: {
        ddh?: int32(name='Ddh', description='The number of dedicated hosts to which the tag is added.', example='1'),
        disk?: int32(name='Disk', description='The number of disks to which the tag is added.', example='15'),
        eni?: int32(name='Eni', description='The number of ENIs to which the tag is added.', example='5'),
        image?: int32(name='Image', description='The number of images to which the tag is added.', example='6'),
        instance?: int32(name='Instance', description='The number of instances to which the tag is added.', example='45'),
        keyPair?: int32(name='KeyPair', description='The number of key pairs to which the tag is added.', example='17'),
        launchTemplate?: int32(name='LaunchTemplate', description='The number of launch templates to which the tag is added.', example='6'),
        reservedInstance?: int32(name='ReservedInstance', description='The number of reserved instances to which the tag is added.', example='4'),
        securitygroup?: int32(name='Securitygroup', description='The number of security groups to which the tag is added.', example='4'),
        snapshot?: int32(name='Snapshot', description='The number of snapshots to which the tag is added.', example='15'),
        snapshotPolicy?: int32(name='SnapshotPolicy', description='The number of automatic snapshot policies to which the tag is added.', example='4'),
        volume?: int32(name='Volume', description='The number of storage volumes to which the tag is added.', example='6'),
      }(name='ResourceTypeCount', description='The number of resource types.'),
      tagKey?: string(name='TagKey', description='The tag key.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The tag value.', example='TestValue'),
    }
  ](name='Tag')
  }(name='Tags', description='The tags that match all filter conditions.'),
  totalCount?: int32(name='TotalCount', description='The total number of tags.', example='1'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTagsResponseBody(name='body'),
}

/**
  * If a tag key that has no tag value is specified, all tags that contain the tag key are returned. If a tag key-value pair is specified, only tags that exactly match the key-value pair are returned.
  *
  * @param request DescribeTagsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTagsResponse
 */
async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTags',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If a tag key that has no tag value is specified, all tags that contain the tag key are returned. If a tag key-value pair is specified, only tags that exactly match the key-value pair are returned.
  *
  * @param request DescribeTagsRequest
  * @return DescribeTagsResponse
 */
async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeTaskAttributeRequest {
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
  taskId?: string(name='TaskId', description='The ID of the task. You can call the [DescribeTasks](~~25622~~) operation to query the list of task IDs.', example='t-ce946ntx4wr****'),
}

model DescribeTaskAttributeResponseBody = {
  creationTime?: string(name='CreationTime', description='The time when the task was created.', example='2015-11-23T02:13Z'),
  failedCount?: int32(name='FailedCount', description='The number of failed tasks.', example='0'),
  finishedTime?: string(name='FinishedTime', description='The time when the task was complete.', example='2015-11-23T02:19Z'),
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code.', example='ParameterInvalid'),
      errorMsg?: string(name='ErrorMsg', description='The error message.', example='The specified RegionId parameter is invalid.'),
      operationStatus?: string(name='OperationStatus', description='The status of the operation.', example='Success'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name', description='The name of the related item.', example='OSSObject'),
          value?: string(name='Value', description='The value of the related item.', example='MYOSSPRE_m-23f8tcp***_t-23ym6mv***.vhd'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet', description='An array consisting of RelatedItem data.'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet', description='An array consisting of OperationProgress data of each subtask.'),
  regionId?: string(name='RegionId', description='The region ID of the task.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  successCount?: int32(name='SuccessCount', description='The number of completed tasks.', example='1'),
  supportCancel?: string(name='SupportCancel', description='Indicates whether the task can be canceled ([CancelTask](https://www.alibabacloud.com/help/en/elastic-compute-service/latest/canceltask)). Valid values: 

- true: The task can be canceled.
- false: The task cannot be canceled.', example='true'),
  taskAction?: string(name='TaskAction', description='The operation name of the task.', example='ExportImage'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='t-ce946ntx4wr****'),
  taskProcess?: string(name='TaskProcess', description='The progress of the task.', example='100%'),
  taskStatus?: string(name='TaskStatus', description='The status of the task.', example='Finished'),
  totalCount?: int32(name='TotalCount', description='The total number of tasks.', example='1'),
}

model DescribeTaskAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTaskAttributeResponseBody(name='body'),
}

async function describeTaskAttributeWithOptions(request: DescribeTaskAttributeRequest, runtime: Util.RuntimeOptions): DescribeTaskAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskAttribute(request: DescribeTaskAttributeRequest): DescribeTaskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskAttributeWithOptions(request, runtime);
}

model DescribeTasksRequest {
  endTime?: string(name='EndTime', description='The end point of the time period for which to query created tasks. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-11-23T15:16:00Z'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Page start from page 1.

Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100.

Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the task. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceIds?: [ string ](name='ResourceIds', description='The ID of resource N that is associated with the task. Valid values of N: 1 to 100.

*   If TaskAction is set to ImportImage or ExportImage, set the resource ID to an image ID.
*   If TaskAction is set to RedeployInstance, set the resource ID to an Elastic Compute Service (ECS) instance ID.
*   If TaskAction is set to ModifyDiskSpec, set the resource ID to a disk ID.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The start point of the time period for which to query created tasks. The time follows the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.', example='2020-11-23T15:10:00Z'),
  taskAction?: string(name='TaskAction', description='The name of the operation that generates the task. Valid values:

*   ImportImage
*   ExportImage
*   RedeployInstance
*   ModifyDiskSpec', example='ImportImage'),
  taskIds?: string(name='TaskIds', description='The ID of the task. You can specify up to 100 task IDs at a time. Separate the task IDs with commas (,).', example='t-bp1hvgwromzv32iq****,t-bp179lofu2pv768w****'),
  taskStatus?: string(name='TaskStatus', description='The state of the task. Valid values:

*   Finished
*   Processing
*   Failed

This parameter is empty by default.

>  The system only retrieves tasks in the Finished, Processing, and Failed states and ignores other values.', example='Finished'),
}

model DescribeTasksResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  regionId?: string(name='RegionId', description='The region ID of the task.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskSet?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime', description='The time when the task was created.', example='2020-11-24T12:50Z'),
      finishedTime?: string(name='FinishedTime', description='The time when the task was completed.', example='2020-11-24T12:50Z'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='m-bp1i8huqm5u7****'),
      supportCancel?: string(name='SupportCancel', description='Indicates whether the task can be canceled.', example='true'),
      taskAction?: string(name='TaskAction', description='The name of the task.', example='ImportImage'),
      taskId?: string(name='TaskId', description='The ID of the task.', example='t-bp1hvgwromzv32iq****'),
      taskStatus?: string(name='TaskStatus', description='The state of the task.', example='Finished'),
    }
  ](name='Task')
  }(name='TaskSet', description='Details about the tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTasksResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeTasks\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeTasksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeTasksResponse
 */
async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceIds)) {
    query['ResourceIds'] = request.resourceIds;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.taskAction)) {
    query['TaskAction'] = request.taskAction;
  }
  if (!Util.isUnset(request.taskIds)) {
    query['TaskIds'] = request.taskIds;
  }
  if (!Util.isUnset(request.taskStatus)) {
    query['TaskStatus'] = request.taskStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=DescribeTasks\\&type=RPC\\&version=2014-05-26)
  *
  * @param request DescribeTasksRequest
  * @return DescribeTasksResponse
 */
async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeUserBusinessBehaviorRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  statusKey?: string(name='statusKey'),
}

model DescribeUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
  statusValue?: string(name='StatusValue'),
}

model DescribeUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserBusinessBehaviorResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeUserBusinessBehaviorRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserBusinessBehaviorResponse
 */
// Deprecated
async function describeUserBusinessBehaviorWithOptions(request: DescribeUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): DescribeUserBusinessBehaviorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.statusKey)) {
    query['statusKey'] = request.statusKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBusinessBehavior',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeUserBusinessBehaviorRequest
  * @return DescribeUserBusinessBehaviorResponse
 */
// Deprecated
async function describeUserBusinessBehavior(request: DescribeUserBusinessBehaviorRequest): DescribeUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBusinessBehaviorWithOptions(request, runtime);
}

model DescribeUserDataRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp14bnftyqhxg9ij****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeUserDataResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp14bnftyqhxg9ij****'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  userData?: string(name='UserData', description='The user data of the instance.', example='ZWNobyBoZWxsbyBlY321ABC'),
}

model DescribeUserDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserDataResponseBody(name='body'),
}

/**
  * ## Description
  * *   The returned user data is encoded in Base64.
  * *   If the instance does not have user data configured, an empty result is returned.
  *
  * @param request DescribeUserDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeUserDataResponse
 */
async function describeUserDataWithOptions(request: DescribeUserDataRequest, runtime: Util.RuntimeOptions): DescribeUserDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserData',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   The returned user data is encoded in Base64.
  * *   If the instance does not have user data configured, an empty result is returned.
  *
  * @param request DescribeUserDataRequest
  * @return DescribeUserDataResponse
 */
async function describeUserData(request: DescribeUserDataRequest): DescribeUserDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDataWithOptions(request, runtime);
}

model DescribeVRoutersRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VRouterId?: string(name='VRouterId'),
}

model DescribeVRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  VRouters?: {
    VRouter?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      regionId?: string(name='RegionId'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds'),
      VRouterId?: string(name='VRouterId'),
      VRouterName?: string(name='VRouterName'),
      vpcId?: string(name='VpcId'),
    }
  ](name='VRouter')
  }(name='VRouters'),
}

model DescribeVRoutersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVRoutersResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeVRoutersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVRoutersResponse
 */
// Deprecated
async function describeVRoutersWithOptions(request: DescribeVRoutersRequest, runtime: Util.RuntimeOptions): DescribeVRoutersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVRouters',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeVRoutersRequest
  * @return DescribeVRoutersResponse
 */
// Deprecated
async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVRoutersWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  isDefault?: boolean(name='IsDefault'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableIpAddressCount?: long(name='AvailableIpAddressCount'),
      cidrBlock?: string(name='CidrBlock'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeVSwitchesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVSwitchesResponse
 */
// Deprecated
async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitches',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeVSwitchesRequest
  * @return DescribeVSwitchesResponse
 */
// Deprecated
async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      accessPointId?: string(name='AccessPointId'),
      activationTime?: string(name='ActivationTime'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      localGatewayIp?: string(name='LocalGatewayIp'),
      name?: string(name='Name'),
      peerGatewayIp?: string(name='PeerGatewayIp'),
      peeringSubnetMask?: string(name='PeeringSubnetMask'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus'),
      recoveryTime?: string(name='RecoveryTime'),
      routeTableId?: string(name='RouteTableId'),
      status?: string(name='Status'),
      terminationTime?: string(name='TerminationTime'),
      vbrId?: string(name='VbrId'),
      vlanId?: int32(name='VlanId'),
      vlanInterfaceId?: string(name='VlanInterfaceId'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeVirtualBorderRoutersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVirtualBorderRoutersResponse
 */
// Deprecated
async function describeVirtualBorderRoutersWithOptions(request: DescribeVirtualBorderRoutersRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualBorderRouters',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeVirtualBorderRoutersRequest
  * @return DescribeVirtualBorderRoutersResponse
 */
// Deprecated
async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      activationTime?: string(name='ActivationTime'),
      circuitCode?: string(name='CircuitCode'),
      creationTime?: string(name='CreationTime'),
      recoveryTime?: string(name='RecoveryTime'),
      terminationTime?: string(name='TerminationTime'),
      vbrId?: string(name='VbrId'),
      vbrOwnerUid?: long(name='VbrOwnerUid'),
      vlanId?: int32(name='VlanId'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeVirtualBorderRoutersForPhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVirtualBorderRoutersForPhysicalConnectionResponse
 */
// Deprecated
async function describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVirtualBorderRoutersForPhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeVirtualBorderRoutersForPhysicalConnectionRequest
  * @return DescribeVirtualBorderRoutersForPhysicalConnectionResponse
 */
// Deprecated
async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime);
}

model DescribeVpcsRequest {
  isDefault?: boolean(name='IsDefault'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
}

model DescribeVpcsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vpcs?: {
    vpc?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      isDefault?: boolean(name='IsDefault'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs'),
      VRouterId?: string(name='VRouterId'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      vpcId?: string(name='VpcId'),
      vpcName?: string(name='VpcName'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request DescribeVpcsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeVpcsResponse
 */
// Deprecated
async function describeVpcsWithOptions(request: DescribeVpcsRequest, runtime: Util.RuntimeOptions): DescribeVpcsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.isDefault)) {
    query['IsDefault'] = request.isDefault;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcs',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request DescribeVpcsRequest
  * @return DescribeVpcsResponse
 */
// Deprecated
async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcsWithOptions(request, runtime);
}

model DescribeZonesRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The natural language that is used to filter responses. For more information, see [RFC 7231](https://tools.ietf.org/html/rfc7231). Valid values:

*   zh-CN
*   en-US
*   ja

Default value: zh-CN.', example='zh-CN'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of resources. For more information, see [Billing overview](~~25398~~). Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

Default value: PostPaid.', example='PostPaid'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for pay-as-you-go instances. You can specify this parameter when the `InstanceChargeType` parameter is set to PostPaid. For more information, see [Preemptible instances](~~52088~~). Valid values:

*   NoSpot: The instances are regular pay-as-you-go instances.
*   SpotWithPriceLimit: The instances are preemptible instances with user-defined maximum hourly prices.
*   SpotAsPriceGo: The instances are preemptible instances for which the market price at the time of purchase is automatically used as the bid price. The market price can be up to the pay-as-you-go price.

Default value: NoSpot.', example='NoSpot'),
  verbose?: boolean(name='Verbose', description='Specifies whether to display detailed information.

*   true: displays detailed information.
*   false: does not display detailed information.

Default value: true.', example='false'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  zones?: {
    zone?: [ 
    {
      availableDedicatedHostTypes?: {
        dedicatedHostType?: [ string ](name='DedicatedHostType')
      }(name='AvailableDedicatedHostTypes', description='The supported dedicated host types.'),
      availableDiskCategories?: {
        diskCategories?: [ string ](name='DiskCategories')
      }(name='AvailableDiskCategories', description='The supported disk categories. Valid values:

*   cloud: basic disk
*   cloud_ssd: standard SSD
*   cloud_efficiency: ultra disk
*   cloud_essd: ESSD'),
      availableInstanceTypes?: {
        instanceTypes?: [ string ](name='InstanceTypes')
      }(name='AvailableInstanceTypes', description='The supported instance types.'),
      availableResourceCreation?: {
        resourceTypes?: [ string ](name='ResourceTypes')
      }(name='AvailableResourceCreation', description='The types of resources that can be created. Valid values:

*   VSwitch: vSwitch
*   IoOptimized: I/O optimized instance
*   Instance: instance
*   DedicatedHost: dedicated host
*   disk: disk'),
      availableResources?: {
        resourcesInfo?: [ 
        {
          dataDiskCategories?: {
            supportedDataDiskCategory?: [ string ](name='supportedDataDiskCategory')
          }(name='DataDiskCategories', description='The categories of data disks that can be created.'),
          instanceGenerations?: {
            supportedInstanceGeneration?: [ string ](name='supportedInstanceGeneration')
          }(name='InstanceGenerations', description='The supported generations of instance families.'),
          instanceTypeFamilies?: {
            supportedInstanceTypeFamily?: [ string ](name='supportedInstanceTypeFamily')
          }(name='InstanceTypeFamilies', description='The supported instance families.'),
          instanceTypes?: {
            supportedInstanceType?: [ string ](name='supportedInstanceType')
          }(name='InstanceTypes', description='The supported instance types.'),
          ioOptimized?: boolean(name='IoOptimized', description='Indicates whether the instance is I/O optimized.', example='true'),
          networkTypes?: {
            supportedNetworkCategory?: [ string ](name='supportedNetworkCategory')
          }(name='NetworkTypes', description='The supported network types'),
          systemDiskCategories?: {
            supportedSystemDiskCategory?: [ string ](name='supportedSystemDiskCategory')
          }(name='SystemDiskCategories', description='The supported categories of system disks that can be created.'),
        }
      ](name='ResourcesInfo')
      }(name='AvailableResources', description='Details about the resources that can be created in the zone.'),
      availableVolumeCategories?: {
        volumeCategories?: [ string ](name='VolumeCategories')
      }(name='AvailableVolumeCategories', description='The supported Shared Block Storage device categories.'),
      dedicatedHostGenerations?: {
        dedicatedHostGeneration?: [ string ](name='DedicatedHostGeneration')
      }(name='DedicatedHostGenerations', description='The supported generations of dedicated hosts.'),
      localName?: string(name='LocalName', description='The name of the zone in the local language.', example='Hangzhou Zone G'),
      zoneId?: string(name='ZoneId', description='The ID of the zone.', example='cn-hangzhou-g'),
      zoneType?: string(name='ZoneType', description='The type of the zone. Valid values:

*   AvailabilityZone: zone for the Alibaba Cloud public cloud
*   CloudBoxZone: zone for CloudBox', example='AvailabilityZone'),
    }
  ](name='Zone')
  }(name='Zones', description='Details of the zones and their supported resources.'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeZonesResponseBody(name='body'),
}

/**
  * When you call this operation, only a list of zones and some resource information of each zone are returned. If you want to query instance types and disk categories that are available for purchase in a specific zone, we recommend that you call the [DescribeAvailableResource](~~66186~~) operation.
  *
  * @param request DescribeZonesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeZonesResponse
 */
async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    query['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.verbose)) {
    query['Verbose'] = request.verbose;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeZones',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, only a list of zones and some resource information of each zone are returned. If you want to query instance types and disk categories that are available for purchase in a specific zone, we recommend that you call the [DescribeAvailableResource](~~66186~~) operation.
  *
  * @param request DescribeZonesRequest
  * @return DescribeZonesResponse
 */
async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachClassicLinkVpcRequest {
  instanceId?: string(name='InstanceId', description='The ID of the classic network-type instance.', example='i-bp67acfmxazb4p****'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the classic network-type instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the instance is linked.', example='vpc-bp67acfmxazb4p****'),
}

model DetachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachClassicLinkVpcResponseBody(name='body'),
}

async function detachClassicLinkVpcWithOptions(request: DetachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): DetachClassicLinkVpcResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachClassicLinkVpc',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachClassicLinkVpc(request: DetachClassicLinkVpcRequest): DetachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachClassicLinkVpcWithOptions(request, runtime);
}

model DetachDiskRequest {
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the system disk when the instance from which you want to detach the system disk is released. Valid values:

*   true: releases the system disk when the instance is released.
*   false: does not release the system disk when the instance is released. The system disk is retained as a pay-as-you-go data disk.

Default value: true.

If you specify this parameter, take note of the following items:

*   You cannot specify this parameter for disks for which the multi-attach feature is enabled.
*   If you detach a data disk, the default value of this parameter is `false`.', example='false'),
  diskId?: string(name='DiskId', description='The ID of the disk that you want to detach.', example='d-bp67acfmxazb4p****'),
  instanceId?: string(name='InstanceId', description='The ID of the ECS instance from which you want to detach the disk.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DetachDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk that you want to detach must be in the `In_Use` state.
  * *   The instance from which you want to detach a pay-as-you-go data disk must be in the **Running** or **Stopped** state.````
  * *   The instance from which you want to detach a system disk must be in the **Stopped** state.``
  * *   If the `OperationLocks` parameter in the response contains `"LockReason" : "security"`, the instance is locked for security reasons and no operations are allowed on the instance.
  * *   DetachDisk is an asynchronous operation. After you call the operation, a disk is detached from an instance in approximately 1 minute.
  *
  * @param request DetachDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachDiskResponse
 */
async function detachDiskWithOptions(request: DetachDiskRequest, runtime: Util.RuntimeOptions): DetachDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deleteWithInstance)) {
    query['DeleteWithInstance'] = request.deleteWithInstance;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk that you want to detach must be in the `In_Use` state.
  * *   The instance from which you want to detach a pay-as-you-go data disk must be in the **Running** or **Stopped** state.````
  * *   The instance from which you want to detach a system disk must be in the **Stopped** state.``
  * *   If the `OperationLocks` parameter in the response contains `"LockReason" : "security"`, the instance is locked for security reasons and no operations are allowed on the instance.
  * *   DetachDisk is an asynchronous operation. After you call the operation, a disk is detached from an instance in approximately 1 minute.
  *
  * @param request DetachDiskRequest
  * @return DetachDiskResponse
 */
async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDiskWithOptions(request, runtime);
}

model DetachInstanceRamRoleRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of instances. The value can be a JSON array that consists of up to 100 instance IDs. Separate the IDs with commas (,).', example='["i-bp67acfmxazb4p****", "i-bp67acfmxazb5p****", "i-bp67acfmxazb6p****"…]'),
  ownerId?: long(name='OwnerId'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='RamRoleTest'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DetachInstanceRamRoleResponseBody = {
  detachInstanceRamRoleResults?: {
    detachInstanceRamRoleResult?: [ 
    {
      code?: string(name='Code', description='Indicates whether the instance RAM role was detached. If 200 is returned, the instance RAM role was detached. If any other value is returned, the instance RAM role failed to be detached. For more information, see the "Error codes" section.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance from which you attempted to detach the instance RAM role.', example='i-bp67acfmxazb4p****'),
      instanceRamRoleSets?: {
        instanceRamRoleSet?: [ 
        {
          instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
          ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='RamRoleTest'),
        }
      ](name='InstanceRamRoleSet')
      }(name='InstanceRamRoleSets', description='Details about the instance RAM role of the instance.'),
      message?: string(name='Message', description='Indicates whether the instance RAM role was detached. If success is returned, the instance RAM role was detached. If any other value is returned, the instance RAM role failed to be detached. For more information, see the "Error codes" section.', example='Success'),
      success?: boolean(name='Success', description='Indicates whether the instance RAM role was detached.', example='true'),
    }
  ](name='DetachInstanceRamRoleResult')
  }(name='DetachInstanceRamRoleResults', description='Details about the results of detaching instance RAM roles from the instances.'),
  failCount?: int32(name='FailCount', description='The number of instances from which instance RAM roles failed to be detached.', example='0'),
  ramRoleName?: string(name='RamRoleName', description='The name of the instance RAM role.', example='RamRoleTest'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  totalCount?: int32(name='TotalCount', description='The total number of instances from which you attempted to detach instance RAM roles.', example='1'),
}

model DetachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachInstanceRamRoleResponseBody(name='body'),
}

async function detachInstanceRamRoleWithOptions(request: DetachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DetachInstanceRamRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachInstanceRamRole',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachInstanceRamRole(request: DetachInstanceRamRoleRequest): DetachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachInstanceRamRoleWithOptions(request, runtime);
}

model DetachKeyPairRequest {
  instanceIds?: string(name='InstanceIds', description='The IDs of instances from which you want to unbind the SSH key pair. The value can be a JSON array that consists of up to 50 instance IDs. Separate multiple instance IDs with commas (,).', example='["i-bp1d6tsvznfghy7y****", "i-bp1ippxbaql9zet7****", … "i-bp1ib7bcz07l****"]'),
  keyPairName?: string(name='KeyPairName', description='The name of the SSH key pair.', example='testKeyPairName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the SSH key pair. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DetachKeyPairResponseBody = {
  failCount?: string(name='FailCount', description='The number of instances from which the SSH key pair failed to be unbound.', example='0'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  results?: {
    result?: [ 
    {
      code?: string(name='Code', description='The operation status code that is returned. 200 indicates that the operation is successful.', example='200'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1d6tsvznfghy7y****'),
      message?: string(name='Message', description='The result of the operation. For example, if the value of `Code` is 200, the value of `Message` is `successful`.', example='successful'),
      success?: string(name='Success', description='Indicates whether the operation is successful.', example='true'),
    }
  ](name='Result')
  }(name='Results', description='The result set of the unbind operation.'),
  totalCount?: string(name='TotalCount', description='The total number of instances from which you want to unbind the SSH key pair.', example='2'),
}

model DetachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachKeyPairResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   After you unbind an SSH key pair from an instance, you must call the [RebootInstance](~~25502~~) operation to restart the instance to allow the unbind operation to take effect.
  * *   After you unbind an SSH key pair from an instance, the username and password authentication method is selected for the instance.
  *
  * @param request DetachKeyPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachKeyPairResponse
 */
async function detachKeyPairWithOptions(request: DetachKeyPairRequest, runtime: Util.RuntimeOptions): DetachKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachKeyPair',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   After you unbind an SSH key pair from an instance, you must call the [RebootInstance](~~25502~~) operation to restart the instance to allow the unbind operation to take effect.
  * *   After you unbind an SSH key pair from an instance, the username and password authentication method is selected for the instance.
  *
  * @param request DetachKeyPairRequest
  * @return DetachKeyPairResponse
 */
async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachKeyPairWithOptions(request, runtime);
}

model DetachNetworkInterfaceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the trunk ENI.

>  This parameter is unavailable for use.', example='i-bp67acfmxazb4p****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the instance', example='eni-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the ENI.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId', description='The ID of the request.', example='eni-f8zapqwj1v1j4ia3****'),
}

model DetachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model DetachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DetachNetworkInterfaceResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to **DetachNetworkInterface**.
  *
  * @param request DetachNetworkInterfaceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DetachNetworkInterfaceResponse
 */
async function detachNetworkInterfaceWithOptions(request: DetachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DetachNetworkInterfaceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.trunkNetworkInstanceId)) {
    query['TrunkNetworkInstanceId'] = request.trunkNetworkInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachNetworkInterface',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The operation that you want to perform. Set the value to **DetachNetworkInterface**.
  *
  * @param request DetachNetworkInterfaceRequest
  * @return DetachNetworkInterfaceResponse
 */
async function detachNetworkInterface(request: DetachNetworkInterfaceRequest): DetachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachNetworkInterfaceWithOptions(request, runtime);
}

model DisableActivationRequest {
  activationId?: string(name='ActivationId', description='The request ID.', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The activation code ID.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DisableActivationResponseBody = {
  activation?: {
    activationId?: string(name='ActivationId', example='4ECEEE12-56F1-4FBC-9AB1-890F1234****'),
    creationTime?: string(name='CreationTime', description='The number of instances that were deregistered.', example='2021-01-20T06:00:00Z'),
    deregisteredCount?: int32(name='DeregisteredCount', description='The maximum number of times that the activation code can be used to register managed instances.', example='1'),
    description?: string(name='Description', description='The number of registered instances.', example='This is description.'),
    disabled?: boolean(name='Disabled', description='The IP addresses of the hosts that can use the activation code.', example='false'),
    instanceCount?: int32(name='InstanceCount', description='The description of the activation code.', example='1'),
    instanceName?: string(name='InstanceName', description='Indicates whether the activation code is disabled.', example='test-InstanceName'),
    ipAddressRange?: string(name='IpAddressRange', description='The validity period of the activation code. Unit: hours.', example='0.0.0.0/0'),
    registeredCount?: int32(name='RegisteredCount', description='The default prefix of the instance name.', example='1'),
    timeToLiveInHours?: long(name='TimeToLiveInHours', description='The activation code ID.', example='4'),
  }(name='Activation', description='The time when the activation code was created.'),
  requestId?: string(name='RequestId', description='Details about the activation code and its usage information.', example='4ECEEE12-56F1-4FBC-9AB1-890F74942176'),
}

model DisableActivationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableActivationResponseBody(name='body'),
}

/**
  * The region ID. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request DisableActivationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DisableActivationResponse
 */
async function disableActivationWithOptions(request: DisableActivationRequest, runtime: Util.RuntimeOptions): DisableActivationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activationId)) {
    query['ActivationId'] = request.activationId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableActivation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request DisableActivationRequest
  * @return DisableActivationResponse
 */
async function disableActivation(request: DisableActivationRequest): DisableActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableActivationWithOptions(request, runtime);
}

model EipFillParamsRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  data?: string(name='data'),
}

model EipFillParamsResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipFillParamsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EipFillParamsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request EipFillParamsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EipFillParamsResponse
 */
// Deprecated
async function eipFillParamsWithOptions(request: EipFillParamsRequest, runtime: Util.RuntimeOptions): EipFillParamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EipFillParams',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request EipFillParamsRequest
  * @return EipFillParamsResponse
 */
// Deprecated
async function eipFillParams(request: EipFillParamsRequest): EipFillParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillParamsWithOptions(request, runtime);
}

model EipFillProductRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  data?: string(name='data'),
}

model EipFillProductResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipFillProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EipFillProductResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request EipFillProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EipFillProductResponse
 */
// Deprecated
async function eipFillProductWithOptions(request: EipFillProductRequest, runtime: Util.RuntimeOptions): EipFillProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EipFillProduct',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request EipFillProductRequest
  * @return EipFillProductResponse
 */
// Deprecated
async function eipFillProduct(request: EipFillProductRequest): EipFillProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillProductWithOptions(request, runtime);
}

model EipNotifyPaidRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  data?: string(name='data'),
}

model EipNotifyPaidResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model EipNotifyPaidResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EipNotifyPaidResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request EipNotifyPaidRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EipNotifyPaidResponse
 */
// Deprecated
async function eipNotifyPaidWithOptions(request: EipNotifyPaidRequest, runtime: Util.RuntimeOptions): EipNotifyPaidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.data)) {
    query['data'] = request.data;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EipNotifyPaid',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request EipNotifyPaidRequest
  * @return EipNotifyPaidResponse
 */
// Deprecated
async function eipNotifyPaid(request: EipNotifyPaidRequest): EipNotifyPaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipNotifyPaidWithOptions(request, runtime);
}

model EnablePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnablePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnablePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request EnablePhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return EnablePhysicalConnectionResponse
 */
// Deprecated
async function enablePhysicalConnectionWithOptions(request: EnablePhysicalConnectionRequest, runtime: Util.RuntimeOptions): EnablePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnablePhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request EnablePhysicalConnectionRequest
  * @return EnablePhysicalConnectionResponse
 */
// Deprecated
async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enablePhysicalConnectionWithOptions(request, runtime);
}

model ExportImageRequest {
  imageFormat?: string(name='ImageFormat', description='The format in which you want to export the custom image. Valid values:

*   raw
*   vhd
*   qcow2
*   vmdk
*   vdi

Default value: raw.', example='raw'),
  imageId?: string(name='ImageId', description='The custom image ID.', example='m-bp67acfmxazb4p****'),
  OSSBucket?: string(name='OSSBucket', description='The OSS bucket in which you want to store the exported custom image.', example='testexportImage'),
  OSSPrefix?: string(name='OSSPrefix', description='The prefix for the name of the OSS object. The prefix must be 1 to 30 characters in length and can contain digits and letters.', example='EcsExport'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleName?: string(name='RoleName', description='The name of the RAM role that you want to use to export the custom image.', example='AliyunECSImageExportDefaultRole'),
}

model ExportImageResponseBody = {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='C8B26B44-0189-443E-9816-D951F596****'),
  taskId?: string(name='TaskId', description='The ID of the task that is used to export the custom image.', example='tsk-bp67acfmxazb4p****'),
}

model ExportImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportImageResponseBody(name='body'),
}

/**
  * Before you export a custom image, complete the following operations:
  * *   Understand the prerequisites and precautions. For more information, see [Export images](~~58181~~).
  * *   Use Resource Access Management (RAM) to grant Elastic Compute Service (ECS) the permissions to write data to OSS. To complete the authorization, perform the following operations:
  *     1.  Create a role named `AliyunECSImageExportDefaultRole`, and attach the following policy to the role:
  *         ```json
  *          {
  *            "Statement": [
  *              {
  *                "Action": "sts:AssumeRole",
  *                "Effect": "Allow",
  *                "Principal": {
  *                  "Service": [
  *                    "ecs.aliyuncs.com"
  *                  ]
  *                }
  *              }
  *            ],
  *            "Version": "1"
  *          }
  *         ```
  *     2.  Attach the `AliyunECSImageExportRolePolicy` system policy to the `AliyunECSImageExportDefaultRole` role. This policy is the default policy that grants ECS the permissions to export images. For more information, go to the [Cloud Resource Access Authorization](https://ram.console.aliyun.com/?spm=5176.2020520101.0.0.64c64df5dfpmdY#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunECSImageImportDefaultRole%22,%20%22TemplateId%22:%20%22ECSImportRole%22%7D,%20%22request2%22:%20%7B%22RoleName%22:%20%22AliyunECSImageExportDefaultRole%22,%20%22TemplateId%22:%20%22ECSExportRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fecs.console.aliyun.com%2F%22,%20%22Service%22:%20%22ECS%22%7D) page. You can also create a custom policy that contains the following content and attach the policy to the role:
  *         ```json
  *          {
  *            "Version": "1",
  *            "Statement": [
  *              {
  *                "Action": [
  *                  "oss:GetObject",
  *                  "oss:PutObject",
  *                  "oss:DeleteObject",
  *                  "oss:GetBucketLocation",
  *                  "oss:GetBucketInfo",
  *                  "oss:AbortMultipartUpload",
  *                  "oss:ListMultipartUploads",
  *                  "oss:ListParts"
  *                ],
  *                "Resource": "*",
  *                "Effect": "Allow"
  *              }
  *            ]
  *          }
  *         ```
  * After you export a custom image, the following situation occurs:
  * The custom image is stored in the specified OSS bucket. You can download the custom image. For more information, see [Download objects](~~31912~~).
  *
  * @param request ExportImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportImageResponse
 */
async function exportImageWithOptions(request: ExportImageRequest, runtime: Util.RuntimeOptions): ExportImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageFormat)) {
    query['ImageFormat'] = request.imageFormat;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.OSSBucket)) {
    query['OSSBucket'] = request.OSSBucket;
  }
  if (!Util.isUnset(request.OSSPrefix)) {
    query['OSSPrefix'] = request.OSSPrefix;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you export a custom image, complete the following operations:
  * *   Understand the prerequisites and precautions. For more information, see [Export images](~~58181~~).
  * *   Use Resource Access Management (RAM) to grant Elastic Compute Service (ECS) the permissions to write data to OSS. To complete the authorization, perform the following operations:
  *     1.  Create a role named `AliyunECSImageExportDefaultRole`, and attach the following policy to the role:
  *         ```json
  *          {
  *            "Statement": [
  *              {
  *                "Action": "sts:AssumeRole",
  *                "Effect": "Allow",
  *                "Principal": {
  *                  "Service": [
  *                    "ecs.aliyuncs.com"
  *                  ]
  *                }
  *              }
  *            ],
  *            "Version": "1"
  *          }
  *         ```
  *     2.  Attach the `AliyunECSImageExportRolePolicy` system policy to the `AliyunECSImageExportDefaultRole` role. This policy is the default policy that grants ECS the permissions to export images. For more information, go to the [Cloud Resource Access Authorization](https://ram.console.aliyun.com/?spm=5176.2020520101.0.0.64c64df5dfpmdY#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunECSImageImportDefaultRole%22,%20%22TemplateId%22:%20%22ECSImportRole%22%7D,%20%22request2%22:%20%7B%22RoleName%22:%20%22AliyunECSImageExportDefaultRole%22,%20%22TemplateId%22:%20%22ECSExportRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fecs.console.aliyun.com%2F%22,%20%22Service%22:%20%22ECS%22%7D) page. You can also create a custom policy that contains the following content and attach the policy to the role:
  *         ```json
  *          {
  *            "Version": "1",
  *            "Statement": [
  *              {
  *                "Action": [
  *                  "oss:GetObject",
  *                  "oss:PutObject",
  *                  "oss:DeleteObject",
  *                  "oss:GetBucketLocation",
  *                  "oss:GetBucketInfo",
  *                  "oss:AbortMultipartUpload",
  *                  "oss:ListMultipartUploads",
  *                  "oss:ListParts"
  *                ],
  *                "Resource": "*",
  *                "Effect": "Allow"
  *              }
  *            ]
  *          }
  *         ```
  * After you export a custom image, the following situation occurs:
  * The custom image is stored in the specified OSS bucket. You can download the custom image. For more information, see [Download objects](~~31912~~).
  *
  * @param request ExportImageRequest
  * @return ExportImageResponse
 */
async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model ExportSnapshotRequest {
  ossBucket?: string(name='OssBucket'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleName?: string(name='RoleName'),
  snapshotId?: string(name='SnapshotId'),
}

model ExportSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ExportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExportSnapshotResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ExportSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ExportSnapshotResponse
 */
// Deprecated
async function exportSnapshotWithOptions(request: ExportSnapshotRequest, runtime: Util.RuntimeOptions): ExportSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExportSnapshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ExportSnapshotRequest
  * @return ExportSnapshotResponse
 */
// Deprecated
async function exportSnapshot(request: ExportSnapshotRequest): ExportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSnapshotWithOptions(request, runtime);
}

model GetInstanceConsoleOutputRequest {
  instanceId?: string(name='InstanceId', example='i-bp1c1xhsrac2coiw****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  removeSymbols?: boolean(name='RemoveSymbols', example='false'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetInstanceConsoleOutputResponseBody = {
  consoleOutput?: string(name='ConsoleOutput', example='V2VsY29tZSB0byBDZW50T1MgCgpDaGVja2luZyBmaWxlc3lzdGVtcwpDaGVja2luZyBhbGwgZmlsZSBzeXN0ZW1zLgpbL3NiaW4vZnNjay5leHQ0ICgxKSAtLSAvXSBmc2NrLmV4dDQgLWEgL2Rldi92ZGExIAovZGV2L3ZkYTE6IGNsZWFuLCAzMjAxNi8yNjIxNDQwIGZpbGVzLCA0NDc5NzQvMTA0ODU1MDQgYmxvY2tzCgpFbnRlcmluZyBub24taW50ZXJhY3RpdmUgc3RhcnR1cApDYWxsaW5nIHRoZSBzeXN0ZW0gYWN0aXZpdHkgZGF0YSBjb2xsZWN0b3IgKHNhZGMpLi4uIAoKQnJpbmdpbmcgdXAgaW50ZXJmYWNlIGV0aDA6ICAKRGV0ZXJtaW5pbmcgSVAgaW5mb3JtYXRpb24gZm9yIGV0aDAuLi4gZG9uZS4KCmFsaXl1bi1zZXJ2aWNlIHN0YXJ0L3J1bm5pbmcsIHByb2Nlc3MgMTczMwpmaW5pc2hlZAoKQ2VudE9TIHJlbGVhc2UgNi44IChGaW5hbCkKS2VybmVsIDIuNi4zMi02OTYuMy4yLmVsNi5pNjg2IG9uIGFuIGk2ODYKCmlaMnplZDk2ZTQ2MmF5cjBxeioqKioqIGxvZ2luOg=='),
  instanceId?: string(name='InstanceId', example='i-bp1c1xhsrac2coiw****'),
  lastUpdateTime?: string(name='LastUpdateTime', example='2018-03-22 10:04:57'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model GetInstanceConsoleOutputResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceConsoleOutputResponseBody(name='body'),
}

async function getInstanceConsoleOutputWithOptions(request: GetInstanceConsoleOutputRequest, runtime: Util.RuntimeOptions): GetInstanceConsoleOutputResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeSymbols)) {
    query['RemoveSymbols'] = request.removeSymbols;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceConsoleOutput',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstanceConsoleOutput(request: GetInstanceConsoleOutputRequest): GetInstanceConsoleOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsoleOutputWithOptions(request, runtime);
}

model GetInstanceScreenshotRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1gbz20g229bvu5****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-shenzhen'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wakeUp?: boolean(name='WakeUp', description='Specifies whether to wake up the hibernated instance.

Default value: false.', example='false'),
}

model GetInstanceScreenshotResponseBody = {
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1gbz20g229bvu5****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  screenshot?: string(name='Screenshot', description='The Base64-encoded instance screenshot in the JPG format.', example='iVBORw0KGgoA...AAABJRU5ErkJggg=='),
}

model GetInstanceScreenshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceScreenshotResponseBody(name='body'),
}

/**
  * After ECS returns a Base64-encoded instance screenshot in the JPG format, you must decode the screenshot. We recommend that you call this operation for troubleshooting and diagnosis. When you call this operation, take note of the following items:
  * *   The instance must be in the Running state.
  * *   For instances of the retired instance types, you cannot obtain screenshots. For more information, see [Retired instance types](~~55263~~).
  * *   If you call this operation on an instance for multiple times, the call interval must be at least 10 seconds. Otherwise, the `Throttling` error is returned.
  *
  * @param request GetInstanceScreenshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetInstanceScreenshotResponse
 */
async function getInstanceScreenshotWithOptions(request: GetInstanceScreenshotRequest, runtime: Util.RuntimeOptions): GetInstanceScreenshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wakeUp)) {
    query['WakeUp'] = request.wakeUp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstanceScreenshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After ECS returns a Base64-encoded instance screenshot in the JPG format, you must decode the screenshot. We recommend that you call this operation for troubleshooting and diagnosis. When you call this operation, take note of the following items:
  * *   The instance must be in the Running state.
  * *   For instances of the retired instance types, you cannot obtain screenshots. For more information, see [Retired instance types](~~55263~~).
  * *   If you call this operation on an instance for multiple times, the call interval must be at least 10 seconds. Otherwise, the `Throttling` error is returned.
  *
  * @param request GetInstanceScreenshotRequest
  * @return GetInstanceScreenshotResponse
 */
async function getInstanceScreenshot(request: GetInstanceScreenshotRequest): GetInstanceScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceScreenshotWithOptions(request, runtime);
}

model ImportImageRequest {
  architecture?: string(name='Architecture', description='The system architecture. Valid values:

*   i386
*   x86\\_64
*   arm64

Default value: x86\\_64.', example='x86_64'),
  bootMode?: string(name='BootMode', description='The boot mode of the image. Valid values:

*   BIOS
*   UEFI

Default value: BIOS. If you set `Architecture` to arm64, set this parameter to UEFI.

> Make sure that you are aware of the boot modes supported by the specified image, as thehe modified boot mode needs to be supported by the image. This way, instances that use this image can start.', example='BIOS'),
  description?: string(name='Description', description='The image description. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='TestDescription'),
  detectionStrategy?: string(name='DetectionStrategy', description='The mode that you want to use to check the source image. If you do not specify this parameter, the source image is not checked. Only Linux images can be checked. Set the value to Standard, which indicates standard check mode.

The following items are checked in standard check mode:

*   Virtio: whether the virtio driver is installed.
*   Fstab: whether mounting configurations in the fstab file are correct.
*   Grub: whether GRand Unified Bootloader (GRUB) configurations are correct.
*   SystemImage: whether the image is valid. Do not import images that are empty or in the ISO format.
*   CloudInit: whether cloud-init is installed.
*   NVMe: whether the Non-Volatile Memory Express (NVMe) driver is installed.
*   Selinux: whether SElinux is enabled.
*   OnlineResizeFS: whether the root partition can be automatically resized.
*   Dhcp: whether Dynamic Host Configuration Protocol (DHCP) is enabled for network interface controllers (NICs).
*   RtcTimeMode: the RTC time mode.
*   Platform: the platform. Examples: Linux and Windows.
*   OSVersion: the operating system version. Example: Centos 7.9.
*   Architecture: the architecture. Examples: ARM and x86\\_64.
*   BootMode: the boot mode. Examples: UEFI and Legacy.
*   KernelVersion: the kernel version.
*   CloudAssistant: whether the Cloud Assistant client is installed.
*   SecurityCenterAgent: whether the Security Center agent is installed.', example='Standard'),
  diskDeviceMapping?: [ 
    {
      device?: string(name='Device', description='The device name of disk N in the custom image.

> This parameter will be removed in the future. To ensure future compatibility, we recommend that you do not use this parameter.', example='null'),
      diskImSize?: int32(name='DiskImSize', description='The size of the custom image.

> This parameter will be deprecated in the future. We recommend that you use the `DiskDeviceMapping.N.DiskImageSize` parameter to ensure future compatibility.', example='80'),
      diskImageSize?: int32(name='DiskImageSize', description='The size of disk N in the custom image after the image is imported.

You can use this parameter to specify the sizes of the system disk and data disks in the image. When you specify the size of the system disk, make sure that the specified size is greater than or equal to the size of the imported image file. Unit: GiB. Valid values:

*   When the N value is 1, this parameter specifies the size of the system disk in the image. Valid values: 5 to 500.
*   When the value of N ranges from 2 to 17, this parameter specifies the size of the data disk in the custom image. Valid values: 5 to 2000.

After the image is uploaded to an OSS bucket, you can view the size of the image file in the OSS bucket.', example='80'),
      format?: string(name='Format', description='The image format. Valid values:

*   RAW
*   VHD
*   QCOW2

This parameter is empty by default, which indicates that the system checks the format of the image and uses the result as the value of this parameter.', example='QCOW2'),
      OSSBucket?: string(name='OSSBucket', description='The OSS bucket where the image is stored.

> If this is the first time that you import images to ECS, you must use RAM to authorize ECS to access your OSS buckets. Otherwise, the `NoSetRoletoECSServiceAcount` error code is returned. For more information, see the **Description** section of this topic.', example='ecsimageos'),
      OSSObject?: string(name='OSSObject', description='The name (key) of the object that the uploaded image is stored as in the OSS bucket.', example='CentOS_5.4_32.raw'),
    }
  ](name='DiskDeviceMapping', description='The custom images.'),
  imageName?: string(name='ImageName', description='The name of the custom image. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).', example='ImageTestName'),
  licenseType?: string(name='LicenseType', description='The type of the license used to activate the operating system after the image is imported. Valid values:

*   Auto: ECS checks the operating system of the image and allocates a license to the operating system. ECS first checks whether the operating system distribution specified by `Platform` has a license allocated through an official Alibaba Cloud channel. If yes, the allocated license is used. If no, the license that comes with the source operating system is used.
*   Aliyun: The license allocated through an official Alibaba Cloud channel is used for the operating system distribution specified by `Platform`.
*   BYOL: The license that comes with the source operating system is used. In this case, make sure that your license key is eligible for use in Alibaba Cloud.

Default value: Auto.', example='Auto'),
  OSType?: string(name='OSType', description='The operating system platform. Valid values:

*   windows
*   linux

Default value: linux.', example='linux'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='The operating system distribution. Valid values:

*   CentOS
*   CentOS Stream
*   Ubuntu
*   SUSE
*   openSUSE
*   Debian
*   CoreOS
*   Aliyun
*   Anolis
*   AlmaLinux
*   FreeBSD
*   Fedora
*   Rocky Linux
*   UOS
*   Kylin
*   Others Linux
*   Customized Linux
*   Windows Server 2022
*   Windows Server 2019
*   Windows Server 2016
*   Windows Server 2012
*   Windows Server 2008
*   Windows Server 2003

Default value: Others Linux.', example='Aliyun'),
  regionId?: string(name='RegionId', description='The region ID of the source image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the image.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleName?: string(name='RoleName', description='The name of the RAM role used to import the image.', example='AliyunECSImageImportDefaultRole'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the image. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the image. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The image tags.'),
}

model ImportImageResponseBody = {
  imageId?: string(name='ImageId', description='The image ID.', example='m-bp67acfmxazb4p****'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  taskId?: string(name='TaskId', description='The image import task ID.', example='t-bp67acfmxazb4p****'),
}

model ImportImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportImageResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   Before you can import an image, you must upload the image to an Object Storage Service (OSS) bucket. For more information, see [Upload objects](~~31886~~).
  * *   In some scenarios, you may want to create an image based on the operating system data of a source server, import the image to ECS, and then create an ECS instance from the imported image. The source server can be a physical server, a virtual machine, or a cloud host. If the virtio driver is not installed on the source server, the created ECS instance may be unable to start. To prevent this issue, make sure that the virtio driver is installed on the source server before you import an image to Alibaba Cloud. For more information, see [Install the virtio driver](~~62423~~).
  * *   Before you import images for the first time, you must use Resource Access Management (RAM) to authorize ECS to access your OSS buckets. If ECS is not authorized to access your OSS buckets, the `NoSetRoletoECSServiceAcount` error code is returned when you call the ImportImage operation. The [Cloud Resource Access Authorization](https://ram.console.aliyun.com/?spm=5176.2020520101image.0.0.2ffa4df57kSoHX#/role/authorize?request=%7B%22Requests%22%3A%20%7B%22request1%22%3A%20%7B%22RoleName%22%3A%20%22AliyunECSImageImportDefaultRole%22%2C%20%22TemplateId%22%3A%20%22ECSImportRole%22%7D%2C%20%22request2%22%3A%20%7B%22RoleName%22%3A%20%22AliyunECSImageExportDefaultRole%22%2C%20%22TemplateId%22%3A%20%22ECSExportRole%22%7D%7D%2C%20%22ReturnUrl%22%3A%20%22https%3A//ecs.console.aliyun.com/%22%2C%20%22Service%22%3A%20%22ECS%22%7D) page in the RAM console provides a convenient push-button authorization feature for this operation. You can also perform the authorization by using a RAM role and RAM policies. The following examples show the policies and permissions required for some steps in the authorization procedure. For more information, see [Control access to resources by using RAM users](~~25481~~).
  *     1.  Create a role named `AliyunECSImageImportDefaultRole`. You must use this exact name. Otherwise, the image cannot be imported. Configure the following trust policy for the role:
  *             {
  *             	"Statement": [
  *             	{
  *             		"Action": "sts:AssumeRole",
  *             		"Effect": "Allow",
  *             		"Principal": {
  *             		"Service": [
  *             			"ecs.aliyuncs.com"
  *             		]
  *             		}
  *             	}
  *             ],
  *             	"Version": "1"
  *             }
  *     2.  Attach the `AliyunECSImageImportRolePolicy` system policy to the role. You can also create a custom policy that contains the following content and attach the policy to the role:
  *         ```
  *         {
  *         	"Version": "1",
  *         	"Statement": [
  *         	{
  *         		"Action": [
  *         				"oss:GetObject",
  *         				"oss:GetBucketLocation",
  *         				"oss:GetBucketInfo"
  *         	],
  *         			"Resource": "*",
  *         			"Effect": "Allow"
  *         			}
  *         	]
  *         }
  *         ```
  * *   You cannot delete an image that is being imported. However, you can call the [CancelTask](~~25624~~) operation to cancel the image import task.
  * *   You can import an image only to the same region as the OSS bucket to which the image was uploaded.
  * *   The valid values of N in the `DiskDeviceMapping.N` parameter range from 1 to 17. When N is set to 1, the disk is a system disk. When N is set to a value from 2 to 17, the disk is a data disk.
  * *   When you set `Architecture` to `arm64` or when you set `Platform` to `CentOS Stream`, `Anolis`, `AlmaLinux`, `UOS`, `Kylin`, or `Rocky Linux`, take note of the following items:
  *     *   To ensure that the password can be set, or that the key pair can be modified for an imported image, the image must meet the following requirements:
  *         *   The operating system kernel supports the `CONFIG_FW_CFG_SYSFS` feature. By default, Linux community kernel 4.6 and later, as well as CentOS kernel 3.10.0-826.el7 and later, support this feature. You can run the `grep -nr CONFIG_FW_CFG_SYSFS /boot/config-$(uname -r)` command in the source server of the image. If the command output contains `CONFIG_FW_CFG_SYSFS=y`, the kernel of this image supports the `CONFIG_FW_CFG_SYSFS` feature.
  *         *   The latest version of Alibaba Cloud cloud-init is installed on the operating system. If the installed version of cloud-init is 19.1, make sure that the minor version is 19.1.3 or later. If the installed version of cloud-init is 0.7.6a as in some early versions of operating systems, make sure that the minor version is 0.7.6a15 or later. For more information, see [Install cloud-init](~~57803~~).
  *         *   The operating system supports the SHA-512 encryption algorithm.
  *     *   If you want an imported image to support the resizing of disks and file systems, make sure that the image meets the following requirements before you import it:
  *         *   The kernel version of the operating system is later than 3.6.
  *         *   The image supports the growpart command. To support this command, you must install the `cloud-utils-growpart` package. Package installation methods vary based on operating systems. For more information, see [Resize partitions and file systems of Linux system disks](~~111738~~).
  *         *   The image supports the resize2fs command. To support this command, you must install the `e2fsprogs` package. By default, the package is installed on the operating system. If the package is not installed, you must install it.
  *         *   The latest version of Alibaba Cloud cloud-init is installed on the operating system. If the installed version of cloud-init is 19.1, make sure that the minor version is 19.1.3 or later. If the installed version of cloud-init is 0.7.6a as in some early versions of operating systems, make sure that the minor version is 0.7.6a15 or later. For more information, see [Install cloud-init](~~57803~~).
  * *   If the image that you want to import uses the ARM64 architecture, you must configure the real-time clock (RTC) to use the Coordinated Universal Time (UTC) time standard. For more information, see [Linux time and time zones](https://icms.alibaba-inc.com/content/ecs/image?l=1\\&m=4656\\&n=3385033).
  *
  * @param request ImportImageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportImageResponse
 */
async function importImageWithOptions(request: ImportImageRequest, runtime: Util.RuntimeOptions): ImportImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.architecture)) {
    query['Architecture'] = request.architecture;
  }
  if (!Util.isUnset(request.bootMode)) {
    query['BootMode'] = request.bootMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.detectionStrategy)) {
    query['DetectionStrategy'] = request.detectionStrategy;
  }
  if (!Util.isUnset(request.diskDeviceMapping)) {
    query['DiskDeviceMapping'] = request.diskDeviceMapping;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.licenseType)) {
    query['LicenseType'] = request.licenseType;
  }
  if (!Util.isUnset(request.OSType)) {
    query['OSType'] = request.OSType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportImage',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   Before you can import an image, you must upload the image to an Object Storage Service (OSS) bucket. For more information, see [Upload objects](~~31886~~).
  * *   In some scenarios, you may want to create an image based on the operating system data of a source server, import the image to ECS, and then create an ECS instance from the imported image. The source server can be a physical server, a virtual machine, or a cloud host. If the virtio driver is not installed on the source server, the created ECS instance may be unable to start. To prevent this issue, make sure that the virtio driver is installed on the source server before you import an image to Alibaba Cloud. For more information, see [Install the virtio driver](~~62423~~).
  * *   Before you import images for the first time, you must use Resource Access Management (RAM) to authorize ECS to access your OSS buckets. If ECS is not authorized to access your OSS buckets, the `NoSetRoletoECSServiceAcount` error code is returned when you call the ImportImage operation. The [Cloud Resource Access Authorization](https://ram.console.aliyun.com/?spm=5176.2020520101image.0.0.2ffa4df57kSoHX#/role/authorize?request=%7B%22Requests%22%3A%20%7B%22request1%22%3A%20%7B%22RoleName%22%3A%20%22AliyunECSImageImportDefaultRole%22%2C%20%22TemplateId%22%3A%20%22ECSImportRole%22%7D%2C%20%22request2%22%3A%20%7B%22RoleName%22%3A%20%22AliyunECSImageExportDefaultRole%22%2C%20%22TemplateId%22%3A%20%22ECSExportRole%22%7D%7D%2C%20%22ReturnUrl%22%3A%20%22https%3A//ecs.console.aliyun.com/%22%2C%20%22Service%22%3A%20%22ECS%22%7D) page in the RAM console provides a convenient push-button authorization feature for this operation. You can also perform the authorization by using a RAM role and RAM policies. The following examples show the policies and permissions required for some steps in the authorization procedure. For more information, see [Control access to resources by using RAM users](~~25481~~).
  *     1.  Create a role named `AliyunECSImageImportDefaultRole`. You must use this exact name. Otherwise, the image cannot be imported. Configure the following trust policy for the role:
  *             {
  *             	"Statement": [
  *             	{
  *             		"Action": "sts:AssumeRole",
  *             		"Effect": "Allow",
  *             		"Principal": {
  *             		"Service": [
  *             			"ecs.aliyuncs.com"
  *             		]
  *             		}
  *             	}
  *             ],
  *             	"Version": "1"
  *             }
  *     2.  Attach the `AliyunECSImageImportRolePolicy` system policy to the role. You can also create a custom policy that contains the following content and attach the policy to the role:
  *         ```
  *         {
  *         	"Version": "1",
  *         	"Statement": [
  *         	{
  *         		"Action": [
  *         				"oss:GetObject",
  *         				"oss:GetBucketLocation",
  *         				"oss:GetBucketInfo"
  *         	],
  *         			"Resource": "*",
  *         			"Effect": "Allow"
  *         			}
  *         	]
  *         }
  *         ```
  * *   You cannot delete an image that is being imported. However, you can call the [CancelTask](~~25624~~) operation to cancel the image import task.
  * *   You can import an image only to the same region as the OSS bucket to which the image was uploaded.
  * *   The valid values of N in the `DiskDeviceMapping.N` parameter range from 1 to 17. When N is set to 1, the disk is a system disk. When N is set to a value from 2 to 17, the disk is a data disk.
  * *   When you set `Architecture` to `arm64` or when you set `Platform` to `CentOS Stream`, `Anolis`, `AlmaLinux`, `UOS`, `Kylin`, or `Rocky Linux`, take note of the following items:
  *     *   To ensure that the password can be set, or that the key pair can be modified for an imported image, the image must meet the following requirements:
  *         *   The operating system kernel supports the `CONFIG_FW_CFG_SYSFS` feature. By default, Linux community kernel 4.6 and later, as well as CentOS kernel 3.10.0-826.el7 and later, support this feature. You can run the `grep -nr CONFIG_FW_CFG_SYSFS /boot/config-$(uname -r)` command in the source server of the image. If the command output contains `CONFIG_FW_CFG_SYSFS=y`, the kernel of this image supports the `CONFIG_FW_CFG_SYSFS` feature.
  *         *   The latest version of Alibaba Cloud cloud-init is installed on the operating system. If the installed version of cloud-init is 19.1, make sure that the minor version is 19.1.3 or later. If the installed version of cloud-init is 0.7.6a as in some early versions of operating systems, make sure that the minor version is 0.7.6a15 or later. For more information, see [Install cloud-init](~~57803~~).
  *         *   The operating system supports the SHA-512 encryption algorithm.
  *     *   If you want an imported image to support the resizing of disks and file systems, make sure that the image meets the following requirements before you import it:
  *         *   The kernel version of the operating system is later than 3.6.
  *         *   The image supports the growpart command. To support this command, you must install the `cloud-utils-growpart` package. Package installation methods vary based on operating systems. For more information, see [Resize partitions and file systems of Linux system disks](~~111738~~).
  *         *   The image supports the resize2fs command. To support this command, you must install the `e2fsprogs` package. By default, the package is installed on the operating system. If the package is not installed, you must install it.
  *         *   The latest version of Alibaba Cloud cloud-init is installed on the operating system. If the installed version of cloud-init is 19.1, make sure that the minor version is 19.1.3 or later. If the installed version of cloud-init is 0.7.6a as in some early versions of operating systems, make sure that the minor version is 0.7.6a15 or later. For more information, see [Install cloud-init](~~57803~~).
  * *   If the image that you want to import uses the ARM64 architecture, you must configure the real-time clock (RTC) to use the Coordinated Universal Time (UTC) time standard. For more information, see [Linux time and time zones](https://icms.alibaba-inc.com/content/ecs/image?l=1\\&m=4656\\&n=3385033).
  *
  * @param request ImportImageRequest
  * @return ImportImageResponse
 */
async function importImage(request: ImportImageRequest): ImportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return importImageWithOptions(request, runtime);
}

model ImportKeyPairRequest {
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. The name must be unique. It must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testKeyPairName'),
  ownerId?: long(name='OwnerId'),
  publicKeyBody?: string(name='PublicKeyBody', description='The public key of the key pair.', example='ABC1234567'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the enterprise resource group to which the SSH key pair belongs.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the key pair. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag key cannot start with acs: or aliyun.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the key pair. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag value cannot start with acs:.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the key pair.'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint', description='The fingerprint of the key pair. The MD5 message-digest algorithm is used based on the public key fingerprint format defined in RFC 4716.', example='89:f0:ba:62:ac:b8:aa:e1:61:5e:fd:81:69:86:6d:6b:f0:c0:5a:**'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.', example='testKeyPairName'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportKeyPairResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   A maximum of 500 key pairs can be created in each region.
  * *   The key pair to be imported must support one of the following encryption methods:
  *     *   rsa
  *     *   dsa
  *     *   ssh-rsa
  *     *   ssh-dss
  *     *   ecdsa
  *     *   <ssh-rsa-cert-v00@openssh.com>
  *     *   <ssh-dss-cert-v00@openssh.com>
  *     *   <ssh-rsa-cert-v01@openssh.com>
  *     *   <ssh-dss-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp256-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp384-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp521-cert-v01@openssh.com>
  *
  * @param request ImportKeyPairRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportKeyPairResponse
 */
async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.publicKeyBody)) {
    query['PublicKeyBody'] = request.publicKeyBody;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportKeyPair',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   A maximum of 500 key pairs can be created in each region.
  * *   The key pair to be imported must support one of the following encryption methods:
  *     *   rsa
  *     *   dsa
  *     *   ssh-rsa
  *     *   ssh-dss
  *     *   ecdsa
  *     *   <ssh-rsa-cert-v00@openssh.com>
  *     *   <ssh-dss-cert-v00@openssh.com>
  *     *   <ssh-rsa-cert-v01@openssh.com>
  *     *   <ssh-dss-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp256-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp384-cert-v01@openssh.com>
  *     *   <ecdsa-sha2-nistp521-cert-v01@openssh.com>
  *
  * @param request ImportKeyPairRequest
  * @return ImportKeyPairResponse
 */
async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model ImportSnapshotRequest {
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  roleName?: string(name='RoleName'),
  snapshotName?: string(name='SnapshotName'),
}

model ImportSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotId?: string(name='SnapshotId'),
  taskId?: string(name='TaskId'),
}

model ImportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportSnapshotResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ImportSnapshotRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ImportSnapshotResponse
 */
// Deprecated
async function importSnapshotWithOptions(request: ImportSnapshotRequest, runtime: Util.RuntimeOptions): ImportSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ossBucket)) {
    query['OssBucket'] = request.ossBucket;
  }
  if (!Util.isUnset(request.ossObject)) {
    query['OssObject'] = request.ossObject;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ImportSnapshot',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ImportSnapshotRequest
  * @return ImportSnapshotResponse
 */
// Deprecated
async function importSnapshot(request: ImportSnapshotRequest): ImportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSnapshotWithOptions(request, runtime);
}

model InstallCloudAssistantRequest {
  instanceId?: [ string ](name='InstanceId', description='The ID of the instance.', example='i-bp1iudwa5b1tqa****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The IDs of instances. You can specify up to 50 instance IDs in a single request.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

/**
  * The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request InstallCloudAssistantRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InstallCloudAssistantResponse
 */
async function installCloudAssistantWithOptions(request: InstallCloudAssistantRequest, runtime: Util.RuntimeOptions): InstallCloudAssistantResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallCloudAssistant',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request InstallCloudAssistantRequest
  * @return InstallCloudAssistantResponse
 */
async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudAssistantWithOptions(request, runtime);
}

model InvokeCommandRequest {
  clientToken?: string(name='ClientToken', description='保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见[如何保证幂等性](~~25693~~)。', example='123e4567-e89b-12d3-a456-42665544****'),
  commandId?: string(name='CommandId', description='The command ID. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.

> Common Cloud Assistant commands can be run based on their names. For more information, see [View and run common Cloud Assistant commands](~~429635~~).', example='c-e996287206324975b5fbe1d****'),
  containerId?: string(name='ContainerId', description='The container ID. Only 64-bit hexadecimal strings are supported. Container IDs that are prefixed with `docker://`, `containerd://`, or `cri-o://` are allowed to specify container runtimes.

Take note of the following items:

*   If this parameter is configured, Cloud Assistant runs scripts in the specified container of the instance.

*   If this parameter is configured, scripts can be run only on Linux instances on which Cloud Assistant clients whose versions are not earlier than 2.2.3.344 are installed.

    *   For information about how to view the version of the Cloud Assistant client, see [Install the Cloud Assistant client](~~64921~~).
    *   For information about how to upgrade the version of the Cloud Assistant client, see [Upgrade or disable upgrades for the Cloud Assistant client](~~134383~~).

*   If this parameter is configured, the `Username` parameter configured in a request to this operation and the `WorkingDir` parameter configured in a request to the [CreateCommand](~~64844~~) operation do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).

*   If this parameter is configured, only shell scripts can be run in Linux containers. You cannot add a command in the format similar to `#!/usr/bin/python` at the beginning of a script to specify a script interpreter. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
  containerName?: string(name='ContainerName', description='The name of the container.

Take note of the following items:

*   If this parameter is configured, Cloud Assistant runs scripts in the specified container of the instance.

*   If this parameter is configured, scripts can be run only on Linux instances on which Cloud Assistant clients whose versions are not earlier than 2.2.3.344 are installed.

    *   For information about how to view the version of the Cloud Assistant client, see [Install the Cloud Assistant client](~~64921~~).
    *   For information about how to upgrade the version of the Cloud Assistant client, see [Upgrade or disable upgrades for the Cloud Assistant client](~~134383~~).

*   If this parameter is configured, the `Username` parameter configured in a request to this operation and the `WorkingDir` parameter configured in a request to the [CreateCommand](~~64844~~) operation do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).

*   If this parameter is configured, only shell scripts can be run in Linux containers. You cannot add a command in the format similar to `#!/usr/bin/python` at the beginning of a script to specify a script interpreter. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='test-container'),
  frequency?: string(name='Frequency', description='The schedule based on which you want to run the command. This parameter is required if you set `Timed` to `true`. You can configure a command to run at a fixed interval based on a rate expression, run only once at a specified point in time, or run at designated points in time based on a cron expression.

*   To run a command at a fixed interval, use a rate expression to specify the interval. You can specify the interval in seconds, minutes, hours, or days. This option is applicable when tasks need to be executed at a fixed interval. Specify the interval in the following format: `rate(<Running interval value><Running interval unit>)`. For example, specify `rate(5m)` to run the command every 5 minutes. Take note of the following limits when you specify an interval:

    *   The specified interval can range from 60 seconds to 7 days and must be longer than the timeout period of the scheduled task.
    *   The interval is the duration between two consecutive executions. The interval is irrelevant to the amount of time required to run the command once. For example, if you set the interval to 5 minutes and 2 minutes are required to run the command each time. Each time the command is run, the system waits 3 minutes before it runs the command again.
    *   A task is not run immediately after it is created. For example, if you set the interval to 5 minutes and create a task to run the command. The task begins to run 5 minutes after it is created.

*   To run a command only once at a specified point in time, specify a point in time and a time zone. Specify the point in time in the following format: `at(yyyy-MM-dd HH:mm:ss <Time zone>)`, which indicates `at(Year-Month-Day Hour:Minute:Second <Time zone>)`. If you do not specify a time zone, the UTC time zone is used by default. You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to configure a command to run only once at 13:15:30 on June 06, 2022 (Shanghai time), set the time to `at(2022-06-06 13:15:30 Asia/Shanghai)`. To configure a command to run only once at 13:15:30 on June 06, 2022 (UTC-7), set the time to `at(2022-06-06 13:15:30 GMT-7:00)`.

*   To run a command at designated points in time, specify a cron expression. Specify the time in the following format: `<Cron expression> <Time zone>`, where the cron expression is in the format of `<seconds> <minutes> <hours> <day of the month> <month> <day of the week> <year (optional)>`. The system calculates the execution times of the command based on the specified cron expression and time zone and runs the command as scheduled. If you do not specify a time zone, the system time zone of the instance on which to run the command is used by default. For more information about cron expressions, see [Cron expressions](~~64769~~). You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to configure a command to run at 10:15:00 every day in 2022 (Shanghai time), set the time to `0 15 10 ? * * 2022 Asia/Shanghai`. To configure a command to run every half an hour from 10:00:00 to 11:30:00 every day in 2022 (UTC+8), set the time to `0 0/30 10-11 * * ? 2022 GMT +8:00`. To configure a command to run every 5 minutes from 14:00:00 to 14:55:00 every October every two years since 2022 (UTC), set the time to `0 0/5 14 * 10 ? 2022/2 UTC`.

    **

    **Note**The minimum interval must be 10 seconds or more and cannot be shorter than the timeout period of scheduled executions.', example='0 */20 * * * ?'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances on which you want to run the command. You can specify a maximum of 50 instance IDs in each request. Valid values of N: 1 to 50.', example='i-bp185dy2o3o6n****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parameters?: map[string]any(name='Parameters', description='The key-value pairs of custom parameters to pass in when the custom parameter feature is enabled. Supported number of custom parameters: 0 to 10.

*   Each key in a Map collection cannot be an empty string and can be a maximum of 64 characters in length.
*   Values in a Map collection can be empty strings.
*   The size of the command (including custom parameters and original command content) after Base64 encoding cannot exceed 18 KB.
*   The custom parameter names specified in the value of Parameters must be included in the custom parameters specified when you created the command. You can use empty strings to represent the parameters that are not specified.

You can leave this parameter empty to disable the custom parameter feature.', example='{"name":"Jack", "accessKey":"LTAIdyv******aRY"}'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  repeatMode?: string(name='RepeatMode', description='The mode in which you want to run the command. Valid values:

*   Once: Immediately runs the command.
*   Period: Runs the command on a schedule. If you set this parameter to `Period`, you must set `Timed` to true and configure `Frequency`.
*   NextRebootOnly: Automatically runs the command the next time the instance starts.
*   EveryReboot: Automatically runs the command every time the instance starts.

Default value:

*   When `Timed` is set to false and `Frequency` is not configured, the default value of RepeatMode is `Once`.
*   When `Timed` is set to true and `Frequency` is configured, `Period` is used as the value of RepeatMode regardless of whether RepeatMode is configured.

Take note of the following items:

*   When this parameter is set to `Period`, `NextRebootOnly`, or `EveryReboot`, you can call the [StopInvocation](~~64838~~) operation to stop the pending or scheduled executions of the command.
*   When this parameter is set to `Period` or `EveryReboot`, you can call the [DescribeInvocationResults](~~64845~~) operation and set `IncludeHistory` to true to view the results of historical scheduled executions.', example='Once'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group on which you want to run the command. When you configure this parameter, take note of the following items:

*   The instances that are specified by the InstanceId parameter must belong to this resource group.
*   After the command is run, you can call the [DescribeInvocations](~~64840~~) or [DescribeInvocationResults](~~64845~~) operation with ResourceGroupId configured to query the running results of the command.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the command. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, a maximum of 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, a maximum of 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be a maximum of 64 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be a maximum of 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the command.'),
  timed?: boolean(name='Timed', description='Specifies whether to run the command on a schedule. Valid values:

*   true: Runs the command on the schedule specified by `Frequency`. The results of each execution of a command do not affect the next execution of the command.
*   false: Runs the command only once.

Default value: false.', example='true'),
  timeout?: long(name='Timeout', description='The timeout period for the command running. Unit: seconds.

*   The timeout period cannot be less than 10 seconds.
*   A timeout error occurs when a command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When an execution times out, the command process is forcefully terminated.
*   If this parameter is not configured, the timeout period specified when the command is created is used.
*   The value of this parameter is used only as the timeout period for command execution. The timeout period of the command is not changed.', example='60'),
  username?: string(name='Username', description='The username to use to run the command on ECS instances.

*   For Linux instances, the root user is used.
*   For Windows instances, the System user is used.

You can also specify other usernames that already exist in the ECS instance to run the command. For security purposes, we recommend that you run Cloud Assistant commands as a regular user. For more information, see [Configure a regular user to run Cloud Assistant commands](~~203771~~).', example='root'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password to use to run the command on a Windows instance.

If you want to use a username other than the default System username to run the command on the Windows instance, you must configure both the WindowsPasswordName and `Username` parameters. The password is hosted in plaintext in the parameter repository of Operation Orchestration Service (OOS) to mitigate the risk of password leaks. Only the name of the password is passed in by using the WindowsPasswordName parameter. For more information, see [Manage encryption parameters](~~186828~~) and [Run Cloud Assistant commands as a regular user](~~203771~~).

> When you use the root username for Linux instances or the System username for Windows instances to run the command, you do not need to configure the WindowsPasswordName parameter.', example='axtSecretPassword'),
}

model InvokeCommandShrinkRequest {
  clientToken?: string(name='ClientToken', description='保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。更多详情，请参见[如何保证幂等性](~~25693~~)。', example='123e4567-e89b-12d3-a456-42665544****'),
  commandId?: string(name='CommandId', description='The command ID. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.

> Common Cloud Assistant commands can be run based on their names. For more information, see [View and run common Cloud Assistant commands](~~429635~~).', example='c-e996287206324975b5fbe1d****'),
  containerId?: string(name='ContainerId', description='The container ID. Only 64-bit hexadecimal strings are supported. Container IDs that are prefixed with `docker://`, `containerd://`, or `cri-o://` are allowed to specify container runtimes.

Take note of the following items:

*   If this parameter is configured, Cloud Assistant runs scripts in the specified container of the instance.

*   If this parameter is configured, scripts can be run only on Linux instances on which Cloud Assistant clients whose versions are not earlier than 2.2.3.344 are installed.

    *   For information about how to view the version of the Cloud Assistant client, see [Install the Cloud Assistant client](~~64921~~).
    *   For information about how to upgrade the version of the Cloud Assistant client, see [Upgrade or disable upgrades for the Cloud Assistant client](~~134383~~).

*   If this parameter is configured, the `Username` parameter configured in a request to this operation and the `WorkingDir` parameter configured in a request to the [CreateCommand](~~64844~~) operation do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).

*   If this parameter is configured, only shell scripts can be run in Linux containers. You cannot add a command in the format similar to `#!/usr/bin/python` at the beginning of a script to specify a script interpreter. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
  containerName?: string(name='ContainerName', description='The name of the container.

Take note of the following items:

*   If this parameter is configured, Cloud Assistant runs scripts in the specified container of the instance.

*   If this parameter is configured, scripts can be run only on Linux instances on which Cloud Assistant clients whose versions are not earlier than 2.2.3.344 are installed.

    *   For information about how to view the version of the Cloud Assistant client, see [Install the Cloud Assistant client](~~64921~~).
    *   For information about how to upgrade the version of the Cloud Assistant client, see [Upgrade or disable upgrades for the Cloud Assistant client](~~134383~~).

*   If this parameter is configured, the `Username` parameter configured in a request to this operation and the `WorkingDir` parameter configured in a request to the [CreateCommand](~~64844~~) operation do not take effect. You can run the command in the default working directory of the container by using only the default user of the container. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).

*   If this parameter is configured, only shell scripts can be run in Linux containers. You cannot add a command in the format similar to `#!/usr/bin/python` at the beginning of a script to specify a script interpreter. For more information, see [Use Cloud Assistant to run commands in containers](~~456641~~).', example='test-container'),
  frequency?: string(name='Frequency', description='The schedule based on which you want to run the command. This parameter is required if you set `Timed` to `true`. You can configure a command to run at a fixed interval based on a rate expression, run only once at a specified point in time, or run at designated points in time based on a cron expression.

*   To run a command at a fixed interval, use a rate expression to specify the interval. You can specify the interval in seconds, minutes, hours, or days. This option is applicable when tasks need to be executed at a fixed interval. Specify the interval in the following format: `rate(<Running interval value><Running interval unit>)`. For example, specify `rate(5m)` to run the command every 5 minutes. Take note of the following limits when you specify an interval:

    *   The specified interval can range from 60 seconds to 7 days and must be longer than the timeout period of the scheduled task.
    *   The interval is the duration between two consecutive executions. The interval is irrelevant to the amount of time required to run the command once. For example, if you set the interval to 5 minutes and 2 minutes are required to run the command each time. Each time the command is run, the system waits 3 minutes before it runs the command again.
    *   A task is not run immediately after it is created. For example, if you set the interval to 5 minutes and create a task to run the command. The task begins to run 5 minutes after it is created.

*   To run a command only once at a specified point in time, specify a point in time and a time zone. Specify the point in time in the following format: `at(yyyy-MM-dd HH:mm:ss <Time zone>)`, which indicates `at(Year-Month-Day Hour:Minute:Second <Time zone>)`. If you do not specify a time zone, the UTC time zone is used by default. You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to configure a command to run only once at 13:15:30 on June 06, 2022 (Shanghai time), set the time to `at(2022-06-06 13:15:30 Asia/Shanghai)`. To configure a command to run only once at 13:15:30 on June 06, 2022 (UTC-7), set the time to `at(2022-06-06 13:15:30 GMT-7:00)`.

*   To run a command at designated points in time, specify a cron expression. Specify the time in the following format: `<Cron expression> <Time zone>`, where the cron expression is in the format of `<seconds> <minutes> <hours> <day of the month> <month> <day of the week> <year (optional)>`. The system calculates the execution times of the command based on the specified cron expression and time zone and runs the command as scheduled. If you do not specify a time zone, the system time zone of the instance on which to run the command is used by default. For more information about cron expressions, see [Cron expressions](~~64769~~). You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to configure a command to run at 10:15:00 every day in 2022 (Shanghai time), set the time to `0 15 10 ? * * 2022 Asia/Shanghai`. To configure a command to run every half an hour from 10:00:00 to 11:30:00 every day in 2022 (UTC+8), set the time to `0 0/30 10-11 * * ? 2022 GMT +8:00`. To configure a command to run every 5 minutes from 14:00:00 to 14:55:00 every October every two years since 2022 (UTC), set the time to `0 0/5 14 * 10 ? 2022/2 UTC`.

    **

    **Note**The minimum interval must be 10 seconds or more and cannot be shorter than the timeout period of scheduled executions.', example='0 */20 * * * ?'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of the instances on which you want to run the command. You can specify a maximum of 50 instance IDs in each request. Valid values of N: 1 to 50.', example='i-bp185dy2o3o6n****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parametersShrink?: string(name='Parameters', description='The key-value pairs of custom parameters to pass in when the custom parameter feature is enabled. Supported number of custom parameters: 0 to 10.

*   Each key in a Map collection cannot be an empty string and can be a maximum of 64 characters in length.
*   Values in a Map collection can be empty strings.
*   The size of the command (including custom parameters and original command content) after Base64 encoding cannot exceed 18 KB.
*   The custom parameter names specified in the value of Parameters must be included in the custom parameters specified when you created the command. You can use empty strings to represent the parameters that are not specified.

You can leave this parameter empty to disable the custom parameter feature.', example='{"name":"Jack", "accessKey":"LTAIdyv******aRY"}'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  repeatMode?: string(name='RepeatMode', description='The mode in which you want to run the command. Valid values:

*   Once: Immediately runs the command.
*   Period: Runs the command on a schedule. If you set this parameter to `Period`, you must set `Timed` to true and configure `Frequency`.
*   NextRebootOnly: Automatically runs the command the next time the instance starts.
*   EveryReboot: Automatically runs the command every time the instance starts.

Default value:

*   When `Timed` is set to false and `Frequency` is not configured, the default value of RepeatMode is `Once`.
*   When `Timed` is set to true and `Frequency` is configured, `Period` is used as the value of RepeatMode regardless of whether RepeatMode is configured.

Take note of the following items:

*   When this parameter is set to `Period`, `NextRebootOnly`, or `EveryReboot`, you can call the [StopInvocation](~~64838~~) operation to stop the pending or scheduled executions of the command.
*   When this parameter is set to `Period` or `EveryReboot`, you can call the [DescribeInvocationResults](~~64845~~) operation and set `IncludeHistory` to true to view the results of historical scheduled executions.', example='Once'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group on which you want to run the command. When you configure this parameter, take note of the following items:

*   The instances that are specified by the InstanceId parameter must belong to this resource group.
*   After the command is run, you can call the [DescribeInvocations](~~64840~~) or [DescribeInvocationResults](~~64845~~) operation with ResourceGroupId configured to query the running results of the command.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the command. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, a maximum of 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, a maximum of 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags added, call the [ListTagResources](~~110425~~) operation.

The tag key can be a maximum of 64 characters in length and cannot start with `acs:` or `aliyun`. The tag key cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the command. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be a maximum of 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the command.'),
  timed?: boolean(name='Timed', description='Specifies whether to run the command on a schedule. Valid values:

*   true: Runs the command on the schedule specified by `Frequency`. The results of each execution of a command do not affect the next execution of the command.
*   false: Runs the command only once.

Default value: false.', example='true'),
  timeout?: long(name='Timeout', description='The timeout period for the command running. Unit: seconds.

*   The timeout period cannot be less than 10 seconds.
*   A timeout error occurs when a command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When an execution times out, the command process is forcefully terminated.
*   If this parameter is not configured, the timeout period specified when the command is created is used.
*   The value of this parameter is used only as the timeout period for command execution. The timeout period of the command is not changed.', example='60'),
  username?: string(name='Username', description='The username to use to run the command on ECS instances.

*   For Linux instances, the root user is used.
*   For Windows instances, the System user is used.

You can also specify other usernames that already exist in the ECS instance to run the command. For security purposes, we recommend that you run Cloud Assistant commands as a regular user. For more information, see [Configure a regular user to run Cloud Assistant commands](~~203771~~).', example='root'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The name of the password to use to run the command on a Windows instance.

If you want to use a username other than the default System username to run the command on the Windows instance, you must configure both the WindowsPasswordName and `Username` parameters. The password is hosted in plaintext in the parameter repository of Operation Orchestration Service (OOS) to mitigate the risk of password leaks. Only the name of the password is passed in by using the WindowsPasswordName parameter. For more information, see [Manage encryption parameters](~~186828~~) and [Run Cloud Assistant commands as a regular user](~~203771~~).

> When you use the root username for Linux instances or the System username for Windows instances to run the command, you do not need to configure the WindowsPasswordName parameter.', example='axtSecretPassword'),
}

model InvokeCommandResponseBody = {
  invokeId?: string(name='InvokeId', description='The execution ID.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model InvokeCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeCommandResponseBody(name='body'),
}

/**
  * *   The ECS instances on which you want to run the Cloud Assistant command must meet the following requirements. If you specify multiple ECS instances and one of the instances does not meet the requirements for running the command, the call fails. Specify instances that meet the requirements and call the InvokeCommand operation again.
  *     *   The network type is Virtual Private Cloud (VPC). For more information, see [What is a VPC?](~~34217~~)
  *     *   The instances are in the `Running` state.
  *     *   The Cloud Assistant client is installed on the instances. For more information, see [Install the Cloud Assistant client](~~64921~~).
  *     *   Before you run PowerShell commands, make sure that the instances have the PowerShell module configured.
  * *   If `Timed` is set to false, the command is run only once.
  * *   If `Timed` is set to true, the command is run on a schedule.
  *     *   The schedule is specified by the `Frequency` parameter. The results of each execution of a command do not affect the next execution of the command.
  *     *   If you want to specify a schedule by using a cron expression, you can specify a time zone based on your requirements. If you do not specify a time zone, the schedule is based on the system time of the instance. Make sure that the time or time zone of the instance meets your business requirements. For more information, see [Configure the NTP service and time zone for Linux instances](~~92803~~) or [Configure the NTP service for Windows instances](~~51890~~).
  *     To ensure that scheduled tasks can run as expected, make sure that the version of the Cloud Assistant client is not earlier than the following ones. A scheduled task can run a command at a specified interval, only once at a specified point in time, or at designated points in time based on a cron expression with a specified year or time zone. If the `ClientNeedUpgrade` error code is returned, you must upgrade the Cloud Assistant client to the latest version. For more information, see [Update or disable updates for the Cloud Assistant client](~~134383~~).
  *           - Linux: 2.2.3.282 
  *           - Windows: 2.1.3.282 
  * *   Command executions may fail due to instance status exceptions, network exceptions, or exceptions on the Cloud Assistant client. If an execution fails, no execution information is generated.
  * *   If you enable the custom parameter feature by setting EnableParameter to true when you create a command, you must configure custom parameters in the `Parameters` when you run the command.
  *
  * @param tmpReq InvokeCommandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InvokeCommandResponse
 */
async function invokeCommandWithOptions(tmpReq: InvokeCommandRequest, runtime: Util.RuntimeOptions): InvokeCommandResponse {
  Util.validateModel(tmpReq);
  var request = new InvokeCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.frequency)) {
    query['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeatMode)) {
    query['RepeatMode'] = request.repeatMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timed)) {
    query['Timed'] = request.timed;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.windowsPasswordName)) {
    query['WindowsPasswordName'] = request.windowsPasswordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InvokeCommand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The ECS instances on which you want to run the Cloud Assistant command must meet the following requirements. If you specify multiple ECS instances and one of the instances does not meet the requirements for running the command, the call fails. Specify instances that meet the requirements and call the InvokeCommand operation again.
  *     *   The network type is Virtual Private Cloud (VPC). For more information, see [What is a VPC?](~~34217~~)
  *     *   The instances are in the `Running` state.
  *     *   The Cloud Assistant client is installed on the instances. For more information, see [Install the Cloud Assistant client](~~64921~~).
  *     *   Before you run PowerShell commands, make sure that the instances have the PowerShell module configured.
  * *   If `Timed` is set to false, the command is run only once.
  * *   If `Timed` is set to true, the command is run on a schedule.
  *     *   The schedule is specified by the `Frequency` parameter. The results of each execution of a command do not affect the next execution of the command.
  *     *   If you want to specify a schedule by using a cron expression, you can specify a time zone based on your requirements. If you do not specify a time zone, the schedule is based on the system time of the instance. Make sure that the time or time zone of the instance meets your business requirements. For more information, see [Configure the NTP service and time zone for Linux instances](~~92803~~) or [Configure the NTP service for Windows instances](~~51890~~).
  *     To ensure that scheduled tasks can run as expected, make sure that the version of the Cloud Assistant client is not earlier than the following ones. A scheduled task can run a command at a specified interval, only once at a specified point in time, or at designated points in time based on a cron expression with a specified year or time zone. If the `ClientNeedUpgrade` error code is returned, you must upgrade the Cloud Assistant client to the latest version. For more information, see [Update or disable updates for the Cloud Assistant client](~~134383~~).
  *           - Linux: 2.2.3.282 
  *           - Windows: 2.1.3.282 
  * *   Command executions may fail due to instance status exceptions, network exceptions, or exceptions on the Cloud Assistant client. If an execution fails, no execution information is generated.
  * *   If you enable the custom parameter feature by setting EnableParameter to true when you create a command, you must configure custom parameters in the `Parameters` when you run the command.
  *
  * @param request InvokeCommandRequest
  * @return InvokeCommandResponse
 */
async function invokeCommand(request: InvokeCommandRequest): InvokeCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeCommandWithOptions(request, runtime);
}

model JoinResourceGroupRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which you want to add the instance.', example='rg-bp67acfmxazb4p****'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. For example, if you set ResourceType to instance, set this parameter to the ID of the instance.', example='sg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the ECS resource. Valid values:

*   instance: instance
*   disk: Elastic Block Storage (EBS) device
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   eni: ENI
*   keypair: SSH key pair
*   launchtemplate: launch template

These values are case-sensitive.', example='securitygroup'),
}

model JoinResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model JoinResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinResourceGroupResponseBody(name='body'),
}

/**
  * A resource is a cloud service entity that you create in Alibaba Cloud, such as an ECS instance, elastic network interface (ENI), or image. A resource group is a collection of infrastructure for projects, environments, or stacks. In a resource group, you can manage resources and monitor and run tasks in a centralized manner without switching between Alibaba Cloud services.
  *
  * @param request JoinResourceGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return JoinResourceGroupResponse
 */
async function joinResourceGroupWithOptions(request: JoinResourceGroupRequest, runtime: Util.RuntimeOptions): JoinResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinResourceGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A resource is a cloud service entity that you create in Alibaba Cloud, such as an ECS instance, elastic network interface (ENI), or image. A resource group is a collection of infrastructure for projects, environments, or stacks. In a resource group, you can manage resources and monitor and run tasks in a centralized manner without switching between Alibaba Cloud services.
  *
  * @param request JoinResourceGroupRequest
  * @return JoinResourceGroupResponse
 */
async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinResourceGroupWithOptions(request, runtime);
}

model JoinSecurityGroupRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.

> If you configure this parameter, you cannot configure `NetworkInterfaceId`.', example='i-bp67acfmxazb4p****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.

> If you configure this parameter, you cannot configure `InstanceId`.', example='eni-bp13kd656hxambfe****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.

*   If you want to add an instance to a security group, you do not need to specify a region ID.
*   If you want to add an ENI to a security group, you must specify the region ID of the ENI.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group. You can call the [DescribeSecurityGroups](~~25556~~) operation to query the most recent security group list.', example='sg-bp67acfmxazb4p****'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model JoinSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: JoinSecurityGroupResponseBody(name='body'),
}

/**
  * ## Usage notes
  * > This operation is not recommended. We recommend that you call the [ModifyInstanceAttribute](~~25503~~) operation to add an instance to or remove an instance from a security group, and call the [ModifyNetworkInterfaceAttribute](~~58513~~) operation to add an ENI to or remove an ENI from a security group.
  * Take note of the following items:
  * *   Before you add an instance to a security group, the instance must be in the **Stopped** or **Running** state.
  * *   An instance can be added to up to five security groups.
  * *
  * You can increase this number to 16 by [submitting a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex).
  * *   A basic security group can contain up to 2,000 instances. An advanced security group can contain up to 65,536 instances.
  * *   The security group and the instance must reside in the same region.
  * *   The security group and the instance must be of the same network type. If the network type is virtual private cloud (VPC), the security group and the instance must be in the same VPC.
  * *   An instance and an ENI cannot be added to a security group at the same time. You cannot configure the `InstanceId` and `NetworkInterfaceId` parameters at the same time.
  *
  * @param request JoinSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return JoinSecurityGroupResponse
 */
async function joinSecurityGroupWithOptions(request: JoinSecurityGroupRequest, runtime: Util.RuntimeOptions): JoinSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'JoinSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * > This operation is not recommended. We recommend that you call the [ModifyInstanceAttribute](~~25503~~) operation to add an instance to or remove an instance from a security group, and call the [ModifyNetworkInterfaceAttribute](~~58513~~) operation to add an ENI to or remove an ENI from a security group.
  * Take note of the following items:
  * *   Before you add an instance to a security group, the instance must be in the **Stopped** or **Running** state.
  * *   An instance can be added to up to five security groups.
  * *
  * You can increase this number to 16 by [submitting a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex).
  * *   A basic security group can contain up to 2,000 instances. An advanced security group can contain up to 65,536 instances.
  * *   The security group and the instance must reside in the same region.
  * *   The security group and the instance must be of the same network type. If the network type is virtual private cloud (VPC), the security group and the instance must be in the same VPC.
  * *   An instance and an ENI cannot be added to a security group at the same time. You cannot configure the `InstanceId` and `NetworkInterfaceId` parameters at the same time.
  *
  * @param request JoinSecurityGroupRequest
  * @return JoinSecurityGroupResponse
 */
async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinSecurityGroupWithOptions(request, runtime);
}

model LeaveSecurityGroupRequest {
  instanceId?: string(name='InstanceId', description='The instance ID.

> If you configure this parameter, you cannot configure `NetworkInterfaceId`.', example='i-bp67acfmxazb4p****'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ENI ID.

> If you configure this parameter, you cannot configure `InstanceId`.', example='eni-bp13kd656hxambfe****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.

*   If you want to remove an instance from a security group, you do not need to specify a region ID.
*   If you want to remove an ENI from a security group, you must specify the ID of the region in which the ENI resides.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-bp67acfmxazb4p****'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model LeaveSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LeaveSecurityGroupResponseBody(name='body'),
}

/**
  * > This operation is not recommended. We recommend that you call the [ModifyInstanceAttribute](~~25503~~) operation to add an instance to or remove an instance from a security group, and call the [ModifyNetworkInterfaceAttribute](~~58513~~) operation to add an ENI to or remove an ENI from a security group.
  * When you call this operation, take note of the following items:
  * *   Before you remove an instance from a security group, the instance must be in the **Stopped** or **Running** state.
  * *   An instance must belong to at least one security group. Therefore, if the instance that you want to remove belongs to only one security group, the LeaveSecurityGroup operation fails.
  * *   You cannot remove an instance and an ENI from a security group at the same time. This indicates that you cannot configure both `InstanceId` and `NetworkInterfaceId` in a request.
  *
  * @param request LeaveSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return LeaveSecurityGroupResponse
 */
async function leaveSecurityGroupWithOptions(request: LeaveSecurityGroupRequest, runtime: Util.RuntimeOptions): LeaveSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'LeaveSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * > This operation is not recommended. We recommend that you call the [ModifyInstanceAttribute](~~25503~~) operation to add an instance to or remove an instance from a security group, and call the [ModifyNetworkInterfaceAttribute](~~58513~~) operation to add an ENI to or remove an ENI from a security group.
  * When you call this operation, take note of the following items:
  * *   Before you remove an instance from a security group, the instance must be in the **Stopped** or **Running** state.
  * *   An instance must belong to at least one security group. Therefore, if the instance that you want to remove belongs to only one security group, the LeaveSecurityGroup operation fails.
  * *   You cannot remove an instance and an ENI from a security group at the same time. This indicates that you cannot configure both `InstanceId` and `NetworkInterfaceId` in a request.
  *
  * @param request LeaveSecurityGroupRequest
  * @return LeaveSecurityGroupResponse
 */
async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveSecurityGroupWithOptions(request, runtime);
}

model ListPluginStatusRequest {
  instanceId?: [ string ](name='InstanceId', description='The instance IDs. You can specify up to 50 instance IDs in a request. Valid values of N: 1 to 50.'),
  name?: string(name='Name', description='The name of the Cloud Assistant plug-in. The name supports all character sets and must be 1 to 255 characters in length.

*   If this parameter is not specified, the states of all Cloud Assistant plug-ins that are installed on the specified ECS instances are queried.

    **

    **Note**If this parameter is not specified, only a single instance ID can be specified.

*   If this parameter is specified, the state of the specified Cloud Assistant plug-in is queried.', example='testPluginName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.

*   Pages start from page 1.
*   Default value: 1.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.

*   Valid values: 1 to 50.
*   Default value: 10.', example='10'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListPluginStatusResponseBody = {
  instancePluginStatusSet?: {
    instancePluginStatus?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-xxxxx'),
      pluginStatusSet?: {
        pluginStatus?: [ 
        {
          firstHeartbeatTime?: string(name='FirstHeartbeatTime', description='The first time when Cloud Assistant reported the state of the plug-in.', example='2020-01-19T09:15:46Z'),
          lastHeartbeatTime?: string(name='LastHeartbeatTime', description='The last time when Cloud Assistant reported the state of the plug-in.', example='2020-01-19T09:15:46Z'),
          pluginName?: string(name='PluginName', description='The name of the plug-in.', example='testName'),
          pluginStatus?: string(name='PluginStatus', description='The state of the Cloud Assistant plug-in. Valid values:

*   NotInstalled
*   Installed
*   Running
*   Stopped
*   Crashed
*   Removed
*   Unknown', example='Running'),
          pluginVersion?: string(name='PluginVersion', description='The version of the plug-in.', example='1.1'),
        }
      ](name='PluginStatus')
      }(name='PluginStatusSet', description='The states of the Cloud Assistant plug-ins.'),
    }
  ](name='InstancePluginStatus')
  }(name='InstancePluginStatusSet', description='The states of the Cloud Assistant plug-ins on the ECS instances.'),
  pageNumber?: long(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListPluginStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPluginStatusResponseBody(name='body'),
}

/**
  * Before you call this operation to query the states of Cloud Assistant plug-ins on ECS instances, make sure that the versions of the Cloud Assistant client installed on the instances are not earlier than the following ones:
  * *   2.2.3.344 for Linux instances
  * *   2.1.3.344 for Windows instances
  *
  * @param request ListPluginStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListPluginStatusResponse
 */
async function listPluginStatusWithOptions(request: ListPluginStatusRequest, runtime: Util.RuntimeOptions): ListPluginStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPluginStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation to query the states of Cloud Assistant plug-ins on ECS instances, make sure that the versions of the Cloud Assistant client installed on the instances are not earlier than the following ones:
  * *   2.2.3.344 for Linux instances
  * *   2.1.3.344 for Windows instances
  *
  * @param request ListPluginStatusRequest
  * @return ListPluginStatusResponse
 */
async function listPluginStatus(request: ListPluginStatusRequest): ListPluginStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPluginStatusWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs. Valid values of N: 1 to 50.', example='i-bp1j6qtvdm8w0z1o****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: ENI
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy
*   elasticityassurance: elasticity assurance
*   capacityreservation: capacity reservation
*   command: Cloud Assistant command
*   invocation: Cloud Assistant command execution result', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N used for exact search of ECS resources. The tag key must be 1 to 128 characters in length. Valid values of N: 1 to 20.

Methods of using the `Tag.N` parameter pair (Tag.N.Key and Tag.N.Value):

*   Method 1: Use this parameter pair for exact search of ECS resources that have specified tags added. Each tag is a key-value pair.

    *   If you specify only `Tag.N.Key`, all ECS resources whose tags contain the specified tag key are returned.
    *   If you specify only `Tag.N.Value`, the `InvalidParameter.TagValue` error is returned.
    *   If you specify multiple tag key-value pairs, only the ECS resources that have all these tag key-value pairs added are returned.

*   Method 2: Use this parameter pair to query resource information of a non-default resource group. Set `Key` to `acs:rm:rgId` and `Value` to the ID of a resource group.

    *   If you set `Key` to `acs:rm:rgId`, you must set `Value` to the ID of a non-default resource group. If you set Value to the ID of the default resource group, an error message is returned.
    *   If you set `Key` to `acs:rm:rgId`, you cannot specify other Tag.N parameter pairs. If you specify multiple `Tag.N` parameter pairs to query resource groups and resources at the same time, an error message is returned.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N used for exact search of ECS resources. The tag value must be 1 to 128 characters in length. Valid values of N: 1 to 20.

> When Key is set to `acs:rm:rgId`, you can set Value only to the ID of a non-default resource group.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of tag N used for fuzzy search of ECS resources. The tag key must be 1 to 128 characters in length. Valid values of N: 1 to 5.

The `TagFilter.N` parameter pair (TagFilter.N.TagKey and TagFilter.N.TagValues.N) is used for fuzzy search of ECS resources that have specified tags added. In the specified tags, a single tag key may correspond to one or more tag values. Fuzzy search may have a latency of 2 seconds. A fuzzy search can return a result set of entries about a maximum of 5,000 resources.

*   When you use `TagFilter.N.TagKey` for fuzzy search of ECS resources, you must leave `TagFilter.N.TagValues.N` empty. For example, to query ECS resources whose tags contain the `environment` tag key, you can set `TagFilter.1.TagKey` to `env*` for prefix search, `*env*` for infix search, or `env` for exact search, but you must leave `TagFilter.1.TagValues` empty.
*   When you use `TagFilter.N.TagValues.N` for fuzzy search of ECS resources, you must set `TagFilter.N.TagKey` to an exact value. For example, to query ECS resources that have a tag composed of the `env` tag key and the `product` tag value, you must set `TagFilter.1.TagKey` to `env` and can set `TagFilter.1.TagValues.1` to `proc*` for prefix search, to `*proc*` for infix search, or to `proc` for exact search. Only one of the preceding search methods can be used for each tag key (`TagFilter.N.TagKey`). If multiple search methods are configured for a tag key, the first search method prevails.
*   If you specify multiple tag keys, only the ECS resources that have all the specified tag keys added are returned.
*   If you specify a tag key that corresponds to multiple tag values, all the ECS resources that have one or more of these tag key-value pairs added are returned.

> The `TagFilter.N` parameter pair (TagFilter.N.TagKey and TagFilter.N.TagValues.N) cannot be used together with the `Tag.N` parameter pair (Tag.N.Key and Tag.N.Value). Otherwise, an error message is returned.', example='env'),
      tagValues?: [ string ](name='TagValues', description='The values of tag N used for fuzzy search of ECS resources. The tag values must be 1 to 128 characters in length. Valid values of N: 1 to 5. For more information, see the description of `TagFilter.N.TagKey`.', example='TestTagFilter'),
    }
  ](name='TagFilter', description='The regular expressions used to filter tags.'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='A pagination token.', example='caeba0bbb2be03f84eb48b699f0a4883'),
  requestId?: string(name='RequestId', description='The request ID.', example='484256DA-D816-44D2-9D86-B6EE4D5BA78C'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The resource ID.', example='i-bp1j6qtvdm8w0z1o****'),
      resourceType?: string(name='ResourceType', description='The type of a resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: ENI
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy
*   elasticityassurance: elasticity assurance
*   capacityreservation: capacity reservation
*   command: Cloud Assistant command
*   invocation: Cloud Assistant command execution result', example='instance'),
      tagKey?: string(name='TagKey', description='The key of the tag.', example='TestKey'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='TestValue'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The details about the resources and tags, such as the resource ID, the resource type, tag keys, and tag values.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * You must specify at least one of the following parameters or parameter pairs in a request to determine a query object:
  * *   `ResourceId.N`
  * *   `Tag.N` parameter pair (`Tag.N.Key` and `Tag.N.Value`)
  * *   `TagFilter.N`
  * If one of the following sets of request parameters is specified as filter conditions, only ECS resources that meet all of the specified filter conditions are returned:
  * *   Set 1: `Tag.N.Key, Tag.N.Value`, and `ResourceId.N`
  * *   Set 2: `TagFilter.N.TagKey, TagFilter.N.TagValues.N`, and `ResourceId.N`
  *
  * @param request ListTagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListTagResourcesResponse
 */
async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You must specify at least one of the following parameters or parameter pairs in a request to determine a query object:
  * *   `ResourceId.N`
  * *   `Tag.N` parameter pair (`Tag.N.Key` and `Tag.N.Value`)
  * *   `TagFilter.N`
  * If one of the following sets of request parameters is specified as filter conditions, only ECS resources that meet all of the specified filter conditions are returned:
  * *   Set 1: `Tag.N.Key, Tag.N.Value`, and `ResourceId.N`
  * *   Set 2: `TagFilter.N.TagKey, TagFilter.N.TagValues.N`, and `ResourceId.N`
  *
  * @param request ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAutoProvisioningGroupRequest {
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId', description='The auto-provisioning group ID.', example='apg-bp67acfmxazb4ph****'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName', description='The name of the auto-provisioning group. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://.[ It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)', example='apg-test'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType', description='The type of supplemental instances. When the sum of the PayAsYouGoTargetCapacity and SpotTargetCapacity values is smaller than the TotalTargetCapacity value, the auto-provisioning group creates instances of the specified type to meet the target capacity. Valid values:

*   PayAsYouGo: pay-as-you-go instances
*   Spot: preemptible instances', example='Spot'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy', description='Specifies whether to release the removed instances when the real-time capacity of the auto-provisioning group exceeds the target capacity and a scale-in event is triggered. Valid values:

*   termination: releases the removed instances.
*   no-termination: removes the instances from the auto-provisioning group but does not release them.', example='no-termination'),
  launchTemplateConfig?: [ 
    {
      instanceType?: string(name='InstanceType', description='The instance type in extended configuration N. Valid values of N: 1 to 20. For more information about the valid values of this parameter, see [Instance families](~~25378~~).', example='ecs.g5.large'),
      maxPrice?: double(name='MaxPrice', description='The maximum price of preemptible instances in extended configuration N.', example='3'),
      priority?: int32(name='Priority', description='The priority of extended configuration N. A value of 0 indicates the highest priority. The value must be greater than 0.', example='1'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch in extended configuration N. The zone of the instances created from the extended configuration is determined by the vSwitch.', example='vsw-sn5bsitu4lfzgc5o7****'),
      weightedCapacity?: double(name='WeightedCapacity', description='The weight of the instance type specified in the extended configuration. A greater weight indicates that a single instance has more computing power and fewer instances are required. The value must be greater than 0.

The weight is calculated based on the computing power of the instance type and the minimum computing power of a single instance in the cluster that can created by the auto-provisioning group. For example, assume that the minimum computing power of a single instance is 8 vCPUs and 60 GiB of memory.

*   For an instance type with 8 vCPUs and 60 GiB of memory, you can set the weight to 1.
*   For an instance type with 16 vCPUs and 120 GiB of memory, you can set the weight to 2.', example='2'),
    }
  ](name='LaunchTemplateConfig', description='The extended configurations of the launch template.'),
  maxSpotPrice?: float(name='MaxSpotPrice', description='The maximum price of preemptible instances in the auto-provisioning group.

> When both the MaxSpotPrice and LaunchTemplateConfig.N.MaxPrice parameters are specified, the smaller one of the two parameter values is used. The LaunchTemplateConfig.N.MaxPrice parameter is specified when the auto-provisioning group is created, and cannot be modified.', example='0.5'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity', description='The target capacity of pay-as-you-go instances in the auto-provisioning group. Valid values: Set this parameter to a value smaller than the TotalTargetCapacity value.', example='30'),
  regionId?: string(name='RegionId', description='The region ID of the auto-provisioning group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  spotTargetCapacity?: string(name='SpotTargetCapacity', description='The target capacity of preemptible instances in the auto-provisioning group. Valid values: Set this parameter to a value smaller than the TotalTargetCapacity value.', example='30'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration', description='Specifies whether to release instances that are located in the auto-provisioning group after the group expires. Valid values:

*   true: releases instances that are located in the auto-provisioning group.
*   false: removes instances from the auto-provisioning group but does not release them.', example='false'),
  totalTargetCapacity?: string(name='TotalTargetCapacity', description='The total target capacity of the auto-provisioning group. The value must be a positive integer.

The total target capacity of the auto-provisioning group must be greater than or equal to the sum of the target capacity of pay-as-you-go instances specified by the PayAsYouGoTargetCapacity parameter as well as the target capacity of preemptible instances specified by the SpotTargetCapacity parameter.', example='70'),
}

model ModifyAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B48A12CD-1295-4A38-A8F0-0E92C937****'),
}

model ModifyAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoProvisioningGroupResponseBody(name='body'),
}

/**
  * Before you call this operation, take note of the following items:
  * *   If you modify the capacity or capacity-related settings of an auto-provisioning group, the group executes a scheduling task after the group is modified.
  * *   You cannot modify an auto-provisioning group when the group is being deleted.
  *
  * @param request ModifyAutoProvisioningGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyAutoProvisioningGroupResponse
 */
async function modifyAutoProvisioningGroupWithOptions(request: ModifyAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): ModifyAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoProvisioningGroupId)) {
    query['AutoProvisioningGroupId'] = request.autoProvisioningGroupId;
  }
  if (!Util.isUnset(request.autoProvisioningGroupName)) {
    query['AutoProvisioningGroupName'] = request.autoProvisioningGroupName;
  }
  if (!Util.isUnset(request.defaultTargetCapacityType)) {
    query['DefaultTargetCapacityType'] = request.defaultTargetCapacityType;
  }
  if (!Util.isUnset(request.excessCapacityTerminationPolicy)) {
    query['ExcessCapacityTerminationPolicy'] = request.excessCapacityTerminationPolicy;
  }
  if (!Util.isUnset(request.launchTemplateConfig)) {
    query['LaunchTemplateConfig'] = request.launchTemplateConfig;
  }
  if (!Util.isUnset(request.maxSpotPrice)) {
    query['MaxSpotPrice'] = request.maxSpotPrice;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payAsYouGoTargetCapacity)) {
    query['PayAsYouGoTargetCapacity'] = request.payAsYouGoTargetCapacity;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.spotTargetCapacity)) {
    query['SpotTargetCapacity'] = request.spotTargetCapacity;
  }
  if (!Util.isUnset(request.terminateInstancesWithExpiration)) {
    query['TerminateInstancesWithExpiration'] = request.terminateInstancesWithExpiration;
  }
  if (!Util.isUnset(request.totalTargetCapacity)) {
    query['TotalTargetCapacity'] = request.totalTargetCapacity;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoProvisioningGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, take note of the following items:
  * *   If you modify the capacity or capacity-related settings of an auto-provisioning group, the group executes a scheduling task after the group is modified.
  * *   You cannot modify an auto-provisioning group when the group is being deleted.
  *
  * @param request ModifyAutoProvisioningGroupRequest
  * @return ModifyAutoProvisioningGroupResponse
 */
async function modifyAutoProvisioningGroup(request: ModifyAutoProvisioningGroupRequest): ModifyAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoProvisioningGroupWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  dataDiskPolicyEnabled?: boolean(name='DataDiskPolicyEnabled'),
  dataDiskPolicyRetentionDays?: int32(name='DataDiskPolicyRetentionDays'),
  dataDiskPolicyRetentionLastWeek?: boolean(name='DataDiskPolicyRetentionLastWeek'),
  dataDiskPolicyTimePeriod?: int32(name='DataDiskPolicyTimePeriod'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  systemDiskPolicyEnabled?: boolean(name='SystemDiskPolicyEnabled'),
  systemDiskPolicyRetentionDays?: int32(name='SystemDiskPolicyRetentionDays'),
  systemDiskPolicyRetentionLastWeek?: boolean(name='SystemDiskPolicyRetentionLastWeek'),
  systemDiskPolicyTimePeriod?: int32(name='SystemDiskPolicyTimePeriod'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyAutoSnapshotPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyAutoSnapshotPolicyResponse
 */
// Deprecated
async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataDiskPolicyEnabled)) {
    query['DataDiskPolicyEnabled'] = request.dataDiskPolicyEnabled;
  }
  if (!Util.isUnset(request.dataDiskPolicyRetentionDays)) {
    query['DataDiskPolicyRetentionDays'] = request.dataDiskPolicyRetentionDays;
  }
  if (!Util.isUnset(request.dataDiskPolicyRetentionLastWeek)) {
    query['DataDiskPolicyRetentionLastWeek'] = request.dataDiskPolicyRetentionLastWeek;
  }
  if (!Util.isUnset(request.dataDiskPolicyTimePeriod)) {
    query['DataDiskPolicyTimePeriod'] = request.dataDiskPolicyTimePeriod;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDiskPolicyEnabled)) {
    query['SystemDiskPolicyEnabled'] = request.systemDiskPolicyEnabled;
  }
  if (!Util.isUnset(request.systemDiskPolicyRetentionDays)) {
    query['SystemDiskPolicyRetentionDays'] = request.systemDiskPolicyRetentionDays;
  }
  if (!Util.isUnset(request.systemDiskPolicyRetentionLastWeek)) {
    query['SystemDiskPolicyRetentionLastWeek'] = request.systemDiskPolicyRetentionLastWeek;
  }
  if (!Util.isUnset(request.systemDiskPolicyTimePeriod)) {
    query['SystemDiskPolicyTimePeriod'] = request.systemDiskPolicyTimePeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoSnapshotPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyAutoSnapshotPolicyRequest
  * @return ModifyAutoSnapshotPolicyResponse
 */
// Deprecated
async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyExRequest {
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays', description='The ID of the request.', example='30'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy', description='The destination region to which to copy the snapshot. You can specify only a single destination region.', example='false'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  targetCopyRegions?: string(name='TargetCopyRegions', description='The retention period of the snapshot copy in the destination region. Unit: days. Valid values:

*   \\-1: The snapshot is permanently retained.
*   1 to 65535: The automatic snapshot is retained for the specified number of days.

Default value: -1.', example='["cn-hangzhou"]'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId', description='The name of the automatic snapshot policy. If this parameter is not specified, the original name of the automatic snapshot policy is retained.', example='sp-bp12m37ccmxvbmi5****'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName', description='The points in time of the day at which to create automatic snapshots. The time must be in UTC+8. Unit: hours. Valid values are 0 to 23, which correspond to the 24 points in time on the hour from 00:00:00 to 23:00:00. For example, a value of 1 indicates 01:00:00.

To schedule multiple automatic snapshots to be created in a day, you can specify multiple hours.

*   You can specify up to 24 points in time.
*   You must set this parameter to a JSON array such as `["0", "1", ... "23"]`. Separate the points in time with commas (,).', example='SPTestName'),
  regionId?: string(name='regionId', description='The ID of the automatic snapshot policy. You can call the [DescribeAutoSnapshotPolicyEx](~~25530~~) operation to query available automatic snapshot policies.', example='cn-hangzhou'),
  repeatWeekdays?: string(name='repeatWeekdays', description='The retention period of the automatic snapshot. Unit: days. Valid values:

*   \\-1: The automatic snapshot is permanently retained.
*   1 to 65536: The auto snapshot is retained for the specified number of days.

Default value: -1.', example='["1", "7"]'),
  retentionDays?: int32(name='retentionDays', description='Specifies whether to enable cross-region replication for the automatic snapshot.

*   true: enables cross-region replication for the automatic snapshot.
*   false: disables cross-region replication for the automatic snapshot.', example='30'),
  timePoints?: string(name='timePoints', description='The days of the week on which to create automatic snapshots. Valid values are 1 to 7, which correspond to the days of the week. For example, a value of 1 indicates Monday.

To schedule multiple automatic snapshots to be created in a week, you can specify multiple days.

*   You can specify up to seven days over a one-week period.
*   You must set this parameter to a JSON array such as `["1", "2" ... "7"]`. Separate the values in the array with commas (,).', example='["0", "1"]'),
}

model ModifyAutoSnapshotPolicyExResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAutoSnapshotPolicyExResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyExWithOptions(request: ModifyAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.copiedSnapshotsRetentionDays)) {
    query['CopiedSnapshotsRetentionDays'] = request.copiedSnapshotsRetentionDays;
  }
  if (!Util.isUnset(request.enableCrossRegionCopy)) {
    query['EnableCrossRegionCopy'] = request.enableCrossRegionCopy;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.targetCopyRegions)) {
    query['TargetCopyRegions'] = request.targetCopyRegions;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyId)) {
    query['autoSnapshotPolicyId'] = request.autoSnapshotPolicyId;
  }
  if (!Util.isUnset(request.autoSnapshotPolicyName)) {
    query['autoSnapshotPolicyName'] = request.autoSnapshotPolicyName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['regionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeatWeekdays)) {
    query['repeatWeekdays'] = request.repeatWeekdays;
  }
  if (!Util.isUnset(request.retentionDays)) {
    query['retentionDays'] = request.retentionDays;
  }
  if (!Util.isUnset(request.timePoints)) {
    query['timePoints'] = request.timePoints;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAutoSnapshotPolicyEx',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAutoSnapshotPolicyEx(request: ModifyAutoSnapshotPolicyExRequest): ModifyAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyExWithOptions(request, runtime);
}

model ModifyBandwidthPackageSpecRequest {
  bandwidth?: string(name='Bandwidth'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyBandwidthPackageSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyBandwidthPackageSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyBandwidthPackageSpecResponse
 */
// Deprecated
async function modifyBandwidthPackageSpecWithOptions(request: ModifyBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBandwidthPackageSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyBandwidthPackageSpecRequest
  * @return ModifyBandwidthPackageSpecResponse
 */
// Deprecated
async function modifyBandwidthPackageSpec(request: ModifyBandwidthPackageSpecRequest): ModifyBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBandwidthPackageSpecWithOptions(request, runtime);
}

model ModifyCapacityReservationRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The capacity reservation ID.', example='crp-bp67acfmxazb4****'),
    name?: string(name='Name', description='The name of the capacity reservation. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='eapTestName'),
  }(name='PrivatePoolOptions'),
  description?: string(name='Description', description='The description of the capacity reservation. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='This is description.'),
  endTime?: string(name='EndTime', description='The expiration time of the capacity reservation. This parameter takes effect only when `EndTimeType` is set to Limited. Specify the time in the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC. For more information, see [ISO 8601](~~25696~~).', example='2021-10-30T06:32:00Z'),
  endTimeType?: string(name='EndTimeType', description='The release mode of the capacity reservation. Valid values:

*   Limited: The capacity reservation is automatically released at the specified point in time. If you configure this parameter, you must also configure `EndTime`.
*   Unlimited: The capacity reservation must be manually released. You can release it anytime.', example='Unlimited'),
  instanceAmount?: int32(name='InstanceAmount', description='The total number of instances for which capacity is reserved. Valid values: the number of used instances to 1000.

> When you increase the number of instances, the increase may fail due to insufficient resources.', example='100'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  platform?: string(name='Platform', description='The operating system of the image used by the instance. Valid values:

*   Windows
*   Linux

> This parameter is unavailable.', example='Linux'),
  regionId?: string(name='RegionId', description='The region ID of the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The mode in which the capacity reservation takes effect. Only immediate capacity reservations are supported. You do not need to specify a value for this parameter.

> If you do not specify a value for this parameter, the capacity reservation immediately takes effect.', example='Now'),
}

model ModifyCapacityReservationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8455DD10-84F8-43C9-8365-5F448EB169B6'),
}

model ModifyCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCapacityReservationResponseBody(name='body'),
}

async function modifyCapacityReservationWithOptions(request: ModifyCapacityReservationRequest, runtime: Util.RuntimeOptions): ModifyCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.endTimeType)) {
    query['EndTimeType'] = request.endTimeType;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCapacityReservation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCapacityReservation(request: ModifyCapacityReservationRequest): ModifyCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCapacityReservationWithOptions(request, runtime);
}

model ModifyCommandRequest {
  commandContent?: string(name='CommandContent', description='The command content. The command content can be plaintext or Base64-encoded. Take note of the following items:

*   The Base64-encoded command content can be up to 16 KB in size.

*   If the command content is Base64-encoded, set `ContentEncoding` to Base64.

*   If you set `EnableParameter` to true, the custom parameter feature is enabled and you can specify custom parameters based on the following rules:

    *   Specify custom parameters in the `{{}}` format. When parameter names are enclosed in `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   You can specify up to 20 custom parameters.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is not case-sensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.', example='echo'),
  commandId?: string(name='CommandId', description='The command ID. You can call the [DescribeCommands](~~64843~~) operation to query all available command IDs.', example='c-hz01272yr52****'),
  description?: string(name='Description', description='The command description. The description supports all character sets and can be up to 512 characters in length.', example='This is description.'),
  name?: string(name='Name', description='The command name. The name supports all character sets and can be up to 128 characters in length.', example='test-CommandName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  timeout?: long(name='Timeout', description='The maximum timeout period for the command to be run on the instance. Unit: seconds. When a command cannot run within the specified time range, the command times out. Then, the command process is forcibly terminated by canceling the process ID (PID) of the command.', example='120'),
  workingDir?: string(name='WorkingDir', description='The working directory of the command.', example='/home/'),
}

model ModifyCommandResponseBody = {
  requestId?: string(name='RequestId', example='0DE9B41E-EF0D-40A0-BB43-37749C5BDA9C'),
}

model ModifyCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCommandResponseBody(name='body'),
}

/**
  * You can modify a command when it is run. After the command is modified, the new command content applies to subsequent executions.
  * You cannot modify the command type. For example, you cannot change a shell command (RunShellScript) to a batch command (RunBatScript).
  *
  * @param request ModifyCommandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyCommandResponse
 */
async function modifyCommandWithOptions(request: ModifyCommandRequest, runtime: Util.RuntimeOptions): ModifyCommandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.commandId)) {
    query['CommandId'] = request.commandId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.workingDir)) {
    query['WorkingDir'] = request.workingDir;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCommand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can modify a command when it is run. After the command is modified, the new command content applies to subsequent executions.
  * You cannot modify the command type. For example, you cannot change a shell command (RunShellScript) to a batch command (RunBatScript).
  *
  * @param request ModifyCommandRequest
  * @return ModifyCommandResponse
 */
async function modifyCommand(request: ModifyCommandRequest): ModifyCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommandWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout', description='The timeout period for a UDP session between a Server Load Balancer (SLB) instance and the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
    udpTimeout?: int32(name='UdpTimeout', description='The timeout period for a UDP session between a user and an Alibaba Cloud service on the dedicated host. Unit: seconds. Valid values: 15 to 310.', example='60'),
  }(name='NetworkAttributes'),
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The policy for migrating the instances deployed on the dedicated host when the dedicated host fails or needs to be repaired online. Valid values:

*   Migrate: The instances are migrated to another physical machine and then restarted.
*   Stop: The instances are stopped. If the dedicated host cannot be repaired, the instances are migrated to another physical machine and then restarted.

If the dedicated host has cloud disks attached, the default value is Migrate.

If the dedicated host has local disks attached, the default value is Stop.', example='Migrate'),
  autoPlacement?: string(name='AutoPlacement', description='Specifies whether to add the dedicated host to the resource pool for automatic deployment. If you do not specify the **DedicatedHostId** parameter when you create an instance on a dedicated host, Alibaba Cloud automatically selects a dedicated host from the resource pool to host the instance. Valid values:

*   on: adds the dedicated host to the resource pool for automatic deployment.
*   off: does not add the dedicated host to the resource pool for automatic deployment.

For information about automatic deployment, see [Features](~~118938~~).', example='on'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio', description='The CPU overcommit ratio. You can configure CPU overcommit ratios only for the following dedicated host types: g6s, c6s, and r6s. Valid values: 1 to 5.

The CPU overcommit ratio affects the number of available vCPUs on a dedicated host. You can use the following formula to calculate the number of available vCPUs on a dedicated host: Number of available vCPUs = Number of physical CPU cores × 2 × CPU overcommit ratio. For example, the number of physical CPU cores on each g6s dedicated host is 52. If you change the CPU overcommit ratio of a g6s dedicated host to 4, the number of available vCPUs on the dedicated host is 416. For scenarios that have minimal requirements for CPU stability or where CPU load is not heavy, such as development and test environments, you can increase the number of available vCPUs on a dedicated host by increasing the CPU overcommit ratio. This way, you can deploy more ECS instances of the same specifications on the dedicated host and reduce the unit deployment cost.', example='1'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster to which the dedicated host belongs.', example='dc-bp165p6xk2tlw61e****'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
  dedicatedHostName?: string(name='DedicatedHostName', description='The name of the dedicated host. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. The name can contain digits, letters, colons (:), underscores (\\_), and hyphens (-).', example='testDedicatedHostName'),
  description?: string(name='Description', description='The description of the dedicated host. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='testDescription'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

/**
  * ## Description
  * *   All the Elastic Compute Service (ECS) instances that are hosted on a dedicated host must be in the Stopped (`Stopped`) state before you can modify the CPU overcommit ratio of the dedicated host.
  * *   Modifications to the CPU overcommit ratio of a dedicated host do not affect the operation of the dedicated host. After the CPU overcommit ratio is modified, the number of allocated vCPUs on the dedicated host cannot exceed the new total number of vCPUs. Otherwise, ECS instances that use the excess vCPUs cannot start.
  *
  * @param request ModifyDedicatedHostAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDedicatedHostAttributeResponse
 */
async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.autoPlacement)) {
    query['AutoPlacement'] = request.autoPlacement;
  }
  if (!Util.isUnset(request.cpuOverCommitRatio)) {
    query['CpuOverCommitRatio'] = request.cpuOverCommitRatio;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.dedicatedHostName)) {
    query['DedicatedHostName'] = request.dedicatedHostName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.networkAttributes)) {
    query['NetworkAttributes'] = request.networkAttributes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   All the Elastic Compute Service (ECS) instances that are hosted on a dedicated host must be in the Stopped (`Stopped`) state before you can modify the CPU overcommit ratio of the dedicated host.
  * *   Modifications to the CPU overcommit ratio of a dedicated host do not affect the operation of the dedicated host. After the CPU overcommit ratio is modified, the number of allocated vCPUs on the dedicated host cannot exceed the new total number of vCPUs. Otherwise, ECS instances that use the excess vCPUs cannot start.
  *
  * @param request ModifyDedicatedHostAttributeRequest
  * @return ModifyDedicatedHostAttributeResponse
 */
async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoReleaseTimeRequest {
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the dedicated host. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

*   The automatic release time must be at least 30 minutes later than the current time.
*   The automatic release time can be up to 3 years earlier than the current time.
*   If the value of the seconds (ss) is not 00, it is automatically set to 00.
*   If `AutoReleaseTime` is not configured, the automatic release feature is disabled, and the dedicated host will not be automatically released.', example='2019-06-04T13:35:00Z'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ModifyDedicatedHostAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAutoReleaseTimeResponseBody(name='body'),
}

/**
  * ## Usage notes
  * A pay-as-you-go dedicated host can be automatically released at the specified time. Before you release a pay-as-you-go dedicated host, make sure that the host is no longer required and all necessary application data is backed up.
  *
  * @param request ModifyDedicatedHostAutoReleaseTimeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDedicatedHostAutoReleaseTimeResponse
 */
async function modifyDedicatedHostAutoReleaseTimeWithOptions(request: ModifyDedicatedHostAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoReleaseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAutoReleaseTime',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * A pay-as-you-go dedicated host can be automatically released at the specified time. Before you release a pay-as-you-go dedicated host, make sure that the host is no longer required and all necessary application data is backed up.
  *
  * @param request ModifyDedicatedHostAutoReleaseTimeRequest
  * @return ModifyDedicatedHostAutoReleaseTimeResponse
 */
async function modifyDedicatedHostAutoReleaseTime(request: ModifyDedicatedHostAutoReleaseTimeRequest): ModifyDedicatedHostAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoRenewAttributeRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to automatically renew the subscription. Valid values:

*   true
*   false

Default value: false', example='false'),
  autoRenewWithEcs?: string(name='AutoRenewWithEcs', description='Specifies whether to automatically renew the subscription dedicated hosts along with the subscription ECS instances hosted on the dedicated hosts.

If auto-renewal is enabled for the subscription ECS instances hosted on the subscription dedicated hosts, you can specify this parameter to automatically renew the dedicated hosts along with the subscription ECS instances. When the subscription ECS instances hosted on your dedicated hosts are automatically renewed, the subscription dedicated hosts are also automatically renewed if the expiration time of the dedicated hosts is earlier than the expiration time of the renewed instances. Take note of the following items:

When the subscription dedicated hosts are configured to be automatically renewed along with the subscription ECS instances hosted on the dedicated hosts, the system checks the expiration time of the renewed instances and selects a minimum renewal duration for the dedicated hosts so that the dedicated hosts are renewed by a duration that ends later than the expiration time of the renewed instances. For more information about supported renewal durations, see the descriptions of the `PeriodUnit` and `Duration` parameters.

For example, assume that a dedicated host expires on January 15 of the current year. Subscription ECS instances hosted on the dedicated host are configured to be automatically renewed to November 15 of the same year. The expiration time of the dedicated host is earlier than the expiration time of the ECS instances by 10 months. In this case, the system selects a renewal duration of 12 months (a minimum duration calculated based on a `Duration` value of 12 and a `PeriodUnit` value of Month) for the dedicated host. This ensures that the dedicated host expires later than the ECS instances.

Valid values:

*   AutoRenewWithEcs: automatically renews the subscription dedicated hosts along with the subscription ECS instances hosted on the dedicated hosts.
*   StopRenewWithEcs: does not automatically renew the subscription dedicated hosts along with the subscription ECS instances hosted on the dedicated hosts.
*   NoOperation: does not change the current settings for the dedicated hosts.

> If you set this parameter to AutoRenewWithEcs, make sure that `AutoRenew` is set to true to enable auto-renewal for the dedicated hosts. Otherwise, the subscription dedicated hosts are not automatically renewed along with the subscription ECS instances hosted on the dedicated hosts.

Default value: NoOperation.', example='StopRenewWithEcs'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The IDs of dedicated hosts. You can specify up to 100 subscription dedicated host IDs. Separate the IDs with commas (,).', example='dh-bp165p6xk2tlw61e****'),
  duration?: int32(name='Duration', description='The renewal duration.

*   Valid values when PeriodUnit is set to Month: 1 and 12
*   Valid values when PeriodUnit is set to Year: 1 and 12', example='1'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Valid values:

*   Month
*   Year

Default value: Month', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host.', example='cn-hangzhou'),
  renewalStatus?: string(name='RenewalStatus', description='Specifies whether to automatically renew the subscription dedicated host. The `RenewalStatus` parameter takes precedence over the `AutoRenew` parameter. Valid values:

*   AutoRenewal: The dedicated hosts are automatically renewed.
*   Normal: The dedicated hosts are not automatically renewed, and renewal notifications are sent.
*   NotRenewal: The dedicated hosts are not automatically renewed, and no expiration notification is sent. A notification of no renewal is automatically sent three days before the end of the current subscription cycle. You can change the value of this parameter from NotRenewal to Normal and manually renew the dedicated hosts by calling the [RenewDedicatedHosts](~~134250~~) operation. Alternatively, you can renew the dedicated hosts by setting this parameter to AutoRenewal.', example='Normal'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model ModifyDedicatedHostAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAutoRenewAttributeResponseBody(name='body'),
}

/**
  * *   If you enable auto-renewal for your subscription dedicated host, the system attempts to deduct the renewal payment at 08:00:00 (UTC+8) nine days before the dedicated host expires to renew the dedicated host. If this deduction attempt fails, the system attempt to deduct the payment at the same point in time the next day. The system attempts to deduct the payment once every day until the dedicated host expires or until the payment is deducted. Make sure that your account balance is sufficient.
  * *   Subscription dedicated hosts can be automatically renewed along with the subscription Elastic Compute Service (ECS) instances hosted on the dedicated hosts. For more information, see the description of the AutoRenewWithEcs parameter.
  *
  * @param request ModifyDedicatedHostAutoRenewAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDedicatedHostAutoRenewAttributeResponse
 */
async function modifyDedicatedHostAutoRenewAttributeWithOptions(request: ModifyDedicatedHostAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewWithEcs)) {
    query['AutoRenewWithEcs'] = request.autoRenewWithEcs;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAutoRenewAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If you enable auto-renewal for your subscription dedicated host, the system attempts to deduct the renewal payment at 08:00:00 (UTC+8) nine days before the dedicated host expires to renew the dedicated host. If this deduction attempt fails, the system attempt to deduct the payment at the same point in time the next day. The system attempts to deduct the payment once every day until the dedicated host expires or until the payment is deducted. Make sure that your account balance is sufficient.
  * *   Subscription dedicated hosts can be automatically renewed along with the subscription Elastic Compute Service (ECS) instances hosted on the dedicated hosts. For more information, see the description of the AutoRenewWithEcs parameter.
  *
  * @param request ModifyDedicatedHostAutoRenewAttributeRequest
  * @return ModifyDedicatedHostAutoRenewAttributeResponse
 */
async function modifyDedicatedHostAutoRenewAttribute(request: ModifyDedicatedHostAutoRenewAttributeRequest): ModifyDedicatedHostAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostClusterAttributeRequest {
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The description of the dedicated host cluster. It must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='dc-bp12wlf6am0vz9v2****'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName', description='The ID of the request.', example='newClusterName'),
  description?: string(name='Description', example='newClusterDescription'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The new name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). It must start with a letter. It cannot contain `http://` or `https://`.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', example='11B55F58-D3A4-4A9B-9596-342420D02FF8'),
}

model ModifyDedicatedHostClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostClusterAttributeWithOptions(request: ModifyDedicatedHostClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostClusterName)) {
    query['DedicatedHostClusterName'] = request.dedicatedHostClusterName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostClusterAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostClusterAttribute(request: ModifyDedicatedHostClusterAttributeRequest): ModifyDedicatedHostClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClusterAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostsChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   true: The payment is automatically completed. Make sure that your account balance is sufficient. Otherwise, your order becomes invalid and will be canceled.
*   false: An order is generated but no payment is made.

Default value: true.

> If you do not have sufficient balance in your account, you can set `AutoPay` to `false` to generate an unpaid order. Then, you can pay for the order.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The `token` can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='e4567-e89b-12d3-a456-426655440000'),
  dedicatedHostChargeType?: string(name='DedicatedHostChargeType', description='The new billing method of the dedicated hosts. Valid values:

*   PrePaid: changes the billing method from pay-as-you-go to subscription.
*   PostPaid: changes the billing method from subscription to pay-as-you-go.

Default value: PrePaid.', example='PrePaid'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The IDs of the dedicated hosts. The value can be a JSON array that consists of up to 20 dedicated host IDs. Separate the IDs with commas (,).', example='["dh-bp181e5064b5sotr****","dh-bp18064b5sotrr9c****"]'),
  detailFee?: boolean(name='DetailFee', description='Specifies whether to return the billing details of the order when the billing method is changed from subscription to pay-as-you-go.

Default value: false.', example='false'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks your AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The renewal duration of the subscription dedicated hosts. Valid values:

*   If you set `PeriodUnit` to Week, valid values of `Period` are 1, 2, 3, and 4.
*   If you set `PeriodUnit` to Month, valid values of `Period` are 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by `Period`. Valid values:

*   Week
*   Month

Default value: Month.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated hosts. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostsChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      currency?: string(name='Currency', description='The unit of currency for the bill.

Alibaba Cloud China site (aliyun.com): CNY

Alibaba Cloud International site (alibabacloud.com): USD', example='CNY'),
      fee?: string(name='Fee', description='The charged amount.', example='0'),
      instanceId?: string(name='InstanceId', description='The IDs of the dedicated hosts.', example='dh-bp181e5064b5sotrr****'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances', description='Details about the charges for the order.'),
  orderId?: string(name='OrderId', description='The order ID.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model ModifyDedicatedHostsChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostsChargeTypeResponseBody(name='body'),
}

async function modifyDedicatedHostsChargeTypeWithOptions(request: ModifyDedicatedHostsChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostsChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostChargeType)) {
    query['DedicatedHostChargeType'] = request.dedicatedHostChargeType;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.detailFee)) {
    query['DetailFee'] = request.detailFee;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostsChargeType',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostsChargeType(request: ModifyDedicatedHostsChargeTypeRequest): ModifyDedicatedHostsChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostsChargeTypeWithOptions(request, runtime);
}

model ModifyDemandRequest {
  amount?: int32(name='Amount', description='The number of instances. Valid values: 1 to 100000.', example='1'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  demandDescription?: string(name='DemandDescription', description='The description of the demand. The description must be 2 to 256 characters in length. It cannot start with http:// or https://.', example='testDemandDescription'),
  demandId?: string(name='DemandId', description='The ID of the demand that you want to modify.', example='ed-bp11n21kq00sl71p****'),
  demandName?: string(name='DemandName', description='The name of the demand. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with [http:// or https://](http://https://). It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).

The default value is the instance type name.', example='testDemandName'),
  endTime?: string(name='EndTime', description='The end time of the subscription period. Specify the time in the [ISO 8601](~~25696~~)standard in the yyyy-MM-dd HH:mm:ss format. The time must be in UTC.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the minute (mm).

The value of EndTime must be later than the value of StartTime.

in most cases, the interval between StartTime and EndTime cannot be more than 10 days.', example='2019-12-10 12:05:00'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid (default): pay-as-you-go', example='PrePaid'),
  instanceType?: string(name='InstanceType', description='The instance type. For more information, see [Instance families](~~25378~~). You can also call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of the specified instance type. To learn how to select instance types, see [Select instance types](~~58291~~).', example='ecs.c6.large'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The subscription period of the resource. Unit: month. You must specify this parameter. This parameter is valid only if you set `InstanceChargeType` to PrePaid. Valid values:

*   Valid values when PeriodUnit is set to Week: 1, 2, 3, and 4.
*   Valid values when PeriodUnit is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period of the resource. Valid values:

*   Day
*   Week
*   Month. This is the default value.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The start time of the subscription period. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-dd HH:mm:ss format. The time must be in UTC.

If the value of seconds (ss) is not 00, the time is automatically set to the beginning of the minute (mm).

The value of EndTime must be later than the value of StartTime.

In most cases, the interval between StartTime and EndTime cannot be more than 10 days.', example='2019-12-01 12:05:00'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

This parameter is empty by default. If you leave this parameter empty, the system randomly selects a zone.', example='cn-hangzhou-g'),
}

model ModifyDemandResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyDemandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDemandResponseBody(name='body'),
}

/**
  * You can call this operation to modify the demand information of instance types. Alibaba Cloud provides the requested resources based on your demand. You can file demands only for I/O optimized instance types and instances of the virtual private cloud (VPC) type. Parameters except `DemandName` and `DemandDescription` can be modified only for demands that are in the Rejected state.
  * > This operation is in invitational preview and is not publicly available.
  *
  * @param request ModifyDemandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDemandResponse
 */
async function modifyDemandWithOptions(request: ModifyDemandRequest, runtime: Util.RuntimeOptions): ModifyDemandResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.demandDescription)) {
    query['DemandDescription'] = request.demandDescription;
  }
  if (!Util.isUnset(request.demandId)) {
    query['DemandId'] = request.demandId;
  }
  if (!Util.isUnset(request.demandName)) {
    query['DemandName'] = request.demandName;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDemand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to modify the demand information of instance types. Alibaba Cloud provides the requested resources based on your demand. You can file demands only for I/O optimized instance types and instances of the virtual private cloud (VPC) type. Parameters except `DemandName` and `DemandDescription` can be modified only for demands that are in the Rejected state.
  * > This operation is in invitational preview and is not publicly available.
  *
  * @param request ModifyDemandRequest
  * @return ModifyDemandResponse
 */
async function modifyDemand(request: ModifyDemandRequest): ModifyDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDemandWithOptions(request, runtime);
}

model ModifyDeploymentSetAttributeRequest {
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set.', example='ds-bp1frxuzdg87zh4p****'),
  deploymentSetName?: string(name='DeploymentSetName', description='The new name of the deployment set. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='DeploymentSetTestName'),
  description?: string(name='Description', description='The new description of the deployment set. The description must be 2 to 256 characters in length and cannot start with http:// or https://.', example='TestDescription'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the deployment set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
}

model ModifyDeploymentSetAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyDeploymentSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDeploymentSetAttributeResponseBody(name='body'),
}

async function modifyDeploymentSetAttributeWithOptions(request: ModifyDeploymentSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyDeploymentSetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.deploymentSetName)) {
    query['DeploymentSetName'] = request.deploymentSetName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDeploymentSetAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDeploymentSetAttribute(request: ModifyDeploymentSetAttributeRequest): ModifyDeploymentSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeploymentSetAttributeWithOptions(request, runtime);
}

model ModifyDiagnosticMetricSetRequest {
  description?: string(name='Description', description='The new description of the diagnostic metric set.', example='connection diagnostics'),
  metricIds?: [ string ](name='MetricIds', description='The ID of diagnostic metric N.'),
  metricSetId?: string(name='MetricSetId', description='The ID of the diagnostic metric set.', example='dms-uf6i0tv2refv8wz*****'),
  metricSetName?: string(name='MetricSetName', description='The new name of the diagnostic metric set.', example='remoteConnectError'),
  regionId?: string(name='RegionId', description='The region ID of the diagnostic metric set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The type of the resource.', example='instance'),
}

model ModifyDiagnosticMetricSetResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE*****'),
}

model ModifyDiagnosticMetricSetResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiagnosticMetricSetResponseBody(name='body'),
}

async function modifyDiagnosticMetricSetWithOptions(request: ModifyDiagnosticMetricSetRequest, runtime: Util.RuntimeOptions): ModifyDiagnosticMetricSetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.metricIds)) {
    query['MetricIds'] = request.metricIds;
  }
  if (!Util.isUnset(request.metricSetId)) {
    query['MetricSetId'] = request.metricSetId;
  }
  if (!Util.isUnset(request.metricSetName)) {
    query['MetricSetName'] = request.metricSetName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiagnosticMetricSet',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiagnosticMetricSet(request: ModifyDiagnosticMetricSetRequest): ModifyDiagnosticMetricSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiagnosticMetricSetWithOptions(request, runtime);
}

model ModifyDiskAttributeRequest {
  burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the performance burst feature for data disk N. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.', example='false'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot', description='Specifies whether to delete the automatic snapshots of the disk when the disk is released. This parameter is empty by default, which indicates that the current value remains unchanged.', example='false'),
  deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release the disk along with its associated instance. This parameter is empty by default, which indicates that the current value remains unchanged.

An error is returned if you set `DeleteWithInstance` to `false` in one of the following cases:

*   The disk is a local disk.
*   The disk is a basic disk and is not removable. If the Portable attribute of a disk is set to false, the disk is not removable.', example='false'),
  description?: string(name='Description', description='The description of the disk. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.', example='TestDescription'),
  diskId?: string(name='DiskId', description='The ID of the disk.

> You can specify the `DiskId` parameter or the `DiskIds.N` parameter, but you cannot specify both parameters at the same time.', example='d-bp1famypsnar20bv****'),
  diskIds?: [ string ](name='DiskIds', description='The ID of disk N. Valid values of N: 0 to 100.

> You can specify the `DiskId` parameter or the `DiskIds.N` parameter, but you cannot specify both parameters at the same time.', example='d-bp1famypsnar20bv****'),
  diskName?: string(name='DiskName', description='The name of the disk. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='MyDiskName'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot', description='Specifies whether to enable the automatic snapshot policy feature for the cloud disk.

*   true: enables the automatic snapshot policy feature for the cloud disk.
*   false: disables the automatic snapshot policy feature for the cloud disk.

This parameter is empty by default, which indicates that the current value remains unchanged.

> By default, the automatic snapshot policy feature is enabled for new disks. You need to only apply an automatic snapshot policy to a disk for the policy to take effect.', example='true'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDiskAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyDiskAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskAttributeResponseBody(name='body'),
}

/**
  * *   When you call this operation to modify the attributes of a disk, if you set the DeleteWithInstance parameter to false and the instance to which the disk is attached is locked for security reasons, the DeleteWithInstance parameter of the disk is ignored and the disk is released together with the instance. If `"LockReason" : "security"` is included in the response when you query the information about an instance, the instance is locked for security reasons.
  * *   You can use the `DiskIds.N` parameter to specify multiple disks. This way, you can modify the attributes of the disks at the same time, including names, descriptions, and whether to release the disks together with the associated instances.
  *
  * @param request ModifyDiskAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskAttributeResponse
 */
async function modifyDiskAttributeWithOptions(request: ModifyDiskAttributeRequest, runtime: Util.RuntimeOptions): ModifyDiskAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.burstingEnabled)) {
    query['BurstingEnabled'] = request.burstingEnabled;
  }
  if (!Util.isUnset(request.deleteAutoSnapshot)) {
    query['DeleteAutoSnapshot'] = request.deleteAutoSnapshot;
  }
  if (!Util.isUnset(request.deleteWithInstance)) {
    query['DeleteWithInstance'] = request.deleteWithInstance;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.diskName)) {
    query['DiskName'] = request.diskName;
  }
  if (!Util.isUnset(request.enableAutoSnapshot)) {
    query['EnableAutoSnapshot'] = request.enableAutoSnapshot;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   When you call this operation to modify the attributes of a disk, if you set the DeleteWithInstance parameter to false and the instance to which the disk is attached is locked for security reasons, the DeleteWithInstance parameter of the disk is ignored and the disk is released together with the instance. If `"LockReason" : "security"` is included in the response when you query the information about an instance, the instance is locked for security reasons.
  * *   You can use the `DiskIds.N` parameter to specify multiple disks. This way, you can modify the attributes of the disks at the same time, including names, descriptions, and whether to release the disks together with the associated instances.
  *
  * @param request ModifyDiskAttributeRequest
  * @return ModifyDiskAttributeResponse
 */
async function modifyDiskAttribute(request: ModifyDiskAttributeRequest): ModifyDiskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskAttributeWithOptions(request, runtime);
}

model ModifyDiskChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   true (default): The payment is automatically completed. Make sure that the balance in your account is sufficient. Otherwise, your order becomes invalid and is canceled.
*   false: An order is generated but no payment is made. If your account balance is insufficient, you can set the AutoPay parameter to false to generate an unpaid order. Then, you can log on to the ECS console to pay for the order.', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [Ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  diskChargeType?: string(name='DiskChargeType', description='The new billing method of the disk. Valid values:

*   PrePaid (default): changes the billing method from pay-as-you-go to subscription.
*   PostPaid: changes the billing method from subscription to pay-as-you-go.', example='PostPaid'),
  diskIds?: string(name='DiskIds', description='The disk IDs. Set this parameter to a JSON array that consists of up to 16 disk IDs. Separate the disk IDs with commas (,).', example='[“d-bp67acfmxazb4ph****”, “d-bp67acfmxazb4pi****”, … “d-bp67acfmxazb4pj****”]'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to which disks are attached.', example='i-bp1i778bq705cvx1****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDiskChargeTypeResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='1234567890'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyDiskChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskChargeTypeResponseBody(name='body'),
}

/**
  * After you change the billing method, any outstanding payments are automatically completed. Make sure that the balance in your account is sufficient. Otherwise, your order becomes invalid and is canceled. If your account balance is insufficient, you can set the AutoPay parameter to false to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com/) to pay for the order.
  * When you call this operation, take note of the following items:
  * *   You can change the billing method from subscription to pay-as-you-go for disks that are attached to a subscription instance.
  * *   You can change the billing method from pay-as-you-go to subscription for data disks that are attached to a subscription or pay-as-you-go instance.
  * *   The instance cannot be in the Stopped state due to overdue payments.
  * *   You can change the billing method of each disk up to three times. Up to three refunds can be made for the price differences for each disk.
  * *   The price difference is refunded to the payment account that you used. Vouchers that have been redeemed are not refundable.
  * *   You cannot change the billing method again within 5 minutes of a successful change.
  *
  * @param request ModifyDiskChargeTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskChargeTypeResponse
 */
async function modifyDiskChargeTypeWithOptions(request: ModifyDiskChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDiskChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskChargeType)) {
    query['DiskChargeType'] = request.diskChargeType;
  }
  if (!Util.isUnset(request.diskIds)) {
    query['DiskIds'] = request.diskIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskChargeType',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After you change the billing method, any outstanding payments are automatically completed. Make sure that the balance in your account is sufficient. Otherwise, your order becomes invalid and is canceled. If your account balance is insufficient, you can set the AutoPay parameter to false to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com/) to pay for the order.
  * When you call this operation, take note of the following items:
  * *   You can change the billing method from subscription to pay-as-you-go for disks that are attached to a subscription instance.
  * *   You can change the billing method from pay-as-you-go to subscription for data disks that are attached to a subscription or pay-as-you-go instance.
  * *   The instance cannot be in the Stopped state due to overdue payments.
  * *   You can change the billing method of each disk up to three times. Up to three refunds can be made for the price differences for each disk.
  * *   The price difference is refunded to the payment account that you used. Vouchers that have been redeemed are not refundable.
  * *   You cannot change the billing method again within 5 minutes of a successful change.
  *
  * @param request ModifyDiskChargeTypeRequest
  * @return ModifyDiskChargeTypeResponse
 */
async function modifyDiskChargeType(request: ModifyDiskChargeTypeRequest): ModifyDiskChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskChargeTypeWithOptions(request, runtime);
}

model ModifyDiskDeploymentRequest {
  diskCategory?: string(name='DiskCategory'),
  diskId?: string(name='DiskId'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceLevel?: string(name='PerformanceLevel'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageClusterId?: string(name='StorageClusterId'),
}

model ModifyDiskDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyDiskDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskDeploymentResponseBody(name='body'),
}

async function modifyDiskDeploymentWithOptions(request: ModifyDiskDeploymentRequest, runtime: Util.RuntimeOptions): ModifyDiskDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageClusterId)) {
    query['StorageClusterId'] = request.storageClusterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskDeployment',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDiskDeployment(request: ModifyDiskDeploymentRequest): ModifyDiskDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskDeploymentWithOptions(request, runtime);
}

model ModifyDiskSpecRequest {
  diskCategory?: string(name='DiskCategory', description='The new category of the disk. Valid values:

*   cloud_essd: ESSD
*   cloud_auto: ESSD AutoPL disk
*   cloud_ssd: standard SSD
*   cloud_efficiency: ultra disk

This parameter is empty by default, which indicates that the disk category is not changed.

>  The preceding values are listed in descending order of disk performance. Subscription disks cannot be downgraded.', example='cloud_essd'),
  diskId?: string(name='DiskId', description='The disk ID.', example='d-bp131n0q38u3a4zi****'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, service limits, and insufficient ECS resources. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  performanceControlOptions?: {
    IOPS?: int32(name='IOPS', description='The new IOPS of the disk. You can modify the IOPS of only disks in dedicated block storage clusters.

Valid values: 900 to maximum IOPS per disk (with an increment of 100).

For more information, see [EBS performance](~~25382~~).', example='2000'),
    recover?: string(name='Recover', description='The new IOPS and throughput of the disk. This parameter is valid only when the disk is in a dedicated block storage cluster.

After you specify this parameter, PerformanceControlOptions.IOPS and PerformanceControlOptions.Throughput do not take effect.

Set the value to All, which indicates that the IOPS and throughput of the disk is reset to the initial values.', example='All'),
    throughput?: int32(name='Throughput', description='The new throughput of the disk. You can modify the throughput of only disks in dedicated block storage clusters. Unit: MB/s.

Valid values: 60 to maximum throughput per disk.

For more information, see [EBS performance](~~25382~~).', example='200'),
  }(name='PerformanceControlOptions', description='A collection of disk performance control parameters'),
  performanceLevel?: string(name='PerformanceLevel', description='The new performance level of the ESSD. Valid values:

*   PL0: An ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: An ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: An ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: An ESSD delivers up to 1,000,000 random read/write IOPS.

Default value: PL1.', example='PL2'),
  provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

>  This parameter is available only if the DiskCategory parameter is set to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='50000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDiskSpecResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.

>  This parameter is returned only when the category of a subscription disk or the performance level of a subscription ESSD is modified.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskId?: string(name='TaskId', description='The ID of the disk category change task.

>  If you only modify the performance level of an ESSD, this parameter is not returned.', example='t-bp67acfmxazb4p****'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

/**
  * ## Usage notes
  * Take note of the following items:
  * *   To modify the performance level of an ESSD, take note of the following items:
  *     *   For a subscription ESSD, you can only upgrade its performance level.
  *     *   For a pay-as-you-go ESSD, you can upgrade or downgrade its performance level. However, you cannot downgrade the performance level to PL0.
  *     *   The ESSD must be in the **In Use** (In_Use) or **Unattached** (Available) state.
  *     *   If the ESSD is attached to an Elastic Compute Service (ECS) instance, the instance must be in the **Running** (Running) or **Stopped** (Stopped) state. The instance cannot be in the Expired state or stopped due to an overdue payment.
  *     *   If you cannot upgrade the performance level of the ESSD due to the capacity limit, resize the ESSD by calling the [ResizeDisk](~~25522~~) operation and then try again. For more information, see [ESSDs](~~122389~~).
  * *   For information about the limits on changing the category of a disk, see the "Limits" section of the [Change the category of a disk](~~161980~~) topic.
  * The new disk category or performance level takes effect immediately after this operation is performed. Alibaba Cloud calculates the bill based on the new disk category and performance level.
  *
  * @param request ModifyDiskSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskCategory)) {
    query['DiskCategory'] = request.diskCategory;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.performanceControlOptions)) {
    query['PerformanceControlOptions'] = request.performanceControlOptions;
  }
  if (!Util.isUnset(request.performanceLevel)) {
    query['PerformanceLevel'] = request.performanceLevel;
  }
  if (!Util.isUnset(request.provisionedIops)) {
    query['ProvisionedIops'] = request.provisionedIops;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * Take note of the following items:
  * *   To modify the performance level of an ESSD, take note of the following items:
  *     *   For a subscription ESSD, you can only upgrade its performance level.
  *     *   For a pay-as-you-go ESSD, you can upgrade or downgrade its performance level. However, you cannot downgrade the performance level to PL0.
  *     *   The ESSD must be in the **In Use** (In_Use) or **Unattached** (Available) state.
  *     *   If the ESSD is attached to an Elastic Compute Service (ECS) instance, the instance must be in the **Running** (Running) or **Stopped** (Stopped) state. The instance cannot be in the Expired state or stopped due to an overdue payment.
  *     *   If you cannot upgrade the performance level of the ESSD due to the capacity limit, resize the ESSD by calling the [ResizeDisk](~~25522~~) operation and then try again. For more information, see [ESSDs](~~122389~~).
  * *   For information about the limits on changing the category of a disk, see the "Limits" section of the [Change the category of a disk](~~161980~~) topic.
  * The new disk category or performance level takes effect immediately after this operation is performed. Alibaba Cloud calculates the bill based on the new disk category and performance level.
  *
  * @param request ModifyDiskSpecRequest
  * @return ModifyDiskSpecResponse
 */
async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyEipAddressAttributeRequest {
  allocationId?: string(name='AllocationId'),
  bandwidth?: string(name='Bandwidth'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyEipAddressAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyEipAddressAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyEipAddressAttributeResponse
 */
// Deprecated
async function modifyEipAddressAttributeWithOptions(request: ModifyEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyEipAddressAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['Bandwidth'] = request.bandwidth;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyEipAddressAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyEipAddressAttributeRequest
  * @return ModifyEipAddressAttributeResponse
 */
// Deprecated
async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEipAddressAttributeWithOptions(request, runtime);
}

model ModifyElasticityAssuranceRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the elasticity assurance.', example='eap-bp67acfmxazb4****'),
    name?: string(name='Name', description='The name of the elasticity assurance. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='eapTestName'),
  }(name='PrivatePoolOptions'),
  description?: string(name='Description', description='The description of the elasticity assurance. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the elasticity assurance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8455DD10-84F8-43C9-8365-5F448EB169B6'),
}

model ModifyElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyElasticityAssuranceResponseBody(name='body'),
}

async function modifyElasticityAssuranceWithOptions(request: ModifyElasticityAssuranceRequest, runtime: Util.RuntimeOptions): ModifyElasticityAssuranceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyElasticityAssurance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyElasticityAssurance(request: ModifyElasticityAssuranceRequest): ModifyElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticityAssuranceWithOptions(request, runtime);
}

model ModifyForwardEntryRequest {
  externalIp?: string(name='ExternalIp'),
  externalPort?: string(name='ExternalPort'),
  forwardEntryId?: string(name='ForwardEntryId'),
  forwardTableId?: string(name='ForwardTableId'),
  internalIp?: string(name='InternalIp'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyForwardEntryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyForwardEntryResponse
 */
// Deprecated
async function modifyForwardEntryWithOptions(request: ModifyForwardEntryRequest, runtime: Util.RuntimeOptions): ModifyForwardEntryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.externalIp)) {
    query['ExternalIp'] = request.externalIp;
  }
  if (!Util.isUnset(request.externalPort)) {
    query['ExternalPort'] = request.externalPort;
  }
  if (!Util.isUnset(request.forwardEntryId)) {
    query['ForwardEntryId'] = request.forwardEntryId;
  }
  if (!Util.isUnset(request.forwardTableId)) {
    query['ForwardTableId'] = request.forwardTableId;
  }
  if (!Util.isUnset(request.internalIp)) {
    query['InternalIp'] = request.internalIp;
  }
  if (!Util.isUnset(request.internalPort)) {
    query['InternalPort'] = request.internalPort;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyForwardEntry',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyForwardEntryRequest
  * @return ModifyForwardEntryResponse
 */
// Deprecated
async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyForwardEntryWithOptions(request, runtime);
}

model ModifyHaVipAttributeRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  haVipId?: string(name='HaVipId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHaVipAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyHaVipAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyHaVipAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyHaVipAttributeResponse
 */
// Deprecated
async function modifyHaVipAttributeWithOptions(request: ModifyHaVipAttributeRequest, runtime: Util.RuntimeOptions): ModifyHaVipAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHaVipAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyHaVipAttributeRequest
  * @return ModifyHaVipAttributeResponse
 */
// Deprecated
async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHaVipAttributeWithOptions(request, runtime);
}

model ModifyHpcClusterAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** value must contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotency](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the HPC cluster. The description must be 2 to 256 characters in length and cannot start with http:// or https://.

This parameter is empty by default.', example='testDescription'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the HPC cluster.', example='hpc-b8bq705cvx1****'),
  name?: string(name='Name', description='The name of the HPC cluster. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='testName'),
  ownerAccount?: string(name='OwnerAccount', example='EcsforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='1234567890'),
  regionId?: string(name='RegionId', description='The region ID of the HPC cluster. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='EcsforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='1234567890'),
}

model ModifyHpcClusterAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyHpcClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyHpcClusterAttributeResponseBody(name='body'),
}

async function modifyHpcClusterAttributeWithOptions(request: ModifyHpcClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyHpcClusterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHpcClusterAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHpcClusterAttribute(request: ModifyHpcClusterAttributeRequest): ModifyHpcClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHpcClusterAttributeWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  bootMode?: string(name='BootMode', example='BIOS'),
  description?: string(name='Description', example='testDescription'),
  features?: {
    nvmeSupport?: string(name='NvmeSupport', example='supported'),
  }(name='Features'),
  imageFamily?: string(name='ImageFamily', example='hangzhou-daily-update'),
  imageId?: string(name='ImageId', example='m-bp18ygjuqnwhechc****'),
  imageName?: string(name='ImageName', example='testImageName'),
  licenseType?: string(name='LicenseType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', example='Deprecated'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bootMode)) {
    query['BootMode'] = request.bootMode;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.features)) {
    query['Features'] = request.features;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.licenseType)) {
    query['LicenseType'] = request.licenseType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImageShareGroupPermissionRequest {
  addGroup?: [ string ](name='AddGroup'),
  removeGroup?: [ string ](name='RemoveGroup'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyImageShareGroupPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageShareGroupPermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageShareGroupPermissionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyImageShareGroupPermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImageShareGroupPermissionResponse
 */
// Deprecated
async function modifyImageShareGroupPermissionWithOptions(request: ModifyImageShareGroupPermissionRequest, runtime: Util.RuntimeOptions): ModifyImageShareGroupPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.addGroup)) {
    query['AddGroup'] = request.addGroup;
  }
  if (!Util.isUnset(request.removeGroup)) {
    query['RemoveGroup'] = request.removeGroup;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageShareGroupPermission',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyImageShareGroupPermissionRequest
  * @return ModifyImageShareGroupPermissionResponse
 */
// Deprecated
async function modifyImageShareGroupPermission(request: ModifyImageShareGroupPermissionRequest): ModifyImageShareGroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageShareGroupPermissionWithOptions(request, runtime);
}

model ModifyImageSharePermissionRequest {
  addAccount?: [ string ](name='AddAccount', description='The ID of Alibaba Cloud account N with which you want to share the custom image. Valid values of N: 1 to 10. If the value of N is greater than 10, this parameter is ignored.', example='1234567890'),
  imageId?: string(name='ImageId', description='The ID of the custom image.', example='m-bp18ygjuqnwhechc****'),
  isPublic?: boolean(name='IsPublic', description='Specifies whether to publish or unpublish a community image. Valid values:

*   true: publishes the custom image as a community image.
*   false: unpublishes a community image. The unpublish operation takes effect only on community images.

Default value: false.', example='false'),
  launchPermission?: string(name='LaunchPermission', description='> This parameter is in invitational preview and is not publicly available.', example='hide'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the custom image. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  removeAccount?: [ string ](name='RemoveAccount', description='The ID of Alibaba Cloud account N from which you want to unshare the custom image. Valid values of N: 1 to 10. If the value of N is greater than 10, this parameter is ignored.', example='1234567890'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyImageSharePermissionResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   You can share only your own custom images with other Alibaba Cloud accounts.
  * *   You can share a custom image with up to 10 Alibaba Cloud accounts at a time. You can specify up to 10 Alibaba Cloud account IDs by using the AddAccount.N or RemoveAccount.N parameter. If you specify more than 10 account IDs, the parameter will be ignored.
  * *   You can share a custom image with up to 50 Alibaba Cloud accounts.
  * *   After you create an instance from a shared custom image by calling the [RunInstances](~~63440~~) operation, you cannot call the [ReInitDisk](~~25519~~) operation to reinitialize the system disk of the instance if the image owner unshares the image or calls the [DeleteImage](~~25537~~) operation to delete the image.
  * When you publish or unpublish a community image, take note of the following items:
  * *   Alibaba Cloud provides only the platform on which community images can be published and managed. The owner of a community image is responsible for the quality and updates of the image. Make sure that you read and agree to the Community Image Agreement. Otherwise, you cannot publish community images. For more information, see [Publish a community image](~~208370~~)
  * *   You cannot publish encrypted images as community images.
  * *   All community images are publicly available. All Alibaba Cloud accounts that reside in the same region as a community image can access the image.
  * *   You cannot share, export, or copy community images.
  * *   After a community image is unpublished, it is no longer available to other Alibaba Cloud accounts. If a custom image is shared to other Alibaba cloud accounts before it is published as a community image, the accounts can still use the image after it is unpublished.
  *
  * @param request ModifyImageSharePermissionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyImageSharePermissionResponse
 */
async function modifyImageSharePermissionWithOptions(request: ModifyImageSharePermissionRequest, runtime: Util.RuntimeOptions): ModifyImageSharePermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addAccount)) {
    query['AddAccount'] = request.addAccount;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.isPublic)) {
    query['IsPublic'] = request.isPublic;
  }
  if (!Util.isUnset(request.launchPermission)) {
    query['LaunchPermission'] = request.launchPermission;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeAccount)) {
    query['RemoveAccount'] = request.removeAccount;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyImageSharePermission',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   You can share only your own custom images with other Alibaba Cloud accounts.
  * *   You can share a custom image with up to 10 Alibaba Cloud accounts at a time. You can specify up to 10 Alibaba Cloud account IDs by using the AddAccount.N or RemoveAccount.N parameter. If you specify more than 10 account IDs, the parameter will be ignored.
  * *   You can share a custom image with up to 50 Alibaba Cloud accounts.
  * *   After you create an instance from a shared custom image by calling the [RunInstances](~~63440~~) operation, you cannot call the [ReInitDisk](~~25519~~) operation to reinitialize the system disk of the instance if the image owner unshares the image or calls the [DeleteImage](~~25537~~) operation to delete the image.
  * When you publish or unpublish a community image, take note of the following items:
  * *   Alibaba Cloud provides only the platform on which community images can be published and managed. The owner of a community image is responsible for the quality and updates of the image. Make sure that you read and agree to the Community Image Agreement. Otherwise, you cannot publish community images. For more information, see [Publish a community image](~~208370~~)
  * *   You cannot publish encrypted images as community images.
  * *   All community images are publicly available. All Alibaba Cloud accounts that reside in the same region as a community image can access the image.
  * *   You cannot share, export, or copy community images.
  * *   After a community image is unpublished, it is no longer available to other Alibaba Cloud accounts. If a custom image is shared to other Alibaba cloud accounts before it is published as a community image, the accounts can still use the image after it is unpublished.
  *
  * @param request ModifyImageSharePermissionRequest
  * @return ModifyImageSharePermissionResponse
 */
async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageSharePermissionWithOptions(request, runtime);
}

model ModifyInstanceAttachmentAttributesRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the private pool. Set the value to the ID of the elasticity assurance or capacity reservation that generates the private pool.

*   This parameter is required when `PrivatePoolOptions.MatchCriteria` is set to `Target`.
*   This parameter must be empty when `PrivatePoolOptions.MatchCriteria` is set to `Open` or `None`.', example='eap-bp67acfmxazb4****'),
    matchCriteria?: string(name='MatchCriteria', description='The match mode of the private pool. Valid values:

*   Open: open private pool. The system matches the instance with open private pools.
*   Target: specified private pool. You must set the `PrivatePoolOptions.Id` parameter to specify the ID of a private pool.
*   None: no private pool. The instance starts normally without using private pools.', example='Open'),
  }(name='PrivatePoolOptions'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to modify the attributes of the private pool.', example='i-bp67acfmxazb4****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the private pool. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceAttachmentAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAttachmentAttributesResponseBody(name='body'),
}

/**
  * A private pool is generated after an elasticity assurance or a capacity reservation is created. The private pool is associated with information about the instances that are created by using the resources in the private pool. When you create ECS instances, you can configure the instances to use private pool resources, matching them to active elasticity assurances or capacity reservations.
  * *   This operation does not require you to restart the instances for the changes to take effect.
  * *   When you call the following operations on an instance, the system attempts to match the instance with active private pools. If the instance is configured to a specific private pool. the call may fail because the private pool is no longer active or does not have sufficient resources. If the call fails, call the ModifyInstanceAttachmentAttributes operation to change the match mode of the private pool to `Open`.
  *     *   StartInstance: starts an instance that is stopped in economical mode.
  *     *   ReActivateInstances
  *     *   ModifyInstanceChargeType
  *     *   ModifyPrepayInstanceSpec
  *     *   ReplaceSystemDisk
  *
  * @param request ModifyInstanceAttachmentAttributesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceAttachmentAttributesResponse
 */
async function modifyInstanceAttachmentAttributesWithOptions(request: ModifyInstanceAttachmentAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttachmentAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAttachmentAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A private pool is generated after an elasticity assurance or a capacity reservation is created. The private pool is associated with information about the instances that are created by using the resources in the private pool. When you create ECS instances, you can configure the instances to use private pool resources, matching them to active elasticity assurances or capacity reservations.
  * *   This operation does not require you to restart the instances for the changes to take effect.
  * *   When you call the following operations on an instance, the system attempts to match the instance with active private pools. If the instance is configured to a specific private pool. the call may fail because the private pool is no longer active or does not have sufficient resources. If the call fails, call the ModifyInstanceAttachmentAttributes operation to change the match mode of the private pool to `Open`.
  *     *   StartInstance: starts an instance that is stopped in economical mode.
  *     *   ReActivateInstances
  *     *   ModifyInstanceChargeType
  *     *   ModifyPrepayInstanceSpec
  *     *   ReplaceSystemDisk
  *
  * @param request ModifyInstanceAttachmentAttributesRequest
  * @return ModifyInstanceAttachmentAttributesResponse
 */
async function modifyInstanceAttachmentAttributes(request: ModifyInstanceAttachmentAttributesRequest): ModifyInstanceAttachmentAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttachmentAttributesWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: standard mode
*   Unlimited: unlimited mode

For more information about the performance modes of burstable instances, see [Burstable instances](~~59977~~).', example='Standard'),
  deletionProtection?: boolean(name='DeletionProtection', description='The release protection attribute of the instance. This parameter specifies whether you can use the ECS console or call the [DeleteInstance](~~25507~~) operation to release the instance.

> This parameter is applicable to only pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false'),
  description?: string(name='Description', description='The instance description. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testInstanceDescription'),
  enableJumboFrame?: boolean(name='EnableJumboFrame', description='实例MTU是否开启Jumbo frame通信模式，取值范围：

-true：开启。

-false：不开启。

目前仅部分规格支持开启Jumbo frame，更多详情，请参见[ECS实例MTU](~~200512~~)。', example='false'),
  hostName?: string(name='HostName', description='The hostname of the instance. Take note of the following items:

*   When you modify the hostname of an instance, the instance must not be in the Creating (Pending) or Starting (Starting) state. Otherwise, the new hostname and the configurations in `/etc/hosts` cannot take effect. You can call the [DescribeInstances](~~25506~~) operation to query the state of the instance.
*   After the hostname is modified, you must call the [RebootInstance](~~25502~~) operation for the new hostname to take effect.

The following limits apply to the hostnames of instances that run different operating systems:

*   For Windows Server, the hostname must be 2 to 15 characters in length and can contain letters, digits, and hyphens (-). It cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
*   For other operating systems such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate a hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-). The hostname cannot contain consecutive periods (.) or hyphens (-). It cannot start or end with a period (.) or a hyphen (-).', example='testHostName'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph****'),
  instanceName?: string(name='InstanceName', description='The instance name. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testInstanceName'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber', description='The number of queues supported by the primary ENI.', example='8'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

    ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/

For Windows instances, passwords cannot start with a forward slash (/).

> If the `Password` parameter is specified, we recommend that you send requests over HTTPS to prevent password leaks.', example='Test123456'),
  recyclable?: boolean(name='Recyclable', description='> This parameter is in invitational preview and is not publicly available.', example='hide'),
  remoteConnectionOptions?: {
    password?: string(name='Password', description='> This parameter is in invitational preview and is not publicly available.', example='hide'),
    type?: string(name='Type', description='> This parameter is in invitational preview and is not publicly available.', example='hide'),
  }(name='RemoteConnectionOptions', description='> This parameter is in invitational preview and is not publicly available.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The IDs of replacement security groups.

*   All security group IDs must be unique.
*   The instance is moved from the current security groups to the replacement security groups. If you want the instance to remain in the current security groups, you must add the IDs of the current security groups to the list.
*   You can move the instance to security groups of a different type. However, the list cannot contain the IDs of both basic and advanced security groups.
*   The specified security group and instance must belong to the same virtual private cloud (VPC).
*   The valid values of N are based on the maximum number of security groups to which the instance can belong. For more information, see [Limits](~~25412#SecurityGroupQuota1~~).
*   New security groups become valid for corresponding instances after a short latency.', example='sg-bp15ed6xe1yxeycg7o****'),
  userData?: string(name='UserData', description='The user data of the instance. User data must be encoded in Base64.

The size of the user data must be no greater than 16 KB before it is encoded in Base64. We recommend that you do not pass in confidential information such as passwords and private keys in the plaintext format. If you must pass in confidential information, we recommend that you encrypt and Base64-encode the information before you pass it in. Then you can decode and decrypt the information in the same way within the instance.', example='ZWNobyBoZWxsbyBlY3Mh'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

/**
  * If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.
  * Take note of the following items:
  * *   Modify the hostname (`HostName`): After you modify the hostname, you need to restart the instance in the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new hostname to take effect. For information about how to restart an instance in the ECS console, see [Restart instances](~~25440~~). The new hostname does not take effect if you restart the instance from within the operating system.
  * *   Reset the password (`Password`):
  *     *   The instance must not be in the **Starting** state.``
  *     *   After you reset the password, you need to restart the instance in the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new password to take effect. For information about how to restart an instance in the ECS console, see [Restart instances](~~25440~~). The new password does not take effect if you restart the instance from within the operating system.
  * *   Modify user data (`UserData`):
  *     *   The instance must be in the **Stopped** state.``
  *     *   The instance must support user data. For more information, see [Prepare user data](~~49121~~).
  * *   Change the security group (`SecurityGroupIds.N`):
  *     *   You can move an instance to a security group of a different type. If you want to move an instance to a security group of a different type, you must be familiar with the differences between the rule configurations of the two security group types to prevent impacts on the instance network.
  *     *   Security groups of instances that reside in the classic network cannot be changed. For more information, see the description of `SecurityGroupIds.N`.
  * *   Modify the number of queues supported by the primary elastic network interface (ENI) (`NetworkInterfaceQueueNumber`):
  *     *   The instance must be in the `Stopped` state.
  *     *   The value of this parameter cannot exceed the maximum number of queues allowed per ENI. The maximum number of queues vary with the instance type.
  *     *   The total number of queues for all ENIs on the instance cannot exceed the queue quota for the instance type. To obtain the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation. The results are returned in the `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` parameters.
  *     *   If you set this parameter to -1, the value is reset to the default value for the instance type. To obtain the default number of queues supported by the primary ENI for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the `PrimaryEniQueueNumber` parameter.
  *
  * @param request ModifyInstanceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.creditSpecification)) {
    query['CreditSpecification'] = request.creditSpecification;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableJumboFrame)) {
    query['EnableJumboFrame'] = request.enableJumboFrame;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.networkInterfaceQueueNumber)) {
    query['NetworkInterfaceQueueNumber'] = request.networkInterfaceQueueNumber;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.recyclable)) {
    query['Recyclable'] = request.recyclable;
  }
  if (!Util.isUnset(request.remoteConnectionOptions)) {
    query['RemoteConnectionOptions'] = request.remoteConnectionOptions;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons. No operations are allowed on the instance.
  * Take note of the following items:
  * *   Modify the hostname (`HostName`): After you modify the hostname, you need to restart the instance in the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new hostname to take effect. For information about how to restart an instance in the ECS console, see [Restart instances](~~25440~~). The new hostname does not take effect if you restart the instance from within the operating system.
  * *   Reset the password (`Password`):
  *     *   The instance must not be in the **Starting** state.``
  *     *   After you reset the password, you need to restart the instance in the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new password to take effect. For information about how to restart an instance in the ECS console, see [Restart instances](~~25440~~). The new password does not take effect if you restart the instance from within the operating system.
  * *   Modify user data (`UserData`):
  *     *   The instance must be in the **Stopped** state.``
  *     *   The instance must support user data. For more information, see [Prepare user data](~~49121~~).
  * *   Change the security group (`SecurityGroupIds.N`):
  *     *   You can move an instance to a security group of a different type. If you want to move an instance to a security group of a different type, you must be familiar with the differences between the rule configurations of the two security group types to prevent impacts on the instance network.
  *     *   Security groups of instances that reside in the classic network cannot be changed. For more information, see the description of `SecurityGroupIds.N`.
  * *   Modify the number of queues supported by the primary elastic network interface (ENI) (`NetworkInterfaceQueueNumber`):
  *     *   The instance must be in the `Stopped` state.
  *     *   The value of this parameter cannot exceed the maximum number of queues allowed per ENI. The maximum number of queues vary with the instance type.
  *     *   The total number of queues for all ENIs on the instance cannot exceed the queue quota for the instance type. To obtain the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation. The results are returned in the `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` parameters.
  *     *   If you set this parameter to -1, the value is reset to the default value for the instance type. To obtain the default number of queues supported by the primary ENI for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the `PrimaryEniQueueNumber` parameter.
  *
  * @param request ModifyInstanceAttributeRequest
  * @return ModifyInstanceAttributeResponse
 */
async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoReleaseTimeRequest {
  autoReleaseTime?: string(name='AutoReleaseTime', description='The automatic release time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC+0.

*   If the value of seconds (`ss`) is not `00`, the time is automatically rounded to the nearest minute based on the value of minutes (`mm`).
*   The release time must be at least 30 minutes later than the current time.
*   The release time must be at most three years later than the current time.

If `AutoReleaseTime` is not configured, the automatic release feature is disabled, and the instance will not be automatically released.', example='2018-01-01T01:02:03Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1env7nl3mijm2t****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAutoReleaseTimeResponseBody(name='body'),
}

async function modifyInstanceAutoReleaseTimeWithOptions(request: ModifyInstanceAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoReleaseTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAutoReleaseTime',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceAutoReleaseTime(request: ModifyInstanceAutoReleaseTimeRequest): ModifyInstanceAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewAttributeRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance.

Default value: false.', example='true'),
  duration?: int32(name='Duration', description='The auto-renewal period of the instance.

*   Valid values of `Duration` when `PeriodUnit` is set to `Year`: 1, 2, 3, 4, and 5.
*   Valid values of `Duration` when `PeriodUnit` is set to `Month`: 1, 2, 3, 6, 12, 24, 36, 48, and 60.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. You can specify up to 100 subscription instance IDs. Separate the instance IDs with commas (,).', example='i-bp67acfmxazb4ph****,i-bp67acfmxazb4pi****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period (`Duration`). Valid values:

*   Month (default)
*   Year', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  renewalStatus?: string(name='RenewalStatus', description='The auto-renewal status of the instance. Valid values:

*   AutoRenewal: Auto-renewal is enabled for the instance.
*   Normal: Auto-renewal is disabled for the instance.
*   NotRenewal: The instance is not renewed. The system no longer sends an expiration notification but sends only a renewal notification three days before the instance expires. You can change the value of this parameter from NotRenewal to `Normal` for an instance, and then manually renew the instance. Alternatively, you can set the RenewalStatus parameter to AutoRenewal.

> `RenewalStatus` takes precedence over `AutoRenew`. If you do not specify `RenewalStatus`, `AutoRenew` is used by default.', example='AutoRenewal'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceAutoRenewAttributeResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and pricing of Elastic Compute Service (ECS). For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * *   The payment for auto-renewal of an instance is automatically deducted at 08:00:00 (UTC+8) nine days before the instance expires.
  * *   If the deduction fails, Alibaba Cloud attempts to deduct the payment every day until the payment is deducted or until the instance is locked after the nine-day period ends. Make sure that your account balance or credit balance is sufficient.
  *
  * @param request ModifyInstanceAutoRenewAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceAutoRenewAttributeResponse
 */
async function modifyInstanceAutoRenewAttributeWithOptions(request: ModifyInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceAutoRenewAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and pricing of Elastic Compute Service (ECS). For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * *   The payment for auto-renewal of an instance is automatically deducted at 08:00:00 (UTC+8) nine days before the instance expires.
  * *   If the deduction fails, Alibaba Cloud attempts to deduct the payment every day until the payment is deducted or until the instance is locked after the nine-day period ends. Make sure that your account balance or credit balance is sufficient.
  *
  * @param request ModifyInstanceAutoRenewAttributeRequest
  * @return ModifyInstanceAutoRenewAttributeResponse
 */
async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyInstanceChargeTypeRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   true: The payment is automatically completed. Make sure that you have a sufficient balance in your account. Otherwise, your order becomes invalid and is canceled.
*   false: An order is generated but no payment is made.

Default value: true.

> If your account balance is insufficient, you can set AutoPay to false to generate an unpaid order. Then, you can log on to the ECS console to pay for the order.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run. Valid values: Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including the AccessKey pair, the permissions of the RAM user, and the required parameters. If the request fails the dry run, the corresponding error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='false'),
  includeDataDisks?: boolean(name='IncludeDataDisks', description='Specifies whether to change the billing method of all data disks attached to the instance from pay-as-you-go to subscription.

Default value: false.', example='false'),
  instanceChargeType?: string(name='InstanceChargeType', description='The new billing method. Valid values:

*   PrePaid: the subscription billing method
*   PostPaid: the pay-as-you-go billing method

Default value: PrePaid.', example='PrePaid'),
  instanceIds?: string(name='InstanceIds', description='The instance ID. The value can be a JSON array that consists of up to 20 instance IDs. Separate the instance IDs with commas (,).', example='["i-bp67acfmxazb4p****","i-bp67acfmxazb4d****"]'),
  isDetailFee?: boolean(name='IsDetailFee', description='Specifies whether to return cost details of the order after the billing method is changed from subscription to pay-as-you-go.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The renewal duration of the subscription instance. If the instance is hosted on a dedicated host, the renewal duration of the instance cannot exceed the subscription duration of the dedicated host.

Valid values when `PeriodUnit` is set to Month: `1, 2, 3, 4, 5, 6, 7, 8, 9, and 12`.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal duration specified by `Period`. Valid value:

Month

Default value: Month.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      currency?: string(name='Currency', description='The unit of currency for the bill.

Alibaba Cloud China site (aliyun.com): CNY.

Alibaba Cloud International site (alibabacloud.com): USD.', example='CNY'),
      fee?: string(name='Fee', description='The charged amount.', example='0'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances', description='Details about the charges for the order.'),
  orderId?: string(name='OrderId', description='The order ID.', example='20413515388****'),
  requestId?: string(name='RequestId', description='The request ID.', example='B61C08E5-403A-46A2-96C1-F7B1216DB10C'),
}

model ModifyInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceChargeTypeResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and pricing of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * When you call this operation, take note of the following items:
  * *   The instances must be in the `Running` or `Stopped` state, and you have no overdue payments for the instances.********
  * *   After you change the billing method, outstanding payments, if any, are automatically completed. Make sure that you have sufficient balance in your account. Otherwise, your order becomes invalid and is canceled. If your account balance is insufficient, you can set `AutoPay` to `false` to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com/) to pay for the order.
  * *   **Change the billing method from subscription to pay-as-you-go**:
  *     *   Your ECS usage determines whether you can change the billing method of your instance from subscription to pay-as-you-go.
  *     *   After you change the billing method of an instance from subscription to pay-as-you-go, the new billing method remains in effect for the remaining lifecycle of the instance. The price difference is refunded to the payment account that you used. Vouchers that have been redeemed are not refundable.
  *     *   **Refund rule**: You have a quota for the total refund amount each month, and the unused balance of this quota is not carried over to the next month. If you use up the refund quota of the current month, you can change the billing method in the next month. The refund amount incurred after you change the billing method is calculated based on the following formula: **Number of vCPUs × (Number of remaining days × 24 ± Number of remaining or elapsed hours)**.
  * *   **Change the billing method from pay-as-you-go to subscription**:
  *     *   You can change the billing method of all data disks that are attached to an instance from pay-as-you-go to subscription.
  *     *   This operation cannot be called for a pay-as-you-go instance that has an automatic release time set.
  *
  * @param request ModifyInstanceChargeTypeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceChargeTypeResponse
 */
async function modifyInstanceChargeTypeWithOptions(request: ModifyInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.includeDataDisks)) {
    query['IncludeDataDisks'] = request.includeDataDisks;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.isDetailFee)) {
    query['IsDetailFee'] = request.isDetailFee;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceChargeType',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you are familiar with the billing methods and pricing of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * When you call this operation, take note of the following items:
  * *   The instances must be in the `Running` or `Stopped` state, and you have no overdue payments for the instances.********
  * *   After you change the billing method, outstanding payments, if any, are automatically completed. Make sure that you have sufficient balance in your account. Otherwise, your order becomes invalid and is canceled. If your account balance is insufficient, you can set `AutoPay` to `false` to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com/) to pay for the order.
  * *   **Change the billing method from subscription to pay-as-you-go**:
  *     *   Your ECS usage determines whether you can change the billing method of your instance from subscription to pay-as-you-go.
  *     *   After you change the billing method of an instance from subscription to pay-as-you-go, the new billing method remains in effect for the remaining lifecycle of the instance. The price difference is refunded to the payment account that you used. Vouchers that have been redeemed are not refundable.
  *     *   **Refund rule**: You have a quota for the total refund amount each month, and the unused balance of this quota is not carried over to the next month. If you use up the refund quota of the current month, you can change the billing method in the next month. The refund amount incurred after you change the billing method is calculated based on the following formula: **Number of vCPUs × (Number of remaining days × 24 ± Number of remaining or elapsed hours)**.
  * *   **Change the billing method from pay-as-you-go to subscription**:
  *     *   You can change the billing method of all data disks that are attached to an instance from pay-as-you-go to subscription.
  *     *   This operation cannot be called for a pay-as-you-go instance that has an automatic release time set.
  *
  * @param request ModifyInstanceChargeTypeRequest
  * @return ModifyInstanceChargeTypeResponse
 */
async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceChargeTypeWithOptions(request, runtime);
}

model ModifyInstanceDeploymentRequest {
  affinity?: string(name='Affinity', description='Specifies whether to associate the instance with a dedicated host. Valid values:

*   host: associates the instance with a dedicated host. When you start a stopped instance in economical mode, the instance remains on its original dedicated host.
*   default: does not associate the instance with a dedicated host. When you start a stopped instance in economical mode, the instance can be automatically deployed to another dedicated host in the automatic deployment resource pool if the resources of the original dedicated host are insufficient.

If you want to migrate the instance from a shared host to a dedicated host, use the default value. Default value: default.', example='host'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster.', example='dc-bp67acfmxazb4ph****'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the destination dedicated host. You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the most recent list of dedicated hosts.

When you migrate an instance from a shared host to a dedicated host or between dedicated hosts, take note of the following items:

*   To migrate the instance to a specific dedicated host, specify this parameter.
*   To migrate the instance to a dedicated host that the system automatically selects, leave this parameter empty and set `Tenancy` to host.

For information about the automatic deployment feature, see [Features of dedicated hosts](~~118938~~).', example='dh-bp67acfmxazb4ph****'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group in which to deploy the instance in the destination deployment set. This parameter takes effect only when the destination deployment set uses the high availability group strategy (AvailabilityGroup). Valid values: 1 to 7.

> If you call this operation to deploy an instance to a deployment set that uses the high availability group strategy (`AvailablilityGroup`) and leave this parameter empty, the system evenly distributes instances among the deployment set groups in the deployment set. If you specify the current deployment set of the instance as the destination deployment set in the request, the system evenly distributes instances again among the deployment set groups in the deployment set.', example='3'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the destination deployment set.

This parameter is required when you add an instance to a deployment set or change the deployment set of an instance.

> You cannot change the deployment set when you modify dedicated host configurations, including the `Tenancy`, `Affinity`, and `DedicatedHostId` parameters.', example='ds-bp67acfmxazb4ph****'),
  force?: boolean(name='Force', description='Specifies whether to forcefully change the host of the instance when the deployment set of the instance is changed. Valid values:

*   true: forcefully changes the host of the instance when the deployment set of the instance is changed. Hosts can be forcefully changed only for instances in the Running or Stopped state. The instances that are in the Stopped state do not include pay-as-you-go instances that are stopped in economical mode.

    **

    **Note**If the specified instance has local disks attached, the local disks are forcefully changed when the host of the instance is forcefully changed. This may cause data loss in the local disks. Proceed with caution.

*   false: does not forcefully change the host of the instance when the deployment set of the instance is changed. You can add the instance to a deployment set only when the instance remains on the current host. When the Force parameter is set to false, the deployment set may fail to be changed.

Default value: false.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance', example='i-bp67acfmxazb4ph***'),
  instanceType?: string(name='InstanceType', description='The instance type to which the instance is changed. You can call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent list of instance types.

You can change the instance type of an instance when you migrate the instance to a dedicated host. The new instance type must match the type of the specified dedicated host. For more information, see [Dedicated host types](~~68564~~).

*   If you specify this parameter, you must also specify the `DedicatedHostId` parameter.
*   You cannot change the instance type of an instance if you use the automatic deployment feature to migrate the instance.', example='ecs.c6.large'),
  migrationType?: string(name='MigrationType', description='Specifies whether to stop the instance before it is migrated to the destination dedicated host. Valid values:

*   reboot: stops the instance before it is migrated.
*   live: migrates the instance without stopping it. If you set the MigrationType parameter to live, you must specify the DedicatedHostId parameter. In this case, you cannot change the instance type of the instance when the instance is migrated.

Default value: reboot.', example='live'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  removeFromDeploymentSet?: boolean(name='RemoveFromDeploymentSet', description='Specifies whether to remove the specified instance from the specified deployment set. Valid values:

*   true
*   false

Default value: false.

> If you set this parameter to true, you must specify the InstanceId and DeploymentSetId parameters and make sure that the specified instance belongs to the specified deployment set.', example='false'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tenancy?: string(name='Tenancy', description='Specifies whether to deploy the instance on a dedicated host. Set the value to host.', example='host'),
}

model ModifyInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model ModifyInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceDeploymentResponseBody(name='body'),
}

/**
  * When you call this operation for an ECS instance, take note of the following items:
  * *   The ECS instance must be in the **Stopped** state. The instance is automatically restarted after it is migrated.
  * *   The network type of the instance must be Virtual Private Cloud (VPC).
  * *   The instance and the destination dedicated host to which to migrate the instance must belong to the same account and reside in the same region and zone.
  * *   A pay-as-you-go instance can be migrated to a subscription dedicated host. A subscription instance can be migrated only between subscription dedicated hosts. The expiration date of the subscription instance cannot be later than that of the destination dedicated host.
  * *   You can migrate only pay-as-you-go instances from a shared host to a dedicated host. You cannot migrate subscription or preemptible instances from a shared host to a dedicated host.
  * *   You can redeploy an instance to a specific dedicated host cluster.
  *
  * @param request ModifyInstanceDeploymentRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceDeploymentResponse
 */
async function modifyInstanceDeploymentWithOptions(request: ModifyInstanceDeploymentRequest, runtime: Util.RuntimeOptions): ModifyInstanceDeploymentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.dedicatedHostClusterId)) {
    query['DedicatedHostClusterId'] = request.dedicatedHostClusterId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.deploymentSetGroupNo)) {
    query['DeploymentSetGroupNo'] = request.deploymentSetGroupNo;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.migrationType)) {
    query['MigrationType'] = request.migrationType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeFromDeploymentSet)) {
    query['RemoveFromDeploymentSet'] = request.removeFromDeploymentSet;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceDeployment',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation for an ECS instance, take note of the following items:
  * *   The ECS instance must be in the **Stopped** state. The instance is automatically restarted after it is migrated.
  * *   The network type of the instance must be Virtual Private Cloud (VPC).
  * *   The instance and the destination dedicated host to which to migrate the instance must belong to the same account and reside in the same region and zone.
  * *   A pay-as-you-go instance can be migrated to a subscription dedicated host. A subscription instance can be migrated only between subscription dedicated hosts. The expiration date of the subscription instance cannot be later than that of the destination dedicated host.
  * *   You can migrate only pay-as-you-go instances from a shared host to a dedicated host. You cannot migrate subscription or preemptible instances from a shared host to a dedicated host.
  * *   You can redeploy an instance to a specific dedicated host cluster.
  *
  * @param request ModifyInstanceDeploymentRequest
  * @return ModifyInstanceDeploymentResponse
 */
async function modifyInstanceDeployment(request: ModifyInstanceDeploymentRequest): ModifyInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceDeploymentWithOptions(request, runtime);
}

model ModifyInstanceMaintenanceAttributesRequest {
  actionOnMaintenance?: string(name='ActionOnMaintenance', description='The maintenance action. Valid values:

*   Stop: stops the instance.
*   AutoRecover: automatically recovers the instance.
*   AutoRedeploy: redeploys the instance, which may damage the data disks attached to the instance.', example='AutoRecover'),
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N. Valid values of N: 1 to 100.', example='i-bp67acfmxazb4ph****'),
  maintenanceWindow?: [ 
    {
      endTime?: string(name='EndTime', description='The end time of the maintenance window. The time must be on the hour. You must configure both StartTime and EndTime. The value of EndTime must be 1 to 23 hours later than the value of StartTime. Specify the time in the `HH:mm:ss` format. The time must be in UTC+8. Set the value of N to 1.', example='18:00:00'),
      startTime?: string(name='StartTime', description='The start time of the maintenance window. The time must be on the hour. You must configure both StartTime and EndTime. The value of EndTime must be 1 to 23 hours later than the value of StartTime. Specify the time in the `HH:mm:ss` format. The time must be in UTC+8. Set the value of N to 1.', example='02:00:00'),
    }
  ](name='MaintenanceWindow', description='The maintenance windows.'),
  notifyOnMaintenance?: boolean(name='NotifyOnMaintenance', description='Specifies whether to send an event notification before maintenance. Valid values:

*   true
*   false

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceMaintenanceAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMaintenanceAttributesResponseBody(name='body'),
}

/**
  * This operation is used to modify the maintenance policy of an instance. The maintenance policy consists of the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the action that you specify in response to instance shutdown.
  *
  * @param request ModifyInstanceMaintenanceAttributesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceMaintenanceAttributesResponse
 */
async function modifyInstanceMaintenanceAttributesWithOptions(request: ModifyInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionOnMaintenance)) {
    query['ActionOnMaintenance'] = request.actionOnMaintenance;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.maintenanceWindow)) {
    query['MaintenanceWindow'] = request.maintenanceWindow;
  }
  if (!Util.isUnset(request.notifyOnMaintenance)) {
    query['NotifyOnMaintenance'] = request.notifyOnMaintenance;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMaintenanceAttributes',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is used to modify the maintenance policy of an instance. The maintenance policy consists of the following maintenance attributes:
  * *   Maintenance window: the time period that you specify for maintenance.
  * *   Maintenance action: the action that you specify in response to instance shutdown.
  *
  * @param request ModifyInstanceMaintenanceAttributesRequest
  * @return ModifyInstanceMaintenanceAttributesResponse
 */
async function modifyInstanceMaintenanceAttributes(request: ModifyInstanceMaintenanceAttributesRequest): ModifyInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model ModifyInstanceMetadataOptionsRequest {
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether to enable the access channel for instance metadata. Valid values:

*   enabled
*   disabled

Default value: enabled.

> For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='> This parameter is in invitational preview and is not publicly available.', example='1'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether to forcefully use the security-enhanced mode (IMDSv2) to access instance metadata. Valid values:

*   optional: does not forcefully use the security-enhanced mode (IMDSv2).
*   required: forcefully uses the security-enhanced mode (IMDSv2). After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

> For more information about the modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxaz****'),
  instanceMetadataTags?: string(name='InstanceMetadataTags', description='> This parameter is in invitational preview and is not publicly available.', example='null'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceMetadataOptionsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceMetadataOptionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMetadataOptionsResponseBody(name='body'),
}

async function modifyInstanceMetadataOptionsWithOptions(request: ModifyInstanceMetadataOptionsRequest, runtime: Util.RuntimeOptions): ModifyInstanceMetadataOptionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceMetadataTags)) {
    query['InstanceMetadataTags'] = request.instanceMetadataTags;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMetadataOptions',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceMetadataOptions(request: ModifyInstanceMetadataOptionsRequest): ModifyInstanceMetadataOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMetadataOptionsWithOptions(request, runtime);
}

model ModifyInstanceNetworkSpecRequest {
  allocatePublicIp?: boolean(name='AllocatePublicIp', description='Specifies whether to assign a public IP address.

Default value: false.', example='false'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment. Valid values:

*   true: After you modify the bandwidth configurations, the payment is automatically complete. Make sure that your account balance is sufficient when you set AutoPay to true. If your account balance is insufficient, your order cannot be paid in the ECS console and becomes invalid. You must cancel the order.
*   false: After you modify the bandwidth configurations, an order is generated but the payment is not complete. If your account balance is insufficient, you can set AutoPay to false to generate an unpaid order. Then, you can log on to the [ECS console](https://ecs.console.aliyun.com) to pay for the order.

Default value: true.', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  endTime?: string(name='EndTime', description='The end time of the temporary bandwidth upgrade. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThhZ format. The time must be in UTC and accurate to **hours** (hh).

> The interval between the end time and the start time of the temporary bandwidth upgrade must be greater than or equal to 3 hours.', example='2017-12-06T22Z'),
  ISP?: string(name='ISP', description='> This parameter is in invitational preview and is not publicly available.', example='null'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to modify bandwidth configurations.', example='i-bp67acfmxazb4****'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   If the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of this parameter range from 1 to 10, and the default value is 10.
*   If the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter range from 1 to the value of `InternetMaxBandwidthOut`, and the default value is the value of `InternetMaxBandwidthOut`.', example='10'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.', example='10'),
  networkChargeType?: string(name='NetworkChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth
*   PayByTraffic

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidth values are used as the upper limits of bandwidths instead of guaranteed values. In scenarios where demand outstrips resource supplies, these maximum bandwidths may be limited. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The start time of the temporary bandwidth upgrade. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddThh:mmZ format. The time must be in UTC and accurate to **minutes** (mm).', example='2017-12-05T22:40Z'),
}

model ModifyInstanceNetworkSpecResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='123457890'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceNetworkSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceNetworkSpecResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   From November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The following throttling policies apply:
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s.
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  * *   If you upgrade the outbound public bandwidth (InternetMaxBandwidthOut) of a subscription (PrePaid) instance from 0 Mbit/s when you modify the bandwidth configurations of the instance, a public IP address is automatically assigned to the instance.
  * *   If you upgrade the outbound public bandwidth (InternetMaxBandwidthOut) of a pay-as-you-go (PostPaid) instance from 0 Mbit/s when you modify the bandwidth configurations of the instance, no public IP address is assigned to the instance. You must call the [AllocatePublicIpAddress](~~25544~~) operation to assign a public IP address to the instance.
  * *   An instance in the classic network must be in the Stopped state before you can upgrade its outbound public bandwidth (InternetMaxBandwidthOut) from 0 Mbit/s.
  * *   After the bandwidth is upgraded, AutoPay is set to true by default and the payment is automatically made. Make sure that your account balance is sufficient. Otherwise, your order becomes invalid and must be canceled. If your account balance is insufficient, you can set AutoPay to false. In this case, when you call the ModifyInstanceNetworkSpec operation, an unpaid order is generated. Then, you can log on to the ECS console to pay for the order.
  * *   The price difference is refunded to the payment account that you used. Vouchers or coupons that have been redeemed cannot be returned.
  *
  * @param request ModifyInstanceNetworkSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceNetworkSpecResponse
 */
async function modifyInstanceNetworkSpecWithOptions(request: ModifyInstanceNetworkSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceNetworkSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocatePublicIp)) {
    query['AllocatePublicIp'] = request.allocatePublicIp;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ISP)) {
    query['ISP'] = request.ISP;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.networkChargeType)) {
    query['NetworkChargeType'] = request.networkChargeType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceNetworkSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   From November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The following throttling policies apply:
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s.
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  * *   If you upgrade the outbound public bandwidth (InternetMaxBandwidthOut) of a subscription (PrePaid) instance from 0 Mbit/s when you modify the bandwidth configurations of the instance, a public IP address is automatically assigned to the instance.
  * *   If you upgrade the outbound public bandwidth (InternetMaxBandwidthOut) of a pay-as-you-go (PostPaid) instance from 0 Mbit/s when you modify the bandwidth configurations of the instance, no public IP address is assigned to the instance. You must call the [AllocatePublicIpAddress](~~25544~~) operation to assign a public IP address to the instance.
  * *   An instance in the classic network must be in the Stopped state before you can upgrade its outbound public bandwidth (InternetMaxBandwidthOut) from 0 Mbit/s.
  * *   After the bandwidth is upgraded, AutoPay is set to true by default and the payment is automatically made. Make sure that your account balance is sufficient. Otherwise, your order becomes invalid and must be canceled. If your account balance is insufficient, you can set AutoPay to false. In this case, when you call the ModifyInstanceNetworkSpec operation, an unpaid order is generated. Then, you can log on to the ECS console to pay for the order.
  * *   The price difference is refunded to the payment account that you used. Vouchers or coupons that have been redeemed cannot be returned.
  *
  * @param request ModifyInstanceNetworkSpecRequest
  * @return ModifyInstanceNetworkSpecResponse
 */
async function modifyInstanceNetworkSpec(request: ModifyInstanceNetworkSpecRequest): ModifyInstanceNetworkSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNetworkSpecWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  systemDisk?: {
    category?: string(name='Category', description='The new category of the system disk. This parameter is valid only when you upgrade an instance from a retired instance type to an available instance type or when you upgrade a non-I/O optimized instance to an I/O optimized instance. For more information, see [Retired instance types](~~55263~~) and [Instance families](~~25378~~). Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD', example='cloud_ssd'),
  }(name='SystemDisk'),
  temporary?: {
    endTime?: string(name='EndTime', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='> This parameter is in invitational preview and is unavailable for general users.', example='0'),
    startTime?: string(name='StartTime', description='> This parameter is in invitational preview and is unavailable for general users.', example='hide'),
  }(name='Temporary'),
  allowMigrateAcrossZone?: boolean(name='AllowMigrateAcrossZone', description='Specifies whether to support cross-cluster instance type upgrades.

Default value: false.

When `AllowMigrateAcrossZone` is set to true and you upgrade the instance configurations based on the returned information, take note of the following items:

Instances of the classic network type:

*   For retired instance types, when a non-I/O optimized instance is upgraded to an I/O optimized instance, the private IP address, disk device names, and software license codes of the instance are changed. For more information, see [Retired instance types](~~55263~~). For Linux instances, device names of basic disks (`cloud`) are changed to the form of **xvda** or **xvdb**, while device names of ultra disks (`cloud_efficiency`) and standard SSDs (`cloud_ssd`) are changed to the form of **vda** or **vdb**.
*   For instance families available for purchase, when the instance type of an instance is changed, the private IP address of the instance changes. For more information, see [Instance families](~~25378~~).

Instances that reside in virtual private clouds (VPCs): For [retired instance types](~~55263~~), when a non-I/O optimized instance is upgraded to an I/O optimized instance, the disk device names and software license codes of the instance change. For Linux instances, device names of basic disks (`cloud`) are changed to the form of **xvda** or **xvdb**, while device names of ultra disks (`cloud_efficiency`) and standard SSDs (`cloud_ssd`) are changed to the form of **vda** or **vdb**.', example='false'),
  async?: boolean(name='Async', description='Specifies whether to submit an asynchronous request.

Default value: false.', example='false'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  disk?: [ 
    {
      category?: string(name='Category', description='>该参数暂未开放使用。', example='null'),
      diskId?: string(name='DiskId', description='>该参数暂未开放使用。', example='null'),
      performanceLevel?: string(name='PerformanceLevel', description='>该参数暂未开放使用。', example='null'),
    }
  ](name='Disk', description='>该参数暂未开放使用。'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4p****'),
  instanceType?: string(name='InstanceType', description='The new instance type. For more information, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the most recent list of instance types.', example='ecs.g6.large'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the value range of this parameter is from 1 to 10, and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the value range of this parameter is from 1 to the value of `InternetMaxBandwidthOut`. The default value of InternetMaxBandwidthIn is the same as the value of `InternetMaxBandwidthOut`.

> When the **pay-by-traffic** billing method is used, the maximum inbound and outbound bandwidth values are used as the upper limits for bandwidth instead of guaranteed values. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='10'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

> When the **pay-by-traffic** billing method is used, the maximum inbound and outbound bandwidth values are used as the upper limits for bandwidth instead of guaranteed values. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='10'),
  modifyMode?: string(name='ModifyMode', description='>该参数暂未开放使用。', example='null'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

/**
  * For information about how to use the SDK for Python to change resource configurations, see [Query available resources for configuration changes](~~109517~~).
  * When you call this operation, take note of the following items:
  * *   Make sure that you have no overdue payments in your account.
  * *   You can adjust the public bandwidth of an instance only when the instance is in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  * *   Before you change the instance type of a pay-as-you-go instance, you can call the [DescribeResourcesModification](~~66187~~) operation to query the instance types to which you can change.
  * *   You can change the instance type of an instance only when the instance is in the **Stopped** (`Stopped`) state.
  * *   You can change only the instance type or only the public bandwidth of an instance at a time. The instance type and the public bandwidth of an instance cannot be changed together.
  * *   From November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy of your account. To increase the maximum bandwidth value, submit a ticket. The following throttling policies apply:
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s.
  *     *   Within a single region, the sum of actual maximum bandwidths of all ECS instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *
  * @param request ModifyInstanceSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceSpecResponse
 */
async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowMigrateAcrossZone)) {
    query['AllowMigrateAcrossZone'] = request.allowMigrateAcrossZone;
  }
  if (!Util.isUnset(request.async)) {
    query['Async'] = request.async;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.disk)) {
    query['Disk'] = request.disk;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  if (!Util.isUnset(request.temporary)) {
    query['Temporary'] = request.temporary;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * For information about how to use the SDK for Python to change resource configurations, see [Query available resources for configuration changes](~~109517~~).
  * When you call this operation, take note of the following items:
  * *   Make sure that you have no overdue payments in your account.
  * *   You can adjust the public bandwidth of an instance only when the instance is in the **Running** (`Running`) or **Stopped** (`Stopped`) state.
  * *   Before you change the instance type of a pay-as-you-go instance, you can call the [DescribeResourcesModification](~~66187~~) operation to query the instance types to which you can change.
  * *   You can change the instance type of an instance only when the instance is in the **Stopped** (`Stopped`) state.
  * *   You can change only the instance type or only the public bandwidth of an instance at a time. The instance type and the public bandwidth of an instance cannot be changed together.
  * *   From November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy of your account. To increase the maximum bandwidth value, submit a ticket. The following throttling policies apply:
  *     *   Within a single region, the sum of actual peak bandwidths of all ECS instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s.
  *     *   Within a single region, the sum of actual maximum bandwidths of all ECS instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *
  * @param request ModifyInstanceSpecRequest
  * @return ModifyInstanceSpecResponse
 */
async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceVncPasswdRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vncPassword?: string(name='VncPassword', description='The new VNC password of the instance.', example='Ecs123'),
}

model ModifyInstanceVncPasswdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceVncPasswdResponseBody(name='body'),
}

/**
  * *   The password must be six characters in length and can contain only uppercase letters, lowercase letters, and digits.
  * *   After you modify the VNC password of an instance, take note of the following items:
  *     *   If the instance is I/O optimized, the new password takes effect immediately.
  *     *   If the instance is not I/O optimized, you must [restart the instance](~~25440~~) by using the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new password to take effect.
  *
  * @param request ModifyInstanceVncPasswdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceVncPasswdResponse
 */
async function modifyInstanceVncPasswdWithOptions(request: ModifyInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): ModifyInstanceVncPasswdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vncPassword)) {
    query['VncPassword'] = request.vncPassword;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceVncPasswd',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The password must be six characters in length and can contain only uppercase letters, lowercase letters, and digits.
  * *   After you modify the VNC password of an instance, take note of the following items:
  *     *   If the instance is I/O optimized, the new password takes effect immediately.
  *     *   If the instance is not I/O optimized, you must [restart the instance](~~25440~~) by using the ECS console or by calling the [RebootInstance](~~25502~~) operation for the new password to take effect.
  *
  * @param request ModifyInstanceVncPasswdRequest
  * @return ModifyInstanceVncPasswdResponse
 */
async function modifyInstanceVncPasswd(request: ModifyInstanceVncPasswdRequest): ModifyInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVncPasswdWithOptions(request, runtime);
}

model ModifyInstanceVpcAttributeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1iudwa5b1tqag1****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The new private IP address of the instance.

> The value of `PrivateIpAddress` depends on the value of `VSwitchId`. The specified IP address must be within the CIDR block of the specified vSwitch.

By default, if this parameter is not specified, a private IP address is randomly assigned from the CIDR block of the specified vSwitch.', example='172.17.**.**'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='The ID of security group N to which the instance belongs after the VPC is changed. This parameter is required only when the `VpcId` parameter is specified.

*   The specified security groups must be of the same type.
*   You can specify one or more security groups. The valid values of N depend on the maximum number of security groups to which an instance can belong. For more information, see [Limits](~~25412~~).
*   The specified security groups must belong to the VPC specified by the `VpcId` parameter.', example='sg-o6w9l8bc8dgmkw87****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.

*   If this parameter is set to the ID of the current vSwitch, the vSwitch of the instance remains unchanged.
*   If this parameter is set to the ID of a different vSwitch and the `VpcId` parameter is not specified, the new vSwitch must belong to the same zone and VPC as the current vSwitch.
*   If the `VpcId` parameter is specified, the vSwitch specified by this parameter must belong to the specified VPC and the same zone as the current vSwitch.', example='vsw-bp1s5fnvk4gn3tw12****'),
  vpcId?: string(name='VpcId', description='The ID of the new VPC.', example='vpc-bp1vwnn14rqpyiczj****'),
}

model ModifyInstanceVpcAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyInstanceVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceVpcAttributeResponseBody(name='body'),
}

/**
  * The instance must be in the **Stopped** state.``
  * *   When you call this operation to change the private IP address or vSwitch of an instance, take note of the following items:
  *     *   If the instance is a new instance, you must restart the instance before you call this operation.
  *     *   After the private IP address or vSwitch of the instance is changed, you must restart the instance before you call this operation again.
  * *   When you call this operation to change the VPC of an instance, take note of the following items:
  *     *   **Instance:**
  *         *   The instance cannot be associated with Server Load Balancer (SLB) instances.
  *         *   The instance cannot be in the Locked, To Be Released, Expired, Expired and Being Recycled, or Overdue and Being Recycled state. For more information, see [ECS instance lifecycle](~~25380~~).
  *         *   The instance cannot be used in other Alibaba Cloud services. For example, the instance cannot be in the process of being migrated or having its VPC changed, or the databases deployed on the instance cannot be managed by Data Transmission Service (DTS).
  *     *   **Network:**
  *         *   The cut-through mode or the multi-EIP-to-ENI mode cannot be enabled for the instance.
  *         *   The instance cannot be associated with a high-availability virtual IP address (HAVIP).
  *         *   The vSwitch of the instance cannot be associated with a custom route table.
  *         *   Global Accelerator (GA) cannot be activated for the instance.
  *         *   The instance cannot have secondary ENIs.
  *         *   The instance cannot be assigned an IPv6 address.
  *         *   The primary ENI of the instance cannot be associated with multiple IP addresses.
  *         *   The new vSwitch that you specify must belong to the new VPC.
  *         *   The original and new vSwitches must reside in the same zone.
  *         *   If you assign a private IP address to the primary ENI of the instance, the private IP address must an idle IP address within the CIDR block of the new vSwitch. If you do not assign a private IP address to the primary ENI of the instance, a private IP address is randomly assigned to the ENI. Sufficient IP addresses must be available in the CIDR block of the new vSwitch.
  *         *   If advanced features are enabled for the new VPC, take note of the instance families that do not support advanced VPC features. For more information, see [Instance families that do not support advanced VPC features](~~163466~~).
  *         *   The Alibaba Cloud account that owns the new VPC cannot share the VPC with other accounts.
  *     *   **Security group (SecurityGroupId.N):**
  *         *   All security groups must be of the same type.
  *         *   The valid values of N depend on the maximum number of security groups to which an instance can belong. For more information, see [Limits](~~25412~~).
  *         *   The security groups that you specify must belong to the new VPC.
  *         *   You can switch the instance to a security group of a different type. If you want to switch an instance to a security group of a different type, we recommend that you familiarize yourself with the differences between the rule configurations of the two security group types to avoid impacts on the instance network. For more information, see [Overview](~~25387~~).
  *
  * @param request ModifyInstanceVpcAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyInstanceVpcAttributeResponse
 */
async function modifyInstanceVpcAttributeWithOptions(request: ModifyInstanceVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceVpcAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The instance must be in the **Stopped** state.``
  * *   When you call this operation to change the private IP address or vSwitch of an instance, take note of the following items:
  *     *   If the instance is a new instance, you must restart the instance before you call this operation.
  *     *   After the private IP address or vSwitch of the instance is changed, you must restart the instance before you call this operation again.
  * *   When you call this operation to change the VPC of an instance, take note of the following items:
  *     *   **Instance:**
  *         *   The instance cannot be associated with Server Load Balancer (SLB) instances.
  *         *   The instance cannot be in the Locked, To Be Released, Expired, Expired and Being Recycled, or Overdue and Being Recycled state. For more information, see [ECS instance lifecycle](~~25380~~).
  *         *   The instance cannot be used in other Alibaba Cloud services. For example, the instance cannot be in the process of being migrated or having its VPC changed, or the databases deployed on the instance cannot be managed by Data Transmission Service (DTS).
  *     *   **Network:**
  *         *   The cut-through mode or the multi-EIP-to-ENI mode cannot be enabled for the instance.
  *         *   The instance cannot be associated with a high-availability virtual IP address (HAVIP).
  *         *   The vSwitch of the instance cannot be associated with a custom route table.
  *         *   Global Accelerator (GA) cannot be activated for the instance.
  *         *   The instance cannot have secondary ENIs.
  *         *   The instance cannot be assigned an IPv6 address.
  *         *   The primary ENI of the instance cannot be associated with multiple IP addresses.
  *         *   The new vSwitch that you specify must belong to the new VPC.
  *         *   The original and new vSwitches must reside in the same zone.
  *         *   If you assign a private IP address to the primary ENI of the instance, the private IP address must an idle IP address within the CIDR block of the new vSwitch. If you do not assign a private IP address to the primary ENI of the instance, a private IP address is randomly assigned to the ENI. Sufficient IP addresses must be available in the CIDR block of the new vSwitch.
  *         *   If advanced features are enabled for the new VPC, take note of the instance families that do not support advanced VPC features. For more information, see [Instance families that do not support advanced VPC features](~~163466~~).
  *         *   The Alibaba Cloud account that owns the new VPC cannot share the VPC with other accounts.
  *     *   **Security group (SecurityGroupId.N):**
  *         *   All security groups must be of the same type.
  *         *   The valid values of N depend on the maximum number of security groups to which an instance can belong. For more information, see [Limits](~~25412~~).
  *         *   The security groups that you specify must belong to the new VPC.
  *         *   You can switch the instance to a security group of a different type. If you want to switch an instance to a security group of a different type, we recommend that you familiarize yourself with the differences between the rule configurations of the two security group types to avoid impacts on the instance network. For more information, see [Overview](~~25387~~).
  *
  * @param request ModifyInstanceVpcAttributeRequest
  * @return ModifyInstanceVpcAttributeResponse
 */
async function modifyInstanceVpcAttribute(request: ModifyInstanceVpcAttributeRequest): ModifyInstanceVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAttributeWithOptions(request, runtime);
}

model ModifyLaunchTemplateDefaultVersionRequest {
  defaultVersionNumber?: long(name='DefaultVersionNumber', description='The default version number of the instance launch template.', example='2'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template. You must specify the LaunchTemplateId or LaunchTemplateName parameter to determine an instance launch template.', example='lt-s-bp177juajht6****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the instance launch template. You must specify the LaunchTemplateId or LaunchTemplateName parameter to determine an instance launch template.', example='testLaunchTemplateName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the launch template. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyLaunchTemplateDefaultVersionResponseBody = {
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template. For more information, see [DescribeLaunchTemplates](~~73759~~). You must specify `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template.', example='lt-bp1apo0bbbkuy0rj****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyLaunchTemplateDefaultVersionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyLaunchTemplateDefaultVersionResponseBody(name='body'),
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=ModifyLaunchTemplateDefaultVersion\\&type=RPC\\&version=2014-05-26)
  *
  * @param request ModifyLaunchTemplateDefaultVersionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyLaunchTemplateDefaultVersionResponse
 */
async function modifyLaunchTemplateDefaultVersionWithOptions(request: ModifyLaunchTemplateDefaultVersionRequest, runtime: Util.RuntimeOptions): ModifyLaunchTemplateDefaultVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.defaultVersionNumber)) {
    query['DefaultVersionNumber'] = request.defaultVersionNumber;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyLaunchTemplateDefaultVersion',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Debugging
  * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Ecs\\&api=ModifyLaunchTemplateDefaultVersion\\&type=RPC\\&version=2014-05-26)
  *
  * @param request ModifyLaunchTemplateDefaultVersionRequest
  * @return ModifyLaunchTemplateDefaultVersionResponse
 */
async function modifyLaunchTemplateDefaultVersion(request: ModifyLaunchTemplateDefaultVersionRequest): ModifyLaunchTemplateDefaultVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLaunchTemplateDefaultVersionWithOptions(request, runtime);
}

model ModifyManagedInstanceRequest {
  instanceId?: string(name='InstanceId', description='The new name of the managed instance. The name must be 1 to 128 characters in length. It must start with a letter and cannot start with a special character or a digit. It can contain letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:) and cannot start with `http://` or `https://`.', example='mi-hz01nmcf****'),
  instanceName?: string(name='InstanceName', description='The request ID.', example='testInstanceName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the managed instance.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyManagedInstanceResponseBody = {
  instance?: {
    instanceId?: string(name='InstanceId', example='mi-hz01nmcf****'),
    instanceName?: string(name='InstanceName', description='The ID of the managed instance.', example='testInstanceName'),
  }(name='Instance', description='The name of the managed instance.'),
  requestId?: string(name='RequestId', description='Details of the managed instance.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyManagedInstanceResponseBody(name='body'),
}

/**
  * The region ID. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request ModifyManagedInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyManagedInstanceResponse
 */
async function modifyManagedInstanceWithOptions(request: ModifyManagedInstanceRequest, runtime: Util.RuntimeOptions): ModifyManagedInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyManagedInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID. The following regions are supported: China (Qingdao), China (Beijing), China (Zhangjiakou), China (Hohhot), China (Hangzhou), China (Shanghai), China (Shenzhen), China (Heyuan), and China (Hong Kong).
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request ModifyManagedInstanceRequest
  * @return ModifyManagedInstanceResponse
 */
async function modifyManagedInstance(request: ModifyManagedInstanceRequest): ModifyManagedInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyManagedInstanceWithOptions(request, runtime);
}

model ModifyNetworkInterfaceAttributeRequest {
  description?: string(name='Description', description='The description of the ENI. The description must be 2 to 255 characters in length and cannot start with [http:// or https://](http://https://。).

This parameter is left empty by default.', example='testDescription'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp67acfmxazb4p****'),
  networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of the ENI. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with [http:// or https:// ](http://https://。、（:）、（\\_）（-）。).

This parameter is left empty by default.', example='eniTestName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  queueNumber?: int32(name='QueueNumber', description='The number of queues supported by the ENI. Valid values: 1 to 2048.

*   You can change only the number of queues supported by the secondary ENI.
*   You can change the number of queues supported by the secondary ENI only when the ENI is in the `Available` state or the ENI is attached (`InUse`) to an instance that is in the `Stopped` state.
*   The number of queues supported by the secondary ENI cannot exceed the maximum number of queues that the instance allows for each ENI. The total number of queues for all ENIs on the instance cannot exceed the queue quota that the instance allows. To query the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation and check the values of `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` in the response.', example='8'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: [ string ](name='SecurityGroupId', description='The ID of security group N to which the secondary ENI finally belongs. If a security group to which the ENI has belonged is in the ID list, that security group is removed from the list. Valid values of N: 1, 2, 3, 4, and 5.

> After you change the security group, the change takes effect after a short delay.'),
}

model ModifyNetworkInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ModifyNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNetworkInterfaceAttributeResponseBody(name='body'),
}

async function modifyNetworkInterfaceAttributeWithOptions(request: ModifyNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.networkInterfaceName)) {
    query['NetworkInterfaceName'] = request.networkInterfaceName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.queueNumber)) {
    query['QueueNumber'] = request.queueNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkInterfaceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNetworkInterfaceAttribute(request: ModifyNetworkInterfaceAttributeRequest): ModifyNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkInterfaceAttributeWithOptions(request, runtime);
}

model ModifyPhysicalConnectionAttributeRequest {
  circuitCode?: string(name='CircuitCode'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  lineOperator?: string(name='LineOperator'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerLocation?: string(name='PeerLocation'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  portType?: string(name='PortType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  bandwidth?: int32(name='bandwidth'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyPhysicalConnectionAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyPhysicalConnectionAttributeResponse
 */
// Deprecated
async function modifyPhysicalConnectionAttributeWithOptions(request: ModifyPhysicalConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyPhysicalConnectionAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.lineOperator)) {
    query['LineOperator'] = request.lineOperator;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerLocation)) {
    query['PeerLocation'] = request.peerLocation;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.portType)) {
    query['PortType'] = request.portType;
  }
  if (!Util.isUnset(request.redundantPhysicalConnectionId)) {
    query['RedundantPhysicalConnectionId'] = request.redundantPhysicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.bandwidth)) {
    query['bandwidth'] = request.bandwidth;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhysicalConnectionAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyPhysicalConnectionAttributeRequest
  * @return ModifyPhysicalConnectionAttributeResponse
 */
// Deprecated
async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhysicalConnectionAttributeWithOptions(request, runtime);
}

model ModifyPrefixListRequest {
  addEntry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block of entry N to be added to the prefix list. Valid values of N: 0 to 200.

Take note of the following items when you add the entries:

*   The number of entries in the prefix list cannot be greater than the maximum number of entries allowed for the prefix list. You can call the [DescribePrefixListAttributes](~~205872~~) operation to query the maximum number of entries in a specific prefix list.
*   You cannot specify duplicate CIDR blocks.
*   The CIDR blocks cannot be the same as the `RemoveEntry.N.Cidr` values.', example='192.168.2.0/24'),
      description?: string(name='Description', description='The description in entry N. The description must be 2 to 32 characters in length and cannot start with `http://` or `https://`. Valid values of N: 0 to 200.', example='Description Sample 01'),
    }
  ](name='AddEntry', description='The entries that to be added to the prefix list.'),
  description?: string(name='Description', description='The description of the prefix list. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='This is description.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  prefixListName?: string(name='PrefixListName', description='The name of the prefix list. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://`, `https://`, `com.aliyun`, or `com.alibabacloud`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-).', example='PrefixListNameSample'),
  regionId?: string(name='RegionId', description='The region ID of the prefix list. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-chengdu'),
  removeEntry?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block of entry N to be deleted from the prefix list. Valid values of N: 0 to 200.

Take note of the following items when you delete the entries:

*   You cannot specify duplicate CIDR blocks.
*   The CIDR blocks cannot be the same as the `AddEntry.N.Cidr` values.', example='192.168.1.0/24'),
    }
  ](name='RemoveEntry', description='The entries that to be deleted from the prefix list.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyPrefixListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='38793DB8-A4B2-4AEC-BFD3-111234E9188D'),
}

model ModifyPrefixListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPrefixListResponseBody(name='body'),
}

/**
  * ## Description
  * *   The specified CIDR block must be valid. For example, 10.0.0.0/8 is a valid CIDR block while 10.0.0.1/8 is not. For more information, see the [What is CIDR?](https://www.alibabacloud.com/help/doc-detail/40637.htm#section-jua-0tj-q5m) section in Network FAQ.
  * *   When you add or delete an entry, you cannot specify duplicate CIDR blocks. Examples:
  *     *   For IPv4 CIDR blocks, you cannot specify the 10.0.0.0/8 CIDR block in two entries. You cannot specify the 10.0.0.1/32 CIDR block in one entry and the 10.0.0.1 CIDR block in another entry. These two CIDR blocks are the same.
  *     *   For IPv6 CIDR blocks, you cannot specify the 2001:fd01:0:0:0:0:0:0/32 CIDR block in one entry and the 2001:fd01::/32 CIDR block in another entry. These two CIDR blocks are the same.
  * *   The CIDR block in an entry to be added cannot the same as that in an entry to be deleted. For example, when you add an entry in which the 10.0.0.0/8 CIDR block is specified, the entry to be deleted cannot have the 10.0.0.0/8 CIDR block specified.
  * *   If you want to modify the description of an entry, you must specify the CIDR block (`AddEntry.N.Cidr`) and new description (`AddEntry.N.Description`) in the entry.
  *
  * @param request ModifyPrefixListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyPrefixListResponse
 */
async function modifyPrefixListWithOptions(request: ModifyPrefixListRequest, runtime: Util.RuntimeOptions): ModifyPrefixListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addEntry)) {
    query['AddEntry'] = request.addEntry;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.prefixListId)) {
    query['PrefixListId'] = request.prefixListId;
  }
  if (!Util.isUnset(request.prefixListName)) {
    query['PrefixListName'] = request.prefixListName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removeEntry)) {
    query['RemoveEntry'] = request.removeEntry;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrefixList',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * *   The specified CIDR block must be valid. For example, 10.0.0.0/8 is a valid CIDR block while 10.0.0.1/8 is not. For more information, see the [What is CIDR?](https://www.alibabacloud.com/help/doc-detail/40637.htm#section-jua-0tj-q5m) section in Network FAQ.
  * *   When you add or delete an entry, you cannot specify duplicate CIDR blocks. Examples:
  *     *   For IPv4 CIDR blocks, you cannot specify the 10.0.0.0/8 CIDR block in two entries. You cannot specify the 10.0.0.1/32 CIDR block in one entry and the 10.0.0.1 CIDR block in another entry. These two CIDR blocks are the same.
  *     *   For IPv6 CIDR blocks, you cannot specify the 2001:fd01:0:0:0:0:0:0/32 CIDR block in one entry and the 2001:fd01::/32 CIDR block in another entry. These two CIDR blocks are the same.
  * *   The CIDR block in an entry to be added cannot the same as that in an entry to be deleted. For example, when you add an entry in which the 10.0.0.0/8 CIDR block is specified, the entry to be deleted cannot have the 10.0.0.0/8 CIDR block specified.
  * *   If you want to modify the description of an entry, you must specify the CIDR block (`AddEntry.N.Cidr`) and new description (`AddEntry.N.Description`) in the entry.
  *
  * @param request ModifyPrefixListRequest
  * @return ModifyPrefixListResponse
 */
async function modifyPrefixList(request: ModifyPrefixListRequest): ModifyPrefixListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrefixListWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest {
  systemDisk?: {
    category?: string(name='Category', description='The new category of the system disk. This parameter is applicable only when you upgrade an instance from a retired instance type to a currently available instance type or when you upgrade a non-I/O optimized instance to an I/O optimized instance. For more information, see [Retired instance types](~~55263~~) and [Instance families](~~25378~~). Valid values:

*   cloud_efficiency: ultra disk.
*   cloud_ssd: standard SSD.', example='cloud_efficiency'),
  }(name='SystemDisk'),
  autoPay?: boolean(name='AutoPay', description='Specifies whether to enable automatic payment when you upgrade the instance type. Valid values:

*   true: enables automatic payment.

    **

    **Make sure that your payment account has sufficient balance. Otherwise, your order becomes invalid and is canceled.** If your account balance is insufficient, you can set the AutoPay parameter to false to generate an unpaid order. Then, you can log on to the ECS console to pay for the order.````

*   false: An order is generated but no payment is made.

Default value: true.

When `OperatorType` is set to `downgrade`, `AutoPay` is ignored.', example='true'),
  clientToken?: string(name='ClientToken', description='The client token that you want to use to ensure the idempotency of the request. You can use the client to generate the value, but make sure that the value is unique among different requests. This value allows only ASCII characters and is up to 64 characters in length. For more information, see [How do I ensure the idempotence of a request?](~~25693~~)', example='123e4567-e89b-12d3-a456-426655440000'),
  disk?: [ 
    {
      category?: string(name='Category', description='>该参数暂未开放使用。', example='null'),
      diskId?: string(name='DiskId', description='>该参数暂未开放使用。', example='null'),
      performanceLevel?: string(name='PerformanceLevel', description='>该参数暂未开放使用。', example='null'),
    }
  ](name='Disk', description='>该参数暂未开放使用。'),
  endTime?: string(name='EndTime', description='The end time of the temporary change. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2018-01-01T12:05Z'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4ph****'),
  instanceType?: string(name='InstanceType', description='The new instance type. For information about available instance types, see [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation.', example='ecs.g5.xlarge'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone', description='Specifies whether to support cross-cluster instance type upgrades.

Default value: false.

When you set `MigrateAcrossZone` to `true` and you upgrade the instance based on the returned information, take note of the following items:

Instances of the classic network type:

*   For retired instance types, when a non-I/O optimized instance is upgraded to an I/O optimized instance, the private IP address, disk device names, and software license codes of the instance are changed. For more information, see [Retired instance types](~~55263~~). For Linux instances, basic disks (cloud) are identified by the prefix xvd. Ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified by the prefix vd.
*   For [instance families available for purchase](~~25378~~), when the instance type of an instance is changed, the private IP address of the instance changes.

Instances of the Virtual Private Cloud (VPC) type: For retired instance types, when a non-I/O optimized instance is upgraded to an I/O optimized instance, the disk device names and software license codes of the instance are changed. For Linux instances, basic disks (cloud) are identified by the prefix xvd. Ultra disks (cloud_efficiency) and standard SSDs (cloud_ssd) are identified by the prefix vd.', example='false'),
  modifyMode?: string(name='ModifyMode', description='>该参数暂未开放使用。', example='null'),
  operatorType?: string(name='OperatorType', description='The type of the change to the instance. Valid values:

>  This parameter is optional. The system can automatically determine whether the instance change is an upgrade or a downgrade. If you want to specify this parameter, refer to the following valid values of the parameter.

*   upgrade: upgrades the instance type. Make sure that the balance in your account is sufficient.
*   downgrade: downgrades the instance type. When the new instance type specified by the `InstanceType` parameter has lower specifications than the current instance type, set `OperatorType` to downgrade.

>  You can refer to the preceding usage notes on how to upgrade or downgrade the instance type.', example='upgrade'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  rebootTime?: string(name='RebootTime', description='The restart time of the instance. Specify the time in the [ISO 8601](~~25696~~) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2018-01-01T12:05Z'),
  rebootWhenFinished?: boolean(name='RebootWhenFinished', description='Specifies whether to restart the instance immediately after the instance type is changed. Valid values:

*   true: restart the instance immediately after the instance type is changed.
*   false: does not restart the instance immediately after the instance type is changed.

Default value: false.

>  If the instance is in the **Stopping** state, the instance status remains unchanged and no operations are performed after the instance type is change regardless of whether you set the `RebootWhenFinished` parameter to true.', example='false'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='1234567890'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

/**
  * Before you call this operation, we recommend that you familiarize yourself with the billing methods, pricing schedule, and refund rules of [ECS](https://www.alibabacloud.com/product/ecs#pricing). For more information, see [Refund rules for real-time configuration downgrade](~~201955~~).
  * Before you change the instance type of a subscription instance, you can call the [DescribeResourcesModification](~~66187~~) operation to query the instance types to which you can change the instance. You can use ECS SDK for Python to query the instance types to which you can change. For more information, see [Query available resources for configuration changes](~~109517~~).
  * When you call this operation, take note of the following items:
  * *   You cannot change the instance type of an expired instance. Renew the instance and try again.
  * *   When you downgrade the instance type of an instance, take note of the following items:
  *     *   The instance must be in the `Stopped` state.****
  *     *   You must specify the operation type by setting `OperatorType` to downgrade.
  *     *   You can downgrade the configurations of an instance up to three times. Therefore, up to three refunds for the price difference can be made for an instance. Downgrade operations include instance type downgrades, bandwidth configuration downgrades, and the change of the disk billing method from subscription to pay-as-you-go.
  *     *   The price difference is refunded to the payment account you used. Vouchers that have been redeemed during purchase are not refundable.
  * *   This operation is asynchronous. It takes 5 to 10 seconds for the instance type to change. You must restart the instance by calling the RebootInstance operation or by using the ECS console for the instance type change to take effect. If you restart only the operating system of the instance, the instance type change does not take effect.
  *     *   If the instance is in the **Stopped** state, you only need to start the instance. You do not need to restart the instance after it enters the Running state.
  *     *   If `RebootWhenFinished` is set to true for the instance, you do not need to manually restart the instance.
  *
  * @param request ModifyPrepayInstanceSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyPrepayInstanceSpecResponse
 */
async function modifyPrepayInstanceSpecWithOptions(request: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.disk)) {
    query['Disk'] = request.disk;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.migrateAcrossZone)) {
    query['MigrateAcrossZone'] = request.migrateAcrossZone;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.operatorType)) {
    query['OperatorType'] = request.operatorType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.rebootTime)) {
    query['RebootTime'] = request.rebootTime;
  }
  if (!Util.isUnset(request.rebootWhenFinished)) {
    query['RebootWhenFinished'] = request.rebootWhenFinished;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrepayInstanceSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, we recommend that you familiarize yourself with the billing methods, pricing schedule, and refund rules of [ECS](https://www.alibabacloud.com/product/ecs#pricing). For more information, see [Refund rules for real-time configuration downgrade](~~201955~~).
  * Before you change the instance type of a subscription instance, you can call the [DescribeResourcesModification](~~66187~~) operation to query the instance types to which you can change the instance. You can use ECS SDK for Python to query the instance types to which you can change. For more information, see [Query available resources for configuration changes](~~109517~~).
  * When you call this operation, take note of the following items:
  * *   You cannot change the instance type of an expired instance. Renew the instance and try again.
  * *   When you downgrade the instance type of an instance, take note of the following items:
  *     *   The instance must be in the `Stopped` state.****
  *     *   You must specify the operation type by setting `OperatorType` to downgrade.
  *     *   You can downgrade the configurations of an instance up to three times. Therefore, up to three refunds for the price difference can be made for an instance. Downgrade operations include instance type downgrades, bandwidth configuration downgrades, and the change of the disk billing method from subscription to pay-as-you-go.
  *     *   The price difference is refunded to the payment account you used. Vouchers that have been redeemed during purchase are not refundable.
  * *   This operation is asynchronous. It takes 5 to 10 seconds for the instance type to change. You must restart the instance by calling the RebootInstance operation or by using the ECS console for the instance type change to take effect. If you restart only the operating system of the instance, the instance type change does not take effect.
  *     *   If the instance is in the **Stopped** state, you only need to start the instance. You do not need to restart the instance after it enters the Running state.
  *     *   If `RebootWhenFinished` is set to true for the instance, you do not need to manually restart the instance.
  *
  * @param request ModifyPrepayInstanceSpecRequest
  * @return ModifyPrepayInstanceSpecResponse
 */
async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model ModifyReservedInstanceAttributeRequest {
  description?: string(name='Description', description='The error code.', example='ri-example'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the reserved instance.', example='cn-hangzhou'),
  reservedInstanceId?: string(name='ReservedInstanceId', description='The new name of the reserved instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='ecsri-uf61hdhue4kcorqsk****'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='The new description of the reserved instance. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.

This parameter is empty by default.', example='testReservedInstanceName'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyReservedInstanceAttributeResponseBody = {
  code?: string(name='Code', description='Modifies the attributes of a reserved instance, such as its name and description.', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The error message for this instance operation. The return value Success indicates that this operation is successful. For more information, see the "Error codes" section in this topic.', example='Success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ModifyReservedInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservedInstanceAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAttributeWithOptions(request: ModifyReservedInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyReservedInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservedInstanceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReservedInstanceAttribute(request: ModifyReservedInstanceAttributeRequest): ModifyReservedInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstanceAttributeWithOptions(request, runtime);
}

model ModifyReservedInstanceAutoRenewAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The auto-renewal cycle.

Valid values: 1 and 3.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the auto-renewal duration.

Valid values: Year and Month.', example='Month'),
  regionId?: string(name='RegionId', description='The region ID of the reserved instances. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  renewalStatus?: string(name='RenewalStatus', description='Specifies whether to automatically renew the reserved instances. Valid values:

*   AutoRenewal: automatically renews the reserved instances.
*   Normal: manually renews the reserved instances.', example='AutoRenewal'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='The IDs of the reserved instances.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyReservedInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model ModifyReservedInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservedInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAutoRenewAttributeWithOptions(request: ModifyReservedInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyReservedInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservedInstanceAutoRenewAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyReservedInstanceAutoRenewAttribute(request: ModifyReservedInstanceAutoRenewAttributeRequest): ModifyReservedInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyReservedInstancesRequest {
  configuration?: [ 
    {
      instanceAmount?: int32(name='InstanceAmount', description='The ID of the request.', example='1'),
      instanceType?: string(name='InstanceType', description='The number of pay-as-you-go instances of the same instance type that the reserved instance can match. The value of this parameter must be greater than or equal to 1. Valid values of N: 1 to 100.', example='ecs.c5.4xlarge'),
      reservedInstanceName?: string(name='ReservedInstanceName', description='The zone ID of reserved instance N. Valid values of N: 1 to 100.

This parameter is required when `Scope` is set to `Zone`.

You can call the [DescribeZones](~~25609~~) operation to query the most recent zone list.', example='testReservedInstanceName'),
      scope?: string(name='Scope', description='The instance type that reserved instance N can match. Valid values of N: 1 to 100.

> The supported instance types are regularly updated. For more information, see the "Attributes" section of [Overview](~~100370~~).', example='Zone'),
      zoneId?: string(name='ZoneId', description='The scope of reserved instance N. Valid values:

*   Region
*   Zone

Valid values of N: 1 to 100.

Default value: Region.', example='cn-hangzhou-i'),
    }
  ](name='Configuration', description='The configurations of reserved instance N.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The IDs of reserved instances. Valid values of N: 1 to 20.', example='cn-hangzhou'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='The IDs of reserved instances. Valid values of N: 1 to 20.', example='ReservedInstanceId.1="ecsri-bp1cx3****",ReservedInstanceId.2="ecsri-bp15xx2****"......'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyReservedInstancesResponseBody = {
  requestId?: string(name='RequestId', description='Details about the reserved instance.', example='ED9E4A5F-FF4D-4C96-BE80-6B4227060DD7'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets', description='The ID of the reserved instance.'),
}

model ModifyReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyReservedInstancesResponseBody(name='body'),
}

/**
  * The region ID of the reserved instance.
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.
  *
  * @param request ModifyReservedInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyReservedInstancesResponse
 */
async function modifyReservedInstancesWithOptions(request: ModifyReservedInstancesRequest, runtime: Util.RuntimeOptions): ModifyReservedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.configuration)) {
    query['Configuration'] = request.configuration;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyReservedInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the reserved instance.
  * You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.
  *
  * @param request ModifyReservedInstancesRequest
  * @return ModifyReservedInstancesResponse
 */
async function modifyReservedInstances(request: ModifyReservedInstancesRequest): ModifyReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstancesWithOptions(request, runtime);
}

model ModifyRouterInterfaceAttributeRequest {
  description?: string(name='Description'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
  name?: string(name='Name'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId'),
  oppositeRouterId?: string(name='OppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyRouterInterfaceAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRouterInterfaceAttributeResponse
 */
// Deprecated
async function modifyRouterInterfaceAttributeWithOptions(request: ModifyRouterInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.healthCheckSourceIp)) {
    query['HealthCheckSourceIp'] = request.healthCheckSourceIp;
  }
  if (!Util.isUnset(request.healthCheckTargetIp)) {
    query['HealthCheckTargetIp'] = request.healthCheckTargetIp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.oppositeInterfaceId)) {
    query['OppositeInterfaceId'] = request.oppositeInterfaceId;
  }
  if (!Util.isUnset(request.oppositeInterfaceOwnerId)) {
    query['OppositeInterfaceOwnerId'] = request.oppositeInterfaceOwnerId;
  }
  if (!Util.isUnset(request.oppositeRouterId)) {
    query['OppositeRouterId'] = request.oppositeRouterId;
  }
  if (!Util.isUnset(request.oppositeRouterType)) {
    query['OppositeRouterType'] = request.oppositeRouterType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouterInterfaceAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyRouterInterfaceAttributeRequest
  * @return ModifyRouterInterfaceAttributeResponse
 */
// Deprecated
async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceAttributeWithOptions(request, runtime);
}

model ModifyRouterInterfaceSpecRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
  spec?: string(name='Spec'),
  userCidr?: string(name='UserCidr'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  spec?: string(name='Spec'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyRouterInterfaceSpecRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyRouterInterfaceSpecResponse
 */
// Deprecated
async function modifyRouterInterfaceSpecWithOptions(request: ModifyRouterInterfaceSpecRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceSpecResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.routerInterfaceId)) {
    query['RouterInterfaceId'] = request.routerInterfaceId;
  }
  if (!Util.isUnset(request.spec)) {
    query['Spec'] = request.spec;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyRouterInterfaceSpec',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyRouterInterfaceSpecRequest
  * @return ModifyRouterInterfaceSpecResponse
 */
// Deprecated
async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceSpecWithOptions(request, runtime);
}

model ModifySecurityGroupAttributeRequest {
  description?: string(name='Description', description='The new description of the security group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.

This parameter is empty by default.', example='TestDescription'),
  ownerAccount?: string(name='OwnerAccount', example='ECSforCloud@Alibaba.com'),
  ownerId?: long(name='OwnerId', example='155780923770'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='ECSforCloud'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='155780923770'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
  securityGroupName?: string(name='SecurityGroupName', description='The new name of the security group. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).

This parameter is empty by default.', example='SecurityGroupTestName'),
}

model ModifySecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityGroupAttributeResponseBody(name='body'),
}

async function modifySecurityGroupAttributeWithOptions(request: ModifySecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupName)) {
    query['SecurityGroupName'] = request.securityGroupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupAttributeWithOptions(request, runtime);
}

model ModifySecurityGroupEgressRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.**** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the security group rule. The description must be 1 to 512 characters in length.', example='This is a new securitygroup rule.'),
  destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is empty by default.', example='10.0.0.0/8'),
  destGroupId?: string(name='DestGroupId', description='The ID of the destination security group. You must specify at least one of `DestGroupId` and `DestCidrIp`.

*   At least one of DestGroupId, DestCidrIp, Ipv6DestCidrIp, and DestPrefixListId must be specified.
*   If DestGroupId is specified but DestCidrIp is not specified, the NicType parameter can be set only to intranet.
*   If both DestGroupId and DestCidrIp are specified, DestCidrIp takes precedence.', example='sg-bp67acfmxa123b****'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group when you set security group rule N across accounts.', example='EcsforCloud@Alibaba.com'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the destination security group when you set security group rule N across accounts.', example='1234567890'),
  destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

If you specify `DestCidrIp`, `Ipv6DestCidrIp`, or `DestGroupId`, this parameter is ignored.', example='pl-x1j1k5ykzqlixdcy****'),
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol. The values of this parameter are case-insensitive. Valid values:

*   ICMP
*   GRE
*   TCP
*   UDP
*   ALL: all protocols are supported.', example='tcp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

> Only the IP addresses of instances in virtual private clouds (VPCs) are supported. You cannot specify both Ipv6DestCidrIp and `DestCidrIp`.

This parameter is empty by default.', example='2001:db8:1233:1a00::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block. IPv6 CIDR blocks and addresses are supported.

> Only the IP addresses of instances in VPCs are supported. You cannot specify both Ipv6SourceCidrIp and `SourceCidrIp`.

This parameter is empty by default.', example='2001:db8:1234:1a00::***'),
  nicType?: string(name='NicType', description='You cannot modify this parameter when you modify a security group rule by specifying its ID.\\
You can add a new rule that meets your business requirements and delete the original rule.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policy?: string(name='Policy', description='The action of a security group rule that determines whether to allow inbound access. Valid values:

*   accept: allows inbound access.
*   drop: denies inbound access and does not return responses.

Default value: accept.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.', example='80/80'),
  priority?: string(name='Priority', description='The priority of the security group rule. Valid values: 1 to 100.

Default value: 1.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
  securityGroupRuleId?: string(name='SecurityGroupRuleId', description='The ID of the security group rule.\\
This parameter is required when you modify a security group rule based on the security group rule ID.', example='sgr-bp67acfmxazb4q****'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block. IPv4 CIDR blocks and addresses are supported.

This parameter is empty by default.', example='10.0.0.0/8'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol for the security group rule. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.', example='80/80'),
}

model ModifySecurityGroupEgressRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupEgressRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityGroupEgressRuleResponseBody(name='body'),
}

/**
  * In security group-related API documents, inbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you modify the rules of a security group by specifying the rule IDs, take note of the following limits:
  * *   A security group authorization object can be one of the following types: IP address or CIDR block, security group, and prefix list. The type of an existing security group authorization object cannot be modified. If the original authorization object is an IP address, you can change the authorization object to a different IP address or CIDR block, but you cannot change the authorization object to a security group or a prefix list.
  * *   The IP address family of the authorization object cannot be changed. For example, if the original authorization object is an IPv4 CIDR block, you cannot change the authorization object to an IPv6 CIDR block. If the original authorization object is a prefix list of an IPv4 address family, you cannot change the authorization object to a prefix list of an IPv6 address family.
  * *   The modified security group rule cannot be the same as other existing rules.
  * *   You cannot delete the value of a non-empty parameter. We recommend that you create a new rule and delete the original rule.
  *
  * @param request ModifySecurityGroupEgressRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityGroupEgressRuleResponse
 */
async function modifySecurityGroupEgressRuleWithOptions(request: ModifySecurityGroupEgressRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupEgressRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.destGroupId)) {
    query['DestGroupId'] = request.destGroupId;
  }
  if (!Util.isUnset(request.destGroupOwnerAccount)) {
    query['DestGroupOwnerAccount'] = request.destGroupOwnerAccount;
  }
  if (!Util.isUnset(request.destGroupOwnerId)) {
    query['DestGroupOwnerId'] = request.destGroupOwnerId;
  }
  if (!Util.isUnset(request.destPrefixListId)) {
    query['DestPrefixListId'] = request.destPrefixListId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupRuleId)) {
    query['SecurityGroupRuleId'] = request.securityGroupRuleId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupEgressRule',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In security group-related API documents, inbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you modify the rules of a security group by specifying the rule IDs, take note of the following limits:
  * *   A security group authorization object can be one of the following types: IP address or CIDR block, security group, and prefix list. The type of an existing security group authorization object cannot be modified. If the original authorization object is an IP address, you can change the authorization object to a different IP address or CIDR block, but you cannot change the authorization object to a security group or a prefix list.
  * *   The IP address family of the authorization object cannot be changed. For example, if the original authorization object is an IPv4 CIDR block, you cannot change the authorization object to an IPv6 CIDR block. If the original authorization object is a prefix list of an IPv4 address family, you cannot change the authorization object to a prefix list of an IPv6 address family.
  * *   The modified security group rule cannot be the same as other existing rules.
  * *   You cannot delete the value of a non-empty parameter. We recommend that you create a new rule and delete the original rule.
  *
  * @param request ModifySecurityGroupEgressRuleRequest
  * @return ModifySecurityGroupEgressRuleResponse
 */
async function modifySecurityGroupEgressRule(request: ModifySecurityGroupEgressRuleRequest): ModifySecurityGroupEgressRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupEgressRuleWithOptions(request, runtime);
}

model ModifySecurityGroupPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  innerAccessPolicy?: string(name='InnerAccessPolicy', description='The internal access policy of the security group. Valid values:

*   Accept: All instances in the security group can communicate with each other.
*   Drop: All instances in the security group are isolated from each other.

The value of this parameter is not case-sensitive.', example='Drop'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4ph****'),
}

model ModifySecurityGroupPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CEF72CEB-54B6-4AE8-B225-F876FF7BA984'),
}

model ModifySecurityGroupPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityGroupPolicyResponseBody(name='body'),
}

/**
  * Take note of the following items:
  * *   When InnerAccessPolicy is set to Accept for a security group, the instances in the security group can communicate with each other. In this case, the Accept internal access control policy takes precedence over user-created security group rules to keep instances in the security group accessible to each other.
  * *   When InnerAccessPolicy is set to Drop for a security group, the instances in the security group are isolated from each other. In this case, user-created security group rules take precedence over the Drop internal access control policy and can be used to allow access between the instances. For example, you can call the [AuthorizeSecurityGroup](~~25554~~) operation to create an inbound security group rule that allows the instances in the security group to communicate with each other.
  * *   You can call the [DescribeSecurityGroupAttribute](~~25555~~) operation to query the internal access policy of a security group.
  *
  * @param request ModifySecurityGroupPolicyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityGroupPolicyResponse
 */
async function modifySecurityGroupPolicyWithOptions(request: ModifySecurityGroupPolicyRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.innerAccessPolicy)) {
    query['InnerAccessPolicy'] = request.innerAccessPolicy;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupPolicy',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Take note of the following items:
  * *   When InnerAccessPolicy is set to Accept for a security group, the instances in the security group can communicate with each other. In this case, the Accept internal access control policy takes precedence over user-created security group rules to keep instances in the security group accessible to each other.
  * *   When InnerAccessPolicy is set to Drop for a security group, the instances in the security group are isolated from each other. In this case, user-created security group rules take precedence over the Drop internal access control policy and can be used to allow access between the instances. For example, you can call the [AuthorizeSecurityGroup](~~25554~~) operation to create an inbound security group rule that allows the instances in the security group to communicate with each other.
  * *   You can call the [DescribeSecurityGroupAttribute](~~25555~~) operation to query the internal access policy of a security group.
  *
  * @param request ModifySecurityGroupPolicyRequest
  * @return ModifySecurityGroupPolicyResponse
 */
async function modifySecurityGroupPolicy(request: ModifySecurityGroupPolicyRequest): ModifySecurityGroupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupPolicyWithOptions(request, runtime);
}

model ModifySecurityGroupRuleRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the security group rule. The description must be 1 to 512 characters in length.', example='This is a new security group rule.'),
  destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. IPv4 CIDR blocks and addresses are supported.

By default, this parameter is left empty.', example='10.0.0.0/8'),
  ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of the security group rule. The values of this parameter are not case-sensitive. Valid values:

*   ICMP
*   GRE
*   TCP
*   UDP
*   ALL: All protocols are supported.', example='all'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block. IPv6 CIDR blocks and addresses are supported.

> Only the IP addresses of instances in VPCs are supported. You cannot specify both Ipv6DestCidrIp and `DestCidrIp`.

By default, this parameter is left empty.', example='2001:db8:1234:1a00::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block to which you want to control access. IPv6 CIDR blocks and addresses are supported.

> Only the IP addresses of instances in virtual private clouds (VPCs) are supported. You cannot specify both Ipv6SourceCidrIp and `SourceCidrIp`.

By default, this parameter is left empty.', example='2001:db8:1233:1a00::***'),
  nicType?: string(name='NicType', description='You cannot modify this parameter when you modify a security group rule by specifying its ID.\\
You can add a new rule that meets your business requirements and delete the original rule.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  policy?: string(name='Policy', description='The action of the security group rule that determines whether to allow access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses.

Default value: accept.', example='accept'),
  portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.', example='80/80'),
  priority?: string(name='Priority', description='The priority of the security group rule. Valid values: 1 to 100.

Default value: 1.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The security group ID.', example='sg-bp67acfmxazb4p****'),
  securityGroupRuleId?: string(name='SecurityGroupRuleId', description='The security group rule ID.\\
This parameter is required when you modify a security group rule based on the security group rule ID.', example='sgr-bp67acfmxa123b***'),
  sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block to which you want to control access. IPv4 CIDR blocks and addresses are supported.

By default, this parameter is left empty.', example='10.0.0.0/8'),
  sourceGroupId?: string(name='SourceGroupId', description='The source security group ID. You must specify either `SourceGroupId` or `SourceCidrIp` or specify both of them.

*   If `SourceGroupId` is specified but `SourceCidrIp` is not specified, the value of `NicType` must be set to intranet.
*   If both `SourceGroupId` and `SourceCidrIp` are specified, the value of `SourceCidrIp` prevails by default.', example='sg-bp67acfmxa123b****'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group when you configure a security group rule across accounts.

*   If both `SourceGroupOwnerId` and `SourceGroupOwnerAccount` are empty, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, `SourceGroupOwnerAccount` is ignored.', example='EcsforCloud@Alibaba.com'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the source security group when you configure a security group rule across accounts.

*   If both `SourceGroupOwnerId` and `SourceGroupOwnerAccount` are empty, access permissions are configured for another security group managed by your account.
*   If `SourceCidrIp` is specified, `SourceGroupOwnerId` is ignored.', example='12345678910'),
  sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol. Valid values:

*   If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
*   If you set IpProtocol to ICMP, the port number range is -1/-1.
*   If you set IpProtocol to GRE, the port number range is -1/-1.
*   If you set IpProtocol to ALL, the port number range is -1/-1.', example='80/80'),
  sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list to which you want to control access. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

If you specify `SourceCidrIp`, `Ipv6SourceCidrIp`, or `SourceGroupId`, this parameter is ignored.', example='pl-x1j1k5ykzqlixdcy****'),
}

model ModifySecurityGroupRuleResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySecurityGroupRuleResponseBody(name='body'),
}

/**
  * In the security group-related API documents, inbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you modify the rules of a security group by specifying the rule IDs, take note of the following limits:
  * *   A security group authorization object can be one of the following types: IP address or CIDR block, security group, or prefix list. The type of an existing security group authorization object cannot be changed. If the original authorization object is an IP address, you can change it to another IP address or a CIDR block, but not to a security group or prefix list.
  * *   The IP address family of the authorization object cannot be changed. For example, if the original authorization object is an IPv4 CIDR block, you cannot change it to an IPv6 CIDR block. If the original authorization object is a prefix list of an IPv4 address family, you cannot change it to a prefix list of an IPv6 address family.
  * *   The modified security group rule cannot be the same as other existing rules.
  * *   You cannot delete the value of a non-empty parameter. We recommend that you create a new rule and delete the original rule.
  *
  * @param request ModifySecurityGroupRuleRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifySecurityGroupRuleResponse
 */
async function modifySecurityGroupRuleWithOptions(request: ModifySecurityGroupRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupRuleId)) {
    query['SecurityGroupRuleId'] = request.securityGroupRuleId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourceGroupId)) {
    query['SourceGroupId'] = request.sourceGroupId;
  }
  if (!Util.isUnset(request.sourceGroupOwnerAccount)) {
    query['SourceGroupOwnerAccount'] = request.sourceGroupOwnerAccount;
  }
  if (!Util.isUnset(request.sourceGroupOwnerId)) {
    query['SourceGroupOwnerId'] = request.sourceGroupOwnerId;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.sourcePrefixListId)) {
    query['SourcePrefixListId'] = request.sourcePrefixListId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecurityGroupRule',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In the security group-related API documents, inbound traffic refers to the traffic that is sent by the source device and received at the destination device.
  * When you modify the rules of a security group by specifying the rule IDs, take note of the following limits:
  * *   A security group authorization object can be one of the following types: IP address or CIDR block, security group, or prefix list. The type of an existing security group authorization object cannot be changed. If the original authorization object is an IP address, you can change it to another IP address or a CIDR block, but not to a security group or prefix list.
  * *   The IP address family of the authorization object cannot be changed. For example, if the original authorization object is an IPv4 CIDR block, you cannot change it to an IPv6 CIDR block. If the original authorization object is a prefix list of an IPv4 address family, you cannot change it to a prefix list of an IPv6 address family.
  * *   The modified security group rule cannot be the same as other existing rules.
  * *   You cannot delete the value of a non-empty parameter. We recommend that you create a new rule and delete the original rule.
  *
  * @param request ModifySecurityGroupRuleRequest
  * @return ModifySecurityGroupRuleResponse
 */
async function modifySecurityGroupRule(request: ModifySecurityGroupRuleRequest): ModifySecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupRuleWithOptions(request, runtime);
}

model ModifySnapshotAttributeRequest {
  description?: string(name='Description', description='The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).', example='testDescription'),
  disableInstantAccess?: boolean(name='DisableInstantAccess', description='Specifies whether to disable the instant access feature. Valid values:

*   true: disables the instant access feature.
*   false: does not disable the instant access feature.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount', example='Hide'),
  ownerId?: long(name='OwnerId', example='111'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='Hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot.', example='s-bp199lyny9bb47pa****'),
  snapshotName?: string(name='SnapshotName', description='The name of the snapshot. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with [http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)

The name cannot start with auto because snapshots whose names start with auto are recognized as automatic snapshots.', example='testSnapshotName'),
}

model ModifySnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifySnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySnapshotAttributeResponseBody(name='body'),
}

async function modifySnapshotAttributeWithOptions(request: ModifySnapshotAttributeRequest, runtime: Util.RuntimeOptions): ModifySnapshotAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.disableInstantAccess)) {
    query['DisableInstantAccess'] = request.disableInstantAccess;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotName)) {
    query['SnapshotName'] = request.snapshotName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySnapshotAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotAttributeWithOptions(request, runtime);
}

model ModifySnapshotGroupRequest {
  description?: string(name='Description', description='The new name of the snapshot-consistent group. The name must be 2 to 128 characters in length. It can contain letters, digits, periods (.), underscores (\\_), hyphens (-), and colons (:). It must start with a letter or a digit and cannot start with `http://` or `https://`.', example='This is new description'),
  name?: string(name='Name', description='The ID of the snapshot-consistent group. You can call the [DescribeSnapshotGroups](~~210940~~) operation to query the IDs of one or more snapshot-consistent groups.', example='testName02'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The operation that you want to perform. Set the value to **ModifySnapshotGroup**.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotGroupId?: string(name='SnapshotGroupId', description='The region ID of the snapshot-consistent group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='ssg-j6ciyh3k52qp7ovm****'),
}

model ModifySnapshotGroupResponseBody = {
  requestId?: string(name='RequestId', description='The new description of the snapshot-consistent group. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='A00B5E55-76B7-42C8-8A80-AF10E980DCC7'),
}

model ModifySnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifySnapshotGroupResponseBody(name='body'),
}

async function modifySnapshotGroupWithOptions(request: ModifySnapshotGroupRequest, runtime: Util.RuntimeOptions): ModifySnapshotGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotGroupId)) {
    query['SnapshotGroupId'] = request.snapshotGroupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySnapshotGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySnapshotGroup(request: ModifySnapshotGroupRequest): ModifySnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotGroupWithOptions(request, runtime);
}

model ModifyStorageCapacityUnitAttributeRequest {
  description?: string(name='Description', description='The new description of the SCU. The description must be 2 to 256 characters in length and cannot start with [http:// or https://.](http://https://。)', example='testNewScuDescription'),
  name?: string(name='Name', description='The new name of the SCU. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with [http:// or https://. It can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).](http://https://。、（:）、（\\_）（-）。)', example='testNewScuName'),
  ownerAccount?: string(name='OwnerAccount', example='hide'),
  ownerId?: long(name='OwnerId', example='111'),
  regionId?: string(name='RegionId', description='The region ID of the SCU. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  storageCapacityUnitId?: string(name='StorageCapacityUnitId', description='The ID of the SCU.', example='scu-bp67acfmxazb4p****'),
}

model ModifyStorageCapacityUnitAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ModifyStorageCapacityUnitAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStorageCapacityUnitAttributeResponseBody(name='body'),
}

async function modifyStorageCapacityUnitAttributeWithOptions(request: ModifyStorageCapacityUnitAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageCapacityUnitAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageCapacityUnitId)) {
    query['StorageCapacityUnitId'] = request.storageCapacityUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStorageCapacityUnitAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStorageCapacityUnitAttribute(request: ModifyStorageCapacityUnitAttributeRequest): ModifyStorageCapacityUnitAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageCapacityUnitAttributeWithOptions(request, runtime);
}

model ModifyStorageSetAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The value of **ClientToken** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the storage set.', example='testStorageSetDescription'),
  ownerAccount?: string(name='OwnerAccount', example='hide'),
  ownerId?: long(name='OwnerId', example='111'),
  regionId?: string(name='RegionId', description='The region ID of the storage set. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', example='hide'),
  resourceOwnerId?: long(name='ResourceOwnerId', example='111'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4ph****'),
  storageSetName?: string(name='StorageSetName', description='The name of the storage set.', example='testStorageSetName'),
}

model ModifyStorageSetAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='04F0F334-1335-436C-A1D7-6C044FE73369'),
}

model ModifyStorageSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyStorageSetAttributeResponseBody(name='body'),
}

async function modifyStorageSetAttributeWithOptions(request: ModifyStorageSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageSetAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetName)) {
    query['StorageSetName'] = request.storageSetName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyStorageSetAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyStorageSetAttribute(request: ModifyStorageSetAttributeRequest): ModifyStorageSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageSetAttributeWithOptions(request, runtime);
}

model ModifyUserBusinessBehaviorRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  statusKey?: string(name='statusKey'),
  statusValue?: string(name='statusValue'),
}

model ModifyUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserBusinessBehaviorResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyUserBusinessBehaviorRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyUserBusinessBehaviorResponse
 */
// Deprecated
async function modifyUserBusinessBehaviorWithOptions(request: ModifyUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): ModifyUserBusinessBehaviorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.statusKey)) {
    query['statusKey'] = request.statusKey;
  }
  if (!Util.isUnset(request.statusValue)) {
    query['statusValue'] = request.statusValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserBusinessBehavior',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyUserBusinessBehaviorRequest
  * @return ModifyUserBusinessBehaviorResponse
 */
// Deprecated
async function modifyUserBusinessBehavior(request: ModifyUserBusinessBehaviorRequest): ModifyUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserBusinessBehaviorWithOptions(request, runtime);
}

model ModifyVRouterAttributeRequest {
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VRouterId?: string(name='VRouterId'),
  VRouterName?: string(name='VRouterName'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVRouterAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyVRouterAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyVRouterAttributeResponse
 */
// Deprecated
async function modifyVRouterAttributeWithOptions(request: ModifyVRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVRouterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.VRouterId)) {
    query['VRouterId'] = request.VRouterId;
  }
  if (!Util.isUnset(request.VRouterName)) {
    query['VRouterName'] = request.VRouterName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVRouterAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyVRouterAttributeRequest
  * @return ModifyVRouterAttributeResponse
 */
// Deprecated
async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVRouterAttributeWithOptions(request, runtime);
}

model ModifyVSwitchAttributeRequest {
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
  vSwitchName?: string(name='VSwitchName'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyVSwitchAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyVSwitchAttributeResponse
 */
// Deprecated
async function modifyVSwitchAttributeWithOptions(request: ModifyVSwitchAttributeRequest, runtime: Util.RuntimeOptions): ModifyVSwitchAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vSwitchName)) {
    query['VSwitchName'] = request.vSwitchName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVSwitchAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyVSwitchAttributeRequest
  * @return ModifyVSwitchAttributeResponse
 */
// Deprecated
async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVSwitchAttributeWithOptions(request, runtime);
}

model ModifyVirtualBorderRouterAttributeRequest {
  circuitCode?: string(name='CircuitCode'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  localGatewayIp?: string(name='LocalGatewayIp'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerGatewayIp?: string(name='PeerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vbrId?: string(name='VbrId'),
  vlanId?: int32(name='VlanId'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyVirtualBorderRouterAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyVirtualBorderRouterAttributeResponse
 */
// Deprecated
async function modifyVirtualBorderRouterAttributeWithOptions(request: ModifyVirtualBorderRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVirtualBorderRouterAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.circuitCode)) {
    query['CircuitCode'] = request.circuitCode;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.localGatewayIp)) {
    query['LocalGatewayIp'] = request.localGatewayIp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.peerGatewayIp)) {
    query['PeerGatewayIp'] = request.peerGatewayIp;
  }
  if (!Util.isUnset(request.peeringSubnetMask)) {
    query['PeeringSubnetMask'] = request.peeringSubnetMask;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  if (!Util.isUnset(request.vlanId)) {
    query['VlanId'] = request.vlanId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVirtualBorderRouterAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyVirtualBorderRouterAttributeRequest
  * @return ModifyVirtualBorderRouterAttributeResponse
 */
// Deprecated
async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualBorderRouterAttributeWithOptions(request, runtime);
}

model ModifyVpcAttributeRequest {
  cidrBlock?: string(name='CidrBlock'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vpcId?: string(name='VpcId'),
  vpcName?: string(name='VpcName'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcAttributeResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ModifyVpcAttributeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyVpcAttributeResponse
 */
// Deprecated
async function modifyVpcAttributeWithOptions(request: ModifyVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpcAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cidrBlock)) {
    query['CidrBlock'] = request.cidrBlock;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcAttribute',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ModifyVpcAttributeRequest
  * @return ModifyVpcAttributeResponse
 */
// Deprecated
async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcAttributeWithOptions(request, runtime);
}

model PurchaseReservedInstancesOfferingRequest {
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the reserved instance. Default value: false. Valid values:

true: enables auto-renewal for the reserved instance. false: does not enable auto-renewal for the reserved instance.', example='true'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal duration of the reserved instance. Unit: months. This parameter takes effect only when AutoRenew is set to true.

Valid values: 1, 12, 36, and 60.

Default value when PeriodUnit is set to Month: 1.

Default value when PeriodUnit is set to Year: 12.', example='1'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the reserved instance. The description can be 2 to 256 characters in length and cannot start with [http:// or https://](http://https://。).

This parameter is left empty by default.', example='testDescription'),
  instanceAmount?: int32(name='InstanceAmount', description='The number of pay-as-you-go instances of the same instance type that the reserved instance can match at the same time. Valid values: 1 to 50.

For example, if you set the InstanceAmount parameter to 3 and the InstanceType parameter to ecs.g5.large, the reserved instance can be matched three ecs.g5.large pay-as-you-go instances at the same time.', example='3'),
  instanceType?: string(name='InstanceType', description='The type of the reserved instance. For more information, see [Instance family](~~25378~~).', example='ecs.g5.large'),
  offeringType?: string(name='OfferingType', description='The payment option of the reserved instance. Valid values:

*   No Upfront
*   Partial Upfront
*   All Upfront

Default value: All Upfront.', example='All Upfront'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The validity period of the reserved instance.

Valid values: 1 and 3.

Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the validity period of the reserved instance.

Valid value: Year.

Default value: Year.', example='Year'),
  platform?: string(name='Platform', description='The operating system of the image used by the instance. Valid values:

*   Windows: Windows Server operating system
*   Linux: Linux and UNIX-like operating system

Default value: Linux.', example='Linux'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  reservedInstanceName?: string(name='ReservedInstanceName', description='The name of the reserved instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='testReservedInstanceName'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-bp199lyny9b3****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  scope?: string(name='Scope', description='The scope of reserved instance N. Valid values:

*   Region: regional
*   Zone: zonal

Default value: Region.', example='Zone'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the reserved instance. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N of the reserved instance. Valid values of N: 1 to 20. The tag value cannot be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. It cannot start with `acs:` or `aliyun`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
  zoneId?: string(name='ZoneId', description='The zone ID of the instance. This parameter is required when `Scope` is set to `Zone`. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.', example='cn-hangzhou-g'),
}

model PurchaseReservedInstancesOfferingResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='8C314443-AF0D-4766-9562-C83B7F1A3C8B'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets', description='The IDs of the reserved instances.'),
}

model PurchaseReservedInstancesOfferingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseReservedInstancesOfferingResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing method of reserved instances. For more information, see [Reserved instances](~~100371~~).
  * *   Before you purchase a reserved instance, you can call the [DescribeAvailableResource](~~66186~~) operation to query available instance resources.
  *
  * @param request PurchaseReservedInstancesOfferingRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PurchaseReservedInstancesOfferingResponse
 */
async function purchaseReservedInstancesOfferingWithOptions(request: PurchaseReservedInstancesOfferingRequest, runtime: Util.RuntimeOptions): PurchaseReservedInstancesOfferingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceAmount)) {
    query['InstanceAmount'] = request.instanceAmount;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.offeringType)) {
    query['OfferingType'] = request.offeringType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceName)) {
    query['ReservedInstanceName'] = request.reservedInstanceName;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurchaseReservedInstancesOffering',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing method of reserved instances. For more information, see [Reserved instances](~~100371~~).
  * *   Before you purchase a reserved instance, you can call the [DescribeAvailableResource](~~66186~~) operation to query available instance resources.
  *
  * @param request PurchaseReservedInstancesOfferingRequest
  * @return PurchaseReservedInstancesOfferingResponse
 */
async function purchaseReservedInstancesOffering(request: PurchaseReservedInstancesOfferingRequest): PurchaseReservedInstancesOfferingResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseReservedInstancesOfferingWithOptions(request, runtime);
}

model PurchaseStorageCapacityUnitRequest {
  amount?: int32(name='Amount', description='The number of SCUs that you want to purchase. Valid values: 1 to 20.

Default value: 1.', example='1'),
  capacity?: int32(name='Capacity', description='The capacity of the SCU. Unit: GiB. Valid values: 20, 40, 100, 200, 500, 1024, 2048, 5210, 10240, 20480, and 52100.', example='20'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique across requests. The `token` can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='The description of the SCU. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='ScuPurchaseDemo'),
  fromApp?: string(name='FromApp', description='The source of the request. The value is automatically set to OpenAPI and does not need to be changed. Default value: OpenAPI.', example='OpenAPI'),
  name?: string(name='Name', description='The name of the SCU. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (\\_), and hyphens (-).', example='ScuPurchaseDemo'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The validity period of the SCU. Valid values:

*   Valid values when PeriodUnit is set to Month: 1, 2, 3, and 6.
*   Valid values when PeriodUnit is set to Year: 1, 3, and 5.

Default value: 1.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the validity period of the SCU. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
  regionId?: string(name='RegionId', description='The ID of the region in which to purchase the SCU. The purchased SCU can offset the bills of pay-as-you-go disks that reside in the specified region. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The time at which the SCU takes effect. It can be up to six months later than the time at which the SCU is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.

This parameter is empty by default. If this parameter is left empty, the SCU takes effect immediately after it is created.', example='2020-09-09T02:00:00Z'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the SCU. N is the identifier of the tag key that you specify. Valid values of N: 1 to 20. The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. N is the identifier of the tag value that you specify and corresponds to the N in `Tag.N.Key`. Valid values: 1 to 20. The tag value can be an empty string. It can be up to 128 characters in length. It cannot start with `acs:` or contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
}

model PurchaseStorageCapacityUnitResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='204135153880****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  storageCapacityUnitIds?: {
    storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId')
  }(name='StorageCapacityUnitIds', description='The IDs of the SCUs.'),
}

model PurchaseStorageCapacityUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseStorageCapacityUnitResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you are familiar with the billing and pricing of SCUs. For more information, see [Storage capacity units](~~137897~~).
  *
  * @param request PurchaseStorageCapacityUnitRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return PurchaseStorageCapacityUnitResponse
 */
async function purchaseStorageCapacityUnitWithOptions(request: PurchaseStorageCapacityUnitRequest, runtime: Util.RuntimeOptions): PurchaseStorageCapacityUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.capacity)) {
    query['Capacity'] = request.capacity;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fromApp)) {
    query['FromApp'] = request.fromApp;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PurchaseStorageCapacityUnit',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you are familiar with the billing and pricing of SCUs. For more information, see [Storage capacity units](~~137897~~).
  *
  * @param request PurchaseStorageCapacityUnitRequest
  * @return PurchaseStorageCapacityUnitResponse
 */
async function purchaseStorageCapacityUnit(request: PurchaseStorageCapacityUnitRequest): PurchaseStorageCapacityUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseStorageCapacityUnitWithOptions(request, runtime);
}

model ReActivateInstancesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to reactivate.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReActivateInstancesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='51AB7717-6E1A-4D1D-A44D-54CB123ABC'),
}

model ReActivateInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReActivateInstancesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The instance must be in the `Stopped` state.****
  * *   If an instance has overdue payments for more than 15 days, the instance is stopped and released, and data on the instance can no longer be recovered. You must complete the overdue payments and reactivate the instance within 15 days. If you cannot reactivate an instance that resides in a virtual private cloud (VPC), wait a few minutes and try again.
  * *   After the operation is called, the instance enters the `Starting` state.****
  * *   You cannot call this operation on ECS instances that are locked for security reasons. If `OperationLocks` in the response returned for the DescribeInstances operation contains `LockReason: security`, the instance is locked for security reasons. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
  * @param request ReActivateInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReActivateInstancesResponse
 */
async function reActivateInstancesWithOptions(request: ReActivateInstancesRequest, runtime: Util.RuntimeOptions): ReActivateInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReActivateInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The instance must be in the `Stopped` state.****
  * *   If an instance has overdue payments for more than 15 days, the instance is stopped and released, and data on the instance can no longer be recovered. You must complete the overdue payments and reactivate the instance within 15 days. If you cannot reactivate an instance that resides in a virtual private cloud (VPC), wait a few minutes and try again.
  * *   After the operation is called, the instance enters the `Starting` state.****
  * *   You cannot call this operation on ECS instances that are locked for security reasons. If `OperationLocks` in the response returned for the DescribeInstances operation contains `LockReason: security`, the instance is locked for security reasons. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
  * @param request ReActivateInstancesRequest
  * @return ReActivateInstancesResponse
 */
async function reActivateInstances(request: ReActivateInstancesRequest): ReActivateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return reActivateInstancesWithOptions(request, runtime);
}

model ReInitDiskRequest {
  autoStartInstance?: boolean(name='AutoStartInstance', description='Specifies whether to automatically start the instance after the disk is re-initialized.

Default value: false.', example='true'),
  diskId?: string(name='DiskId', description='The ID of the disk.', example='d-bp67acfmxazb4ph****'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair. This parameter is empty by default.

> The parameter is applicable only to Linux instances. You can bind an SSH key pair to an instance as the logon credential when you re-initialize the system disk of the instance. After the SSH key pair is bound, the username and password-based logon method is disabled for the instance.', example='testKeyPairName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='Specifies whether to reset the password of the instance when you re-initialize its system disk. The password must be 8 to 30 characters in length and must contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

    ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/

For Windows instances, passwords cannot start with a forward slash (/).

> If the `Password` parameter is specified, we recommend that you send requests over HTTPS to prevent password leaks.', example='EcsV587!'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to use Security Center for free after the system disk is re-initialized. Valid values:

*   Active: Security Center is activated for free after the system disk is replaced. This value is applicable to only public images.
*   Deactive: Security Center is not activated after the system disk is replaced. This value is applicable to all images.

Default value: Deactive.', example='Active'),
}

model ReInitDiskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReInitDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReInitDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following points:
  * *   The disk that you want to re-initialize must be in the **In Use** (In_use) state and the instance to which the disk is attached must be in the **Stopped** (Stopped) state.
  * *   If the instance has never been started since it was created, the disks attached to it cannot be re-initialized.
  * *   If a local snapshot has been created for a disk, the disk cannot be re-initialized.
  * *   When a system disk is re-initialized, it is restored to the state of the image from which it was created. If the source image is deleted, the system disk cannot be re-initialized.
  * *   When a separately created data disk is re-initialized, it is restored to an empty data disk.
  * *   When a data disk that was created from a snapshot is re-initialized, the disk is restored to the state of the snapshot.
  * > If the source snapshot is deleted, the disk cannot be re-initialized and an error is returned.
  *
  * @param request ReInitDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReInitDiskResponse
 */
async function reInitDiskWithOptions(request: ReInitDiskRequest, runtime: Util.RuntimeOptions): ReInitDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoStartInstance)) {
    query['AutoStartInstance'] = request.autoStartInstance;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReInitDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following points:
  * *   The disk that you want to re-initialize must be in the **In Use** (In_use) state and the instance to which the disk is attached must be in the **Stopped** (Stopped) state.
  * *   If the instance has never been started since it was created, the disks attached to it cannot be re-initialized.
  * *   If a local snapshot has been created for a disk, the disk cannot be re-initialized.
  * *   When a system disk is re-initialized, it is restored to the state of the image from which it was created. If the source image is deleted, the system disk cannot be re-initialized.
  * *   When a separately created data disk is re-initialized, it is restored to an empty data disk.
  * *   When a data disk that was created from a snapshot is re-initialized, the disk is restored to the state of the snapshot.
  * > If the source snapshot is deleted, the disk cannot be re-initialized and an error is returned.
  *
  * @param request ReInitDiskRequest
  * @return ReInitDiskResponse
 */
async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reInitDiskWithOptions(request, runtime);
}

model RebootInstanceRequest {
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run. Valid values:

*   true: performs only a dry run. The system checks the required parameters, the request format, service limits, and available ECS resources. If the request fails the dry run, the corresponding error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and sends the request. If the request passes the dry run, the instance is restarted.

Default value: false.', example='false'),
  forceStop?: boolean(name='ForceStop', description='Specifies whether to forcefully stop the instance before you restart the instance. Valid values:

*   true: stops the instance in a forceful manner. This operation is equivalent to the power-off operation. Cache data that is not written to storage devices on the instance is lost.
*   false (default): normally stops the instance.', example='false'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4ph****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstanceResponseBody(name='body'),
}

/**
  * *   Only instances that are in the `Running` state can be restarted.****
  * *   After an instance is restarted, the status of the instance changes to `Starting`.****
  * *   An instance can be forcibly restarted. A forced restart (`ForceStop`) is equivalent to performing a hard restart. This operation can cause data loss if data in the instance is not written to the disk.
  * *   If you call the DescribeInstances operation to query the details of an instance and `OperationLocks` in the response contains "LockReason": "security", the instance is locked for security reasons and cannot be restarted. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
  * @param request RebootInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebootInstanceResponse
 */
async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Only instances that are in the `Running` state can be restarted.****
  * *   After an instance is restarted, the status of the instance changes to `Starting`.****
  * *   An instance can be forcibly restarted. A forced restart (`ForceStop`) is equivalent to performing a hard restart. This operation can cause data loss if data in the instance is not written to the disk.
  * *   If you call the DescribeInstances operation to query the details of an instance and `OperationLocks` in the response contains "LockReason": "security", the instance is locked for security reasons and cannot be restarted. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  *
  * @param request RebootInstanceRequest
  * @return RebootInstanceResponse
 */
async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model RebootInstancesRequest {
  batchOptimization?: string(name='BatchOptimization', description='The batch operation mode. Valid values:

*   AllTogether: In this mode, if all instances are restarted, a success message is returned. If an instance fails the verification, all instances fail to be restarted, and an error message is returned.
*   SuccessFirst: In this mode, each instance is restarted separately. The response contains the operation results of each instance.

Default value: AllTogether.', example='AllTogether'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks the required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.

> If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.

*   false: performs a dry run and performs the actual request.

Default value: false.', example='false'),
  forceReboot?: boolean(name='ForceReboot', description='Specifies whether to forcefully restart the instance. Valid values:

*   true: forcefully restarts the instance. This operation is equivalent to the typical power-off operation. Cache data that is not written to storage devices on the instance will be lost.
*   false: normally restarts the instance.

Default value: false.', example='false'),
  instanceId?: [ string ](name='InstanceId', description='The instance IDs. You can specify up to 100 instance IDs.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RebootInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code', description='The error code that is returned for the operation on the instance. The value 200 indicates that the operation is successful. For more information, see the "Error codes" section in this topic.', example='200'),
      currentStatus?: string(name='CurrentStatus', description='The current status of the instance.', example='Stopping'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp1g6zv0ce8oghu7****'),
      message?: string(name='Message', description='The error message that is returned for the operation on the instance. The return value Success indicates that the operation is successful. For more information, see the "Error codes" section in this topic.', example='success'),
      previousStatus?: string(name='PreviousStatus', description='The status of the instance before the operation is called.', example='Running'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses', description='Details about the responses returned for the instances, which contain the status of each instance before and after the operation is called and the operation results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RebootInstancesResponseBody(name='body'),
}

/**
  * *   The ECS instances must be in the `Running` state.****
  * *   You can use the `BatchOptimization` parameter to specify the batch operation mode and restart multiple instances at a time.
  * *   Instances can be forcefully restarted. A forced restart (`ForceReboot`) is equivalent to powering off a traditional server and then restarting the server. If data in the instance operating system is not written to block storage devices when the operation is called, the data may be lost.
  * *   If OperationLocks in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons and all operations are prohibited on it.
  *
  * @param request RebootInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RebootInstancesResponse
 */
async function rebootInstancesWithOptions(request: RebootInstancesRequest, runtime: Util.RuntimeOptions): RebootInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOptimization)) {
    query['BatchOptimization'] = request.batchOptimization;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.forceReboot)) {
    query['ForceReboot'] = request.forceReboot;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The ECS instances must be in the `Running` state.****
  * *   You can use the `BatchOptimization` parameter to specify the batch operation mode and restart multiple instances at a time.
  * *   Instances can be forcefully restarted. A forced restart (`ForceReboot`) is equivalent to powering off a traditional server and then restarting the server. If data in the instance operating system is not written to block storage devices when the operation is called, the data may be lost.
  * *   If OperationLocks in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons and all operations are prohibited on it.
  *
  * @param request RebootInstancesRequest
  * @return RebootInstancesResponse
 */
async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstancesWithOptions(request, runtime);
}

model RecoverVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vbrId?: string(name='VbrId'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoverVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RecoverVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request RecoverVirtualBorderRouterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RecoverVirtualBorderRouterResponse
 */
// Deprecated
async function recoverVirtualBorderRouterWithOptions(request: RecoverVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): RecoverVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoverVirtualBorderRouter',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request RecoverVirtualBorderRouterRequest
  * @return RecoverVirtualBorderRouterResponse
 */
// Deprecated
async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverVirtualBorderRouterWithOptions(request, runtime);
}

model RedeployDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp165p6xk2tlw61e****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RedeployDedicatedHostResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FCED4B7A-53D5-4C04-ABE3-26D4F3890D57'),
}

model RedeployDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RedeployDedicatedHostResponseBody(name='body'),
}

/**
  * If a dedicated host is in the UnderAssessment state, we recommend that you call this operation to migrate ECS instances away from the dedicated host to prevent permanent failures. You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the status of a dedicated host.
  *
  * @param request RedeployDedicatedHostRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RedeployDedicatedHostResponse
 */
async function redeployDedicatedHostWithOptions(request: RedeployDedicatedHostRequest, runtime: Util.RuntimeOptions): RedeployDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RedeployDedicatedHost',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If a dedicated host is in the UnderAssessment state, we recommend that you call this operation to migrate ECS instances away from the dedicated host to prevent permanent failures. You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the status of a dedicated host.
  *
  * @param request RedeployDedicatedHostRequest
  * @return RedeployDedicatedHostResponse
 */
async function redeployDedicatedHost(request: RedeployDedicatedHostRequest): RedeployDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployDedicatedHostWithOptions(request, runtime);
}

model RedeployInstanceRequest {
  forceStop?: boolean(name='ForceStop', description='Specifies whether to forcefully stop the instance that is in the Running state.

Default value: false.

> A forced stop is equivalent to a power outage, and unsaved data may be lost. We recommend that you redeploy instances that are in the Stopped state.', example='false'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1azkttqpldxgted****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RedeployInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  taskId?: string(name='TaskId', description='The ID of the redeployment task.

You can call the [DescribeTasks](~~25622~~) operation to query the redeployment result.', example='t-bp10e8orkp8x****'),
}

model RedeployInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RedeployInstanceResponseBody(name='body'),
}

/**
  * RedeployInstance is an asynchronous operation. This operation migrates data before it restarts the instance. After the instance is redeployed, the instance enters the `Running` state. If the instance fails to be redeployed, the instance returns to the original physical server and the state before redeployment.
  * Take note of the following items:
  * * The instance must be in the Running or Stopped state. After the instance is redeployed, the following changes occur to the status of the instance:
  *   * If the instance is in the `Running` state before redeployment, the instance enters the `Stopping` state.
  *   * If the instance is in the `Stopped` state before redeployment, the instance enters the `Starting` state.
  * * If an instance is deployed on a dedicated host, you cannot redeploy the instance.
  * * If the `OperationLocks` parameter in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons and cannot be redeployed.
  * * If you receive notifications about simulated events that are created by calling the CreateSimulatedSystemEvent operation for an instance, you cannot redeploy the instance.
  * * If the damaged local disk is isolated but the **SystemMaintenance.RebootAndReInitErrorDisk** event is not sent when you handle a local disk-related system event for an instance, you can still call the RedeployInstance operation to redeploy the instance. The SystemMaintenance.RebootAndReInitErrorDisk event indicates that the instance is restarted and the damaged disks are reinitialized due to system maintenance. For more information, see [System events for ECS instances equipped with local disks](~~107693~~).
  * The following table describes the system events that you can handle by calling the RedeployInstance operation. The table also provides possible event status.
  * |System event|Event status|
  * |---|---|
  * |Instance restart due to system maintenance (SystemMaintenance.Reboot)|Inquiring and Scheduled|
  * |Instance redeployment due to system maintenance (SystemMaintenance.Redeploy)|Inquiring and Scheduled|
  * |Instance restart and replacement of damaged disks due to system maintenance (SystemMaintenance.RebootAndIsolateErrorDisk)|Inquiring|
  * |Instance restart and re-initialization of damaged disks due to system maintenance (SystemMaintenance.RebootAndReInitErrorDisk)|Inquiring|
  * |Instance redeployment due to system errors (SystemFailure.Redeploy)|Inquiring and Scheduled|
  * |For ECS instances that use only local disks: instance restart due to a system error (SystemFailure.Reboot)|Executing|
  * |Isolation of damaged disks due to system maintenance (SystemMaintenance.IsolateErrorDisk)|Inquiring|
  * |Re-initialization of damaged disks due to system maintenance (SystemMaintenance.ReInitErrorDisk)|Inquiring|
  * **Note**When instances that use local disks are redeployed, the local disks are re-initialized and data on the local disks is cleared.
  *
  * @param request RedeployInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RedeployInstanceResponse
 */
async function redeployInstanceWithOptions(request: RedeployInstanceRequest, runtime: Util.RuntimeOptions): RedeployInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RedeployInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * RedeployInstance is an asynchronous operation. This operation migrates data before it restarts the instance. After the instance is redeployed, the instance enters the `Running` state. If the instance fails to be redeployed, the instance returns to the original physical server and the state before redeployment.
  * Take note of the following items:
  * * The instance must be in the Running or Stopped state. After the instance is redeployed, the following changes occur to the status of the instance:
  *   * If the instance is in the `Running` state before redeployment, the instance enters the `Stopping` state.
  *   * If the instance is in the `Stopped` state before redeployment, the instance enters the `Starting` state.
  * * If an instance is deployed on a dedicated host, you cannot redeploy the instance.
  * * If the `OperationLocks` parameter in the response of the DescribeInstances operation contains `"LockReason" : "security"` for an instance, the instance is locked for security reasons and cannot be redeployed.
  * * If you receive notifications about simulated events that are created by calling the CreateSimulatedSystemEvent operation for an instance, you cannot redeploy the instance.
  * * If the damaged local disk is isolated but the **SystemMaintenance.RebootAndReInitErrorDisk** event is not sent when you handle a local disk-related system event for an instance, you can still call the RedeployInstance operation to redeploy the instance. The SystemMaintenance.RebootAndReInitErrorDisk event indicates that the instance is restarted and the damaged disks are reinitialized due to system maintenance. For more information, see [System events for ECS instances equipped with local disks](~~107693~~).
  * The following table describes the system events that you can handle by calling the RedeployInstance operation. The table also provides possible event status.
  * |System event|Event status|
  * |---|---|
  * |Instance restart due to system maintenance (SystemMaintenance.Reboot)|Inquiring and Scheduled|
  * |Instance redeployment due to system maintenance (SystemMaintenance.Redeploy)|Inquiring and Scheduled|
  * |Instance restart and replacement of damaged disks due to system maintenance (SystemMaintenance.RebootAndIsolateErrorDisk)|Inquiring|
  * |Instance restart and re-initialization of damaged disks due to system maintenance (SystemMaintenance.RebootAndReInitErrorDisk)|Inquiring|
  * |Instance redeployment due to system errors (SystemFailure.Redeploy)|Inquiring and Scheduled|
  * |For ECS instances that use only local disks: instance restart due to a system error (SystemFailure.Reboot)|Executing|
  * |Isolation of damaged disks due to system maintenance (SystemMaintenance.IsolateErrorDisk)|Inquiring|
  * |Re-initialization of damaged disks due to system maintenance (SystemMaintenance.ReInitErrorDisk)|Inquiring|
  * **Note**When instances that use local disks are redeployed, the local disks are re-initialized and data on the local disks is cleared.
  *
  * @param request RedeployInstanceRequest
  * @return RedeployInstanceResponse
 */
async function redeployInstance(request: RedeployInstanceRequest): RedeployInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployInstanceWithOptions(request, runtime);
}

model ReleaseCapacityReservationRequest {
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the capacity reservation.', example='crp-bp67acfmxazb4****'),
  }(name='PrivatePoolOptions'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Set the value to false. This indicates that the system directly releases the capacity reservation.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the capacity reservation. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseCapacityReservationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReleaseCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseCapacityReservationResponseBody(name='body'),
}

/**
  * If the release mode of a capacity reservation that takes effect immediately is set to manual release, you can call this operation to release the capacity reservation.
  *
  * @param request ReleaseCapacityReservationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseCapacityReservationResponse
 */
async function releaseCapacityReservationWithOptions(request: ReleaseCapacityReservationRequest, runtime: Util.RuntimeOptions): ReleaseCapacityReservationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseCapacityReservation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * If the release mode of a capacity reservation that takes effect immediately is set to manual release, you can call this operation to release the capacity reservation.
  *
  * @param request ReleaseCapacityReservationRequest
  * @return ReleaseCapacityReservationResponse
 */
async function releaseCapacityReservation(request: ReleaseCapacityReservationRequest): ReleaseCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseCapacityReservationWithOptions(request, runtime);
}

model ReleaseDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host.', example='dh-bp199lyny9b3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseDedicatedHostResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A1B15AC8-E6F6-49A4-8985-8C07104B9199'),
}

model ReleaseDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseDedicatedHostResponseBody(name='body'),
}

/**
  * ## Usage notes
  * Before you release a pay-as-you-go dedicated host, make sure that no ECS instances are deployed on the dedicated host.
  *
  * @param request ReleaseDedicatedHostRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseDedicatedHostResponse
 */
async function releaseDedicatedHostWithOptions(request: ReleaseDedicatedHostRequest, runtime: Util.RuntimeOptions): ReleaseDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseDedicatedHost',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * Before you release a pay-as-you-go dedicated host, make sure that no ECS instances are deployed on the dedicated host.
  *
  * @param request ReleaseDedicatedHostRequest
  * @return ReleaseDedicatedHostResponse
 */
async function releaseDedicatedHost(request: ReleaseDedicatedHostRequest): ReleaseDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDedicatedHostWithOptions(request, runtime);
}

model ReleaseEipAddressRequest {
  allocationId?: string(name='AllocationId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request ReleaseEipAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseEipAddressResponse
 */
// Deprecated
async function releaseEipAddressWithOptions(request: ReleaseEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseEipAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request ReleaseEipAddressRequest
  * @return ReleaseEipAddressResponse
 */
// Deprecated
async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipAddressWithOptions(request, runtime);
}

model ReleasePublicIpAddressRequest {
  dryRun?: boolean(name='DryRun', description='> This parameter is unavailable.', example='hide'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4p****'),
  publicIpAddress?: string(name='PublicIpAddress', description='The public IP address of the instance.', example='121.40.**.**'),
  regionId?: string(name='RegionId', description='The region ID of the instance.', example='cn-hangzhou'),
}

model ReleasePublicIpAddressResponseBody = {
  remainTimes?: string(name='RemainTimes', description='> This parameter is unavailable.', example='hide'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReleasePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleasePublicIpAddressResponseBody(name='body'),
}

async function releasePublicIpAddressWithOptions(request: ReleasePublicIpAddressRequest, runtime: Util.RuntimeOptions): ReleasePublicIpAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.publicIpAddress)) {
    query['PublicIpAddress'] = request.publicIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePublicIpAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releasePublicIpAddress(request: ReleasePublicIpAddressRequest): ReleasePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicIpAddressWithOptions(request, runtime);
}

model RemoveBandwidthPackageIpsRequest {
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  removedIpAddresses?: [ string ](name='RemovedIpAddresses'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RemoveBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveBandwidthPackageIpsResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request RemoveBandwidthPackageIpsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RemoveBandwidthPackageIpsResponse
 */
// Deprecated
async function removeBandwidthPackageIpsWithOptions(request: RemoveBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): RemoveBandwidthPackageIpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bandwidthPackageId)) {
    query['BandwidthPackageId'] = request.bandwidthPackageId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.removedIpAddresses)) {
    query['RemovedIpAddresses'] = request.removedIpAddresses;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveBandwidthPackageIps',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request RemoveBandwidthPackageIpsRequest
  * @return RemoveBandwidthPackageIpsResponse
 */
// Deprecated
async function removeBandwidthPackageIps(request: RemoveBandwidthPackageIpsRequest): RemoveBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBandwidthPackageIpsWithOptions(request, runtime);
}

model RemoveTagsRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-shenzhen'),
  resourceId?: string(name='ResourceId', description='The ID of the resource. For example, if you set ResourceType to instance, you must set this parameter to the ID of the related instance.', example='s-946ntx4****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance
*   disk
*   snapshot
*   image
*   securitygroup
*   volume
*   eni
*   ddh
*   keypair
*   launchtemplate
*   reservedinstance
*   snapshotpolicy

All values must be in lowercase.', example='snapshot'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot contain [http:// or https://](http://https://。). The tag key cannot start with acs: or aliyun.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain [http:// or https://](http://https://。). The tag value cannot start with acs: or aliyun.', example='TestValue'),
    }
  ](name='Tag', description='The tags.'),
}

model RemoveTagsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTags',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model RenewDedicatedHostsRequest {
  clientToken?: string(name='ClientToken', description='The request ID.', example='123e4567-e89b-12d3-a456-426655440000'),
  dedicatedHostIds?: string(name='DedicatedHostIds', description='The region ID of the dedicated host. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='dh-bp199lyny9b3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The unit of the renewal period. Valid values:

*   Month
*   Year

Default value: Month.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate a client token. Make sure that a unique client token is used for each request. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence?](~~25693~~)', example='Month'),
  regionId?: string(name='RegionId', description='The renewal duration. Valid values:

*   Valid values when the PeriodUnit parameter is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.
*   Valid values when the PeriodUnit parameter is set to Year: 1, 2, 3, 4, and 5.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RenewDedicatedHostsResponseBody = {
  requestId?: string(name='RequestId', example='2A4EA075-CB5B-41B7-B0EB-70D339F6****'),
}

model RenewDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewDedicatedHostsResponseBody(name='body'),
}

/**
  * The IDs of dedicated hosts. You can specify the IDs of up to 100 subscription dedicated hosts. Specify the dedicated host IDs in a JSON array. Example: `["dh-xxxxxxxxx", "dh-yyyyyyyyy", … "dh-zzzzzzzzz"]`. Separate the IDs with commas (,).
  *
  * @param request RenewDedicatedHostsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewDedicatedHostsResponse
 */
async function renewDedicatedHostsWithOptions(request: RenewDedicatedHostsRequest, runtime: Util.RuntimeOptions): RenewDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostIds)) {
    query['DedicatedHostIds'] = request.dedicatedHostIds;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewDedicatedHosts',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The IDs of dedicated hosts. You can specify the IDs of up to 100 subscription dedicated hosts. Specify the dedicated host IDs in a JSON array. Example: `["dh-xxxxxxxxx", "dh-yyyyyyyyy", … "dh-zzzzzzzzz"]`. Separate the IDs with commas (,).
  *
  * @param request RenewDedicatedHostsRequest
  * @return RenewDedicatedHostsResponse
 */
async function renewDedicatedHosts(request: RenewDedicatedHostsRequest): RenewDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDedicatedHostsWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='0c593ea1-3bea-11e9-b96b-88e9fe637760'),
  expectedRenewDay?: int32(name='ExpectedRenewDay', description='The synchronized expiration date. Set the value to a synchronized expiration date that you specified. Otherwise, the call fails. If you configure this parameter, your instance will be renewed to the specified synchronized expiration date. Valid values: 1 to 28.

For information about how to synchronize the expiration dates of instances, see [Synchronize the expiration dates of subscription instances](~~108486~~).

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and `ExpectedRenewDay` are mutually exclusive.', example='5'),
  instanceId?: string(name='InstanceId', description='The ID of the instance that you want to renew.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The renewal period of the subscription instance. If `DedicatedHostId` is specified, the value of Period cannot exceed the subscription period of the specified dedicated host.

Valid values when PeriodUnit is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, and 12.

> The renewal period-related parameter pair (`Period` and `PeriodUnit`) and `ExpectedRenewDay` are mutually exclusive.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the renewal period. Valid values:

Month

Default value: Month.', example='Month'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RenewInstanceResponseBody = {
  orderId?: string(name='OrderId', description='The order ID.', example='1234567890'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing methods and pricing of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * *   You can call this operation to renew a subscription instance for a specific period of time or to a synchronized expiration date.
  * *   You cannot call this operation to renew a subscription instance for a specific period of time and to a synchronized expiration date at the same time. The parameter pair (`Period` and `PeriodUnit`) that is related to the renewal period and `ExpectedRenewDay` are mutually exclusive.
  * *   Your account must have sufficient credits.
  *
  * @param request RenewInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewInstanceResponse
 */
async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.expectedRenewDay)) {
    query['ExpectedRenewDay'] = request.expectedRenewDay;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Before you call this operation, make sure that you are familiar with the billing methods and pricing of ECS. For more information, see the [Elastic Compute Service](https://www.alibabacloud.com/product/ecs#pricing) product page.
  * *   You can call this operation to renew a subscription instance for a specific period of time or to a synchronized expiration date.
  * *   You cannot call this operation to renew a subscription instance for a specific period of time and to a synchronized expiration date at the same time. The parameter pair (`Period` and `PeriodUnit`) that is related to the renewal period and `ExpectedRenewDay` are mutually exclusive.
  * *   Your account must have sufficient credits.
  *
  * @param request RenewInstanceRequest
  * @return RenewInstanceResponse
 */
async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RenewReservedInstancesRequest {
  autoRenew?: boolean(name='AutoRenew', description='The auto-renewal duration. Unit: months. This parameter takes effect only when AutoRenew is set to true.

Valid values: 12 and 36. Default value: 12.', example='true'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The request ID.', example='1'),
  clientToken?: string(name='ClientToken', description='Specifies whether to enable auto-renewal for the reserved instance. Valid values:

*   true
*   false

Default value: false.', example='123e4567-e89b-12d3-a456-426655440000'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The unit of the validity period of the reserved instance.

Set the value to Year.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='Year'),
  regionId?: string(name='RegionId', description='The validity period of the reserved instance.

Valid values: 1 and 3.

Default value: 1.', example='cn-hangzhou'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId', description='The ID of the reserved instance. You can call the [DescribeReservedInstances](~~100065~~) operation to query the IDs of reserved instances that you purchased.

You can specify up to 10 IDs of reserved instances in a single request.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RenewReservedInstancesResponseBody = {
  orderId?: string(name='OrderId', example='2023912123****'),
  requestId?: string(name='RequestId', description='The IDs of the reserved instances.', example='8C314443-AF0D-4766-9562-C83B7F1****'),
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets', description='The ID of the reserved instance.'),
}

model RenewReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewReservedInstancesResponseBody(name='body'),
}

/**
  * The IDs of the reserved instances.
  *
  * @param request RenewReservedInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RenewReservedInstancesResponse
 */
async function renewReservedInstancesWithOptions(request: RenewReservedInstancesRequest, runtime: Util.RuntimeOptions): RenewReservedInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.reservedInstanceId)) {
    query['ReservedInstanceId'] = request.reservedInstanceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewReservedInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The IDs of the reserved instances.
  *
  * @param request RenewReservedInstancesRequest
  * @return RenewReservedInstancesResponse
 */
async function renewReservedInstances(request: RenewReservedInstancesRequest): RenewReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewReservedInstancesWithOptions(request, runtime);
}

model ReplaceSystemDiskRequest {
  systemDisk?: {
    size?: int32(name='Size', description='The capacity of the new system disk. Unit: GiB. Valid values: Max{20, Size of the image specified by ImageId} to 500.

Default value: Max{40, Size of the image specified by ImageId}.

> If the capacity of the new system disk exceeds `Max{20, Capacity of the original system disk}`, you are charged for the excess capacity.', example='80'),
  }(name='SystemDisk'),
  architecture?: string(name='Architecture', description='The system architecture. Valid values:

*   i386
*   x86\\_64', example='i386'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is unavailable.', example='0'),
      roleType?: string(name='RoleType', description='> This parameter is not available for public use.', example='null'),
      rolearn?: string(name='Rolearn', description='> This parameter is not available for public use.', example='null'),
    }
  ](name='Arn', description='This parameter is not available for public use.'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotency of the request. You can use the client to generate the token, but make sure that the token is unique across requests. The **token** can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', description='The disk ID.

If the `ImageId` parameter is not specified, this parameter is required.

If the DiskId parameter is specified, the `Platform` and `Architecture` parameters are required. The specified values of `Platform` and `Architecture` must be consistent with those of `Platform` and `Architecture` parameters of the instance.

> This feature is available to select users. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/console.htm).', example='d-bp67acfmxazb4ph****'),
  encryptAlgorithm?: string(name='EncryptAlgorithm', description='> This parameter is not available for public use.', example='hide'),
  encrypted?: boolean(name='Encrypted', description='Specifies whether to encrypt the disk. Valid values:

*   true: encrypts the disk.
*   false: does not encrypt the disk.

Default value: false', example='false'),
  imageId?: string(name='ImageId', description='The ID of the image to be used to replace the system disk.

If the `DiskId` parameter is not specified, this parameter is required.', example='m-bp67acfmxazb4ph****'),
  instanceId?: string(name='InstanceId', description='The instance ID.', example='i-bp67acfmxazb4ph****'),
  KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key that you want to use for the system disk.', example='e522b26d-abf6-4e0d-b5da-04b7******3c'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

> This parameter is applicable only to Linux instances. You can bind an SSH key pair to the instance as a logon credential. After you bind the SSH key pair, the username and password logon method is disabled for the instance.', example='testKeyPairName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='Specifies whether to reset the password for the instance. The password must be 8 to 30 characters in length and contain at least three of the following items: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

    ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/

The passwords of Windows instances cannot start with a forward slash (/).

This parameter is empty by default, which indicates that the current password remains unchanged.

> If you specify `Password`, we recommend that you send requests over HTTPS to prevent password leaks.', example='EcsV587!'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the preset password of the image.

Default value: false

> If the PasswordInherit parameter is specified, you must leave the Password parameter empty. Before you use this parameter, make sure that a password is preset for the image.', example='false'),
  platform?: string(name='Platform', description='The operating system distribution. Valid values:

*   CentOS
*   Ubuntu', example='CentOS'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to use Security Center Basic after the system disk is replaced. Valid values:

*   Active: uses Security Center Basic after the system disk is re-initialized. This value is applicable only to public images.
*   Deactive: does not use Security Center Basic after the system disk is re-initialized. This value is applicable to all images.

Default value: Deactive.', example='Active'),
  useAdditionalService?: boolean(name='UseAdditionalService', description='Specifies whether to use the system configurations for virtual machines provided by Alibaba Cloud. System configurations for Windows: NTP and KMS. System configurations for Linux: NTP and YUM.

> This parameter takes effect only when you attach a system disk whose device name is /dev/xvda.', example='true'),
}

model ReplaceSystemDiskResponseBody = {
  diskId?: string(name='DiskId', description='The ID of the new system disk.', example='d-bp67acfmxazb4ph****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReplaceSystemDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceSystemDiskResponseBody(name='body'),
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   You must specify the ImageId parameter or the DiskId parameter. You cannot specify both of these parameters at the same time. Otherwise, the call fails and an error message is returned.
  * > You can use the `DiskId` parameter to replace the operating system of an instance. This feature is available to select users. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/console.htm).
  * *   The category of the system disk cannot be changed.
  * *   The billing method of the system disk cannot be changed.
  * *   The instance must be in the `Stopped` state.
  *     **
  *     **Note**This item is applicable only to instances in virtual private clouds (VPCs). If the instance is a pay-as-you-go instance and economical mode is enabled by default for the instance, you must switch from stop mode to standard mode when you stop the instance. This prevents instance restart failures caused by insufficient resources after the system disk is replaced. For more information, see [StopInstance](~~25501~~).
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons and no operations are allowed on the instance.`` For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  * *   You cannot have outstanding payment orders associated with the instance.
  * *   You can configure the `SystemDisk.Size` parameter to specify the capacity of the new system disk.
  * After you call this operation, you can use one of the following methods to check whether the system disk is replaced:
  * *   Call the [DescribeDisks](~~25514~~) operation to query the state of the new system disk. If the new system disk is in the In_use state, the system disk is replaced.
  * *   Call the [DescribeInstances](~~25506~~) operation to query the state of the instance whose system disk is replaced. If `OperationLocks` in the response is empty, the system disk is replaced.
  *
  * @param request ReplaceSystemDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReplaceSystemDiskResponse
 */
async function replaceSystemDiskWithOptions(request: ReplaceSystemDiskRequest, runtime: Util.RuntimeOptions): ReplaceSystemDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.architecture)) {
    query['Architecture'] = request.architecture;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.encryptAlgorithm)) {
    query['EncryptAlgorithm'] = request.encryptAlgorithm;
  }
  if (!Util.isUnset(request.encrypted)) {
    query['Encrypted'] = request.encrypted;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.KMSKeyId)) {
    query['KMSKeyId'] = request.KMSKeyId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.useAdditionalService)) {
    query['UseAdditionalService'] = request.useAdditionalService;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceSystemDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Description
  * When you call this operation, take note of the following items:
  * *   You must specify the ImageId parameter or the DiskId parameter. You cannot specify both of these parameters at the same time. Otherwise, the call fails and an error message is returned.
  * > You can use the `DiskId` parameter to replace the operating system of an instance. This feature is available to select users. To use this feature, [submit a ticket](https://workorder-intl.console.aliyun.com/console.htm).
  * *   The category of the system disk cannot be changed.
  * *   The billing method of the system disk cannot be changed.
  * *   The instance must be in the `Stopped` state.
  *     **
  *     **Note**This item is applicable only to instances in virtual private clouds (VPCs). If the instance is a pay-as-you-go instance and economical mode is enabled by default for the instance, you must switch from stop mode to standard mode when you stop the instance. This prevents instance restart failures caused by insufficient resources after the system disk is replaced. For more information, see [StopInstance](~~25501~~).
  * *   If the response contains `{"OperationLocks": {"LockReason" : "security"}}`, the instance is locked for security reasons and no operations are allowed on the instance.`` For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  * *   You cannot have outstanding payment orders associated with the instance.
  * *   You can configure the `SystemDisk.Size` parameter to specify the capacity of the new system disk.
  * After you call this operation, you can use one of the following methods to check whether the system disk is replaced:
  * *   Call the [DescribeDisks](~~25514~~) operation to query the state of the new system disk. If the new system disk is in the In_use state, the system disk is replaced.
  * *   Call the [DescribeInstances](~~25506~~) operation to query the state of the instance whose system disk is replaced. If `OperationLocks` in the response is empty, the system disk is replaced.
  *
  * @param request ReplaceSystemDiskRequest
  * @return ReplaceSystemDiskResponse
 */
async function replaceSystemDisk(request: ReplaceSystemDiskRequest): ReplaceSystemDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceSystemDiskWithOptions(request, runtime);
}

model ReportInstancesStatusRequest {
  description?: string(name='Description', description='The description of the exception.', example='The local disk is unavailable, the mount point is inaccessible, or files cannot be loaded.'),
  device?: [ string ](name='Device', description='The device names of disks on an instance that have the exception. You can specify to 100 device names in a single request.

If you are using an ECS bare metal instance, enter the slot numbers of disks on the instance.

> For ECS bare metal instances, this parameter is required when the value of the `Reason` parameter is `abnormal-local-disk` or `abnormal-cloud-disk` or when the value of the `IssueCategory` parameter is `hardware-disk-error`.', example='/dev/xvdb'),
  diskId?: [ string ](name='DiskId', description='The IDs of disks on an instance that have the exception. You can specify up to 100 disk IDs in a single request. If you are using an ECS bare metal instance, enter the serial numbers of disks on the instance.

> This parameter is required when the value of the `Reason` parameter is `abnormal-local-disk` or `abnormal-cloud-disk` or when the value of the `IssueCategory` parameter is `hardware-disk-error`.', example='d-bp1aeljlfad7x6u1****'),
  endTime?: string(name='EndTime', description='The end time of the instance exception. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-31T06:32:31Z'),
  instanceId?: [ string ](name='InstanceId', description='The IDs of instances. You can specify up to 100 instance IDs in a single request.', example='i-bp165p6xk2tmdhj0****'),
  issueCategory?: string(name='IssueCategory', description='The category of the exception. This parameter is applicable only to ECS bare metal instances. Valid values:

*   hardware-cpu-error: CPU failure
*   hardware-motherboard-error: motherboard failure
*   hardware-mem-error: memory failure
*   hardware-power-error: power failure
*   hardware-disk-error: disk failure
*   hardware-networkcard-error: network interface controller (NIC) failure
*   hardware-raidcard-error: SAS/RAID card failure
*   hardware-fan-error: fan failure
*   others: other failures', example='hardware-cpu-error'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  reason?: string(name='Reason', description='The impact of the exception on the instance. Valid values:

*   instance-hang: The instance is unavailable or cannot be connected.
*   instance-stuck-in-status: The instance is stuck in a state such as Starting or Stopping.
*   abnormal-network: The instance has a network exception.
*   abnormal-local-disk: A local disk attached to the instance has an exception.
*   abnormal-cloud-disk: A disk or a Shared Block Storage device attached to the instance has an exception.
*   others: other exception types. If the impact is not of the preceding types, you can set `Reason` to others and specify the `Description` parameter.', example='abnormal-local-disk'),
  regionId?: string(name='RegionId', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: string(name='StartTime', description='The start time of the instance exception. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2017-11-30T06:32:31Z'),
}

model ReportInstancesStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model ReportInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReportInstancesStatusResponseBody(name='body'),
}

async function reportInstancesStatusWithOptions(request: ReportInstancesStatusRequest, runtime: Util.RuntimeOptions): ReportInstancesStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.device)) {
    query['Device'] = request.device;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.issueCategory)) {
    query['IssueCategory'] = request.issueCategory;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.reason)) {
    query['Reason'] = request.reason;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportInstancesStatus',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportInstancesStatus(request: ReportInstancesStatusRequest): ReportInstancesStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportInstancesStatusWithOptions(request, runtime);
}

model ResetDiskRequest {
  diskId?: string(name='DiskId', description='The ID of the disk that you want to roll back.', example='d-bp199lyny9b3****'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and resource state limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, the rollback operation is performed.

Default value: false', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId', description='The ID of the snapshot that you want to use to roll back the disk.', example='s-bp199lyny9b3****'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F3CD6886-D8D0-4FEE-B93E-1B732396****'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDiskResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk must be in the In Use (In_Use) or Unattached (Available) state.
  * *   The Elastic Compute Service (ECS) instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstances](~~155372~~) operation to stop an instance.
  * *   The snapshot specified by the SnapshotId parameter must be created from the disk specified by the DiskId parameter.
  * *   When you call the [DescribeInstances](~~25506~~) operation to query instance information and the response contains `{"OperationLocks": {"LockReason" : "security"}}`, then this indicates that the instance is locked for security reasons and no operations can be performed on the instance.
  *
  * @param request ResetDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetDiskResponse
 */
async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The disk must be in the In Use (In_Use) or Unattached (Available) state.
  * *   The Elastic Compute Service (ECS) instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstances](~~155372~~) operation to stop an instance.
  * *   The snapshot specified by the SnapshotId parameter must be created from the disk specified by the DiskId parameter.
  * *   When you call the [DescribeInstances](~~25506~~) operation to query instance information and the response contains `{"OperationLocks": {"LockReason" : "security"}}`, then this indicates that the instance is locked for security reasons and no operations can be performed on the instance.
  *
  * @param request ResetDiskRequest
  * @return ResetDiskResponse
 */
async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResetDisksRequest {
  disk?: [ 
    {
      diskId?: string(name='DiskId', description='The ID of the disk that you want to roll back. You can specify up to 10 disk IDs.', example='d-j6cf7l0ewidb78lq****'),
      snapshotId?: string(name='SnapshotId', description='The ID of the disk snapshot that is contained in the instance snapshot. You can specify up to 10 disk snapshot IDs.', example='s-j6cdofbycydvg7ey****'),
    }
  ](name='Disk', description='The disks that you want to roll back.'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, and resource state limits. If the request fails the dry run, an error code is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, the rollback operation is performed.

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ResetDisksResponseBody = {
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode', description='The error code that is returned if the request failed. This parameter is empty if the request is successful.

For information about error codes and error messages, see [Service error codes](https://error-center.alibabacloud.com/status/product/Ecs).', example='400'),
      errorMsg?: string(name='ErrorMsg', description='The error message that is returned if the request failed. This parameter is empty if the request is successful.

For information about error codes and error messages, see [Service error codes](https://error-center.alibabacloud.com/status/product/Ecs).', example='testErrorMsg'),
      operationStatus?: string(name='OperationStatus', description='Indicates whether the request is successful. If the request is successful, Success is returned. If the request failed, an error code and an error message are returned.', example='Success'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          name?: string(name='Name', description='The resource name.', example='SnapshotId'),
          value?: string(name='Value', description='The resource ID.', example='s-j6cdofbycydvg7ey****'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet', description='Details about the resources.'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet', description='Details about the rollback operation.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3D66C85C-AA97-4A00-B0ED-2D9A80FE782C'),
}

model ResetDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetDisksResponseBody(name='body'),
}

/**
  * This operation will be removed in the future. We recommend that you call the [ResetDisk](~~25520~~) operation to roll back a disk.
  *
  * @param request ResetDisksRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResetDisksResponse
 */
async function resetDisksWithOptions(request: ResetDisksRequest, runtime: Util.RuntimeOptions): ResetDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disk)) {
    query['Disk'] = request.disk;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetDisks',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation will be removed in the future. We recommend that you call the [ResetDisk](~~25520~~) operation to roll back a disk.
  *
  * @param request ResetDisksRequest
  * @return ResetDisksResponse
 */
async function resetDisks(request: ResetDisksRequest): ResetDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDisksWithOptions(request, runtime);
}

model ResizeDiskRequest {
  clientToken?: string(name='ClientToken', description='The ID of the order.

> This parameter is returned only when you resize subscription disks.', example='123e4567-e89b-12d3-a456-426655440000'),
  diskId?: string(name='DiskId', description='The method that you want to use to resize the disk. Default value: offline. Valid values:

*   offline: resizes the disk offline. After you resize a disk offline, you must restart its associated instance by using the Elastic Compute Service (ECS) console or by calling the [RebootInstance](~~25502~~) operation to make the resizing operation take effect. For information about how to restart an ECS instance in the ECS console, see [Restart an instance](~~25440~~).
*   online: resizes the disk online. After you resize a disk online, the resizing operation takes effect immediately and you do not need to restart the instance. Ultra disks, standard SSDs, and ESSDs can be resized online.', example='d-bp67acfmxazb4p****'),
  newSize?: int32(name='NewSize', description='32768', example='1900'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type', description='The new disk capacity. Unit: GiB. Valid values:

*   System disk: 20 to 500.

*   Data disk:

    *   Ultra disk (cloud_efficiency): 20 to 32768.

    *   Standard SSD (cloud_ssd): 20 to 32768.

    *   ESSD (cloud_essd): Valid values when the NewSize parameter is set to cloud_essd depend on the `PerformanceLevel` value. You can call the [DescribeDisks](~~25514~~) operation to query disk information and check the `PerformanceLevel` value in the response.

        *   Valid values when PerformanceLevel is set to PL0: 40 to 32768.
        *   Valid values when PerformanceLevel is set to PL1: 20 to 32768.
        *   Valid values when PerformanceLevel is set to PL2: 461 to 32768.
        *   Valid values when PerformanceLevel is set to PL3: 1261 to 32768.

    *   Basic disk (cloud): 5 to 2000.

The new disk capacity must be greater than the original disk capacity.', example='offline'),
}

model ResizeDiskResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the request.', example='20413515388****'),
  requestId?: string(name='RequestId', example='F3CD6886-D8D0-4FEE-B93E-1B732396****'),
}

model ResizeDiskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResizeDiskResponseBody(name='body'),
}

/**
  * The ID of the disk. You can call the [DescribeDisks](~~25514~~) operation to query the ID of a disk.
  *
  * @param request ResizeDiskRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ResizeDiskResponse
 */
async function resizeDiskWithOptions(request: ResizeDiskRequest, runtime: Util.RuntimeOptions): ResizeDiskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.newSize)) {
    query['NewSize'] = request.newSize;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResizeDisk',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the disk. You can call the [DescribeDisks](~~25514~~) operation to query the ID of a disk.
  *
  * @param request ResizeDiskRequest
  * @return ResizeDiskResponse
 */
async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeDiskWithOptions(request, runtime);
}

model RevokeSecurityGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of security group rule N.', example='This is description.'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='ALL'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6DestCidrIp` to specify the destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:db8:1234:1a00::***'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of security group rule N. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of security group rule N. The values of this parameter are not case-sensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='TCP'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> This parameter is valid only when the destination is an ECS instance that resides in a VPC and supports IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> This parameter is valid only when the source is an Elastic Compute Service (ECS) instance that resides in a virtual private cloud (VPC) and supports IPv6 CIDR blocks. You cannot specify both this parameter and the `SourceCidrIp` parameter.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network interface card (NIC) type of the security group rule if the security group is of the classic network type. Valid values:

*   internet: public NIC
*   intranet: internal NIC

If the security group is in a VPC, this parameter is set to intranet by default and cannot be changed.

If you specify only `SourceGroupId` when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow inbound access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol of security group rule N. Valid values:

*   If the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1/200.
*   If the Permissions.N.IpProtocol parameter is set to ICMP, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to GRE, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to ALL, the port range is -1/-1, which indicates all ports.

Valid values of N: 1 to 100.', example='1/200'),
      priority?: string(name='Priority', description='The priority of security group rule N. A smaller value specifies a higher priority. Valid values: 1 to 100.

Default value: 1.

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourceGroupId?: string(name='SourceGroupId', description='The ID of the source security group that is referenced in security group rule N.

*   Specify at least one of the following parameters: `SourceGroupId`, `SourceCidrIp`, `Ipv6SourceCidrIp`, and `SourcePrefixListId`.
*   If you specify `SourceGroupId` but you do not specify `SourceCidrIp` or `Ipv6SourceCidrIp`, you must set NicType to intranet.
*   If you specify `SourceGroupId` and `SourceCidrIp`, `SourceCidrIp` takes precedence.

When you specify this parameter, take note of the following items:

*   You cannot reference security groups as destinations or sources in the rules of advanced security groups.
*   You can reference up to 20 security groups as destinations or sources in the rules of each basic security group.

Valid values of N: 1 to 100.', example='sg-bp67acfmxa123b****'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='The Alibaba Cloud account that manages the source security group when you delete security group rule N across accounts.

*   If both `SourceGroupOwnerAccount` and `SourceGroupOwnerId` are not specified, the security group rule that controls access to other security groups managed by your account is deleted.
*   If you specify `SourceCidrIp`, `SourceGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='Test@aliyun.com'),
      sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the source security group when you delete security group rule N across accounts.

*   If both `SourceGroupOwnerId` and `SourceGroupOwnerAccount` are not specified, the security group rule that controls access to other security groups managed by your account is deleted.
*   If you specify `SourceCidrIp`, `SourceGroupOwnerId` is ignored.

Valid values of N: 1 to 100.', example='12345678910'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol of security group rule N. Valid values:

*   If the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1/200.
*   If the Permissions.N.IpProtocol parameter is set to ICMP, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to GRE, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to ALL, the port range is -1/-1, which indicates all ports.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='80/80'),
      sourcePrefixListId?: string(name='SourcePrefixListId', description='The ID of the source prefix list that is referenced in security group rule N. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

When you specify this parameter, take note of the following items:

*   If the network type of a security group is classic network, you cannot reference prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you specify the `SourceCidrIp`, `Ipv6SourceCidrIp`, or `SourceGroupId` parameter, this parameter is ignored.

Valid values of N: 1 to 100.', example='pl-x1j1k5ykzqlixdcy****'),
    }
  ](name='Permissions', description='The security group rules. Valid values of N: 1 to 100.'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to allow inbound access.', example='accept'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='1/200'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the priority of the rule.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
  securityGroupRuleId?: [ string ](name='SecurityGroupRuleId', description='The IDs of the security group rules. Valid values of N: 1 to 100.'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8'),
  sourceGroupId?: string(name='SourceGroupId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupId` to specify the ID of the source security group.', example='sg-bp67acfmxa123b****'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerAccount` to specify the Alibaba Cloud account that manages the source security group.', example='Test@aliyun.com'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.SourceGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the source security group.', example='12345678910'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='80/80'),
  sourcePrefixListId?: string(name='SourcePrefixListId', description='This parameter is deprecated. Use `Permissions.N.SourcePrefixListId` to specify the ID of the source prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RevokeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeSecurityGroupResponseBody(name='body'),
}

/**
  * In the security group-related API documents, inbound traffic is sent by the source and received by the destination.
  * When you call this operation, you can use one of the following groups of parameters to specify the security group rules that you want to delete:
  * *   The parameter used to specify the IDs of security group rules. We recommend that you specify the IDs of security group rules to delete the rules. - If the ID of a specified security group rule does not exist, an error is reported. - You cannot specify the parameters that are no longer available and the Permissions.N-prefixed counterparts of the parameters at the same time. - Sample request:
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup
  *         &SecurityGroupId=sg-bp67acfmxazb4p****
  *         &SecurityGroupRuleId.1=sgr-bpdfmk****
  *         &SecurityGroupRuleId.2=sgr-bpdfmg****
  *         &<Common request parameters>
  * *   Parameters prefixed with Permissions.N.
  *     *   If no security group rule matches the specified parameters, the call to RevokeSecurityGroup is successful but no security group rule is deleted.
  *     *   You cannot specify the SecurityGroupRuleId parameter or parameters that are not prefixed with Permissions.N.
  *     *   You can delete a specific inbound security group rule by specifying one of the following groups of parameters. However, you cannot delete the security group rule if you specify only one of the parameters in a group.
  *     *   Parameters used to delete an inbound security group rule that controls access from a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourceCidrIp.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourceCidrIp=10.0.0.0/8 \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *     *   Parameters used to delete an inbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourceGroupId.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourceGroupId=sg-bp67acfmxa123b\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *     *   Parameters used to delete an inbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourcePrefixListId.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourcePrefixListId=pl-x1j1k5ykzqlixdcy\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *
  * @param request RevokeSecurityGroupRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RevokeSecurityGroupResponse
 */
async function revokeSecurityGroupWithOptions(request: RevokeSecurityGroupRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissions)) {
    query['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupRuleId)) {
    query['SecurityGroupRuleId'] = request.securityGroupRuleId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourceGroupId)) {
    query['SourceGroupId'] = request.sourceGroupId;
  }
  if (!Util.isUnset(request.sourceGroupOwnerAccount)) {
    query['SourceGroupOwnerAccount'] = request.sourceGroupOwnerAccount;
  }
  if (!Util.isUnset(request.sourceGroupOwnerId)) {
    query['SourceGroupOwnerId'] = request.sourceGroupOwnerId;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  if (!Util.isUnset(request.sourcePrefixListId)) {
    query['SourcePrefixListId'] = request.sourcePrefixListId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeSecurityGroup',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In the security group-related API documents, inbound traffic is sent by the source and received by the destination.
  * When you call this operation, you can use one of the following groups of parameters to specify the security group rules that you want to delete:
  * *   The parameter used to specify the IDs of security group rules. We recommend that you specify the IDs of security group rules to delete the rules. - If the ID of a specified security group rule does not exist, an error is reported. - You cannot specify the parameters that are no longer available and the Permissions.N-prefixed counterparts of the parameters at the same time. - Sample request:
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup
  *         &SecurityGroupId=sg-bp67acfmxazb4p****
  *         &SecurityGroupRuleId.1=sgr-bpdfmk****
  *         &SecurityGroupRuleId.2=sgr-bpdfmg****
  *         &<Common request parameters>
  * *   Parameters prefixed with Permissions.N.
  *     *   If no security group rule matches the specified parameters, the call to RevokeSecurityGroup is successful but no security group rule is deleted.
  *     *   You cannot specify the SecurityGroupRuleId parameter or parameters that are not prefixed with Permissions.N.
  *     *   You can delete a specific inbound security group rule by specifying one of the following groups of parameters. However, you cannot delete the security group rule if you specify only one of the parameters in a group.
  *     *   Parameters used to delete an inbound security group rule that controls access from a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourceCidrIp.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourceCidrIp=10.0.0.0/8 \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *     *   Parameters used to delete an inbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourceGroupId.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourceGroupId=sg-bp67acfmxa123b\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *     *   Parameters used to delete an inbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, DestCidrIp (optional), and SourcePrefixListId.
  *         ```
  *         ```
  *     http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroup \\&SecurityGroupId=sg-bp67acfmxazb4p\\*\\*\\*\\* \\&Permissions.1.SourcePrefixListId=pl-x1j1k5ykzqlixdcy\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=80/80 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *
  * @param request RevokeSecurityGroupRequest
  * @return RevokeSecurityGroupResponse
 */
async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupWithOptions(request, runtime);
}

model RevokeSecurityGroupEgressRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
  description?: string(name='Description', description='This parameter is deprecated. Use `Permissions.N.Description` to specify the description of security group rule N.', example='This is description.'),
  destCidrIp?: string(name='DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.DestCidrIp` to specify the destination IPv4 CIDR block.', example='10.0.0.0/8'),
  destGroupId?: string(name='DestGroupId', description='This parameter is deprecated. Use `Permissions.N.DestGroupId` to specify the ID of the destination security group.', example='sg-bp67acfmxa123b****'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerAccount` to specify the Alibaba Cloud account that manages the destination security group.', example='Test@aliyun.com'),
  destGroupOwnerId?: long(name='DestGroupOwnerId', description='This parameter is deprecated. Use `Permissions.N.DestGroupOwnerId` to specify the ID of the Alibaba Cloud account that manages the destination security group.', example='12345678910'),
  destPrefixListId?: string(name='DestPrefixListId', description='This parameter is deprecated. Use `Permissions.N.DestPrefixListId` to specify the ID of the destination prefix list.', example='pl-x1j1k5ykzqlixdcy****'),
  ipProtocol?: string(name='IpProtocol', description='This parameter is deprecated. Use `Permissions.N.IpProtocol` to specify the transport layer protocol.', example='TCP'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6DestCidrIp` to specify the destination IPv6 CIDR block.', example='2001:db8:1233:1a00::***'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.Ipv6SourceCidrIp` to specify the source IPv6 CIDR block.', example='2001:db8:1234:1a00::***'),
  nicType?: string(name='NicType', description='This parameter is deprecated. Use `Permissions.N.NicType` to specify the NIC type.', example='intranet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  permissions?: [ 
    {
      description?: string(name='Description', description='The description of security group rule N. The description must be 1 to 512 characters in length.

Valid values of N: 1 to 100.', example='This is description.'),
      destCidrIp?: string(name='DestCidrIp', description='The destination IPv4 CIDR block for security group rule N. CIDR blocks and IPv4 addresses are supported.

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      destGroupId?: string(name='DestGroupId', description='The ID of the destination security group that is referenced in security group rule N.

*   Specify at least one of the following parameters: `DestGroupId`, `DestCidrIp`, `Ipv6DestCidrIp`, and `DestPrefixListId`.
*   If you specify `DestGroupId` but you do not specify `DestCidrIp`, you must set `NicType` to intranet.
*   If you specify `DestGroupId` and `DestCidrIp`, `DestCidrIp` takes precedence.

When you specify this parameter, take note of the following items:

*   You cannot reference security groups as destinations or sources in the rules of advanced security groups.
*   You can reference up to 20 security groups as destinations or sources in the rules of each basic security group.

Valid values of N: 1 to 100.', example='sg-bp67acfmxa123b****'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount', description='The Alibaba Cloud account that manages the destination security group when you delete security group rule N across accounts.

*   If both `DestGroupOwnerAccount` and `DestGroupOwnerId` are not specified, the security group rule that controls access to other security groups managed by your account is deleted.
*   If you specify `DestCidrIp`, `DestGroupOwnerAccount` is ignored.

Valid values of N: 1 to 100.', example='Test@aliyun.com'),
      destGroupOwnerId?: string(name='DestGroupOwnerId', description='The ID of the Alibaba Cloud account that manages the destination security group when you delete security group rule N across accounts.

*   If both `DestGroupOwnerId` and `DestGroupOwnerAccount` are not specified, the security group rule that controls access to other security groups managed by your account is deleted.
*   If you specify `DestCidrIp`, `DestGroupOwnerId` is ignored.

Valid values of N: 1 to 100.', example='12345678910'),
      destPrefixListId?: string(name='DestPrefixListId', description='The ID of the destination prefix list that is referenced in security group rule N. You can call the [DescribePrefixLists](~~205046~~) operation to query the IDs of available prefix lists.

When you specify this parameter, take note of the following items:

*   If the network type of a security group is classic network, you cannot reference prefix lists in the security group rules. For information about the limits on security groups and prefix lists, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).
*   If you specify the `DestCidrIp`, `Ipv6DestCidrIp`, or `DestGroupId` parameter, this parameter is ignored.

Valid values of N: 1 to 100.', example='pl-x1j1k5ykzqlixdcy****'),
      ipProtocol?: string(name='IpProtocol', description='The transport layer protocol of security group rule N. The values of this parameter are not case-sensitive. Valid values:

*   TCP
*   UDP
*   ICMP
*   ICMPv6
*   GRE
*   ALL: All protocols are supported.

Valid values of N: 1 to 100.', example='TCP'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp', description='The destination IPv6 CIDR block for security group rule N. CIDR blocks and IPv6 addresses are supported.

Valid values of N: 1 to 100.

> This parameter is valid only when the destination is an Elastic Compute Service (ECS) instance that resides in a virtual private cloud (VPC) and supports IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1233:1a00::***'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp', description='The source IPv6 CIDR block. CIDR blocks and IPv6 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.

> This parameter is valid only when the source is an ECS instance that resides in a VPC and supports IPv6 CIDR blocks. You cannot specify both this parameter and the `DestCidrIp` parameter.', example='2001:db8:1234:1a00::***'),
      nicType?: string(name='NicType', description='The network interface card (NIC) type of the security group rule if the security group is of the classic network type. Valid values:

*   internet: public NIC
*   intranet: internal NIC

If the security group is in a VPC, this parameter is set to intranet by default and cannot be changed.

If you specify only `SourceGroupId` when you configure access between security groups, this parameter must be set to intranet.

Default value: internet.

Valid values of N: 1 to 100.', example='intranet'),
      policy?: string(name='Policy', description='The action of security group rule N that determines whether to allow outbound access. Valid values:

*   accept: allows access.
*   drop: denies access and returns no responses. In this case, the request times out or the connection cannot be established.

Default value: accept.

Valid values of N: 1 to 100.', example='accept'),
      portRange?: string(name='PortRange', description='The range of destination ports that correspond to the transport layer protocol of security group rule N. Valid values:

*   If the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1/200.
*   If the Permissions.N.IpProtocol parameter is set to ICMP, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to GRE, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to ALL, the port range is -1/-1, which indicates all ports.

Valid values of N: 1 to 100.', example='22/22'),
      priority?: string(name='Priority', description='The priority of security group rule N. A smaller value specifies a higher priority. Valid values: 1 to 100.

Default value: 1.

Valid values of N: 1 to 100.', example='1'),
      sourceCidrIp?: string(name='SourceCidrIp', description='The source IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='10.0.0.0/8'),
      sourcePortRange?: string(name='SourcePortRange', description='The range of source ports that correspond to the transport layer protocol of security group rule N. Valid values:

*   If the Permissions.N.IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. Specify a port range in the format of \\<start port number>/\\<end port number>. Example: 1/200.
*   If the Permissions.N.IpProtocol parameter is set to ICMP, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to GRE, the port range is -1/-1, which indicates all ports.
*   If the Permissions.N.IpProtocol parameter is set to ALL, the port range is -1/-1, which indicates all ports.

This parameter is supported by quintuple rules. For more information, see [Security group quintuple rules](~~97439~~).

Valid values of N: 1 to 100.', example='22/22'),
    }
  ](name='Permissions', description='The security group rules. Valid values of N: 1 to 100.'),
  policy?: string(name='Policy', description='This parameter is deprecated. Use `Permissions.N.Policy` to specify whether to allow outbound access.', example='accept'),
  portRange?: string(name='PortRange', description='This parameter is deprecated. Use `Permissions.N.PortRange` to specify the range of destination ports.', example='22/22'),
  priority?: string(name='Priority', description='This parameter is deprecated. Use `Permissions.N.Priority` to specify the priority of the rule.', example='1'),
  regionId?: string(name='RegionId', description='The region ID of the security group. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group.', example='sg-bp67acfmxazb4p****'),
  securityGroupRuleId?: [ string ](name='SecurityGroupRuleId', description='The IDs of the security group rules. Valid values of N: 1 to 100.'),
  sourceCidrIp?: string(name='SourceCidrIp', description='This parameter is deprecated. Use `Permissions.N.SourceCidrIp` to specify the source IPv4 CIDR block.', example='10.0.0.0/8'),
  sourcePortRange?: string(name='SourcePortRange', description='This parameter is deprecated. Use `Permissions.N.SourcePortRange` to specify the range of source ports.', example='22/22'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RevokeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeSecurityGroupEgressResponseBody(name='body'),
}

/**
  * In the security group-related API documents, outbound traffic is sent by the source and received by the destination.
  * When you call this operation, you can use one of the following groups of parameters to specify the security group rules that you want to delete:
  * *   The parameter used to specify the IDs of security group rules. We recommend that you specify the IDs of security group rules to delete the rules. - If the ID of a specified security group rule does not exist, an error is reported. - You cannot specify the parameters that are no longer available and the Permissions.N-prefixed counterparts of the parameters at the same time. - Sample request:
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress
  *         &SecurityGroupId=sg-bp67acfmxazb4p****
  *         &SecurityGroupRuleId.1=sgr-bpdfmk****
  *         &SecurityGroupRuleId.2=sgr-bpdfmg****
  *         &<Common request parameters>
  * *   Parameters prefixed with Permissions.N.
  *     *   If no security group rule matches the specified parameters, the call to RevokeSecurityGroupEgress is successful but no security group rule is deleted.
  *     *   You cannot specify the SecurityGroupRuleId parameter or parameters that are not prefixed with Permissions.N.
  *     *   You can delete a specific outbound security group rule by specifying one of the following groups of parameters. However, you cannot delete the security group rule if you specify only one of the parameters in a group.
  *         *   Parameters used to delete an outbound security group rule that controls access from a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestCidrIp.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.DestCidrIp=10.0.0.0/8 \\&Permissions.1.PortRange=-22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *         *   Parameters used to delete an outbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestGroupId.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.DestGroupId=sg-bp67acfmxa123b\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *         *   Parameters used to delete an outbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestPrefixListId.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy\\*\\*\\*\\* \\&Permissions.1.PortRange=-22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *
  * @param request RevokeSecurityGroupEgressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RevokeSecurityGroupEgressResponse
 */
async function revokeSecurityGroupEgressWithOptions(request: RevokeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destCidrIp)) {
    query['DestCidrIp'] = request.destCidrIp;
  }
  if (!Util.isUnset(request.destGroupId)) {
    query['DestGroupId'] = request.destGroupId;
  }
  if (!Util.isUnset(request.destGroupOwnerAccount)) {
    query['DestGroupOwnerAccount'] = request.destGroupOwnerAccount;
  }
  if (!Util.isUnset(request.destGroupOwnerId)) {
    query['DestGroupOwnerId'] = request.destGroupOwnerId;
  }
  if (!Util.isUnset(request.destPrefixListId)) {
    query['DestPrefixListId'] = request.destPrefixListId;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.ipv6DestCidrIp)) {
    query['Ipv6DestCidrIp'] = request.ipv6DestCidrIp;
  }
  if (!Util.isUnset(request.ipv6SourceCidrIp)) {
    query['Ipv6SourceCidrIp'] = request.ipv6SourceCidrIp;
  }
  if (!Util.isUnset(request.nicType)) {
    query['NicType'] = request.nicType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissions)) {
    query['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.portRange)) {
    query['PortRange'] = request.portRange;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupRuleId)) {
    query['SecurityGroupRuleId'] = request.securityGroupRuleId;
  }
  if (!Util.isUnset(request.sourceCidrIp)) {
    query['SourceCidrIp'] = request.sourceCidrIp;
  }
  if (!Util.isUnset(request.sourcePortRange)) {
    query['SourcePortRange'] = request.sourcePortRange;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeSecurityGroupEgress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * In the security group-related API documents, outbound traffic is sent by the source and received by the destination.
  * When you call this operation, you can use one of the following groups of parameters to specify the security group rules that you want to delete:
  * *   The parameter used to specify the IDs of security group rules. We recommend that you specify the IDs of security group rules to delete the rules. - If the ID of a specified security group rule does not exist, an error is reported. - You cannot specify the parameters that are no longer available and the Permissions.N-prefixed counterparts of the parameters at the same time. - Sample request:
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress
  *         &SecurityGroupId=sg-bp67acfmxazb4p****
  *         &SecurityGroupRuleId.1=sgr-bpdfmk****
  *         &SecurityGroupRuleId.2=sgr-bpdfmg****
  *         &<Common request parameters>
  * *   Parameters prefixed with Permissions.N.
  *     *   If no security group rule matches the specified parameters, the call to RevokeSecurityGroupEgress is successful but no security group rule is deleted.
  *     *   You cannot specify the SecurityGroupRuleId parameter or parameters that are not prefixed with Permissions.N.
  *     *   You can delete a specific outbound security group rule by specifying one of the following groups of parameters. However, you cannot delete the security group rule if you specify only one of the parameters in a group.
  *         *   Parameters used to delete an outbound security group rule that controls access from a specified CIDR block: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestCidrIp.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.DestCidrIp=10.0.0.0/8 \\&Permissions.1.PortRange=-22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *         *   Parameters used to delete an outbound security group rule that controls access from a security group: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestGroupId.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.DestGroupId=sg-bp67acfmxa123b\\*\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.PortRange=22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *         *   Parameters used to delete an outbound security group rule that controls access from a prefix list: IpProtocol, PortRange, SourcePortRange (optional), NicType, Policy, SourceCidrIp (optional), and DestPrefixListId.
  *             ```
  *             ```
  *         http(s)://ecs.aliyuncs.com/?Action=RevokeSecurityGroupEgress \\&SecurityGroupId=sg-bp67acfmxazb4ph\\*\\*\\* \\&Permissions.1.IpProtocol=TCP \\&Permissions.1.DestPrefixListId=pl-x1j1k5ykzqlixdcy\\*\\*\\*\\* \\&Permissions.1.PortRange=-22/22 \\&Permissions.1.NicType=intranet \\&Permissions.1.Policy=accept &\\<Common request parameters> \\`\\`\\`
  *
  * @param request RevokeSecurityGroupEgressRequest
  * @return RevokeSecurityGroupEgressResponse
 */
async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupEgressWithOptions(request, runtime);
}

model RunCommandRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value that is unique among different requests. The `ClientToken` value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  commandContent?: string(name='CommandContent', description='Specifies whether to retain the command after it is run. Valid values:

*   true: The command is retained. You can call the InvokeCommand operation to run the command again. The retained command counts against the quota of Cloud Assistant commands.
*   false: The command is not retained. The command is automatically deleted after it is run and does not count against the quota of Cloud Assistant commands.

Default value: false', example='ZWNobyAxMjM='),
  containerId?: string(name='ContainerId', description='The value of tag N of the command. You can specify 1 to 20 tag keys for the command. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
  containerName?: string(name='ContainerName', description='Runs a shell, PowerShell, or batch command on one or more Elastic Compute Service (ECS) instances.', example='test-container'),
  contentEncoding?: string(name='ContentEncoding', description='Specifies whether to run the command on a schedule. Valid values:

*   true: runs the command on the schedule specified by `Frequency`. The results of each execution of a command do not affect the subsequent executions of the command.
*   false: runs the command only once.

Default value: false.', example='Base64'),
  description?: string(name='Description', description='The content of the command. The command content can be plaintext or Base64-encoded. Take note of the following items:

*   If you want to retain the command, make sure that the Base64-encoded command content does not exceed 18 KB in size. If you do not want to retain the command, make sure that the Base64-encoded command content does not exceed 24 KB in size. You can set `KeepCommand` to specify whether to retain the command.

*   If the command content is Base64-encoded, set `ContentEncoding` to Base64.

*   When `EnableParameter` is set to true, the custom parameter feature is enabled and you can configure custom parameters based on the following rules:

    *   Define custom parameters in the `{{}}` format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   The number of custom parameters cannot exceed 20.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.

*   You can specify built-in environment parameters as custom parameters. Then, when you run the command, the parameters are automatically specified by Cloud Assistant. You can specify the following built-in environment parameters:

    *   `{{ACS::RegionId}}`: the ID of the region.

    *   `{{ACS::AccountId}}`: the UID of the Alibaba Cloud account.

    *   `{{ACS::InstanceId}}`: the ID of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceId}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::InstanceName}}`: the name of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceName}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.344
        *   Windows: 2.1.3.344

    *   `{{ACS::InvokeId}}`: the ID of the command task. If you want to specify `{{ACS::InvokeId}}` as a built-in environment variable, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::CommandId}}`: the ID of the command. If you want to specify `{{ACS::CommandId}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309', example='testDescription'),
  enableParameter?: boolean(name='EnableParameter', description='The ID of the resource group to which you want to assign the command executions. When you set this parameter, take note of the following items:

*   The instances specified by the InstanceId.N parameter must belong to the specified resource group.
*   You can set this parameter to call the [DescribeInvocations](~~64840~~) or [DescribeInvocationResults](~~64845~~) operation to query execution results in the specified resource group.', example='false'),
  frequency?: string(name='Frequency', description='The name of the command. The name supports all character sets and can be up to 128 characters in length.', example='0 */20 * * * ?'),
  instanceId?: [ string ](name='InstanceId', description='The name of the password to use to run the command on Windows instances.

If you do not want to use the default System user to run the command on Windows instances, you must specify both the WindowsPasswordName and `Username` parameters. The password is hosted in the parameter repository of Operation Orchestration Service (OOS) by using an encryption parameter to mitigate the risk of password leaks. Only the name of the encryption parameter that corresponds to the password is passed in by using the WindowsPasswordName parameter. For more information, see [Encrypt parameters](~~186828~~) and [Configure a regular user to run Cloud Assistant commands](~~203771~~).

>  If you use the root username for Linux instances or the System username for Windows instances to run the command, you do not need to specify the WindowsPasswordName parameter.', example='i-bp185dy2o3o6neg****'),
  keepCommand?: boolean(name='KeepCommand', description='The ID of instance N on which to run the command. Valid values of N: 1 to 50.

If one of the specified instances does not meet the conditions for running the command, the call fails. To ensure that the call is successful, specify only the IDs of instances that meet the conditions.', example='false'),
  name?: string(name='Name', description='The ID of the command.', example='testName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parameters?: map[string]any(name='Parameters', description='The working directory of the command on the instance.

Default values:

*   For Linux instances, the default value is `/root`, which is the home directory of the administrator (the root user).
*   For Windows instances, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32`.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', description='The language type of the command. Valid values:

*   RunBatScript: batch command, applicable to Windows instances
*   RunPowerShellScript: PowerShell command, applicable to Windows instances
*   RunShellScript: shell command, applicable to Linux instances', example='cn-hangzhou'),
  repeatMode?: string(name='RepeatMode', description='root', example='Once'),
  resourceGroupId?: string(name='ResourceGroupId', description='The tags to add to the command.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command. You can specify 1 to 20 tag keys for the command. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have the specified tag are displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all specified tags are displayed in the response. To query more than 1,000 resources that have the specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The tags to add to the command.', example='TestValue'),
    }
  ](name='Tag', description='The description of the command. The description supports all character sets and can be up to 512 characters in length.'),
  timed?: boolean(name='Timed', description='The key-value pairs of custom parameters to pass in when the command includes custom parameters. For example, assume that the command content is `echo {{name}}`. You can use the `Parameter` parameter to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced by the paired Jack value to generate a new command. As a result, the `echo Jack` command is actually run.

Number of custom parameters: 0 to 10. Take note of the following items:

*   The key cannot be an empty string. It can be up to 64 characters in length.
*   The value can be an empty string.
*   If you want to retain the command, make sure that the size of the Base64-encoded command content (including custom parameters and original command content) does not exceed 18 KB. If you do not want to retain the command, make sure that the size of the Base64-encoded command content does not exceed 24 KB. You can set `KeepCommand` to specify whether to retain the command.
*   The custom parameter names specified in the value of Parameters must all be included in the custom parameter names specified when you created the command. You can use empty strings to represent the parameters that are not passed in.

This parameter is empty by default. You can leave this parameter empty to disable the custom parameter feature.', example='true'),
  timeout?: long(name='Timeout', description='The timeout period for the command execution. Unit: seconds.

A timeout occurs when a command cannot be completed because the process gets stuck, the modules are missing, or the Cloud Assistant client is not installed on the instance. When an execution times out, the command process is forcefully terminated.

Default value: 60.', example='3600'),
  type?: string(name='Type', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='RunShellScript'),
  username?: string(name='Username', description='Specifies whether to enable the the custom parameter feature.

Default value: false', example='The user to use to run the command on instances.

*   For Linux instances, the root user is used.
*   For Windows instances, the System user is used.

You can also specify other user that already exist in the instances to run the command. For security purposes, we recommend that you run Cloud Assistant commands as a regular user. For more information, see [Run Cloud Assistant commands as a regular user](~~203771~~).'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The ID of instance N on which to run the command. Valid values of N: 1 to 50.

If one of the specified instances does not meet the conditions for running the command, the call fails. To ensure that the call is successful, specify only the IDs of instances that meet the conditions.', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', description='The ID of the command task.', example='The schedule on which to run the command. You must specify this parameter when you set `Timed` to `true`. You can configure a command to run at a fixed interval based on a rate expression, run only once at a specified time, or run at designated times based on a cron expression.

*   To run a command at a fixed interval, use a rate expression to specify the interval. You can specify the interval in seconds, minutes, hours, or days. This option is applicable when tasks need to be executed at a fixed interval. Specify the interval in the following format: `rate(<Execution interval value><Execution interval unit>)`. For example, specify `rate(5m)` to run the command every 5 minutes. Take note of the following limits when you set an interval:

    *   The specified interval can be anywhere from 60 seconds to 7 days and must be longer than the timeout period of the scheduled task.
    *   The interval is the amount of time elapsed between two consecutive executions. The interval is irrelevant to the amount of time required to run the command once. For example, assume that you set the interval to 5 minutes and that it takes 2 minutes to run the command each time. Each time the command completes running, the system waits 3 minutes before it runs the command again.
    *   A task is not executed immediately after it is created. For example, assume that you set the interval to 5 minutes and create a task to run the command. The task begins to run 5 minutes after it is created.

*   To run a command only once at a specified time, specify a point in time and a time zone. Specify the point in time in the following format: `at(yyyy-MM-dd HH:mm:ss <Time zone>)`, which indicates `at(Year-Month-Day Hour:Minute:Second <Time zone>)`. If you do not specify a time zone, the default time zone is UTC. You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to specify a command to run only once at 13:15:30 on June 06, 2022 (Shanghai time), set the time to `at(2022-06-06 13:15:30 Asia/Shanghai)`. To specify a command to run only once at 13:15:30 on June 06, 2022 (UTC-7), set the time to `at(2022-06-06 13:15:30 GMT-7:00)`.

*   To run a command at designated times, specify a cron expression. Specify the time in the following format: `<Cron expression> <Time zone>`, where the cron expression is in the format of `<seconds> <minutes> <hours> <day of the month> <month> <day of the week> <year (optional)>`. The system calculates the execution times of the command based on the specified cron expression and time zone and runs the command as scheduled. If you do not specify a time zone, the system time zone of the instance on which to run the command is used by default. For more information about cron expressions, see [Cron expressions](~~64769~~). You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to specify a command to run at 10:15:00 every day in 2022 (Shanghai time), set the time to `0 15 10 ? * * 2022 Asia/Shanghai`. To specify a command to run every half an hour from 10:00:00 to 11:30:00 every day in 2022 (UTC+8), set the time to `0 0/30 10-11 * * ? 2022 GMT +8:00`. To specify a command to run every 5 minutes from 14:00:00 to 14:55:00 every October every two years since 2022 (UTC), set the time to `0 0/5 14 * 10 ? 2022/2 UTC`.

    **

    **Note**The minimum interval must be 10 seconds or more and cannot be shorter than the timeout period of scheduled executions.'),
}

model RunCommandShrinkRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value that is unique among different requests. The `ClientToken` value can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  commandContent?: string(name='CommandContent', description='Specifies whether to retain the command after it is run. Valid values:

*   true: The command is retained. You can call the InvokeCommand operation to run the command again. The retained command counts against the quota of Cloud Assistant commands.
*   false: The command is not retained. The command is automatically deleted after it is run and does not count against the quota of Cloud Assistant commands.

Default value: false', example='ZWNobyAxMjM='),
  containerId?: string(name='ContainerId', description='The value of tag N of the command. You can specify 1 to 20 tag keys for the command. The tag value can be an empty string.

It can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='ab141ddfbacfe02d9dbc25966ed971536124527097398d419a6746873fea****'),
  containerName?: string(name='ContainerName', description='Runs a shell, PowerShell, or batch command on one or more Elastic Compute Service (ECS) instances.', example='test-container'),
  contentEncoding?: string(name='ContentEncoding', description='Specifies whether to run the command on a schedule. Valid values:

*   true: runs the command on the schedule specified by `Frequency`. The results of each execution of a command do not affect the subsequent executions of the command.
*   false: runs the command only once.

Default value: false.', example='Base64'),
  description?: string(name='Description', description='The content of the command. The command content can be plaintext or Base64-encoded. Take note of the following items:

*   If you want to retain the command, make sure that the Base64-encoded command content does not exceed 18 KB in size. If you do not want to retain the command, make sure that the Base64-encoded command content does not exceed 24 KB in size. You can set `KeepCommand` to specify whether to retain the command.

*   If the command content is Base64-encoded, set `ContentEncoding` to Base64.

*   When `EnableParameter` is set to true, the custom parameter feature is enabled and you can configure custom parameters based on the following rules:

    *   Define custom parameters in the `{{}}` format. Within `{{}}`, the spaces and line feeds before and after the parameter names are ignored.
    *   The number of custom parameters cannot exceed 20.
    *   A custom parameter name can contain only letters, digits, underscores (\\_), and hyphens (-). The name is case-insensitive.
    *   Each custom parameter name cannot exceed 64 bytes in length.

*   You can specify built-in environment parameters as custom parameters. Then, when you run the command, the parameters are automatically specified by Cloud Assistant. You can specify the following built-in environment parameters:

    *   `{{ACS::RegionId}}`: the ID of the region.

    *   `{{ACS::AccountId}}`: the UID of the Alibaba Cloud account.

    *   `{{ACS::InstanceId}}`: the ID of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceId}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::InstanceName}}`: the name of the instance. If you want to run the command on multiple instances and specify `{{ACS::InstanceName}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.344
        *   Windows: 2.1.3.344

    *   `{{ACS::InvokeId}}`: the ID of the command task. If you want to specify `{{ACS::InvokeId}}` as a built-in environment variable, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309

    *   `{{ACS::CommandId}}`: the ID of the command. If you want to specify `{{ACS::CommandId}}` as a built-in environment parameter, make sure that your Cloud Assistant is of the following versions or later:

        *   Linux: 2.2.3.309
        *   Windows: 2.1.3.309', example='testDescription'),
  enableParameter?: boolean(name='EnableParameter', description='The ID of the resource group to which you want to assign the command executions. When you set this parameter, take note of the following items:

*   The instances specified by the InstanceId.N parameter must belong to the specified resource group.
*   You can set this parameter to call the [DescribeInvocations](~~64840~~) or [DescribeInvocationResults](~~64845~~) operation to query execution results in the specified resource group.', example='false'),
  frequency?: string(name='Frequency', description='The name of the command. The name supports all character sets and can be up to 128 characters in length.', example='0 */20 * * * ?'),
  instanceId?: [ string ](name='InstanceId', description='The name of the password to use to run the command on Windows instances.

If you do not want to use the default System user to run the command on Windows instances, you must specify both the WindowsPasswordName and `Username` parameters. The password is hosted in the parameter repository of Operation Orchestration Service (OOS) by using an encryption parameter to mitigate the risk of password leaks. Only the name of the encryption parameter that corresponds to the password is passed in by using the WindowsPasswordName parameter. For more information, see [Encrypt parameters](~~186828~~) and [Configure a regular user to run Cloud Assistant commands](~~203771~~).

>  If you use the root username for Linux instances or the System username for Windows instances to run the command, you do not need to specify the WindowsPasswordName parameter.', example='i-bp185dy2o3o6neg****'),
  keepCommand?: boolean(name='KeepCommand', description='The ID of instance N on which to run the command. Valid values of N: 1 to 50.

If one of the specified instances does not meet the conditions for running the command, the call fails. To ensure that the call is successful, specify only the IDs of instances that meet the conditions.', example='false'),
  name?: string(name='Name', description='The ID of the command.', example='testName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  parametersShrink?: string(name='Parameters', description='The working directory of the command on the instance.

Default values:

*   For Linux instances, the default value is `/root`, which is the home directory of the administrator (the root user).
*   For Windows instances, the default value is the directory where the Cloud Assistant client process resides. Example: `C:\\Windows\\System32`.', example='{"name":"Jack", "accessKey":"LTAIdyvdIqaRY****"}'),
  regionId?: string(name='RegionId', description='The language type of the command. Valid values:

*   RunBatScript: batch command, applicable to Windows instances
*   RunPowerShellScript: PowerShell command, applicable to Windows instances
*   RunShellScript: shell command, applicable to Linux instances', example='cn-hangzhou'),
  repeatMode?: string(name='RepeatMode', description='root', example='Once'),
  resourceGroupId?: string(name='ResourceGroupId', description='The tags to add to the command.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N of the command. You can specify 1 to 20 tag keys for the command. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have the specified tag are displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all specified tags are displayed in the response. To query more than 1,000 resources that have the specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The tags to add to the command.', example='TestValue'),
    }
  ](name='Tag', description='The description of the command. The description supports all character sets and can be up to 512 characters in length.'),
  timed?: boolean(name='Timed', description='The key-value pairs of custom parameters to pass in when the command includes custom parameters. For example, assume that the command content is `echo {{name}}`. You can use the `Parameter` parameter to pass in the `{"name":"Jack"}` key-value pair. The `name` key of the custom parameter is automatically replaced by the paired Jack value to generate a new command. As a result, the `echo Jack` command is actually run.

Number of custom parameters: 0 to 10. Take note of the following items:

*   The key cannot be an empty string. It can be up to 64 characters in length.
*   The value can be an empty string.
*   If you want to retain the command, make sure that the size of the Base64-encoded command content (including custom parameters and original command content) does not exceed 18 KB. If you do not want to retain the command, make sure that the size of the Base64-encoded command content does not exceed 24 KB. You can set `KeepCommand` to specify whether to retain the command.
*   The custom parameter names specified in the value of Parameters must all be included in the custom parameter names specified when you created the command. You can use empty strings to represent the parameters that are not passed in.

This parameter is empty by default. You can leave this parameter empty to disable the custom parameter feature.', example='true'),
  timeout?: long(name='Timeout', description='The timeout period for the command execution. Unit: seconds.

A timeout occurs when a command cannot be completed because the process gets stuck, the modules are missing, or the Cloud Assistant client is not installed on the instance. When an execution times out, the command process is forcefully terminated.

Default value: 60.', example='3600'),
  type?: string(name='Type', description='The region ID of the command. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='RunShellScript'),
  username?: string(name='Username', description='Specifies whether to enable the the custom parameter feature.

Default value: false', example='The user to use to run the command on instances.

*   For Linux instances, the root user is used.
*   For Windows instances, the System user is used.

You can also specify other user that already exist in the instances to run the command. For security purposes, we recommend that you run Cloud Assistant commands as a regular user. For more information, see [Run Cloud Assistant commands as a regular user](~~203771~~).'),
  windowsPasswordName?: string(name='WindowsPasswordName', description='The ID of instance N on which to run the command. Valid values of N: 1 to 50.

If one of the specified instances does not meet the conditions for running the command, the call fails. To ensure that the call is successful, specify only the IDs of instances that meet the conditions.', example='axtSecretPassword'),
  workingDir?: string(name='WorkingDir', description='The ID of the command task.', example='The schedule on which to run the command. You must specify this parameter when you set `Timed` to `true`. You can configure a command to run at a fixed interval based on a rate expression, run only once at a specified time, or run at designated times based on a cron expression.

*   To run a command at a fixed interval, use a rate expression to specify the interval. You can specify the interval in seconds, minutes, hours, or days. This option is applicable when tasks need to be executed at a fixed interval. Specify the interval in the following format: `rate(<Execution interval value><Execution interval unit>)`. For example, specify `rate(5m)` to run the command every 5 minutes. Take note of the following limits when you set an interval:

    *   The specified interval can be anywhere from 60 seconds to 7 days and must be longer than the timeout period of the scheduled task.
    *   The interval is the amount of time elapsed between two consecutive executions. The interval is irrelevant to the amount of time required to run the command once. For example, assume that you set the interval to 5 minutes and that it takes 2 minutes to run the command each time. Each time the command completes running, the system waits 3 minutes before it runs the command again.
    *   A task is not executed immediately after it is created. For example, assume that you set the interval to 5 minutes and create a task to run the command. The task begins to run 5 minutes after it is created.

*   To run a command only once at a specified time, specify a point in time and a time zone. Specify the point in time in the following format: `at(yyyy-MM-dd HH:mm:ss <Time zone>)`, which indicates `at(Year-Month-Day Hour:Minute:Second <Time zone>)`. If you do not specify a time zone, the default time zone is UTC. You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to specify a command to run only once at 13:15:30 on June 06, 2022 (Shanghai time), set the time to `at(2022-06-06 13:15:30 Asia/Shanghai)`. To specify a command to run only once at 13:15:30 on June 06, 2022 (UTC-7), set the time to `at(2022-06-06 13:15:30 GMT-7:00)`.

*   To run a command at designated times, specify a cron expression. Specify the time in the following format: `<Cron expression> <Time zone>`, where the cron expression is in the format of `<seconds> <minutes> <hours> <day of the month> <month> <day of the week> <year (optional)>`. The system calculates the execution times of the command based on the specified cron expression and time zone and runs the command as scheduled. If you do not specify a time zone, the system time zone of the instance on which to run the command is used by default. For more information about cron expressions, see [Cron expressions](~~64769~~). You can specify the time zone in the following forms:

    *   The time zone name. Examples: `Asia/Shanghai` and `America/Los_Angeles`.
    *   The time offset from GMT. Examples: `GMT+8:00` (UTC+8) and `GMT-7:00` (UTC-7). If you use the GMT format, do not pad leading zeros to the hour value.
    *   The time zone abbreviation. Only UTC is supported.

    For example, to specify a command to run at 10:15:00 every day in 2022 (Shanghai time), set the time to `0 15 10 ? * * 2022 Asia/Shanghai`. To specify a command to run every half an hour from 10:00:00 to 11:30:00 every day in 2022 (UTC+8), set the time to `0 0/30 10-11 * * ? 2022 GMT +8:00`. To specify a command to run every 5 minutes from 14:00:00 to 14:55:00 every October every two years since 2022 (UTC), set the time to `0 0/5 14 * 10 ? 2022/2 UTC`.

    **

    **Note**The minimum interval must be 10 seconds or more and cannot be shorter than the timeout period of scheduled executions.'),
}

model RunCommandResponseBody = {
  commandId?: string(name='CommandId', description='The command ID.', example='c-7d2a745b412b4601b2d47f6a768d****'),
  invokeId?: string(name='InvokeId', description='The command task ID.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  requestId?: string(name='RequestId', description='58928', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunCommandResponseBody(name='body'),
}

/**
  * /home/
  *
  * @param tmpReq RunCommandRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RunCommandResponse
 */
async function runCommandWithOptions(tmpReq: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(tmpReq);
  var request = new RunCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.commandContent)) {
    query['CommandContent'] = request.commandContent;
  }
  if (!Util.isUnset(request.containerId)) {
    query['ContainerId'] = request.containerId;
  }
  if (!Util.isUnset(request.containerName)) {
    query['ContainerName'] = request.containerName;
  }
  if (!Util.isUnset(request.contentEncoding)) {
    query['ContentEncoding'] = request.contentEncoding;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.enableParameter)) {
    query['EnableParameter'] = request.enableParameter;
  }
  if (!Util.isUnset(request.frequency)) {
    query['Frequency'] = request.frequency;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.keepCommand)) {
    query['KeepCommand'] = request.keepCommand;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parametersShrink)) {
    query['Parameters'] = request.parametersShrink;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.repeatMode)) {
    query['RepeatMode'] = request.repeatMode;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.timed)) {
    query['Timed'] = request.timed;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.username)) {
    query['Username'] = request.username;
  }
  if (!Util.isUnset(request.windowsPasswordName)) {
    query['WindowsPasswordName'] = request.windowsPasswordName;
  }
  if (!Util.isUnset(request.workingDir)) {
    query['WorkingDir'] = request.workingDir;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunCommand',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * /home/
  *
  * @param request RunCommandRequest
  * @return RunCommandResponse
 */
async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model RunInstancesRequest {
  cpuOptions?: {
    core?: int32(name='Core', description='The number of CPU cores. This parameter cannot be specified but only uses its default value.

For information about the default value, see [Customize CPU options](~~145895~~).', example='2'),
    numa?: string(name='Numa', description='This parameter is no longer used.', example='1'),
    threadsPerCore?: int32(name='ThreadsPerCore', description='The number of threads per CPU core. The following formula is used to calculate the number of vCPUs of the instance: `CpuOptions.Core` value × `CpuOptions.ThreadPerCore` value.

*   The following formula is used to calculate the number of vCPUs of the instance: `CpuOptions.Core` value × CpuOptions.ThreadPerCore value.
*   This parameter is applicable only to specific instance types.

For information about valid values and the default value, see [Customize CPU options](~~145895~~).', example='2'),
  }(name='CpuOptions'),
  hibernationOptions?: {
    configured?: boolean(name='Configured', description='> This parameter is in invitational preview and is unavailable.', example='false'),
  }(name='HibernationOptions'),
  privatePoolOptions?: {
    id?: string(name='Id', description='The ID of the private pool. The ID of a private pool is the same as that of the elasticity assurance or capacity reservation for which the private pool is generated.', example='eap-bp67acfmxazb4****'),
    matchCriteria?: string(name='MatchCriteria', description='The type of the private pool to use to create the instance. A private pool is generated after an elasticity assurance or a capacity reservation takes effect. You can select the private pool when you start an instance. Valid values:

*   Open: open private pool. The system selects a matching open private pool to create the instance. If no matching open private pools are found, resources in the public pool are used. When you set this parameter to Open, you can leave the `PrivatePoolOptions.Id` parameter empty.
*   Target: specified private pool. The system uses the capacity in a specified private pool to create the instance. If the specified private pool is unavailable, the instance cannot be created. If you set this parameter to Target, you must specify the `PrivatePoolOptions.Id` parameter.
*   None: no private pool. The capacity in private pools is not used.

Default value: None.

In the following scenarios, the PrivatePoolOptions.MatchCriteria parameter can be set only to `None` or left empty:

*   A preemptible instance is created.
*   The instance is created in the classic network.
*   The instance is created on a dedicated host.', example='Open'),
  }(name='PrivatePoolOptions'),
  schedulerOptions?: {
    dedicatedHostClusterId?: string(name='DedicatedHostClusterId', description='The ID of the dedicated host cluster in which to create the instance. After this parameter is specified, the system selects one dedicated host from the specified cluster to create the instance.

> This parameter is valid only when the `Tenancy` parameter is set to `host`.

When you specify both the `DedicatedHostId` and `SchedulerOptions.DedicatedHostClusterId` parameters, take note of the following items:

*   If the specified dedicated host belongs to the specified dedicated host cluster, the instance is preferentially deployed on the specified dedicated host.
*   If the specified dedicated host does not belong to the specified dedicated host cluster, the instance cannot be created.

You can call the [DescribeDedicatedHostClusters](~~184145~~) operation to query the list of dedicated host cluster IDs.', example='dc-bp12wlf6am0vz9v2****'),
  }(name='SchedulerOptions'),
  securityOptions?: {
    confidentialComputingMode?: string(name='ConfidentialComputingMode', description='The confidential computing mode. Set the value to Enclave.

A value of Enclave indicates that an enclave-based confidential computing environment is built on the instance. When you call the `RunInstances` operation, you can set this parameter only for c7, g7, or r7 instances to use enclave-based confidential computing. Take note of the following items:

*   The confidential computing feature is in invitational preview. To use this feature, submit a ticket.
*   When you use the ECS API to create instances that support enclave-based confidential computing, you can call only the `RunInstances` operation. The `CreateInstance` operation does not support the `SecurityOptions.ConfidentialComputingMode` parameter.
*   Enclave-based confidential computing is implemented based on the Alibaba Cloud trusted system (vTPM). When you build a confidential computing environment on an instance by using Enclave, the Alibaba Cloud trusted system is enabled for the instance. Therefore, if you set `SecurityOptions.ConfidentialComputingMode` to Enclave when you call this operation, the created instances use enclave-based confidential computing and the Alibaba Cloud trusted system regardless of whether `SecurityOptions.TrustedSystemMode` is set to vTPM.

For more information about confidential computing, see [Build a confidential computing environment by using Enclave](~~203433~~).', example='Enclave'),
    trustedSystemMode?: string(name='TrustedSystemMode', description='The trusted system mode. Set the value to vTPM.

The trusted system mode supports the following instance families:

*   g7, c7, and r7
*   Security-enhanced instance families: g7t, c7t, and r7t

When you create instances of the preceding instance families, you must set this parameter. Take note of the following items:

*   To use the Alibaba Cloud trusted system, set this parameter to vTPM. Then, the Alibaba Cloud trusted system performs trust verifications when the instances start.
*   If you do not want to use the Alibaba Cloud trusted system, leave this parameter empty. Note that if your created instances use an enclave-based confidential computing environment (with `SecurityOptions.ConfidentialComputingMode` set to Enclave), the Alibaba Cloud trusted system is enabled for the instances.
*   When you use the ECS API to create instances that use the trusted system, you can call only the `RunInstances` operation. The `CreateInstance` operation does not support the `SecurityOptions.TrustedSystemMode` parameter.

> If you have configured an instance as a trusted one when you created the instance, you can use only an image that support the trusted system to replace the system disk of the instance.

For more information about the trusted system, see [Overview](~~201394~~).', example='vTPM'),
  }(name='SecurityOptions'),
  systemDisk?: {
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to the system disk.', example='sp-bp67acfmxazb4p****'),
    category?: string(name='Category', description='The category of the system disk. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: enhanced SSD (ESSD)
*   cloud: basic disk
*   cloud_auto: ESSD AutoPL disk

For non-I/O optimized instances of retired instance types, the default value is cloud. For other instances, the default value is cloud_efficiency.', example='cloud_ssd'),
    description?: string(name='Description', description='The description of the system disk. The description must be 2 to 256 characters in length. The description can contain letters but cannot start with `http://` or `https://`.', example='SystemDisk_Description'),
    diskName?: string(name='DiskName', description='The name of the system disk. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (\\_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).', example='cloud_ssdSystem'),
    performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as the system disk. Default value: PL1. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL0'),
    size?: string(name='Size', description='The size of the system disk. Unit: GiB. Valid values: 20 to 500.

The value of this parameter must be at least 20 and greater than or equal to the image size.

Default value: 40 or the image size, whichever is greater.', example='40'),
    burstingEnabled?: boolean(name='BurstingEnabled', description='Specifies whether to enable the burst feature for the system disk. Valid values:

*   true
*   false

> This parameter is available only if you set `SystemDisk.Category` to `cloud_auto`.', example='false'),
    encryptAlgorithm?: string(name='EncryptAlgorithm', description='The algorithm to use to encrypt the system disk. Valid values:

*   ase-256
*   sm4-128

Default value: ase-256.', example='ase-256'),
    encrypted?: string(name='Encrypted', description='Specifies whether to encrypt the system disk. Valid values:

*   true: encrypts the data disk.
*   false: does not encrypt the data disk.

Default value: false.

> The system disks of instances cannot be encrypted during instance creation in Hong Kong Zone D or Singapore Zone A.', example='false'),
    KMSKeyId?: string(name='KMSKeyId', description='The ID of the KMS key to use for the system disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
    provisionedIops?: long(name='ProvisionedIops', description='The provisioned read/write IOPS of the ESSD AutoPL disk to use as the system disk. Valid values: 0 to min{50,000, 1,000 × Capacity - Baseline IOPS}

Baseline IOPS = min{1,800 + 50 × Capacity, 50,000}

> This parameter is available only if you set the SystemDisk.Category parameter to cloud_auto. For more information, see [ESSD AutoPL disks](~~368372~~) and [Modify the performance configurations of an ESSD AutoPL disk](~~413275~~).', example='40000'),
    storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use disks in a dedicated block storage cluster as system disks when you create instances, you must specify this parameter. For more information about dedicated block storage clusters, see [What is Dedicated Block Storage Cluster?](~~208883~~)', example='dbsc-j5e1sf2vaf5he8m2****'),
  }(name='SystemDisk'),
  affinity?: string(name='Affinity', description='Specifies whether to associate an instance on a dedicated host with the dedicated host. Valid values:

*   default: does not associate the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance is automatically deployed to another dedicated host in the automatic deployment resource pool if the available resources of the original dedicated host are insufficient.
*   host: associates the instance with the dedicated host. When you start an instance that was stopped in economical mode, the instance remains on the original dedicated host. If the available resources of the original dedicated host are insufficient, the instance cannot be started.

Default value: default.', example='default'),
  amount?: int32(name='Amount', description='The number of instances that you want to create. Valid values: 1 to 100.

Default value: 1.', example='3'),
  arn?: [ 
    {
      assumeRoleFor?: long(name='AssumeRoleFor', description='> This parameter is in invitational preview and is unavailable.', example='0'),
      roleType?: string(name='RoleType', description='> This parameter is in invitational preview and is unavailable.', example='null'),
      rolearn?: string(name='Rolearn', description='> This parameter is in invitational preview and is unavailable.', example='null'),
    }
  ](name='Arn', description='> This parameter is in invitational preview and is unavailable.'),
  autoPay?: boolean(name='AutoPay'),
  autoReleaseTime?: string(name='AutoReleaseTime', description='The time when to automatically release the pay-as-you-go instance. Specify the time in the [ISO 8601](~~25696~~) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.

*   If the value of seconds (`ss`) is not `00`, the time is automatically rounded to the nearest minute based on the value of minutes (`mm`).
*   The specified time must be at least 30 minutes later than the current time.
*   The specified time can be at most three years from the current time.', example='2018-01-01T12:05:00Z'),
  autoRenew?: boolean(name='AutoRenew', description='Specifies whether to enable auto-renewal for the instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PrePaid`. Valid values:

*   true: enables auto-renewal.
*   false: does not enable auto-renewal.

Default value: false.', example='true'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', description='The auto-renewal period of the instance. Valid values:

*   Valid values when PeriodUnit is set to Week: 1, 2, and 3.
*   Valid values when PeriodUnit is set to Month: 1, 2, 3, 6, 12, 24, 36, 48, and 60.

Default value: 1.', example='1'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  creditSpecification?: string(name='CreditSpecification', description='The performance mode of the burstable instance. Valid values:

*   Standard: the standard mode. For more information, see the "Standard mode" section in [Burstable instances](~~59977~~).
*   Unlimited: the unlimited mode. For more information, see the "Unlimited mode" section in [Burstable instances](~~59977~~).', example='Standard'),
  dataDisk?: [ 
    {
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='The ID of the automatic snapshot policy to apply to data disk N.', example='sp-bp67acfmxazb4p****'),
      burstingEnabled?: boolean(name='BurstingEnabled', description='> This parameter is in invitational preview and is unavailable.', example='false'),
      category?: string(name='Category', description='The category of data disk N. Valid values:

*   cloud_efficiency: ultra disk
*   cloud_ssd: standard SSD
*   cloud_essd: ESSD
*   cloud: basic disk
*   cloud_auto: ESSD AutoPL disk

For I/O optimized instances, the default value is cloud_efficiency. For non-I/O optimized instances, the default value is cloud.', example='cloud_ssd'),
      deleteWithInstance?: boolean(name='DeleteWithInstance', description='Specifies whether to release data disk N when the instance is released. Valid values:

*   true: releases data disk N when the instance is released.
*   false: does not release data disk N when the instance is released.

Default value: true.', example='true'),
      description?: string(name='Description', description='The description of data disk N. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.', example='DataDisk_Description'),
      device?: string(name='Device', description='The mount point of data disk N.

> This parameter is applicable to scenarios in which a full image is used to create instances. A full image is an image that contains an operating system, application software, and business data. For these scenarios, you can set this parameter to the mount point of data disk N contained in the full image and modify the `DataDisk.N.Size` and `DataDisk.N.Category` parameters to change the category and size of data disk N created based on the image.', example='/dev/xvdb'),
      diskName?: string(name='DiskName', description='The name of data disk N. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, periods (.), colons (:), underscores (\\_), and hyphens (-).', example='cloud_ssdData'),
      encryptAlgorithm?: string(name='EncryptAlgorithm', description='The algorithm to use to encrypt data disk N. Valid values:

*   aes-256
*   sm4-128

Default value: aes-256.', example='aes-256'),
      encrypted?: string(name='Encrypted', description='Specifies whether to encrypt data disk N. Valid values:

*   true: encrypts the data disk.
*   false: does not encrypt the data disk.

Default value: false.', example='false'),
      KMSKeyId?: string(name='KMSKeyId', description='The ID of the Key Management Service (KMS) key that is used for the data disk.', example='0e478b7a-4262-4802-b8cb-00d3fb40****'),
      performanceLevel?: string(name='PerformanceLevel', description='The performance level of the ESSD to use as data disk N. The value of N must be the same as that in `DataDisk.N.Category` when DataDisk.N.Category is set to cloud_essd. Default value: PL1. Valid values:

*   PL0: A single ESSD can deliver up to 10,000 random read/write IOPS.
*   PL1: A single ESSD can deliver up to 50,000 random read/write IOPS.
*   PL2: A single ESSD can deliver up to 100,000 random read/write IOPS.
*   PL3: A single ESSD can deliver up to 1,000,000 random read/write IOPS.

For more information about ESSD performance levels, see [ESSDs](~~122389~~).', example='PL1'),
      provisionedIops?: long(name='ProvisionedIops', description='> This parameter is in invitational preview and is unavailable.', example='40000'),
      size?: int32(name='Size', description='The size of data disk N. Valid values of N: 1 to 16. Unit: GiB. Valid values of this parameter:

*   Valid values when DataDisk.N.Category is set to cloud_efficiency: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_ssd: 20 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud_essd: depend on the `DataDisk.N.PerformanceLevel` value.

    *   Valid values when DataDisk.N.PerformanceLevel is set to PL0: 40 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL1: 20 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL2: 461 to 32768.
    *   Valid values when DataDisk.N.PerformanceLevel is set to PL3: 1261 to 32768.

*   Valid values when DataDisk.N.Category is set to cloud: 5 to 2000.

*   Valid values when DataDisk.N.Category is set to cloud_auto: 40 to 32768.

The value of this parameter must be greater than or equal to the size of the snapshot specified by the `SnapshotId` parameter.', example='2000'),
      snapshotId?: string(name='SnapshotId', description='The ID of the snapshot to use to create data disk N. Valid values of N: 1 to 16.

If the `DataDisk.N.SnapshotId` parameter is specified, the `DataDisk.N.Size` parameter is ignored. The data disk is created with the size of the specified snapshot. Use snapshots created after July 15, 2013. Otherwise, an error is returned and your request is rejected.', example='s-bp17441ohwka0yuh****'),
      storageClusterId?: string(name='StorageClusterId', description='The ID of the dedicated block storage cluster. If you want to use a disk in a dedicated block storage cluster as data disk N when you create instances, you must specify this parameter.', example='dbsc-j5e1sf2vaf5he8m2****'),
    }
  ](name='DataDisk', description='Details about the data disks.'),
  dedicatedHostId?: string(name='DedicatedHostId', description='The ID of the dedicated host on which to create the instance. If you set the `DedicatedHostId` parameter, the `SpotStrategy` and `SpotPriceLimit` parameters are ignored. This is because preemptible instances cannot be created on dedicated hosts.

You can call the [DescribeDedicatedHosts](~~134242~~) operation to query the list of dedicated host IDs.', example='dh-bp67acfmxazb4p****'),
  deletionProtection?: boolean(name='DeletionProtection', description='Specifies whether to enable release protection for the instance. This parameter determines whether you can use the ECS console or call the [DeleteInstance](~~25507~~) operation to release the instance. Valid values:

*   true: enables release protection for the instance.
*   false: disables release protection for the instance.

Default value: false.

> This parameter is applicable to only pay-as-you-go instances. It can protect instances against manual releases, but not against automatic releases.', example='false'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo', description='The number of the deployment set group to which to deploy the instance. If the deployment set specified by the DeploymentSetId parameter uses the high availability group strategy (AvailabilityGroup), you can use the DeploymentSetGroupNo parameter to specify a deployment set group in the deployment set. Valid values: 1 to 7.', example='1'),
  deploymentSetId?: string(name='DeploymentSetId', description='The ID of the deployment set to which to deploy the instance.', example='ds-bp1brhwhoqinyjd6****'),
  description?: string(name='Description', description='The description of the instance. The description must be 2 to 256 characters in length, and cannot start with `http://` or `https://`.', example='Instance_Description'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the validity of the request without actually making the request. Default value: false. Valid values:

*   true: The validity of the request is checked but the request is not made. Check items include whether required parameters are specified, the request format, service limits, and available ECS resources. If the check fails, the corresponding error code is returned. If the check succeeds, the `DryRunOperation` error code is returned.
*   false: The validity of the request is checked, and the request is made if the check succeeds.', example='false'),
  hostName?: string(name='HostName', description='The hostname of the instance. Take note of the following items:

*   The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).

*   For Windows instances, the hostname must be 2 to 15 characters in length and cannot contain periods (.) or contain only digits. It can contain letters, digits, and hyphens (-).

*   For instances that run other operating systems such as Linux, take note of the following items:

    *   The hostname must be 2 to 64 characters in length. You can use periods (.) to separate a hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
    *   You can use the `${instance_id}` placeholder to pass instance IDs into the hostname specified by `HostName`. For example, if you set `HostName` to k8s-${instance_id} and the instance is assigned an ID of `i-123abc****`, the hostname of the instance is `k8s-i-123abc****`.

When you create multiple instances, you can perform the following operations:

*   Batch configure sequential hostnames for the instances. For more information, see [Batch configure sequential names or hostnames for multiple instances](~~196048~~).
*   Use the `HostNames.N` parameter to configure different hostnames for instances. You cannot specify both the `HostName` and `HostNames.N` parameters.', example='k8s-node-[1,4]-ecshost'),
  hostNames?: [ string ](name='HostNames', description='The hostname of instance N. You can use this parameter to specify different hostnames for multiple instances.', example='ecs-host-01'),
  hpcClusterId?: string(name='HpcClusterId', description='The ID of the Elastic High Performance Computing (E-HPC) cluster to which to assign the instance.', example='hpc-bp67acfmxazb4p****'),
  httpEndpoint?: string(name='HttpEndpoint', description='Specifies whether to enable the access channel for instance metadata. Valid values:

*   enabled
*   disabled

Default value: enabled.

> For more information about instance metadata, see [Overview of ECS instance metadata](~~49122~~).', example='enabled'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit', description='The HTTP PUT response hop limit for accessing instance metadata. Valid values: 1 to 64.

Default value: 1.', example='3'),
  httpTokens?: string(name='HttpTokens', description='Specifies whether to forcefully use the security-enhanced mode (IMDSv2) to access instance metadata. Valid values:

*   optional: does not forcefully use the security-enhanced mode (IMDSv2).
*   required: forcefully uses the security-enhanced mode (IMDSv2). After you set this parameter to required, you cannot access instance metadata in normal mode.

Default value: optional.

> For more information about the modes of accessing instance metadata, see [Access mode of instance metadata](~~150575~~).', example='optional'),
  imageFamily?: string(name='ImageFamily', description='The name of the image family. You can set this parameter to obtain the latest available custom image from the specified image family to create instances.

*   If you set the `ImageId` parameter, you cannot set the ImageFamily parameter.
*   If you do not set the `ImageId` parameter but use the `LaunchTemplateId` or `LaunchTemplateName` parameter to specify a launch template that has the `ImageId` parameter set, you cannot set the ImageFamily parameter.
*   If you do not set the `ImageId` parameter but use the `LaunchTemplateId` or `LaunchTemplateName` parameter to specify a launch template that does not have the `ImageId` parameter set, you can set the ImageFamily parameter.
*   If you do not set the `ImageId`, `LaunchTemplateId`, or `LaunchTemplateName` parameter, you can set the ImageFamily parameter.', example='hangzhou-daily-update'),
  imageId?: string(name='ImageId', description='The ID of the image to use to create the instance. You can call the [DescribeImages](~~25534~~) operation to query available images. If you do not use the `LaunchTemplateId` or `LaunchTemplateName` parameter to specify a launch template and do not set the `ImageFamily` parameter to obtain the latest available custom image from the specified image family, you must specify the `ImageId` parameter.', example='aliyun_2_1903_x64_20G_alibase_20200324.vhd'),
  imageOptions?: {
    loginAsNonRoot?: boolean(name='LoginAsNonRoot', description='使用该镜像的实例是否支持使用ecs-user用户登录。可能值：

- true：是

- false：否', example='false'),
  }(name='ImageOptions', description='镜像相关属性信息。'),
  instanceChargeType?: string(name='InstanceChargeType', description='The billing method of the instance. Valid values:

*   PrePaid: subscription
*   PostPaid: pay-as-you-go

Default value: PostPaid.

If you set this parameter to PrePaid, make sure that your account has sufficient balance or credit. Otherwise, an `InvalidPayMethod` error is returned.', example='PrePaid'),
  instanceName?: string(name='InstanceName', description='The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (\\_), periods (.), and hyphens (-). The default value of this parameter is the `InstanceId` value.

When you batch create instances, you can batch configure sequential names for the instances. For more information, see [Batch configure sequential names or hostnames for multiple instances](~~196048~~).', example='k8s-node-[1,4]-alibabacloud'),
  instanceType?: string(name='InstanceType', description='The instance type. If you do not use `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template, you must set the `InstanceType` parameter.

*   Select an instance type. See [Instance families](~~25378~~) or call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of an instance type, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
*   Query available resources. Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.', example='ecs.g6.large'),
  internetChargeType?: string(name='InternetChargeType', description='The billing method for network usage. Valid values:

*   PayByBandwidth: pay-by-bandwidth
*   PayByTraffic: pay-by-traffic

Default value: PayByTraffic.

> When the **pay-by-traffic** billing method for network usage is used, the maximum inbound and outbound bandwidths are used as the upper limits of bandwidths instead of guaranteed performance specifications. In scenarios where demand outstrips resource supplies, these maximum bandwidth values may not be reached. If you want guaranteed bandwidths for your instance, use the **pay-by-bandwidth** billing method for network usage.', example='PayByTraffic'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', description='The maximum inbound public bandwidth. Unit: Mbit/s. Valid values:

*   When the purchased outbound public bandwidth is less than or equal to 10 Mbit/s, the valid values of InternetMaxBandwidthIn are 1 to 10, and the default value is 10.
*   When the purchased outbound public bandwidth is greater than 10 Mbit/s, the valid values of this parameter are 1 to the `InternetMaxBandwidthOut` value and the default value is the `InternetMaxBandwidthOut` value.', example='10'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', description='The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 0 to 100.

Default value: 0.', example='10'),
  ioOptimized?: string(name='IoOptimized', description='Specifies whether the instance is I/O optimized. For instances of [retired instance types](~~55263~~), the default value is none. For instances of other instance types, the default value is optimized. Valid values:

*   none: The instance is not I/O optimized.
*   optimized: The instance is I/O optimized.', example='optimized'),
  ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N to be assigned to the primary ENI. Valid values of N: 1 to 10.

Example: `Ipv6Address.1=2001:db8:1234:1a00::***`.

Take note of the following items:

*   If the `Ipv6Address.N` parameter is specified, you must set the `Amount` parameter to 1 and leave the `Ipv6AddressCount` parameter empty.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot set `Ipv6Addresses.N` or `Ipv6AddressCount` and must set `NetworkInterface.N.Ipv6Addresses.N` or `NetworkInterface.N.Ipv6AddressCount`.', example='Ipv6Address.1=2001:db8:1234:1a00::***'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount', description='The number of IPv6 addresses to randomly generate for the primary ENI. Valid values: 1 to 10.

Take note of the following items:

*   You cannot specify both the `Ipv6Addresses.N` and `Ipv6AddressCount` parameters.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `Ipv6Address.N` or `Ipv6AddressCount` but can specify `NetworkInterface.N.Ipv6Address.N` or `NetworkInterface.N.Ipv6AddressCount`.', example='1'),
  isp?: string(name='Isp', description='> This parameter is in invitational preview and is unavailable.', example='null'),
  keyPairName?: string(name='KeyPairName', description='The name of the key pair.

> For Windows instances, this parameter is ignored. This parameter is empty by default. The `Password` parameter takes effect even if the KeyPairName parameter is specified.', example='KeyPair_Name'),
  launchTemplateId?: string(name='LaunchTemplateId', description='The ID of the launch template. For more information, see [DescribeLaunchTemplates](~~73759~~).

To use a launch template to create an instance, you must use the `LaunchTemplateId` or `LaunchTemplateName` parameter to specify the launch template.', example='lt-bp1apo0bbbkuy0rj****'),
  launchTemplateName?: string(name='LaunchTemplateName', description='The name of the launch template.

To use a launch template to create an instance, you must use the `LaunchTemplateId` or `LaunchTemplateName` parameter to specify the launch template.', example='LaunchTemplate_Name'),
  launchTemplateVersion?: long(name='LaunchTemplateVersion', description='The version of the launch template. If you set the `LaunchTemplateId` or `LaunchTemplateName` parameter but do not set the version number of the launch template, the default template version is used.', example='3'),
  minAmount?: int32(name='MinAmount', description='The minimum number of instances that can be created. Valid values: 1 to 100.

*   If the number of instances that available resources are sufficient to create is smaller than the MinAmount value, instances cannot be created.
*   If the number of ECS instances that available resources are sufficient to create is greater than or equal to the MinAmount value, instances are created based on the number of available resources.', example='2'),
  networkInterface?: [ 
    {
      description?: string(name='Description', description='The description of ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you do not need to set this parameter.', example='Network_Description'),
      instanceType?: string(name='InstanceType', description='The type of ENI N. Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.

Valid values:

*   Primary
*   Secondary

Default value: Secondary.', example='Secondary'),
      ipv6Address?: [ string ](name='Ipv6Address', description='IPv6 address N to assign to the primary ENI. Up to 10 IPv6 addresses can be assigned to the primary ENI. Valid values of the second N: 1 to 10.

Example: `Ipv6Address.1=2001:db8:1234:1a00::***`.

Take note of the following items:

*   This parameter is valid only when `NetworkInterface.N.InstanceType` is set to `Primary`. If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, you cannot set this parameter.
*   If you specify this parameter, you must set `Amount` to 1. You cannot specify `Ipv6AddressCount`, `Ipv6Address.N`, or `NetworkInterface.N.Ipv6AddressCount`.'),
      ipv6AddressCount?: long(name='Ipv6AddressCount', description='The number of IPv6 addresses that the system randomly generates for the primary ENI. Valid values: 1 to 10.

Take note of the following items:

*   This parameter is valid only when `NetworkInterface.N.InstanceType` is set to `Primary`. If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, you cannot set this parameter.
*   If you specify this parameter, you cannot specify `Ipv6AddressCount`, `Ipv6Address.N`, or `NetworkInterface.N.Ipv6Address.N`.', example='1'),
      networkCardIndex?: int32(name='NetworkCardIndex', description='网卡指定的物理网卡索引。

您需要注意：
- 只有特定实例规格支持指定物理网卡索引。
- NetworkInterface.N.InstanceType取值为Primary时，对于支持物理网卡的实例规格，如果设置此参数，只能设置为0。
- NetworkInterface.N.InstanceType取值为Secondary或者空值，对于支持物理网卡的实例规格，此参数可以依据实例规格设置。更多信息，请参见[实例规格族](~~25378~~)。', example='0'),
      networkInterfaceName?: string(name='NetworkInterfaceName', description='The name of ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you do not need to set this parameter.', example='Network_Name'),
      networkInterfaceTrafficMode?: string(name='NetworkInterfaceTrafficMode', description='The communication mode of primary ENI N. Valid values:

*   Standard: uses the TCP communication mode.
*   HighPerformance: enables the Elastic RDMA Interface (ERI) and uses the remote direct memory access (RDMA) communication mode.

Take note of the following items:

*   This parameter is valid only when `NetworkInterface.N.InstanceType` is set to `Primary`. If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, you cannot set this parameter.
*   If you set this parameter to HighPerformance, you can create instances only of the c7re RDMA-enhanced instance family. The maximum number of ENIs in RDMA mode that can be bound to a c7re instance is determined based on the instance type. The c7re instance family is in invitational preview in Beijing Zone K. For more information, see [Instance family](~~25378~~).', example='Standard'),
      primaryIpAddress?: string(name='PrimaryIpAddress', description='The primary IP address to assign to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2.

    *   If the value of N is 1, you can configure a primary or secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, the specified number of instances are created and consecutive primary IP addresses starting from the specified one are assigned to the instances. In this case, you cannot bind secondary ENIs to the instances.
    *   If the value of N is 2, you can configure a primary ENI and a secondary ENI. If this parameter is specified, `Amount` is set to a numeric value greater than 1, and NetworkInterface.N.InstanceType is set to Primary, you cannot specify `NetworkInterface.2.InstanceType` to Secondary to bind a secondary ENI.

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, this parameter is equivalent to `PrivateIpAddress` and you cannot specify both NetworkInterface.N.PrimaryIpAddress and `PrivateIpAddress`.

*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, the specified primary IP address is assigned to the secondary ENI. The default value is an IP address that is randomly selected from within the CIDR block of the vSwitch to which to connect the secondary ENI.

> You can bind only a single secondary ENI when you create an instance. After the instance is created, you can call the [CreateNetworkInterface](~~58504~~) and [AttachNetworkInterface](~~58515~~) operations to bind more secondary ENIs.', example='172.16.**.**'),
      queueNumber?: int32(name='QueueNumber', description='The number of queues supported by ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can set a primary or secondary ENI. If the value of N is 2, you can set a primary ENI and a secondary ENI.
*   The value of this parameter cannot exceed the maximum number of queues per ENI allowed for the specified instance type.
*   The total number of queues for all ENIs on the instance cannot exceed the queue quota for the instance type. To query the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` values.
*   If this parameter is set and `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot set the `NetworkInterfaceQueueNumber` parameter.', example='8'),
      queuePairNumber?: long(name='QueuePairNumber', description='> This parameter is in invitational preview and is unavailable.', example='0'),
      securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign secondary ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `SecurityGroupId` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupIds.N`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp67acfmxazb4p****'),
      securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign ENI N.

*   Valid values of the first N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   The second N indicates that one or more security group IDs can be specified. The valid values of N vary based on the maximum number of security groups to which an instance can belong. For more information, see the "Security group limits" section in [Limits](~~25412#SecurityGroupQuota1~~).

Take note of the following items:

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter or `NetworkInterface.N.SecurityGroupId`. In this case, this parameter is equivalent to `SecurityGroupIds.N` and you cannot specify `SecurityGroupId`, `SecurityGroupIds.N`, or `NetworkInterface.N.SecurityGroupId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the security group to which to assign the ECS instance.', example='sg-bp15ed6xe1yxeycg7****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect to ENI N.

Take note of the following items:

*   Valid values of N: 1 and 2. If the value of N is 1, you can configure a primary or secondary ENI. If the value of N is 2, you must configure a primary ENI and a secondary ENI.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you must set this parameter. In this case, this parameter is equivalent to `VSwitchId` and you cannot specify `VSwitchId`.
*   If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, this parameter is optional. The default value is the ID of the vSwitch to which to connect to the instance.', example='vsw-bp67acfmxazb4p****'),
    }
  ](name='NetworkInterface', description='The information of the ENI.'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber', description='The number of queues supported by the primary ENI. Take note of the following items:

*   The value of this parameter cannot exceed the maximum number of queues per ENI allowed for the instance type.
*   The total number of queues for all ENIs on the instance cannot exceed the queue quota for the instance type. To query the maximum number of queues per ENI and the queue quota for an instance type, you can call the [DescribeInstanceTypes](~~25620~~) operation to query the `MaximumQueueNumberPerEni` and `TotalEniQueueQuantity` values.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `NetworkInterfaceQueueNumber` but can specify `NetworkInterface.N.QueueNumber`.', example='8'),
  networkOptions?: {
    enableJumboFrame?: boolean(name='EnableJumboFrame', description='实例是否开启Jumbo frame特性。参数取值范围：

- false：不开启Jumbo frame, 该实例下的所有网卡（包括主网卡及辅助网卡）MTU取值为1500。

- true：开启Jumbo frame, 该实例下的所有网卡（包括主网卡及辅助网卡）的MTU取值为8500。

默认值：true。

>只有八代以上部分实例规格支持开启Jumbo frame特性，更多信息，请参见[ECS实例MTU](~~200512~~)。', example='false'),
  }(name='NetworkOptions', description='网络相关属性参数。'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  password?: string(name='Password', description='The password of the instance. The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include:

    ()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/

For Windows instances, the password cannot start with a forward slash (/).

> If the `Password` parameter is specified, we recommend that you send requests over HTTPS to prevent password leaks.', example='EcsV587!'),
  passwordInherit?: boolean(name='PasswordInherit', description='Specifies whether to use the password preset in the image. Valid values:

*   true: uses the preset password.
*   false: does not use the preset password.

Default value: false.

> If you set this parameter to true, make sure that you leave the Password parameter empty and the selected image has a preset password.', example='false'),
  period?: int32(name='Period', description='The subscription period of the instance. The unit is specified by the `PeriodUnit` parameter. This parameter is valid and required only when `InstanceChargeType` is set to `PrePaid`. If the `DedicatedHostId` parameter is specified, the value of Period must not exceed the subscription period of the specified dedicated host. Valid values:

*   Valid values when PeriodUnit is set to Week: 1, 2, 3, and 4.
*   Valid values when PeriodUnit is set to Month: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36, 48, and 60.', example='1'),
  periodUnit?: string(name='PeriodUnit', description='The unit of the subscription period. Default value: Month. Valid values:

*   Week
*   Month', example='Month'),
  privateIpAddress?: string(name='PrivateIpAddress', description='The private IP address to assign to the instance. To assign a private IP address to an instance of the VPC type, make sure that the IP address is an idle IP address within the CIDR block of the vSwitch specified by the `VSwitchId` parameter.

Take note of the following items:

*   If the `PrivateIpAddress` parameter is specified, take note of the following items:

    *   If `Amount` is set to 1, a single instance is created and the specified private IP address is assigned to the instance.
    *   If `Amount` is set to a numeric value greater than 1, the specified number of instances are created and consecutive private IP addresses starting from the specified one are assigned to the instances. In this case, you cannot specify parameters that start with `NetworkInterface.N` to bind secondary ENIs to the instances.

*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `PrivateIpAddress` but can specify `NetworkInterface.N.PrimaryIpAddress`.', example='10.1.**.**'),
  ramRoleName?: string(name='RamRoleName', description='The name of the Resource Access Management (RAM) role. You can call the [ListRoles](~~28713~~) operation provided by RAM to query the instance RAM roles that you created.', example='RAM_Name'),
  regionId?: string(name='RegionId', description='The ID of the region in which to create the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which to assign the instance.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy', description='Specifies whether to enable security hardening. Valid values:

*   Active: enables security hardening. This value is applicable only to public images.
*   Deactive: does not enable security hardening. This value is applicable to all images.', example='Active'),
  securityGroupId?: string(name='SecurityGroupId', description='The ID of the security group to which to assign the instance. Instances in the same security group can communicate with each other. The maximum number of instances that a security group can contain depends on the type of the security group. For more information, see the "Security group limits" section in [Limits](~~25412~~).

> The network type of the new instance must be the same as that of the security group specified by the `SecurityGroupId` parameter. For example, if the specified security group is of the VPC type, the new instance is also of the VPC type and you must specify the `VSwitchId` parameter.

If you do not use `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template, you must set the SecurityGroupId parameter. Take note of the following items:

*   You can set `SecurityGroupId` to specify a single security group or set `SecurityGroupIds.N` to specify one or more security groups. However, you cannot specify both `SecurityGroupId` and `SecurityGroupIds.N`.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `SecurityGroupId` or `SecurityGroupIds.N` but can specify only `NetworkInterface.N.SecurityGroupId` or `NetworkInterface.N.SecurityGroupIds.N`.', example='sg-bp15ed6xe1yxeycg7****'),
  securityGroupIds?: [ string ](name='SecurityGroupIds', description='The ID of security group N to which to assign the instance. The valid values of N vary based on the maximum number of security groups to which an instance can belong. For more information, see the "Security group limits" section in [Limits](~~101348~~).

Take note of the following items:

*   You cannot specify both the `SecurityGroupId` and `SecurityGroupIds.N` parameters.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `SecurityGroupId` or `SecurityGroupIds.N` but can specify `NetworkInterface.N.SecurityGroupId` or `NetworkInterface.N.SecurityGroupIds.N`.', example='sg-bp15ed6xe1yxeycg7****'),
  spotDuration?: int32(name='SpotDuration', description='The protection period of the preemptible instance. Unit: hours. Valid values: 0, 1, 2, 3, 4, 5, and 6.

*   Protection periods of 2, 3, 4, 5, and 6 hours are in invitational preview. If you want to set this parameter to one of these values, submit a ticket.
*   If this parameter is set to 0, no protection period is configured for the preemptible instance.

Default value: 1.', example='1'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='The interruption mode of the preemptible instance. Default value: Terminate. Set the value to Terminate, which specifies to release the instance.', example='Terminate'),
  spotPriceLimit?: float(name='SpotPriceLimit', description='The maximum hourly price of the instance. The value is accurate to three decimal places. This parameter is valid only when the `SpotStrategy` parameter is set to `SpotWithPriceLimit`.', example='0.97'),
  spotStrategy?: string(name='SpotStrategy', description='The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:

*   NoSpot: The instance is created as a pay-as-you-go instance.
*   SpotWithPriceLimit: The instance is created as a preemptible instance with a user-defined maximum hourly price.
*   SpotAsPriceGo: The instance is created as a preemptible instance for which the market price at the time of purchase is automatically used as the bid price.

Default value: NoSpot.', example='NoSpot'),
  storageSetId?: string(name='StorageSetId', description='The ID of the storage set.', example='ss-bp67acfmxazb4p****'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber', description='The maximum number of partitions in the storage set. Valid values: greater than or equal to 2.', example='2'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag of the instance, disks, and primary ENI.

The tag key cannot be an empty string. It can be up to 128 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag of the instance, disks, and primary ENI.

The tag value can be an empty string. It can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the instance, disks, and primary ENI. You can specify up to 20 tags.'),
  tenancy?: string(name='Tenancy', description='Specifies whether to create the instance on a dedicated host. Valid values:

*   default: creates the instance on a non-dedicated host.
*   host: creates the instance on a dedicated host. If you do not set the `DedicatedHostId` parameter, Alibaba Cloud selects a dedicated host for the instance.

Default value: default.', example='default'),
  uniqueSuffix?: boolean(name='UniqueSuffix', description='Specifies whether to automatically append incremental suffixes to the hostname specified by the `HostName` parameter and to the instance name specified by the `InstanceName` parameter when you batch create instances. The incremental suffixes can range from 001 to 999. Valid values:

*   true
*   false

Default value: false.

When the `HostName` or `InstanceName` value is set in the `name_prefix[begin_number,bits]` format without `name_suffix`, the `UniqueSuffix` parameter does not take effect. The names are sorted in the specified sequence.

For more information, see [Batch configure sequential names or hostnames for multiple instances](~~196048~~).', example='true'),
  userData?: string(name='UserData', description='The user data of the instance. The user data must be encoded in Base64. The raw data can be up to 16 KB in size.

> If the instance type supports [user data](~~~49121~), you can use the UserData parameter to pass in user data. We recommend that you do not pass in confidential information (such as passwords or private keys) in plaintext as user data. This is because the system does not encrypt UserData values when API requests are transmitted. If you must pass in confidential information, we recommend that you encrypt and encode the information in Base64, and then decode and decrypt the information in the same way within the instance.', example='ZWNobyBoZWxsbyBlY3Mh'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which to connect to the instance. You must set this parameter when you create an instance of the VPC type. The specified vSwitch and security group must belong to the same VPC. You can call the [DescribeVSwitches](~~35748~~) operation to query available vSwitches.

Take note of the following items:

*   If you specify the `VSwitchId` parameter, the zone specified by the `ZoneId` parameter must be the zone where the specified vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch resides.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `VSwitchId` but can specify `NetworkInterface.N.VSwitchId`.', example='vsw-bp1s5fnvk4gn2tws0****'),
  zoneId?: string(name='ZoneId', description='The ID of the zone in which to create the instance. You can call the [DescribeZones](~~25610~~) operation to query the most recent zone list.

> If you specify the `VSwitchId` parameter, the zone specified by the `ZoneId` parameter must be the zone where the vSwitch is located. You can also leave the `ZoneId` parameter empty. Then, the system selects the zone where the specified vSwitch is located.

This parameter is empty by default.', example='cn-hangzhou-g'),
}

model RunInstancesResponseBody = {
  instanceIdSets?: {
    instanceIdSet?: [ string ](name='InstanceIdSet')
  }(name='InstanceIdSets', description='The IDs of the instances (`InstanceIdSet`).'),
  orderId?: string(name='OrderId', description='The ID of the order. This parameter is returned only when `InstanceChargeType` is set to PrePaid.', example='123456****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  tradePrice?: float(name='TradePrice', description='The transaction price.', example='0.165'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RunInstancesResponseBody(name='body'),
}

/**
  * * **Preparations**:
  *     * The real-name verification is complete. For more information, see [Real-name verification](~~48263~~).
  *     * Cost estimation: Learn about the billing methods of ECS resources. For more information, see [Billing overview](~~25398~~).
  *     * Instance type selection: Call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of instance types, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
  *     * Query for available resources: Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.
  *     * Network planning: Make sure that you have security groups available for use. For more information, see [CreateSecurityGroup](~~25553~~). Before you create an instance of the Virtual Private Cloud (VPC) type, create a VPC in the region where you want to create the instance. For more information, see [Create a VPC](~~65430~~).
  * * **Precautions**:
  *     * You can create a maximum of 100 instances at a time.
  *     * You can use the `AutoReleaseTime` parameter to set the time when you want the instances to be automatically released.
  *     * After instances are created, you can call the [DescribeInstances](~~25506~~) operation to check their states.
  *     * By default, instances automatically start after they are created. Instances are ready for use when they are in the Running (`Running`) state.
  *     * As of November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The throttling policy imposes the following constraints: Within a single region, the total maximum bandwidth value of all instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s and that of all instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *     * Different from the [CreateInstance](~~25499~~) operation, the `RunInstances` operation allows the system to assign public IP addresses to the new instances if you set the `InternetMaxBandwidthOut` parameter to a value greater than 0.
  *     * When you call the RunInstances operation to create an instance, you can use one of the following methods to bind a primary elastic network interface (ENI) to the instance. Note that you can use only one of the methods to configure the primary ENI in each call. Otherwise, the call fails and an error message is returned. Specify parameters such as `SecurityGroupId`, `VSwitchId`, `PrivateIpAddress`, `NetworkInterfaceQueueNumber`, and `Ipv6AddressCount` to configure the primary ENI. Specify parameters that start with `NetworkInterface.N.` to configure the primary and secondary ENIs. If `NetworkInterface.N.InstanceType` is set to `Primary`, the primary ENI is bound to the instance. If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, a secondary ENI is bound to the instance.
  *     * After you call this operation, an error is returned if a parameter is invalid or if available resources are insufficient. For more information, see the "Error codes" section of this topic.
  * > If the `QuotaExceed.ElasticQuota` error is returned when you call this operation, you have reached the maximum number of instances of the specified instance type that can be created within the specified region or the maximum number of vCPUs for all instance types in a zone. You can go to the [ECS console](https://ecs.console.aliyun.com/?spm=a2c8b.12215451.favorites.decs.5e3a336aMGTtzy#/privileges/quota) or [Quota Center](https://quotas.console.aliyun.com/products/ecs/quotas) to request a quota increase.
  * * **Best practices**:
  *     * We recommend that you use auto provisioning groups in the following scenarios: Resources are insufficient to create more than 100 instances at a time, you want to quickly create instances regardless of resource configurations such as instance types or zones, or you want to create instances to consume a specific total number of vCPUs regardless of the number of the instances. You can call the [CreateAutoProvisioningGroup](~~122738~~) operation to create an auto provisioning group to deploy an instance cluster across different billing methods, instance families, and zones. For more information, see [Use auto provisioning group-related API operations to create multiple ECS instances at the same time](~~200772~~).
  *     * You can call the `RunInstances` operation to batch create instances. To better manage and search for these instances, we recommend that you specify tags for the instances by using the `Tag.N.Key` and `Tag.N.Value` parameters. You can also append incremental suffixes (`UniqueSuffix`) to the hostname (`HostName`) and to the instance name (`InstanceName`).
  *     * A launch template contains parameters required to create an instance so that you do not have to specify these parameters every time you create instances. You can call the [CreateLaunchTemplate](~~74686~~) operation to create a launch template. Then, in your request to call the `RunInstances` operation, you can specify the `LaunchTemplateId` and `LaunchTemplateVersion` parameters to use the launch template.
  *     * When you create an instance in the [ECS console](https://ecs.console.aliyun.com/), you can view the best practices for calling the `RunInstances` operation. In the Preview step, click View Open API in the Configurations Selected section. In the dialog box that appears, the left-side **API Workflow** section shows the operations and request parameters that are related to the `RunInstances` operation. The right-side section shows SDK examples for the **Java** and **Python** programming languages.
  *
  * @param request RunInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RunInstancesResponse
 */
async function runInstancesWithOptions(request: RunInstancesRequest, runtime: Util.RuntimeOptions): RunInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.affinity)) {
    query['Affinity'] = request.affinity;
  }
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.arn)) {
    query['Arn'] = request.arn;
  }
  if (!Util.isUnset(request.autoPay)) {
    query['AutoPay'] = request.autoPay;
  }
  if (!Util.isUnset(request.autoReleaseTime)) {
    query['AutoReleaseTime'] = request.autoReleaseTime;
  }
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.autoRenewPeriod)) {
    query['AutoRenewPeriod'] = request.autoRenewPeriod;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.creditSpecification)) {
    query['CreditSpecification'] = request.creditSpecification;
  }
  if (!Util.isUnset(request.dataDisk)) {
    query['DataDisk'] = request.dataDisk;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.deletionProtection)) {
    query['DeletionProtection'] = request.deletionProtection;
  }
  if (!Util.isUnset(request.deploymentSetGroupNo)) {
    query['DeploymentSetGroupNo'] = request.deploymentSetGroupNo;
  }
  if (!Util.isUnset(request.deploymentSetId)) {
    query['DeploymentSetId'] = request.deploymentSetId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.hostNames)) {
    query['HostNames'] = request.hostNames;
  }
  if (!Util.isUnset(request.hpcClusterId)) {
    query['HpcClusterId'] = request.hpcClusterId;
  }
  if (!Util.isUnset(request.httpEndpoint)) {
    query['HttpEndpoint'] = request.httpEndpoint;
  }
  if (!Util.isUnset(request.httpPutResponseHopLimit)) {
    query['HttpPutResponseHopLimit'] = request.httpPutResponseHopLimit;
  }
  if (!Util.isUnset(request.httpTokens)) {
    query['HttpTokens'] = request.httpTokens;
  }
  if (!Util.isUnset(request.imageFamily)) {
    query['ImageFamily'] = request.imageFamily;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.imageOptions)) {
    query['ImageOptions'] = request.imageOptions;
  }
  if (!Util.isUnset(request.instanceChargeType)) {
    query['InstanceChargeType'] = request.instanceChargeType;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetChargeType)) {
    query['InternetChargeType'] = request.internetChargeType;
  }
  if (!Util.isUnset(request.internetMaxBandwidthIn)) {
    query['InternetMaxBandwidthIn'] = request.internetMaxBandwidthIn;
  }
  if (!Util.isUnset(request.internetMaxBandwidthOut)) {
    query['InternetMaxBandwidthOut'] = request.internetMaxBandwidthOut;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6AddressCount)) {
    query['Ipv6AddressCount'] = request.ipv6AddressCount;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.launchTemplateId)) {
    query['LaunchTemplateId'] = request.launchTemplateId;
  }
  if (!Util.isUnset(request.launchTemplateName)) {
    query['LaunchTemplateName'] = request.launchTemplateName;
  }
  if (!Util.isUnset(request.launchTemplateVersion)) {
    query['LaunchTemplateVersion'] = request.launchTemplateVersion;
  }
  if (!Util.isUnset(request.minAmount)) {
    query['MinAmount'] = request.minAmount;
  }
  if (!Util.isUnset(request.networkInterface)) {
    query['NetworkInterface'] = request.networkInterface;
  }
  if (!Util.isUnset(request.networkInterfaceQueueNumber)) {
    query['NetworkInterfaceQueueNumber'] = request.networkInterfaceQueueNumber;
  }
  if (!Util.isUnset(request.networkOptions)) {
    query['NetworkOptions'] = request.networkOptions;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodUnit)) {
    query['PeriodUnit'] = request.periodUnit;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.ramRoleName)) {
    query['RamRoleName'] = request.ramRoleName;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityEnhancementStrategy)) {
    query['SecurityEnhancementStrategy'] = request.securityEnhancementStrategy;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.securityGroupIds)) {
    query['SecurityGroupIds'] = request.securityGroupIds;
  }
  if (!Util.isUnset(request.spotDuration)) {
    query['SpotDuration'] = request.spotDuration;
  }
  if (!Util.isUnset(request.spotInterruptionBehavior)) {
    query['SpotInterruptionBehavior'] = request.spotInterruptionBehavior;
  }
  if (!Util.isUnset(request.spotPriceLimit)) {
    query['SpotPriceLimit'] = request.spotPriceLimit;
  }
  if (!Util.isUnset(request.spotStrategy)) {
    query['SpotStrategy'] = request.spotStrategy;
  }
  if (!Util.isUnset(request.storageSetId)) {
    query['StorageSetId'] = request.storageSetId;
  }
  if (!Util.isUnset(request.storageSetPartitionNumber)) {
    query['StorageSetPartitionNumber'] = request.storageSetPartitionNumber;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tenancy)) {
    query['Tenancy'] = request.tenancy;
  }
  if (!Util.isUnset(request.uniqueSuffix)) {
    query['UniqueSuffix'] = request.uniqueSuffix;
  }
  if (!Util.isUnset(request.userData)) {
    query['UserData'] = request.userData;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  if (!Util.isUnset(request.cpuOptions)) {
    query['CpuOptions'] = request.cpuOptions;
  }
  if (!Util.isUnset(request.hibernationOptions)) {
    query['HibernationOptions'] = request.hibernationOptions;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  if (!Util.isUnset(request.schedulerOptions)) {
    query['SchedulerOptions'] = request.schedulerOptions;
  }
  if (!Util.isUnset(request.securityOptions)) {
    query['SecurityOptions'] = request.securityOptions;
  }
  if (!Util.isUnset(request.systemDisk)) {
    query['SystemDisk'] = request.systemDisk;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RunInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * * **Preparations**:
  *     * The real-name verification is complete. For more information, see [Real-name verification](~~48263~~).
  *     * Cost estimation: Learn about the billing methods of ECS resources. For more information, see [Billing overview](~~25398~~).
  *     * Instance type selection: Call the [DescribeInstanceTypes](~~25620~~) operation to query the performance data of instance types, or see [Best practices for instance type selection](~~58291~~) to learn about how to select instance types.
  *     * Query for available resources: Call the [DescribeAvailableResource](~~66186~~) operation to query available resources in a specific region or zone.
  *     * Network planning: Make sure that you have security groups available for use. For more information, see [CreateSecurityGroup](~~25553~~). Before you create an instance of the Virtual Private Cloud (VPC) type, create a VPC in the region where you want to create the instance. For more information, see [Create a VPC](~~65430~~).
  * * **Precautions**:
  *     * You can create a maximum of 100 instances at a time.
  *     * You can use the `AutoReleaseTime` parameter to set the time when you want the instances to be automatically released.
  *     * After instances are created, you can call the [DescribeInstances](~~25506~~) operation to check their states.
  *     * By default, instances automatically start after they are created. Instances are ready for use when they are in the Running (`Running`) state.
  *     * As of November 27, 2020, the maximum bandwidth value available for you to create ECS instances or to change ECS instance configurations is subject to the throttling policy for your account. To increase the maximum bandwidth value, submit a ticket. The throttling policy imposes the following constraints: Within a single region, the total maximum bandwidth value of all instances that use the pay-by-traffic billing method for network usage cannot exceed 5 Gbit/s and that of all instances that use the pay-by-bandwidth billing method for network usage cannot exceed 50 Gbit/s.
  *     * Different from the [CreateInstance](~~25499~~) operation, the `RunInstances` operation allows the system to assign public IP addresses to the new instances if you set the `InternetMaxBandwidthOut` parameter to a value greater than 0.
  *     * When you call the RunInstances operation to create an instance, you can use one of the following methods to bind a primary elastic network interface (ENI) to the instance. Note that you can use only one of the methods to configure the primary ENI in each call. Otherwise, the call fails and an error message is returned. Specify parameters such as `SecurityGroupId`, `VSwitchId`, `PrivateIpAddress`, `NetworkInterfaceQueueNumber`, and `Ipv6AddressCount` to configure the primary ENI. Specify parameters that start with `NetworkInterface.N.` to configure the primary and secondary ENIs. If `NetworkInterface.N.InstanceType` is set to `Primary`, the primary ENI is bound to the instance. If `NetworkInterface.N.InstanceType` is set to `Secondary` or left empty, a secondary ENI is bound to the instance.
  *     * After you call this operation, an error is returned if a parameter is invalid or if available resources are insufficient. For more information, see the "Error codes" section of this topic.
  * > If the `QuotaExceed.ElasticQuota` error is returned when you call this operation, you have reached the maximum number of instances of the specified instance type that can be created within the specified region or the maximum number of vCPUs for all instance types in a zone. You can go to the [ECS console](https://ecs.console.aliyun.com/?spm=a2c8b.12215451.favorites.decs.5e3a336aMGTtzy#/privileges/quota) or [Quota Center](https://quotas.console.aliyun.com/products/ecs/quotas) to request a quota increase.
  * * **Best practices**:
  *     * We recommend that you use auto provisioning groups in the following scenarios: Resources are insufficient to create more than 100 instances at a time, you want to quickly create instances regardless of resource configurations such as instance types or zones, or you want to create instances to consume a specific total number of vCPUs regardless of the number of the instances. You can call the [CreateAutoProvisioningGroup](~~122738~~) operation to create an auto provisioning group to deploy an instance cluster across different billing methods, instance families, and zones. For more information, see [Use auto provisioning group-related API operations to create multiple ECS instances at the same time](~~200772~~).
  *     * You can call the `RunInstances` operation to batch create instances. To better manage and search for these instances, we recommend that you specify tags for the instances by using the `Tag.N.Key` and `Tag.N.Value` parameters. You can also append incremental suffixes (`UniqueSuffix`) to the hostname (`HostName`) and to the instance name (`InstanceName`).
  *     * A launch template contains parameters required to create an instance so that you do not have to specify these parameters every time you create instances. You can call the [CreateLaunchTemplate](~~74686~~) operation to create a launch template. Then, in your request to call the `RunInstances` operation, you can specify the `LaunchTemplateId` and `LaunchTemplateVersion` parameters to use the launch template.
  *     * When you create an instance in the [ECS console](https://ecs.console.aliyun.com/), you can view the best practices for calling the `RunInstances` operation. In the Preview step, click View Open API in the Configurations Selected section. In the dialog box that appears, the left-side **API Workflow** section shows the operations and request parameters that are related to the `RunInstances` operation. The right-side section shows SDK examples for the **Java** and **Python** programming languages.
  *
  * @param request RunInstancesRequest
  * @return RunInstancesResponse
 */
async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInstancesWithOptions(request, runtime);
}

model SendFileRequest {
  content?: string(name='Content', description='The content of the remote file. The content must not exceed 32 KB in size after it is encoded in Base64.

*   If `ContentType` is set to `PlainText`, the Content value is in plaintext.
*   If `ContentType` is set to `Base64`, the Content value is Base64-encoded.', example='#!/bin/bash  echo "Current User is :"  echo $(ps | grep "$$" | awk \\"{print $2}\\")  --------  oss://bucketName/objectName'),
  contentType?: string(name='ContentType', description='The content type of the file. Valid values:

*   PlainText: The file content is not encoded.
*   Base64: The file content is Base64-encoded.

Default value: PlainText.', example='PlainText'),
  description?: string(name='Description', description='The description of the file. The description supports all character sets and can be up to 512 characters in length.', example='This is a test file.'),
  fileGroup?: string(name='FileGroup', description='The user group of the file. This parameter takes effect only for Linux instances. Default value: root. The user group name can be up to 64 characters in length.

>  If you want to use a non-root user group, make sure that the user group exists in the instances.', example='test'),
  fileMode?: string(name='FileMode', description='The permissions on the file. This parameter takes effect only for Linux instances. You can configure this parameter in the same way as you configure the chmod command.

Default value: 0644, which indicates that the owner of the file has the read and write permissions on the file and that the user group of the file and other users have the read-only permissions on the file.', example='0644'),
  fileOwner?: string(name='FileOwner', description='The owner of the file. This parameter takes effect only for Linux instances. Default value: root. The value can be up to 64 characters in length.

>  If you want to use a non-root user, make sure that the user exists in the instances.', example='test'),
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N to which to send the file. Up to 50 instance IDs can be specified in each request. Valid values of N: 1 to 50.', example='i-bp185dy2o3o6n****'),
  name?: string(name='Name', description='The name of the file. The name supports all character sets and can be up to 255 characters in length.', example='file.txt'),
  overwrite?: boolean(name='Overwrite', description='Specifies whether to overwrite a file in the destination directory if the file has the same name as the sent file.

*   true: overwrites the file.
*   false: does not overwrite the file.

Default value: false.', example='true'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the instance to which to send the file. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group. When you specify this parameter, take note of the following items:

*   The ECS instance specified by the InstanceId parameter must belong to this resource group.
*   If you specify this parameter, you can call the [DescribeSendFileResults](~~184117~~) operation to query file sending results in the specified resource group.', example='rg-bp67acfmxazb4p****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the file sending task. Valid values of N: 1 to 20. The tag key cannot be an empty string.

If a single tag is specified to query resources, up to 1,000 resources that have this tag added can be displayed in the response. If multiple tags are specified to query resources, up to 1,000 resources that have all these tags added can be displayed in the response. To query more than 1,000 resources that have specified tags, call the [ListTagResources](~~110425~~) operation.

The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the file sending task. Valid values of N: 1 to 20. The tag value can be an empty string.

The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`.', example='TestValue'),
    }
  ](name='Tag', description='The list of tags.'),
  targetDir?: string(name='TargetDir', description='The destination directory on the instance to which to send the file. If the specified directory does not exist, the system creates the directory on the instance. The value supports all character sets and cannot exceed 255 characters in length.', example='/home'),
  timeout?: long(name='Timeout', description='The timeout period for the file sending task. Unit: seconds.

*   A timeout error occurs when a file cannot be sent because the process slows down or because a specific module or Cloud Assistant Agent does not exist.
*   If the specified timeout period is less than 10 seconds, the system sets the timeout period to 10 seconds to ensure that the file can be sent to the instances.

Default value: 60.', example='60'),
}

model SendFileResponseBody = {
  invokeId?: string(name='InvokeId', description='The file sending task ID.', example='f-7d2a745b412b46****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model SendFileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendFileResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   The instances to which to send a file must be in the Running (`Running`) state.
  * *   [Cloud Assistant Agent must be installed on the instances.](~~64921~~)
  * *   Only Cloud Assistant Agent versions that are later than the following ones support file sending. If the `ClientNeedUpgrade` error code is returned, update Cloud Assistant Agent to the latest version.
  *     *   For Linux instances, the version of Cloud Assistant Agent must be later than 1.0.2.569.
  *     *   For Windows instances, the version of Cloud Assistant Agent must be later than 1.0.0.149.
  * *   The file that you want to send must not exceed 32 KB in size after it is encoded in Base64.
  * *   The file may fail to be sent due to instance exceptions, network exceptions, or exceptions on Cloud Assistant Agent. Call the [DescribeSendFileResults](~~184117~~) operation or see [Check execution results and troubleshoot common issues](~~87029~~) for troubleshooting.
  *
  * @param request SendFileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendFileResponse
 */
async function sendFileWithOptions(request: SendFileRequest, runtime: Util.RuntimeOptions): SendFileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.contentType)) {
    query['ContentType'] = request.contentType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.fileGroup)) {
    query['FileGroup'] = request.fileGroup;
  }
  if (!Util.isUnset(request.fileMode)) {
    query['FileMode'] = request.fileMode;
  }
  if (!Util.isUnset(request.fileOwner)) {
    query['FileOwner'] = request.fileOwner;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.overwrite)) {
    query['Overwrite'] = request.overwrite;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.targetDir)) {
    query['TargetDir'] = request.targetDir;
  }
  if (!Util.isUnset(request.timeout)) {
    query['Timeout'] = request.timeout;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendFile',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * *   The instances to which to send a file must be in the Running (`Running`) state.
  * *   [Cloud Assistant Agent must be installed on the instances.](~~64921~~)
  * *   Only Cloud Assistant Agent versions that are later than the following ones support file sending. If the `ClientNeedUpgrade` error code is returned, update Cloud Assistant Agent to the latest version.
  *     *   For Linux instances, the version of Cloud Assistant Agent must be later than 1.0.2.569.
  *     *   For Windows instances, the version of Cloud Assistant Agent must be later than 1.0.0.149.
  * *   The file that you want to send must not exceed 32 KB in size after it is encoded in Base64.
  * *   The file may fail to be sent due to instance exceptions, network exceptions, or exceptions on Cloud Assistant Agent. Call the [DescribeSendFileResults](~~184117~~) operation or see [Check execution results and troubleshoot common issues](~~87029~~) for troubleshooting.
  *
  * @param request SendFileRequest
  * @return SendFileResponse
 */
async function sendFile(request: SendFileRequest): SendFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendFileWithOptions(request, runtime);
}

model StartElasticityAssuranceRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartElasticityAssuranceResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request StartElasticityAssuranceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartElasticityAssuranceResponse
 */
// Deprecated
async function startElasticityAssuranceWithOptions(request: StartElasticityAssuranceRequest, runtime: Util.RuntimeOptions): StartElasticityAssuranceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.privatePoolOptions)) {
    query['PrivatePoolOptions'] = request.privatePoolOptions;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartElasticityAssurance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request StartElasticityAssuranceRequest
  * @return StartElasticityAssuranceResponse
 */
// Deprecated
async function startElasticityAssurance(request: StartElasticityAssuranceRequest): StartElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startElasticityAssuranceWithOptions(request, runtime);
}

model StartImagePipelineExecutionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.** For more information, see [How to ensure idempotence](~~25693~~).', example='123e4567-e89b-12d3-a456-426655440000'),
  imagePipelineId?: string(name='ImagePipelineId', description='The ID of the image template.', example='ip-2ze5tsl5bp6nf2b3****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateTag?: [ 
    {
      key?: string(name='Key', description='> This parameter is deprecated.', example='null'),
      value?: string(name='Value', description='> This parameter is deprecated.', example='null'),
    }
  ](name='TemplateTag', description='> This parameter is deprecated.'),
}

model StartImagePipelineExecutionResponseBody = {
  executionId?: string(name='ExecutionId', description='The ID of the image creation task.', example='exec-5fb8facb8ed7427c****'),
  requestId?: string(name='RequestId', description='The request ID.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartImagePipelineExecutionResponseBody(name='body'),
}

/**
  * *   After you create an image template, you can call the StartImagePipelineExecution operation to create a pipeline task. The system creates, copies, and shares images based on the parameters configured in the image template.
  * *   You can execute only one pipeline task for each image template.
  *
  * @param request StartImagePipelineExecutionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartImagePipelineExecutionResponse
 */
async function startImagePipelineExecutionWithOptions(request: StartImagePipelineExecutionRequest, runtime: Util.RuntimeOptions): StartImagePipelineExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.imagePipelineId)) {
    query['ImagePipelineId'] = request.imagePipelineId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateTag)) {
    query['TemplateTag'] = request.templateTag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartImagePipelineExecution',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   After you create an image template, you can call the StartImagePipelineExecution operation to create a pipeline task. The system creates, copies, and shares images based on the parameters configured in the image template.
  * *   You can execute only one pipeline task for each image template.
  *
  * @param request StartImagePipelineExecutionRequest
  * @return StartImagePipelineExecutionResponse
 */
async function startImagePipelineExecution(request: StartImagePipelineExecutionRequest): StartImagePipelineExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startImagePipelineExecutionWithOptions(request, runtime);
}

model StartInstanceRequest {
  dryRun?: boolean(name='DryRun', example='true'),
  initLocalDisk?: boolean(name='InitLocalDisk', description='The request ID.', example='true'),
  instanceId?: string(name='InstanceId', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks whether your AccessKey pair is valid, whether RAM users are granted permissions, and whether the required parameters are specified. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   false: performs a dry run and performs the actual request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.

Default value: false.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstanceResponseBody(name='body'),
}

/**
  * $.parameters[2].schema.example
  *
  * @param request StartInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartInstanceResponse
 */
async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.initLocalDisk)) {
    query['InitLocalDisk'] = request.initLocalDisk;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * $.parameters[2].schema.example
  *
  * @param request StartInstanceRequest
  * @return StartInstanceResponse
 */
async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartInstancesRequest {
  batchOptimization?: string(name='BatchOptimization', description='The IDs of the ECS instances. You can specify up to 100 ECS instance IDs.', example='AllTogether'),
  dryRun?: boolean(name='DryRun', description='The region ID of the ECS instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='false'),
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N. Valid values of N: 1 to 100.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The batch operation mode. Valid values:

*   AllTogether: starts all ECS instances at the same time. If all ECS instances are started, a success message is returned. If an ECS instance fails to be started, all the specified instances fail to be started and an error message is returned.
*   SuccessFirst: separately starts each ECS instance. The response contains the operation results of each ECS instance.

Default value: AllTogether.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code', description='The error message that is returned for the operation on the ECS instance. The value success indicates that the operation is successful. For more information, see the "Error codes" section in this topic.', example='200'),
      currentStatus?: string(name='CurrentStatus', description='The status of the ECS instance before the operation is called.', example='Starting'),
      instanceId?: string(name='InstanceId', description='The status of the ECS instance after the operation is called.', example='i-bp67acfmxazb4p****'),
      message?: string(name='Message', description='The ID of the ECS instance.', example='success'),
      previousStatus?: string(name='PreviousStatus', example='Stopped'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses', description='The error code that is returned for the operation on the ECS instance. The value 200 indicates that the operation is successful. For more information, see the "Error codes" section in this topic.'),
  requestId?: string(name='RequestId', description='The information about the ECS instance, such as the status of each instance before and after the operation is called and the operation results.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartInstancesResponseBody(name='body'),
}

/**
  * Specifies whether to perform a dry run. Valid values:
  * *   true: performs only a dry run. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.
  * > If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.
  * *   false: performs a dry run and performs the actual request. If the request passes the dry run, the operation is performed.
  * Default value: false.
  *
  * @param request StartInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartInstancesResponse
 */
async function startInstancesWithOptions(request: StartInstancesRequest, runtime: Util.RuntimeOptions): StartInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOptimization)) {
    query['BatchOptimization'] = request.batchOptimization;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specifies whether to perform a dry run. Valid values:
  * *   true: performs only a dry run. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request fails the dry run, an error message is returned. If the request passes the dry run, `DRYRUN.SUCCESS` is returned.
  * > If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.
  * *   false: performs a dry run and performs the actual request. If the request passes the dry run, the operation is performed.
  * Default value: false.
  *
  * @param request StartInstancesRequest
  * @return StartInstancesResponse
 */
async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstancesWithOptions(request, runtime);
}

model StartTerminalSessionRequest {
  instanceId?: [ string ](name='InstanceId', description='The instance IDs.'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  portNumber?: int32(name='PortNumber', description='The port number of the instance. The port is used to forward data. After this parameter is configured, Cloud Assistant Agent forwards data to the specified port for forwarding. Example: 22.

This parameter is empty by default, which indicates that no port is configured to forward data.', example='22'),
  regionId?: string(name='RegionId', description='The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StartTerminalSessionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='EB5173B0-8E80-564E-AAD1-3135412*****'),
  securityToken?: string(name='SecurityToken', description='The security token included in the WebSocket request header. The system uses this token to authenticate the request.', example='d86c2df2-d19c-4bd8-b817-a19ef123****'),
  sessionId?: string(name='SessionId', description='The session ID.', example='s-hz023od0x9****'),
  webSocketUrl?: string(name='WebSocketUrl', description='The URL of the WebSocket session that is used to connect to the instance. The URL includes the session ID (`SessionId`) and the authentication token (`SecurityToken`).', example='wss://cn-hangzhou.axt.aliyuncs.com/session?sessionId=s-hz023od0x9****&token=d86c2df2-d19c-4bd8-b817-a19ef123****'),
}

model StartTerminalSessionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StartTerminalSessionResponseBody(name='body'),
}

/**
  * The session management feature is in public preview. To use this feature, log on to the ECS console with your Alibaba Cloud account and enable this feature.
  * When you use custom code to connect to an ECS instance that serves as a client, you can call this operation to obtain the WebSocket URL that is used to connect to the instance. Take note of the following items:
  * *   The ECS instance must be in the Running (Running) state.
  * *   Cloud Assistant Agent must be installed on the ECS instance. You can call the [DescribeCloudAssistantStatus](~~87346~~) operation to check whether Cloud Assistant Agent is installed on the ECS instance and query the version number of the installed Cloud Assistant Agent.
  *     *   If Cloud Assistant Agent is not installed on the ECS instance, call the [InstallCloudAssistant](~~85916~~) operation to install Cloud Assistant Agent.
  *     *   Only the Cloud Assistant Agent versions that are later than the following ones support the session management feature. You can upgrade Cloud Assistant Agent. For information about how to upgrade Cloud Assistant Agent, see [Update or disable updates for Cloud Assistant Agent](~~134383~~).
  *         *   For Linux operating systems: 2.2.3.256
  *         *   For Windows operating systems: 2.1.3.256
  * *   Each WebSocket URL returned by the StartTerminalSession operation remains valid for 10 minutes.
  * *   Up to 1,000 sessions can be created and available per region. Each ECS instance can have up to 10 sessions in the connected state.
  *
  * @param request StartTerminalSessionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StartTerminalSessionResponse
 */
async function startTerminalSessionWithOptions(request: StartTerminalSessionRequest, runtime: Util.RuntimeOptions): StartTerminalSessionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.portNumber)) {
    query['PortNumber'] = request.portNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartTerminalSession',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The session management feature is in public preview. To use this feature, log on to the ECS console with your Alibaba Cloud account and enable this feature.
  * When you use custom code to connect to an ECS instance that serves as a client, you can call this operation to obtain the WebSocket URL that is used to connect to the instance. Take note of the following items:
  * *   The ECS instance must be in the Running (Running) state.
  * *   Cloud Assistant Agent must be installed on the ECS instance. You can call the [DescribeCloudAssistantStatus](~~87346~~) operation to check whether Cloud Assistant Agent is installed on the ECS instance and query the version number of the installed Cloud Assistant Agent.
  *     *   If Cloud Assistant Agent is not installed on the ECS instance, call the [InstallCloudAssistant](~~85916~~) operation to install Cloud Assistant Agent.
  *     *   Only the Cloud Assistant Agent versions that are later than the following ones support the session management feature. You can upgrade Cloud Assistant Agent. For information about how to upgrade Cloud Assistant Agent, see [Update or disable updates for Cloud Assistant Agent](~~134383~~).
  *         *   For Linux operating systems: 2.2.3.256
  *         *   For Windows operating systems: 2.1.3.256
  * *   Each WebSocket URL returned by the StartTerminalSession operation remains valid for 10 minutes.
  * *   Up to 1,000 sessions can be created and available per region. Each ECS instance can have up to 10 sessions in the connected state.
  *
  * @param request StartTerminalSessionRequest
  * @return StartTerminalSessionResponse
 */
async function startTerminalSession(request: StartTerminalSessionRequest): StartTerminalSessionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startTerminalSessionWithOptions(request, runtime);
}

model StopInstanceRequest {
  confirmStop?: boolean(name='ConfirmStop', description='This parameter will be removed in the future and is retained only to ensure compatibility. We recommend that you ignore this parameter.', example='true'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform only a dry run, without performing the actual request. Valid values:

*   true: performs only a dry run. The system checks the request for potential issues, including missing parameter values, incorrect request syntax, service limits, and available ECS resources. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   false: performs a dry run and performs the actual request.

Default value: false.', example='true'),
  forceStop?: boolean(name='ForceStop', description='Specifies whether to forcibly stop the instance. Valid values:

*   true
*   false

Default value: false.', example='false'),
  hibernate?: boolean(name='Hibernate', description='> This parameter is in invitational preview and is not publicly available.', example='hide'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp67acfmxazb4ph****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  stoppedMode?: string(name='StoppedMode', description='The stop mode of the pay-as-you-go instance. Valid values:

*   StopCharging: economical mode. For information about how `StopCharging` takes effect, see the "Conditions for enabling economical mode" section in [Economical mode](~~63353~~).
*   KeepCharging: standard mode. You continue to be charged for instances that are stopped in standard mode.

Default value: If the conditions for enabling the economical mode are met and you have enabled this mode in the ECS console, the default value is [StopCharging](~~63353#default~~). For more information, see the "Enable economical mode" section in `Economical mode`. Otherwise, the default value is `KeepCharging`.', example='KeepCharging'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1C488B66-B819-4D14-8711-C4EAAA13AC01'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstanceResponseBody(name='body'),
}

/**
  * *   If you call the DescribeInstances operation to query the details of an instance and `OperationLocks` in the response contains `"LockReason": "security"`, the instance is locked for security reasons and cannot be stopped. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  * *   If the economical mode is enabled, you can set `StoppedMode` to KeepCharging to switch to the standard mode. This allows an instance that is stopped in standard mode to retain its instance type resources and public IP address. However, you continue to be charged for the instance.
  *
  * @param request StopInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInstanceResponse
 */
async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.confirmStop)) {
    query['ConfirmStop'] = request.confirmStop;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.hibernate)) {
    query['Hibernate'] = request.hibernate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.stoppedMode)) {
    query['StoppedMode'] = request.stoppedMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstance',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   If you call the DescribeInstances operation to query the details of an instance and `OperationLocks` in the response contains `"LockReason": "security"`, the instance is locked for security reasons and cannot be stopped. For more information, see [API behavior when an instance is locked for security reasons](~~25695~~).
  * *   If the economical mode is enabled, you can set `StoppedMode` to KeepCharging to switch to the standard mode. This allows an instance that is stopped in standard mode to retain its instance type resources and public IP address. However, you continue to be charged for the instance.
  *
  * @param request StopInstanceRequest
  * @return StopInstanceResponse
 */
async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StopInstancesRequest {
  batchOptimization?: string(name='BatchOptimization', description='The IDs of instances.', example='AllTogether'),
  dryRun?: boolean(name='DryRun', description='The region ID of the instance. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='false'),
  forceStop?: boolean(name='ForceStop', description='The stop mode of the pay-as-you-go instance. Valid values:

*   StopCharging: economical mode. For information about the conditions on which `StopCharging` takes effect, see the "Conditions for enabling economical mode" section in [Economical mode](~~63353~~).
*   KeepCharging: standard mode. You continue to be charged for instances that are stopped in standard mode.

Default value: If the conditions for enabling the economical mode are met and you have enabled this mode in the ECS console, the default value is [StopCharging](~~63353#default~~). For more information, see the "Enable economical mode" section in `Economical mode`. Otherwise, the default value is `KeepCharging`.', example='false'),
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N. Valid values of N: 1 to 100.', example='i-bp67acfmxazb4p****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='Specifies whether to forcibly stop the instance. Valid values:

*   true: forcibly stops the instance. This operation is equivalent to the power-off operation in common scenarios. Cache data that is not written to storage devices on the instance is lost.
*   false: normally stops the instance.

Default value: false.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  stoppedMode?: string(name='StoppedMode', description='Specifies the batch operation mode. Valid values:

*   AllTogether: In this mode, a success message is returned if all specified instances are stopped. If one or more of the specified instances fail the check when you set the DryRun parameter to false, none of the specified instances can be stopped and an error message is returned.
*   SuccessFirst: In this mode, each instance is separately stopped. The response contains the operation results for each instance.

Default value: AllTogether.', example='KeepCharging'),
}

model StopInstancesResponseBody = {
  instanceResponses?: {
    instanceResponse?: [ 
    {
      code?: string(name='Code', description='The error message that is returned for the operation on the ECS instance. When Success is returned, the operation is successful. For more information, see the "Error codes" section in this topic.', example='200'),
      currentStatus?: string(name='CurrentStatus', description='The state of the instance before the operation is called.', example='Stopping'),
      instanceId?: string(name='InstanceId', description='The current state of the instance.', example='i-bp67acfmxazb4p****'),
      message?: string(name='Message', description='The ECS instance ID.', example='success'),
      previousStatus?: string(name='PreviousStatus', example='Running'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses', description='The error code that is returned for the operation on the ECS instance. When a value of 200 is returned, the operation is successful. For more information, see the "Error codes" section in this topic.'),
  requestId?: string(name='RequestId', description='Details about the responses returned for the instances, which contain the state of each instance before and after the operation is called, and the results of the operation.', example='1C488B66-B819-4D14-8711-C4EAAA13AC01'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInstancesResponseBody(name='body'),
}

/**
  * Specifies whether to perform only a dry run, without performing the actual request. Valid Values:
  * *   true: performs a dry run, but the request is not made. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request passes the dry run, `DRYRUN.SUCCESS` is returned. Otherwise, an error message is returned.
  * > If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.
  * *   false: performs a dry run and sends the request. If the request passes the dry run, the operation is performed.
  * Default value: false.
  *
  * @param request StopInstancesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInstancesResponse
 */
async function stopInstancesWithOptions(request: StopInstancesRequest, runtime: Util.RuntimeOptions): StopInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.batchOptimization)) {
    query['BatchOptimization'] = request.batchOptimization;
  }
  if (!Util.isUnset(request.dryRun)) {
    query['DryRun'] = request.dryRun;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.stoppedMode)) {
    query['StoppedMode'] = request.stoppedMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInstances',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Specifies whether to perform only a dry run, without performing the actual request. Valid Values:
  * *   true: performs a dry run, but the request is not made. The system checks the request for potential issues, including required parameters, request syntax, and instance status. If the request passes the dry run, `DRYRUN.SUCCESS` is returned. Otherwise, an error message is returned.
  * > If you set `BatchOptimization` to `SuccessFirst` and `DryRun` to true, only `DRYRUN.SUCCESS` is returned regardless of whether the request passes the dry run.
  * *   false: performs a dry run and sends the request. If the request passes the dry run, the operation is performed.
  * Default value: false.
  *
  * @param request StopInstancesRequest
  * @return StopInstancesResponse
 */
async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstancesWithOptions(request, runtime);
}

model StopInvocationRequest {
  instanceId?: [ string ](name='InstanceId', description='The ID of instance N on which you want to stop the process of the Cloud Assistant command. You can specify up to 50 instance IDs in each request. Valid values of N: 1 to 50.', example='i-bp67acfmxazb4p****'),
  invokeId?: string(name='InvokeId', description='The ID of instance N on which you want to stop the process of the Cloud Assistant command. You can specify up to 50 instance IDs in each request. Valid values of N: 1 to 50.', example='t-7d2a745b412b4601b2d47f6a768d****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The ID of the command task. You can call the [DescribeInvocations](~~64840~~) operation to query the IDs of all command tasks.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: StopInvocationResponseBody(name='body'),
}

/**
  * The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request StopInvocationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return StopInvocationResponse
 */
async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.invokeId)) {
    query['InvokeId'] = request.invokeId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopInvocation',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request StopInvocationRequest
  * @return StopInvocationResponse
 */
async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent list of regions.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The ID of resource N. Valid values of N: 1 to 50.', example='i-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy
*   elasticityassurance: elasticity assurance
*   capacityreservation: capacity reservation
*   command: Cloud Assistant command
*   invocation: Cloud Assistant command execution result', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of tag N to add to the resource. Valid values of N: 1 to 20. The tag key cannot be an empty string. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun`.', example='TestKey'),
      value?: string(name='Value', description='The value of tag N to add to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:`.', example='TestValue'),
    }
  ](name='Tag', description='The tags to add to the resource.'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * Before you add tags to a resource, Alibaba Cloud checks the number of existing tags of the resource. If the maximum number of tags is reached, an error message is returned. For more information, see the "Tag limits" section in [Limits](~~25412~~).
  *
  * @param request TagResourcesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TagResourcesResponse
 */
async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you add tags to a resource, Alibaba Cloud checks the number of existing tags of the resource. If the maximum number of tags is reached, an error message is returned. For more information, see the "Tag limits" section in [Limits](~~25412~~).
  *
  * @param request TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TerminatePhysicalConnectionRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminatePhysicalConnectionResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request TerminatePhysicalConnectionRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TerminatePhysicalConnectionResponse
 */
// Deprecated
async function terminatePhysicalConnectionWithOptions(request: TerminatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): TerminatePhysicalConnectionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.physicalConnectionId)) {
    query['PhysicalConnectionId'] = request.physicalConnectionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminatePhysicalConnection',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request TerminatePhysicalConnectionRequest
  * @return TerminatePhysicalConnectionResponse
 */
// Deprecated
async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminatePhysicalConnectionWithOptions(request, runtime);
}

model TerminateVirtualBorderRouterRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  userCidr?: string(name='UserCidr'),
  vbrId?: string(name='VbrId'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TerminateVirtualBorderRouterResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request TerminateVirtualBorderRouterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return TerminateVirtualBorderRouterResponse
 */
// Deprecated
async function terminateVirtualBorderRouterWithOptions(request: TerminateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): TerminateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.userCidr)) {
    query['UserCidr'] = request.userCidr;
  }
  if (!Util.isUnset(request.vbrId)) {
    query['VbrId'] = request.vbrId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TerminateVirtualBorderRouter',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request TerminateVirtualBorderRouterRequest
  * @return TerminateVirtualBorderRouterResponse
 */
// Deprecated
async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateVirtualBorderRouterWithOptions(request, runtime);
}

model UnassignIpv6AddressesRequest {
  ipv6Address?: [ string ](name='Ipv6Address', description='The IPv6 addresses to unassign. You can specify up to 10 IPv6 addresses in a single request.', example='2001:db8:1234:1a00::***'),
  ipv6Prefix?: [ string ](name='Ipv6Prefix', description='> This parameter is in invitational preview and is unavailable for general users.'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-bp14v2sdd3v8ht****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassignIpv6AddressesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UnassignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassignIpv6AddressesResponseBody(name='body'),
}

/**
  * When you call this operation, take note of the following items:
  * *   The ENI must be in the **Available** (Available) or **InUse** (InUse) state.
  * *   If the ENI is a primary ENI, the Elastic Compute Service (ECS) instance to which the ENI is attached must be in the **Running** (Running) or **Stopped** (Stopped) state.
  *
  * @param request UnassignIpv6AddressesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnassignIpv6AddressesResponse
 */
async function unassignIpv6AddressesWithOptions(request: UnassignIpv6AddressesRequest, runtime: Util.RuntimeOptions): UnassignIpv6AddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv6Address)) {
    query['Ipv6Address'] = request.ipv6Address;
  }
  if (!Util.isUnset(request.ipv6Prefix)) {
    query['Ipv6Prefix'] = request.ipv6Prefix;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassignIpv6Addresses',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * When you call this operation, take note of the following items:
  * *   The ENI must be in the **Available** (Available) or **InUse** (InUse) state.
  * *   If the ENI is a primary ENI, the Elastic Compute Service (ECS) instance to which the ENI is attached must be in the **Running** (Running) or **Stopped** (Stopped) state.
  *
  * @param request UnassignIpv6AddressesRequest
  * @return UnassignIpv6AddressesResponse
 */
async function unassignIpv6Addresses(request: UnassignIpv6AddressesRequest): UnassignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignIpv6AddressesWithOptions(request, runtime);
}

model UnassignPrivateIpAddressesRequest {
  ipv4Prefix?: [ string ](name='Ipv4Prefix', description='> This parameter is in invitational preview and is unavailable for general users.'),
  networkInterfaceId?: string(name='NetworkInterfaceId', description='The secondary private IP addresses to unassign.', example='eni-bp67acfmxazb4ph****'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  privateIpAddress?: [ string ](name='PrivateIpAddress', description='Secondary private IP address N to unassign Valid values of N: 1 to 10.', example='192.168.**.**'),
  regionId?: string(name='RegionId', description='The ID of the ENI.', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E'),
}

model UnassignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassignPrivateIpAddressesResponseBody(name='body'),
}

/**
  * The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request UnassignPrivateIpAddressesRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnassignPrivateIpAddressesResponse
 */
async function unassignPrivateIpAddressesWithOptions(request: UnassignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): UnassignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipv4Prefix)) {
    query['Ipv4Prefix'] = request.ipv4Prefix;
  }
  if (!Util.isUnset(request.networkInterfaceId)) {
    query['NetworkInterfaceId'] = request.networkInterfaceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.privateIpAddress)) {
    query['PrivateIpAddress'] = request.privateIpAddress;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassignPrivateIpAddresses',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The region ID of the ENI. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.
  *
  * @param request UnassignPrivateIpAddressesRequest
  * @return UnassignPrivateIpAddressesResponse
 */
async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignPrivateIpAddressesWithOptions(request, runtime);
}

model UnassociateEipAddressRequest {
  allocationId?: string(name='AllocationId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request UnassociateEipAddressRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnassociateEipAddressResponse
 */
// Deprecated
async function unassociateEipAddressWithOptions(request: UnassociateEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateEipAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationId)) {
    query['AllocationId'] = request.allocationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateEipAddress',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request UnassociateEipAddressRequest
  * @return UnassociateEipAddressResponse
 */
// Deprecated
async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateEipAddressWithOptions(request, runtime);
}

model UnassociateHaVipRequest {
  clientToken?: string(name='ClientToken'),
  force?: string(name='Force'),
  haVipId?: string(name='HaVipId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnassociateHaVipResponseBody(name='body'),
}

/**
  * @deprecated
  *
  * @param request UnassociateHaVipRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnassociateHaVipResponse
 */
// Deprecated
async function unassociateHaVipWithOptions(request: UnassociateHaVipRequest, runtime: Util.RuntimeOptions): UnassociateHaVipResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.haVipId)) {
    query['HaVipId'] = request.haVipId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateHaVip',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * @deprecated
  *
  * @param request UnassociateHaVipRequest
  * @return UnassociateHaVipResponse
 */
// Deprecated
async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateHaVipWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags from the resource. This parameter is valid only when the TagKey.N parameter is not specified. Valid values:

*   true
*   false

Default value: false.', example='false'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', description='The region ID of the resource. You can call the [DescribeRegions](~~25609~~) operation to query the most recent region list.', example='cn-hangzhou'),
  resourceId?: [ string ](name='ResourceId', description='The resource IDs.', example='i-bp67acfmxazb4ph****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

*   instance: ECS instance
*   disk: disk
*   snapshot: snapshot
*   image: image
*   securitygroup: security group
*   volume: storage volume
*   eni: elastic network interface (ENI)
*   ddh: dedicated host
*   ddhcluster: dedicated host cluster
*   keypair: SSH key pair
*   launchtemplate: launch template
*   reservedinstance: reserved instance
*   snapshotpolicy: automatic snapshot policy
*   elasticityassurance: elasticity assurance
*   capacityreservation: capacity reservation', example='instance'),
  tagKey?: [ string ](name='TagKey', description='The tag keys of the resource.', example='TestKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerAccount)) {
    query['OwnerAccount'] = request.ownerAccount;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2014-05-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

