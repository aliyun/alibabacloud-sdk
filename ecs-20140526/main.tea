/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-qingdao = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-beijing = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'ecs-cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-west-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    us-east-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'ecs.aliyuncs.com',
    ap-northeast-2-pop = 'ecs.ap-northeast-1.aliyuncs.com',
    cn-beijing-finance-1 = 'ecs.aliyuncs.com',
    cn-beijing-finance-pop = 'ecs.aliyuncs.com',
    cn-beijing-gov-1 = 'ecs.aliyuncs.com',
    cn-beijing-nu16-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-edge-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    cn-fujian = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-haidian-cm12-c01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-finance = 'ecs.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hangzhou-test-306 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-hongkong-finance-pop = 'ecs.aliyuncs.com',
    cn-shanghai-et15-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-et2-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shanghai-inner = 'ecs.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-inner = 'ecs.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-wuhan = 'ecs.aliyuncs.com',
    cn-yushanfang = 'ecs.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'ecs-cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'ecs.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'ecs.cn-qingdao-nebula.aliyuncs.com',
    eu-west-1-oxs = 'ecs.cn-shenzhen-cloudstone.aliyuncs.com',
    rus-west-1-pop = 'ecs.ap-northeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('ecs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AcceptInquiredSystemEventRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  eventId?: string(name='EventId'),
}

model AcceptInquiredSystemEventResponseBody = {
  requestId?: string(name='RequestId'),
}

model AcceptInquiredSystemEventResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptInquiredSystemEventResponseBody(name='body'),
}

async function acceptInquiredSystemEventWithOptions(request: AcceptInquiredSystemEventRequest, runtime: Util.RuntimeOptions): AcceptInquiredSystemEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AcceptInquiredSystemEvent', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function acceptInquiredSystemEvent(request: AcceptInquiredSystemEventRequest): AcceptInquiredSystemEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptInquiredSystemEventWithOptions(request, runtime);
}

model ActivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model ActivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateRouterInterfaceResponseBody(name='body'),
}

async function activateRouterInterfaceWithOptions(request: ActivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): ActivateRouterInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActivateRouterInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function activateRouterInterface(request: ActivateRouterInterfaceRequest): ActivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateRouterInterfaceWithOptions(request, runtime);
}

model AddBandwidthPackageIpsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  ipCount?: string(name='IpCount'),
  clientToken?: string(name='ClientToken'),
}

model AddBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  body: AddBandwidthPackageIpsResponseBody(name='body'),
}

async function addBandwidthPackageIpsWithOptions(request: AddBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): AddBandwidthPackageIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddBandwidthPackageIps', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addBandwidthPackageIps(request: AddBandwidthPackageIpsRequest): AddBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBandwidthPackageIpsWithOptions(request, runtime);
}

model AddTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model AddTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsResponseBody(name='body'),
}

async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTags', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model AllocateDedicatedHostsRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout'),
    udpTimeout?: int32(name='UdpTimeout'),
  }(name='NetworkAttributes'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  description?: string(name='Description'),
  autoPlacement?: string(name='AutoPlacement'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
  minQuantity?: int32(name='MinQuantity'),
  chargeType?: string(name='ChargeType'),
  quantity?: int32(name='Quantity'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  clientToken?: string(name='ClientToken'),
}

model AllocateDedicatedHostsResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostIdSets?: {
    dedicatedHostId?: [ string ](name='DedicatedHostId')
  }(name='DedicatedHostIdSets'),
}

model AllocateDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateDedicatedHostsResponseBody(name='body'),
}

async function allocateDedicatedHostsWithOptions(request: AllocateDedicatedHostsRequest, runtime: Util.RuntimeOptions): AllocateDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateDedicatedHosts', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateDedicatedHosts(request: AllocateDedicatedHostsRequest): AllocateDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateDedicatedHostsWithOptions(request, runtime);
}

model AllocateEipAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  bandwidth?: string(name='Bandwidth'),
  ISP?: string(name='ISP'),
  internetChargeType?: string(name='InternetChargeType'),
  activityId?: long(name='ActivityId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
}

model AllocateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
  allocationId?: string(name='AllocationId'),
  eipAddress?: string(name='EipAddress'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipAddressResponseBody(name='body'),
}

async function allocateEipAddressWithOptions(request: AllocateEipAddressRequest, runtime: Util.RuntimeOptions): AllocateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateEipAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressWithOptions(request, runtime);
}

model AllocatePublicIpAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  ipAddress?: string(name='IpAddress'),
  vlanId?: string(name='VlanId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model AllocatePublicIpAddressResponseBody = {
  requestId?: string(name='RequestId'),
  ipAddress?: string(name='IpAddress'),
}

model AllocatePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicIpAddressResponseBody(name='body'),
}

async function allocatePublicIpAddressWithOptions(request: AllocatePublicIpAddressRequest, runtime: Util.RuntimeOptions): AllocatePublicIpAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocatePublicIpAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocatePublicIpAddress(request: AllocatePublicIpAddressRequest): AllocatePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicIpAddressWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='regionId'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId'),
  diskIds?: string(name='diskIds'),
}

model ApplyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ApplyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAutoSnapshotPolicyResponseBody(name='body'),
}

async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyAutoSnapshotPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model AssignIpv6AddressesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  ipv6Address?: [ string ](name='Ipv6Address'),
}

model AssignIpv6AddressesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  body: AssignIpv6AddressesResponseBody(name='body'),
}

async function assignIpv6AddressesWithOptions(request: AssignIpv6AddressesRequest, runtime: Util.RuntimeOptions): AssignIpv6AddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignIpv6Addresses', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignIpv6Addresses(request: AssignIpv6AddressesRequest): AssignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignIpv6AddressesWithOptions(request, runtime);
}

model AssignPrivateIpAddressesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount'),
  clientToken?: string(name='ClientToken'),
  privateIpAddress?: [ string ](name='PrivateIpAddress'),
}

model AssignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId'),
  assignedPrivateIpAddressesSet?: {
    networkInterfaceId?: string(name='NetworkInterfaceId'),
    privateIpSet?: {
      privateIpAddress?: [ string ](name='PrivateIpAddress')
    }(name='PrivateIpSet'),
  }(name='AssignedPrivateIpAddressesSet'),
}

model AssignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: AssignPrivateIpAddressesResponseBody(name='body'),
}

async function assignPrivateIpAddressesWithOptions(request: AssignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): AssignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssignPrivateIpAddresses', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assignPrivateIpAddresses(request: AssignPrivateIpAddressesRequest): AssignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return assignPrivateIpAddressesWithOptions(request, runtime);
}

model AssociateEipAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceType?: string(name='InstanceType'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEipAddressResponseBody(name='body'),
}

async function associateEipAddressWithOptions(request: AssociateEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateEipAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressWithOptions(request, runtime);
}

model AssociateHaVipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  haVipId?: string(name='HaVipId'),
  instanceId?: string(name='InstanceId'),
}

model AssociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateHaVipResponseBody(name='body'),
}

async function associateHaVipWithOptions(request: AssociateHaVipRequest, runtime: Util.RuntimeOptions): AssociateHaVipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateHaVip', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateHaVip(request: AssociateHaVipRequest): AssociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateHaVipWithOptions(request, runtime);
}

model AttachClassicLinkVpcRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  vpcId?: string(name='VpcId'),
}

model AttachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  body: AttachClassicLinkVpcResponseBody(name='body'),
}

async function attachClassicLinkVpcWithOptions(request: AttachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): AttachClassicLinkVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachClassicLinkVpc', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachClassicLinkVpc(request: AttachClassicLinkVpcRequest): AttachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachClassicLinkVpcWithOptions(request, runtime);
}

model AttachDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  diskId?: string(name='DiskId'),
  device?: string(name='Device'),
  deleteWithInstance?: boolean(name='DeleteWithInstance'),
  bootable?: boolean(name='Bootable'),
  password?: string(name='Password'),
  keyPairName?: string(name='KeyPairName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model AttachDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDiskResponseBody(name='body'),
}

async function attachDiskWithOptions(request: AttachDiskRequest, runtime: Util.RuntimeOptions): AttachDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachDisk(request: AttachDiskRequest): AttachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachDiskWithOptions(request, runtime);
}

model AttachInstanceRamRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  ramRoleName?: string(name='RamRoleName'),
  instanceIds?: string(name='InstanceIds'),
  policy?: string(name='Policy'),
}

model AttachInstanceRamRoleResponseBody = {
  attachInstanceRamRoleResults?: {
    attachInstanceRamRoleResult?: [ 
    {
      success?: boolean(name='Success'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='AttachInstanceRamRoleResult')
  }(name='AttachInstanceRamRoleResults'),
  totalCount?: int32(name='TotalCount'),
  ramRoleName?: string(name='RamRoleName'),
  requestId?: string(name='RequestId'),
  failCount?: int32(name='FailCount'),
}

model AttachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AttachInstanceRamRoleResponseBody(name='body'),
}

async function attachInstanceRamRoleWithOptions(request: AttachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): AttachInstanceRamRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachInstanceRamRole', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachInstanceRamRole(request: AttachInstanceRamRoleRequest): AttachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachInstanceRamRoleWithOptions(request, runtime);
}

model AttachKeyPairRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairName?: string(name='KeyPairName'),
  instanceIds?: string(name='InstanceIds'),
}

model AttachKeyPairResponseBody = {
  keyPairName?: string(name='KeyPairName'),
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  results?: {
    result?: [ 
    {
      success?: string(name='Success'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Result')
  }(name='Results'),
  failCount?: string(name='FailCount'),
}

model AttachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: AttachKeyPairResponseBody(name='body'),
}

async function attachKeyPairWithOptions(request: AttachKeyPairRequest, runtime: Util.RuntimeOptions): AttachKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachKeyPair', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachKeyPair(request: AttachKeyPairRequest): AttachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachKeyPairWithOptions(request, runtime);
}

model AttachNetworkInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  instanceId?: string(name='InstanceId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId'),
  waitForNetworkConfigurationReady?: boolean(name='WaitForNetworkConfigurationReady'),
}

model AttachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachNetworkInterfaceResponseBody(name='body'),
}

async function attachNetworkInterfaceWithOptions(request: AttachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): AttachNetworkInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachNetworkInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachNetworkInterface(request: AttachNetworkInterfaceRequest): AttachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachNetworkInterfaceWithOptions(request, runtime);
}

model AuthorizeSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  sourceGroupId?: string(name='SourceGroupId'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupResponseBody(name='body'),
}

async function authorizeSecurityGroupWithOptions(request: AuthorizeSecurityGroupRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AuthorizeSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupWithOptions(request, runtime);
}

model AuthorizeSecurityGroupEgressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  destGroupId?: string(name='DestGroupId'),
  destGroupOwnerId?: long(name='DestGroupOwnerId'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

async function authorizeSecurityGroupEgressWithOptions(request: AuthorizeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AuthorizeSecurityGroupEgress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupEgressWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='regionId'),
  diskIds?: string(name='diskIds'),
}

model CancelAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CancelAutoSnapshotPolicyResponseBody(name='body'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelAutoSnapshotPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model CancelCopyImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CancelCopyImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelCopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CancelCopyImageResponseBody(name='body'),
}

async function cancelCopyImageWithOptions(request: CancelCopyImageRequest, runtime: Util.RuntimeOptions): CancelCopyImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelCopyImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelCopyImage(request: CancelCopyImageRequest): CancelCopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelCopyImageWithOptions(request, runtime);
}

model CancelImagePipelineExecutionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  executionId?: string(name='ExecutionId'),
}

model CancelImagePipelineExecutionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: CancelImagePipelineExecutionResponseBody(name='body'),
}

async function cancelImagePipelineExecutionWithOptions(request: CancelImagePipelineExecutionRequest, runtime: Util.RuntimeOptions): CancelImagePipelineExecutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelImagePipelineExecution', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelImagePipelineExecution(request: CancelImagePipelineExecutionRequest): CancelImagePipelineExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelImagePipelineExecutionWithOptions(request, runtime);
}

model CancelPhysicalConnectionRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model CancelPhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CancelPhysicalConnectionResponseBody(name='body'),
}

async function cancelPhysicalConnectionWithOptions(request: CancelPhysicalConnectionRequest, runtime: Util.RuntimeOptions): CancelPhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelPhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelPhysicalConnection(request: CancelPhysicalConnectionRequest): CancelPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelPhysicalConnectionWithOptions(request, runtime);
}

model CancelSimulatedSystemEventsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  eventId?: [ string ](name='EventId'),
}

model CancelSimulatedSystemEventsResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  body: CancelSimulatedSystemEventsResponseBody(name='body'),
}

async function cancelSimulatedSystemEventsWithOptions(request: CancelSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CancelSimulatedSystemEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelSimulatedSystemEvents', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelSimulatedSystemEvents(request: CancelSimulatedSystemEventsRequest): CancelSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelSimulatedSystemEventsWithOptions(request, runtime);
}

model CancelTaskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model CancelTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CancelTaskResponseBody(name='body'),
}

async function cancelTaskWithOptions(request: CancelTaskRequest, runtime: Util.RuntimeOptions): CancelTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelTask', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelTaskWithOptions(request, runtime);
}

model ConnectRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model ConnectRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConnectRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: ConnectRouterInterfaceResponseBody(name='body'),
}

async function connectRouterInterfaceWithOptions(request: ConnectRouterInterfaceRequest, runtime: Util.RuntimeOptions): ConnectRouterInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConnectRouterInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function connectRouterInterface(request: ConnectRouterInterfaceRequest): ConnectRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return connectRouterInterfaceWithOptions(request, runtime);
}

model ConvertNatPublicIpToEipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model ConvertNatPublicIpToEipResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConvertNatPublicIpToEipResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertNatPublicIpToEipResponseBody(name='body'),
}

async function convertNatPublicIpToEipWithOptions(request: ConvertNatPublicIpToEipRequest, runtime: Util.RuntimeOptions): ConvertNatPublicIpToEipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConvertNatPublicIpToEip', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function convertNatPublicIpToEip(request: ConvertNatPublicIpToEipRequest): ConvertNatPublicIpToEipResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertNatPublicIpToEipWithOptions(request, runtime);
}

model CopyImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  destinationImageName?: string(name='DestinationImageName'),
  destinationDescription?: string(name='DestinationDescription'),
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
  destinationRegionId?: string(name='DestinationRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  encrypted?: boolean(name='Encrypted'),
  KMSKeyId?: string(name='KMSKeyId'),
  encryptAlgorithm?: string(name='EncryptAlgorithm'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CopyImageResponseBody = {
  requestId?: string(name='RequestId'),
  imageId?: string(name='ImageId'),
}

model CopyImageResponse = {
  headers: map[string]string(name='headers'),
  body: CopyImageResponseBody(name='body'),
}

async function copyImageWithOptions(request: CopyImageRequest, runtime: Util.RuntimeOptions): CopyImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopyImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copyImage(request: CopyImageRequest): CopyImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyImageWithOptions(request, runtime);
}

model CopySnapshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  regionId?: string(name='RegionId'),
  destinationRegionId?: string(name='DestinationRegionId'),
  snapshotId?: string(name='SnapshotId'),
  destinationSnapshotName?: string(name='DestinationSnapshotName'),
  destinationSnapshotDescription?: string(name='DestinationSnapshotDescription'),
  retentionDays?: int32(name='RetentionDays'),
}

model CopySnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  requestId?: string(name='RequestId'),
}

model CopySnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CopySnapshotResponseBody(name='body'),
}

async function copySnapshotWithOptions(request: CopySnapshotRequest, runtime: Util.RuntimeOptions): CopySnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CopySnapshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function copySnapshot(request: CopySnapshotRequest): CopySnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return copySnapshotWithOptions(request, runtime);
}

model CreateActivationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceName?: string(name='InstanceName'),
  description?: string(name='Description'),
  instanceCount?: int32(name='InstanceCount'),
  timeToLiveInHours?: long(name='TimeToLiveInHours'),
  ipAddressRange?: string(name='IpAddressRange'),
}

model CreateActivationResponseBody = {
  requestId?: string(name='RequestId'),
  activationId?: string(name='ActivationId'),
  activationCode?: string(name='ActivationCode'),
}

model CreateActivationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateActivationResponseBody(name='body'),
}

async function createActivationWithOptions(request: CreateActivationRequest, runtime: Util.RuntimeOptions): CreateActivationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateActivation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createActivation(request: CreateActivationRequest): CreateActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createActivationWithOptions(request, runtime);
}

model CreateAutoProvisioningGroupRequest {
  launchConfiguration?: {
    imageId?: string(name='ImageId'),
    securityGroupId?: string(name='SecurityGroupId'),
    ioOptimized?: string(name='IoOptimized'),
    internetChargeType?: string(name='InternetChargeType'),
    internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
    instanceName?: string(name='InstanceName'),
    hostName?: string(name='HostName'),
    instanceDescription?: string(name='InstanceDescription'),
    keyPairName?: string(name='KeyPairName'),
    ramRoleName?: string(name='RamRoleName'),
    securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
    userData?: string(name='UserData'),
    systemDiskCategory?: string(name='SystemDiskCategory'),
    systemDiskSize?: int32(name='SystemDiskSize'),
    systemDiskName?: string(name='SystemDiskName'),
    systemDiskDescription?: string(name='SystemDiskDescription'),
    systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel'),
    passwordInherit?: boolean(name='PasswordInherit'),
    resourceGroupId?: string(name='ResourceGroupId'),
    creditSpecification?: string(name='CreditSpecification'),
    deploymentSetId?: string(name='DeploymentSetId'),
    dataDisk?: [ 
      {
        performanceLevel?: string(name='PerformanceLevel'),
        description?: string(name='Description'),
        kmsKeyId?: string(name='KmsKeyId'),
        snapshotId?: string(name='SnapshotId'),
        size?: int32(name='Size'),
        device?: string(name='Device'),
        diskName?: string(name='DiskName'),
        category?: string(name='Category'),
        deleteWithInstance?: boolean(name='DeleteWithInstance'),
        encrypted?: boolean(name='Encrypted'),
      }
    ](name='DataDisk'),
    tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag'),
  }(name='LaunchConfiguration'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName'),
  autoProvisioningGroupType?: string(name='AutoProvisioningGroupType'),
  spotAllocationStrategy?: string(name='SpotAllocationStrategy'),
  spotInstanceInterruptionBehavior?: string(name='SpotInstanceInterruptionBehavior'),
  spotInstancePoolsToUseCount?: int32(name='SpotInstancePoolsToUseCount'),
  payAsYouGoAllocationStrategy?: string(name='PayAsYouGoAllocationStrategy'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy'),
  validFrom?: string(name='ValidFrom'),
  validUntil?: string(name='ValidUntil'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration'),
  terminateInstances?: boolean(name='TerminateInstances'),
  maxSpotPrice?: float(name='MaxSpotPrice'),
  totalTargetCapacity?: string(name='TotalTargetCapacity'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity'),
  spotTargetCapacity?: string(name='SpotTargetCapacity'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateVersion?: string(name='LaunchTemplateVersion'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  launchTemplateConfig?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      maxPrice?: double(name='MaxPrice'),
      priority?: int32(name='Priority'),
      weightedCapacity?: double(name='WeightedCapacity'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='LaunchTemplateConfig'),
  systemDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory'),
    }
  ](name='SystemDiskConfig'),
  dataDiskConfig?: [ 
    {
      diskCategory?: string(name='DiskCategory'),
    }
  ](name='DataDiskConfig'),
}

model CreateAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
  launchResults?: {
    launchResult?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      zoneId?: string(name='ZoneId'),
      errorMsg?: string(name='ErrorMsg'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds'),
      instanceType?: string(name='InstanceType'),
      spotStrategy?: string(name='SpotStrategy'),
    }
  ](name='LaunchResult')
  }(name='LaunchResults'),
}

model CreateAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoProvisioningGroupResponseBody(name='body'),
}

async function createAutoProvisioningGroupWithOptions(request: CreateAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): CreateAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAutoProvisioningGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAutoProvisioningGroup(request: CreateAutoProvisioningGroupRequest): CreateAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoProvisioningGroupWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='regionId'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName'),
  timePoints?: string(name='timePoints'),
  repeatWeekdays?: string(name='repeatWeekdays'),
  retentionDays?: int32(name='retentionDays'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy'),
  targetCopyRegions?: string(name='TargetCopyRegions'),
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
}

model CreateAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAutoSnapshotPolicyResponseBody(name='body'),
}

async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAutoSnapshotPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model CreateCapacityReservationRequest {
  privatePoolOptions?: {
    name?: string(name='Name'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceType?: string(name='InstanceType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  endTimeType?: string(name='EndTimeType'),
  platform?: string(name='Platform'),
  zoneId?: [ string ](name='ZoneId'),
}

model CreateCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
}

model CreateCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCapacityReservationResponseBody(name='body'),
}

async function createCapacityReservationWithOptions(request: CreateCapacityReservationRequest, runtime: Util.RuntimeOptions): CreateCapacityReservationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCapacityReservation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCapacityReservation(request: CreateCapacityReservationRequest): CreateCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCapacityReservationWithOptions(request, runtime);
}

model CreateCommandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  commandContent?: string(name='CommandContent'),
  workingDir?: string(name='WorkingDir'),
  timeout?: long(name='Timeout'),
  enableParameter?: boolean(name='EnableParameter'),
}

model CreateCommandResponseBody = {
  requestId?: string(name='RequestId'),
  commandId?: string(name='CommandId'),
}

model CreateCommandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCommandResponseBody(name='body'),
}

async function createCommandWithOptions(request: CreateCommandRequest, runtime: Util.RuntimeOptions): CreateCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCommand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCommand(request: CreateCommandRequest): CreateCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCommandWithOptions(request, runtime);
}

model CreateDedicatedHostClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dryRun?: boolean(name='DryRun'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  description?: string(name='Description'),
}

model CreateDedicatedHostClusterResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
}

model CreateDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostClusterResponseBody(name='body'),
}

async function createDedicatedHostClusterWithOptions(request: CreateDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostCluster', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostCluster(request: CreateDedicatedHostClusterRequest): CreateDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostClusterWithOptions(request, runtime);
}

model CreateDemandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  demandName?: string(name='DemandName'),
  demandDescription?: string(name='DemandDescription'),
  instanceType?: string(name='InstanceType'),
  amount?: int32(name='Amount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model CreateDemandResponseBody = {
  requestId?: string(name='RequestId'),
  demandId?: string(name='DemandId'),
}

model CreateDemandResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDemandResponseBody(name='body'),
}

async function createDemandWithOptions(request: CreateDemandRequest, runtime: Util.RuntimeOptions): CreateDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDemand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDemand(request: CreateDemandRequest): CreateDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDemandWithOptions(request, runtime);
}

model CreateDeploymentSetRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  onUnableToRedeployFailedInstance?: string(name='OnUnableToRedeployFailedInstance'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  deploymentSetName?: string(name='DeploymentSetName'),
  domain?: string(name='Domain'),
  granularity?: string(name='Granularity'),
  strategy?: string(name='Strategy'),
  groupCount?: long(name='GroupCount'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateDeploymentSetResponseBody = {
  deploymentSetId?: string(name='DeploymentSetId'),
  requestId?: string(name='RequestId'),
}

model CreateDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDeploymentSetResponseBody(name='body'),
}

async function createDeploymentSetWithOptions(request: CreateDeploymentSetRequest, runtime: Util.RuntimeOptions): CreateDeploymentSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDeploymentSet', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDeploymentSet(request: CreateDeploymentSetRequest): CreateDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDeploymentSetWithOptions(request, runtime);
}

model CreateDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  snapshotId?: string(name='SnapshotId'),
  diskName?: string(name='DiskName'),
  size?: int32(name='Size'),
  diskCategory?: string(name='DiskCategory'),
  description?: string(name='Description'),
  encrypted?: boolean(name='Encrypted'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  KMSKeyId?: string(name='KMSKeyId'),
  performanceLevel?: string(name='PerformanceLevel'),
  advancedFeatures?: string(name='AdvancedFeatures'),
  storageSetId?: string(name='StorageSetId'),
  encryptAlgorithm?: string(name='EncryptAlgorithm'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  arn?: [ 
    {
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
      assumeRoleFor?: long(name='AssumeRoleFor'),
    }
  ](name='Arn'),
}

model CreateDiskResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
  diskId?: string(name='DiskId'),
}

model CreateDiskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiskResponseBody(name='body'),
}

async function createDiskWithOptions(request: CreateDiskRequest, runtime: Util.RuntimeOptions): CreateDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDisk(request: CreateDiskRequest): CreateDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDiskWithOptions(request, runtime);
}

model CreateElasticityAssuranceRequest {
  privatePoolOptions?: {
    name?: string(name='Name'),
    matchCriteria?: string(name='MatchCriteria'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  assuranceTimes?: string(name='AssuranceTimes'),
  instanceAmount?: int32(name='InstanceAmount'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
  startTime?: string(name='StartTime'),
  zoneId?: [ string ](name='ZoneId'),
  instanceType?: [ string ](name='InstanceType'),
}

model CreateElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
  privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
}

model CreateElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateElasticityAssuranceResponseBody(name='body'),
}

async function createElasticityAssuranceWithOptions(request: CreateElasticityAssuranceRequest, runtime: Util.RuntimeOptions): CreateElasticityAssuranceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateElasticityAssurance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createElasticityAssurance(request: CreateElasticityAssuranceRequest): CreateElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createElasticityAssuranceWithOptions(request, runtime);
}

model CreateForwardEntryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  forwardTableId?: string(name='ForwardTableId'),
  externalIp?: string(name='ExternalIp'),
  externalPort?: string(name='ExternalPort'),
  internalIp?: string(name='InternalIp'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
}

model CreateForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
  forwardEntryId?: string(name='ForwardEntryId'),
}

model CreateForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateForwardEntryResponseBody(name='body'),
}

async function createForwardEntryWithOptions(request: CreateForwardEntryRequest, runtime: Util.RuntimeOptions): CreateForwardEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateForwardEntry', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createForwardEntry(request: CreateForwardEntryRequest): CreateForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createForwardEntryWithOptions(request, runtime);
}

model CreateHaVipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  vSwitchId?: string(name='VSwitchId'),
  ipAddress?: string(name='IpAddress'),
  description?: string(name='Description'),
}

model CreateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
  haVipId?: string(name='HaVipId'),
}

model CreateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHaVipResponseBody(name='body'),
}

async function createHaVipWithOptions(request: CreateHaVipRequest, runtime: Util.RuntimeOptions): CreateHaVipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHaVip', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHaVip(request: CreateHaVipRequest): CreateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHaVipWithOptions(request, runtime);
}

model CreateHpcClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  description?: string(name='Description'),
  name?: string(name='Name'),
}

model CreateHpcClusterResponseBody = {
  requestId?: string(name='RequestId'),
  hpcClusterId?: string(name='HpcClusterId'),
}

model CreateHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHpcClusterResponseBody(name='body'),
}

async function createHpcClusterWithOptions(request: CreateHpcClusterRequest, runtime: Util.RuntimeOptions): CreateHpcClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateHpcCluster', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createHpcCluster(request: CreateHpcClusterRequest): CreateHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createHpcClusterWithOptions(request, runtime);
}

model CreateImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  snapshotId?: string(name='SnapshotId'),
  instanceId?: string(name='InstanceId'),
  imageName?: string(name='ImageName'),
  imageFamily?: string(name='ImageFamily'),
  imageVersion?: string(name='ImageVersion'),
  description?: string(name='Description'),
  platform?: string(name='Platform'),
  architecture?: string(name='Architecture'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  diskDeviceMapping?: [ 
    {
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskType?: string(name='DiskType'),
    }
  ](name='DiskDeviceMapping'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateImageResponseBody = {
  requestId?: string(name='RequestId'),
  imageId?: string(name='ImageId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateImageComponentRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  systemType?: string(name='SystemType'),
  componentType?: string(name='ComponentType'),
  content?: string(name='Content'),
  clientToken?: string(name='ClientToken'),
}

model CreateImageComponentResponseBody = {
  requestId?: string(name='RequestId'),
  imageComponentId?: string(name='ImageComponentId'),
}

model CreateImageComponentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageComponentResponseBody(name='body'),
}

async function createImageComponentWithOptions(request: CreateImageComponentRequest, runtime: Util.RuntimeOptions): CreateImageComponentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImageComponent', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImageComponent(request: CreateImageComponentRequest): CreateImageComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageComponentWithOptions(request, runtime);
}

model CreateImagePipelineRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  baseImageType?: string(name='BaseImageType'),
  baseImage?: string(name='BaseImage'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  imageName?: string(name='ImageName'),
  vSwitchId?: string(name='VSwitchId'),
  instanceType?: string(name='InstanceType'),
  systemDiskSize?: int32(name='SystemDiskSize'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure'),
  buildContent?: string(name='BuildContent'),
  clientToken?: string(name='ClientToken'),
  addAccount?: [ integer ](name='AddAccount'),
  toRegionId?: [ string ](name='ToRegionId'),
}

model CreateImagePipelineResponseBody = {
  requestId?: string(name='RequestId'),
  imagePipelineId?: string(name='ImagePipelineId'),
}

model CreateImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImagePipelineResponseBody(name='body'),
}

async function createImagePipelineWithOptions(request: CreateImagePipelineRequest, runtime: Util.RuntimeOptions): CreateImagePipelineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImagePipeline', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImagePipeline(request: CreateImagePipelineRequest): CreateImagePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImagePipelineWithOptions(request, runtime);
}

model CreateInstanceRequest {
  systemDisk?: {
    size?: int32(name='Size'),
    category?: string(name='Category'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  hibernationOptions?: {
    configured?: boolean(name='Configured'),
  }(name='HibernationOptions'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  imageFamily?: string(name='ImageFamily'),
  instanceType?: string(name='InstanceType'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceName?: string(name='InstanceName'),
  internetChargeType?: string(name='InternetChargeType'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  hostName?: string(name='HostName'),
  password?: string(name='Password'),
  passwordInherit?: boolean(name='PasswordInherit'),
  deploymentSetId?: string(name='DeploymentSetId'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
  clientToken?: string(name='ClientToken'),
  vlanId?: string(name='VlanId'),
  innerIpAddress?: string(name='InnerIpAddress'),
  nodeControllerId?: string(name='NodeControllerId'),
  description?: string(name='Description'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  ioOptimized?: string(name='IoOptimized'),
  ownerAccount?: string(name='OwnerAccount'),
  useAdditionalService?: boolean(name='UseAdditionalService'),
  instanceChargeType?: string(name='InstanceChargeType'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  userData?: string(name='UserData'),
  spotStrategy?: string(name='SpotStrategy'),
  keyPairName?: string(name='KeyPairName'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotDuration?: int32(name='SpotDuration'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  ramRoleName?: string(name='RamRoleName'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  dryRun?: boolean(name='DryRun'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  creditSpecification?: string(name='CreditSpecification'),
  deletionProtection?: boolean(name='DeletionProtection'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpTokens?: string(name='HttpTokens'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      category?: string(name='Category'),
      KMSKeyId?: string(name='KMSKeyId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encryptAlgorithm?: string(name='EncryptAlgorithm'),
      encrypted?: boolean(name='Encrypted'),
    }
  ](name='DataDisk'),
  arn?: [ 
    {
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
      assumeRoleFor?: long(name='AssumeRoleFor'),
    }
  ](name='Arn'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  orderId?: string(name='OrderId'),
  tradePrice?: float(name='TradePrice'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateKeyPairRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairName?: string(name='KeyPairName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  keyPairName?: string(name='KeyPairName'),
  requestId?: string(name='RequestId'),
  keyPairId?: string(name='KeyPairId'),
  privateKeyBody?: string(name='PrivateKeyBody'),
}

model CreateKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKeyPairResponseBody(name='body'),
}

async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateKeyPair', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model CreateLaunchTemplateRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    iops?: int32(name='Iops'),
    performanceLevel?: string(name='PerformanceLevel'),
    deleteWithInstance?: boolean(name='DeleteWithInstance'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  versionDescription?: string(name='VersionDescription'),
  imageId?: string(name='ImageId'),
  imageOwnerAlias?: string(name='ImageOwnerAlias'),
  passwordInherit?: boolean(name='PasswordInherit'),
  instanceType?: string(name='InstanceType'),
  securityGroupId?: string(name='SecurityGroupId'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  instanceName?: string(name='InstanceName'),
  description?: string(name='Description'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  hostName?: string(name='HostName'),
  zoneId?: string(name='ZoneId'),
  ioOptimized?: string(name='IoOptimized'),
  instanceChargeType?: string(name='InstanceChargeType'),
  period?: int32(name='Period'),
  internetChargeType?: string(name='InternetChargeType'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig'),
  networkType?: string(name='NetworkType'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotDuration?: int32(name='SpotDuration'),
  resourceGroupId?: string(name='ResourceGroupId'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  deploymentSetId?: string(name='DeploymentSetId'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  networkInterface?: [ 
    {
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      vSwitchId?: string(name='VSwitchId'),
      description?: string(name='Description'),
      securityGroupId?: string(name='SecurityGroupId'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
    }
  ](name='NetworkInterface'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model CreateLaunchTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
}

model CreateLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLaunchTemplateResponseBody(name='body'),
}

async function createLaunchTemplateWithOptions(request: CreateLaunchTemplateRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLaunchTemplate', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLaunchTemplate(request: CreateLaunchTemplateRequest): CreateLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateWithOptions(request, runtime);
}

model CreateLaunchTemplateVersionRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    iops?: int32(name='Iops'),
    performanceLevel?: string(name='PerformanceLevel'),
    deleteWithInstance?: boolean(name='DeleteWithInstance'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  versionDescription?: string(name='VersionDescription'),
  imageId?: string(name='ImageId'),
  imageOwnerAlias?: string(name='ImageOwnerAlias'),
  passwordInherit?: boolean(name='PasswordInherit'),
  instanceType?: string(name='InstanceType'),
  securityGroupId?: string(name='SecurityGroupId'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  instanceName?: string(name='InstanceName'),
  description?: string(name='Description'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  hostName?: string(name='HostName'),
  zoneId?: string(name='ZoneId'),
  ioOptimized?: string(name='IoOptimized'),
  instanceChargeType?: string(name='InstanceChargeType'),
  period?: int32(name='Period'),
  internetChargeType?: string(name='InternetChargeType'),
  enableVmOsConfig?: boolean(name='EnableVmOsConfig'),
  networkType?: string(name='NetworkType'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotDuration?: int32(name='SpotDuration'),
  resourceGroupId?: string(name='ResourceGroupId'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  deploymentSetId?: string(name='DeploymentSetId'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      size?: int32(name='Size'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      category?: string(name='Category'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      encrypted?: string(name='Encrypted'),
    }
  ](name='DataDisk'),
  networkInterface?: [ 
    {
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      vSwitchId?: string(name='VSwitchId'),
      description?: string(name='Description'),
      securityGroupId?: string(name='SecurityGroupId'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
    }
  ](name='NetworkInterface'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model CreateLaunchTemplateVersionResponseBody = {
  requestId?: string(name='RequestId'),
  launchTemplateVersionNumber?: long(name='LaunchTemplateVersionNumber'),
}

model CreateLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLaunchTemplateVersionResponseBody(name='body'),
}

async function createLaunchTemplateVersionWithOptions(request: CreateLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): CreateLaunchTemplateVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateLaunchTemplateVersion', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createLaunchTemplateVersion(request: CreateLaunchTemplateVersionRequest): CreateLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLaunchTemplateVersionWithOptions(request, runtime);
}

model CreateNatGatewayRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  vpcId?: string(name='VpcId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  bandwidthPackage?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      zone?: string(name='Zone'),
      ipCount?: int32(name='IpCount'),
    }
  ](name='BandwidthPackage'),
}

model CreateNatGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  forwardTableIds?: {
    forwardTableId?: [ string ](name='ForwardTableId')
  }(name='ForwardTableIds'),
  bandwidthPackageIds?: {
    bandwidthPackageId?: [ string ](name='BandwidthPackageId')
  }(name='BandwidthPackageIds'),
  natGatewayId?: string(name='NatGatewayId'),
}

model CreateNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNatGatewayResponseBody(name='body'),
}

async function createNatGatewayWithOptions(request: CreateNatGatewayRequest, runtime: Util.RuntimeOptions): CreateNatGatewayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNatGateway', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNatGateway(request: CreateNatGatewayRequest): CreateNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatGatewayWithOptions(request, runtime);
}

model CreateNetworkInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
  vSwitchId?: string(name='VSwitchId'),
  primaryIpAddress?: string(name='PrimaryIpAddress'),
  securityGroupId?: string(name='SecurityGroupId'),
  networkInterfaceName?: string(name='NetworkInterfaceName'),
  description?: string(name='Description'),
  visible?: boolean(name='Visible'),
  instanceType?: string(name='InstanceType'),
  businessType?: string(name='BusinessType'),
  secondaryPrivateIpAddressCount?: int32(name='SecondaryPrivateIpAddressCount'),
  queueNumber?: int32(name='QueueNumber'),
  clientToken?: string(name='ClientToken'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  privateIpAddress?: [ string ](name='PrivateIpAddress'),
}

model CreateNetworkInterfaceResponseBody = {
  status?: string(name='Status'),
  description?: string(name='Description'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  serviceManaged?: boolean(name='ServiceManaged'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  vSwitchId?: string(name='VSwitchId'),
  networkInterfaceName?: string(name='NetworkInterfaceName'),
  macAddress?: string(name='MacAddress'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
  serviceID?: long(name='ServiceID'),
  type?: string(name='Type'),
  vpcId?: string(name='VpcId'),
  ownerId?: string(name='OwnerId'),
  tags?: {
    tag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='Tag')
  }(name='Tags'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      primary?: boolean(name='Primary'),
      privateIpAddress?: string(name='PrivateIpAddress'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets'),
}

model CreateNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkInterfaceResponseBody(name='body'),
}

async function createNetworkInterfaceWithOptions(request: CreateNetworkInterfaceRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNetworkInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNetworkInterface(request: CreateNetworkInterfaceRequest): CreateNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfaceWithOptions(request, runtime);
}

model CreateNetworkInterfacePermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  accountId?: long(name='AccountId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  permission?: string(name='Permission'),
}

model CreateNetworkInterfacePermissionResponseBody = {
  requestId?: string(name='RequestId'),
  networkInterfacePermission?: {
    permission?: string(name='Permission'),
    networkInterfaceId?: string(name='NetworkInterfaceId'),
    accountId?: long(name='AccountId'),
    networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId'),
    serviceName?: string(name='ServiceName'),
    permissionState?: string(name='PermissionState'),
  }(name='NetworkInterfacePermission'),
}

model CreateNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkInterfacePermissionResponseBody(name='body'),
}

async function createNetworkInterfacePermissionWithOptions(request: CreateNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): CreateNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateNetworkInterfacePermission', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createNetworkInterfacePermission(request: CreateNetworkInterfacePermissionRequest): CreateNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkInterfacePermissionWithOptions(request, runtime);
}

model CreatePhysicalConnectionRequest {
  regionId?: string(name='RegionId'),
  accessPointId?: string(name='AccessPointId'),
  type?: string(name='Type'),
  lineOperator?: string(name='LineOperator'),
  bandwidth?: int32(name='bandwidth'),
  peerLocation?: string(name='PeerLocation'),
  portType?: string(name='PortType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  circuitCode?: string(name='CircuitCode'),
  clientToken?: string(name='ClientToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model CreatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
}

model CreatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePhysicalConnectionResponseBody(name='body'),
}

async function createPhysicalConnectionWithOptions(request: CreatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): CreatePhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatePhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createPhysicalConnection(request: CreatePhysicalConnectionRequest): CreatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhysicalConnectionWithOptions(request, runtime);
}

model CreateResource02Request {
  status?: string(name='Status'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
}

model CreateResource02ResponseBody = {
  status?: string(name='Status'),
  requestId?: string(name='RequestId'),
  ids?: string(name='ids'),
}

model CreateResource02Response = {
  headers: map[string]string(name='headers'),
  body: CreateResource02ResponseBody(name='body'),
}

async function createResource02WithOptions(request: CreateResource02Request, runtime: Util.RuntimeOptions): CreateResource02Response {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResource02', '2014-05-26', 'HTTPS', 'PUT', 'AK', 'json', req, runtime);
}

async function createResource02(request: CreateResource02Request): CreateResource02Response {
  var runtime = new Util.RuntimeOptions{};
  return createResource02WithOptions(request, runtime);
}

model CreateRouteEntryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routeTableId?: string(name='RouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  nextHopId?: string(name='NextHopId'),
  clientToken?: string(name='ClientToken'),
  nextHopType?: string(name='NextHopType'),
  ownerAccount?: string(name='OwnerAccount'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList'),
}

model CreateRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouteEntryResponseBody(name='body'),
}

async function createRouteEntryWithOptions(request: CreateRouteEntryRequest, runtime: Util.RuntimeOptions): CreateRouteEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRouteEntry', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRouteEntry(request: CreateRouteEntryRequest): CreateRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouteEntryWithOptions(request, runtime);
}

model CreateRouterInterfaceRequest {
  regionId?: string(name='RegionId'),
  role?: string(name='Role'),
  oppositeRegionId?: string(name='OppositeRegionId'),
  spec?: string(name='Spec'),
  routerType?: string(name='RouterType'),
  routerId?: string(name='RouterId'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId'),
  oppositeRouterId?: string(name='OppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType'),
  oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
  accessPointId?: string(name='AccessPointId'),
  oppositeAccessPointId?: string(name='OppositeAccessPointId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  period?: int32(name='Period'),
  instanceChargeType?: string(name='InstanceChargeType'),
  autoPay?: boolean(name='AutoPay'),
  pricingCycle?: string(name='PricingCycle'),
  clientToken?: string(name='ClientToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model CreateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: long(name='OrderId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model CreateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRouterInterfaceResponseBody(name='body'),
}

async function createRouterInterfaceWithOptions(request: CreateRouterInterfaceRequest, runtime: Util.RuntimeOptions): CreateRouterInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRouterInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRouterInterface(request: CreateRouterInterfaceRequest): CreateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRouterInterfaceWithOptions(request, runtime);
}

model CreateSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  securityGroupName?: string(name='SecurityGroupName'),
  vpcId?: string(name='VpcId'),
  securityGroupType?: string(name='SecurityGroupType'),
  serviceManaged?: boolean(name='ServiceManaged'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model CreateSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityGroupResponseBody(name='body'),
}

async function createSecurityGroupWithOptions(request: CreateSecurityGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityGroupWithOptions(request, runtime);
}

model CreateSimulatedSystemEventsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  eventType?: string(name='EventType'),
  notBefore?: string(name='NotBefore'),
  instanceId?: [ string ](name='InstanceId'),
}

model CreateSimulatedSystemEventsResponseBody = {
  requestId?: string(name='RequestId'),
  eventIdSet?: {
    eventId?: [ string ](name='EventId')
  }(name='EventIdSet'),
}

model CreateSimulatedSystemEventsResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimulatedSystemEventsResponseBody(name='body'),
}

async function createSimulatedSystemEventsWithOptions(request: CreateSimulatedSystemEventsRequest, runtime: Util.RuntimeOptions): CreateSimulatedSystemEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSimulatedSystemEvents', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSimulatedSystemEvents(request: CreateSimulatedSystemEventsRequest): CreateSimulatedSystemEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSimulatedSystemEventsWithOptions(request, runtime);
}

model CreateSnapshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  snapshotName?: string(name='SnapshotName'),
  description?: string(name='Description'),
  retentionDays?: int32(name='RetentionDays'),
  category?: string(name='Category'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  instantAccess?: boolean(name='InstantAccess'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model CreateSnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  requestId?: string(name='RequestId'),
}

model CreateSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotResponseBody(name='body'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model CreateSnapshotGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  instantAccess?: boolean(name='InstantAccess'),
  instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  excludeDiskId?: [ string ](name='ExcludeDiskId'),
}

model CreateSnapshotGroupResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotGroupId?: string(name='SnapshotGroupId'),
}

model CreateSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSnapshotGroupResponseBody(name='body'),
}

async function createSnapshotGroupWithOptions(request: CreateSnapshotGroupRequest, runtime: Util.RuntimeOptions): CreateSnapshotGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSnapshotGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSnapshotGroup(request: CreateSnapshotGroupRequest): CreateSnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotGroupWithOptions(request, runtime);
}

model CreateStorageSetRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  storageSetName?: string(name='StorageSetName'),
  description?: string(name='Description'),
  maxPartitionNumber?: int32(name='MaxPartitionNumber'),
}

model CreateStorageSetResponseBody = {
  requestId?: string(name='RequestId'),
  storageSetId?: string(name='StorageSetId'),
}

model CreateStorageSetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStorageSetResponseBody(name='body'),
}

async function createStorageSetWithOptions(request: CreateStorageSetRequest, runtime: Util.RuntimeOptions): CreateStorageSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateStorageSet', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createStorageSet(request: CreateStorageSetRequest): CreateStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createStorageSetWithOptions(request, runtime);
}

model CreateVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  vbrOwnerId?: long(name='VbrOwnerId'),
  vlanId?: int32(name='VlanId'),
  circuitCode?: string(name='CircuitCode'),
  localGatewayIp?: string(name='LocalGatewayIp'),
  peerGatewayIp?: string(name='PeerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  clientToken?: string(name='ClientToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model CreateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
  vbrId?: string(name='VbrId'),
}

model CreateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVirtualBorderRouterResponseBody(name='body'),
}

async function createVirtualBorderRouterWithOptions(request: CreateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): CreateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVirtualBorderRouter', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVirtualBorderRouter(request: CreateVirtualBorderRouterRequest): CreateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVirtualBorderRouterWithOptions(request, runtime);
}

model CreateVpcRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  cidrBlock?: string(name='CidrBlock'),
  vpcName?: string(name='VpcName'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model CreateVpcResponseBody = {
  VRouterId?: string(name='VRouterId'),
  routeTableId?: string(name='RouteTableId'),
  vpcId?: string(name='VpcId'),
  requestId?: string(name='RequestId'),
}

model CreateVpcResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcResponseBody(name='body'),
}

async function createVpcWithOptions(request: CreateVpcRequest, runtime: Util.RuntimeOptions): CreateVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVpc', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVpc(request: CreateVpcRequest): CreateVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcWithOptions(request, runtime);
}

model CreateVSwitchRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
  cidrBlock?: string(name='CidrBlock'),
  vpcId?: string(name='VpcId'),
  regionId?: string(name='RegionId'),
  vSwitchName?: string(name='VSwitchName'),
  description?: string(name='Description'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVSwitchResponseBody(name='body'),
}

async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVSwitch', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model DeactivateRouterInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
}

model DeactivateRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeactivateRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeactivateRouterInterfaceResponseBody(name='body'),
}

async function deactivateRouterInterfaceWithOptions(request: DeactivateRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeactivateRouterInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeactivateRouterInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deactivateRouterInterface(request: DeactivateRouterInterfaceRequest): DeactivateRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactivateRouterInterfaceWithOptions(request, runtime);
}

model DeleteActivationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  activationId?: string(name='ActivationId'),
}

model DeleteActivationResponseBody = {
  requestId?: string(name='RequestId'),
  activation?: {
    creationTime?: string(name='CreationTime'),
    deregisteredCount?: int32(name='DeregisteredCount'),
    instanceCount?: int32(name='InstanceCount'),
    description?: string(name='Description'),
    registeredCount?: int32(name='RegisteredCount'),
    instanceName?: string(name='InstanceName'),
    ipAddressRange?: string(name='IpAddressRange'),
    timeToLiveInHours?: long(name='TimeToLiveInHours'),
    activationId?: string(name='ActivationId'),
  }(name='Activation'),
}

model DeleteActivationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteActivationResponseBody(name='body'),
}

async function deleteActivationWithOptions(request: DeleteActivationRequest, runtime: Util.RuntimeOptions): DeleteActivationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteActivation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteActivation(request: DeleteActivationRequest): DeleteActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteActivationWithOptions(request, runtime);
}

model DeleteAutoProvisioningGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
  terminateInstances?: boolean(name='TerminateInstances'),
}

model DeleteAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoProvisioningGroupResponseBody(name='body'),
}

async function deleteAutoProvisioningGroupWithOptions(request: DeleteAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): DeleteAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAutoProvisioningGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAutoProvisioningGroup(request: DeleteAutoProvisioningGroupRequest): DeleteAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoProvisioningGroupWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='regionId'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId'),
}

model DeleteAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoSnapshotPolicyResponseBody(name='body'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAutoSnapshotPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteBandwidthPackageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
}

model DeleteBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBandwidthPackageResponseBody(name='body'),
}

async function deleteBandwidthPackageWithOptions(request: DeleteBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteBandwidthPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBandwidthPackage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBandwidthPackage(request: DeleteBandwidthPackageRequest): DeleteBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBandwidthPackageWithOptions(request, runtime);
}

model DeleteCommandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  commandId?: string(name='CommandId'),
}

model DeleteCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCommandResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCommandResponseBody(name='body'),
}

async function deleteCommandWithOptions(request: DeleteCommandRequest, runtime: Util.RuntimeOptions): DeleteCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCommand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCommand(request: DeleteCommandRequest): DeleteCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCommandWithOptions(request, runtime);
}

model DeleteDedicatedHostClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
}

model DeleteDedicatedHostClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostClusterResponseBody(name='body'),
}

async function deleteDedicatedHostClusterWithOptions(request: DeleteDedicatedHostClusterRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedHostCluster', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedHostCluster(request: DeleteDedicatedHostClusterRequest): DeleteDedicatedHostClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostClusterWithOptions(request, runtime);
}

model DeleteDemandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  demandId?: string(name='DemandId'),
  reason?: string(name='Reason'),
}

model DeleteDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDemandResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDemandResponseBody(name='body'),
}

async function deleteDemandWithOptions(request: DeleteDemandRequest, runtime: Util.RuntimeOptions): DeleteDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDemand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDemand(request: DeleteDemandRequest): DeleteDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDemandWithOptions(request, runtime);
}

model DeleteDeploymentSetRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  deploymentSetId?: string(name='DeploymentSetId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteDeploymentSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDeploymentSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDeploymentSetResponseBody(name='body'),
}

async function deleteDeploymentSetWithOptions(request: DeleteDeploymentSetRequest, runtime: Util.RuntimeOptions): DeleteDeploymentSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDeploymentSet', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDeploymentSet(request: DeleteDeploymentSetRequest): DeleteDeploymentSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeploymentSetWithOptions(request, runtime);
}

model DeleteDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiskResponseBody(name='body'),
}

async function deleteDiskWithOptions(request: DeleteDiskRequest, runtime: Util.RuntimeOptions): DeleteDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDisk(request: DeleteDiskRequest): DeleteDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDiskWithOptions(request, runtime);
}

model DeleteForwardEntryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  forwardTableId?: string(name='ForwardTableId'),
  forwardEntryId?: string(name='ForwardEntryId'),
}

model DeleteForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteForwardEntryResponseBody(name='body'),
}

async function deleteForwardEntryWithOptions(request: DeleteForwardEntryRequest, runtime: Util.RuntimeOptions): DeleteForwardEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteForwardEntry', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteForwardEntry(request: DeleteForwardEntryRequest): DeleteForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteForwardEntryWithOptions(request, runtime);
}

model DeleteHaVipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  haVipId?: string(name='HaVipId'),
}

model DeleteHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHaVipResponseBody(name='body'),
}

async function deleteHaVipWithOptions(request: DeleteHaVipRequest, runtime: Util.RuntimeOptions): DeleteHaVipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHaVip', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHaVip(request: DeleteHaVipRequest): DeleteHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHaVipWithOptions(request, runtime);
}

model DeleteHpcClusterRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  hpcClusterId?: string(name='HpcClusterId'),
}

model DeleteHpcClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteHpcClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHpcClusterResponseBody(name='body'),
}

async function deleteHpcClusterWithOptions(request: DeleteHpcClusterRequest, runtime: Util.RuntimeOptions): DeleteHpcClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteHpcCluster', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteHpcCluster(request: DeleteHpcClusterRequest): DeleteHpcClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteHpcClusterWithOptions(request, runtime);
}

model DeleteImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  force?: boolean(name='Force'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteImageComponentRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  imageComponentId?: string(name='ImageComponentId'),
}

model DeleteImageComponentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageComponentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageComponentResponseBody(name='body'),
}

async function deleteImageComponentWithOptions(request: DeleteImageComponentRequest, runtime: Util.RuntimeOptions): DeleteImageComponentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImageComponent', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImageComponent(request: DeleteImageComponentRequest): DeleteImageComponentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageComponentWithOptions(request, runtime);
}

model DeleteImagePipelineRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  imagePipelineId?: string(name='ImagePipelineId'),
}

model DeleteImagePipelineResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImagePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImagePipelineResponseBody(name='body'),
}

async function deleteImagePipelineWithOptions(request: DeleteImagePipelineRequest, runtime: Util.RuntimeOptions): DeleteImagePipelineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImagePipeline', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImagePipeline(request: DeleteImagePipelineRequest): DeleteImagePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagePipelineWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  force?: boolean(name='Force'),
  terminateSubscription?: boolean(name='TerminateSubscription'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DeleteInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  force?: boolean(name='Force'),
  terminateSubscription?: boolean(name='TerminateSubscription'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  instanceId?: [ string ](name='InstanceId'),
}

model DeleteInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstancesResponseBody(name='body'),
}

async function deleteInstancesWithOptions(request: DeleteInstancesRequest, runtime: Util.RuntimeOptions): DeleteInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstances(request: DeleteInstancesRequest): DeleteInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstancesWithOptions(request, runtime);
}

model DeleteKeyPairsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairNames?: string(name='KeyPairNames'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteKeyPairs', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model DeleteLaunchTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
}

model DeleteLaunchTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLaunchTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLaunchTemplateResponseBody(name='body'),
}

async function deleteLaunchTemplateWithOptions(request: DeleteLaunchTemplateRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLaunchTemplate', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLaunchTemplate(request: DeleteLaunchTemplateRequest): DeleteLaunchTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateWithOptions(request, runtime);
}

model DeleteLaunchTemplateVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  deleteVersion?: [ integer ](name='DeleteVersion'),
}

model DeleteLaunchTemplateVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteLaunchTemplateVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLaunchTemplateVersionResponseBody(name='body'),
}

async function deleteLaunchTemplateVersionWithOptions(request: DeleteLaunchTemplateVersionRequest, runtime: Util.RuntimeOptions): DeleteLaunchTemplateVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteLaunchTemplateVersion', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteLaunchTemplateVersion(request: DeleteLaunchTemplateVersionRequest): DeleteLaunchTemplateVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLaunchTemplateVersionWithOptions(request, runtime);
}

model DeleteNatGatewayRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  natGatewayId?: string(name='NatGatewayId'),
}

model DeleteNatGatewayResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNatGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNatGatewayResponseBody(name='body'),
}

async function deleteNatGatewayWithOptions(request: DeleteNatGatewayRequest, runtime: Util.RuntimeOptions): DeleteNatGatewayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNatGateway', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNatGateway(request: DeleteNatGatewayRequest): DeleteNatGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatGatewayWithOptions(request, runtime);
}

model DeleteNetworkInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
}

model DeleteNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkInterfaceResponseBody(name='body'),
}

async function deleteNetworkInterfaceWithOptions(request: DeleteNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNetworkInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNetworkInterface(request: DeleteNetworkInterfaceRequest): DeleteNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfaceWithOptions(request, runtime);
}

model DeleteNetworkInterfacePermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId'),
  force?: boolean(name='Force'),
}

model DeleteNetworkInterfacePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkInterfacePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkInterfacePermissionResponseBody(name='body'),
}

async function deleteNetworkInterfacePermissionWithOptions(request: DeleteNetworkInterfacePermissionRequest, runtime: Util.RuntimeOptions): DeleteNetworkInterfacePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNetworkInterfacePermission', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNetworkInterfacePermission(request: DeleteNetworkInterfacePermissionRequest): DeleteNetworkInterfacePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkInterfacePermissionWithOptions(request, runtime);
}

model DeletePhysicalConnectionRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeletePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePhysicalConnectionResponseBody(name='body'),
}

async function deletePhysicalConnectionWithOptions(request: DeletePhysicalConnectionRequest, runtime: Util.RuntimeOptions): DeletePhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeletePhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deletePhysicalConnection(request: DeletePhysicalConnectionRequest): DeletePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhysicalConnectionWithOptions(request, runtime);
}

model DeleteRouteEntryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routeTableId?: string(name='RouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  nextHopId?: string(name='NextHopId'),
  ownerAccount?: string(name='OwnerAccount'),
  nextHopList?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
    }
  ](name='NextHopList'),
}

model DeleteRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteEntryResponseBody(name='body'),
}

async function deleteRouteEntryWithOptions(request: DeleteRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteRouteEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRouteEntry', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRouteEntry(request: DeleteRouteEntryRequest): DeleteRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteEntryWithOptions(request, runtime);
}

model DeleteRouterInterfaceRequest {
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model DeleteRouterInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouterInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouterInterfaceResponseBody(name='body'),
}

async function deleteRouterInterfaceWithOptions(request: DeleteRouterInterfaceRequest, runtime: Util.RuntimeOptions): DeleteRouterInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRouterInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRouterInterface(request: DeleteRouterInterfaceRequest): DeleteRouterInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouterInterfaceWithOptions(request, runtime);
}

model DeleteSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

async function deleteSecurityGroupWithOptions(request: DeleteSecurityGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId'),
  force?: boolean(name='Force'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteSnapshotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteSnapshotGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  snapshotGroupId?: string(name='SnapshotGroupId'),
}

model DeleteSnapshotGroupResponseBody = {
  requestId?: string(name='RequestId'),
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          value?: string(name='Value'),
          name?: string(name='Name'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet'),
      operationStatus?: string(name='OperationStatus'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet'),
}

model DeleteSnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotGroupResponseBody(name='body'),
}

async function deleteSnapshotGroupWithOptions(request: DeleteSnapshotGroupRequest, runtime: Util.RuntimeOptions): DeleteSnapshotGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSnapshotGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSnapshotGroup(request: DeleteSnapshotGroupRequest): DeleteSnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotGroupWithOptions(request, runtime);
}

model DeleteStorageSetRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  storageSetId?: string(name='StorageSetId'),
}

model DeleteStorageSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStorageSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStorageSetResponseBody(name='body'),
}

async function deleteStorageSetWithOptions(request: DeleteStorageSetRequest, runtime: Util.RuntimeOptions): DeleteStorageSetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStorageSet', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStorageSet(request: DeleteStorageSetRequest): DeleteStorageSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStorageSetWithOptions(request, runtime);
}

model DeleteVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  vbrId?: string(name='VbrId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model DeleteVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVirtualBorderRouterResponseBody(name='body'),
}

async function deleteVirtualBorderRouterWithOptions(request: DeleteVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): DeleteVirtualBorderRouterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVirtualBorderRouter', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVirtualBorderRouter(request: DeleteVirtualBorderRouterRequest): DeleteVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVirtualBorderRouterWithOptions(request, runtime);
}

model DeleteVpcRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcResponseBody(name='body'),
}

async function deleteVpcWithOptions(request: DeleteVpcRequest, runtime: Util.RuntimeOptions): DeleteVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpc', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpc(request: DeleteVpcRequest): DeleteVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcWithOptions(request, runtime);
}

model DeleteVSwitchRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVSwitchResponseBody(name='body'),
}

async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVSwitch', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DeregisterManagedInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model DeregisterManagedInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instance?: {
    lastInvokedTime?: string(name='LastInvokedTime'),
    internetIp?: string(name='InternetIp'),
    hostname?: string(name='Hostname'),
    instanceId?: string(name='InstanceId'),
    intranetIp?: string(name='IntranetIp'),
    activationId?: string(name='ActivationId'),
    registrationTime?: string(name='RegistrationTime'),
    agentVersion?: string(name='AgentVersion'),
    instanceName?: string(name='InstanceName'),
    osType?: string(name='OsType'),
    invocationCount?: long(name='InvocationCount'),
    osVersion?: string(name='OsVersion'),
    machineId?: string(name='MachineId'),
  }(name='Instance'),
}

model DeregisterManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterManagedInstanceResponseBody(name='body'),
}

async function deregisterManagedInstanceWithOptions(request: DeregisterManagedInstanceRequest, runtime: Util.RuntimeOptions): DeregisterManagedInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeregisterManagedInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deregisterManagedInstance(request: DeregisterManagedInstanceRequest): DeregisterManagedInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deregisterManagedInstanceWithOptions(request, runtime);
}

model DescribeAccessPointsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  type?: string(name='Type'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeAccessPointsResponseBody = {
  accessPointSet?: {
    accessPointType?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      hostOperator?: string(name='HostOperator'),
      description?: string(name='Description'),
      attachedRegionNo?: string(name='AttachedRegionNo'),
      name?: string(name='Name'),
      accessPointId?: string(name='AccessPointId'),
      location?: string(name='Location'),
    }
  ](name='AccessPointType')
  }(name='AccessPointSet'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAccessPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccessPointsResponseBody(name='body'),
}

async function describeAccessPointsWithOptions(request: DescribeAccessPointsRequest, runtime: Util.RuntimeOptions): DescribeAccessPointsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccessPoints', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccessPoints(request: DescribeAccessPointsRequest): DescribeAccessPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessPointsWithOptions(request, runtime);
}

model DescribeAccountAttributesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  attributeName?: [ string ](name='AttributeName'),
}

model DescribeAccountAttributesResponseBody = {
  requestId?: string(name='RequestId'),
  accountAttributeItems?: {
    accountAttributeItem?: [ 
    {
      attributeName?: string(name='AttributeName'),
      attributeValues?: {
        valueItem?: [ 
        {
          diskCategory?: string(name='DiskCategory'),
          value?: string(name='Value'),
          expiredTime?: string(name='ExpiredTime'),
          zoneId?: string(name='ZoneId'),
          instanceType?: string(name='InstanceType'),
          count?: int32(name='Count'),
          instanceChargeType?: string(name='InstanceChargeType'),
        }
      ](name='ValueItem')
      }(name='AttributeValues'),
    }
  ](name='AccountAttributeItem')
  }(name='AccountAttributeItems'),
}

model DescribeAccountAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountAttributesResponseBody(name='body'),
}

async function describeAccountAttributesWithOptions(request: DescribeAccountAttributesRequest, runtime: Util.RuntimeOptions): DescribeAccountAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccountAttributes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccountAttributes(request: DescribeAccountAttributesRequest): DescribeAccountAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountAttributesWithOptions(request, runtime);
}

model DescribeActivationsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  activationId?: string(name='ActivationId'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeActivationsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  activationList?: [ 
    {
      creationTime?: string(name='CreationTime'),
      deregisteredCount?: int32(name='DeregisteredCount'),
      instanceCount?: int32(name='InstanceCount'),
      description?: string(name='Description'),
      registeredCount?: int32(name='RegisteredCount'),
      instanceName?: string(name='InstanceName'),
      disabled?: boolean(name='Disabled'),
      ipAddressRange?: string(name='IpAddressRange'),
      timeToLiveInHours?: long(name='TimeToLiveInHours'),
      activationId?: string(name='ActivationId'),
    }
  ](name='ActivationList'),
}

model DescribeActivationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActivationsResponseBody(name='body'),
}

async function describeActivationsWithOptions(request: DescribeActivationsRequest, runtime: Util.RuntimeOptions): DescribeActivationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeActivations', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeActivations(request: DescribeActivationsRequest): DescribeActivationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeActivationsWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupHistoryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeAutoProvisioningGroupHistoryResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  autoProvisioningGroupHistories?: {
    autoProvisioningGroupHistory?: [ 
    {
      status?: string(name='Status'),
      startTime?: string(name='StartTime'),
      activityDetails?: {
        activityDetail?: [ 
        {
          status?: string(name='Status'),
          detail?: string(name='Detail'),
        }
      ](name='ActivityDetail')
      }(name='ActivityDetails'),
      taskId?: string(name='TaskId'),
      lastEventTime?: string(name='LastEventTime'),
    }
  ](name='AutoProvisioningGroupHistory')
  }(name='AutoProvisioningGroupHistories'),
}

model DescribeAutoProvisioningGroupHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupHistoryResponseBody(name='body'),
}

async function describeAutoProvisioningGroupHistoryWithOptions(request: DescribeAutoProvisioningGroupHistoryRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoProvisioningGroupHistory', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoProvisioningGroupHistory(request: DescribeAutoProvisioningGroupHistoryRequest): DescribeAutoProvisioningGroupHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupHistoryWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
}

model DescribeAutoProvisioningGroupInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      isSpot?: boolean(name='IsSpot'),
      CPU?: int32(name='CPU'),
      networkType?: string(name='NetworkType'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      ioOptimized?: boolean(name='IoOptimized'),
      osType?: string(name='OsType'),
      zoneId?: string(name='ZoneId'),
      memory?: int32(name='Memory'),
    }
  ](name='Instance')
  }(name='Instances'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeAutoProvisioningGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupInstancesResponseBody(name='body'),
}

async function describeAutoProvisioningGroupInstancesWithOptions(request: DescribeAutoProvisioningGroupInstancesRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoProvisioningGroupInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoProvisioningGroupInstances(request: DescribeAutoProvisioningGroupInstancesRequest): DescribeAutoProvisioningGroupInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupInstancesWithOptions(request, runtime);
}

model DescribeAutoProvisioningGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName'),
  autoProvisioningGroupId?: [ string ](name='AutoProvisioningGroupId'),
  autoProvisioningGroupStatus?: [ string ](name='AutoProvisioningGroupStatus'),
}

model DescribeAutoProvisioningGroupsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  autoProvisioningGroups?: {
    autoProvisioningGroup?: [ 
    {
      status?: string(name='Status'),
      autoProvisioningGroupName?: string(name='AutoProvisioningGroupName'),
      creationTime?: string(name='CreationTime'),
      maxSpotPrice?: float(name='MaxSpotPrice'),
      terminateInstances?: boolean(name='TerminateInstances'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      state?: string(name='State'),
      validFrom?: string(name='ValidFrom'),
      launchTemplateVersion?: string(name='LaunchTemplateVersion'),
      validUntil?: string(name='ValidUntil'),
      regionId?: string(name='RegionId'),
      terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration'),
      autoProvisioningGroupType?: string(name='AutoProvisioningGroupType'),
      autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
      payAsYouGoOptions?: {
        allocationStrategy?: string(name='AllocationStrategy'),
      }(name='PayAsYouGoOptions'),
      targetCapacitySpecification?: {
        spotTargetCapacity?: float(name='SpotTargetCapacity'),
        defaultTargetCapacityType?: string(name='DefaultTargetCapacityType'),
        totalTargetCapacity?: float(name='TotalTargetCapacity'),
        payAsYouGoTargetCapacity?: float(name='PayAsYouGoTargetCapacity'),
      }(name='TargetCapacitySpecification'),
      spotOptions?: {
        instancePoolsToUseCount?: int32(name='InstancePoolsToUseCount'),
        instanceInterruptionBehavior?: string(name='InstanceInterruptionBehavior'),
        allocationStrategy?: string(name='AllocationStrategy'),
      }(name='SpotOptions'),
      launchTemplateConfigs?: {
        launchTemplateConfig?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          maxPrice?: float(name='MaxPrice'),
          priority?: float(name='Priority'),
          weightedCapacity?: float(name='WeightedCapacity'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='LaunchTemplateConfig')
      }(name='LaunchTemplateConfigs'),
      excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy'),
    }
  ](name='AutoProvisioningGroup')
  }(name='AutoProvisioningGroups'),
}

model DescribeAutoProvisioningGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoProvisioningGroupsResponseBody(name='body'),
}

async function describeAutoProvisioningGroupsWithOptions(request: DescribeAutoProvisioningGroupsRequest, runtime: Util.RuntimeOptions): DescribeAutoProvisioningGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoProvisioningGroups', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoProvisioningGroups(request: DescribeAutoProvisioningGroupsRequest): DescribeAutoProvisioningGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoProvisioningGroupsWithOptions(request, runtime);
}

model DescribeAutoSnapshotPolicyExRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeAutoSnapshotPolicyExResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  autoSnapshotPolicies?: {
    autoSnapshotPolicy?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      timePoints?: string(name='TimePoints'),
      autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName'),
      targetCopyRegions?: string(name='TargetCopyRegions'),
      copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      retentionDays?: int32(name='RetentionDays'),
      regionId?: string(name='RegionId'),
      diskNums?: int32(name='DiskNums'),
      enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy'),
      repeatWeekdays?: string(name='RepeatWeekdays'),
      volumeNums?: int32(name='VolumeNums'),
    }
  ](name='AutoSnapshotPolicy')
  }(name='AutoSnapshotPolicies'),
}

model DescribeAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoSnapshotPolicyExResponseBody(name='body'),
}

async function describeAutoSnapshotPolicyExWithOptions(request: DescribeAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAutoSnapshotPolicyEx', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAutoSnapshotPolicyEx(request: DescribeAutoSnapshotPolicyExRequest): DescribeAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPolicyExWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  spotStrategy?: string(name='SpotStrategy'),
  spotDuration?: int32(name='SpotDuration'),
  destinationResource?: string(name='DestinationResource'),
  zoneId?: string(name='ZoneId'),
  ioOptimized?: string(name='IoOptimized'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  instanceType?: string(name='InstanceType'),
  systemDiskCategory?: string(name='SystemDiskCategory'),
  dataDiskCategory?: string(name='DataDiskCategory'),
  networkCategory?: string(name='NetworkCategory'),
  cores?: int32(name='Cores'),
  memory?: float(name='Memory'),
  resourceType?: string(name='ResourceType'),
  scope?: string(name='Scope'),
}

model DescribeAvailableResourceResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: {
    availableZone?: [ 
    {
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
      statusCategory?: string(name='StatusCategory'),
      regionId?: string(name='RegionId'),
      availableResources?: {
        availableResource?: [ 
        {
          type?: string(name='Type'),
          supportedResources?: {
            supportedResource?: [ 
            {
              status?: string(name='Status'),
              value?: string(name='Value'),
              max?: int32(name='Max'),
              unit?: string(name='Unit'),
              statusCategory?: string(name='StatusCategory'),
              min?: int32(name='Min'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeBandwidthLimitationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  spotStrategy?: string(name='SpotStrategy'),
  instanceType?: string(name='InstanceType'),
  resourceId?: string(name='ResourceId'),
  operationType?: string(name='OperationType'),
}

model DescribeBandwidthLimitationResponseBody = {
  requestId?: string(name='RequestId'),
  bandwidths?: {
    bandwidth?: [ 
    {
      max?: int32(name='Max'),
      unit?: string(name='Unit'),
      internetChargeType?: string(name='InternetChargeType'),
      min?: int32(name='Min'),
    }
  ](name='Bandwidth')
  }(name='Bandwidths'),
}

model DescribeBandwidthLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwidthLimitationResponseBody(name='body'),
}

async function describeBandwidthLimitationWithOptions(request: DescribeBandwidthLimitationRequest, runtime: Util.RuntimeOptions): DescribeBandwidthLimitationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBandwidthLimitation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBandwidthLimitation(request: DescribeBandwidthLimitationRequest): DescribeBandwidthLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthLimitationWithOptions(request, runtime);
}

model DescribeBandwidthPackagesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  natGatewayId?: string(name='NatGatewayId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeBandwidthPackagesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  bandwidthPackages?: {
    bandwidthPackage?: [ 
    {
      publicIpAddresses?: {
        publicIpAddresse?: [ 
        {
          ipAddress?: string(name='IpAddress'),
          allocationId?: string(name='AllocationId'),
        }
      ](name='PublicIpAddresse')
      }(name='PublicIpAddresses'),
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      ipCount?: string(name='IpCount'),
      instanceChargeType?: string(name='InstanceChargeType'),
      regionId?: string(name='RegionId'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      bandwidth?: string(name='Bandwidth'),
      description?: string(name='Description'),
      natGatewayId?: string(name='NatGatewayId'),
      internetChargeType?: string(name='InternetChargeType'),
      zoneId?: string(name='ZoneId'),
      businessStatus?: string(name='BusinessStatus'),
      name?: string(name='Name'),
      ISP?: string(name='ISP'),
    }
  ](name='BandwidthPackage')
  }(name='BandwidthPackages'),
}

model DescribeBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwidthPackagesResponseBody(name='body'),
}

async function describeBandwidthPackagesWithOptions(request: DescribeBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeBandwidthPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBandwidthPackages', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBandwidthPackages(request: DescribeBandwidthPackagesRequest): DescribeBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwidthPackagesWithOptions(request, runtime);
}

model DescribeCapacityReservationInstancesRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeCapacityReservationInstancesResponseBody = {
  capacityReservationItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceIdSet')
  }(name='CapacityReservationItem'),
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
}

model DescribeCapacityReservationInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapacityReservationInstancesResponseBody(name='body'),
}

async function describeCapacityReservationInstancesWithOptions(request: DescribeCapacityReservationInstancesRequest, runtime: Util.RuntimeOptions): DescribeCapacityReservationInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCapacityReservationInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCapacityReservationInstances(request: DescribeCapacityReservationInstancesRequest): DescribeCapacityReservationInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapacityReservationInstancesWithOptions(request, runtime);
}

model DescribeCapacityReservationsRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  platform?: string(name='Platform'),
  instanceType?: string(name='InstanceType'),
  zoneId?: string(name='ZoneId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  status?: string(name='Status'),
}

model DescribeCapacityReservationsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
  capacityReservationSet?: {
    capacityReservationItem?: [ 
    {
      status?: string(name='Status'),
      timeSlot?: string(name='TimeSlot'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      allocatedResources?: {
        allocatedResource?: [ 
        {
          zoneId?: string(name='zoneId'),
          usedAmount?: int32(name='UsedAmount'),
          totalAmount?: int32(name='TotalAmount'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName'),
      instanceChargeType?: string(name='InstanceChargeType'),
      regionId?: string(name='RegionId'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      description?: string(name='Description'),
      endTimeType?: string(name='EndTimeType'),
      resourceGroupId?: string(name='ResourceGroupId'),
      platform?: string(name='Platform'),
    }
  ](name='CapacityReservationItem')
  }(name='CapacityReservationSet'),
}

model DescribeCapacityReservationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapacityReservationsResponseBody(name='body'),
}

async function describeCapacityReservationsWithOptions(request: DescribeCapacityReservationsRequest, runtime: Util.RuntimeOptions): DescribeCapacityReservationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCapacityReservations', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCapacityReservations(request: DescribeCapacityReservationsRequest): DescribeCapacityReservationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapacityReservationsWithOptions(request, runtime);
}

model DescribeClassicLinkInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  vpcId?: string(name='VpcId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeClassicLinkInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  links?: {
    link?: [ 
    {
      vpcId?: string(name='VpcId'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Link')
  }(name='Links'),
}

model DescribeClassicLinkInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClassicLinkInstancesResponseBody(name='body'),
}

async function describeClassicLinkInstancesWithOptions(request: DescribeClassicLinkInstancesRequest, runtime: Util.RuntimeOptions): DescribeClassicLinkInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClassicLinkInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClassicLinkInstances(request: DescribeClassicLinkInstancesRequest): DescribeClassicLinkInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClassicLinkInstancesWithOptions(request, runtime);
}

model DescribeCloudAssistantStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  OSType?: string(name='OSType'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  instanceId?: [ string ](name='InstanceId'),
}

model DescribeCloudAssistantStatusResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  instanceCloudAssistantStatusSet?: {
    instanceCloudAssistantStatus?: [ 
    {
      cloudAssistantStatus?: string(name='CloudAssistantStatus'),
      lastInvokedTime?: string(name='LastInvokedTime'),
      cloudAssistantVersion?: string(name='CloudAssistantVersion'),
      activeTaskCount?: long(name='ActiveTaskCount'),
      invocationCount?: long(name='InvocationCount'),
      instanceId?: string(name='InstanceId'),
      OSType?: string(name='OSType'),
    }
  ](name='InstanceCloudAssistantStatus')
  }(name='InstanceCloudAssistantStatusSet'),
}

model DescribeCloudAssistantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCloudAssistantStatusResponseBody(name='body'),
}

async function describeCloudAssistantStatusWithOptions(request: DescribeCloudAssistantStatusRequest, runtime: Util.RuntimeOptions): DescribeCloudAssistantStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCloudAssistantStatus', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCloudAssistantStatus(request: DescribeCloudAssistantStatusRequest): DescribeCloudAssistantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCloudAssistantStatusWithOptions(request, runtime);
}

model DescribeClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeClustersResponseBody = {
  requestId?: string(name='RequestId'),
  clusters?: {
    cluster?: [ 
    {
      clusterId?: string(name='ClusterId'),
    }
  ](name='Cluster')
  }(name='Clusters'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClusters', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DescribeCommandsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  provider?: string(name='Provider'),
  commandId?: string(name='CommandId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  contentEncoding?: string(name='ContentEncoding'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeCommandsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  commands?: {
    command?: [ 
    {
      timeout?: long(name='Timeout'),
      type?: string(name='Type'),
      creationTime?: string(name='CreationTime'),
      parameterNames?: {
        parameterName?: [ string ](name='ParameterName')
      }(name='ParameterNames'),
      invokeTimes?: int32(name='InvokeTimes'),
      commandId?: string(name='CommandId'),
      workingDir?: string(name='WorkingDir'),
      description?: string(name='Description'),
      version?: int32(name='Version'),
      commandContent?: string(name='CommandContent'),
      provider?: string(name='Provider'),
      category?: string(name='Category'),
      latest?: boolean(name='Latest'),
      name?: string(name='Name'),
      enableParameter?: boolean(name='EnableParameter'),
    }
  ](name='Command')
  }(name='Commands'),
}

model DescribeCommandsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCommandsResponseBody(name='body'),
}

async function describeCommandsWithOptions(request: DescribeCommandsRequest, runtime: Util.RuntimeOptions): DescribeCommandsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCommands', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCommands(request: DescribeCommandsRequest): DescribeCommandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCommandsWithOptions(request, runtime);
}

model DescribeDedicatedHostAutoRenewRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedHostAutoRenewResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostRenewAttributes?: {
    dedicatedHostRenewAttribute?: [ 
    {
      periodUnit?: string(name='PeriodUnit'),
      duration?: int32(name='Duration'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      renewalStatus?: string(name='RenewalStatus'),
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
    }
  ](name='DedicatedHostRenewAttribute')
  }(name='DedicatedHostRenewAttributes'),
}

model DescribeDedicatedHostAutoRenewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAutoRenewResponseBody(name='body'),
}

async function describeDedicatedHostAutoRenewWithOptions(request: DescribeDedicatedHostAutoRenewRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAutoRenewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostAutoRenew', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostAutoRenew(request: DescribeDedicatedHostAutoRenewRequest): DescribeDedicatedHostAutoRenewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAutoRenewWithOptions(request, runtime);
}

model DescribeDedicatedHostClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  lockReason?: string(name='LockReason'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostClusterIds?: string(name='DedicatedHostClusterIds'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDedicatedHostClustersResponseBody = {
  dedicatedHostClusters?: {
    dedicatedHostCluster?: [ 
    {
      description?: string(name='Description'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      dedicatedHostClusterCapacity?: {
        localStorageCapacities?: {
          localStorageCapacity?: [ 
          {
            dataDiskCategory?: string(name='DataDiskCategory'),
            availableDisk?: int32(name='AvailableDisk'),
            totalDisk?: int32(name='TotalDisk'),
          }
        ](name='LocalStorageCapacity')
        }(name='LocalStorageCapacities'),
        availableMemory?: int32(name='AvailableMemory'),
        totalMemory?: int32(name='TotalMemory'),
        totalVcpus?: int32(name='TotalVcpus'),
        availableInstanceTypes?: {
          availableInstanceType?: [ 
          {
            availableInstanceCapacity?: int32(name='AvailableInstanceCapacity'),
            instanceType?: string(name='InstanceType'),
          }
        ](name='AvailableInstanceType')
        }(name='AvailableInstanceTypes'),
        availableVcpus?: int32(name='AvailableVcpus'),
      }(name='DedicatedHostClusterCapacity'),
      dedicatedHostIds?: {
        dedicatedHostId?: [ string ](name='DedicatedHostId')
      }(name='DedicatedHostIds'),
      regionId?: string(name='RegionId'),
      dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
    }
  ](name='DedicatedHostCluster')
  }(name='DedicatedHostClusters'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDedicatedHostClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostClustersResponseBody(name='body'),
}

async function describeDedicatedHostClustersWithOptions(request: DescribeDedicatedHostClustersRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostClusters', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostClusters(request: DescribeDedicatedHostClustersRequest): DescribeDedicatedHostClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostClustersWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  status?: string(name='Status'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  lockReason?: string(name='LockReason'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeDedicatedHostsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  dedicatedHosts?: {
    dedicatedHost?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      capacity?: {
        availableMemory?: float(name='AvailableMemory'),
        localStorageCategory?: string(name='LocalStorageCategory'),
        totalMemory?: float(name='TotalMemory'),
        totalLocalStorage?: int32(name='TotalLocalStorage'),
        totalVcpus?: int32(name='TotalVcpus'),
        totalVgpus?: int32(name='TotalVgpus'),
        availableLocalStorage?: int32(name='AvailableLocalStorage'),
        availableVcpus?: int32(name='AvailableVcpus'),
        availableVgpus?: int32(name='AvailableVgpus'),
      }(name='Capacity'),
      autoPlacement?: string(name='AutoPlacement'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      chargeType?: string(name='ChargeType'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      actionOnMaintenance?: string(name='ActionOnMaintenance'),
      physicalGpus?: int32(name='PhysicalGpus'),
      saleCycle?: string(name='SaleCycle'),
      description?: string(name='Description'),
      dedicatedHostType?: string(name='DedicatedHostType'),
      hostDetailInfo?: {
        serialNumber?: string(name='SerialNumber'),
      }(name='HostDetailInfo'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      sockets?: int32(name='Sockets'),
      cores?: int32(name='Cores'),
      GPUSpec?: string(name='GPUSpec'),
      autoReleaseTime?: string(name='AutoReleaseTime'),
      cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList'),
      supportedCustomInstanceTypeFamilies?: {
        supportedCustomInstanceTypeFamily?: [ string ](name='SupportedCustomInstanceTypeFamily')
      }(name='SupportedCustomInstanceTypeFamilies'),
      instances?: {
        instance?: [ 
        {
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='Instance')
      }(name='Instances'),
      regionId?: string(name='RegionId'),
      dedicatedHostName?: string(name='DedicatedHostName'),
      networkAttributes?: {
        udpTimeout?: int32(name='UdpTimeout'),
        slbUdpTimeout?: int32(name='SlbUdpTimeout'),
      }(name='NetworkAttributes'),
      expiredTime?: string(name='ExpiredTime'),
      dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies'),
      machineId?: string(name='MachineId'),
    }
  ](name='DedicatedHost')
  }(name='DedicatedHosts'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHosts', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDedicatedHostTypesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  supportedInstanceTypeFamily?: string(name='SupportedInstanceTypeFamily'),
}

model DescribeDedicatedHostTypesResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostTypes?: {
    dedicatedHostType?: [ 
    {
      cores?: int32(name='Cores'),
      GPUSpec?: string(name='GPUSpec'),
      localStorageCategory?: string(name='LocalStorageCategory'),
      totalVcpus?: int32(name='TotalVcpus'),
      cpuOverCommitRatioRange?: string(name='CpuOverCommitRatioRange'),
      supportedInstanceTypesList?: {
        supportedInstanceTypesList?: [ string ](name='SupportedInstanceTypesList')
      }(name='SupportedInstanceTypesList'),
      physicalGpus?: int32(name='PhysicalGpus'),
      memorySize?: float(name='MemorySize'),
      supportCpuOverCommitRatio?: boolean(name='SupportCpuOverCommitRatio'),
      localStorageCapacity?: long(name='LocalStorageCapacity'),
      localStorageAmount?: int32(name='LocalStorageAmount'),
      dedicatedHostType?: string(name='DedicatedHostType'),
      totalVgpus?: int32(name='TotalVgpus'),
      sockets?: int32(name='Sockets'),
      supportedInstanceTypeFamilies?: {
        supportedInstanceTypeFamily?: [ string ](name='SupportedInstanceTypeFamily')
      }(name='SupportedInstanceTypeFamilies'),
    }
  ](name='DedicatedHostType')
  }(name='DedicatedHostTypes'),
}

model DescribeDedicatedHostTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostTypesResponseBody(name='body'),
}

async function describeDedicatedHostTypesWithOptions(request: DescribeDedicatedHostTypesRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostTypes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostTypes(request: DescribeDedicatedHostTypesRequest): DescribeDedicatedHostTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostTypesWithOptions(request, runtime);
}

model DescribeDemandsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  dryRun?: boolean(name='DryRun'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
  demandId?: string(name='DemandId'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  instanceType?: string(name='InstanceType'),
  instanceChargeType?: string(name='InstanceChargeType'),
  demandType?: string(name='DemandType'),
  demandStatus?: [ string ](name='DemandStatus'),
}

model DescribeDemandsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  demands?: {
    demand?: [ 
    {
      comment?: string(name='Comment'),
      demandId?: string(name='DemandId'),
      demandDescription?: string(name='DemandDescription'),
      demandTime?: string(name='DemandTime'),
      supplyInfos?: {
        supplyInfo?: [ 
        {
          amount?: int32(name='Amount'),
          supplyEndTime?: string(name='SupplyEndTime'),
          supplyStatus?: string(name='SupplyStatus'),
          supplyStartTime?: string(name='SupplyStartTime'),
        }
      ](name='SupplyInfo')
      }(name='SupplyInfos'),
      demandName?: string(name='DemandName'),
      instanceType?: string(name='InstanceType'),
      instanceChargeType?: string(name='InstanceChargeType'),
      period?: int32(name='Period'),
      endTime?: string(name='EndTime'),
      availableAmount?: int32(name='AvailableAmount'),
      startTime?: string(name='StartTime'),
      periodUnit?: string(name='PeriodUnit'),
      zoneId?: string(name='ZoneId'),
      usedAmount?: int32(name='UsedAmount'),
      totalAmount?: int32(name='TotalAmount'),
      deliveringAmount?: int32(name='DeliveringAmount'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      demandStatus?: string(name='DemandStatus'),
    }
  ](name='Demand')
  }(name='Demands'),
  regionId?: string(name='RegionId'),
}

model DescribeDemandsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDemandsResponseBody(name='body'),
}

async function describeDemandsWithOptions(request: DescribeDemandsRequest, runtime: Util.RuntimeOptions): DescribeDemandsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDemands', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDemands(request: DescribeDemandsRequest): DescribeDemandsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDemandsWithOptions(request, runtime);
}

model DescribeDeploymentSetsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  deploymentSetIds?: string(name='DeploymentSetIds'),
  networkType?: string(name='NetworkType'),
  strategy?: string(name='Strategy'),
  deploymentSetName?: string(name='DeploymentSetName'),
  granularity?: string(name='Granularity'),
  domain?: string(name='Domain'),
}

model DescribeDeploymentSetsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  deploymentSets?: {
    deploymentSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      strategy?: string(name='Strategy'),
      deploymentSetId?: string(name='DeploymentSetId'),
      deploymentStrategy?: string(name='DeploymentStrategy'),
      deploymentSetDescription?: string(name='DeploymentSetDescription'),
      domain?: string(name='Domain'),
      groupCount?: int32(name='GroupCount'),
      granularity?: string(name='Granularity'),
      instanceIds?: {
        instanceId?: [ string ](name='InstanceId')
      }(name='InstanceIds'),
      deploymentSetName?: string(name='DeploymentSetName'),
      instanceAmount?: int32(name='InstanceAmount'),
    }
  ](name='DeploymentSet')
  }(name='DeploymentSets'),
  regionId?: string(name='RegionId'),
}

model DescribeDeploymentSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeploymentSetsResponseBody(name='body'),
}

async function describeDeploymentSetsWithOptions(request: DescribeDeploymentSetsRequest, runtime: Util.RuntimeOptions): DescribeDeploymentSetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeploymentSets', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeploymentSets(request: DescribeDeploymentSetsRequest): DescribeDeploymentSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeploymentSetsWithOptions(request, runtime);
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody = {
  requestId?: string(name='RequestId'),
  instanceTypeFamilies?: string(name='InstanceTypeFamilies'),
}

model DescribeDeploymentSetSupportedInstanceTypeFamilyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeploymentSetSupportedInstanceTypeFamilyResponseBody(name='body'),
}

async function describeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request: DescribeDeploymentSetSupportedInstanceTypeFamilyRequest, runtime: Util.RuntimeOptions): DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeploymentSetSupportedInstanceTypeFamily', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeploymentSetSupportedInstanceTypeFamily(request: DescribeDeploymentSetSupportedInstanceTypeFamilyRequest): DescribeDeploymentSetSupportedInstanceTypeFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeploymentSetSupportedInstanceTypeFamilyWithOptions(request, runtime);
}

model DescribeDiskMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  diskId?: string(name='DiskId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
}

model DescribeDiskMonitorDataResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  monitorData?: {
    diskMonitorData?: [ 
    {
      BPSRead?: int32(name='BPSRead'),
      IOPSRead?: int32(name='IOPSRead'),
      latencyRead?: int32(name='LatencyRead'),
      BPSTotal?: int32(name='BPSTotal'),
      IOPSTotal?: int32(name='IOPSTotal'),
      timeStamp?: string(name='TimeStamp'),
      latencyWrite?: int32(name='LatencyWrite'),
      IOPSWrite?: int32(name='IOPSWrite'),
      diskId?: string(name='DiskId'),
      BPSWrite?: int32(name='BPSWrite'),
    }
  ](name='DiskMonitorData')
  }(name='MonitorData'),
}

model DescribeDiskMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskMonitorDataResponseBody(name='body'),
}

async function describeDiskMonitorDataWithOptions(request: DescribeDiskMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeDiskMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDiskMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDiskMonitorData(request: DescribeDiskMonitorDataRequest): DescribeDiskMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskMonitorDataWithOptions(request, runtime);
}

model DescribeDisksRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  diskIds?: string(name='DiskIds'),
  instanceId?: string(name='InstanceId'),
  diskType?: string(name='DiskType'),
  category?: string(name='Category'),
  status?: string(name='Status'),
  snapshotId?: string(name='SnapshotId'),
  portable?: boolean(name='Portable'),
  deleteWithInstance?: boolean(name='DeleteWithInstance'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  ownerAccount?: string(name='OwnerAccount'),
  diskName?: string(name='DiskName'),
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
  enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy'),
  diskChargeType?: string(name='DiskChargeType'),
  lockReason?: string(name='LockReason'),
  resourceGroupId?: string(name='ResourceGroupId'),
  enableShared?: boolean(name='EnableShared'),
  encrypted?: boolean(name='Encrypted'),
  dryRun?: boolean(name='DryRun'),
  KMSKeyId?: string(name='KMSKeyId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  additionalAttributes?: [ string ](name='AdditionalAttributes'),
}

model DescribeDisksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  disks?: {
    disk?: [ 
    {
      serialNumber?: string(name='SerialNumber'),
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      performanceLevel?: string(name='PerformanceLevel'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      bdfId?: string(name='BdfId'),
      enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
      storageSetId?: string(name='StorageSetId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
      diskId?: string(name='DiskId'),
      mountInstances?: {
        mountInstance?: [ 
        {
          device?: string(name='Device'),
          attachedTime?: string(name='AttachedTime'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='MountInstance')
      }(name='MountInstances'),
      deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
      encrypted?: boolean(name='Encrypted'),
      IOPSRead?: int32(name='IOPSRead'),
      mountInstanceNum?: int32(name='MountInstanceNum'),
      description?: string(name='Description'),
      device?: string(name='Device'),
      diskName?: string(name='DiskName'),
      portable?: boolean(name='Portable'),
      imageId?: string(name='ImageId'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      KMSKeyId?: string(name='KMSKeyId'),
      detachedTime?: string(name='DetachedTime'),
      sourceSnapshotId?: string(name='SourceSnapshotId'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      enableAutomatedSnapshotPolicy?: boolean(name='EnableAutomatedSnapshotPolicy'),
      IOPSWrite?: int32(name='IOPSWrite'),
      instanceId?: string(name='InstanceId'),
      IOPS?: int32(name='IOPS'),
      regionId?: string(name='RegionId'),
      expiredTime?: string(name='ExpiredTime'),
      size?: int32(name='Size'),
      resourceGroupId?: string(name='ResourceGroupId'),
      diskChargeType?: string(name='DiskChargeType'),
      zoneId?: string(name='ZoneId'),
      attachedTime?: string(name='AttachedTime'),
      category?: string(name='Category'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Disk')
  }(name='Disks'),
}

model DescribeDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksResponseBody(name='body'),
}

async function describeDisksWithOptions(request: DescribeDisksRequest, runtime: Util.RuntimeOptions): DescribeDisksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDisks', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDisks(request: DescribeDisksRequest): DescribeDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksWithOptions(request, runtime);
}

model DescribeDisksFullStatusRequest {
  eventTime?: {
    start?: string(name='Start'),
    end?: string(name='End'),
  }(name='EventTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  healthStatus?: string(name='HealthStatus'),
  eventType?: string(name='EventType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  diskId?: [ string ](name='DiskId'),
  eventId?: [ string ](name='EventId'),
}

model DescribeDisksFullStatusResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  diskFullStatusSet?: {
    diskFullStatusType?: [ 
    {
      status?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='Status'),
      diskEventSet?: {
        diskEventType?: [ 
        {
          eventId?: string(name='EventId'),
          eventEndTime?: string(name='EventEndTime'),
          eventTime?: string(name='EventTime'),
          impactLevel?: string(name='ImpactLevel'),
          eventType?: {
            code?: int32(name='Code'),
            name?: string(name='Name'),
          }(name='EventType'),
        }
      ](name='DiskEventType')
      }(name='DiskEventSet'),
      device?: string(name='Device'),
      diskId?: string(name='DiskId'),
      instanceId?: string(name='InstanceId'),
      healthStatus?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='HealthStatus'),
    }
  ](name='DiskFullStatusType')
  }(name='DiskFullStatusSet'),
}

model DescribeDisksFullStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDisksFullStatusResponseBody(name='body'),
}

async function describeDisksFullStatusWithOptions(request: DescribeDisksFullStatusRequest, runtime: Util.RuntimeOptions): DescribeDisksFullStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDisksFullStatus', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDisksFullStatus(request: DescribeDisksFullStatusRequest): DescribeDisksFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDisksFullStatusWithOptions(request, runtime);
}

model DescribeEipAddressesRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  eipAddress?: string(name='EipAddress'),
  allocationId?: string(name='AllocationId'),
  ISP?: string(name='ISP'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  lockReason?: string(name='LockReason'),
  associatedInstanceType?: string(name='AssociatedInstanceType'),
  associatedInstanceId?: string(name='AssociatedInstanceId'),
  chargeType?: string(name='ChargeType'),
}

model DescribeEipAddressesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  eipAddresses?: {
    eipAddress?: [ 
    {
      status?: string(name='Status'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      allocationTime?: string(name='AllocationTime'),
      chargeType?: string(name='ChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      ipAddress?: string(name='IpAddress'),
      bandwidth?: string(name='Bandwidth'),
      expiredTime?: string(name='ExpiredTime'),
      allocationId?: string(name='AllocationId'),
      internetChargeType?: string(name='InternetChargeType'),
      eipBandwidth?: string(name='EipBandwidth'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

async function describeEipAddressesWithOptions(request: DescribeEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEipAddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEipAddresses', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipAddressesWithOptions(request, runtime);
}

model DescribeEipMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeEipMonitorDataResponseBody = {
  requestId?: string(name='RequestId'),
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipTX?: int32(name='EipTX'),
      eipPackets?: int32(name='EipPackets'),
      eipBandwidth?: int32(name='EipBandwidth'),
      timeStamp?: string(name='TimeStamp'),
      eipFlow?: int32(name='EipFlow'),
      eipRX?: int32(name='EipRX'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
}

model DescribeEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipMonitorDataResponseBody(name='body'),
}

async function describeEipMonitorDataWithOptions(request: DescribeEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEipMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEipMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEipMonitorData(request: DescribeEipMonitorDataRequest): DescribeEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipMonitorDataWithOptions(request, runtime);
}

model DescribeElasticityAssuranceInstancesRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
}

model DescribeElasticityAssuranceInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
  elasticityAssuranceItem?: {
    instanceIdSet?: [ 
    {
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceIdSet')
  }(name='ElasticityAssuranceItem'),
}

model DescribeElasticityAssuranceInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticityAssuranceInstancesResponseBody(name='body'),
}

async function describeElasticityAssuranceInstancesWithOptions(request: DescribeElasticityAssuranceInstancesRequest, runtime: Util.RuntimeOptions): DescribeElasticityAssuranceInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeElasticityAssuranceInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeElasticityAssuranceInstances(request: DescribeElasticityAssuranceInstancesRequest): DescribeElasticityAssuranceInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticityAssuranceInstancesWithOptions(request, runtime);
}

model DescribeElasticityAssurancesRequest {
  privatePoolOptions?: {
    ids?: string(name='Ids'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  platform?: string(name='Platform'),
  instanceType?: string(name='InstanceType'),
  zoneId?: string(name='ZoneId'),
  instanceChargeType?: string(name='InstanceChargeType'),
  status?: string(name='Status'),
}

model DescribeElasticityAssurancesResponseBody = {
  elasticityAssuranceSet?: {
    elasticityAssuranceItem?: [ 
    {
      status?: string(name='Status'),
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
      usedAssuranceTimes?: int32(name='UsedAssuranceTimes'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      latestStartTime?: string(name='LatestStartTime'),
      allocatedResources?: {
        allocatedResource?: [ 
        {
          zoneId?: string(name='zoneId'),
          usedAmount?: int32(name='UsedAmount'),
          totalAmount?: int32(name='TotalAmount'),
          instanceType?: string(name='InstanceType'),
        }
      ](name='AllocatedResource')
      }(name='AllocatedResources'),
      privatePoolOptionsName?: string(name='PrivatePoolOptionsName'),
      regionId?: string(name='RegionId'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      totalAssuranceTimes?: string(name='TotalAssuranceTimes'),
    }
  ](name='ElasticityAssuranceItem')
  }(name='ElasticityAssuranceSet'),
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
}

model DescribeElasticityAssurancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticityAssurancesResponseBody(name='body'),
}

async function describeElasticityAssurancesWithOptions(request: DescribeElasticityAssurancesRequest, runtime: Util.RuntimeOptions): DescribeElasticityAssurancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeElasticityAssurances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeElasticityAssurances(request: DescribeElasticityAssurancesRequest): DescribeElasticityAssurancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticityAssurancesWithOptions(request, runtime);
}

model DescribeEniMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  eniId?: string(name='EniId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
}

model DescribeEniMonitorDataResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  monitorData?: {
    eniMonitorData?: [ 
    {
      packetRx?: string(name='PacketRx'),
      timeStamp?: string(name='TimeStamp'),
      dropPacketRx?: string(name='DropPacketRx'),
      eniId?: string(name='EniId'),
      dropPacketTx?: string(name='DropPacketTx'),
      packetTx?: string(name='PacketTx'),
      intranetTx?: string(name='IntranetTx'),
      intranetRx?: string(name='IntranetRx'),
    }
  ](name='EniMonitorData')
  }(name='MonitorData'),
}

model DescribeEniMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEniMonitorDataResponseBody(name='body'),
}

async function describeEniMonitorDataWithOptions(request: DescribeEniMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeEniMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEniMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEniMonitorData(request: DescribeEniMonitorDataRequest): DescribeEniMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEniMonitorDataWithOptions(request, runtime);
}

model DescribeForwardTableEntriesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  forwardTableId?: string(name='ForwardTableId'),
  forwardEntryId?: string(name='ForwardEntryId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeForwardTableEntriesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  forwardTableEntries?: {
    forwardTableEntry?: [ 
    {
      status?: string(name='Status'),
      forwardEntryId?: string(name='ForwardEntryId'),
      internalIp?: string(name='InternalIp'),
      internalPort?: string(name='InternalPort'),
      forwardTableId?: string(name='ForwardTableId'),
      externalPort?: string(name='ExternalPort'),
      ipProtocol?: string(name='IpProtocol'),
      externalIp?: string(name='ExternalIp'),
    }
  ](name='ForwardTableEntry')
  }(name='ForwardTableEntries'),
}

model DescribeForwardTableEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeForwardTableEntriesResponseBody(name='body'),
}

async function describeForwardTableEntriesWithOptions(request: DescribeForwardTableEntriesRequest, runtime: Util.RuntimeOptions): DescribeForwardTableEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeForwardTableEntries', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeForwardTableEntries(request: DescribeForwardTableEntriesRequest): DescribeForwardTableEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeForwardTableEntriesWithOptions(request, runtime);
}

model DescribeHaVipsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeHaVipsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  haVips?: {
    haVip?: [ 
    {
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vSwitchId?: string(name='VSwitchId'),
      ipAddress?: string(name='IpAddress'),
      description?: string(name='Description'),
      haVipId?: string(name='HaVipId'),
      createTime?: string(name='CreateTime'),
      associatedInstances?: {
        associatedInstance?: [ string ](name='associatedInstance')
      }(name='AssociatedInstances'),
      masterInstanceId?: string(name='MasterInstanceId'),
      associatedEipAddresses?: {
        associatedEipAddresse?: [ string ](name='associatedEipAddresse')
      }(name='AssociatedEipAddresses'),
      regionId?: string(name='RegionId'),
    }
  ](name='HaVip')
  }(name='HaVips'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeHaVipsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHaVipsResponseBody(name='body'),
}

async function describeHaVipsWithOptions(request: DescribeHaVipsRequest, runtime: Util.RuntimeOptions): DescribeHaVipsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHaVips', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHaVips(request: DescribeHaVipsRequest): DescribeHaVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHaVipsWithOptions(request, runtime);
}

model DescribeHpcClustersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  hpcClusterIds?: string(name='HpcClusterIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeHpcClustersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  hpcClusters?: {
    hpcCluster?: [ 
    {
      description?: string(name='Description'),
      hpcClusterId?: string(name='HpcClusterId'),
      name?: string(name='Name'),
    }
  ](name='HpcCluster')
  }(name='HpcClusters'),
}

model DescribeHpcClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHpcClustersResponseBody(name='body'),
}

async function describeHpcClustersWithOptions(request: DescribeHpcClustersRequest, runtime: Util.RuntimeOptions): DescribeHpcClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHpcClusters', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHpcClusters(request: DescribeHpcClustersRequest): DescribeHpcClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHpcClustersWithOptions(request, runtime);
}

model DescribeImageComponentsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  name?: string(name='Name'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  imageComponentId?: [ string ](name='ImageComponentId'),
}

model DescribeImageComponentsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  imageComponent?: {
    imageComponentSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      systemType?: string(name='SystemType'),
      imageComponentId?: string(name='ImageComponentId'),
      componentType?: string(name='ComponentType'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      name?: string(name='Name'),
      content?: string(name='Content'),
    }
  ](name='ImageComponentSet')
  }(name='ImageComponent'),
  maxResults?: int32(name='MaxResults'),
}

model DescribeImageComponentsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageComponentsResponseBody(name='body'),
}

async function describeImageComponentsWithOptions(request: DescribeImageComponentsRequest, runtime: Util.RuntimeOptions): DescribeImageComponentsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageComponents', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageComponents(request: DescribeImageComponentsRequest): DescribeImageComponentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageComponentsWithOptions(request, runtime);
}

model DescribeImageFromFamilyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  imageFamily?: string(name='ImageFamily'),
}

model DescribeImageFromFamilyResponseBody = {
  requestId?: string(name='RequestId'),
  image?: {
    imageFamily?: string(name='ImageFamily'),
    status?: string(name='Status'),
    creationTime?: string(name='CreationTime'),
    progress?: string(name='Progress'),
    isCopied?: boolean(name='IsCopied'),
    imageOwnerAlias?: string(name='ImageOwnerAlias'),
    isSupportIoOptimized?: boolean(name='IsSupportIoOptimized'),
    tags?: {
      tag?: [ 
      {
        tagValue?: string(name='TagValue'),
        tagKey?: string(name='TagKey'),
      }
    ](name='Tag')
    }(name='Tags'),
    isSupportCloudinit?: boolean(name='IsSupportCloudinit'),
    imageVersion?: string(name='ImageVersion'),
    diskDeviceMappings?: {
      diskDeviceMapping?: [ 
      {
        type?: string(name='Type'),
        importOSSBucket?: string(name='ImportOSSBucket'),
        snapshotId?: string(name='SnapshotId'),
        importOSSObject?: string(name='ImportOSSObject'),
        size?: string(name='Size'),
        device?: string(name='Device'),
        format?: string(name='Format'),
      }
    ](name='DiskDeviceMapping')
    }(name='DiskDeviceMappings'),
    usage?: string(name='Usage'),
    isSelfShared?: string(name='IsSelfShared'),
    description?: string(name='Description'),
    size?: int32(name='Size'),
    platform?: string(name='Platform'),
    imageName?: string(name='ImageName'),
    OSName?: string(name='OSName'),
    imageId?: string(name='ImageId'),
    OSType?: string(name='OSType'),
    isSubscribed?: boolean(name='IsSubscribed'),
    productCode?: string(name='ProductCode'),
    architecture?: string(name='Architecture'),
  }(name='Image'),
}

model DescribeImageFromFamilyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageFromFamilyResponseBody(name='body'),
}

async function describeImageFromFamilyWithOptions(request: DescribeImageFromFamilyRequest, runtime: Util.RuntimeOptions): DescribeImageFromFamilyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageFromFamily', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageFromFamily(request: DescribeImageFromFamilyRequest): DescribeImageFromFamilyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageFromFamilyWithOptions(request, runtime);
}

model DescribeImagePipelineExecutionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  imagePipelineId?: string(name='ImagePipelineId'),
  executionId?: string(name='ExecutionId'),
  status?: string(name='Status'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model DescribeImagePipelineExecutionsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
  imagePipelineExecution?: {
    imagePipelineExecutionSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      imagePipelineId?: string(name='ImagePipelineId'),
      status?: string(name='Status'),
      modifiedTime?: string(name='ModifiedTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      message?: string(name='Message'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      imageId?: string(name='ImageId'),
      executionId?: string(name='ExecutionId'),
    }
  ](name='ImagePipelineExecutionSet')
  }(name='ImagePipelineExecution'),
}

model DescribeImagePipelineExecutionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagePipelineExecutionsResponseBody(name='body'),
}

async function describeImagePipelineExecutionsWithOptions(request: DescribeImagePipelineExecutionsRequest, runtime: Util.RuntimeOptions): DescribeImagePipelineExecutionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImagePipelineExecutions', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImagePipelineExecutions(request: DescribeImagePipelineExecutionsRequest): DescribeImagePipelineExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePipelineExecutionsWithOptions(request, runtime);
}

model DescribeImagePipelinesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  name?: string(name='Name'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  imagePipelineId?: [ string ](name='ImagePipelineId'),
}

model DescribeImagePipelinesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  maxResults?: int32(name='MaxResults'),
  imagePipeline?: {
    imagePipelineSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      deleteInstanceOnFailure?: boolean(name='DeleteInstanceOnFailure'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      instanceType?: string(name='InstanceType'),
      imagePipelineId?: string(name='ImagePipelineId'),
      systemDiskSize?: int32(name='SystemDiskSize'),
      vSwitchId?: string(name='VSwitchId'),
      description?: string(name='Description'),
      baseImage?: string(name='BaseImage'),
      toRegionIds?: {
        toRegionId?: [ string ](name='ToRegionId')
      }(name='ToRegionIds'),
      resourceGroupId?: string(name='ResourceGroupId'),
      imageName?: string(name='ImageName'),
      baseImageType?: string(name='BaseImageType'),
      addAccounts?: {
        addAccount?: [ string ](name='AddAccount')
      }(name='AddAccounts'),
      name?: string(name='Name'),
      buildContent?: string(name='BuildContent'),
    }
  ](name='ImagePipelineSet')
  }(name='ImagePipeline'),
}

model DescribeImagePipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagePipelinesResponseBody(name='body'),
}

async function describeImagePipelinesWithOptions(request: DescribeImagePipelinesRequest, runtime: Util.RuntimeOptions): DescribeImagePipelinesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImagePipelines', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImagePipelines(request: DescribeImagePipelinesRequest): DescribeImagePipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagePipelinesWithOptions(request, runtime);
}

model DescribeImagesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  imageId?: string(name='ImageId'),
  showExpired?: boolean(name='ShowExpired'),
  snapshotId?: string(name='SnapshotId'),
  imageName?: string(name='ImageName'),
  imageFamily?: string(name='ImageFamily'),
  imageOwnerAlias?: string(name='ImageOwnerAlias'),
  instanceType?: string(name='InstanceType'),
  isSupportIoOptimized?: boolean(name='IsSupportIoOptimized'),
  isSupportCloudinit?: boolean(name='IsSupportCloudinit'),
  OSType?: string(name='OSType'),
  architecture?: string(name='Architecture'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  usage?: string(name='Usage'),
  dryRun?: boolean(name='DryRun'),
  actionType?: string(name='ActionType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
}

model DescribeImagesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  images?: {
    image?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      isSupportIoOptimized?: boolean(name='IsSupportIoOptimized'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      imageVersion?: string(name='ImageVersion'),
      isSelfShared?: string(name='IsSelfShared'),
      description?: string(name='Description'),
      OSNameEn?: string(name='OSNameEn'),
      platform?: string(name='Platform'),
      OSName?: string(name='OSName'),
      imageId?: string(name='ImageId'),
      isSubscribed?: boolean(name='IsSubscribed'),
      imageFamily?: string(name='ImageFamily'),
      progress?: string(name='Progress'),
      isCopied?: boolean(name='IsCopied'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      isSupportCloudinit?: boolean(name='IsSupportCloudinit'),
      diskDeviceMappings?: {
        diskDeviceMapping?: [ 
        {
          type?: string(name='Type'),
          importOSSBucket?: string(name='ImportOSSBucket'),
          progress?: string(name='Progress'),
          snapshotId?: string(name='SnapshotId'),
          importOSSObject?: string(name='ImportOSSObject'),
          device?: string(name='Device'),
          size?: string(name='Size'),
          remainTime?: int32(name='RemainTime'),
          format?: string(name='Format'),
        }
      ](name='DiskDeviceMapping')
      }(name='DiskDeviceMappings'),
      usage?: string(name='Usage'),
      size?: int32(name='Size'),
      resourceGroupId?: string(name='ResourceGroupId'),
      imageName?: string(name='ImageName'),
      OSType?: string(name='OSType'),
      architecture?: string(name='Architecture'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Image')
  }(name='Images'),
  regionId?: string(name='RegionId'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImages', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeImageSharePermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeImageSharePermissionResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
  shareGroups?: {
    shareGroup?: [ 
    {
      group?: string(name='Group'),
    }
  ](name='ShareGroup')
  }(name='ShareGroups'),
  accounts?: {
    account?: [ 
    {
      aliyunId?: string(name='AliyunId'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model DescribeImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageSharePermissionResponseBody(name='body'),
}

async function describeImageSharePermissionWithOptions(request: DescribeImageSharePermissionRequest, runtime: Util.RuntimeOptions): DescribeImageSharePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageSharePermission', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageSharePermission(request: DescribeImageSharePermissionRequest): DescribeImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSharePermissionWithOptions(request, runtime);
}

model DescribeImageSupportInstanceTypesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  actionType?: string(name='ActionType'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
}

model DescribeImageSupportInstanceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
  instanceTypes?: {
    instanceType?: [ 
    {
      instanceTypeId?: string(name='InstanceTypeId'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      cpuCoreCount?: int32(name='CpuCoreCount'),
      memorySize?: float(name='MemorySize'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
}

model DescribeImageSupportInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageSupportInstanceTypesResponseBody(name='body'),
}

async function describeImageSupportInstanceTypesWithOptions(request: DescribeImageSupportInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeImageSupportInstanceTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageSupportInstanceTypes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageSupportInstanceTypes(request: DescribeImageSupportInstanceTypesRequest): DescribeImageSupportInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageSupportInstanceTypesWithOptions(request, runtime);
}

model DescribeInstanceAttachmentAttributesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeInstanceAttachmentAttributesResponseBody = {
  instances?: {
    instance?: [ 
    {
      privatePoolOptionsMatchCriteria?: string(name='PrivatePoolOptionsMatchCriteria'),
      privatePoolOptionsId?: string(name='PrivatePoolOptionsId'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Instance')
  }(name='Instances'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttachmentAttributesResponseBody(name='body'),
}

async function describeInstanceAttachmentAttributesWithOptions(request: DescribeInstanceAttachmentAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttachmentAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttachmentAttributes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttachmentAttributes(request: DescribeInstanceAttachmentAttributesRequest): DescribeInstanceAttachmentAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttachmentAttributesWithOptions(request, runtime);
}

model DescribeInstanceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceAttributeResponseBody = {
  description?: string(name='Description'),
  memory?: int32(name='Memory'),
  instanceChargeType?: string(name='InstanceChargeType'),
  cpu?: int32(name='Cpu'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  publicIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='PublicIpAddress'),
  innerIpAddress?: {
    ipAddress?: [ string ](name='IpAddress')
  }(name='InnerIpAddress'),
  expiredTime?: string(name='ExpiredTime'),
  imageId?: string(name='ImageId'),
  eipAddress?: {
    ipAddress?: string(name='IpAddress'),
    bandwidth?: int32(name='Bandwidth'),
    allocationId?: string(name='AllocationId'),
    internetChargeType?: string(name='InternetChargeType'),
  }(name='EipAddress'),
  instanceType?: string(name='InstanceType'),
  vlanId?: string(name='VlanId'),
  hostName?: string(name='HostName'),
  status?: string(name='Status'),
  ioOptimized?: string(name='IoOptimized'),
  requestId?: string(name='RequestId'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
  instanceId?: string(name='InstanceId'),
  stoppedMode?: string(name='StoppedMode'),
  dedicatedHostAttribute?: {
    dedicatedHostName?: string(name='DedicatedHostName'),
    dedicatedHostId?: string(name='DedicatedHostId'),
  }(name='DedicatedHostAttribute'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
  vpcAttributes?: {
    vpcId?: string(name='VpcId'),
    natIpAddress?: string(name='NatIpAddress'),
    vSwitchId?: string(name='VSwitchId'),
    privateIpAddress?: {
      ipAddress?: [ string ](name='IpAddress')
    }(name='PrivateIpAddress'),
  }(name='VpcAttributes'),
  operationLocks?: {
    lockReason?: [ 
    {
      lockReason?: string(name='LockReason'),
    }
  ](name='LockReason')
  }(name='OperationLocks'),
  internetChargeType?: string(name='InternetChargeType'),
  instanceName?: string(name='InstanceName'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  serialNumber?: string(name='SerialNumber'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  creationTime?: string(name='CreationTime'),
  regionId?: string(name='RegionId'),
  creditSpecification?: string(name='CreditSpecification'),
}

model DescribeInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAttributeResponseBody(name='body'),
}

async function describeInstanceAttributeWithOptions(request: DescribeInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAttribute(request: DescribeInstanceAttributeRequest): DescribeInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAttributeWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  renewalStatus?: string(name='RenewalStatus'),
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  totalCount?: int32(name='TotalCount'),
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      periodUnit?: string(name='PeriodUnit'),
      duration?: int32(name='Duration'),
      renewalStatus?: string(name='RenewalStatus'),
      instanceId?: string(name='InstanceId'),
      autoRenewEnabled?: boolean(name='AutoRenewEnabled'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewAttributeWithOptions(request: DescribeInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAutoRenewAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeInstanceHistoryEventsRequest {
  notBefore?: {
    start?: string(name='Start'),
    end?: string(name='End'),
  }(name='NotBefore'),
  eventPublishTime?: {
    start?: string(name='Start'),
    end?: string(name='End'),
  }(name='EventPublishTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  eventCycleStatus?: string(name='EventCycleStatus'),
  eventType?: string(name='EventType'),
  impactLevel?: string(name='ImpactLevel'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  eventId?: [ string ](name='EventId'),
  instanceEventCycleStatus?: [ string ](name='InstanceEventCycleStatus'),
  instanceEventType?: [ string ](name='InstanceEventType'),
}

model DescribeInstanceHistoryEventsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  instanceSystemEventSet?: {
    instanceSystemEventType?: [ 
    {
      eventId?: string(name='EventId'),
      eventPublishTime?: string(name='EventPublishTime'),
      eventFinishTime?: string(name='EventFinishTime'),
      impactLevel?: string(name='ImpactLevel'),
      eventType?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='EventType'),
      extendedAttribute?: {
        device?: string(name='Device'),
        diskId?: string(name='DiskId'),
        inactiveDisks?: {
          inactiveDisk?: [ 
          {
            creationTime?: string(name='CreationTime'),
            deviceCategory?: string(name='DeviceCategory'),
            deviceType?: string(name='DeviceType'),
            releaseTime?: string(name='ReleaseTime'),
            deviceSize?: string(name='DeviceSize'),
          }
        ](name='InactiveDisk')
        }(name='InactiveDisks'),
      }(name='ExtendedAttribute'),
      notBefore?: string(name='NotBefore'),
      instanceId?: string(name='InstanceId'),
      reason?: string(name='Reason'),
      eventCycleStatus?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='EventCycleStatus'),
    }
  ](name='InstanceSystemEventType')
  }(name='InstanceSystemEventSet'),
}

model DescribeInstanceHistoryEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceHistoryEventsResponseBody(name='body'),
}

async function describeInstanceHistoryEventsWithOptions(request: DescribeInstanceHistoryEventsRequest, runtime: Util.RuntimeOptions): DescribeInstanceHistoryEventsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceHistoryEvents', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceHistoryEvents(request: DescribeInstanceHistoryEventsRequest): DescribeInstanceHistoryEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceHistoryEventsWithOptions(request, runtime);
}

model DescribeInstanceMaintenanceAttributesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  instanceId?: [ string ](name='InstanceId'),
}

model DescribeInstanceMaintenanceAttributesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  maintenanceAttributes?: {
    maintenanceAttribute?: [ 
    {
      notifyOnMaintenance?: boolean(name='NotifyOnMaintenance'),
      maintenanceWindows?: {
        maintenanceWindow?: [ 
        {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
        }
      ](name='MaintenanceWindow')
      }(name='MaintenanceWindows'),
      instanceId?: string(name='InstanceId'),
      actionOnMaintenance?: {
        value?: string(name='Value'),
        supportedValues?: {
          supportedValue?: [ string ](name='SupportedValue')
        }(name='SupportedValues'),
        defaultValue?: string(name='DefaultValue'),
      }(name='ActionOnMaintenance'),
    }
  ](name='MaintenanceAttribute')
  }(name='MaintenanceAttributes'),
}

model DescribeInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMaintenanceAttributesResponseBody(name='body'),
}

async function describeInstanceMaintenanceAttributesWithOptions(request: DescribeInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): DescribeInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMaintenanceAttributes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMaintenanceAttributes(request: DescribeInstanceMaintenanceAttributesRequest): DescribeInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model DescribeInstanceModificationPriceRequest {
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      category?: string(name='Category'),
    }
  ](name='DataDisk'),
}

model DescribeInstanceModificationPriceResponseBody = {
  requestId?: string(name='RequestId'),
  priceInfo?: {
    price?: {
      discountPrice?: float(name='DiscountPrice'),
      tradePrice?: float(name='TradePrice'),
      originalPrice?: float(name='OriginalPrice'),
      currency?: string(name='Currency'),
    }(name='Price'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
}

model DescribeInstanceModificationPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceModificationPriceResponseBody(name='body'),
}

async function describeInstanceModificationPriceWithOptions(request: DescribeInstanceModificationPriceRequest, runtime: Util.RuntimeOptions): DescribeInstanceModificationPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceModificationPrice', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceModificationPrice(request: DescribeInstanceModificationPriceRequest): DescribeInstanceModificationPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceModificationPriceWithOptions(request, runtime);
}

model DescribeInstanceMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
}

model DescribeInstanceMonitorDataResponseBody = {
  requestId?: string(name='RequestId'),
  monitorData?: {
    instanceMonitorData?: [ 
    {
      CPUCreditBalance?: float(name='CPUCreditBalance'),
      BPSRead?: int32(name='BPSRead'),
      internetTX?: int32(name='InternetTX'),
      CPU?: int32(name='CPU'),
      CPUCreditUsage?: float(name='CPUCreditUsage'),
      IOPSWrite?: int32(name='IOPSWrite'),
      instanceId?: string(name='InstanceId'),
      intranetTX?: int32(name='IntranetTX'),
      BPSWrite?: int32(name='BPSWrite'),
      CPUNotpaidSurplusCreditUsage?: float(name='CPUNotpaidSurplusCreditUsage'),
      IOPSRead?: int32(name='IOPSRead'),
      CPUAdvanceCreditBalance?: float(name='CPUAdvanceCreditBalance'),
      internetBandwidth?: int32(name='InternetBandwidth'),
      internetRX?: int32(name='InternetRX'),
      timeStamp?: string(name='TimeStamp'),
      intranetRX?: int32(name='IntranetRX'),
      intranetBandwidth?: int32(name='IntranetBandwidth'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData'),
}

model DescribeInstanceMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMonitorDataResponseBody(name='body'),
}

async function describeInstanceMonitorDataWithOptions(request: DescribeInstanceMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeInstanceMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMonitorDataWithOptions(request, runtime);
}

model DescribeInstanceRamRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
  ramRoleName?: string(name='RamRoleName'),
}

model DescribeInstanceRamRoleResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
  instanceRamRoleSets?: {
    instanceRamRoleSet?: [ 
    {
      ramRoleName?: string(name='RamRoleName'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceRamRoleSet')
  }(name='InstanceRamRoleSets'),
}

model DescribeInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceRamRoleResponseBody(name='body'),
}

async function describeInstanceRamRoleWithOptions(request: DescribeInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DescribeInstanceRamRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceRamRole', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceRamRole(request: DescribeInstanceRamRoleRequest): DescribeInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRamRoleWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceIds?: string(name='InstanceIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  innerIpAddresses?: string(name='InnerIpAddresses'),
  privateIpAddresses?: string(name='PrivateIpAddresses'),
  publicIpAddresses?: string(name='PublicIpAddresses'),
  eipAddresses?: string(name='EipAddresses'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  internetChargeType?: string(name='InternetChargeType'),
  instanceName?: string(name='InstanceName'),
  imageId?: string(name='ImageId'),
  status?: string(name='Status'),
  lockReason?: string(name='LockReason'),
  deviceAvailable?: boolean(name='DeviceAvailable'),
  ioOptimized?: boolean(name='IoOptimized'),
  needSaleCycle?: boolean(name='NeedSaleCycle'),
  instanceType?: string(name='InstanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  keyPairName?: string(name='KeyPairName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  hpcClusterId?: string(name='HpcClusterId'),
  rdmaIpAddresses?: string(name='RdmaIpAddresses'),
  dryRun?: boolean(name='DryRun'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpTokens?: string(name='HttpTokens'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  additionalAttributes?: [ string ](name='AdditionalAttributes'),
}

model DescribeInstancesResponseBody = {
  instances?: {
    instance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      serialNumber?: string(name='SerialNumber'),
      dedicatedHostAttribute?: {
        dedicatedHostName?: string(name='DedicatedHostName'),
        dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
        dedicatedHostId?: string(name='DedicatedHostId'),
      }(name='DedicatedHostAttribute'),
      operationLocks?: {
        lockReason?: [ 
        {
          lockReason?: string(name='LockReason'),
          lockMsg?: string(name='LockMsg'),
        }
      ](name='LockReason')
      }(name='OperationLocks'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      metadataOptions?: {
        httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
        httpEndpoint?: string(name='HttpEndpoint'),
        httpTokens?: string(name='HttpTokens'),
      }(name='MetadataOptions'),
      saleCycle?: string(name='SaleCycle'),
      publicIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='PublicIpAddress'),
      spotStrategy?: string(name='SpotStrategy'),
      deviceAvailable?: boolean(name='DeviceAvailable'),
      eipAddress?: {
        ipAddress?: string(name='IpAddress'),
        bandwidth?: int32(name='Bandwidth'),
        allocationId?: string(name='AllocationId'),
        isSupportUnassociate?: boolean(name='IsSupportUnassociate'),
        internetChargeType?: string(name='InternetChargeType'),
      }(name='EipAddress'),
      instanceName?: string(name='InstanceName'),
      instanceNetworkType?: string(name='InstanceNetworkType'),
      spotDuration?: int32(name='SpotDuration'),
      OSNameEn?: string(name='OSNameEn'),
      spotPriceLimit?: float(name='SpotPriceLimit'),
      OSName?: string(name='OSName'),
      imageId?: string(name='ImageId'),
      deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo'),
      clusterId?: string(name='ClusterId'),
      dedicatedInstanceAttribute?: {
        affinity?: string(name='Affinity'),
        tenancy?: string(name='Tenancy'),
      }(name='DedicatedInstanceAttribute'),
      GPUSpec?: string(name='GPUSpec'),
      autoReleaseTime?: string(name='AutoReleaseTime'),
      innerIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='InnerIpAddress'),
      stoppedMode?: string(name='StoppedMode'),
      GPUAmount?: int32(name='GPUAmount'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      instanceChargeType?: string(name='InstanceChargeType'),
      startTime?: string(name='StartTime'),
      internetChargeType?: string(name='InternetChargeType'),
      zoneId?: string(name='ZoneId'),
      recyclable?: boolean(name='Recyclable'),
      creditSpecification?: string(name='CreditSpecification'),
      OSType?: string(name='OSType'),
      status?: string(name='Status'),
      deploymentSetId?: string(name='DeploymentSetId'),
      keyPairName?: string(name='KeyPairName'),
      cpuOptions?: {
        numa?: string(name='Numa'),
        coreCount?: int32(name='CoreCount'),
        threadsPerCore?: int32(name='ThreadsPerCore'),
      }(name='CpuOptions'),
      hibernationOptions?: {
        configured?: boolean(name='Configured'),
      }(name='HibernationOptions'),
      localStorageCapacity?: long(name='LocalStorageCapacity'),
      description?: string(name='Description'),
      hpcClusterId?: string(name='HpcClusterId'),
      memory?: int32(name='Memory'),
      vlanId?: string(name='VlanId'),
      vpcAttributes?: {
        vpcId?: string(name='VpcId'),
        natIpAddress?: string(name='NatIpAddress'),
        vSwitchId?: string(name='VSwitchId'),
        privateIpAddress?: {
          ipAddress?: [ string ](name='IpAddress')
        }(name='PrivateIpAddress'),
      }(name='VpcAttributes'),
      deletionProtection?: boolean(name='DeletionProtection'),
      ecsCapacityReservationAttr?: {
        capacityReservationPreference?: string(name='CapacityReservationPreference'),
        capacityReservationId?: string(name='CapacityReservationId'),
      }(name='EcsCapacityReservationAttr'),
      internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      regionId?: string(name='RegionId'),
      ioOptimized?: boolean(name='IoOptimized'),
      cpu?: int32(name='Cpu'),
      rdmaIpAddress?: {
        ipAddress?: [ string ](name='IpAddress')
      }(name='RdmaIpAddress'),
      expiredTime?: string(name='ExpiredTime'),
      localStorageAmount?: int32(name='LocalStorageAmount'),
      resourceGroupId?: string(name='ResourceGroupId'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      ISP?: string(name='ISP'),
      networkInterfaces?: {
        networkInterface?: [ 
        {
          type?: string(name='Type'),
          macAddress?: string(name='MacAddress'),
          networkInterfaceId?: string(name='NetworkInterfaceId'),
          ipv6Sets?: {
            ipv6Set?: [ 
            {
              ipv6Address?: string(name='Ipv6Address'),
            }
          ](name='Ipv6Set')
          }(name='Ipv6Sets'),
          primaryIpAddress?: string(name='PrimaryIpAddress'),
          privateIpSets?: {
            privateIpSet?: [ 
            {
              primary?: boolean(name='Primary'),
              privateIpAddress?: string(name='PrivateIpAddress'),
            }
          ](name='PrivateIpSet')
          }(name='PrivateIpSets'),
        }
      ](name='NetworkInterface')
      }(name='NetworkInterfaces'),
    }
  ](name='Instance')
  }(name='Instances'),
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstancesFullStatusRequest {
  notBefore?: {
    start?: string(name='Start'),
    end?: string(name='End'),
  }(name='NotBefore'),
  eventPublishTime?: {
    start?: string(name='Start'),
    end?: string(name='End'),
  }(name='EventPublishTime'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  status?: string(name='Status'),
  healthStatus?: string(name='HealthStatus'),
  eventType?: string(name='EventType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceId?: [ string ](name='InstanceId'),
  eventId?: [ string ](name='EventId'),
  instanceEventType?: [ string ](name='InstanceEventType'),
}

model DescribeInstancesFullStatusResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  instanceFullStatusSet?: {
    instanceFullStatusType?: [ 
    {
      status?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='Status'),
      scheduledSystemEventSet?: {
        scheduledSystemEventType?: [ 
        {
          eventPublishTime?: string(name='EventPublishTime'),
          eventId?: string(name='EventId'),
          impactLevel?: string(name='ImpactLevel'),
          eventType?: {
            code?: int32(name='Code'),
            name?: string(name='Name'),
          }(name='EventType'),
          extendedAttribute?: {
            device?: string(name='Device'),
            diskId?: string(name='DiskId'),
            inactiveDisks?: {
              inactiveDisk?: [ 
              {
                creationTime?: string(name='CreationTime'),
                deviceCategory?: string(name='DeviceCategory'),
                deviceType?: string(name='DeviceType'),
                releaseTime?: string(name='ReleaseTime'),
                deviceSize?: string(name='DeviceSize'),
              }
            ](name='InactiveDisk')
            }(name='InactiveDisks'),
          }(name='ExtendedAttribute'),
          notBefore?: string(name='NotBefore'),
          reason?: string(name='Reason'),
          eventCycleStatus?: {
            code?: int32(name='Code'),
            name?: string(name='Name'),
          }(name='EventCycleStatus'),
        }
      ](name='ScheduledSystemEventType')
      }(name='ScheduledSystemEventSet'),
      instanceId?: string(name='InstanceId'),
      healthStatus?: {
        code?: int32(name='Code'),
        name?: string(name='Name'),
      }(name='HealthStatus'),
    }
  ](name='InstanceFullStatusType')
  }(name='InstanceFullStatusSet'),
}

model DescribeInstancesFullStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesFullStatusResponseBody(name='body'),
}

async function describeInstancesFullStatusWithOptions(request: DescribeInstancesFullStatusRequest, runtime: Util.RuntimeOptions): DescribeInstancesFullStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstancesFullStatus', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstancesFullStatus(request: DescribeInstancesFullStatusRequest): DescribeInstancesFullStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesFullStatusWithOptions(request, runtime);
}

model DescribeInstanceStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: [ string ](name='InstanceId'),
}

model DescribeInstanceStatusResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  instanceStatuses?: {
    instanceStatus?: [ 
    {
      status?: string(name='Status'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceStatus')
  }(name='InstanceStatuses'),
}

model DescribeInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatusResponseBody(name='body'),
}

async function describeInstanceStatusWithOptions(request: DescribeInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceStatus', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatusWithOptions(request, runtime);
}

model DescribeInstanceTopologyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceIds?: string(name='InstanceIds'),
}

model DescribeInstanceTopologyResponseBody = {
  requestId?: string(name='RequestId'),
  topologys?: {
    topology?: [ 
    {
      instanceId?: string(name='InstanceId'),
      hostId?: string(name='HostId'),
    }
  ](name='Topology')
  }(name='Topologys'),
}

model DescribeInstanceTopologyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTopologyResponseBody(name='body'),
}

async function describeInstanceTopologyWithOptions(request: DescribeInstanceTopologyRequest, runtime: Util.RuntimeOptions): DescribeInstanceTopologyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceTopology', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceTopology(request: DescribeInstanceTopologyRequest): DescribeInstanceTopologyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTopologyWithOptions(request, runtime);
}

model DescribeInstanceTypeFamiliesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  generation?: string(name='Generation'),
}

model DescribeInstanceTypeFamiliesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceTypeFamilies?: {
    instanceTypeFamily?: [ 
    {
      instanceTypeFamilyId?: string(name='InstanceTypeFamilyId'),
      generation?: string(name='Generation'),
    }
  ](name='InstanceTypeFamily')
  }(name='InstanceTypeFamilies'),
}

model DescribeInstanceTypeFamiliesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypeFamiliesResponseBody(name='body'),
}

async function describeInstanceTypeFamiliesWithOptions(request: DescribeInstanceTypeFamiliesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypeFamiliesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceTypeFamilies', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceTypeFamilies(request: DescribeInstanceTypeFamiliesRequest): DescribeInstanceTypeFamiliesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypeFamiliesWithOptions(request, runtime);
}

model DescribeInstanceTypesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  instanceTypes?: [ string ](name='InstanceTypes'),
}

model DescribeInstanceTypesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceTypes?: {
    instanceType?: [ 
    {
      eniTotalQuantity?: int32(name='EniTotalQuantity'),
      localStorageCategory?: string(name='LocalStorageCategory'),
      primaryEniQueueNumber?: int32(name='PrimaryEniQueueNumber'),
      memorySize?: float(name='MemorySize'),
      localStorageCapacity?: long(name='LocalStorageCapacity'),
      instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
      instancePpsRx?: long(name='InstancePpsRx'),
      eniIpv6AddressQuantity?: int32(name='EniIpv6AddressQuantity'),
      maximumQueueNumberPerEni?: int32(name='MaximumQueueNumberPerEni'),
      instanceTypeId?: string(name='InstanceTypeId'),
      instanceBandwidthRx?: int32(name='InstanceBandwidthRx'),
      GPUSpec?: string(name='GPUSpec'),
      secondaryEniQueueNumber?: int32(name='SecondaryEniQueueNumber'),
      instanceBandwidthTx?: int32(name='InstanceBandwidthTx'),
      GPUAmount?: int32(name='GPUAmount'),
      totalEniQueueQuantity?: int32(name='TotalEniQueueQuantity'),
      initialCredit?: int32(name='InitialCredit'),
      diskQuantity?: int32(name='DiskQuantity'),
      localStorageAmount?: int32(name='LocalStorageAmount'),
      baselineCredit?: int32(name='BaselineCredit'),
      instancePpsTx?: long(name='InstancePpsTx'),
      eniPrivateIpAddressQuantity?: int32(name='EniPrivateIpAddressQuantity'),
      instanceTypeFamily?: string(name='InstanceTypeFamily'),
      cpuCoreCount?: int32(name='CpuCoreCount'),
      eniQuantity?: int32(name='EniQuantity'),
      eniTrunkSupported?: boolean(name='EniTrunkSupported'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypesWithOptions(request: DescribeInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceTypes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypesWithOptions(request, runtime);
}

model DescribeInstanceVncPasswdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceVncPasswdResponseBody = {
  vncPasswd?: string(name='VncPasswd'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncPasswdResponseBody(name='body'),
}

async function describeInstanceVncPasswdWithOptions(request: DescribeInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncPasswdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceVncPasswd', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceVncPasswd(request: DescribeInstanceVncPasswdRequest): DescribeInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncPasswdWithOptions(request, runtime);
}

model DescribeInstanceVncUrlRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId'),
  vncUrl?: string(name='VncUrl'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceVncUrl', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeInvocationResultsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  instanceId?: string(name='InstanceId'),
  commandId?: string(name='CommandId'),
  invokeRecordStatus?: string(name='InvokeRecordStatus'),
  includeHistory?: boolean(name='IncludeHistory'),
  contentEncoding?: string(name='ContentEncoding'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeInvocationResultsResponseBody = {
  requestId?: string(name='RequestId'),
  invocation?: {
    pageSize?: long(name='PageSize'),
    pageNumber?: long(name='PageNumber'),
    invocationResults?: {
      invocationResult?: [ 
      {
        invocationStatus?: string(name='InvocationStatus'),
        repeats?: int32(name='Repeats'),
        output?: string(name='Output'),
        instanceId?: string(name='InstanceId'),
        commandId?: string(name='CommandId'),
        dropped?: int32(name='Dropped'),
        stopTime?: string(name='StopTime'),
        exitCode?: long(name='ExitCode'),
        startTime?: string(name='StartTime'),
        errorInfo?: string(name='ErrorInfo'),
        errorCode?: string(name='ErrorCode'),
        finishedTime?: string(name='FinishedTime'),
        invokeId?: string(name='InvokeId'),
        invokeRecordStatus?: string(name='InvokeRecordStatus'),
        username?: string(name='Username'),
      }
    ](name='InvocationResult')
    }(name='InvocationResults'),
    totalCount?: long(name='TotalCount'),
  }(name='Invocation'),
}

model DescribeInvocationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationResultsResponseBody(name='body'),
}

async function describeInvocationResultsWithOptions(request: DescribeInvocationResultsRequest, runtime: Util.RuntimeOptions): DescribeInvocationResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInvocationResults', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInvocationResults(request: DescribeInvocationResultsRequest): DescribeInvocationResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationResultsWithOptions(request, runtime);
}

model DescribeInvocationsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  commandId?: string(name='CommandId'),
  commandName?: string(name='CommandName'),
  commandType?: string(name='CommandType'),
  timed?: boolean(name='Timed'),
  invokeStatus?: string(name='InvokeStatus'),
  instanceId?: string(name='InstanceId'),
  contentEncoding?: string(name='ContentEncoding'),
  includeOutput?: boolean(name='IncludeOutput'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeInvocationsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  invocations?: {
    invocation?: [ 
    {
      frequency?: string(name='Frequency'),
      creationTime?: string(name='CreationTime'),
      invocationStatus?: string(name='InvocationStatus'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime'),
          invocationStatus?: string(name='InvocationStatus'),
          finishTime?: string(name='FinishTime'),
          updateTime?: string(name='UpdateTime'),
          repeats?: int32(name='Repeats'),
          output?: string(name='Output'),
          instanceId?: string(name='InstanceId'),
          dropped?: int32(name='Dropped'),
          stopTime?: string(name='StopTime'),
          exitCode?: long(name='ExitCode'),
          startTime?: string(name='StartTime'),
          errorInfo?: string(name='ErrorInfo'),
          errorCode?: string(name='ErrorCode'),
          instanceInvokeStatus?: string(name='InstanceInvokeStatus'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances'),
      commandId?: string(name='CommandId'),
      invokeStatus?: string(name='InvokeStatus'),
      commandType?: string(name='CommandType'),
      parameters?: string(name='Parameters'),
      timed?: boolean(name='Timed'),
      commandContent?: string(name='CommandContent'),
      commandName?: string(name='CommandName'),
      invokeId?: string(name='InvokeId'),
      username?: string(name='Username'),
    }
  ](name='Invocation')
  }(name='Invocations'),
}

model DescribeInvocationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInvocationsResponseBody(name='body'),
}

async function describeInvocationsWithOptions(request: DescribeInvocationsRequest, runtime: Util.RuntimeOptions): DescribeInvocationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInvocations', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInvocations(request: DescribeInvocationsRequest): DescribeInvocationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvocationsWithOptions(request, runtime);
}

model DescribeKeyPairsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairName?: string(name='KeyPairName'),
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeKeyPairsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime'),
      keyPairName?: string(name='KeyPairName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
    }
  ](name='KeyPair')
  }(name='KeyPairs'),
}

model DescribeKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKeyPairsResponseBody(name='body'),
}

async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeKeyPairs', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DescribeLaunchTemplatesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  templateResourceGroupId?: string(name='TemplateResourceGroupId'),
  launchTemplateId?: [ string ](name='LaunchTemplateId'),
  launchTemplateName?: [ string ](name='LaunchTemplateName'),
}

model DescribeLaunchTemplatesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  launchTemplateSets?: {
    launchTemplateSet?: [ 
    {
      launchTemplateName?: string(name='LaunchTemplateName'),
      defaultVersionNumber?: long(name='DefaultVersionNumber'),
      modifiedTime?: string(name='ModifiedTime'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      createTime?: string(name='CreateTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      createdBy?: string(name='CreatedBy'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      latestVersionNumber?: long(name='LatestVersionNumber'),
    }
  ](name='LaunchTemplateSet')
  }(name='LaunchTemplateSets'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeLaunchTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLaunchTemplatesResponseBody(name='body'),
}

async function describeLaunchTemplatesWithOptions(request: DescribeLaunchTemplatesRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLaunchTemplates', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLaunchTemplates(request: DescribeLaunchTemplatesRequest): DescribeLaunchTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplatesWithOptions(request, runtime);
}

model DescribeLaunchTemplateVersionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  minVersion?: long(name='MinVersion'),
  maxVersion?: long(name='MaxVersion'),
  defaultVersion?: boolean(name='DefaultVersion'),
  detailFlag?: boolean(name='DetailFlag'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  launchTemplateVersion?: [ integer ](name='LaunchTemplateVersion'),
}

model DescribeLaunchTemplateVersionsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  launchTemplateVersionSets?: {
    launchTemplateVersionSet?: [ 
    {
      launchTemplateName?: string(name='LaunchTemplateName'),
      defaultVersion?: boolean(name='DefaultVersion'),
      versionNumber?: long(name='VersionNumber'),
      modifiedTime?: string(name='ModifiedTime'),
      launchTemplateData?: {
        systemDisk: {
          performanceLevel?: string(name='PerformanceLevel'),
          size?: int32(name='Size'),
          diskName?: string(name='DiskName'),
          deleteWithInstance?: boolean(name='DeleteWithInstance'),
          category?: string(name='Category'),
          description?: string(name='Description'),
          iops?: int32(name='Iops'),
        }(name='SystemDisk'),
        deploymentSetId?: string(name='DeploymentSetId'),
        vpcId?: string(name='VpcId'),
        keyPairName?: string(name='KeyPairName'),
        securityGroupId?: string(name='SecurityGroupId'),
        tags?: {
          instanceTag?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='InstanceTag')
        }(name='Tags'),
        networkType?: string(name='NetworkType'),
        dataDisks?: {
          dataDisk?: [ 
          {
            performanceLevel?: string(name='PerformanceLevel'),
            description?: string(name='Description'),
            snapshotId?: string(name='SnapshotId'),
            device?: string(name='Device'),
            size?: int32(name='Size'),
            diskName?: string(name='DiskName'),
            category?: string(name='Category'),
            deleteWithInstance?: boolean(name='DeleteWithInstance'),
            encrypted?: string(name='Encrypted'),
          }
        ](name='DataDisk')
        }(name='DataDisks'),
        spotStrategy?: string(name='SpotStrategy'),
        enableVmOsConfig?: boolean(name='EnableVmOsConfig'),
        description?: string(name='Description'),
        instanceName?: string(name='InstanceName'),
        spotDuration?: int32(name='SpotDuration'),
        userData?: string(name='UserData'),
        securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
        passwordInherit?: boolean(name='PasswordInherit'),
        spotPriceLimit?: float(name='SpotPriceLimit'),
        privateIpAddress?: string(name='PrivateIpAddress'),
        imageId?: string(name='ImageId'),
        autoReleaseTime?: string(name='AutoReleaseTime'),
        imageOwnerAlias?: string(name='ImageOwnerAlias'),
        hostName?: string(name='HostName'),
        internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
        internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
        instanceType?: string(name='InstanceType'),
        securityGroupIds?: {
          securityGroupId?: [ string ](name='SecurityGroupId')
        }(name='SecurityGroupIds'),
        period?: int32(name='Period'),
        instanceChargeType?: string(name='InstanceChargeType'),
        ioOptimized?: string(name='IoOptimized'),
        ramRoleName?: string(name='RamRoleName'),
        vSwitchId?: string(name='VSwitchId'),
        resourceGroupId?: string(name='ResourceGroupId'),
        internetChargeType?: string(name='InternetChargeType'),
        zoneId?: string(name='ZoneId'),
        networkInterfaces?: {
          networkInterface?: [ 
          {
            networkInterfaceName?: string(name='NetworkInterfaceName'),
            vSwitchId?: string(name='VSwitchId'),
            description?: string(name='Description'),
            securityGroupId?: string(name='SecurityGroupId'),
            primaryIpAddress?: string(name='PrimaryIpAddress'),
            securityGroupIds?: {
              securityGroupId?: [ string ](name='SecurityGroupId')
            }(name='SecurityGroupIds'),
          }
        ](name='NetworkInterface')
        }(name='NetworkInterfaces'),
      }(name='LaunchTemplateData'),
      launchTemplateId?: string(name='LaunchTemplateId'),
      createTime?: string(name='CreateTime'),
      createdBy?: string(name='CreatedBy'),
      versionDescription?: string(name='VersionDescription'),
    }
  ](name='LaunchTemplateVersionSet')
  }(name='LaunchTemplateVersionSets'),
}

model DescribeLaunchTemplateVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLaunchTemplateVersionsResponseBody(name='body'),
}

async function describeLaunchTemplateVersionsWithOptions(request: DescribeLaunchTemplateVersionsRequest, runtime: Util.RuntimeOptions): DescribeLaunchTemplateVersionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLaunchTemplateVersions', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLaunchTemplateVersions(request: DescribeLaunchTemplateVersionsRequest): DescribeLaunchTemplateVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLaunchTemplateVersionsWithOptions(request, runtime);
}

model DescribeLimitationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  limitation?: string(name='Limitation'),
}

model DescribeLimitationResponseBody = {
  requestId?: string(name='RequestId'),
  limitation?: string(name='Limitation'),
  value?: string(name='Value'),
}

model DescribeLimitationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLimitationResponseBody(name='body'),
}

async function describeLimitationWithOptions(request: DescribeLimitationRequest, runtime: Util.RuntimeOptions): DescribeLimitationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeLimitation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeLimitation(request: DescribeLimitationRequest): DescribeLimitationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLimitationWithOptions(request, runtime);
}

model DescribeManagedInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  osType?: string(name='OsType'),
  instanceIp?: string(name='InstanceIp'),
  activationId?: string(name='ActivationId'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  instanceId?: [ string ](name='InstanceId'),
}

model DescribeManagedInstancesResponseBody = {
  instances?: [ 
    {
      lastInvokedTime?: string(name='LastInvokedTime'),
      connected?: boolean(name='Connected'),
      internetIp?: string(name='InternetIp'),
      hostname?: string(name='Hostname'),
      instanceId?: string(name='InstanceId'),
      intranetIp?: string(name='IntranetIp'),
      activationId?: string(name='ActivationId'),
      registrationTime?: string(name='RegistrationTime'),
      agentVersion?: string(name='AgentVersion'),
      instanceName?: string(name='InstanceName'),
      osType?: string(name='OsType'),
      osVersion?: string(name='OsVersion'),
      invocationCount?: long(name='InvocationCount'),
      machineId?: string(name='MachineId'),
    }
  ](name='Instances'),
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
}

model DescribeManagedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeManagedInstancesResponseBody(name='body'),
}

async function describeManagedInstancesWithOptions(request: DescribeManagedInstancesRequest, runtime: Util.RuntimeOptions): DescribeManagedInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeManagedInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeManagedInstances(request: DescribeManagedInstancesRequest): DescribeManagedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeManagedInstancesWithOptions(request, runtime);
}

model DescribeNatGatewaysRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  natGatewayId?: string(name='NatGatewayId'),
  vpcId?: string(name='VpcId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeNatGatewaysResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  natGateways?: {
    natGateway?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      vpcId?: string(name='VpcId'),
      bandwidthPackageIds?: {
        bandwidthPackageId?: [ string ](name='BandwidthPackageId')
      }(name='BandwidthPackageIds'),
      spec?: string(name='Spec'),
      instanceChargeType?: string(name='InstanceChargeType'),
      regionId?: string(name='RegionId'),
      description?: string(name='Description'),
      natGatewayId?: string(name='NatGatewayId'),
      forwardTableIds?: {
        forwardTableId?: [ string ](name='ForwardTableId')
      }(name='ForwardTableIds'),
      businessStatus?: string(name='BusinessStatus'),
      name?: string(name='Name'),
    }
  ](name='NatGateway')
  }(name='NatGateways'),
}

model DescribeNatGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNatGatewaysResponseBody(name='body'),
}

async function describeNatGatewaysWithOptions(request: DescribeNatGatewaysRequest, runtime: Util.RuntimeOptions): DescribeNatGatewaysResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNatGateways', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNatGateways(request: DescribeNatGatewaysRequest): DescribeNatGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatGatewaysWithOptions(request, runtime);
}

model DescribeNetworkInterfaceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  attribute?: string(name='Attribute'),
}

model DescribeNetworkInterfaceAttributeResponseBody = {
  status?: string(name='Status'),
  description?: string(name='Description'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  serviceManaged?: boolean(name='ServiceManaged'),
  requestId?: string(name='RequestId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  instanceId?: string(name='InstanceId'),
  vSwitchId?: string(name='VSwitchId'),
  networkInterfaceName?: string(name='NetworkInterfaceName'),
  attachment?: {
    deviceIndex?: int32(name='DeviceIndex'),
    instanceId?: string(name='InstanceId'),
    memberNetworkInterfaceIds?: {
      memberNetworkInterfaceId?: [ string ](name='MemberNetworkInterfaceId')
    }(name='MemberNetworkInterfaceIds'),
    trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId'),
  }(name='Attachment'),
  macAddress?: string(name='MacAddress'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
  serviceID?: long(name='ServiceID'),
  type?: string(name='Type'),
  queueNumber?: int32(name='QueueNumber'),
  ipv6Sets?: {
    ipv6Set?: [ 
    {
      ipv6Address?: string(name='Ipv6Address'),
    }
  ](name='Ipv6Set')
  }(name='Ipv6Sets'),
  vpcId?: string(name='VpcId'),
  ownerId?: string(name='OwnerId'),
  associatedPublicIp?: {
    allocationId?: string(name='AllocationId'),
    publicIpAddress?: string(name='PublicIpAddress'),
  }(name='AssociatedPublicIp'),
  creationTime?: string(name='CreationTime'),
  tags?: {
    tag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='Tag')
  }(name='Tags'),
  privateIpSets?: {
    privateIpSet?: [ 
    {
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId'),
        publicIpAddress?: string(name='PublicIpAddress'),
      }(name='AssociatedPublicIp'),
      primary?: boolean(name='Primary'),
      privateIpAddress?: string(name='PrivateIpAddress'),
    }
  ](name='PrivateIpSet')
  }(name='PrivateIpSets'),
}

model DescribeNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfaceAttributeResponseBody(name='body'),
}

async function describeNetworkInterfaceAttributeWithOptions(request: DescribeNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNetworkInterfaceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNetworkInterfaceAttribute(request: DescribeNetworkInterfaceAttributeRequest): DescribeNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfaceAttributeWithOptions(request, runtime);
}

model DescribeNetworkInterfacePermissionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  networkInterfacePermissionId?: [ string ](name='NetworkInterfacePermissionId'),
}

model DescribeNetworkInterfacePermissionsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  networkInterfacePermissions?: {
    networkInterfacePermission?: [ 
    {
      permission?: string(name='Permission'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      accountId?: long(name='AccountId'),
      networkInterfacePermissionId?: string(name='NetworkInterfacePermissionId'),
      serviceName?: string(name='ServiceName'),
      permissionState?: string(name='PermissionState'),
    }
  ](name='NetworkInterfacePermission')
  }(name='NetworkInterfacePermissions'),
}

model DescribeNetworkInterfacePermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacePermissionsResponseBody(name='body'),
}

async function describeNetworkInterfacePermissionsWithOptions(request: DescribeNetworkInterfacePermissionsRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacePermissionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNetworkInterfacePermissions', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNetworkInterfacePermissions(request: DescribeNetworkInterfacePermissionsRequest): DescribeNetworkInterfacePermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacePermissionsWithOptions(request, runtime);
}

model DescribeNetworkInterfacesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vSwitchId?: string(name='VSwitchId'),
  vpcId?: string(name='VpcId'),
  primaryIpAddress?: string(name='PrimaryIpAddress'),
  securityGroupId?: string(name='SecurityGroupId'),
  networkInterfaceName?: string(name='NetworkInterfaceName'),
  type?: string(name='Type'),
  instanceId?: string(name='InstanceId'),
  serviceManaged?: boolean(name='ServiceManaged'),
  status?: string(name='Status'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  privateIpAddress?: [ string ](name='PrivateIpAddress'),
  networkInterfaceId?: [ string ](name='NetworkInterfaceId'),
}

model DescribeNetworkInterfacesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      vpcId?: string(name='VpcId'),
      creationTime?: string(name='CreationTime'),
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      macAddress?: string(name='MacAddress'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      attachment?: {
        deviceIndex?: int32(name='DeviceIndex'),
        instanceId?: string(name='InstanceId'),
        trunkNetworkInterfaceId?: string(name='TrunkNetworkInterfaceId'),
      }(name='Attachment'),
      serviceID?: long(name='ServiceID'),
      ipv6Sets?: {
        ipv6Set?: [ 
        {
          ipv6Address?: string(name='Ipv6Address'),
        }
      ](name='Ipv6Set')
      }(name='Ipv6Sets'),
      instanceId?: string(name='InstanceId'),
      ownerId?: string(name='OwnerId'),
      securityGroupIds?: {
        securityGroupId?: [ string ](name='SecurityGroupId')
      }(name='SecurityGroupIds'),
      serviceManaged?: boolean(name='ServiceManaged'),
      vSwitchId?: string(name='VSwitchId'),
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      associatedPublicIp?: {
        allocationId?: string(name='AllocationId'),
        publicIpAddress?: string(name='PublicIpAddress'),
      }(name='AssociatedPublicIp'),
      zoneId?: string(name='ZoneId'),
      privateIpAddress?: string(name='PrivateIpAddress'),
      queueNumber?: int32(name='QueueNumber'),
      privateIpSets?: {
        privateIpSet?: [ 
        {
          associatedPublicIp?: {
            allocationId?: string(name='AllocationId'),
            publicIpAddress?: string(name='PublicIpAddress'),
          }(name='AssociatedPublicIp'),
          primary?: boolean(name='Primary'),
          privateIpAddress?: string(name='PrivateIpAddress'),
        }
      ](name='PrivateIpSet')
      }(name='PrivateIpSets'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets'),
}

model DescribeNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacesResponseBody(name='body'),
}

async function describeNetworkInterfacesWithOptions(request: DescribeNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNetworkInterfaces', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacesWithOptions(request, runtime);
}

model DescribeNewProjectEipMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeNewProjectEipMonitorDataResponseBody = {
  requestId?: string(name='RequestId'),
  eipMonitorDatas?: {
    eipMonitorData?: [ 
    {
      eipTX?: int32(name='EipTX'),
      eipPackets?: int32(name='EipPackets'),
      eipBandwidth?: int32(name='EipBandwidth'),
      timeStamp?: string(name='TimeStamp'),
      eipFlow?: int32(name='EipFlow'),
      eipRX?: int32(name='EipRX'),
    }
  ](name='EipMonitorData')
  }(name='EipMonitorDatas'),
}

model DescribeNewProjectEipMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNewProjectEipMonitorDataResponseBody(name='body'),
}

async function describeNewProjectEipMonitorDataWithOptions(request: DescribeNewProjectEipMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeNewProjectEipMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNewProjectEipMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNewProjectEipMonitorData(request: DescribeNewProjectEipMonitorDataRequest): DescribeNewProjectEipMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNewProjectEipMonitorDataWithOptions(request, runtime);
}

model DescribePhysicalConnectionsRequest {
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribePhysicalConnectionsResponseBody = {
  physicalConnectionSet?: {
    physicalConnectionType?: [ 
    {
      type?: string(name='Type'),
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      adLocation?: string(name='AdLocation'),
      portNumber?: string(name='PortNumber'),
      spec?: string(name='Spec'),
      circuitCode?: string(name='CircuitCode'),
      description?: string(name='Description'),
      bandwidth?: long(name='Bandwidth'),
      portType?: string(name='PortType'),
      businessStatus?: string(name='BusinessStatus'),
      enabledTime?: string(name='EnabledTime'),
      lineOperator?: string(name='LineOperator'),
      name?: string(name='Name'),
      redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
      peerLocation?: string(name='PeerLocation'),
      accessPointId?: string(name='AccessPointId'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
    }
  ](name='PhysicalConnectionType')
  }(name='PhysicalConnectionSet'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribePhysicalConnectionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePhysicalConnectionsResponseBody(name='body'),
}

async function describePhysicalConnectionsWithOptions(request: DescribePhysicalConnectionsRequest, runtime: Util.RuntimeOptions): DescribePhysicalConnectionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePhysicalConnections', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePhysicalConnections(request: DescribePhysicalConnectionsRequest): DescribePhysicalConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePhysicalConnectionsWithOptions(request, runtime);
}

model DescribePriceRequest {
  systemDisk?: {
    category?: string(name='Category'),
    size?: int32(name='Size'),
    performanceLevel?: string(name='PerformanceLevel'),
  }(name='SystemDisk'),
  dataDisk?: [
    {
      size?: int32(name='Size'),
      category?: string(name='Category'),
      performanceLevel?: string(name='PerformanceLevel'),
    }
  ](name='DataDisk'),
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  imageId?: string(name='ImageId'),
  instanceType?: string(name='InstanceType'),
  dedicatedHostType?: string(name='DedicatedHostType'),
  ioOptimized?: string(name='IoOptimized'),
  instanceNetworkType?: string(name='InstanceNetworkType'),
  internetChargeType?: string(name='InternetChargeType'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  period?: int32(name='Period'),
  priceUnit?: string(name='PriceUnit'),
  amount?: int32(name='Amount'),
  offeringType?: string(name='OfferingType'),
  instanceAmount?: int32(name='InstanceAmount'),
  scope?: string(name='Scope'),
  platform?: string(name='Platform'),
  capacity?: int32(name='Capacity'),
  assuranceTimes?: string(name='AssuranceTimes'),
  instanceCpuCoreCount?: int32(name='InstanceCpuCoreCount'),
  isp?: string(name='Isp'),
  instanceTypeList?: [ string ](name='InstanceTypeList'),
}

model DescribePriceResponseBody = {
  requestId?: string(name='RequestId'),
  priceInfo?: {
    price?: {
      reservedInstanceHourPrice?: float(name='ReservedInstanceHourPrice'),
      discountPrice?: float(name='DiscountPrice'),
      tradePrice?: float(name='TradePrice'),
      originalPrice?: float(name='OriginalPrice'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          resource?: string(name='Resource'),
          discountPrice?: float(name='DiscountPrice'),
          tradePrice?: float(name='TradePrice'),
          originalPrice?: float(name='OriginalPrice'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description'),
              ruleId?: long(name='RuleId'),
            }
          ](name='Rule')
          }(name='SubRules'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos'),
      currency?: string(name='Currency'),
    }(name='Price'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeRecommendInstanceTypeRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cores?: int32(name='Cores'),
  memory?: float(name='Memory'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
  instanceType?: string(name='InstanceType'),
  networkType?: string(name='NetworkType'),
  instanceChargeType?: string(name='InstanceChargeType'),
  spotStrategy?: string(name='SpotStrategy'),
  ioOptimized?: string(name='IoOptimized'),
  priorityStrategy?: string(name='PriorityStrategy'),
  maxPrice?: float(name='MaxPrice'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  systemDiskCategory?: string(name='SystemDiskCategory'),
  zoneMatchMode?: string(name='ZoneMatchMode'),
  scene?: string(name='Scene'),
  instanceTypeFamily?: [ string ](name='InstanceTypeFamily'),
}

model DescribeRecommendInstanceTypeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    recommendInstanceType?: [ 
    {
      zones?: {
        zone?: [ 
        {
          zoneNo?: string(name='ZoneNo'),
          networkTypes?: {
            networkType?: [ string ](name='NetworkType')
          }(name='NetworkTypes'),
        }
      ](name='zone')
      }(name='Zones'),
      commodityCode?: string(name='CommodityCode'),
      zoneId?: string(name='ZoneId'),
      priority?: int32(name='Priority'),
      networkType?: string(name='NetworkType'),
      instanceType?: {
        supportIoOptimized?: string(name='SupportIoOptimized'),
        cores?: int32(name='Cores'),
        memory?: int32(name='Memory'),
        instanceType?: string(name='InstanceType'),
        instanceTypeFamily?: string(name='InstanceTypeFamily'),
        generation?: string(name='Generation'),
      }(name='InstanceType'),
      scene?: string(name='Scene'),
      spotStrategy?: string(name='SpotStrategy'),
      regionId?: string(name='RegionId'),
      instanceChargeType?: string(name='InstanceChargeType'),
    }
  ](name='RecommendInstanceType')
  }(name='Data'),
}

model DescribeRecommendInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecommendInstanceTypeResponseBody(name='body'),
}

async function describeRecommendInstanceTypeWithOptions(request: DescribeRecommendInstanceTypeRequest, runtime: Util.RuntimeOptions): DescribeRecommendInstanceTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRecommendInstanceType', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRecommendInstanceType(request: DescribeRecommendInstanceTypeRequest): DescribeRecommendInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecommendInstanceTypeWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  resourceType?: string(name='ResourceType'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      status?: string(name='Status'),
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRenewalPriceRequest {
  ownerId?: long(name='OwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  period?: int32(name='Period'),
  priceUnit?: string(name='PriceUnit'),
  expectedRenewDay?: int32(name='ExpectedRenewDay'),
}

model DescribeRenewalPriceResponseBody = {
  requestId?: string(name='RequestId'),
  priceInfo?: {
    price?: {
      discountPrice?: float(name='DiscountPrice'),
      tradePrice?: float(name='TradePrice'),
      originalPrice?: float(name='OriginalPrice'),
      detailInfos?: {
        resourcePriceModel?: [ 
        {
          resource?: string(name='Resource'),
          discountPrice?: float(name='DiscountPrice'),
          tradePrice?: float(name='TradePrice'),
          originalPrice?: float(name='OriginalPrice'),
          subRules?: {
            rule?: [ 
            {
              description?: string(name='Description'),
              ruleId?: long(name='RuleId'),
            }
          ](name='Rule')
          }(name='SubRules'),
        }
      ](name='ResourcePriceModel')
      }(name='DetailInfos'),
      currency?: string(name='Currency'),
    }(name='Price'),
    rules?: {
      rule?: [ 
      {
        description?: string(name='Description'),
        ruleId?: long(name='RuleId'),
      }
    ](name='Rule')
    }(name='Rules'),
  }(name='PriceInfo'),
}

model DescribeRenewalPriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRenewalPriceResponseBody(name='body'),
}

async function describeRenewalPriceWithOptions(request: DescribeRenewalPriceRequest, runtime: Util.RuntimeOptions): DescribeRenewalPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRenewalPrice', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRenewalPrice(request: DescribeRenewalPriceRequest): DescribeRenewalPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRenewalPriceWithOptions(request, runtime);
}

model DescribeReservedInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  zoneId?: string(name='ZoneId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  lockReason?: string(name='LockReason'),
  instanceType?: string(name='InstanceType'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  scope?: string(name='Scope'),
  offeringType?: string(name='OfferingType'),
  allocationType?: string(name='AllocationType'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  status?: [ string ](name='Status'),
}

model DescribeReservedInstancesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  reservedInstances?: {
    reservedInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      reservedInstanceName?: string(name='ReservedInstanceName'),
      operationLocks?: {
        operationLock?: [ 
        {
          lockReason?: string(name='LockReason'),
        }
      ](name='OperationLock')
      }(name='OperationLocks'),
      reservedInstanceId?: string(name='ReservedInstanceId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      instanceType?: string(name='InstanceType'),
      instanceAmount?: int32(name='InstanceAmount'),
      offeringType?: string(name='OfferingType'),
      regionId?: string(name='RegionId'),
      startTime?: string(name='StartTime'),
      description?: string(name='Description'),
      allocationStatus?: string(name='AllocationStatus'),
      expiredTime?: string(name='ExpiredTime'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      platform?: string(name='Platform'),
      scope?: string(name='Scope'),
    }
  ](name='ReservedInstance')
  }(name='ReservedInstances'),
}

model DescribeReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReservedInstancesResponseBody(name='body'),
}

async function describeReservedInstancesWithOptions(request: DescribeReservedInstancesRequest, runtime: Util.RuntimeOptions): DescribeReservedInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeReservedInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeReservedInstances(request: DescribeReservedInstancesRequest): DescribeReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReservedInstancesWithOptions(request, runtime);
}

model DescribeResourceByTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceType?: string(name='ResourceType'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeResourceByTagsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resources?: {
    resource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      resourceId?: string(name='ResourceId'),
      regionId?: string(name='RegionId'),
    }
  ](name='Resource')
  }(name='Resources'),
}

model DescribeResourceByTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceByTagsResponseBody(name='body'),
}

async function describeResourceByTagsWithOptions(request: DescribeResourceByTagsRequest, runtime: Util.RuntimeOptions): DescribeResourceByTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceByTags', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceByTags(request: DescribeResourceByTagsRequest): DescribeResourceByTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceByTagsWithOptions(request, runtime);
}

model DescribeResourcesModificationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceId?: string(name='ResourceId'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone'),
  destinationResource?: string(name='DestinationResource'),
  operationType?: string(name='OperationType'),
  instanceType?: string(name='InstanceType'),
  cores?: int32(name='Cores'),
  memory?: float(name='Memory'),
}

model DescribeResourcesModificationResponseBody = {
  requestId?: string(name='RequestId'),
  availableZones?: {
    availableZone?: [ 
    {
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
      statusCategory?: string(name='StatusCategory'),
      regionId?: string(name='RegionId'),
      availableResources?: {
        availableResource?: [ 
        {
          type?: string(name='Type'),
          supportedResources?: {
            supportedResource?: [ 
            {
              status?: string(name='Status'),
              value?: string(name='Value'),
              max?: int32(name='Max'),
              unit?: string(name='Unit'),
              statusCategory?: string(name='StatusCategory'),
              min?: int32(name='Min'),
            }
          ](name='SupportedResource')
          }(name='SupportedResources'),
        }
      ](name='AvailableResource')
      }(name='AvailableResources'),
    }
  ](name='AvailableZone')
  }(name='AvailableZones'),
}

model DescribeResourcesModificationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcesModificationResponseBody(name='body'),
}

async function describeResourcesModificationWithOptions(request: DescribeResourcesModificationRequest, runtime: Util.RuntimeOptions): DescribeResourcesModificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcesModification', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcesModification(request: DescribeResourcesModificationRequest): DescribeResourcesModificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcesModificationWithOptions(request, runtime);
}

model DescribeRouterInterfacesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeRouterInterfacesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  routerInterfaceSet?: {
    routerInterfaceType?: [ 
    {
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      spec?: string(name='Spec'),
      oppositeInterfaceId?: string(name='OppositeInterfaceId'),
      routerInterfaceId?: string(name='RouterInterfaceId'),
      chargeType?: string(name='ChargeType'),
      oppositeRouterType?: string(name='OppositeRouterType'),
      oppositeInterfaceOwnerId?: string(name='OppositeInterfaceOwnerId'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      oppositeRouterId?: string(name='OppositeRouterId'),
      oppositeInterfaceSpec?: string(name='OppositeInterfaceSpec'),
      routerId?: string(name='RouterId'),
      oppositeInterfaceBusinessStatus?: string(name='OppositeInterfaceBusinessStatus'),
      connectedTime?: string(name='ConnectedTime'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
      oppositeInterfaceStatus?: string(name='OppositeInterfaceStatus'),
      endTime?: string(name='EndTime'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      oppositeAccessPointId?: string(name='OppositeAccessPointId'),
      businessStatus?: string(name='BusinessStatus'),
      routerType?: string(name='RouterType'),
      role?: string(name='Role'),
      accessPointId?: string(name='AccessPointId'),
    }
  ](name='RouterInterfaceType')
  }(name='RouterInterfaceSet'),
}

model DescribeRouterInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouterInterfacesResponseBody(name='body'),
}

async function describeRouterInterfacesWithOptions(request: DescribeRouterInterfacesRequest, runtime: Util.RuntimeOptions): DescribeRouterInterfacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRouterInterfaces', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRouterInterfaces(request: DescribeRouterInterfacesRequest): DescribeRouterInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouterInterfacesWithOptions(request, runtime);
}

model DescribeRouteTablesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  VRouterId?: string(name='VRouterId'),
  routeTableId?: string(name='RouteTableId'),
  routerType?: string(name='RouterType'),
  routerId?: string(name='RouterId'),
  routeTableName?: string(name='RouteTableName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeRouteTablesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  routeTables?: {
    routeTable?: [ 
    {
      creationTime?: string(name='CreationTime'),
      VRouterId?: string(name='VRouterId'),
      routeEntrys?: {
        routeEntry?: [ 
        {
          type?: string(name='Type'),
          status?: string(name='Status'),
          nextHopType?: string(name='NextHopType'),
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          nextHops?: {
            nextHop?: [ 
            {
              weight?: int32(name='Weight'),
              nextHopId?: string(name='NextHopId'),
              nextHopType?: string(name='NextHopType'),
              enabled?: int32(name='Enabled'),
            }
          ](name='NextHop')
          }(name='NextHops'),
          instanceId?: string(name='InstanceId'),
          routeTableId?: string(name='RouteTableId'),
        }
      ](name='RouteEntry')
      }(name='RouteEntrys'),
      resourceGroupId?: string(name='ResourceGroupId'),
      routeTableType?: string(name='RouteTableType'),
      routeTableId?: string(name='RouteTableId'),
    }
  ](name='RouteTable')
  }(name='RouteTables'),
}

model DescribeRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteTablesResponseBody(name='body'),
}

async function describeRouteTablesWithOptions(request: DescribeRouteTablesRequest, runtime: Util.RuntimeOptions): DescribeRouteTablesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRouteTables', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRouteTables(request: DescribeRouteTablesRequest): DescribeRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteTablesWithOptions(request, runtime);
}

model DescribeSecurityGroupAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  regionId?: string(name='RegionId'),
  nicType?: string(name='NicType'),
  ownerAccount?: string(name='OwnerAccount'),
  direction?: string(name='Direction'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  description?: string(name='Description'),
  vpcId?: string(name='VpcId'),
  requestId?: string(name='RequestId'),
  securityGroupName?: string(name='SecurityGroupName'),
  securityGroupId?: string(name='SecurityGroupId'),
  permissions?: {
    permission?: [ 
    {
      direction?: string(name='Direction'),
      sourceGroupId?: string(name='SourceGroupId'),
      destGroupOwnerAccount?: string(name='DestGroupOwnerAccount'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
      ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
      createTime?: string(name='CreateTime'),
      destGroupId?: string(name='DestGroupId'),
      ipProtocol?: string(name='IpProtocol'),
      destCidrIp?: string(name='DestCidrIp'),
      priority?: string(name='Priority'),
      destGroupName?: string(name='DestGroupName'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      description?: string(name='Description'),
      portRange?: string(name='PortRange'),
      sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount'),
      sourceGroupName?: string(name='SourceGroupName'),
      sourcePortRange?: string(name='SourcePortRange'),
    }
  ](name='Permission')
  }(name='Permissions'),
  innerAccessPolicy?: string(name='InnerAccessPolicy'),
  regionId?: string(name='RegionId'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

async function describeSecurityGroupAttributeWithOptions(request: DescribeSecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupAttributeWithOptions(request, runtime);
}

model DescribeSecurityGroupReferencesRequest {
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityGroupId?: [ string ](name='SecurityGroupId'),
}

model DescribeSecurityGroupReferencesResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupReferences?: {
    securityGroupReference?: [ 
    {
      securityGroupId?: string(name='SecurityGroupId'),
      referencingSecurityGroups?: {
        referencingSecurityGroup?: [ 
        {
          securityGroupId?: string(name='SecurityGroupId'),
          aliUid?: string(name='AliUid'),
        }
      ](name='ReferencingSecurityGroup')
      }(name='ReferencingSecurityGroups'),
    }
  ](name='SecurityGroupReference')
  }(name='SecurityGroupReferences'),
}

model DescribeSecurityGroupReferencesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupReferencesResponseBody(name='body'),
}

async function describeSecurityGroupReferencesWithOptions(request: DescribeSecurityGroupReferencesRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupReferencesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupReferences', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupReferences(request: DescribeSecurityGroupReferencesRequest): DescribeSecurityGroupReferencesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupReferencesWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  vpcId?: string(name='VpcId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  securityGroupIds?: string(name='SecurityGroupIds'),
  resourceGroupId?: string(name='ResourceGroupId'),
  networkType?: string(name='NetworkType'),
  securityGroupId?: string(name='SecurityGroupId'),
  securityGroupName?: string(name='SecurityGroupName'),
  isQueryEcsCount?: boolean(name='IsQueryEcsCount'),
  fuzzyQuery?: boolean(name='FuzzyQuery'),
  securityGroupType?: string(name='SecurityGroupType'),
  dryRun?: boolean(name='DryRun'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSecurityGroupsResponseBody = {
  securityGroups?: {
    securityGroup?: [ 
    {
      creationTime?: string(name='CreationTime'),
      vpcId?: string(name='VpcId'),
      securityGroupId?: string(name='SecurityGroupId'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      serviceID?: long(name='ServiceID'),
      serviceManaged?: boolean(name='ServiceManaged'),
      description?: string(name='Description'),
      resourceGroupId?: string(name='ResourceGroupId'),
      securityGroupName?: string(name='SecurityGroupName'),
      ecsCount?: int32(name='EcsCount'),
      securityGroupType?: string(name='SecurityGroupType'),
      availableInstanceAmount?: int32(name='AvailableInstanceAmount'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroups', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model DescribeSendFileResultsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  name?: string(name='Name'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeSendFileResultsResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: long(name='PageNumber'),
  invocations?: {
    invocation?: [ 
    {
      creationTime?: string(name='CreationTime'),
      contentType?: string(name='ContentType'),
      invocationStatus?: string(name='InvocationStatus'),
      targetDir?: string(name='TargetDir'),
      invokeInstances?: {
        invokeInstance?: [ 
        {
          creationTime?: string(name='CreationTime'),
          startTime?: string(name='StartTime'),
          invocationStatus?: string(name='InvocationStatus'),
          finishTime?: string(name='FinishTime'),
          updateTime?: string(name='UpdateTime'),
          errorInfo?: string(name='ErrorInfo'),
          errorCode?: string(name='ErrorCode'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='InvokeInstance')
      }(name='InvokeInstances'),
      fileOwner?: string(name='FileOwner'),
      vmCount?: int32(name='VmCount'),
      description?: string(name='Description'),
      fileMode?: string(name='FileMode'),
      fileGroup?: string(name='FileGroup'),
      name?: string(name='Name'),
      invokeId?: string(name='InvokeId'),
      content?: string(name='Content'),
      overwrite?: string(name='Overwrite'),
    }
  ](name='Invocation')
  }(name='Invocations'),
}

model DescribeSendFileResultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSendFileResultsResponseBody(name='body'),
}

async function describeSendFileResultsWithOptions(request: DescribeSendFileResultsRequest, runtime: Util.RuntimeOptions): DescribeSendFileResultsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSendFileResults', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSendFileResults(request: DescribeSendFileResultsRequest): DescribeSendFileResultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSendFileResultsWithOptions(request, runtime);
}

model DescribeSnapshotGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  name?: string(name='Name'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  snapshotGroupId?: [ string ](name='SnapshotGroupId'),
  status?: [ string ](name='Status'),
  additionalAttributes?: [ string ](name='AdditionalAttributes'),
}

model DescribeSnapshotGroupsResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  snapshotGroups?: {
    snapshotGroup?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      progressStatus?: string(name='ProgressStatus'),
      snapshotGroupId?: string(name='SnapshotGroupId'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      snapshots?: {
        snapshot?: [ 
        {
          sourceDiskId?: string(name='SourceDiskId'),
          progress?: string(name='Progress'),
          instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays'),
          snapshotId?: string(name='SnapshotId'),
          instantAccess?: boolean(name='InstantAccess'),
          sourceDiskType?: string(name='SourceDiskType'),
        }
      ](name='Snapshot')
      }(name='Snapshots'),
    }
  ](name='SnapshotGroup')
  }(name='SnapshotGroups'),
}

model DescribeSnapshotGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotGroupsResponseBody(name='body'),
}

async function describeSnapshotGroupsWithOptions(request: DescribeSnapshotGroupsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshotGroups', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshotGroups(request: DescribeSnapshotGroupsRequest): DescribeSnapshotGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotGroupsWithOptions(request, runtime);
}

model DescribeSnapshotLinksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  diskIds?: string(name='DiskIds'),
  snapshotLinkIds?: string(name='SnapshotLinkIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeSnapshotLinksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  snapshotLinks?: {
    snapshotLink?: [ 
    {
      instantAccess?: boolean(name='InstantAccess'),
      totalSize?: long(name='TotalSize'),
      sourceDiskName?: string(name='SourceDiskName'),
      sourceDiskSize?: int32(name='SourceDiskSize'),
      sourceDiskType?: string(name='SourceDiskType'),
      instanceId?: string(name='InstanceId'),
      totalCount?: int32(name='TotalCount'),
      snapshotLinkId?: string(name='SnapshotLinkId'),
      regionId?: string(name='RegionId'),
      sourceDiskId?: string(name='SourceDiskId'),
      instanceName?: string(name='InstanceName'),
      category?: string(name='Category'),
    }
  ](name='SnapshotLink')
  }(name='SnapshotLinks'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeSnapshotLinksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotLinksResponseBody(name='body'),
}

async function describeSnapshotLinksWithOptions(request: DescribeSnapshotLinksRequest, runtime: Util.RuntimeOptions): DescribeSnapshotLinksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshotLinks', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshotLinks(request: DescribeSnapshotLinksRequest): DescribeSnapshotLinksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotLinksWithOptions(request, runtime);
}

model DescribeSnapshotMonitorDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: int32(name='Period'),
  category?: string(name='Category'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSnapshotMonitorDataResponseBody = {
  requestId?: string(name='RequestId'),
  monitorData?: {
    dataPoint?: [ 
    {
      size?: long(name='Size'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='DataPoint')
  }(name='MonitorData'),
}

model DescribeSnapshotMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotMonitorDataResponseBody(name='body'),
}

async function describeSnapshotMonitorDataWithOptions(request: DescribeSnapshotMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeSnapshotMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshotMonitorData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshotMonitorData(request: DescribeSnapshotMonitorDataRequest): DescribeSnapshotMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotMonitorDataWithOptions(request, runtime);
}

model DescribeSnapshotPackageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeSnapshotPackageResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  snapshotPackages?: {
    snapshotPackage?: [ 
    {
      displayName?: string(name='DisplayName'),
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
      initCapacity?: long(name='InitCapacity'),
    }
  ](name='SnapshotPackage')
  }(name='SnapshotPackages'),
}

model DescribeSnapshotPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotPackageResponseBody(name='body'),
}

async function describeSnapshotPackageWithOptions(request: DescribeSnapshotPackageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshotPackage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshotPackage(request: DescribeSnapshotPackageRequest): DescribeSnapshotPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotPackageWithOptions(request, runtime);
}

model DescribeSnapshotsRequest {
  filter?: [
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Filter'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  diskId?: string(name='DiskId'),
  snapshotLinkId?: string(name='SnapshotLinkId'),
  regionId?: string(name='RegionId'),
  snapshotIds?: string(name='SnapshotIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  ownerAccount?: string(name='OwnerAccount'),
  snapshotName?: string(name='SnapshotName'),
  status?: string(name='Status'),
  snapshotType?: string(name='SnapshotType'),
  usage?: string(name='Usage'),
  sourceDiskType?: string(name='SourceDiskType'),
  encrypted?: boolean(name='Encrypted'),
  resourceGroupId?: string(name='ResourceGroupId'),
  dryRun?: boolean(name='DryRun'),
  KMSKeyId?: string(name='KMSKeyId'),
  category?: string(name='Category'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeSnapshotsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  snapshots?: {
    snapshot?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      instantAccess?: boolean(name='InstantAccess'),
      retentionDays?: int32(name='RetentionDays'),
      sourceDiskSize?: string(name='SourceDiskSize'),
      tags?: {
        tag?: [ 
        {
          tagValue?: string(name='TagValue'),
          tagKey?: string(name='TagKey'),
        }
      ](name='Tag')
      }(name='Tags'),
      lastModifiedTime?: string(name='LastModifiedTime'),
      encrypted?: boolean(name='Encrypted'),
      sourceDiskId?: string(name='SourceDiskId'),
      description?: string(name='Description'),
      instantAccessRetentionDays?: int32(name='InstantAccessRetentionDays'),
      KMSKeyId?: string(name='KMSKeyId'),
      progress?: string(name='Progress'),
      remainTime?: int32(name='RemainTime'),
      sourceDiskType?: string(name='SourceDiskType'),
      sourceStorageType?: string(name='SourceStorageType'),
      usage?: string(name='Usage'),
      snapshotType?: string(name='SnapshotType'),
      snapshotName?: string(name='SnapshotName'),
      snapshotId?: string(name='SnapshotId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      category?: string(name='Category'),
      snapshotSN?: string(name='SnapshotSN'),
      productCode?: string(name='ProductCode'),
    }
  ](name='Snapshot')
  }(name='Snapshots'),
}

model DescribeSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsResponseBody(name='body'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshots', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeSnapshotsUsageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model DescribeSnapshotsUsageResponseBody = {
  snapshotCount?: int32(name='SnapshotCount'),
  snapshotSize?: long(name='SnapshotSize'),
  requestId?: string(name='RequestId'),
}

model DescribeSnapshotsUsageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSnapshotsUsageResponseBody(name='body'),
}

async function describeSnapshotsUsageWithOptions(request: DescribeSnapshotsUsageRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsUsageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSnapshotsUsage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSnapshotsUsage(request: DescribeSnapshotsUsageRequest): DescribeSnapshotsUsageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsUsageWithOptions(request, runtime);
}

model DescribeSpotAdviceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  cores?: int32(name='Cores'),
  memory?: float(name='Memory'),
  minCores?: int32(name='MinCores'),
  minMemory?: float(name='MinMemory'),
  zoneId?: string(name='ZoneId'),
  instanceTypeFamily?: string(name='InstanceTypeFamily'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel'),
  gpuSpec?: string(name='GpuSpec'),
  gpuAmount?: int32(name='GpuAmount'),
  instanceTypes?: [ string ](name='InstanceTypes'),
}

model DescribeSpotAdviceResponseBody = {
  requestId?: string(name='RequestId'),
  availableSpotZones?: {
    availableSpotZone?: [ 
    {
      availableSpotResources?: {
        availableSpotResource?: [ 
        {
          interruptRateDesc?: string(name='InterruptRateDesc'),
          averageSpotDiscount?: int32(name='AverageSpotDiscount'),
          instanceType?: string(name='InstanceType'),
          interruptionRate?: float(name='InterruptionRate'),
        }
      ](name='AvailableSpotResource')
      }(name='AvailableSpotResources'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='AvailableSpotZone')
  }(name='AvailableSpotZones'),
  regionId?: string(name='RegionId'),
}

model DescribeSpotAdviceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpotAdviceResponseBody(name='body'),
}

async function describeSpotAdviceWithOptions(request: DescribeSpotAdviceRequest, runtime: Util.RuntimeOptions): DescribeSpotAdviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSpotAdvice', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSpotAdvice(request: DescribeSpotAdviceRequest): DescribeSpotAdviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotAdviceWithOptions(request, runtime);
}

model DescribeSpotPriceHistoryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  networkType?: string(name='NetworkType'),
  instanceType?: string(name='InstanceType'),
  spotDuration?: int32(name='SpotDuration'),
  ioOptimized?: string(name='IoOptimized'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  OSType?: string(name='OSType'),
  offset?: int32(name='Offset'),
}

model DescribeSpotPriceHistoryResponseBody = {
  requestId?: string(name='RequestId'),
  currency?: string(name='Currency'),
  nextOffset?: int32(name='NextOffset'),
  spotPrices?: {
    spotPriceType?: [ 
    {
      ioOptimized?: string(name='IoOptimized'),
      zoneId?: string(name='ZoneId'),
      spotPrice?: float(name='SpotPrice'),
      timestamp?: string(name='Timestamp'),
      networkType?: string(name='NetworkType'),
      instanceType?: string(name='InstanceType'),
      originPrice?: float(name='OriginPrice'),
    }
  ](name='SpotPriceType')
  }(name='SpotPrices'),
}

model DescribeSpotPriceHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSpotPriceHistoryResponseBody(name='body'),
}

async function describeSpotPriceHistoryWithOptions(request: DescribeSpotPriceHistoryRequest, runtime: Util.RuntimeOptions): DescribeSpotPriceHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSpotPriceHistory', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSpotPriceHistory(request: DescribeSpotPriceHistoryRequest): DescribeSpotPriceHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSpotPriceHistoryWithOptions(request, runtime);
}

model DescribeStorageCapacityUnitsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  name?: string(name='Name'),
  capacity?: int32(name='Capacity'),
  allocationType?: string(name='AllocationType'),
  storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId'),
  status?: [ string ](name='Status'),
}

model DescribeStorageCapacityUnitsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  storageCapacityUnits?: {
    storageCapacityUnit?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      startTime?: string(name='StartTime'),
      capacity?: int32(name='Capacity'),
      description?: string(name='Description'),
      allocationStatus?: string(name='AllocationStatus'),
      expiredTime?: string(name='ExpiredTime'),
      storageCapacityUnitId?: string(name='StorageCapacityUnitId'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
    }
  ](name='StorageCapacityUnit')
  }(name='StorageCapacityUnits'),
}

model DescribeStorageCapacityUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageCapacityUnitsResponseBody(name='body'),
}

async function describeStorageCapacityUnitsWithOptions(request: DescribeStorageCapacityUnitsRequest, runtime: Util.RuntimeOptions): DescribeStorageCapacityUnitsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStorageCapacityUnits', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStorageCapacityUnits(request: DescribeStorageCapacityUnitsRequest): DescribeStorageCapacityUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageCapacityUnitsWithOptions(request, runtime);
}

model DescribeStorageSetDetailsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  diskIds?: string(name='DiskIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeStorageSetDetailsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  disks?: {
    disk?: [ 
    {
      creationTime?: string(name='CreationTime'),
      diskName?: string(name='DiskName'),
      zoneId?: string(name='ZoneId'),
      storageSetId?: string(name='StorageSetId'),
      diskId?: string(name='DiskId'),
      category?: string(name='Category'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
      regionId?: string(name='RegionId'),
    }
  ](name='Disk')
  }(name='Disks'),
}

model DescribeStorageSetDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageSetDetailsResponseBody(name='body'),
}

async function describeStorageSetDetailsWithOptions(request: DescribeStorageSetDetailsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStorageSetDetails', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStorageSetDetails(request: DescribeStorageSetDetailsRequest): DescribeStorageSetDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetDetailsWithOptions(request, runtime);
}

model DescribeStorageSetsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  storageSetIds?: string(name='StorageSetIds'),
  zoneId?: string(name='ZoneId'),
  storageSetName?: string(name='StorageSetName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeStorageSetsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  storageSets?: {
    storageSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      zoneId?: string(name='ZoneId'),
      storageSetId?: string(name='StorageSetId'),
      storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
      storageSetName?: string(name='StorageSetName'),
      regionId?: string(name='RegionId'),
    }
  ](name='StorageSet')
  }(name='StorageSets'),
}

model DescribeStorageSetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageSetsResponseBody(name='body'),
}

async function describeStorageSetsWithOptions(request: DescribeStorageSetsRequest, runtime: Util.RuntimeOptions): DescribeStorageSetsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeStorageSets', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeStorageSets(request: DescribeStorageSetsRequest): DescribeStorageSetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStorageSetsWithOptions(request, runtime);
}

model DescribeTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  regionId?: string(name='RegionId'),
  category?: string(name='Category'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeTagsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tags?: {
    tag?: [ 
    {
      resourceTypeCount?: {
        instance?: int32(name='Instance'),
        image?: int32(name='Image'),
        snapshotPolicy?: int32(name='SnapshotPolicy'),
        ddh?: int32(name='Ddh'),
        securitygroup?: int32(name='Securitygroup'),
        snapshot?: int32(name='Snapshot'),
        reservedInstance?: int32(name='ReservedInstance'),
        eni?: int32(name='Eni'),
        launchTemplate?: int32(name='LaunchTemplate'),
        keyPair?: int32(name='KeyPair'),
        disk?: int32(name='Disk'),
        volume?: int32(name='Volume'),
      }(name='ResourceTypeCount'),
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model DescribeTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagsResponseBody(name='body'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTags', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model DescribeTaskAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  taskId?: string(name='TaskId'),
}

model DescribeTaskAttributeResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  taskAction?: string(name='TaskAction'),
  successCount?: int32(name='SuccessCount'),
  taskStatus?: string(name='TaskStatus'),
  finishedTime?: string(name='FinishedTime'),
  totalCount?: int32(name='TotalCount'),
  taskProcess?: string(name='TaskProcess'),
  supportCancel?: string(name='SupportCancel'),
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          value?: string(name='Value'),
          name?: string(name='Name'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet'),
      operationStatus?: string(name='OperationStatus'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet'),
  creationTime?: string(name='CreationTime'),
  failedCount?: int32(name='FailedCount'),
  regionId?: string(name='RegionId'),
}

model DescribeTaskAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskAttributeResponseBody(name='body'),
}

async function describeTaskAttributeWithOptions(request: DescribeTaskAttributeRequest, runtime: Util.RuntimeOptions): DescribeTaskAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTaskAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTaskAttribute(request: DescribeTaskAttributeRequest): DescribeTaskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskAttributeWithOptions(request, runtime);
}

model DescribeTasksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  taskIds?: string(name='TaskIds'),
  taskAction?: string(name='TaskAction'),
  taskStatus?: string(name='TaskStatus'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeTasksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  taskSet?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      taskStatus?: string(name='TaskStatus'),
      finishedTime?: string(name='FinishedTime'),
      supportCancel?: string(name='SupportCancel'),
      taskId?: string(name='TaskId'),
      taskAction?: string(name='TaskAction'),
    }
  ](name='Task')
  }(name='TaskSet'),
  regionId?: string(name='RegionId'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeTasks', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeUserBusinessBehaviorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  statusKey?: string(name='statusKey'),
}

model DescribeUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
  statusValue?: string(name='StatusValue'),
}

model DescribeUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBusinessBehaviorResponseBody(name='body'),
}

async function describeUserBusinessBehaviorWithOptions(request: DescribeUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): DescribeUserBusinessBehaviorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserBusinessBehavior', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserBusinessBehavior(request: DescribeUserBusinessBehaviorRequest): DescribeUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBusinessBehaviorWithOptions(request, runtime);
}

model DescribeUserDataRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model DescribeUserDataResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  userData?: string(name='UserData'),
  regionId?: string(name='RegionId'),
}

model DescribeUserDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserDataResponseBody(name='body'),
}

async function describeUserDataWithOptions(request: DescribeUserDataRequest, runtime: Util.RuntimeOptions): DescribeUserDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserData', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserData(request: DescribeUserDataRequest): DescribeUserDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserDataWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeVirtualBorderRoutersResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  virtualBorderRouterSet?: {
    virtualBorderRouterType?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      vlanInterfaceId?: string(name='VlanInterfaceId'),
      circuitCode?: string(name='CircuitCode'),
      physicalConnectionOwnerUid?: string(name='PhysicalConnectionOwnerUid'),
      localGatewayIp?: string(name='LocalGatewayIp'),
      activationTime?: string(name='ActivationTime'),
      physicalConnectionBusinessStatus?: string(name='PhysicalConnectionBusinessStatus'),
      peeringSubnetMask?: string(name='PeeringSubnetMask'),
      routeTableId?: string(name='RouteTableId'),
      description?: string(name='Description'),
      physicalConnectionStatus?: string(name='PhysicalConnectionStatus'),
      recoveryTime?: string(name='RecoveryTime'),
      terminationTime?: string(name='TerminationTime'),
      peerGatewayIp?: string(name='PeerGatewayIp'),
      name?: string(name='Name'),
      accessPointId?: string(name='AccessPointId'),
      vbrId?: string(name='VbrId'),
      physicalConnectionId?: string(name='PhysicalConnectionId'),
      vlanId?: int32(name='VlanId'),
    }
  ](name='VirtualBorderRouterType')
  }(name='VirtualBorderRouterSet'),
}

model DescribeVirtualBorderRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersResponseBody(name='body'),
}

async function describeVirtualBorderRoutersWithOptions(request: DescribeVirtualBorderRoutersRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVirtualBorderRouters', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVirtualBorderRouters(request: DescribeVirtualBorderRoutersRequest): DescribeVirtualBorderRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersWithOptions(request, runtime);
}

model DescribeVirtualBorderRoutersForPhysicalConnectionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  virtualBorderRouterForPhysicalConnectionSet?: {
    virtualBorderRouterForPhysicalConnectionType?: [ 
    {
      creationTime?: string(name='CreationTime'),
      circuitCode?: string(name='CircuitCode'),
      recoveryTime?: string(name='RecoveryTime'),
      terminationTime?: string(name='TerminationTime'),
      activationTime?: string(name='ActivationTime'),
      vbrOwnerUid?: long(name='VbrOwnerUid'),
      vbrId?: string(name='VbrId'),
      vlanId?: int32(name='VlanId'),
    }
  ](name='VirtualBorderRouterForPhysicalConnectionType')
  }(name='VirtualBorderRouterForPhysicalConnectionSet'),
}

model DescribeVirtualBorderRoutersForPhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVirtualBorderRoutersForPhysicalConnectionResponseBody(name='body'),
}

async function describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest, runtime: Util.RuntimeOptions): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVirtualBorderRoutersForPhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVirtualBorderRoutersForPhysicalConnection(request: DescribeVirtualBorderRoutersForPhysicalConnectionRequest): DescribeVirtualBorderRoutersForPhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVirtualBorderRoutersForPhysicalConnectionWithOptions(request, runtime);
}

model DescribeVpcsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
  regionId?: string(name='RegionId'),
  isDefault?: boolean(name='IsDefault'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeVpcsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  vpcs?: {
    vpc?: [ 
    {
      creationTime?: string(name='CreationTime'),
      vpcName?: string(name='VpcName'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      VRouterId?: string(name='VRouterId'),
      isDefault?: boolean(name='IsDefault'),
      cidrBlock?: string(name='CidrBlock'),
      description?: string(name='Description'),
      vSwitchIds?: {
        vSwitchId?: [ string ](name='VSwitchId')
      }(name='VSwitchIds'),
      userCidrs?: {
        userCidr?: [ string ](name='UserCidr')
      }(name='UserCidrs'),
      regionId?: string(name='RegionId'),
    }
  ](name='Vpc')
  }(name='Vpcs'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeVpcsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcsResponseBody(name='body'),
}

async function describeVpcsWithOptions(request: DescribeVpcsRequest, runtime: Util.RuntimeOptions): DescribeVpcsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcs', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcs(request: DescribeVpcsRequest): DescribeVpcsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcsWithOptions(request, runtime);
}

model DescribeVRoutersRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VRouterId?: string(name='VRouterId'),
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeVRoutersResponseBody = {
  VRouters?: {
    VRouter?: [ 
    {
      vpcId?: string(name='VpcId'),
      creationTime?: string(name='CreationTime'),
      VRouterId?: string(name='VRouterId'),
      description?: string(name='Description'),
      VRouterName?: string(name='VRouterName'),
      routeTableIds?: {
        routeTableId?: [ string ](name='RouteTableId')
      }(name='RouteTableIds'),
      regionId?: string(name='RegionId'),
    }
  ](name='VRouter')
  }(name='VRouters'),
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeVRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVRoutersResponseBody(name='body'),
}

async function describeVRoutersWithOptions(request: DescribeVRoutersRequest, runtime: Util.RuntimeOptions): DescribeVRoutersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVRouters', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVRouters(request: DescribeVRoutersRequest): DescribeVRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVRoutersWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
  regionId?: string(name='RegionId'),
  isDefault?: boolean(name='IsDefault'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DescribeVSwitchesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  vSwitches?: {
    vSwitch?: [ 
    {
      creationTime?: string(name='CreationTime'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      isDefault?: boolean(name='IsDefault'),
      vSwitchId?: string(name='VSwitchId'),
      cidrBlock?: string(name='CidrBlock'),
      description?: string(name='Description'),
      availableIpAddressCount?: long(name='AvailableIpAddressCount'),
      resourceGroupId?: string(name='ResourceGroupId'),
      zoneId?: string(name='ZoneId'),
      vSwitchName?: string(name='VSwitchName'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVSwitches', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DescribeZonesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  verbose?: boolean(name='Verbose'),
  instanceChargeType?: string(name='InstanceChargeType'),
  spotStrategy?: string(name='SpotStrategy'),
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    zone?: [ 
    {
      availableResourceCreation?: {
        resourceTypes?: [ string ](name='ResourceTypes')
      }(name='AvailableResourceCreation'),
      dedicatedHostGenerations?: {
        dedicatedHostGeneration?: [ string ](name='DedicatedHostGeneration')
      }(name='DedicatedHostGenerations'),
      localName?: string(name='LocalName'),
      availableInstanceTypes?: {
        instanceTypes?: [ string ](name='InstanceTypes')
      }(name='AvailableInstanceTypes'),
      zoneId?: string(name='ZoneId'),
      availableDiskCategories?: {
        diskCategories?: [ string ](name='DiskCategories')
      }(name='AvailableDiskCategories'),
      availableDedicatedHostTypes?: {
        dedicatedHostType?: [ string ](name='DedicatedHostType')
      }(name='AvailableDedicatedHostTypes'),
      availableVolumeCategories?: {
        volumeCategories?: [ string ](name='VolumeCategories')
      }(name='AvailableVolumeCategories'),
      availableResources?: {
        resourcesInfo?: [ 
        {
          ioOptimized?: boolean(name='IoOptimized'),
          systemDiskCategories?: {
            supportedSystemDiskCategory?: [ string ](name='supportedSystemDiskCategory')
          }(name='SystemDiskCategories'),
          instanceGenerations?: {
            supportedInstanceGeneration?: [ string ](name='supportedInstanceGeneration')
          }(name='InstanceGenerations'),
          dataDiskCategories?: {
            supportedDataDiskCategory?: [ string ](name='supportedDataDiskCategory')
          }(name='DataDiskCategories'),
          instanceTypes?: {
            supportedInstanceType?: [ string ](name='supportedInstanceType')
          }(name='InstanceTypes'),
          instanceTypeFamilies?: {
            supportedInstanceTypeFamily?: [ string ](name='supportedInstanceTypeFamily')
          }(name='InstanceTypeFamilies'),
          networkTypes?: {
            supportedNetworkCategory?: [ string ](name='supportedNetworkCategory')
          }(name='NetworkTypes'),
        }
      ](name='ResourcesInfo')
      }(name='AvailableResources'),
    }
  ](name='Zone')
  }(name='Zones'),
}

model DescribeZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeZonesResponseBody(name='body'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeZones', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model DetachClassicLinkVpcRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  vpcId?: string(name='VpcId'),
}

model DetachClassicLinkVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachClassicLinkVpcResponse = {
  headers: map[string]string(name='headers'),
  body: DetachClassicLinkVpcResponseBody(name='body'),
}

async function detachClassicLinkVpcWithOptions(request: DetachClassicLinkVpcRequest, runtime: Util.RuntimeOptions): DetachClassicLinkVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachClassicLinkVpc', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachClassicLinkVpc(request: DetachClassicLinkVpcRequest): DetachClassicLinkVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachClassicLinkVpcWithOptions(request, runtime);
}

model DetachDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  diskId?: string(name='DiskId'),
  deleteWithInstance?: boolean(name='DeleteWithInstance'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DetachDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachDiskResponse = {
  headers: map[string]string(name='headers'),
  body: DetachDiskResponseBody(name='body'),
}

async function detachDiskWithOptions(request: DetachDiskRequest, runtime: Util.RuntimeOptions): DetachDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachDisk(request: DetachDiskRequest): DetachDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachDiskWithOptions(request, runtime);
}

model DetachInstanceRamRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  ramRoleName?: string(name='RamRoleName'),
  instanceIds?: string(name='InstanceIds'),
}

model DetachInstanceRamRoleResponseBody = {
  totalCount?: int32(name='TotalCount'),
  ramRoleName?: string(name='RamRoleName'),
  requestId?: string(name='RequestId'),
  failCount?: int32(name='FailCount'),
  detachInstanceRamRoleResults?: {
    detachInstanceRamRoleResult?: [ 
    {
      instanceRamRoleSets?: {
        instanceRamRoleSet?: [ 
        {
          ramRoleName?: string(name='RamRoleName'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='InstanceRamRoleSet')
      }(name='InstanceRamRoleSets'),
      success?: boolean(name='Success'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='DetachInstanceRamRoleResult')
  }(name='DetachInstanceRamRoleResults'),
}

model DetachInstanceRamRoleResponse = {
  headers: map[string]string(name='headers'),
  body: DetachInstanceRamRoleResponseBody(name='body'),
}

async function detachInstanceRamRoleWithOptions(request: DetachInstanceRamRoleRequest, runtime: Util.RuntimeOptions): DetachInstanceRamRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachInstanceRamRole', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachInstanceRamRole(request: DetachInstanceRamRoleRequest): DetachInstanceRamRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachInstanceRamRoleWithOptions(request, runtime);
}

model DetachKeyPairRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairName?: string(name='KeyPairName'),
  instanceIds?: string(name='InstanceIds'),
}

model DetachKeyPairResponseBody = {
  keyPairName?: string(name='KeyPairName'),
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  results?: {
    result?: [ 
    {
      success?: string(name='Success'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='Result')
  }(name='Results'),
  failCount?: string(name='FailCount'),
}

model DetachKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: DetachKeyPairResponseBody(name='body'),
}

async function detachKeyPairWithOptions(request: DetachKeyPairRequest, runtime: Util.RuntimeOptions): DetachKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachKeyPair', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachKeyPair(request: DetachKeyPairRequest): DetachKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachKeyPairWithOptions(request, runtime);
}

model DetachNetworkInterfaceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  instanceId?: string(name='InstanceId'),
  trunkNetworkInstanceId?: string(name='TrunkNetworkInstanceId'),
}

model DetachNetworkInterfaceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachNetworkInterfaceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachNetworkInterfaceResponseBody(name='body'),
}

async function detachNetworkInterfaceWithOptions(request: DetachNetworkInterfaceRequest, runtime: Util.RuntimeOptions): DetachNetworkInterfaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachNetworkInterface', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachNetworkInterface(request: DetachNetworkInterfaceRequest): DetachNetworkInterfaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachNetworkInterfaceWithOptions(request, runtime);
}

model DisableActivationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  activationId?: string(name='ActivationId'),
}

model DisableActivationResponseBody = {
  requestId?: string(name='RequestId'),
  activation?: {
    creationTime?: string(name='CreationTime'),
    deregisteredCount?: int32(name='DeregisteredCount'),
    instanceCount?: int32(name='InstanceCount'),
    description?: string(name='Description'),
    registeredCount?: int32(name='RegisteredCount'),
    instanceName?: string(name='InstanceName'),
    disabled?: boolean(name='Disabled'),
    ipAddressRange?: string(name='IpAddressRange'),
    timeToLiveInHours?: long(name='TimeToLiveInHours'),
    activationId?: string(name='ActivationId'),
  }(name='Activation'),
}

model DisableActivationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableActivationResponseBody(name='body'),
}

async function disableActivationWithOptions(request: DisableActivationRequest, runtime: Util.RuntimeOptions): DisableActivationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableActivation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableActivation(request: DisableActivationRequest): DisableActivationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableActivationWithOptions(request, runtime);
}

model EipFillParamsRequest {
  data?: string(name='data'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model EipFillParamsResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
}

model EipFillParamsResponse = {
  headers: map[string]string(name='headers'),
  body: EipFillParamsResponseBody(name='body'),
}

async function eipFillParamsWithOptions(request: EipFillParamsRequest, runtime: Util.RuntimeOptions): EipFillParamsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EipFillParams', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function eipFillParams(request: EipFillParamsRequest): EipFillParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillParamsWithOptions(request, runtime);
}

model EipFillProductRequest {
  data?: string(name='data'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model EipFillProductResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
}

model EipFillProductResponse = {
  headers: map[string]string(name='headers'),
  body: EipFillProductResponseBody(name='body'),
}

async function eipFillProductWithOptions(request: EipFillProductRequest, runtime: Util.RuntimeOptions): EipFillProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EipFillProduct', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function eipFillProduct(request: EipFillProductRequest): EipFillProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipFillProductWithOptions(request, runtime);
}

model EipNotifyPaidRequest {
  data?: string(name='data'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model EipNotifyPaidResponseBody = {
  code?: string(name='code'),
  data?: string(name='data'),
  success?: boolean(name='success'),
  requestId?: string(name='requestId'),
  message?: string(name='message'),
}

model EipNotifyPaidResponse = {
  headers: map[string]string(name='headers'),
  body: EipNotifyPaidResponseBody(name='body'),
}

async function eipNotifyPaidWithOptions(request: EipNotifyPaidRequest, runtime: Util.RuntimeOptions): EipNotifyPaidResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EipNotifyPaid', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function eipNotifyPaid(request: EipNotifyPaidRequest): EipNotifyPaidResponse {
  var runtime = new Util.RuntimeOptions{};
  return eipNotifyPaidWithOptions(request, runtime);
}

model EnablePhysicalConnectionRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model EnablePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnablePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: EnablePhysicalConnectionResponseBody(name='body'),
}

async function enablePhysicalConnectionWithOptions(request: EnablePhysicalConnectionRequest, runtime: Util.RuntimeOptions): EnablePhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnablePhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enablePhysicalConnection(request: EnablePhysicalConnectionRequest): EnablePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return enablePhysicalConnectionWithOptions(request, runtime);
}

model ExportImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  OSSBucket?: string(name='OSSBucket'),
  OSSPrefix?: string(name='OSSPrefix'),
  imageFormat?: string(name='ImageFormat'),
  roleName?: string(name='RoleName'),
}

model ExportImageResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  regionId?: string(name='RegionId'),
}

model ExportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ExportImageResponseBody(name='body'),
}

async function exportImageWithOptions(request: ExportImageRequest, runtime: Util.RuntimeOptions): ExportImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model ExportSnapshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotId?: string(name='SnapshotId'),
  regionId?: string(name='RegionId'),
  ossBucket?: string(name='OssBucket'),
  roleName?: string(name='RoleName'),
}

model ExportSnapshotResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model ExportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ExportSnapshotResponseBody(name='body'),
}

async function exportSnapshotWithOptions(request: ExportSnapshotRequest, runtime: Util.RuntimeOptions): ExportSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportSnapshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportSnapshot(request: ExportSnapshotRequest): ExportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportSnapshotWithOptions(request, runtime);
}

model GetInstanceConsoleOutputRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  removeSymbols?: boolean(name='RemoveSymbols'),
}

model GetInstanceConsoleOutputResponseBody = {
  consoleOutput?: string(name='ConsoleOutput'),
  requestId?: string(name='RequestId'),
  lastUpdateTime?: string(name='LastUpdateTime'),
  instanceId?: string(name='InstanceId'),
}

model GetInstanceConsoleOutputResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceConsoleOutputResponseBody(name='body'),
}

async function getInstanceConsoleOutputWithOptions(request: GetInstanceConsoleOutputRequest, runtime: Util.RuntimeOptions): GetInstanceConsoleOutputResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceConsoleOutput', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceConsoleOutput(request: GetInstanceConsoleOutputRequest): GetInstanceConsoleOutputResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceConsoleOutputWithOptions(request, runtime);
}

model GetInstanceScreenshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  wakeUp?: boolean(name='WakeUp'),
}

model GetInstanceScreenshotResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  screenshot?: string(name='Screenshot'),
}

model GetInstanceScreenshotResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceScreenshotResponseBody(name='body'),
}

async function getInstanceScreenshotWithOptions(request: GetInstanceScreenshotRequest, runtime: Util.RuntimeOptions): GetInstanceScreenshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetInstanceScreenshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getInstanceScreenshot(request: GetInstanceScreenshotRequest): GetInstanceScreenshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceScreenshotWithOptions(request, runtime);
}

model ImportImageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageName?: string(name='ImageName'),
  description?: string(name='Description'),
  architecture?: string(name='Architecture'),
  OSType?: string(name='OSType'),
  platform?: string(name='Platform'),
  bootMode?: string(name='BootMode'),
  roleName?: string(name='RoleName'),
  licenseType?: string(name='LicenseType'),
  resourceGroupId?: string(name='ResourceGroupId'),
  diskDeviceMapping?: [ 
    {
      diskImSize?: int32(name='DiskImSize'),
      device?: string(name='Device'),
      OSSBucket?: string(name='OSSBucket'),
      format?: string(name='Format'),
      OSSObject?: string(name='OSSObject'),
      diskImageSize?: int32(name='DiskImageSize'),
    }
  ](name='DiskDeviceMapping'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ImportImageResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  imageId?: string(name='ImageId'),
  regionId?: string(name='RegionId'),
}

model ImportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ImportImageResponseBody(name='body'),
}

async function importImageWithOptions(request: ImportImageRequest, runtime: Util.RuntimeOptions): ImportImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportImage', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importImage(request: ImportImageRequest): ImportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return importImageWithOptions(request, runtime);
}

model ImportKeyPairRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  keyPairName?: string(name='KeyPairName'),
  publicKeyBody?: string(name='PublicKeyBody'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  keyPairName?: string(name='KeyPairName'),
  requestId?: string(name='RequestId'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: ImportKeyPairResponseBody(name='body'),
}

async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportKeyPair', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model ImportSnapshotRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  snapshotName?: string(name='SnapshotName'),
  regionId?: string(name='RegionId'),
  ossBucket?: string(name='OssBucket'),
  ossObject?: string(name='OssObject'),
  roleName?: string(name='RoleName'),
}

model ImportSnapshotResponseBody = {
  snapshotId?: string(name='SnapshotId'),
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model ImportSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: ImportSnapshotResponseBody(name='body'),
}

async function importSnapshotWithOptions(request: ImportSnapshotRequest, runtime: Util.RuntimeOptions): ImportSnapshotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportSnapshot', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importSnapshot(request: ImportSnapshotRequest): ImportSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSnapshotWithOptions(request, runtime);
}

model InstallCloudAssistantRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: [ string ](name='InstanceId'),
}

model InstallCloudAssistantResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallCloudAssistantResponse = {
  headers: map[string]string(name='headers'),
  body: InstallCloudAssistantResponseBody(name='body'),
}

async function installCloudAssistantWithOptions(request: InstallCloudAssistantRequest, runtime: Util.RuntimeOptions): InstallCloudAssistantResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InstallCloudAssistant', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function installCloudAssistant(request: InstallCloudAssistantRequest): InstallCloudAssistantResponse {
  var runtime = new Util.RuntimeOptions{};
  return installCloudAssistantWithOptions(request, runtime);
}

model InvokeCommandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  commandId?: string(name='CommandId'),
  timed?: boolean(name='Timed'),
  frequency?: string(name='Frequency'),
  parameters?: map[string]any(name='Parameters'),
  username?: string(name='Username'),
  windowsPasswordName?: string(name='WindowsPasswordName'),
  instanceId?: [ string ](name='InstanceId'),
}

model InvokeCommandShrinkRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  commandId?: string(name='CommandId'),
  timed?: boolean(name='Timed'),
  frequency?: string(name='Frequency'),
  parametersShrink?: string(name='Parameters'),
  username?: string(name='Username'),
  windowsPasswordName?: string(name='WindowsPasswordName'),
  instanceId?: [ string ](name='InstanceId'),
}

model InvokeCommandResponseBody = {
  requestId?: string(name='RequestId'),
  invokeId?: string(name='InvokeId'),
}

model InvokeCommandResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeCommandResponseBody(name='body'),
}

async function invokeCommandWithOptions(tmpReq: InvokeCommandRequest, runtime: Util.RuntimeOptions): InvokeCommandResponse {
  Util.validateModel(tmpReq);
  var request = new InvokeCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InvokeCommand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function invokeCommand(request: InvokeCommandRequest): InvokeCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return invokeCommandWithOptions(request, runtime);
}

model JoinResourceGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model JoinResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinResourceGroupResponseBody(name='body'),
}

async function joinResourceGroupWithOptions(request: JoinResourceGroupRequest, runtime: Util.RuntimeOptions): JoinResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinResourceGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinResourceGroup(request: JoinResourceGroupRequest): JoinResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinResourceGroupWithOptions(request, runtime);
}

model JoinSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceId?: string(name='InstanceId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinSecurityGroupResponseBody(name='body'),
}

async function joinSecurityGroupWithOptions(request: JoinSecurityGroupRequest, runtime: Util.RuntimeOptions): JoinSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinSecurityGroupWithOptions(request, runtime);
}

model LeaveSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceId?: string(name='InstanceId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model LeaveSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LeaveSecurityGroupResponseBody(name='body'),
}

async function leaveSecurityGroupWithOptions(request: LeaveSecurityGroupRequest, runtime: Util.RuntimeOptions): LeaveSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LeaveSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveSecurityGroupWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tagFilter?: [ 
    {
      tagValues?: [ string ](name='TagValues'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagFilter'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyAutoProvisioningGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  autoProvisioningGroupId?: string(name='AutoProvisioningGroupId'),
  excessCapacityTerminationPolicy?: string(name='ExcessCapacityTerminationPolicy'),
  defaultTargetCapacityType?: string(name='DefaultTargetCapacityType'),
  terminateInstancesWithExpiration?: boolean(name='TerminateInstancesWithExpiration'),
  maxSpotPrice?: float(name='MaxSpotPrice'),
  totalTargetCapacity?: string(name='TotalTargetCapacity'),
  payAsYouGoTargetCapacity?: string(name='PayAsYouGoTargetCapacity'),
  spotTargetCapacity?: string(name='SpotTargetCapacity'),
  autoProvisioningGroupName?: string(name='AutoProvisioningGroupName'),
  launchTemplateConfig?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      maxPrice?: double(name='MaxPrice'),
      priority?: int32(name='Priority'),
      weightedCapacity?: double(name='WeightedCapacity'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='LaunchTemplateConfig'),
}

model ModifyAutoProvisioningGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoProvisioningGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoProvisioningGroupResponseBody(name='body'),
}

async function modifyAutoProvisioningGroupWithOptions(request: ModifyAutoProvisioningGroupRequest, runtime: Util.RuntimeOptions): ModifyAutoProvisioningGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoProvisioningGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoProvisioningGroup(request: ModifyAutoProvisioningGroupRequest): ModifyAutoProvisioningGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoProvisioningGroupWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  systemDiskPolicyEnabled?: boolean(name='SystemDiskPolicyEnabled'),
  systemDiskPolicyTimePeriod?: int32(name='SystemDiskPolicyTimePeriod'),
  systemDiskPolicyRetentionDays?: int32(name='SystemDiskPolicyRetentionDays'),
  systemDiskPolicyRetentionLastWeek?: boolean(name='SystemDiskPolicyRetentionLastWeek'),
  dataDiskPolicyEnabled?: boolean(name='DataDiskPolicyEnabled'),
  dataDiskPolicyTimePeriod?: int32(name='DataDiskPolicyTimePeriod'),
  dataDiskPolicyRetentionDays?: int32(name='DataDiskPolicyRetentionDays'),
  dataDiskPolicyRetentionLastWeek?: boolean(name='DataDiskPolicyRetentionLastWeek'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyAutoSnapshotPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoSnapshotPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyExRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='regionId'),
  autoSnapshotPolicyId?: string(name='autoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='autoSnapshotPolicyName'),
  timePoints?: string(name='timePoints'),
  repeatWeekdays?: string(name='repeatWeekdays'),
  retentionDays?: int32(name='retentionDays'),
  enableCrossRegionCopy?: boolean(name='EnableCrossRegionCopy'),
  targetCopyRegions?: string(name='TargetCopyRegions'),
  copiedSnapshotsRetentionDays?: int32(name='CopiedSnapshotsRetentionDays'),
}

model ModifyAutoSnapshotPolicyExResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAutoSnapshotPolicyExResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAutoSnapshotPolicyExResponseBody(name='body'),
}

async function modifyAutoSnapshotPolicyExWithOptions(request: ModifyAutoSnapshotPolicyExRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyExResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAutoSnapshotPolicyEx', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAutoSnapshotPolicyEx(request: ModifyAutoSnapshotPolicyExRequest): ModifyAutoSnapshotPolicyExResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyExWithOptions(request, runtime);
}

model ModifyBandwidthPackageSpecRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  bandwidth?: string(name='Bandwidth'),
}

model ModifyBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyBandwidthPackageSpecWithOptions(request: ModifyBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBandwidthPackageSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBandwidthPackageSpec(request: ModifyBandwidthPackageSpecRequest): ModifyBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBandwidthPackageSpecWithOptions(request, runtime);
}

model ModifyCapacityReservationRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  description?: string(name='Description'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  endTimeType?: string(name='EndTimeType'),
  platform?: string(name='Platform'),
  instanceAmount?: int32(name='InstanceAmount'),
}

model ModifyCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCapacityReservationResponseBody(name='body'),
}

async function modifyCapacityReservationWithOptions(request: ModifyCapacityReservationRequest, runtime: Util.RuntimeOptions): ModifyCapacityReservationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCapacityReservation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCapacityReservation(request: ModifyCapacityReservationRequest): ModifyCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCapacityReservationWithOptions(request, runtime);
}

model ModifyCommandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  commandId?: string(name='CommandId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  commandContent?: string(name='CommandContent'),
  workingDir?: string(name='WorkingDir'),
  timeout?: long(name='Timeout'),
}

model ModifyCommandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCommandResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCommandResponseBody(name='body'),
}

async function modifyCommandWithOptions(request: ModifyCommandRequest, runtime: Util.RuntimeOptions): ModifyCommandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCommand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCommand(request: ModifyCommandRequest): ModifyCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCommandWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  networkAttributes?: {
    slbUdpTimeout?: int32(name='SlbUdpTimeout'),
    udpTimeout?: int32(name='UdpTimeout'),
  }(name='NetworkAttributes'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  description?: string(name='Description'),
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  autoPlacement?: string(name='AutoPlacement'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  cpuOverCommitRatio?: float(name='CpuOverCommitRatio'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoReleaseTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDedicatedHostAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAutoReleaseTimeResponseBody(name='body'),
}

async function modifyDedicatedHostAutoReleaseTimeWithOptions(request: ModifyDedicatedHostAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoReleaseTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAutoReleaseTime', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAutoReleaseTime(request: ModifyDedicatedHostAutoReleaseTimeRequest): ModifyDedicatedHostAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyDedicatedHostAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  regionId?: string(name='RegionId'),
  duration?: int32(name='Duration'),
  periodUnit?: string(name='PeriodUnit'),
  autoRenew?: boolean(name='AutoRenew'),
  renewalStatus?: string(name='RenewalStatus'),
}

model ModifyDedicatedHostAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAutoRenewAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAutoRenewAttributeWithOptions(request: ModifyDedicatedHostAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAutoRenewAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAutoRenewAttribute(request: ModifyDedicatedHostAutoRenewAttributeRequest): ModifyDedicatedHostAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostClusterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  dedicatedHostClusterName?: string(name='DedicatedHostClusterName'),
  description?: string(name='Description'),
}

model ModifyDedicatedHostClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClusterAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostClusterAttributeWithOptions(request: ModifyDedicatedHostClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClusterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostClusterAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostClusterAttribute(request: ModifyDedicatedHostClusterAttributeRequest): ModifyDedicatedHostClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClusterAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostsChargeTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  regionId?: string(name='RegionId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  dryRun?: boolean(name='DryRun'),
  autoPay?: boolean(name='AutoPay'),
  dedicatedHostChargeType?: string(name='DedicatedHostChargeType'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  detailFee?: boolean(name='DetailFee'),
}

model ModifyDedicatedHostsChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      instanceId?: string(name='InstanceId'),
      currency?: string(name='Currency'),
      fee?: string(name='Fee'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyDedicatedHostsChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostsChargeTypeResponseBody(name='body'),
}

async function modifyDedicatedHostsChargeTypeWithOptions(request: ModifyDedicatedHostsChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostsChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostsChargeType', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostsChargeType(request: ModifyDedicatedHostsChargeTypeRequest): ModifyDedicatedHostsChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostsChargeTypeWithOptions(request, runtime);
}

model ModifyDemandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  demandId?: string(name='DemandId'),
  demandName?: string(name='DemandName'),
  demandDescription?: string(name='DemandDescription'),
  instanceType?: string(name='InstanceType'),
  amount?: int32(name='Amount'),
  instanceChargeType?: string(name='InstanceChargeType'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model ModifyDemandResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDemandResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDemandResponseBody(name='body'),
}

async function modifyDemandWithOptions(request: ModifyDemandRequest, runtime: Util.RuntimeOptions): ModifyDemandResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDemand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDemand(request: ModifyDemandRequest): ModifyDemandResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDemandWithOptions(request, runtime);
}

model ModifyDeploymentSetAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  deploymentSetId?: string(name='DeploymentSetId'),
  description?: string(name='Description'),
  deploymentSetName?: string(name='DeploymentSetName'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyDeploymentSetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDeploymentSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDeploymentSetAttributeResponseBody(name='body'),
}

async function modifyDeploymentSetAttributeWithOptions(request: ModifyDeploymentSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyDeploymentSetAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDeploymentSetAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDeploymentSetAttribute(request: ModifyDeploymentSetAttributeRequest): ModifyDeploymentSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDeploymentSetAttributeWithOptions(request, runtime);
}

model ModifyDiskAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  diskName?: string(name='DiskName'),
  description?: string(name='Description'),
  deleteWithInstance?: boolean(name='DeleteWithInstance'),
  deleteAutoSnapshot?: boolean(name='DeleteAutoSnapshot'),
  enableAutoSnapshot?: boolean(name='EnableAutoSnapshot'),
  ownerAccount?: string(name='OwnerAccount'),
  diskIds?: [ string ](name='DiskIds'),
}

model ModifyDiskAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDiskAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskAttributeResponseBody(name='body'),
}

async function modifyDiskAttributeWithOptions(request: ModifyDiskAttributeRequest, runtime: Util.RuntimeOptions): ModifyDiskAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDiskAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDiskAttribute(request: ModifyDiskAttributeRequest): ModifyDiskAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskAttributeWithOptions(request, runtime);
}

model ModifyDiskChargeTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  diskIds?: string(name='DiskIds'),
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  diskChargeType?: string(name='DiskChargeType'),
}

model ModifyDiskChargeTypeResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyDiskChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskChargeTypeResponseBody(name='body'),
}

async function modifyDiskChargeTypeWithOptions(request: ModifyDiskChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyDiskChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDiskChargeType', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDiskChargeType(request: ModifyDiskChargeTypeRequest): ModifyDiskChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskChargeTypeWithOptions(request, runtime);
}

model ModifyDiskSpecRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  diskId?: string(name='DiskId'),
  performanceLevel?: string(name='PerformanceLevel'),
  diskCategory?: string(name='DiskCategory'),
  dryRun?: boolean(name='DryRun'),
}

model ModifyDiskSpecResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyDiskSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiskSpecResponseBody(name='body'),
}

async function modifyDiskSpecWithOptions(request: ModifyDiskSpecRequest, runtime: Util.RuntimeOptions): ModifyDiskSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDiskSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDiskSpec(request: ModifyDiskSpecRequest): ModifyDiskSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDiskSpecWithOptions(request, runtime);
}

model ModifyEipAddressAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  bandwidth?: string(name='Bandwidth'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyEipAddressAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEipAddressAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEipAddressAttributeResponseBody(name='body'),
}

async function modifyEipAddressAttributeWithOptions(request: ModifyEipAddressAttributeRequest, runtime: Util.RuntimeOptions): ModifyEipAddressAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEipAddressAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEipAddressAttribute(request: ModifyEipAddressAttributeRequest): ModifyEipAddressAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEipAddressAttributeWithOptions(request, runtime);
}

model ModifyElasticityAssuranceRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
    name?: string(name='Name'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  description?: string(name='Description'),
}

model ModifyElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticityAssuranceResponseBody(name='body'),
}

async function modifyElasticityAssuranceWithOptions(request: ModifyElasticityAssuranceRequest, runtime: Util.RuntimeOptions): ModifyElasticityAssuranceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyElasticityAssurance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyElasticityAssurance(request: ModifyElasticityAssuranceRequest): ModifyElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticityAssuranceWithOptions(request, runtime);
}

model ModifyForwardEntryRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  forwardTableId?: string(name='ForwardTableId'),
  forwardEntryId?: string(name='ForwardEntryId'),
  externalIp?: string(name='ExternalIp'),
  externalPort?: string(name='ExternalPort'),
  internalIp?: string(name='InternalIp'),
  internalPort?: string(name='InternalPort'),
  ipProtocol?: string(name='IpProtocol'),
  regionId?: string(name='RegionId'),
}

model ModifyForwardEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyForwardEntryResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyForwardEntryResponseBody(name='body'),
}

async function modifyForwardEntryWithOptions(request: ModifyForwardEntryRequest, runtime: Util.RuntimeOptions): ModifyForwardEntryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyForwardEntry', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyForwardEntry(request: ModifyForwardEntryRequest): ModifyForwardEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyForwardEntryWithOptions(request, runtime);
}

model ModifyHaVipAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  haVipId?: string(name='HaVipId'),
  description?: string(name='Description'),
}

model ModifyHaVipAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHaVipAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHaVipAttributeResponseBody(name='body'),
}

async function modifyHaVipAttributeWithOptions(request: ModifyHaVipAttributeRequest, runtime: Util.RuntimeOptions): ModifyHaVipAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHaVipAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHaVipAttribute(request: ModifyHaVipAttributeRequest): ModifyHaVipAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHaVipAttributeWithOptions(request, runtime);
}

model ModifyHpcClusterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  hpcClusterId?: string(name='HpcClusterId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
}

model ModifyHpcClusterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHpcClusterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHpcClusterAttributeResponseBody(name='body'),
}

async function modifyHpcClusterAttributeWithOptions(request: ModifyHpcClusterAttributeRequest, runtime: Util.RuntimeOptions): ModifyHpcClusterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyHpcClusterAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyHpcClusterAttribute(request: ModifyHpcClusterAttributeRequest): ModifyHpcClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHpcClusterAttributeWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  status?: string(name='Status'),
  imageFamily?: string(name='ImageFamily'),
  bootMode?: string(name='BootMode'),
  licenseType?: string(name='LicenseType'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyImageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImageShareGroupPermissionRequest {
  addGroup?: [ string ](name='AddGroup'),
  removeGroup?: [ string ](name='RemoveGroup'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyImageShareGroupPermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageShareGroupPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageShareGroupPermissionResponseBody(name='body'),
}

async function modifyImageShareGroupPermissionWithOptions(request: ModifyImageShareGroupPermissionRequest, runtime: Util.RuntimeOptions): ModifyImageShareGroupPermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageShareGroupPermission', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageShareGroupPermission(request: ModifyImageShareGroupPermissionRequest): ModifyImageShareGroupPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageShareGroupPermissionWithOptions(request, runtime);
}

model ModifyImageSharePermissionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  ownerAccount?: string(name='OwnerAccount'),
  launchPermission?: string(name='LaunchPermission'),
  addAccount?: [ string ](name='AddAccount'),
  removeAccount?: [ string ](name='RemoveAccount'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageSharePermissionResponseBody(name='body'),
}

async function modifyImageSharePermissionWithOptions(request: ModifyImageSharePermissionRequest, runtime: Util.RuntimeOptions): ModifyImageSharePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageSharePermission', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageSharePermissionWithOptions(request, runtime);
}

model ModifyInstanceAttachmentAttributesRequest {
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
}

model ModifyInstanceAttachmentAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttachmentAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttachmentAttributesResponseBody(name='body'),
}

async function modifyInstanceAttachmentAttributesWithOptions(request: ModifyInstanceAttachmentAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttachmentAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttachmentAttributes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttachmentAttributes(request: ModifyInstanceAttachmentAttributesRequest): ModifyInstanceAttachmentAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttachmentAttributesWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  password?: string(name='Password'),
  hostName?: string(name='HostName'),
  instanceName?: string(name='InstanceName'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  userData?: string(name='UserData'),
  recyclable?: boolean(name='Recyclable'),
  creditSpecification?: string(name='CreditSpecification'),
  deletionProtection?: boolean(name='DeletionProtection'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
}

model ModifyInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model ModifyInstanceAutoReleaseTimeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyInstanceAutoReleaseTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoReleaseTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoReleaseTimeResponseBody(name='body'),
}

async function modifyInstanceAutoReleaseTimeWithOptions(request: ModifyInstanceAutoReleaseTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoReleaseTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAutoReleaseTime', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAutoReleaseTime(request: ModifyInstanceAutoReleaseTimeRequest): ModifyInstanceAutoReleaseTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoReleaseTimeWithOptions(request, runtime);
}

model ModifyInstanceAutoRenewAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  duration?: int32(name='Duration'),
  autoRenew?: boolean(name='AutoRenew'),
  renewalStatus?: string(name='RenewalStatus'),
  periodUnit?: string(name='PeriodUnit'),
}

model ModifyInstanceAutoRenewAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function modifyInstanceAutoRenewAttributeWithOptions(request: ModifyInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAutoRenewAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAutoRenewAttribute(request: ModifyInstanceAutoRenewAttributeRequest): ModifyInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyInstanceChargeTypeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceIds?: string(name='InstanceIds'),
  regionId?: string(name='RegionId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  includeDataDisks?: boolean(name='IncludeDataDisks'),
  dryRun?: boolean(name='DryRun'),
  autoPay?: boolean(name='AutoPay'),
  instanceChargeType?: string(name='InstanceChargeType'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  isDetailFee?: boolean(name='IsDetailFee'),
}

model ModifyInstanceChargeTypeResponseBody = {
  feeOfInstances?: {
    feeOfInstance?: [ 
    {
      instanceId?: string(name='InstanceId'),
      currency?: string(name='Currency'),
      fee?: string(name='Fee'),
    }
  ](name='FeeOfInstance')
  }(name='FeeOfInstances'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyInstanceChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceChargeTypeResponseBody(name='body'),
}

async function modifyInstanceChargeTypeWithOptions(request: ModifyInstanceChargeTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceChargeType', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceChargeType(request: ModifyInstanceChargeTypeRequest): ModifyInstanceChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceChargeTypeWithOptions(request, runtime);
}

model ModifyInstanceDeploymentRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  deploymentSetId?: string(name='DeploymentSetId'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo'),
  force?: boolean(name='Force'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  migrationType?: string(name='MigrationType'),
  instanceType?: string(name='InstanceType'),
  dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
}

model ModifyInstanceDeploymentResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceDeploymentResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceDeploymentResponseBody(name='body'),
}

async function modifyInstanceDeploymentWithOptions(request: ModifyInstanceDeploymentRequest, runtime: Util.RuntimeOptions): ModifyInstanceDeploymentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceDeployment', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceDeployment(request: ModifyInstanceDeploymentRequest): ModifyInstanceDeploymentResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceDeploymentWithOptions(request, runtime);
}

model ModifyInstanceMaintenanceAttributesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  actionOnMaintenance?: string(name='ActionOnMaintenance'),
  notifyOnMaintenance?: boolean(name='NotifyOnMaintenance'),
  instanceId?: [ string ](name='InstanceId'),
  maintenanceWindow?: [ 
    {
      endTime?: string(name='EndTime'),
      startTime?: string(name='StartTime'),
    }
  ](name='MaintenanceWindow'),
}

model ModifyInstanceMaintenanceAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintenanceAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintenanceAttributesResponseBody(name='body'),
}

async function modifyInstanceMaintenanceAttributesWithOptions(request: ModifyInstanceMaintenanceAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintenanceAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMaintenanceAttributes', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMaintenanceAttributes(request: ModifyInstanceMaintenanceAttributesRequest): ModifyInstanceMaintenanceAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintenanceAttributesWithOptions(request, runtime);
}

model ModifyInstanceMetadataOptionsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpTokens?: string(name='HttpTokens'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
}

model ModifyInstanceMetadataOptionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMetadataOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMetadataOptionsResponseBody(name='body'),
}

async function modifyInstanceMetadataOptionsWithOptions(request: ModifyInstanceMetadataOptionsRequest, runtime: Util.RuntimeOptions): ModifyInstanceMetadataOptionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMetadataOptions', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMetadataOptions(request: ModifyInstanceMetadataOptionsRequest): ModifyInstanceMetadataOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMetadataOptionsWithOptions(request, runtime);
}

model ModifyInstanceNetworkSpecRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  ISP?: string(name='ISP'),
  networkChargeType?: string(name='NetworkChargeType'),
  allocatePublicIp?: boolean(name='AllocatePublicIp'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  autoPay?: boolean(name='AutoPay'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyInstanceNetworkSpecResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyInstanceNetworkSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceNetworkSpecResponseBody(name='body'),
}

async function modifyInstanceNetworkSpecWithOptions(request: ModifyInstanceNetworkSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceNetworkSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceNetworkSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceNetworkSpec(request: ModifyInstanceNetworkSpecRequest): ModifyInstanceNetworkSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceNetworkSpecWithOptions(request, runtime);
}

model ModifyInstanceSpecRequest {
  temporary?: {
    startTime?: string(name='StartTime'),
    endTime?: string(name='EndTime'),
    internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  }(name='Temporary'),
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  ownerAccount?: string(name='OwnerAccount'),
  async?: boolean(name='Async'),
  allowMigrateAcrossZone?: boolean(name='AllowMigrateAcrossZone'),
  clientToken?: string(name='ClientToken'),
}

model ModifyInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceSpecResponseBody(name='body'),
}

async function modifyInstanceSpecWithOptions(request: ModifyInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceSpec(request: ModifyInstanceSpecRequest): ModifyInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceSpecWithOptions(request, runtime);
}

model ModifyInstanceVncPasswdRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  vncPassword?: string(name='VncPassword'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyInstanceVncPasswdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVncPasswdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVncPasswdResponseBody(name='body'),
}

async function modifyInstanceVncPasswdWithOptions(request: ModifyInstanceVncPasswdRequest, runtime: Util.RuntimeOptions): ModifyInstanceVncPasswdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceVncPasswd', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceVncPasswd(request: ModifyInstanceVncPasswdRequest): ModifyInstanceVncPasswdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVncPasswdWithOptions(request, runtime);
}

model ModifyInstanceVpcAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  vSwitchId?: string(name='VSwitchId'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  vpcId?: string(name='VpcId'),
  ownerAccount?: string(name='OwnerAccount'),
  securityGroupId?: [ string ](name='SecurityGroupId'),
}

model ModifyInstanceVpcAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceVpcAttributeResponseBody(name='body'),
}

async function modifyInstanceVpcAttributeWithOptions(request: ModifyInstanceVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceVpcAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceVpcAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceVpcAttribute(request: ModifyInstanceVpcAttributeRequest): ModifyInstanceVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceVpcAttributeWithOptions(request, runtime);
}

model ModifyLaunchTemplateDefaultVersionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  defaultVersionNumber?: long(name='DefaultVersionNumber'),
}

model ModifyLaunchTemplateDefaultVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyLaunchTemplateDefaultVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyLaunchTemplateDefaultVersionResponseBody(name='body'),
}

async function modifyLaunchTemplateDefaultVersionWithOptions(request: ModifyLaunchTemplateDefaultVersionRequest, runtime: Util.RuntimeOptions): ModifyLaunchTemplateDefaultVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyLaunchTemplateDefaultVersion', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyLaunchTemplateDefaultVersion(request: ModifyLaunchTemplateDefaultVersionRequest): ModifyLaunchTemplateDefaultVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLaunchTemplateDefaultVersionWithOptions(request, runtime);
}

model ModifyManagedInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
}

model ModifyManagedInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instance?: {
    instanceName?: string(name='InstanceName'),
    instanceId?: string(name='InstanceId'),
  }(name='Instance'),
}

model ModifyManagedInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyManagedInstanceResponseBody(name='body'),
}

async function modifyManagedInstanceWithOptions(request: ModifyManagedInstanceRequest, runtime: Util.RuntimeOptions): ModifyManagedInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyManagedInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyManagedInstance(request: ModifyManagedInstanceRequest): ModifyManagedInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyManagedInstanceWithOptions(request, runtime);
}

model ModifyNetworkInterfaceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceName?: string(name='NetworkInterfaceName'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  queueNumber?: int32(name='QueueNumber'),
  description?: string(name='Description'),
  securityGroupId?: [ string ](name='SecurityGroupId'),
}

model ModifyNetworkInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNetworkInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkInterfaceAttributeResponseBody(name='body'),
}

async function modifyNetworkInterfaceAttributeWithOptions(request: ModifyNetworkInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkInterfaceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyNetworkInterfaceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyNetworkInterfaceAttribute(request: ModifyNetworkInterfaceAttributeRequest): ModifyNetworkInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkInterfaceAttributeWithOptions(request, runtime);
}

model ModifyPhysicalConnectionAttributeRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  lineOperator?: string(name='LineOperator'),
  bandwidth?: int32(name='bandwidth'),
  peerLocation?: string(name='PeerLocation'),
  portType?: string(name='PortType'),
  redundantPhysicalConnectionId?: string(name='RedundantPhysicalConnectionId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  clientToken?: string(name='ClientToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
  circuitCode?: string(name='CircuitCode'),
}

model ModifyPhysicalConnectionAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPhysicalConnectionAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhysicalConnectionAttributeResponseBody(name='body'),
}

async function modifyPhysicalConnectionAttributeWithOptions(request: ModifyPhysicalConnectionAttributeRequest, runtime: Util.RuntimeOptions): ModifyPhysicalConnectionAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPhysicalConnectionAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPhysicalConnectionAttribute(request: ModifyPhysicalConnectionAttributeRequest): ModifyPhysicalConnectionAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhysicalConnectionAttributeWithOptions(request, runtime);
}

model ModifyPrepayInstanceSpecRequest {
  systemDisk?: {
    category?: string(name='Category'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
  instanceType?: string(name='InstanceType'),
  operatorType?: string(name='OperatorType'),
  clientToken?: string(name='ClientToken'),
  autoPay?: boolean(name='AutoPay'),
  migrateAcrossZone?: boolean(name='MigrateAcrossZone'),
  ownerAccount?: string(name='OwnerAccount'),
  rebootTime?: string(name='RebootTime'),
  endTime?: string(name='EndTime'),
  rebootWhenFinished?: boolean(name='RebootWhenFinished'),
}

model ModifyPrepayInstanceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ModifyPrepayInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPrepayInstanceSpecResponseBody(name='body'),
}

async function modifyPrepayInstanceSpecWithOptions(request: ModifyPrepayInstanceSpecRequest, runtime: Util.RuntimeOptions): ModifyPrepayInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPrepayInstanceSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPrepayInstanceSpec(request: ModifyPrepayInstanceSpecRequest): ModifyPrepayInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrepayInstanceSpecWithOptions(request, runtime);
}

model ModifyReservedInstanceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: string(name='ReservedInstanceId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  description?: string(name='Description'),
}

model ModifyReservedInstanceAttributeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  code?: string(name='Code'),
}

model ModifyReservedInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReservedInstanceAttributeResponseBody(name='body'),
}

async function modifyReservedInstanceAttributeWithOptions(request: ModifyReservedInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyReservedInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyReservedInstanceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyReservedInstanceAttribute(request: ModifyReservedInstanceAttributeRequest): ModifyReservedInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstanceAttributeWithOptions(request, runtime);
}

model ModifyReservedInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  reservedInstanceId?: [ string ](name='ReservedInstanceId'),
  configuration?: [ 
    {
      reservedInstanceName?: string(name='ReservedInstanceName'),
      zoneId?: string(name='ZoneId'),
      scope?: string(name='Scope'),
      instanceType?: string(name='InstanceType'),
      instanceAmount?: int32(name='InstanceAmount'),
    }
  ](name='Configuration'),
}

model ModifyReservedInstancesResponseBody = {
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
  requestId?: string(name='RequestId'),
}

model ModifyReservedInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyReservedInstancesResponseBody(name='body'),
}

async function modifyReservedInstancesWithOptions(request: ModifyReservedInstancesRequest, runtime: Util.RuntimeOptions): ModifyReservedInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyReservedInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyReservedInstances(request: ModifyReservedInstancesRequest): ModifyReservedInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyReservedInstancesWithOptions(request, runtime);
}

model ModifyRouterInterfaceAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  oppositeInterfaceId?: string(name='OppositeInterfaceId'),
  oppositeRouterId?: string(name='OppositeRouterId'),
  oppositeRouterType?: string(name='OppositeRouterType'),
  oppositeInterfaceOwnerId?: long(name='OppositeInterfaceOwnerId'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
}

model ModifyRouterInterfaceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyRouterInterfaceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceAttributeResponseBody(name='body'),
}

async function modifyRouterInterfaceAttributeWithOptions(request: ModifyRouterInterfaceAttributeRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRouterInterfaceAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRouterInterfaceAttribute(request: ModifyRouterInterfaceAttributeRequest): ModifyRouterInterfaceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceAttributeWithOptions(request, runtime);
}

model ModifyRouterInterfaceSpecRequest {
  regionId?: string(name='RegionId'),
  routerInterfaceId?: string(name='RouterInterfaceId'),
  spec?: string(name='Spec'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model ModifyRouterInterfaceSpecResponseBody = {
  requestId?: string(name='RequestId'),
  spec?: string(name='Spec'),
}

model ModifyRouterInterfaceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRouterInterfaceSpecResponseBody(name='body'),
}

async function modifyRouterInterfaceSpecWithOptions(request: ModifyRouterInterfaceSpecRequest, runtime: Util.RuntimeOptions): ModifyRouterInterfaceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRouterInterfaceSpec', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRouterInterfaceSpec(request: ModifyRouterInterfaceSpecRequest): ModifyRouterInterfaceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRouterInterfaceSpecWithOptions(request, runtime);
}

model ModifySecurityGroupAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId'),
  description?: string(name='Description'),
  securityGroupName?: string(name='SecurityGroupName'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifySecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupAttributeResponseBody(name='body'),
}

async function modifySecurityGroupAttributeWithOptions(request: ModifySecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupAttribute(request: ModifySecurityGroupAttributeRequest): ModifySecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupAttributeWithOptions(request, runtime);
}

model ModifySecurityGroupEgressRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  destGroupId?: string(name='DestGroupId'),
  destGroupOwnerId?: long(name='DestGroupOwnerId'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model ModifySecurityGroupEgressRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupEgressRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupEgressRuleResponseBody(name='body'),
}

async function modifySecurityGroupEgressRuleWithOptions(request: ModifySecurityGroupEgressRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupEgressRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupEgressRule', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupEgressRule(request: ModifySecurityGroupEgressRuleRequest): ModifySecurityGroupEgressRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupEgressRuleWithOptions(request, runtime);
}

model ModifySecurityGroupPolicyRequest {
  securityGroupId?: string(name='SecurityGroupId'),
  regionId?: string(name='RegionId'),
  innerAccessPolicy?: string(name='InnerAccessPolicy'),
  clientToken?: string(name='ClientToken'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
}

model ModifySecurityGroupPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupPolicyResponseBody(name='body'),
}

async function modifySecurityGroupPolicyWithOptions(request: ModifySecurityGroupPolicyRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupPolicy', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupPolicy(request: ModifySecurityGroupPolicyRequest): ModifySecurityGroupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupPolicyWithOptions(request, runtime);
}

model ModifySecurityGroupRuleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  sourceGroupId?: string(name='SourceGroupId'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model ModifySecurityGroupRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupRuleResponseBody(name='body'),
}

async function modifySecurityGroupRuleWithOptions(request: ModifySecurityGroupRuleRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroupRule', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroupRule(request: ModifySecurityGroupRuleRequest): ModifySecurityGroupRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupRuleWithOptions(request, runtime);
}

model ModifySnapshotAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  snapshotId?: string(name='SnapshotId'),
  snapshotName?: string(name='SnapshotName'),
  description?: string(name='Description'),
  disableInstantAccess?: boolean(name='DisableInstantAccess'),
}

model ModifySnapshotAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySnapshotAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnapshotAttributeResponseBody(name='body'),
}

async function modifySnapshotAttributeWithOptions(request: ModifySnapshotAttributeRequest, runtime: Util.RuntimeOptions): ModifySnapshotAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySnapshotAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySnapshotAttribute(request: ModifySnapshotAttributeRequest): ModifySnapshotAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotAttributeWithOptions(request, runtime);
}

model ModifySnapshotGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  snapshotGroupId?: string(name='SnapshotGroupId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model ModifySnapshotGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySnapshotGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySnapshotGroupResponseBody(name='body'),
}

async function modifySnapshotGroupWithOptions(request: ModifySnapshotGroupRequest, runtime: Util.RuntimeOptions): ModifySnapshotGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySnapshotGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySnapshotGroup(request: ModifySnapshotGroupRequest): ModifySnapshotGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySnapshotGroupWithOptions(request, runtime);
}

model ModifyStorageCapacityUnitAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  storageCapacityUnitId?: string(name='StorageCapacityUnitId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
}

model ModifyStorageCapacityUnitAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStorageCapacityUnitAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStorageCapacityUnitAttributeResponseBody(name='body'),
}

async function modifyStorageCapacityUnitAttributeWithOptions(request: ModifyStorageCapacityUnitAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageCapacityUnitAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStorageCapacityUnitAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStorageCapacityUnitAttribute(request: ModifyStorageCapacityUnitAttributeRequest): ModifyStorageCapacityUnitAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageCapacityUnitAttributeWithOptions(request, runtime);
}

model ModifyStorageSetAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  storageSetId?: string(name='StorageSetId'),
  storageSetName?: string(name='StorageSetName'),
  description?: string(name='Description'),
}

model ModifyStorageSetAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyStorageSetAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStorageSetAttributeResponseBody(name='body'),
}

async function modifyStorageSetAttributeWithOptions(request: ModifyStorageSetAttributeRequest, runtime: Util.RuntimeOptions): ModifyStorageSetAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyStorageSetAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyStorageSetAttribute(request: ModifyStorageSetAttributeRequest): ModifyStorageSetAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyStorageSetAttributeWithOptions(request, runtime);
}

model ModifyUserBusinessBehaviorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  statusKey?: string(name='statusKey'),
  statusValue?: string(name='statusValue'),
}

model ModifyUserBusinessBehaviorResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserBusinessBehaviorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserBusinessBehaviorResponseBody(name='body'),
}

async function modifyUserBusinessBehaviorWithOptions(request: ModifyUserBusinessBehaviorRequest, runtime: Util.RuntimeOptions): ModifyUserBusinessBehaviorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyUserBusinessBehavior', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyUserBusinessBehavior(request: ModifyUserBusinessBehaviorRequest): ModifyUserBusinessBehaviorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserBusinessBehaviorWithOptions(request, runtime);
}

model ModifyVirtualBorderRouterAttributeRequest {
  regionId?: string(name='RegionId'),
  vbrId?: string(name='VbrId'),
  vlanId?: int32(name='VlanId'),
  circuitCode?: string(name='CircuitCode'),
  localGatewayIp?: string(name='LocalGatewayIp'),
  peerGatewayIp?: string(name='PeerGatewayIp'),
  peeringSubnetMask?: string(name='PeeringSubnetMask'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model ModifyVirtualBorderRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVirtualBorderRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVirtualBorderRouterAttributeResponseBody(name='body'),
}

async function modifyVirtualBorderRouterAttributeWithOptions(request: ModifyVirtualBorderRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVirtualBorderRouterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVirtualBorderRouterAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVirtualBorderRouterAttribute(request: ModifyVirtualBorderRouterAttributeRequest): ModifyVirtualBorderRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVirtualBorderRouterAttributeWithOptions(request, runtime);
}

model ModifyVpcAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
  description?: string(name='Description'),
  vpcName?: string(name='VpcName'),
  cidrBlock?: string(name='CidrBlock'),
  regionId?: string(name='RegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model ModifyVpcAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcAttributeResponseBody(name='body'),
}

async function modifyVpcAttributeWithOptions(request: ModifyVpcAttributeRequest, runtime: Util.RuntimeOptions): ModifyVpcAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcAttribute(request: ModifyVpcAttributeRequest): ModifyVpcAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcAttributeWithOptions(request, runtime);
}

model ModifyVRouterAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  VRouterId?: string(name='VRouterId'),
  VRouterName?: string(name='VRouterName'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyVRouterAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVRouterAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVRouterAttributeResponseBody(name='body'),
}

async function modifyVRouterAttributeWithOptions(request: ModifyVRouterAttributeRequest, runtime: Util.RuntimeOptions): ModifyVRouterAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVRouterAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVRouterAttribute(request: ModifyVRouterAttributeRequest): ModifyVRouterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVRouterAttributeWithOptions(request, runtime);
}

model ModifyVSwitchAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vSwitchId?: string(name='VSwitchId'),
  vSwitchName?: string(name='VSwitchName'),
  regionId?: string(name='RegionId'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ModifyVSwitchAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVSwitchAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVSwitchAttributeResponseBody(name='body'),
}

async function modifyVSwitchAttributeWithOptions(request: ModifyVSwitchAttributeRequest, runtime: Util.RuntimeOptions): ModifyVSwitchAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVSwitchAttribute', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVSwitchAttribute(request: ModifyVSwitchAttributeRequest): ModifyVSwitchAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVSwitchAttributeWithOptions(request, runtime);
}

model PurchaseReservedInstancesOfferingRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceGroupId?: string(name='ResourceGroupId'),
  zoneId?: string(name='ZoneId'),
  reservedInstanceName?: string(name='ReservedInstanceName'),
  instanceType?: string(name='InstanceType'),
  scope?: string(name='Scope'),
  instanceAmount?: int32(name='InstanceAmount'),
  offeringType?: string(name='OfferingType'),
  description?: string(name='Description'),
  platform?: string(name='Platform'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  clientToken?: string(name='ClientToken'),
}

model PurchaseReservedInstancesOfferingResponseBody = {
  reservedInstanceIdSets?: {
    reservedInstanceId?: [ string ](name='ReservedInstanceId')
  }(name='ReservedInstanceIdSets'),
  requestId?: string(name='RequestId'),
}

model PurchaseReservedInstancesOfferingResponse = {
  headers: map[string]string(name='headers'),
  body: PurchaseReservedInstancesOfferingResponseBody(name='body'),
}

async function purchaseReservedInstancesOfferingWithOptions(request: PurchaseReservedInstancesOfferingRequest, runtime: Util.RuntimeOptions): PurchaseReservedInstancesOfferingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PurchaseReservedInstancesOffering', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function purchaseReservedInstancesOffering(request: PurchaseReservedInstancesOfferingRequest): PurchaseReservedInstancesOfferingResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseReservedInstancesOfferingWithOptions(request, runtime);
}

model PurchaseStorageCapacityUnitRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  capacity?: int32(name='Capacity'),
  description?: string(name='Description'),
  startTime?: string(name='StartTime'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  fromApp?: string(name='FromApp'),
  clientToken?: string(name='ClientToken'),
  amount?: int32(name='Amount'),
}

model PurchaseStorageCapacityUnitResponseBody = {
  storageCapacityUnitIds?: {
    storageCapacityUnitId?: [ string ](name='StorageCapacityUnitId')
  }(name='StorageCapacityUnitIds'),
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model PurchaseStorageCapacityUnitResponse = {
  headers: map[string]string(name='headers'),
  body: PurchaseStorageCapacityUnitResponseBody(name='body'),
}

async function purchaseStorageCapacityUnitWithOptions(request: PurchaseStorageCapacityUnitRequest, runtime: Util.RuntimeOptions): PurchaseStorageCapacityUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PurchaseStorageCapacityUnit', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function purchaseStorageCapacityUnit(request: PurchaseStorageCapacityUnitRequest): PurchaseStorageCapacityUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return purchaseStorageCapacityUnitWithOptions(request, runtime);
}

model ReActivateInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ReActivateInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReActivateInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ReActivateInstancesResponseBody(name='body'),
}

async function reActivateInstancesWithOptions(request: ReActivateInstancesRequest, runtime: Util.RuntimeOptions): ReActivateInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReActivateInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reActivateInstances(request: ReActivateInstancesRequest): ReActivateInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return reActivateInstancesWithOptions(request, runtime);
}

model RebootInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  forceStop?: boolean(name='ForceStop'),
  ownerAccount?: string(name='OwnerAccount'),
  dryRun?: boolean(name='DryRun'),
}

model RebootInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model RebootInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  forceReboot?: boolean(name='ForceReboot'),
  batchOptimization?: string(name='BatchOptimization'),
  instanceId?: [ string ](name='InstanceId'),
}

model RebootInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceResponses?: {
    instanceResponse?: [ 
    {
      currentStatus?: string(name='CurrentStatus'),
      previousStatus?: string(name='PreviousStatus'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses'),
}

model RebootInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstancesResponseBody(name='body'),
}

async function rebootInstancesWithOptions(request: RebootInstancesRequest, runtime: Util.RuntimeOptions): RebootInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootInstances(request: RebootInstancesRequest): RebootInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstancesWithOptions(request, runtime);
}

model RecoverVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  vbrId?: string(name='VbrId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model RecoverVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoverVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverVirtualBorderRouterResponseBody(name='body'),
}

async function recoverVirtualBorderRouterWithOptions(request: RecoverVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): RecoverVirtualBorderRouterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RecoverVirtualBorderRouter', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function recoverVirtualBorderRouter(request: RecoverVirtualBorderRouterRequest): RecoverVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverVirtualBorderRouterWithOptions(request, runtime);
}

model RedeployDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model RedeployDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model RedeployDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RedeployDedicatedHostResponseBody(name='body'),
}

async function redeployDedicatedHostWithOptions(request: RedeployDedicatedHostRequest, runtime: Util.RuntimeOptions): RedeployDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RedeployDedicatedHost', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function redeployDedicatedHost(request: RedeployDedicatedHostRequest): RedeployDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployDedicatedHostWithOptions(request, runtime);
}

model RedeployInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  forceStop?: boolean(name='ForceStop'),
}

model RedeployInstanceResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model RedeployInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RedeployInstanceResponseBody(name='body'),
}

async function redeployInstanceWithOptions(request: RedeployInstanceRequest, runtime: Util.RuntimeOptions): RedeployInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RedeployInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function redeployInstance(request: RedeployInstanceRequest): RedeployInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return redeployInstanceWithOptions(request, runtime);
}

model ReInitDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  ownerAccount?: string(name='OwnerAccount'),
  password?: string(name='Password'),
  keyPairName?: string(name='KeyPairName'),
  autoStartInstance?: boolean(name='AutoStartInstance'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
}

model ReInitDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReInitDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReInitDiskResponseBody(name='body'),
}

async function reInitDiskWithOptions(request: ReInitDiskRequest, runtime: Util.RuntimeOptions): ReInitDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReInitDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reInitDiskWithOptions(request, runtime);
}

model ReleaseCapacityReservationRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dryRun?: boolean(name='DryRun'),
}

model ReleaseCapacityReservationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseCapacityReservationResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseCapacityReservationResponseBody(name='body'),
}

async function releaseCapacityReservationWithOptions(request: ReleaseCapacityReservationRequest, runtime: Util.RuntimeOptions): ReleaseCapacityReservationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseCapacityReservation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseCapacityReservation(request: ReleaseCapacityReservationRequest): ReleaseCapacityReservationResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseCapacityReservationWithOptions(request, runtime);
}

model ReleaseDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model ReleaseDedicatedHostResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseDedicatedHostResponseBody(name='body'),
}

async function releaseDedicatedHostWithOptions(request: ReleaseDedicatedHostRequest, runtime: Util.RuntimeOptions): ReleaseDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseDedicatedHost', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseDedicatedHost(request: ReleaseDedicatedHostRequest): ReleaseDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseDedicatedHostWithOptions(request, runtime);
}

model ReleaseEipAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

async function releaseEipAddressWithOptions(request: ReleaseEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseEipAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipAddressWithOptions(request, runtime);
}

model ReleasePublicIpAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  publicIpAddress?: string(name='PublicIpAddress'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ReleasePublicIpAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePublicIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicIpAddressResponseBody(name='body'),
}

async function releasePublicIpAddressWithOptions(request: ReleasePublicIpAddressRequest, runtime: Util.RuntimeOptions): ReleasePublicIpAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleasePublicIpAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releasePublicIpAddress(request: ReleasePublicIpAddressRequest): ReleasePublicIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicIpAddressWithOptions(request, runtime);
}

model RemoveBandwidthPackageIpsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  bandwidthPackageId?: string(name='BandwidthPackageId'),
  clientToken?: string(name='ClientToken'),
  removedIpAddresses?: [ string ](name='RemovedIpAddresses'),
}

model RemoveBandwidthPackageIpsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBandwidthPackageIpsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveBandwidthPackageIpsResponseBody(name='body'),
}

async function removeBandwidthPackageIpsWithOptions(request: RemoveBandwidthPackageIpsRequest, runtime: Util.RuntimeOptions): RemoveBandwidthPackageIpsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveBandwidthPackageIps', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeBandwidthPackageIps(request: RemoveBandwidthPackageIpsRequest): RemoveBandwidthPackageIpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBandwidthPackageIpsWithOptions(request, runtime);
}

model RemoveTagsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: string(name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model RemoveTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveTags', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model RenewDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dedicatedHostIds?: string(name='DedicatedHostIds'),
  regionId?: string(name='RegionId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  clientToken?: string(name='ClientToken'),
}

model RenewDedicatedHostsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RenewDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDedicatedHostsResponseBody(name='body'),
}

async function renewDedicatedHostsWithOptions(request: RenewDedicatedHostsRequest, runtime: Util.RuntimeOptions): RenewDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewDedicatedHosts', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewDedicatedHosts(request: RenewDedicatedHostsRequest): RenewDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDedicatedHostsWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceId?: string(name='InstanceId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  expectedRenewDay?: int32(name='ExpectedRenewDay'),
}

model RenewInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model ReplaceSystemDiskRequest {
  systemDisk?: {
    size?: int32(name='Size'),
  }(name='SystemDisk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  imageId?: string(name='ImageId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  useAdditionalService?: boolean(name='UseAdditionalService'),
  password?: string(name='Password'),
  passwordInherit?: boolean(name='PasswordInherit'),
  keyPairName?: string(name='KeyPairName'),
  diskId?: string(name='DiskId'),
  platform?: string(name='Platform'),
  architecture?: string(name='Architecture'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
}

model ReplaceSystemDiskResponseBody = {
  requestId?: string(name='RequestId'),
  diskId?: string(name='DiskId'),
}

model ReplaceSystemDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceSystemDiskResponseBody(name='body'),
}

async function replaceSystemDiskWithOptions(request: ReplaceSystemDiskRequest, runtime: Util.RuntimeOptions): ReplaceSystemDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReplaceSystemDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function replaceSystemDisk(request: ReplaceSystemDiskRequest): ReplaceSystemDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceSystemDiskWithOptions(request, runtime);
}

model ReportInstancesStatusRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  reason?: string(name='Reason'),
  description?: string(name='Description'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  issueCategory?: string(name='IssueCategory'),
  instanceId?: [ string ](name='InstanceId'),
  diskId?: [ string ](name='DiskId'),
  device?: [ string ](name='Device'),
}

model ReportInstancesStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReportInstancesStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportInstancesStatusResponseBody(name='body'),
}

async function reportInstancesStatusWithOptions(request: ReportInstancesStatusRequest, runtime: Util.RuntimeOptions): ReportInstancesStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReportInstancesStatus', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reportInstancesStatus(request: ReportInstancesStatusRequest): ReportInstancesStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportInstancesStatusWithOptions(request, runtime);
}

model ResetDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  snapshotId?: string(name='SnapshotId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ResetDiskResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDiskResponseBody(name='body'),
}

async function resetDiskWithOptions(request: ResetDiskRequest, runtime: Util.RuntimeOptions): ResetDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetDisk(request: ResetDiskRequest): ResetDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDiskWithOptions(request, runtime);
}

model ResetDisksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  disk?: [ 
    {
      snapshotId?: string(name='SnapshotId'),
      diskId?: string(name='DiskId'),
    }
  ](name='Disk'),
}

model ResetDisksResponseBody = {
  requestId?: string(name='RequestId'),
  operationProgressSet?: {
    operationProgress?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      errorMsg?: string(name='ErrorMsg'),
      relatedItemSet?: {
        relatedItem?: [ 
        {
          value?: string(name='Value'),
          name?: string(name='Name'),
        }
      ](name='RelatedItem')
      }(name='RelatedItemSet'),
      operationStatus?: string(name='OperationStatus'),
    }
  ](name='OperationProgress')
  }(name='OperationProgressSet'),
}

model ResetDisksResponse = {
  headers: map[string]string(name='headers'),
  body: ResetDisksResponseBody(name='body'),
}

async function resetDisksWithOptions(request: ResetDisksRequest, runtime: Util.RuntimeOptions): ResetDisksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetDisks', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetDisks(request: ResetDisksRequest): ResetDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetDisksWithOptions(request, runtime);
}

model ResizeDiskRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  diskId?: string(name='DiskId'),
  type?: string(name='Type'),
  newSize?: int32(name='NewSize'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
}

model ResizeDiskResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
}

model ResizeDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDiskResponseBody(name='body'),
}

async function resizeDiskWithOptions(request: ResizeDiskRequest, runtime: Util.RuntimeOptions): ResizeDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResizeDisk', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resizeDisk(request: ResizeDiskRequest): ResizeDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeDiskWithOptions(request, runtime);
}

model RevokeSecurityGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  portRange?: string(name='PortRange'),
  ipProtocol?: string(name='IpProtocol'),
  sourceGroupId?: string(name='SourceGroupId'),
  sourceGroupOwnerId?: long(name='SourceGroupOwnerId'),
  sourceGroupOwnerAccount?: string(name='SourceGroupOwnerAccount'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupResponseBody(name='body'),
}

async function revokeSecurityGroupWithOptions(request: RevokeSecurityGroupRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeSecurityGroup', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupWithOptions(request, runtime);
}

model RevokeSecurityGroupEgressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  securityGroupId?: string(name='SecurityGroupId'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  destGroupId?: string(name='DestGroupId'),
  destGroupOwnerId?: long(name='DestGroupOwnerId'),
  destGroupOwnerAccount?: string(name='DestGroupOwnerAccount'),
  destCidrIp?: string(name='DestCidrIp'),
  ipv6DestCidrIp?: string(name='Ipv6DestCidrIp'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  ipv6SourceCidrIp?: string(name='Ipv6SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
  policy?: string(name='Policy'),
  priority?: string(name='Priority'),
  nicType?: string(name='NicType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupEgressResponseBody(name='body'),
}

async function revokeSecurityGroupEgressWithOptions(request: RevokeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeSecurityGroupEgress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupEgressWithOptions(request, runtime);
}

model RunCommandRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  commandContent?: string(name='CommandContent'),
  workingDir?: string(name='WorkingDir'),
  timeout?: long(name='Timeout'),
  enableParameter?: boolean(name='EnableParameter'),
  timed?: boolean(name='Timed'),
  frequency?: string(name='Frequency'),
  parameters?: map[string]any(name='Parameters'),
  keepCommand?: boolean(name='KeepCommand'),
  contentEncoding?: string(name='ContentEncoding'),
  username?: string(name='Username'),
  windowsPasswordName?: string(name='WindowsPasswordName'),
  instanceId?: [ string ](name='InstanceId'),
}

model RunCommandShrinkRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  type?: string(name='Type'),
  commandContent?: string(name='CommandContent'),
  workingDir?: string(name='WorkingDir'),
  timeout?: long(name='Timeout'),
  enableParameter?: boolean(name='EnableParameter'),
  timed?: boolean(name='Timed'),
  frequency?: string(name='Frequency'),
  parametersShrink?: string(name='Parameters'),
  keepCommand?: boolean(name='KeepCommand'),
  contentEncoding?: string(name='ContentEncoding'),
  username?: string(name='Username'),
  windowsPasswordName?: string(name='WindowsPasswordName'),
  instanceId?: [ string ](name='InstanceId'),
}

model RunCommandResponseBody = {
  requestId?: string(name='RequestId'),
  commandId?: string(name='CommandId'),
  invokeId?: string(name='InvokeId'),
}

model RunCommandResponse = {
  headers: map[string]string(name='headers'),
  body: RunCommandResponseBody(name='body'),
}

async function runCommandWithOptions(tmpReq: RunCommandRequest, runtime: Util.RuntimeOptions): RunCommandResponse {
  Util.validateModel(tmpReq);
  var request = new RunCommandShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.parameters)) {
    request.parametersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.parameters, 'Parameters', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunCommand', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runCommand(request: RunCommandRequest): RunCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return runCommandWithOptions(request, runtime);
}

model RunInstancesRequest {
  systemDisk?: {
    size?: string(name='Size'),
    category?: string(name='Category'),
    diskName?: string(name='DiskName'),
    description?: string(name='Description'),
    performanceLevel?: string(name='PerformanceLevel'),
    autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
  }(name='SystemDisk'),
  hibernationOptions?: {
    configured?: boolean(name='Configured'),
  }(name='HibernationOptions'),
  cpuOptions?: {
    core?: int32(name='Core'),
    threadsPerCore?: int32(name='ThreadsPerCore'),
    numa?: string(name='Numa'),
  }(name='CpuOptions'),
  securityOptions?: {
    trustedSystemMode?: string(name='TrustedSystemMode'),
  }(name='SecurityOptions'),
  privatePoolOptions?: {
    matchCriteria?: string(name='MatchCriteria'),
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  schedulerOptions?: {
    dedicatedHostClusterId?: string(name='DedicatedHostClusterId'),
  }(name='SchedulerOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  imageId?: string(name='ImageId'),
  imageFamily?: string(name='ImageFamily'),
  instanceType?: string(name='InstanceType'),
  securityGroupId?: string(name='SecurityGroupId'),
  vSwitchId?: string(name='VSwitchId'),
  instanceName?: string(name='InstanceName'),
  description?: string(name='Description'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
  hostName?: string(name='HostName'),
  uniqueSuffix?: boolean(name='UniqueSuffix'),
  password?: string(name='Password'),
  passwordInherit?: boolean(name='PasswordInherit'),
  zoneId?: string(name='ZoneId'),
  internetChargeType?: string(name='InternetChargeType'),
  ioOptimized?: string(name='IoOptimized'),
  userData?: string(name='UserData'),
  keyPairName?: string(name='KeyPairName'),
  ramRoleName?: string(name='RamRoleName'),
  amount?: int32(name='Amount'),
  minAmount?: int32(name='MinAmount'),
  autoReleaseTime?: string(name='AutoReleaseTime'),
  spotStrategy?: string(name='SpotStrategy'),
  spotDuration?: int32(name='SpotDuration'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotInterruptionBehavior?: string(name='SpotInterruptionBehavior'),
  securityEnhancementStrategy?: string(name='SecurityEnhancementStrategy'),
  clientToken?: string(name='ClientToken'),
  hpcClusterId?: string(name='HpcClusterId'),
  dryRun?: boolean(name='DryRun'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  launchTemplateId?: string(name='LaunchTemplateId'),
  launchTemplateName?: string(name='LaunchTemplateName'),
  launchTemplateVersion?: long(name='LaunchTemplateVersion'),
  resourceGroupId?: string(name='ResourceGroupId'),
  period?: int32(name='Period'),
  periodUnit?: string(name='PeriodUnit'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  instanceChargeType?: string(name='InstanceChargeType'),
  deploymentSetId?: string(name='DeploymentSetId'),
  deploymentSetGroupNo?: int32(name='DeploymentSetGroupNo'),
  privateIpAddress?: string(name='PrivateIpAddress'),
  creditSpecification?: string(name='CreditSpecification'),
  ipv6AddressCount?: int32(name='Ipv6AddressCount'),
  networkInterfaceQueueNumber?: int32(name='NetworkInterfaceQueueNumber'),
  deletionProtection?: boolean(name='DeletionProtection'),
  affinity?: string(name='Affinity'),
  tenancy?: string(name='Tenancy'),
  storageSetId?: string(name='StorageSetId'),
  storageSetPartitionNumber?: int32(name='StorageSetPartitionNumber'),
  httpEndpoint?: string(name='HttpEndpoint'),
  httpTokens?: string(name='HttpTokens'),
  httpPutResponseHopLimit?: int32(name='HttpPutResponseHopLimit'),
  isp?: string(name='Isp'),
  securityGroupIds?: [ string ](name='SecurityGroupIds'),
  hostNames?: [ string ](name='HostNames'),
  dataDisk?: [ 
    {
      performanceLevel?: string(name='PerformanceLevel'),
      autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId'),
      encrypted?: string(name='Encrypted'),
      description?: string(name='Description'),
      snapshotId?: string(name='SnapshotId'),
      device?: string(name='Device'),
      size?: int32(name='Size'),
      diskName?: string(name='DiskName'),
      category?: string(name='Category'),
      encryptAlgorithm?: string(name='EncryptAlgorithm'),
      deleteWithInstance?: boolean(name='DeleteWithInstance'),
      KMSKeyId?: string(name='KMSKeyId'),
    }
  ](name='DataDisk'),
  arn?: [ 
    {
      roleType?: string(name='RoleType'),
      rolearn?: string(name='Rolearn'),
      assumeRoleFor?: long(name='AssumeRoleFor'),
    }
  ](name='Arn'),
  networkInterface?: [ 
    {
      networkInterfaceName?: string(name='NetworkInterfaceName'),
      vSwitchId?: string(name='VSwitchId'),
      description?: string(name='Description'),
      securityGroupId?: string(name='SecurityGroupId'),
      primaryIpAddress?: string(name='PrimaryIpAddress'),
      queueNumber?: int32(name='QueueNumber'),
      securityGroupIds?: [ string ](name='SecurityGroupIds'),
    }
  ](name='NetworkInterface'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  ipv6Address?: [ string ](name='Ipv6Address'),
}

model RunInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceIdSets?: {
    instanceIdSet?: [ string ](name='InstanceIdSet')
  }(name='InstanceIdSets'),
  orderId?: string(name='OrderId'),
  tradePrice?: float(name='TradePrice'),
}

model RunInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: RunInstancesResponseBody(name='body'),
}

async function runInstancesWithOptions(request: RunInstancesRequest, runtime: Util.RuntimeOptions): RunInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runInstances(request: RunInstancesRequest): RunInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return runInstancesWithOptions(request, runtime);
}

model SendFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  timeout?: long(name='Timeout'),
  targetDir?: string(name='TargetDir'),
  contentType?: string(name='ContentType'),
  content?: string(name='Content'),
  fileOwner?: string(name='FileOwner'),
  fileGroup?: string(name='FileGroup'),
  fileMode?: string(name='FileMode'),
  overwrite?: boolean(name='Overwrite'),
  instanceId?: [ string ](name='InstanceId'),
}

model SendFileResponseBody = {
  requestId?: string(name='RequestId'),
  invokeId?: string(name='InvokeId'),
}

model SendFileResponse = {
  headers: map[string]string(name='headers'),
  body: SendFileResponseBody(name='body'),
}

async function sendFileWithOptions(request: SendFileRequest, runtime: Util.RuntimeOptions): SendFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendFile', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendFile(request: SendFileRequest): SendFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendFileWithOptions(request, runtime);
}

model StartElasticityAssuranceRequest {
  privatePoolOptions?: {
    id?: string(name='Id'),
  }(name='PrivatePoolOptions'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
}

model StartElasticityAssuranceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartElasticityAssuranceResponse = {
  headers: map[string]string(name='headers'),
  body: StartElasticityAssuranceResponseBody(name='body'),
}

async function startElasticityAssuranceWithOptions(request: StartElasticityAssuranceRequest, runtime: Util.RuntimeOptions): StartElasticityAssuranceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartElasticityAssurance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startElasticityAssurance(request: StartElasticityAssuranceRequest): StartElasticityAssuranceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startElasticityAssuranceWithOptions(request, runtime);
}

model StartImagePipelineExecutionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  templateTag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='TemplateTag'),
  imagePipelineId?: string(name='ImagePipelineId'),
  clientToken?: string(name='ClientToken'),
}

model StartImagePipelineExecutionResponseBody = {
  requestId?: string(name='RequestId'),
  executionId?: string(name='ExecutionId'),
}

model StartImagePipelineExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: StartImagePipelineExecutionResponseBody(name='body'),
}

async function startImagePipelineExecutionWithOptions(request: StartImagePipelineExecutionRequest, runtime: Util.RuntimeOptions): StartImagePipelineExecutionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartImagePipelineExecution', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startImagePipelineExecution(request: StartImagePipelineExecutionRequest): StartImagePipelineExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return startImagePipelineExecutionWithOptions(request, runtime);
}

model StartInstanceRequest {
  sourceRegionId?: string(name='SourceRegionId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  initLocalDisk?: boolean(name='InitLocalDisk'),
  ownerAccount?: string(name='OwnerAccount'),
  dryRun?: boolean(name='DryRun'),
}

model StartInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StartInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  batchOptimization?: string(name='BatchOptimization'),
  instanceId?: [ string ](name='InstanceId'),
}

model StartInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceResponses?: {
    instanceResponse?: [ 
    {
      currentStatus?: string(name='CurrentStatus'),
      previousStatus?: string(name='PreviousStatus'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses'),
}

model StartInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstancesResponseBody(name='body'),
}

async function startInstancesWithOptions(request: StartInstancesRequest, runtime: Util.RuntimeOptions): StartInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstances(request: StartInstancesRequest): StartInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstancesWithOptions(request, runtime);
}

model StopInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  instanceId?: string(name='InstanceId'),
  confirmStop?: boolean(name='ConfirmStop'),
  forceStop?: boolean(name='ForceStop'),
  ownerAccount?: string(name='OwnerAccount'),
  stoppedMode?: string(name='StoppedMode'),
  dryRun?: boolean(name='DryRun'),
  hibernate?: boolean(name='Hibernate'),
}

model StopInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInstance', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model StopInstancesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
  forceStop?: boolean(name='ForceStop'),
  stoppedMode?: string(name='StoppedMode'),
  batchOptimization?: string(name='BatchOptimization'),
  instanceId?: [ string ](name='InstanceId'),
}

model StopInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  instanceResponses?: {
    instanceResponse?: [ 
    {
      currentStatus?: string(name='CurrentStatus'),
      previousStatus?: string(name='PreviousStatus'),
      code?: string(name='Code'),
      message?: string(name='Message'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceResponse')
  }(name='InstanceResponses'),
}

model StopInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstancesResponseBody(name='body'),
}

async function stopInstancesWithOptions(request: StopInstancesRequest, runtime: Util.RuntimeOptions): StopInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInstances', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInstances(request: StopInstancesRequest): StopInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstancesWithOptions(request, runtime);
}

model StopInvocationRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  invokeId?: string(name='InvokeId'),
  instanceId?: [ string ](name='InstanceId'),
}

model StopInvocationResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopInvocationResponse = {
  headers: map[string]string(name='headers'),
  body: StopInvocationResponseBody(name='body'),
}

async function stopInvocationWithOptions(request: StopInvocationRequest, runtime: Util.RuntimeOptions): StopInvocationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInvocation', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInvocation(request: StopInvocationRequest): StopInvocationResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInvocationWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TerminatePhysicalConnectionRequest {
  regionId?: string(name='RegionId'),
  physicalConnectionId?: string(name='PhysicalConnectionId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model TerminatePhysicalConnectionResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminatePhysicalConnectionResponse = {
  headers: map[string]string(name='headers'),
  body: TerminatePhysicalConnectionResponseBody(name='body'),
}

async function terminatePhysicalConnectionWithOptions(request: TerminatePhysicalConnectionRequest, runtime: Util.RuntimeOptions): TerminatePhysicalConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TerminatePhysicalConnection', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function terminatePhysicalConnection(request: TerminatePhysicalConnectionRequest): TerminatePhysicalConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminatePhysicalConnectionWithOptions(request, runtime);
}

model TerminateVirtualBorderRouterRequest {
  regionId?: string(name='RegionId'),
  vbrId?: string(name='VbrId'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  userCidr?: string(name='UserCidr'),
}

model TerminateVirtualBorderRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model TerminateVirtualBorderRouterResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateVirtualBorderRouterResponseBody(name='body'),
}

async function terminateVirtualBorderRouterWithOptions(request: TerminateVirtualBorderRouterRequest, runtime: Util.RuntimeOptions): TerminateVirtualBorderRouterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TerminateVirtualBorderRouter', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function terminateVirtualBorderRouter(request: TerminateVirtualBorderRouterRequest): TerminateVirtualBorderRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return terminateVirtualBorderRouterWithOptions(request, runtime);
}

model UnassignIpv6AddressesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  ipv6Address?: [ string ](name='Ipv6Address'),
}

model UnassignIpv6AddressesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassignIpv6AddressesResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignIpv6AddressesResponseBody(name='body'),
}

async function unassignIpv6AddressesWithOptions(request: UnassignIpv6AddressesRequest, runtime: Util.RuntimeOptions): UnassignIpv6AddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassignIpv6Addresses', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassignIpv6Addresses(request: UnassignIpv6AddressesRequest): UnassignIpv6AddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignIpv6AddressesWithOptions(request, runtime);
}

model UnassignPrivateIpAddressesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  networkInterfaceId?: string(name='NetworkInterfaceId'),
  privateIpAddress?: [ string ](name='PrivateIpAddress'),
}

model UnassignPrivateIpAddressesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassignPrivateIpAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: UnassignPrivateIpAddressesResponseBody(name='body'),
}

async function unassignPrivateIpAddressesWithOptions(request: UnassignPrivateIpAddressesRequest, runtime: Util.RuntimeOptions): UnassignPrivateIpAddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassignPrivateIpAddresses', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassignPrivateIpAddresses(request: UnassignPrivateIpAddressesRequest): UnassignPrivateIpAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassignPrivateIpAddressesWithOptions(request, runtime);
}

model UnassociateEipAddressRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  allocationId?: string(name='AllocationId'),
  instanceId?: string(name='InstanceId'),
  ownerAccount?: string(name='OwnerAccount'),
  instanceType?: string(name='InstanceType'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

async function unassociateEipAddressWithOptions(request: UnassociateEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassociateEipAddress', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateEipAddressWithOptions(request, runtime);
}

model UnassociateHaVipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  haVipId?: string(name='HaVipId'),
  instanceId?: string(name='InstanceId'),
  force?: string(name='Force'),
}

model UnassociateHaVipResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateHaVipResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateHaVipResponseBody(name='body'),
}

async function unassociateHaVipWithOptions(request: UnassociateHaVipRequest, runtime: Util.RuntimeOptions): UnassociateHaVipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassociateHaVip', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassociateHaVip(request: UnassociateHaVipRequest): UnassociateHaVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateHaVipWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  ownerAccount?: string(name='OwnerAccount'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2014-05-26', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

