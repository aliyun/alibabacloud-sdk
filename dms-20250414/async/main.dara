/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dms';
  @version = '2025-04-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAirflowLoginTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  airflowId: string(name='AirflowId', description='This parameter is required.', example='af-b3a7f110a6vmvn7xxxxxx', position='Query'),
}

model CreateAirflowLoginTokenResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    host?: string(name='Host', example='https://data-dms.aliyuncs.com/airflow/x/xxxx/af-ehrmszbxxxxxxx'),
    token?: string(name='Token', example='f432d77de03b6b95fc24f91414e29c'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='4284D079-30F4-5B23-ADC4-28F291622C9A'),
  success?: boolean(name='Success', example='True'),
}

model CreateAirflowLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAirflowLoginTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAirflowLoginToken  CreateAirflowLoginTokenRequest
  * @return CreateAirflowLoginTokenResponse
 */
async function createAirflowLoginToken(request: CreateAirflowLoginTokenRequest): CreateAirflowLoginTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAirflowLoginToken', 'POST', '/', 'json', false, 'json', request);
}

