/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('dms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateAirflowLoginTokenRequest {
  airflowId?: string(name='AirflowId', description='This parameter is required.', example='af-b3a7f110a6vmvn7xxxxxx'),
}

model CreateAirflowLoginTokenResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    host?: string(name='Host', example='https://data-dms.aliyuncs.com/airflow/x/xxxx/af-ehrmszbxxxxxxx'),
    token?: string(name='Token', example='f432d77de03b6b95fc24f91414e29c'),
  }(name='Data'),
  errorCode?: string(name='ErrorCode', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', description='Id of the request', example='4284D079-30F4-5B23-ADC4-28F291622C9A'),
  success?: boolean(name='Success', example='True'),
}

model CreateAirflowLoginTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAirflowLoginTokenResponseBody(name='body'),
}

/**
 * @summary 获取airflow登录凭证
 *
 * @param request CreateAirflowLoginTokenRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAirflowLoginTokenResponse
 */
async function createAirflowLoginTokenWithOptions(request: CreateAirflowLoginTokenRequest, runtime: $RuntimeOptions): CreateAirflowLoginTokenResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.airflowId)) {
    query['AirflowId'] = request.airflowId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateAirflowLoginToken',
    version = '2025-04-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取airflow登录凭证
 *
 * @param request CreateAirflowLoginTokenRequest
 * @return CreateAirflowLoginTokenResponse
 */
async function createAirflowLoginToken(request: CreateAirflowLoginTokenRequest): CreateAirflowLoginTokenResponse {
  var runtime = new $RuntimeOptions{};
  return createAirflowLoginTokenWithOptions(request, runtime);
}

