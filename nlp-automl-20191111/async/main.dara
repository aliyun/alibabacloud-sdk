/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'nlp-automl';
  @version = '2019-11-11';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateAsyncPredictRequest {
  content?: string(name='Content', position='Body'),
  detailTag?: string(name='DetailTag', example='false', position='Body'),
  fetchContent?: string(name='FetchContent', example='true,false', position='Body'),
  fileContent?: string(name='FileContent', example='[base64 encode content]', position='Body'),
  fileType?: string(name='FileType', example='text,html,pdf,docx,doc', position='Body'),
  fileUrl?: string(name='FileUrl', example='http://127.0.0.1/example.docx', position='Body'),
  modelId?: int32(name='ModelId', description='根据服务名称和服务版本创建异步预测的时候，此参数不必传；否则必传；', example='1', position='Body'),
  modelVersion?: string(name='ModelVersion', example='V1', position='Body'),
  serviceName?: string(name='ServiceName', description='服务名称', position='Body'),
  serviceVersion?: string(name='ServiceVersion', description='服务版本', position='Body'),
  topK?: int32(name='TopK', example='0,3', position='Body'),
}

model CreateAsyncPredictResponseBody = {
  asyncPredictId?: long(name='AsyncPredictId', example='1'),
  requestId?: string(name='RequestId', example='E5C4531B-8331-5CD5-BEB3-2F8B58A4D680'),
}

model CreateAsyncPredictResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncPredictResponseBody(name='body'),
}

async function createAsyncPredict(request: CreateAsyncPredictRequest): CreateAsyncPredictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAsyncPredict', 'POST', '/', 'json', true, 'form', request);
}

model GetAsyncPredictRequest {
  asyncPredictId: int32(name='AsyncPredictId', example='1629', position='Query'),
}

model GetAsyncPredictResponseBody = {
  asyncPredictId?: int32(name='AsyncPredictId', example='1629'),
  content?: string(name='Content', example='json string'),
  requestId?: string(name='RequestId', example='EBF1AAD7-A3FB-4A78-B5E9-8356324B12B2'),
  status?: int32(name='Status', example='2'),
}

model GetAsyncPredictResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncPredictResponseBody(name='body'),
}

async function getAsyncPredict(request: GetAsyncPredictRequest): GetAsyncPredictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncPredict', 'GET', '/', 'json', false, 'json', request);
}

model GetPredictResultRequest {
  content: string(name='Content', position='Body'),
  detailTag?: string(name='DetailTag', example='true', position='Body'),
  modelId: int32(name='ModelId', example='1818', position='Body'),
  modelVersion?: string(name='ModelVersion', example='V1', position='Body'),
  topK?: int32(name='TopK', example='3', position='Body'),
}

model GetPredictResultResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId', example='32CE4E89-218B-4DAE-A103-E6BFA66EE63B'),
}

model GetPredictResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetPredictResultResponseBody(name='body'),
}

async function getPredictResult(request: GetPredictResultRequest): GetPredictResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPredictResult', 'POST', '/', 'json', true, 'form', request);
}

model RunPreTrainServiceRequest {
  predictContent: string(name='PredictContent', position='Body'),
  serviceName: string(name='ServiceName', example='ReviewAnalysis', position='Body'),
  serviceVersion?: string(name='ServiceVersion', example='V1', position='Body'),
}

model RunPreTrainServiceResponseBody = {
  predictResult?: string(name='PredictResult'),
  requestId?: string(name='RequestId', example='7310FFCF-9FE8-4257-AE38-0E1AD828C2CC'),
}

model RunPreTrainServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RunPreTrainServiceResponseBody(name='body'),
}

async function runPreTrainService(request: RunPreTrainServiceRequest): RunPreTrainServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunPreTrainService', 'POST', '/', 'json', true, 'form', request);
}

