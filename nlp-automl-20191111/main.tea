/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('nlp-automl', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateAsyncPredictRequest {
  modelId?: int32(name='ModelId'),
  content?: string(name='Content'),
  modelVersion?: string(name='ModelVersion'),
  detailTag?: string(name='DetailTag'),
  topK?: int32(name='TopK'),
  fileType?: string(name='FileType'),
  fileUrl?: string(name='FileUrl'),
  fileContent?: string(name='FileContent'),
  fetchContent?: string(name='FetchContent'),
}

model CreateAsyncPredictResponseBody = {
  requestId?: string(name='RequestId'),
  asyncPredictId?: long(name='AsyncPredictId'),
}

model CreateAsyncPredictResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncPredictResponseBody(name='body'),
}

async function createAsyncPredictWithOptions(request: CreateAsyncPredictRequest, runtime: Util.RuntimeOptions): CreateAsyncPredictResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAsyncPredict',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAsyncPredict(request: CreateAsyncPredictRequest): CreateAsyncPredictResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAsyncPredictWithOptions(request, runtime);
}

model CreateDatasetRequest {
  projectId?: long(name='ProjectId'),
  datasetName?: string(name='DatasetName'),
}

model CreateDatasetResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
  datasetId?: map[string]any(name='DatasetId'),
}

model CreateDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetResponseBody(name='body'),
}

async function createDatasetWithOptions(request: CreateDatasetRequest, runtime: Util.RuntimeOptions): CreateDatasetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDataset',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDataset(request: CreateDatasetRequest): CreateDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetWithOptions(request, runtime);
}

model CreateDatasetRecordRequest {
  datasetId?: long(name='DatasetId'),
  datasetRecord?: string(name='DatasetRecord'),
  projectId?: long(name='ProjectId'),
}

model CreateDatasetRecordResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  datasetRecordId?: map[string]any(name='DatasetRecordId'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateDatasetRecordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDatasetRecordResponseBody(name='body'),
}

async function createDatasetRecordWithOptions(request: CreateDatasetRecordRequest, runtime: Util.RuntimeOptions): CreateDatasetRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDatasetRecord',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDatasetRecord(request: CreateDatasetRecordRequest): CreateDatasetRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatasetRecordWithOptions(request, runtime);
}

model CreateModelRequest {
  modelId?: long(name='ModelId'),
  modelType?: string(name='ModelType'),
  projectId?: long(name='ProjectId'),
  modelName?: string(name='ModelName'),
  datasetIdList?: map[string]any(name='DatasetIdList'),
  testDatasetIdList?: map[string]any(name='TestDatasetIdList'),
  isIncrementalTrain?: string(name='IsIncrementalTrain'),
}

model CreateModelShrinkRequest {
  modelId?: long(name='ModelId'),
  modelType?: string(name='ModelType'),
  projectId?: long(name='ProjectId'),
  modelName?: string(name='ModelName'),
  datasetIdListShrink?: string(name='DatasetIdList'),
  testDatasetIdListShrink?: string(name='TestDatasetIdList'),
  isIncrementalTrain?: string(name='IsIncrementalTrain'),
}

model CreateModelResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers'),
  body: CreateModelResponseBody(name='body'),
}

async function createModelWithOptions(tmpReq: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(tmpReq);
  var request = new CreateModelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.datasetIdList)) {
    request.datasetIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.datasetIdList, 'DatasetIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.testDatasetIdList)) {
    request.testDatasetIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.testDatasetIdList, 'TestDatasetIdList', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateModel',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model CreateProjectRequest {
  projectType?: string(name='ProjectType'),
  projectName?: string(name='ProjectName'),
  projectDescription?: string(name='ProjectDescription'),
}

model CreateProjectResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  projectId?: map[string]any(name='ProjectId'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model CreateProjectResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProjectResponseBody(name='body'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model DeleteModelRequest {
  modelId?: long(name='ModelId'),
  projectId?: long(name='ProjectId'),
}

model DeleteModelResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model DeleteModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteModelResponseBody(name='body'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteModel',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model DeployModelRequest {
  modelId?: long(name='ModelId'),
  optType?: string(name='OptType'),
  projectId?: long(name='ProjectId'),
  modelVersion?: string(name='ModelVersion'),
}

model DeployModelResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model DeployModelResponse = {
  headers: map[string]string(name='headers'),
  body: DeployModelResponseBody(name='body'),
}

async function deployModelWithOptions(request: DeployModelRequest, runtime: Util.RuntimeOptions): DeployModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeployModel',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployModel(request: DeployModelRequest): DeployModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployModelWithOptions(request, runtime);
}

model GetAsyncPredictRequest {
  asyncPredictId?: int32(name='AsyncPredictId'),
}

model GetAsyncPredictResponseBody = {
  status?: int32(name='Status'),
  requestId?: string(name='RequestId'),
  content?: string(name='Content'),
  asyncPredictId?: int32(name='AsyncPredictId'),
}

model GetAsyncPredictResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncPredictResponseBody(name='body'),
}

async function getAsyncPredictWithOptions(request: GetAsyncPredictRequest, runtime: Util.RuntimeOptions): GetAsyncPredictResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncPredict',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncPredict(request: GetAsyncPredictRequest): GetAsyncPredictResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncPredictWithOptions(request, runtime);
}

model GetModelRequest {
  modelId?: long(name='ModelId'),
  projectId?: long(name='ProjectId'),
  modelVersion?: string(name='ModelVersion'),
}

model GetModelResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetModelResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelResponseBody(name='body'),
}

async function getModelWithOptions(request: GetModelRequest, runtime: Util.RuntimeOptions): GetModelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetModel',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModel(request: GetModelRequest): GetModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelWithOptions(request, runtime);
}

model GetModelFeaturesInfoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model GetModelFeaturesInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetModelFeaturesInfoResponseBody(name='body'),
}

async function getModelFeaturesInfoWithOptions(runtime: Util.RuntimeOptions): GetModelFeaturesInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetModelFeaturesInfo',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getModelFeaturesInfo(): GetModelFeaturesInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelFeaturesInfoWithOptions(runtime);
}

model GetPredictResultRequest {
  modelId?: int32(name='ModelId'),
  content?: string(name='Content'),
  modelVersion?: string(name='ModelVersion'),
  detailTag?: string(name='DetailTag'),
  topK?: int32(name='TopK'),
}

model GetPredictResultResponseBody = {
  requestId?: string(name='RequestId'),
  content?: string(name='Content'),
}

model GetPredictResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetPredictResultResponseBody(name='body'),
}

async function getPredictResultWithOptions(request: GetPredictResultRequest, runtime: Util.RuntimeOptions): GetPredictResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetPredictResult',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPredictResult(request: GetPredictResultRequest): GetPredictResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPredictResultWithOptions(request, runtime);
}

model ListDatasetRequest {
  projectId?: long(name='ProjectId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListDatasetResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model ListDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: ListDatasetResponseBody(name='body'),
}

async function listDatasetWithOptions(request: ListDatasetRequest, runtime: Util.RuntimeOptions): ListDatasetResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListDataset',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDataset(request: ListDatasetRequest): ListDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasetWithOptions(request, runtime);
}

model ListModelsRequest {
  projectId?: long(name='ProjectId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model ListModelsResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: map[string]any(name='Data'),
  code?: int32(name='Code'),
  success?: boolean(name='Success'),
}

model ListModelsResponse = {
  headers: map[string]string(name='headers'),
  body: ListModelsResponseBody(name='body'),
}

async function listModelsWithOptions(request: ListModelsRequest, runtime: Util.RuntimeOptions): ListModelsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListModels',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listModels(request: ListModelsRequest): ListModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listModelsWithOptions(request, runtime);
}

model RunContactReviewRequest {
  contactScene?: string(name='ContactScene'),
  contactPath?: string(name='ContactPath'),
}

model RunContactReviewResponseBody = {
  requestId?: string(name='RequestId'),
  rawContractContent?: string(name='RawContractContent'),
  contactContent?: {
    reviewResults?: [ 
      {
        riskLevel?: string(name='RiskLevel'),
        type?: string(name='Type'),
        value?: [ string ](name='Value'),
        startPosition?: [ string ](name='StartPosition'),
        modificationSuggestion?: string(name='ModificationSuggestion'),
        reason?: string(name='Reason'),
        endPosition?: [ string ](name='EndPosition'),
      }
    ](name='ReviewResults'),
    structureResults?: [ 
      {
        type?: string(name='Type'),
        value?: [ string ](name='Value'),
        startPosition?: [ string ](name='StartPosition'),
        name?: string(name='Name'),
        endPosition?: [ string ](name='EndPosition'),
      }
    ](name='StructureResults'),
  }(name='ContactContent'),
}

model RunContactReviewResponse = {
  headers: map[string]string(name='headers'),
  body: RunContactReviewResponseBody(name='body'),
}

async function runContactReviewWithOptions(request: RunContactReviewRequest, runtime: Util.RuntimeOptions): RunContactReviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RunContactReview',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runContactReview(request: RunContactReviewRequest): RunContactReviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return runContactReviewWithOptions(request, runtime);
}

model RunPreTrainServiceRequest {
  serviceName?: string(name='ServiceName'),
  serviceVersion?: string(name='ServiceVersion'),
  predictContent?: string(name='PredictContent'),
}

model RunPreTrainServiceResponseBody = {
  requestId?: string(name='RequestId'),
  predictResult?: string(name='PredictResult'),
}

model RunPreTrainServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RunPreTrainServiceResponseBody(name='body'),
}

async function runPreTrainServiceWithOptions(request: RunPreTrainServiceRequest, runtime: Util.RuntimeOptions): RunPreTrainServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RunPreTrainService',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runPreTrainService(request: RunPreTrainServiceRequest): RunPreTrainServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return runPreTrainServiceWithOptions(request, runtime);
}

model RunSmartCallServiceRequest {
  serviceName?: string(name='ServiceName'),
  paramContent?: string(name='ParamContent'),
  robotId?: long(name='RobotId'),
  sessionId?: string(name='SessionId'),
}

model RunSmartCallServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  code?: int32(name='Code'),
}

model RunSmartCallServiceResponse = {
  headers: map[string]string(name='headers'),
  body: RunSmartCallServiceResponseBody(name='body'),
}

async function runSmartCallServiceWithOptions(request: RunSmartCallServiceRequest, runtime: Util.RuntimeOptions): RunSmartCallServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RunSmartCallService',
    version = '2019-11-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function runSmartCallService(request: RunSmartCallServiceRequest): RunSmartCallServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return runSmartCallServiceWithOptions(request, runtime);
}

