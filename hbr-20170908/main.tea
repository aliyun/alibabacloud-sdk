/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'hbr.aliyuncs.com',
    cn-beijing-finance-1 = 'hbr.aliyuncs.com',
    cn-beijing-finance-pop = 'hbr.aliyuncs.com',
    cn-beijing-gov-1 = 'hbr.aliyuncs.com',
    cn-beijing-nu16-b01 = 'hbr.aliyuncs.com',
    cn-edge-1 = 'hbr.aliyuncs.com',
    cn-fujian = 'hbr.aliyuncs.com',
    cn-haidian-cm12-c01 = 'hbr.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'hbr.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'hbr.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'hbr.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'hbr.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'hbr.aliyuncs.com',
    cn-hangzhou-test-306 = 'hbr.aliyuncs.com',
    cn-hongkong-finance-pop = 'hbr.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'hbr.aliyuncs.com',
    cn-qingdao-nebula = 'hbr.aliyuncs.com',
    cn-shanghai-et15-b01 = 'hbr.aliyuncs.com',
    cn-shanghai-et2-b01 = 'hbr.aliyuncs.com',
    cn-shanghai-inner = 'hbr.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'hbr.aliyuncs.com',
    cn-shenzhen-inner = 'hbr.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'hbr.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'hbr.aliyuncs.com',
    cn-wuhan = 'hbr.aliyuncs.com',
    cn-wulanchabu = 'hbr.aliyuncs.com',
    cn-yushanfang = 'hbr.aliyuncs.com',
    cn-zhangbei = 'hbr.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'hbr.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'hbr.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'hbr.aliyuncs.com',
    eu-west-1-oxs = 'hbr.aliyuncs.com',
    rus-west-1-pop = 'hbr.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('hbr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model OtsDetail {
  tableNames?: [ string ](name='TableNames', description='OTS table name list'),
}

model Rule {
  backupType?: string(name='BackupType', description='backup type'),
  destinationRegionId?: string(name='DestinationRegionId', description='copy target region id'),
  destinationRetention?: long(name='DestinationRetention', description='retention for remote replication'),
  disabled?: boolean(name='Disabled', description='disable the rule or not'),
  doCopy?: boolean(name='DoCopy', description='copy to other region'),
  retention?: long(name='Retention', description='retention of backup'),
  ruleName?: string(name='RuleName', description='rule name'),
  schedule?: string(name='Schedule', description='schedule setting'),
}

model CancelBackupJobRequest {
  jobId?: string(name='JobId'),
  vaultId?: string(name='VaultId'),
}

model CancelBackupJobResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelBackupJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelBackupJobResponseBody(name='body'),
}

async function cancelBackupJobWithOptions(request: CancelBackupJobRequest, runtime: Util.RuntimeOptions): CancelBackupJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelBackupJob',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelBackupJob(request: CancelBackupJobRequest): CancelBackupJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelBackupJobWithOptions(request, runtime);
}

model CancelRestoreJobRequest {
  restoreId?: string(name='RestoreId'),
  vaultId?: string(name='VaultId'),
}

model CancelRestoreJobResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  body: CancelRestoreJobResponseBody(name='body'),
}

async function cancelRestoreJobWithOptions(request: CancelRestoreJobRequest, runtime: Util.RuntimeOptions): CancelRestoreJobResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.restoreId)) {
    query['RestoreId'] = request.restoreId;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelRestoreJob',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelRestoreJob(request: CancelRestoreJobRequest): CancelRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelRestoreJobWithOptions(request, runtime);
}

model ChangeResourceGroupRequest {
  newResourceGroupId?: string(name='NewResourceGroupId'),
  resourceId?: string(name='ResourceId'),
  resourceType?: string(name='ResourceType'),
}

model ChangeResourceGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResourceGroupResponseBody(name='body'),
}

async function changeResourceGroupWithOptions(request: ChangeResourceGroupRequest, runtime: Util.RuntimeOptions): ChangeResourceGroupResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.newResourceGroupId)) {
    body['NewResourceGroupId'] = request.newResourceGroupId;
  }
  if (!Util.isUnset(request.resourceId)) {
    body['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResourceGroup',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResourceGroupWithOptions(request, runtime);
}

model CreateBackupPlanRequest {
  backupType?: string(name='BackupType'),
  bucket?: string(name='Bucket'),
  createTime?: long(name='CreateTime'),
  exclude?: string(name='Exclude'),
  fileSystemId?: string(name='FileSystemId'),
  include?: string(name='Include'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  options?: string(name='Options'),
  otsDetail?: OtsDetail(name='OtsDetail'),
  path?: [ string ](name='Path'),
  planName?: string(name='PlanName'),
  prefix?: string(name='Prefix'),
  retention?: long(name='Retention'),
  schedule?: string(name='Schedule'),
  sourceType?: string(name='SourceType'),
  speedLimit?: string(name='SpeedLimit'),
  vaultId?: string(name='VaultId'),
}

model CreateBackupPlanShrinkRequest {
  backupType?: string(name='BackupType'),
  bucket?: string(name='Bucket'),
  createTime?: long(name='CreateTime'),
  exclude?: string(name='Exclude'),
  fileSystemId?: string(name='FileSystemId'),
  include?: string(name='Include'),
  instanceId?: string(name='InstanceId'),
  instanceName?: string(name='InstanceName'),
  options?: string(name='Options'),
  otsDetailShrink?: string(name='OtsDetail'),
  path?: [ string ](name='Path'),
  planName?: string(name='PlanName'),
  prefix?: string(name='Prefix'),
  retention?: long(name='Retention'),
  schedule?: string(name='Schedule'),
  sourceType?: string(name='SourceType'),
  speedLimit?: string(name='SpeedLimit'),
  vaultId?: string(name='VaultId'),
}

model CreateBackupPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  planId?: string(name='PlanId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPlanResponseBody(name='body'),
}

async function createBackupPlanWithOptions(tmpReq: CreateBackupPlanRequest, runtime: Util.RuntimeOptions): CreateBackupPlanResponse {
  Util.validateModel(tmpReq);
  var request = new CreateBackupPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.otsDetail)) {
    request.otsDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.otsDetail, 'OtsDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.backupType)) {
    query['BackupType'] = request.backupType;
  }
  if (!Util.isUnset(request.bucket)) {
    query['Bucket'] = request.bucket;
  }
  if (!Util.isUnset(request.createTime)) {
    query['CreateTime'] = request.createTime;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.schedule)) {
    query['Schedule'] = request.schedule;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.exclude)) {
    body['Exclude'] = request.exclude;
  }
  if (!Util.isUnset(request.include)) {
    body['Include'] = request.include;
  }
  if (!Util.isUnset(request.instanceId)) {
    body['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    body['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.otsDetailShrink)) {
    body['OtsDetail'] = request.otsDetailShrink;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.speedLimit)) {
    body['SpeedLimit'] = request.speedLimit;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBackupPlan(request: CreateBackupPlanRequest): CreateBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPlanWithOptions(request, runtime);
}

model CreateReplicationVaultRequest {
  description?: string(name='Description'),
  redundancyType?: string(name='RedundancyType'),
  replicationSourceRegionId?: string(name='ReplicationSourceRegionId'),
  replicationSourceVaultId?: string(name='ReplicationSourceVaultId'),
  vaultName?: string(name='VaultName'),
  vaultRegionId?: string(name='VaultRegionId'),
  vaultStorageClass?: string(name='VaultStorageClass'),
}

model CreateReplicationVaultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  vaultId?: string(name='VaultId'),
}

model CreateReplicationVaultResponse = {
  headers: map[string]string(name='headers'),
  body: CreateReplicationVaultResponseBody(name='body'),
}

async function createReplicationVaultWithOptions(request: CreateReplicationVaultRequest, runtime: Util.RuntimeOptions): CreateReplicationVaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.redundancyType)) {
    query['RedundancyType'] = request.redundancyType;
  }
  if (!Util.isUnset(request.replicationSourceRegionId)) {
    query['ReplicationSourceRegionId'] = request.replicationSourceRegionId;
  }
  if (!Util.isUnset(request.replicationSourceVaultId)) {
    query['ReplicationSourceVaultId'] = request.replicationSourceVaultId;
  }
  if (!Util.isUnset(request.vaultName)) {
    query['VaultName'] = request.vaultName;
  }
  if (!Util.isUnset(request.vaultRegionId)) {
    query['VaultRegionId'] = request.vaultRegionId;
  }
  if (!Util.isUnset(request.vaultStorageClass)) {
    query['VaultStorageClass'] = request.vaultStorageClass;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateReplicationVault',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createReplicationVault(request: CreateReplicationVaultRequest): CreateReplicationVaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return createReplicationVaultWithOptions(request, runtime);
}

model CreateRestoreJobRequest {
  exclude?: string(name='Exclude'),
  include?: string(name='Include'),
  otsDetail?: {
    batchChannelCount?: int32(name='BatchChannelCount'),
    overwriteExisting?: boolean(name='OverwriteExisting'),
  }(name='OtsDetail'),
  restoreType?: string(name='RestoreType'),
  snapshotHash?: string(name='SnapshotHash'),
  snapshotId?: string(name='SnapshotId'),
  sourceType?: string(name='SourceType'),
  targetBucket?: string(name='TargetBucket'),
  targetCreateTime?: long(name='TargetCreateTime'),
  targetFileSystemId?: string(name='TargetFileSystemId'),
  targetInstanceId?: string(name='TargetInstanceId'),
  targetInstanceName?: string(name='TargetInstanceName'),
  targetPath?: string(name='TargetPath'),
  targetPrefix?: string(name='TargetPrefix'),
  targetTableName?: string(name='TargetTableName'),
  targetTime?: long(name='TargetTime'),
  udmDetail?: map[string]any(name='UdmDetail'),
  vaultId?: string(name='VaultId'),
}

model CreateRestoreJobShrinkRequest {
  exclude?: string(name='Exclude'),
  include?: string(name='Include'),
  otsDetail?: {
    batchChannelCount?: int32(name='BatchChannelCount'),
    overwriteExisting?: boolean(name='OverwriteExisting'),
  }(name='OtsDetail'),
  restoreType?: string(name='RestoreType'),
  snapshotHash?: string(name='SnapshotHash'),
  snapshotId?: string(name='SnapshotId'),
  sourceType?: string(name='SourceType'),
  targetBucket?: string(name='TargetBucket'),
  targetCreateTime?: long(name='TargetCreateTime'),
  targetFileSystemId?: string(name='TargetFileSystemId'),
  targetInstanceId?: string(name='TargetInstanceId'),
  targetInstanceName?: string(name='TargetInstanceName'),
  targetPath?: string(name='TargetPath'),
  targetPrefix?: string(name='TargetPrefix'),
  targetTableName?: string(name='TargetTableName'),
  targetTime?: long(name='TargetTime'),
  udmDetailShrink?: string(name='UdmDetail'),
  vaultId?: string(name='VaultId'),
}

model CreateRestoreJobResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  restoreId?: string(name='RestoreId'),
  success?: boolean(name='Success'),
}

model CreateRestoreJobResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRestoreJobResponseBody(name='body'),
}

async function createRestoreJobWithOptions(tmpReq: CreateRestoreJobRequest, runtime: Util.RuntimeOptions): CreateRestoreJobResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRestoreJobShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.udmDetail)) {
    request.udmDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.udmDetail, 'UdmDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.restoreType)) {
    query['RestoreType'] = request.restoreType;
  }
  if (!Util.isUnset(request.snapshotHash)) {
    query['SnapshotHash'] = request.snapshotHash;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.targetBucket)) {
    query['TargetBucket'] = request.targetBucket;
  }
  if (!Util.isUnset(request.targetCreateTime)) {
    query['TargetCreateTime'] = request.targetCreateTime;
  }
  if (!Util.isUnset(request.targetFileSystemId)) {
    query['TargetFileSystemId'] = request.targetFileSystemId;
  }
  if (!Util.isUnset(request.targetInstanceName)) {
    query['TargetInstanceName'] = request.targetInstanceName;
  }
  if (!Util.isUnset(request.targetPrefix)) {
    query['TargetPrefix'] = request.targetPrefix;
  }
  if (!Util.isUnset(request.targetTableName)) {
    query['TargetTableName'] = request.targetTableName;
  }
  if (!Util.isUnset(request.targetTime)) {
    query['TargetTime'] = request.targetTime;
  }
  if (!Util.isUnset(request.udmDetailShrink)) {
    query['UdmDetail'] = request.udmDetailShrink;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.exclude)) {
    body['Exclude'] = request.exclude;
  }
  if (!Util.isUnset(request.include)) {
    body['Include'] = request.include;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.otsDetail)) {
    bodyFlat['OtsDetail'] = request.otsDetail;
  }
  if (!Util.isUnset(request.targetInstanceId)) {
    body['TargetInstanceId'] = request.targetInstanceId;
  }
  if (!Util.isUnset(request.targetPath)) {
    body['TargetPath'] = request.targetPath;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRestoreJob',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRestoreJob(request: CreateRestoreJobRequest): CreateRestoreJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRestoreJobWithOptions(request, runtime);
}

model CreateVaultRequest {
  bucketName?: string(name='BucketName'),
  compressionAlgorithm?: string(name='CompressionAlgorithm'),
  description?: string(name='Description'),
  endpoint?: string(name='Endpoint'),
  redundancyType?: string(name='RedundancyType'),
  vaultAccessKeyId?: string(name='VaultAccessKeyId'),
  vaultAccessKeySecret?: string(name='VaultAccessKeySecret'),
  vaultName?: string(name='VaultName'),
  vaultRegionId?: string(name='VaultRegionId'),
  vaultStorageClass?: string(name='VaultStorageClass'),
  vaultType?: string(name='VaultType'),
}

model CreateVaultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  vaultId?: string(name='VaultId'),
}

model CreateVaultResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVaultResponseBody(name='body'),
}

async function createVaultWithOptions(request: CreateVaultRequest, runtime: Util.RuntimeOptions): CreateVaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bucketName)) {
    query['BucketName'] = request.bucketName;
  }
  if (!Util.isUnset(request.compressionAlgorithm)) {
    query['CompressionAlgorithm'] = request.compressionAlgorithm;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.endpoint)) {
    query['Endpoint'] = request.endpoint;
  }
  if (!Util.isUnset(request.redundancyType)) {
    query['RedundancyType'] = request.redundancyType;
  }
  if (!Util.isUnset(request.vaultAccessKeyId)) {
    query['VaultAccessKeyId'] = request.vaultAccessKeyId;
  }
  if (!Util.isUnset(request.vaultAccessKeySecret)) {
    query['VaultAccessKeySecret'] = request.vaultAccessKeySecret;
  }
  if (!Util.isUnset(request.vaultName)) {
    query['VaultName'] = request.vaultName;
  }
  if (!Util.isUnset(request.vaultRegionId)) {
    query['VaultRegionId'] = request.vaultRegionId;
  }
  if (!Util.isUnset(request.vaultStorageClass)) {
    query['VaultStorageClass'] = request.vaultStorageClass;
  }
  if (!Util.isUnset(request.vaultType)) {
    query['VaultType'] = request.vaultType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVault',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createVault(request: CreateVaultRequest): CreateVaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVaultWithOptions(request, runtime);
}

model DeleteBackupClientRequest {
  clientId?: string(name='ClientId'),
}

model DeleteBackupClientResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBackupClientResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupClientResponseBody(name='body'),
}

async function deleteBackupClientWithOptions(request: DeleteBackupClientRequest, runtime: Util.RuntimeOptions): DeleteBackupClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupClient',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupClient(request: DeleteBackupClientRequest): DeleteBackupClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupClientWithOptions(request, runtime);
}

model DeleteBackupClientResourceRequest {
  clientIds?: map[string]any(name='ClientIds'),
}

model DeleteBackupClientResourceShrinkRequest {
  clientIdsShrink?: string(name='ClientIds'),
}

model DeleteBackupClientResourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBackupClientResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupClientResourceResponseBody(name='body'),
}

async function deleteBackupClientResourceWithOptions(tmpReq: DeleteBackupClientResourceRequest, runtime: Util.RuntimeOptions): DeleteBackupClientResourceResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteBackupClientResourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clientIds)) {
    request.clientIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clientIds, 'ClientIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientIdsShrink)) {
    query['ClientIds'] = request.clientIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupClientResource',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupClientResource(request: DeleteBackupClientResourceRequest): DeleteBackupClientResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupClientResourceWithOptions(request, runtime);
}

model DeleteBackupPlanRequest {
  planId?: string(name='PlanId'),
  sourceType?: string(name='SourceType'),
  vaultId?: string(name='VaultId'),
}

model DeleteBackupPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPlanResponseBody(name='body'),
}

async function deleteBackupPlanWithOptions(request: DeleteBackupPlanRequest, runtime: Util.RuntimeOptions): DeleteBackupPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBackupPlan(request: DeleteBackupPlanRequest): DeleteBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPlanWithOptions(request, runtime);
}

model DeleteSnapshotRequest {
  clientId?: string(name='ClientId'),
  force?: boolean(name='Force'),
  instanceId?: string(name='InstanceId'),
  snapshotId?: string(name='SnapshotId'),
  sourceType?: string(name='SourceType'),
  token?: string(name='Token'),
  vaultId?: string(name='VaultId'),
}

model DeleteSnapshotResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSnapshotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSnapshotResponseBody(name='body'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.force)) {
    query['Force'] = request.force;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSnapshot',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model DeleteVaultRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  token?: string(name='Token'),
  vaultId?: string(name='VaultId'),
}

model DeleteVaultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteVaultResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVaultResponseBody(name='body'),
}

async function deleteVaultWithOptions(request: DeleteVaultRequest, runtime: Util.RuntimeOptions): DeleteVaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVault',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteVault(request: DeleteVaultRequest): DeleteVaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVaultWithOptions(request, runtime);
}

model DescribeBackupClientsRequest {
  clientIds?: map[string]any(name='ClientIds'),
  clientType?: string(name='ClientType'),
  instanceIds?: map[string]any(name='InstanceIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeBackupClientsShrinkRequest {
  clientIdsShrink?: string(name='ClientIds'),
  clientType?: string(name='ClientType'),
  instanceIdsShrink?: string(name='InstanceIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeBackupClientsResponseBody = {
  clients?: [ 
    {
      appliance?: boolean(name='Appliance'),
      archType?: string(name='ArchType'),
      backupStatus?: string(name='BackupStatus'),
      clientId?: string(name='ClientId'),
      clientType?: string(name='ClientType'),
      clientVersion?: string(name='ClientVersion'),
      createdTime?: long(name='CreatedTime'),
      hostname?: string(name='Hostname'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      lastHeartBeatTime?: long(name='LastHeartBeatTime'),
      maxClientVersion?: string(name='MaxClientVersion'),
      osType?: string(name='OsType'),
      privateIpV4?: string(name='PrivateIpV4'),
      settings?: {
        dataNetworkType?: string(name='DataNetworkType'),
        dataProxySetting?: string(name='DataProxySetting'),
        maxCpuCore?: string(name='MaxCpuCore'),
        maxWorker?: string(name='MaxWorker'),
        proxyHost?: string(name='ProxyHost'),
        proxyPassword?: string(name='ProxyPassword'),
        proxyPort?: int32(name='ProxyPort'),
        proxyUser?: string(name='ProxyUser'),
        useHttps?: string(name='UseHttps'),
      }(name='Settings'),
      status?: string(name='Status'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      updatedTime?: long(name='UpdatedTime'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Clients'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupClientsResponseBody(name='body'),
}

async function describeBackupClientsWithOptions(tmpReq: DescribeBackupClientsRequest, runtime: Util.RuntimeOptions): DescribeBackupClientsResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeBackupClientsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clientIds)) {
    request.clientIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clientIds, 'ClientIds', 'json');
  }
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientType)) {
    query['ClientType'] = request.clientType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.clientIdsShrink)) {
    body['ClientIds'] = request.clientIdsShrink;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    body['InstanceIds'] = request.instanceIdsShrink;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupClients',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupClients(request: DescribeBackupClientsRequest): DescribeBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupClientsWithOptions(request, runtime);
}

model DescribeBackupJobs2Request {
  filters?: [ 
    {
      key?: string(name='Key'),
      operator?: string(name='Operator'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortDirection?: string(name='SortDirection'),
  sourceType?: string(name='SourceType'),
}

model DescribeBackupJobs2ResponseBody = {
  backupJobs?: {
    backupJob?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      actualItems?: long(name='ActualItems'),
      backupType?: string(name='BackupType'),
      bucket?: string(name='Bucket'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      completeTime?: long(name='CompleteTime'),
      createTime?: long(name='CreateTime'),
      createdTime?: long(name='CreatedTime'),
      errorMessage?: string(name='ErrorMessage'),
      exclude?: string(name='Exclude'),
      fileSystemId?: string(name='FileSystemId'),
      include?: string(name='Include'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      jobId?: string(name='JobId'),
      jobName?: string(name='JobName'),
      options?: string(name='Options'),
      otsDetail?: {
        tableNames?: {
          tableName?: [ string ](name='TableName')
        }(name='TableNames'),
      }(name='OtsDetail'),
      paths?: {
        path?: [ string ](name='Path')
      }(name='Paths'),
      planId?: string(name='PlanId'),
      prefix?: string(name='Prefix'),
      progress?: int32(name='Progress'),
      sourceType?: string(name='SourceType'),
      speed?: long(name='Speed'),
      speedLimit?: string(name='SpeedLimit'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
    }
  ](name='BackupJob')
  }(name='BackupJobs'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeBackupJobs2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupJobs2ResponseBody(name='body'),
}

async function describeBackupJobs2WithOptions(request: DescribeBackupJobs2Request, runtime: Util.RuntimeOptions): DescribeBackupJobs2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortDirection)) {
    query['SortDirection'] = request.sortDirection;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupJobs2',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupJobs2(request: DescribeBackupJobs2Request): DescribeBackupJobs2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupJobs2WithOptions(request, runtime);
}

model DescribeBackupPlansRequest {
  filters?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sourceType?: string(name='SourceType'),
}

model DescribeBackupPlansResponseBody = {
  backupPlans?: {
    backupPlan?: [ 
    {
      backupSourceGroupId?: string(name='BackupSourceGroupId'),
      backupType?: string(name='BackupType'),
      bucket?: string(name='Bucket'),
      clientId?: string(name='ClientId'),
      clusterId?: string(name='ClusterId'),
      createTime?: long(name='CreateTime'),
      createdTime?: long(name='CreatedTime'),
      dataSourceId?: string(name='DataSourceId'),
      detail?: string(name='Detail'),
      disabled?: boolean(name='Disabled'),
      exclude?: string(name='Exclude'),
      fileSystemId?: string(name='FileSystemId'),
      include?: string(name='Include'),
      instanceGroupId?: string(name='InstanceGroupId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      options?: string(name='Options'),
      otsDetail?: {
        tableNames?: {
          tableName?: [ string ](name='TableName')
        }(name='TableNames'),
      }(name='OtsDetail'),
      paths?: {
        path?: [ string ](name='Path')
      }(name='Paths'),
      planId?: string(name='PlanId'),
      planName?: string(name='PlanName'),
      prefix?: string(name='Prefix'),
      resources?: {
        resource?: [ 
        {
          extra?: string(name='Extra'),
          resourceId?: string(name='ResourceId'),
          sourceType?: string(name='SourceType'),
        }
      ](name='Resource')
      }(name='Resources'),
      retention?: long(name='Retention'),
      rules?: {
        rule?: [ 
        {
          backupType?: string(name='BackupType'),
          destinationRegionId?: string(name='DestinationRegionId'),
          destinationRetention?: long(name='DestinationRetention'),
          disabled?: boolean(name='Disabled'),
          doCopy?: boolean(name='DoCopy'),
          retention?: long(name='Retention'),
          ruleId?: string(name='RuleId'),
          ruleName?: string(name='RuleName'),
          schedule?: string(name='Schedule'),
        }
      ](name='Rule')
      }(name='Rules'),
      schedule?: string(name='Schedule'),
      sourceType?: string(name='SourceType'),
      speedLimit?: string(name='SpeedLimit'),
      trialInfo?: {
        keepAfterTrialExpiration?: boolean(name='KeepAfterTrialExpiration'),
        trialExpireTime?: long(name='TrialExpireTime'),
        trialStartTime?: long(name='TrialStartTime'),
        trialVaultReleaseTime?: long(name='TrialVaultReleaseTime'),
      }(name='TrialInfo'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
    }
  ](name='BackupPlan')
  }(name='BackupPlans'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeBackupPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlansResponseBody(name='body'),
}

async function describeBackupPlansWithOptions(request: DescribeBackupPlansRequest, runtime: Util.RuntimeOptions): DescribeBackupPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackupPlans',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackupPlans(request: DescribeBackupPlansRequest): DescribeBackupPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPlansWithOptions(request, runtime);
}

model DescribeOtsTableSnapshotsRequest {
  endTime?: long(name='EndTime'),
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  otsInstances?: [ 
    {
      instanceName?: string(name='InstanceName'),
      tableNames?: [ string ](name='TableNames'),
    }
  ](name='OtsInstances'),
  snapshotIds?: [ string ](name='SnapshotIds'),
  startTime?: long(name='StartTime'),
}

model DescribeOtsTableSnapshotsResponseBody = {
  code?: string(name='Code'),
  limit?: int32(name='Limit'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      actualBytes?: string(name='ActualBytes'),
      backupType?: string(name='BackupType'),
      bytesTotal?: long(name='BytesTotal'),
      completeTime?: long(name='CompleteTime'),
      createTime?: long(name='CreateTime'),
      createdTime?: long(name='CreatedTime'),
      instanceName?: string(name='InstanceName'),
      jobId?: string(name='JobId'),
      parentSnapshotHash?: string(name='ParentSnapshotHash'),
      rangeEnd?: long(name='RangeEnd'),
      rangeStart?: long(name='RangeStart'),
      retention?: long(name='Retention'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      sourceType?: string(name='SourceType'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
    }
  ](name='Snapshots'),
  success?: boolean(name='Success'),
}

model DescribeOtsTableSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOtsTableSnapshotsResponseBody(name='body'),
}

async function describeOtsTableSnapshotsWithOptions(request: DescribeOtsTableSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeOtsTableSnapshotsResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    body['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  var bodyFlat : map[string]any= {};
  if (!Util.isUnset(request.otsInstances)) {
    bodyFlat['OtsInstances'] = request.otsInstances;
  }
  if (!Util.isUnset(request.snapshotIds)) {
    bodyFlat['SnapshotIds'] = request.snapshotIds;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOtsTableSnapshots',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOtsTableSnapshots(request: DescribeOtsTableSnapshotsRequest): DescribeOtsTableSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOtsTableSnapshotsWithOptions(request, runtime);
}

model DescribeRecoverableOtsInstancesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  otsInstances?: [ 
    {
      instanceName?: string(name='InstanceName'),
      tableNames?: [ string ](name='TableNames'),
    }
  ](name='OtsInstances'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRecoverableOtsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoverableOtsInstancesResponseBody(name='body'),
}

async function describeRecoverableOtsInstancesWithOptions(runtime: Util.RuntimeOptions): DescribeRecoverableOtsInstancesResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRecoverableOtsInstances',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoverableOtsInstances(): DescribeRecoverableOtsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoverableOtsInstancesWithOptions(runtime);
}

model DescribeRegionsRequest {
  needVaultCount?: boolean(name='NeedVaultCount'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
      vaultCount?: int32(name='VaultCount'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.needVaultCount)) {
    query['NeedVaultCount'] = request.needVaultCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRestoreJobs2Request {
  filters?: [ 
    {
      key?: string(name='Key'),
      operator?: string(name='Operator'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  restoreType?: string(name='RestoreType'),
}

model DescribeRestoreJobs2ResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  restoreJobs?: {
    restoreJob?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      actualItems?: long(name='ActualItems'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clusterId?: string(name='ClusterId'),
      completeTime?: long(name='CompleteTime'),
      createdTime?: long(name='CreatedTime'),
      errorFile?: string(name='ErrorFile'),
      errorMessage?: string(name='ErrorMessage'),
      exclude?: string(name='Exclude'),
      expireTime?: long(name='ExpireTime'),
      include?: string(name='Include'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      options?: string(name='Options'),
      otsDetail?: {
        batchChannelCount?: int32(name='BatchChannelCount'),
        overwriteExisting?: boolean(name='OverwriteExisting'),
      }(name='OtsDetail'),
      parentId?: string(name='ParentId'),
      progress?: int32(name='Progress'),
      restoreId?: string(name='RestoreId'),
      restoreType?: string(name='RestoreType'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      sourceType?: string(name='SourceType'),
      speed?: long(name='Speed'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      targetBucket?: string(name='TargetBucket'),
      targetClientId?: string(name='TargetClientId'),
      targetCreateTime?: long(name='TargetCreateTime'),
      targetDataSourceId?: string(name='TargetDataSourceId'),
      targetFileSystemId?: string(name='TargetFileSystemId'),
      targetInstanceId?: string(name='TargetInstanceId'),
      targetInstanceName?: string(name='TargetInstanceName'),
      targetPath?: string(name='TargetPath'),
      targetPrefix?: string(name='TargetPrefix'),
      targetTableName?: string(name='TargetTableName'),
      targetTime?: long(name='TargetTime'),
      udmDetail?: string(name='UdmDetail'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
    }
  ](name='RestoreJob')
  }(name='RestoreJobs'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRestoreJobs2Response = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreJobs2ResponseBody(name='body'),
}

async function describeRestoreJobs2WithOptions(request: DescribeRestoreJobs2Request, runtime: Util.RuntimeOptions): DescribeRestoreJobs2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filters)) {
    query['Filters'] = request.filters;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.restoreType)) {
    query['RestoreType'] = request.restoreType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRestoreJobs2',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRestoreJobs2(request: DescribeRestoreJobs2Request): DescribeRestoreJobs2Response {
  var runtime = new Util.RuntimeOptions{};
  return describeRestoreJobs2WithOptions(request, runtime);
}

model DescribeTaskRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskId?: string(name='TaskId'),
  token?: string(name='Token'),
}

model DescribeTaskResponseBody = {
  code?: string(name='Code'),
  completedTime?: long(name='CompletedTime'),
  createdTime?: long(name='CreatedTime'),
  description?: string(name='Description'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
  updatedTime?: long(name='UpdatedTime'),
}

model DescribeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskResponseBody(name='body'),
}

async function describeTaskWithOptions(request: DescribeTaskRequest, runtime: Util.RuntimeOptions): DescribeTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTask',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskWithOptions(request, runtime);
}

model DescribeUdmSnapshotsRequest {
  diskId?: string(name='DiskId'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  snapshotIds?: map[string]any(name='SnapshotIds'),
  sourceType?: string(name='SourceType'),
  startTime?: long(name='StartTime'),
  udmRegionId?: string(name='UdmRegionId'),
}

model DescribeUdmSnapshotsShrinkRequest {
  diskId?: string(name='DiskId'),
  endTime?: long(name='EndTime'),
  instanceId?: string(name='InstanceId'),
  jobId?: string(name='JobId'),
  snapshotIdsShrink?: string(name='SnapshotIds'),
  sourceType?: string(name='SourceType'),
  startTime?: long(name='StartTime'),
  udmRegionId?: string(name='UdmRegionId'),
}

model DescribeUdmSnapshotsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  snapshots?: [ 
    {
      actualBytes?: string(name='ActualBytes'),
      backupType?: string(name='BackupType'),
      bytesTotal?: long(name='BytesTotal'),
      completeTime?: long(name='CompleteTime'),
      createTime?: long(name='CreateTime'),
      createdTime?: long(name='CreatedTime'),
      detail?: {
        consistentLevel?: string(name='ConsistentLevel'),
        containOsDisk?: boolean(name='ContainOsDisk'),
        diskDevName?: string(name='DiskDevName'),
        diskHbrSnapshotIdWithDeviceMap?: map[string]any(name='DiskHbrSnapshotIdWithDeviceMap'),
        diskIdList?: [ string ](name='DiskIdList'),
        downgradeReason?: string(name='DowngradeReason'),
        instanceIdWithDiskIdListMap?: map[string]any(name='InstanceIdWithDiskIdListMap'),
        instanceName?: string(name='InstanceName'),
        nativeSnapshotIdList?: [ string ](name='NativeSnapshotIdList'),
        osDiskId?: string(name='OsDiskId'),
        osName?: string(name='OsName'),
        osNameEn?: string(name='OsNameEn'),
        osType?: string(name='OsType'),
        platform?: string(name='Platform'),
        snapshotGroupId?: string(name='SnapshotGroupId'),
        systemDisk?: boolean(name='SystemDisk'),
        vmName?: string(name='VmName'),
      }(name='Detail'),
      diskId?: string(name='DiskId'),
      instanceId?: string(name='InstanceId'),
      jobId?: string(name='JobId'),
      nativeSnapshotId?: string(name='NativeSnapshotId'),
      nativeSnapshotInfo?: string(name='NativeSnapshotInfo'),
      parentSnapshotHash?: string(name='ParentSnapshotHash'),
      prefix?: string(name='Prefix'),
      realSnapshotTime?: long(name='RealSnapshotTime'),
      retention?: long(name='Retention'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      sourceType?: string(name='SourceType'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='Snapshots'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model DescribeUdmSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUdmSnapshotsResponseBody(name='body'),
}

async function describeUdmSnapshotsWithOptions(tmpReq: DescribeUdmSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeUdmSnapshotsResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeUdmSnapshotsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.snapshotIds)) {
    request.snapshotIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.snapshotIds, 'SnapshotIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.diskId)) {
    query['DiskId'] = request.diskId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.jobId)) {
    query['JobId'] = request.jobId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.udmRegionId)) {
    query['UdmRegionId'] = request.udmRegionId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.snapshotIdsShrink)) {
    body['SnapshotIds'] = request.snapshotIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUdmSnapshots',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUdmSnapshots(request: DescribeUdmSnapshotsRequest): DescribeUdmSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUdmSnapshotsWithOptions(request, runtime);
}

model DescribeVaultReplicationRegionsRequest {
  token?: string(name='Token'),
  vaultId?: string(name='VaultId'),
}

model DescribeVaultReplicationRegionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  regions?: {
    regionId?: [ string ](name='RegionId')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeVaultReplicationRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVaultReplicationRegionsResponseBody(name='body'),
}

async function describeVaultReplicationRegionsWithOptions(request: DescribeVaultReplicationRegionsRequest, runtime: Util.RuntimeOptions): DescribeVaultReplicationRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVaultReplicationRegions',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVaultReplicationRegions(request: DescribeVaultReplicationRegionsRequest): DescribeVaultReplicationRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVaultReplicationRegionsWithOptions(request, runtime);
}

model DescribeVaultsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceGroupId?: string(name='ResourceGroupId'),
  status?: string(name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  vaultId?: string(name='VaultId'),
  vaultRegionId?: string(name='VaultRegionId'),
  vaultType?: string(name='VaultType'),
}

model DescribeVaultsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  vaults?: {
    vault?: [ 
    {
      backupPlanStatistics?: {
        commonNas?: int32(name='CommonNas'),
        csg?: int32(name='Csg'),
        ecsFile?: int32(name='EcsFile'),
        ecsHana?: int32(name='EcsHana'),
        isilon?: int32(name='Isilon'),
        localFile?: int32(name='LocalFile'),
        localVm?: int32(name='LocalVm'),
        mySql?: int32(name='MySql'),
        nas?: int32(name='Nas'),
        oracle?: int32(name='Oracle'),
        oss?: int32(name='Oss'),
        ots?: int32(name='Ots'),
        sqlServer?: int32(name='SqlServer'),
      }(name='BackupPlanStatistics'),
      bucketName?: string(name='BucketName'),
      bytesDone?: long(name='BytesDone'),
      chargeType?: string(name='ChargeType'),
      compressionAlgorithm?: string(name='CompressionAlgorithm'),
      createdTime?: long(name='CreatedTime'),
      dedup?: boolean(name='Dedup'),
      description?: string(name='Description'),
      encryptType?: string(name='EncryptType'),
      indexAvailable?: boolean(name='IndexAvailable'),
      indexLevel?: string(name='IndexLevel'),
      indexUpdateTime?: long(name='IndexUpdateTime'),
      latestReplicationTime?: long(name='LatestReplicationTime'),
      redundancyType?: string(name='RedundancyType'),
      replication?: boolean(name='Replication'),
      replicationProgress?: {
        historicalReplicationProgress?: int32(name='HistoricalReplicationProgress'),
        newReplicationProgress?: long(name='NewReplicationProgress'),
      }(name='ReplicationProgress'),
      replicationSourceRegionId?: string(name='ReplicationSourceRegionId'),
      replicationSourceVaultId?: string(name='ReplicationSourceVaultId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      retention?: long(name='Retention'),
      searchEnabled?: boolean(name='SearchEnabled'),
      snapshotCount?: long(name='SnapshotCount'),
      sourceTypes?: {
        sourceType?: [ string ](name='SourceType')
      }(name='SourceTypes'),
      status?: string(name='Status'),
      storageSize?: long(name='StorageSize'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      trialInfo?: {
        keepAfterTrialExpiration?: boolean(name='KeepAfterTrialExpiration'),
        trialExpireTime?: long(name='TrialExpireTime'),
        trialStartTime?: long(name='TrialStartTime'),
        trialVaultReleaseTime?: long(name='TrialVaultReleaseTime'),
      }(name='TrialInfo'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
      vaultName?: string(name='VaultName'),
      vaultRegionId?: string(name='VaultRegionId'),
      vaultStatusMessage?: string(name='VaultStatusMessage'),
      vaultStorageClass?: string(name='VaultStorageClass'),
      vaultType?: string(name='VaultType'),
      wormEnabled?: boolean(name='WormEnabled'),
    }
  ](name='Vault')
  }(name='Vaults'),
}

model DescribeVaultsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVaultsResponseBody(name='body'),
}

async function describeVaultsWithOptions(request: DescribeVaultsRequest, runtime: Util.RuntimeOptions): DescribeVaultsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  if (!Util.isUnset(request.vaultRegionId)) {
    query['VaultRegionId'] = request.vaultRegionId;
  }
  if (!Util.isUnset(request.vaultType)) {
    query['VaultType'] = request.vaultType;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVaults',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVaults(request: DescribeVaultsRequest): DescribeVaultsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVaultsWithOptions(request, runtime);
}

model DetachNasFileSystemRequest {
  createTime?: string(name='CreateTime'),
  fileSystemId?: string(name='FileSystemId'),
}

model DetachNasFileSystemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DetachNasFileSystemResponse = {
  headers: map[string]string(name='headers'),
  body: DetachNasFileSystemResponseBody(name='body'),
}

async function detachNasFileSystemWithOptions(request: DetachNasFileSystemRequest, runtime: Util.RuntimeOptions): DetachNasFileSystemResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTime)) {
    query['CreateTime'] = request.createTime;
  }
  if (!Util.isUnset(request.fileSystemId)) {
    query['FileSystemId'] = request.fileSystemId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachNasFileSystem',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachNasFileSystem(request: DetachNasFileSystemRequest): DetachNasFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachNasFileSystemWithOptions(request, runtime);
}

model DisableBackupPlanRequest {
  planId?: string(name='PlanId'),
  sourceType?: string(name='SourceType'),
  vaultId?: string(name='VaultId'),
}

model DisableBackupPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DisableBackupPlanResponseBody(name='body'),
}

async function disableBackupPlanWithOptions(request: DisableBackupPlanRequest, runtime: Util.RuntimeOptions): DisableBackupPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableBackupPlan(request: DisableBackupPlanRequest): DisableBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableBackupPlanWithOptions(request, runtime);
}

model EnableBackupPlanRequest {
  planId?: string(name='PlanId'),
  sourceType?: string(name='SourceType'),
  vaultId?: string(name='VaultId'),
}

model EnableBackupPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: EnableBackupPlanResponseBody(name='body'),
}

async function enableBackupPlanWithOptions(request: EnableBackupPlanRequest, runtime: Util.RuntimeOptions): EnableBackupPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableBackupPlan(request: EnableBackupPlanRequest): EnableBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBackupPlanWithOptions(request, runtime);
}

model ExecuteBackupPlanRequest {
  planId?: string(name='PlanId'),
  ruleId?: string(name='RuleId'),
  sourceType?: string(name='SourceType'),
  vaultId?: string(name='VaultId'),
}

model ExecuteBackupPlanResponseBody = {
  code?: string(name='Code'),
  jobId?: string(name='JobId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ExecuteBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteBackupPlanResponseBody(name='body'),
}

async function executeBackupPlanWithOptions(request: ExecuteBackupPlanRequest, runtime: Util.RuntimeOptions): ExecuteBackupPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ExecuteBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function executeBackupPlan(request: ExecuteBackupPlanRequest): ExecuteBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeBackupPlanWithOptions(request, runtime);
}

model GenerateRamPolicyRequest {
  actionType?: string(name='ActionType'),
  requireBasePolicy?: boolean(name='RequireBasePolicy'),
  resourceGroupId?: string(name='ResourceGroupId'),
  vaultId?: string(name='VaultId'),
}

model GenerateRamPolicyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  policyDocument?: string(name='PolicyDocument'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateRamPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateRamPolicyResponseBody(name='body'),
}

async function generateRamPolicyWithOptions(request: GenerateRamPolicyRequest, runtime: Util.RuntimeOptions): GenerateRamPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.requireBasePolicy)) {
    query['RequireBasePolicy'] = request.requireBasePolicy;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateRamPolicy',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateRamPolicy(request: GenerateRamPolicyRequest): GenerateRamPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateRamPolicyWithOptions(request, runtime);
}

model InstallBackupClientsRequest {
  instanceIds?: map[string]any(name='InstanceIds'),
}

model InstallBackupClientsShrinkRequest {
  instanceIdsShrink?: string(name='InstanceIds'),
}

model InstallBackupClientsResponseBody = {
  code?: string(name='Code'),
  instanceStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      instanceId?: string(name='InstanceId'),
      validInstance?: boolean(name='ValidInstance'),
    }
  ](name='InstanceStatuses'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model InstallBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: InstallBackupClientsResponseBody(name='body'),
}

async function installBackupClientsWithOptions(tmpReq: InstallBackupClientsRequest, runtime: Util.RuntimeOptions): InstallBackupClientsResponse {
  Util.validateModel(tmpReq);
  var request = new InstallBackupClientsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InstallBackupClients',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function installBackupClients(request: InstallBackupClientsRequest): InstallBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return installBackupClientsWithOptions(request, runtime);
}

model SearchHistoricalSnapshotsRequest {
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  query?: map[string]any(name='Query'),
  sourceType?: string(name='SourceType'),
}

model SearchHistoricalSnapshotsShrinkRequest {
  limit?: int32(name='Limit'),
  nextToken?: string(name='NextToken'),
  queryShrink?: string(name='Query'),
  sourceType?: string(name='SourceType'),
}

model SearchHistoricalSnapshotsResponseBody = {
  code?: string(name='Code'),
  limit?: int32(name='Limit'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  snapshots?: {
    snapshot?: [ 
    {
      actualBytes?: long(name='ActualBytes'),
      actualItems?: long(name='ActualItems'),
      backupType?: string(name='BackupType'),
      bucket?: string(name='Bucket'),
      bytesDone?: long(name='BytesDone'),
      bytesTotal?: long(name='BytesTotal'),
      clientId?: string(name='ClientId'),
      completeTime?: long(name='CompleteTime'),
      createTime?: long(name='CreateTime'),
      createdTime?: long(name='CreatedTime'),
      errorFile?: string(name='ErrorFile'),
      expireTime?: long(name='ExpireTime'),
      fileSystemId?: string(name='FileSystemId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      itemsDone?: long(name='ItemsDone'),
      itemsTotal?: long(name='ItemsTotal'),
      jobId?: string(name='JobId'),
      parentSnapshotHash?: string(name='ParentSnapshotHash'),
      path?: string(name='Path'),
      paths?: {
        path?: [ string ](name='Path')
      }(name='Paths'),
      prefix?: string(name='Prefix'),
      rangeEnd?: long(name='RangeEnd'),
      rangeStart?: long(name='RangeStart'),
      retention?: long(name='Retention'),
      snapshotHash?: string(name='SnapshotHash'),
      snapshotId?: string(name='SnapshotId'),
      sourceType?: string(name='SourceType'),
      startTime?: long(name='StartTime'),
      status?: string(name='Status'),
      tableName?: string(name='TableName'),
      updatedTime?: long(name='UpdatedTime'),
      vaultId?: string(name='VaultId'),
    }
  ](name='Snapshot')
  }(name='Snapshots'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model SearchHistoricalSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: SearchHistoricalSnapshotsResponseBody(name='body'),
}

async function searchHistoricalSnapshotsWithOptions(tmpReq: SearchHistoricalSnapshotsRequest, runtime: Util.RuntimeOptions): SearchHistoricalSnapshotsResponse {
  Util.validateModel(tmpReq);
  var request = new SearchHistoricalSnapshotsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.query)) {
    request.queryShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.query, 'Query', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.queryShrink)) {
    query['Query'] = request.queryShrink;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchHistoricalSnapshots',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchHistoricalSnapshots(request: SearchHistoricalSnapshotsRequest): SearchHistoricalSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchHistoricalSnapshotsWithOptions(request, runtime);
}

model UninstallBackupClientsRequest {
  clientIds?: map[string]any(name='ClientIds'),
  instanceIds?: map[string]any(name='InstanceIds'),
}

model UninstallBackupClientsShrinkRequest {
  clientIdsShrink?: string(name='ClientIds'),
  instanceIdsShrink?: string(name='InstanceIds'),
}

model UninstallBackupClientsResponseBody = {
  code?: string(name='Code'),
  instanceStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      instanceId?: string(name='InstanceId'),
      validInstance?: boolean(name='ValidInstance'),
    }
  ](name='InstanceStatuses'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UninstallBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallBackupClientsResponseBody(name='body'),
}

async function uninstallBackupClientsWithOptions(tmpReq: UninstallBackupClientsRequest, runtime: Util.RuntimeOptions): UninstallBackupClientsResponse {
  Util.validateModel(tmpReq);
  var request = new UninstallBackupClientsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clientIds)) {
    request.clientIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clientIds, 'ClientIds', 'json');
  }
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientIdsShrink)) {
    query['ClientIds'] = request.clientIdsShrink;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UninstallBackupClients',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function uninstallBackupClients(request: UninstallBackupClientsRequest): UninstallBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return uninstallBackupClientsWithOptions(request, runtime);
}

model UpdateBackupPlanRequest {
  exclude?: string(name='Exclude'),
  include?: string(name='Include'),
  options?: string(name='Options'),
  otsDetail?: OtsDetail(name='OtsDetail'),
  path?: [ string ](name='Path'),
  planId?: string(name='PlanId'),
  planName?: string(name='PlanName'),
  prefix?: string(name='Prefix'),
  retention?: long(name='Retention'),
  schedule?: string(name='Schedule'),
  sourceType?: string(name='SourceType'),
  speedLimit?: string(name='SpeedLimit'),
  updatePaths?: boolean(name='UpdatePaths'),
  vaultId?: string(name='VaultId'),
}

model UpdateBackupPlanShrinkRequest {
  exclude?: string(name='Exclude'),
  include?: string(name='Include'),
  options?: string(name='Options'),
  otsDetailShrink?: string(name='OtsDetail'),
  path?: [ string ](name='Path'),
  planId?: string(name='PlanId'),
  planName?: string(name='PlanName'),
  prefix?: string(name='Prefix'),
  retention?: long(name='Retention'),
  schedule?: string(name='Schedule'),
  sourceType?: string(name='SourceType'),
  speedLimit?: string(name='SpeedLimit'),
  updatePaths?: boolean(name='UpdatePaths'),
  vaultId?: string(name='VaultId'),
}

model UpdateBackupPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBackupPlanResponseBody(name='body'),
}

async function updateBackupPlanWithOptions(tmpReq: UpdateBackupPlanRequest, runtime: Util.RuntimeOptions): UpdateBackupPlanResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateBackupPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.otsDetail)) {
    request.otsDetailShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.otsDetail, 'OtsDetail', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.planId)) {
    query['PlanId'] = request.planId;
  }
  if (!Util.isUnset(request.planName)) {
    query['PlanName'] = request.planName;
  }
  if (!Util.isUnset(request.prefix)) {
    query['Prefix'] = request.prefix;
  }
  if (!Util.isUnset(request.retention)) {
    query['Retention'] = request.retention;
  }
  if (!Util.isUnset(request.schedule)) {
    query['Schedule'] = request.schedule;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.speedLimit)) {
    query['SpeedLimit'] = request.speedLimit;
  }
  if (!Util.isUnset(request.updatePaths)) {
    query['UpdatePaths'] = request.updatePaths;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.exclude)) {
    body['Exclude'] = request.exclude;
  }
  if (!Util.isUnset(request.include)) {
    body['Include'] = request.include;
  }
  if (!Util.isUnset(request.options)) {
    body['Options'] = request.options;
  }
  if (!Util.isUnset(request.otsDetailShrink)) {
    body['OtsDetail'] = request.otsDetailShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBackupPlan',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBackupPlan(request: UpdateBackupPlanRequest): UpdateBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateBackupPlanWithOptions(request, runtime);
}

model UpdateClientSettingsRequest {
  clientId?: string(name='ClientId'),
  dataNetworkType?: string(name='DataNetworkType'),
  dataProxySetting?: string(name='DataProxySetting'),
  maxCpuCore?: int32(name='MaxCpuCore'),
  maxWorker?: int32(name='MaxWorker'),
  proxyHost?: string(name='ProxyHost'),
  proxyPassword?: string(name='ProxyPassword'),
  proxyPort?: int32(name='ProxyPort'),
  proxyUser?: string(name='ProxyUser'),
  resourceGroupId?: string(name='ResourceGroupId'),
  useHttps?: boolean(name='UseHttps'),
  vaultId?: string(name='VaultId'),
}

model UpdateClientSettingsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateClientSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClientSettingsResponseBody(name='body'),
}

async function updateClientSettingsWithOptions(request: UpdateClientSettingsRequest, runtime: Util.RuntimeOptions): UpdateClientSettingsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.dataNetworkType)) {
    query['DataNetworkType'] = request.dataNetworkType;
  }
  if (!Util.isUnset(request.dataProxySetting)) {
    query['DataProxySetting'] = request.dataProxySetting;
  }
  if (!Util.isUnset(request.maxCpuCore)) {
    query['MaxCpuCore'] = request.maxCpuCore;
  }
  if (!Util.isUnset(request.maxWorker)) {
    query['MaxWorker'] = request.maxWorker;
  }
  if (!Util.isUnset(request.proxyHost)) {
    query['ProxyHost'] = request.proxyHost;
  }
  if (!Util.isUnset(request.proxyPassword)) {
    query['ProxyPassword'] = request.proxyPassword;
  }
  if (!Util.isUnset(request.proxyPort)) {
    query['ProxyPort'] = request.proxyPort;
  }
  if (!Util.isUnset(request.proxyUser)) {
    query['ProxyUser'] = request.proxyUser;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.useHttps)) {
    query['UseHttps'] = request.useHttps;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateClientSettings',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateClientSettings(request: UpdateClientSettingsRequest): UpdateClientSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateClientSettingsWithOptions(request, runtime);
}

model UpdateVaultRequest {
  description?: string(name='Description'),
  resourceGroupId?: string(name='ResourceGroupId'),
  vaultId?: string(name='VaultId'),
  vaultName?: string(name='VaultName'),
}

model UpdateVaultResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateVaultResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVaultResponseBody(name='body'),
}

async function updateVaultWithOptions(request: UpdateVaultRequest, runtime: Util.RuntimeOptions): UpdateVaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.vaultId)) {
    query['VaultId'] = request.vaultId;
  }
  if (!Util.isUnset(request.vaultName)) {
    query['VaultName'] = request.vaultName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateVault',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateVault(request: UpdateVaultRequest): UpdateVaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVaultWithOptions(request, runtime);
}

model UpgradeBackupClientsRequest {
  clientIds?: map[string]any(name='ClientIds'),
  instanceIds?: map[string]any(name='InstanceIds'),
}

model UpgradeBackupClientsShrinkRequest {
  clientIdsShrink?: string(name='ClientIds'),
  instanceIdsShrink?: string(name='InstanceIds'),
}

model UpgradeBackupClientsResponseBody = {
  code?: string(name='Code'),
  instanceStatuses?: [ 
    {
      errorCode?: string(name='ErrorCode'),
      instanceId?: string(name='InstanceId'),
      validInstance?: boolean(name='ValidInstance'),
    }
  ](name='InstanceStatuses'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UpgradeBackupClientsResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeBackupClientsResponseBody(name='body'),
}

async function upgradeBackupClientsWithOptions(tmpReq: UpgradeBackupClientsRequest, runtime: Util.RuntimeOptions): UpgradeBackupClientsResponse {
  Util.validateModel(tmpReq);
  var request = new UpgradeBackupClientsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.clientIds)) {
    request.clientIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.clientIds, 'ClientIds', 'json');
  }
  if (!Util.isUnset(tmpReq.instanceIds)) {
    request.instanceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.instanceIds, 'InstanceIds', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.clientIdsShrink)) {
    query['ClientIds'] = request.clientIdsShrink;
  }
  if (!Util.isUnset(request.instanceIdsShrink)) {
    query['InstanceIds'] = request.instanceIdsShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeBackupClients',
    version = '2017-09-08',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeBackupClients(request: UpgradeBackupClientsRequest): UpgradeBackupClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeBackupClientsWithOptions(request, runtime);
}

