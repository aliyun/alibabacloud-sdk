/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AliGenie';
  @version = 'ssp_1.0';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model LoginStateInfo {
  sceneCode?: string(name='SceneCode'),
  thirdUserIdentifier?: string(name='ThirdUserIdentifier'),
  thirdUserType?: string(name='ThirdUserType'),
  userId?: string(name='UserId'),
}

model AddAndRemoveFavoriteContentRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openAddAndRemoveFavoriteContentRequest: {
    favoriteCmd: string(name='FavoriteCmd', description='This parameter is required.', example='ADD'),
    openSourceRawIdPair: {
      extendInfo?: map[string]any(name='ExtendInfo'),
      rawId: string(name='RawId', description='This parameter is required.', example='2105818057'),
      source: string(name='Source', description='This parameter is required.', example='xiami'),
    }(name='OpenSourceRawIdPair', description='This parameter is required.'),
    packageType: string(name='PackageType', description='This parameter is required.', example='CONTENT'),
  }(name='OpenAddAndRemoveFavoriteContentRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model AddAndRemoveFavoriteContentResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='121212121'),
  result?: boolean(name='Result', example='true'),
  success?: string(name='Success', example='true'),
}

model AddAndRemoveFavoriteContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAndRemoveFavoriteContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddAndRemoveFavoriteContent  AddAndRemoveFavoriteContentRequest
  * @return AddAndRemoveFavoriteContentResponse
 */
async function addAndRemoveFavoriteContent(request: AddAndRemoveFavoriteContentRequest): AddAndRemoveFavoriteContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddAndRemoveFavoriteContent', 'POST', '/v1.0/ssp/AddAndRemoveFavoriteContent', 'json', true, 'form', request);
}

model AddSubRequest {
  addSubscriptionInfoRequest?: {
    albumId?: string(name='AlbumId', example='51999575'),
    dailyStudyCnt?: int32(name='DailyStudyCnt', example='2'),
    playMode?: string(name='PlayMode', example='sequence'),
    scheduleInfo?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='1', minimum=0, maximum=23),
      minute?: int32(name='Minute', example='23', minimum=0, maximum=59),
    }(name='ScheduleInfo'),
  }(name='AddSubscriptionInfoRequest', shrink='json', position='Query'),
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id'),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='123'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model AddSubResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B99D27ED-4E12-1414-9FDE-599C57C4B204'),
  result?: {
    albumId?: string(name='AlbumId', example='51999575'),
    dailyStudyCnt?: int32(name='DailyStudyCnt', example='2'),
    deviceId?: string(name='DeviceId', example='5874DBCCA3038FAA1A70A8060F07F26D'),
    id?: long(name='Id', example='81'),
    playMode?: string(name='PlayMode', example='sequence'),
    scheduleInfo?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='12'),
      minute?: int32(name='Minute', example='23'),
    }(name='ScheduleInfo'),
    userId?: string(name='UserId', example='1152893538998276761'),
  }(name='Result'),
}

model AddSubResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSubResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSub  AddSubRequest
  * @return AddSubResponse
 */
async function addSub(request: AddSubRequest): AddSubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddSub', 'POST', '/v1.0/ssp/addSub', 'json', false, 'json', request);
}

model AuthLoginWithAligenieUserInfoRequest {
  encryptedAligenieUserIdentifier: string(name='EncryptedAligenieUserIdentifier', description='This parameter is required.', example='UYugfm/3Nb9q24AyES2rYmC5tIglSoDX3Mbna/vrldcjGPtC8VzFwo+CU5c4CHLjrK7ekskG2WVaevM5Zi9f0w==', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='dbe2eb4458302b9246c6da17fbc95f4b', position='Body'),
}

model AuthLoginWithAligenieUserInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    expiredTimeLong?: long(name='ExpiredTimeLong', example='1659506854230'),
    loginStateAccessToken?: string(name='LoginStateAccessToken', example='d15aa92de679d0d225aa845268be19ee'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model AuthLoginWithAligenieUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthLoginWithAligenieUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthLoginWithAligenieUserInfo  AuthLoginWithAligenieUserInfoRequest
  * @return AuthLoginWithAligenieUserInfoResponse
 */
async function authLoginWithAligenieUserInfo(request: AuthLoginWithAligenieUserInfoRequest): AuthLoginWithAligenieUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthLoginWithAligenieUserInfo', 'POST', '/v1.0/ssp/authLoginWithAligenieUserInfo', 'json', true, 'form', request);
}

model AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberRequest {
  sessionId: string(name='SessionId', description='This parameter is required.', example='dbe2eb4458302b9246c6da17fbc95f4b', position='Body'),
}

model AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    expiredTimeLong?: long(name='ExpiredTimeLong', example='1659506854230'),
    loginStateAccessToken?: string(name='LoginStateAccessToken', example='d15aa92de679d0d225aa845268be19ee'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthLoginWithAligenieUserInfoGeneratedByPhoneNumber  AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberRequest
  * @return AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberResponse
 */
async function authLoginWithAligenieUserInfoGeneratedByPhoneNumber(request: AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberRequest): AuthLoginWithAligenieUserInfoGeneratedByPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthLoginWithAligenieUserInfoGeneratedByPhoneNumber', 'POST', '/v1.0/ssp/authLoginWithAligenieUserInfoGeneratedByPhoneNumber', 'json', true, 'form', request);
}

model AuthLoginWithTaobaoUserInfoRequest {
  encryptedTaobaoUserIdentifier: string(name='EncryptedTaobaoUserIdentifier', description='This parameter is required.', example='KsVgypxAipf+xNECMZV2ONMcheqiIoEGFvgx+T8s1oV6/euTK9+ImYvLVPsSqFDh', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='dbe2eb4458302b9246c6da17fbc95f4b', position='Body'),
}

model AuthLoginWithTaobaoUserInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    expiredTimeLong?: long(name='ExpiredTimeLong', example='1659506854230'),
    loginStateAccessToken?: string(name='LoginStateAccessToken', example='d15aa92de679d0d225aa845268be19ee'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model AuthLoginWithTaobaoUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthLoginWithTaobaoUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthLoginWithTaobaoUserInfo  AuthLoginWithTaobaoUserInfoRequest
  * @return AuthLoginWithTaobaoUserInfoResponse
 */
async function authLoginWithTaobaoUserInfo(request: AuthLoginWithTaobaoUserInfoRequest): AuthLoginWithTaobaoUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthLoginWithTaobaoUserInfo', 'POST', '/v1.0/ssp/authLoginWithTaobaoUserInfo', 'json', true, 'form', request);
}

model AuthLoginWithThirdUserInfoRequest {
  extInfo?: map[string]any(name='ExtInfo', example='{}', shrink='json', position='Body'),
  sceneCode: string(name='SceneCode', description='This parameter is required.', example='wechat_ecology_openness', position='Body'),
  thirdUserIdentifier: string(name='ThirdUserIdentifier', description='This parameter is required.', example='o5qxy6EItZBasv2VZAf-MGwllHL4', position='Body'),
  thirdUserType: string(name='ThirdUserType', description='This parameter is required.', example='weChatUser', position='Body'),
}

model AuthLoginWithThirdUserInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  dataObj?: {
    sessionId?: string(name='SessionId', example='dbe2eb4458302b9246c6da17fbc95f4b'),
  }(name='DataObj'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    expiredTimeLong?: long(name='ExpiredTimeLong', example='1659428051452'),
    loginStateAccessToken?: string(name='LoginStateAccessToken', example='bd9ccdb121ee950ddead51e943e081fe'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model AuthLoginWithThirdUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthLoginWithThirdUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthLoginWithThirdUserInfo  AuthLoginWithThirdUserInfoRequest
  * @return AuthLoginWithThirdUserInfoResponse
 */
async function authLoginWithThirdUserInfo(request: AuthLoginWithThirdUserInfoRequest): AuthLoginWithThirdUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuthLoginWithThirdUserInfo', 'POST', '/v1.0/ssp/authLoginWithThirdUserInfo', 'json', true, 'form', request);
}

model CheckAndDoVoipCallForHotelRequest {
  bizData?: string(name='BizData', position='Body'),
  calleeNick?: string(name='CalleeNick', position='Body'),
  calleePhoneNum?: string(name='CalleePhoneNum', position='Body'),
  deviceInfo: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model CheckAndDoVoipCallForHotelResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    deviceTargets?: {
      code?: int32(name='Code'),
      data?: [ 
        {
          deviceIcon?: string(name='DeviceIcon'),
          deviceName?: string(name='DeviceName'),
          deviceType?: string(name='DeviceType'),
          online?: boolean(name='Online'),
          uuid?: string(name='Uuid'),
        }
      ](name='Data'),
      msg?: string(name='Msg'),
    }(name='DeviceTargets'),
    isStartCall?: boolean(name='IsStartCall'),
    passed?: boolean(name='Passed'),
    startCallResult?: {
      message?: string(name='Message'),
      retCode?: int32(name='RetCode'),
      retValue?: string(name='RetValue'),
      success?: boolean(name='Success'),
      traceId?: string(name='TraceId'),
    }(name='StartCallResult'),
  }(name='Result'),
}

model CheckAndDoVoipCallForHotelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAndDoVoipCallForHotelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckAndDoVoipCallForHotel  CheckAndDoVoipCallForHotelRequest
  * @return CheckAndDoVoipCallForHotelResponse
 */
async function checkAndDoVoipCallForHotel(request: CheckAndDoVoipCallForHotelRequest): CheckAndDoVoipCallForHotelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckAndDoVoipCallForHotel', 'POST', '/v1.0/ssp/checkAndDoVoipCallForHotel', 'json', true, 'form', request);
}

model CheckAuthCodeBindForExtRequest {
  authCode: string(name='AuthCode', description='This parameter is required.', example='Aexfgc', position='Query'),
  encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123', position='Query'),
  encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1***2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model CheckAuthCodeBindForExtResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    deviceOpenInfo?: {
      id?: string(name='Id', example='A963*0158'),
      idType?: string(name='IdType', description='DEVICE_ID', example='DEVICE_ID'),
    }(name='DeviceOpenInfo'),
    userOpenInfo?: {
      id?: string(name='Id', example='0963*0158'),
      idType?: string(name='IdType', description='USER_ID', example='USER_ID'),
    }(name='UserOpenInfo'),
  }(name='Result'),
}

model CheckAuthCodeBindForExtResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAuthCodeBindForExtResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckAuthCodeBindForExt  CheckAuthCodeBindForExtRequest
  * @return CheckAuthCodeBindForExtResponse
 */
async function checkAuthCodeBindForExt(request: CheckAuthCodeBindForExtRequest): CheckAuthCodeBindForExtResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckAuthCodeBindForExt', 'GET', '/v1.0/ssp/checkAuthCodeBindForExt', 'json', false, 'json', request);
}

model CloudPlayerRequest {
  curPlayIndex: int32(name='CurPlayIndex', description='This parameter is required.', example='1', minimum=1, maximum=200, position='Query'),
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='1234'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  playMode: string(name='PlayMode', description='This parameter is required.', example='Normal', position='Query'),
  songId?: string(name='SongId', example='123', position='Query'),
  songIdList: [ string ](name='SongIdList', description='This parameter is required.', shrink='json', position='Query'),
  source: string(name='Source', description='This parameter is required.', example='KG', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='1234'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model CloudPlayerResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='B7D82DB0-DD59-5756-AC62-871C9D7DBC36'),
  result?: boolean(name='Result', example='true'),
}

model CloudPlayerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloudPlayerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CloudPlayer  CloudPlayerRequest
  * @return CloudPlayerResponse
 */
async function cloudPlayer(request: CloudPlayerRequest): CloudPlayerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloudPlayer', 'POST', '/v1.0/ssp/cloud/player', 'json', false, 'json', request);
}

model CreateAlarmRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    musicInfo: {
      musicId: long(name='MusicId', description='This parameter is required.', example='1'),
      musicName: string(name='MusicName', description='This parameter is required.'),
      musicType: long(name='MusicType', description='This parameter is required.', example='1'),
      musicTypeName: string(name='MusicTypeName', description='This parameter is required.'),
      musicUrl?: string(name='MusicUrl', example='http://xx'),
    }(name='MusicInfo', description='This parameter is required.'),
    scheduleInfo: {
      once?: {
        day?: int32(name='Day', example='1'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
        month?: int32(name='Month', example='8'),
        year?: int32(name='Year', example='2022'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='StatutoryWorkingDay'),
      type: string(name='Type', description='This parameter is required.', example='ONCE'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='Weekly'),
    }(name='ScheduleInfo', description='This parameter is required.'),
    volume?: int32(name='Volume', example='40'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model CreateAlarmResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: long(name='Result', example='1234567'),
}

model CreateAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAlarm  CreateAlarmRequest
  * @return CreateAlarmResponse
 */
async function createAlarm(request: CreateAlarmRequest): CreateAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAlarm', 'POST', '/v1.0/ssp/createAlarm', 'json', true, 'form', request);
}

model CreatePlayingListRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openCreatePlayingListRequest: {
    contentList: [ 
      {
        rawId: string(name='RawId', description='This parameter is required.', example='12345'),
        source: string(name='Source', description='This parameter is required.', example='xiami'),
      }
    ](name='ContentList', description='This parameter is required.'),
    contentType: string(name='ContentType', description='This parameter is required.', example='content'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    index?: int32(name='Index', example='0'),
    needAlbumContinued?: boolean(name='NeedAlbumContinued', example='true'),
    playFrom?: string(name='PlayFrom', example='default'),
    playMode?: string(name='PlayMode', example='Repeat'),
  }(name='OpenCreatePlayingListRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model CreatePlayingListResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId', example='260744'),
    audioLength?: int32(name='AudioLength', example='190'),
    copyright?: int32(name='Copyright', example='0'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      large?: string(name='Large', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      mediam?: string(name='Mediam', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      medium?: string(name='Medium', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      small?: string(name='Small', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
    itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
    liked?: boolean(name='Liked', example='false'),
    lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
    playMode?: string(name='PlayMode', example='Repeat'),
    pos?: int32(name='Pos', example='0'),
    progress?: int32(name='Progress', example='0'),
    rawId?: string(name='RawId', example='550144364'),
    singer?: string(name='Singer'),
    source?: string(name='Source', example='ximalayav2'),
    title?: string(name='Title'),
    type?: string(name='Type', example='story'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model CreatePlayingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePlayingListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePlayingList  CreatePlayingListRequest
  * @return CreatePlayingListResponse
 */
async function createPlayingList(request: CreatePlayingListRequest): CreatePlayingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePlayingList', 'POST', '/v1.0/ssp/CreatePlayingList', 'json', true, 'form', request);
}

model CreatePlayingListOAuth2Request {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openCreatePlayingListRequest: {
    contentList: [ 
      {
        rawId: string(name='RawId', description='This parameter is required.', example='12345'),
        source: string(name='Source', description='This parameter is required.', example='xiami'),
      }
    ](name='ContentList', description='This parameter is required.'),
    contentType: string(name='ContentType', description='This parameter is required.', example='content'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    index?: int32(name='Index', example='0'),
    needAlbumContinued?: boolean(name='NeedAlbumContinued', example='true'),
    playFrom?: string(name='PlayFrom', example='default'),
    playMode?: string(name='PlayMode', example='Repeat'),
  }(name='OpenCreatePlayingListRequest', description='This parameter is required.', shrink='json', position='Body'),
}

model CreatePlayingListOAuth2ResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId', example='260744'),
    audioLength?: int32(name='AudioLength', example='190'),
    copyright?: int32(name='Copyright', example='0'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      mediam?: string(name='Mediam', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
    itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
    liked?: boolean(name='Liked', example='false'),
    lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
    playMode?: string(name='PlayMode', example='Repeat'),
    pos?: int32(name='Pos', example='1'),
    progress?: int32(name='Progress', example='96.0'),
    rawId?: string(name='RawId', example='123123'),
    singer?: string(name='Singer'),
    source?: string(name='Source', example='qignting'),
    title?: string(name='Title'),
    type?: string(name='Type', example='program'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model CreatePlayingListOAuth2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePlayingListOAuth2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePlayingListOAuth2  CreatePlayingListOAuth2Request
  * @return CreatePlayingListOAuth2Response
 */
async function createPlayingListOAuth2(request: CreatePlayingListOAuth2Request): CreatePlayingListOAuth2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePlayingListOAuth2', 'POST', '/v1.0/ssp/CreatePlayingListOAuth2', 'json', true, 'form', request);
}

model CreateScheduleTaskRequest {
  deviceInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    actionDTOs: [ 
      {
        customAction?: map[string]any(name='customAction', example='{"k1":"v1","k2":{"key":1}}'),
      }
    ](name='ActionDTOs', description='This parameter is required.'),
    idempotentId?: string(name='IdempotentId', example='1'),
    scheduleDTO: {
      once?: {
        day?: int32(name='Day', example='26'),
        hour?: int32(name='Hour', example='12'),
        minute?: int32(name='Minute', example='30'),
        month?: int32(name='Month', example='7'),
        year?: int32(name='Year', example='2022'),
      }(name='Once'),
      scheduleEndTime: long(name='ScheduleEndTime', description='This parameter is required.', example='1661589255000'),
      scheduleStartTime: long(name='ScheduleStartTime', description='This parameter is required.', example='1656318855000'),
      scheduleType: string(name='ScheduleType', description='This parameter is required.', example='ONCE'),
      statutoryWorkingDay?: {
        hours?: [ int32 ](name='Hours'),
        minutes?: [ int32 ](name='Minutes'),
      }(name='StatutoryWorkingDay'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hours?: [ int32 ](name='Hours'),
        minutes?: [ int32 ](name='Minutes'),
      }(name='Weekly'),
    }(name='ScheduleDTO', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model CreateScheduleTaskResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: long(name='Result', example='1234567'),
}

model CreateScheduleTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateScheduleTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateScheduleTask  CreateScheduleTaskRequest
  * @return CreateScheduleTaskResponse
 */
async function createScheduleTask(request: CreateScheduleTaskRequest): CreateScheduleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScheduleTask', 'POST', '/v1.0/ssp/CreateScheduleTask', 'json', true, 'form', request);
}

model DeleteAlarmsRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    alarmIds: [ long ](name='AlarmIds', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model DeleteAlarmsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: boolean(name='Result', example='true'),
}

model DeleteAlarmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAlarmsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAlarms  DeleteAlarmsRequest
  * @return DeleteAlarmsResponse
 */
async function deleteAlarms(request: DeleteAlarmsRequest): DeleteAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAlarms', 'POST', '/v1.0/ssp/deleteAlarms', 'json', true, 'form', request);
}

model DeleteScheduleTaskRequest {
  deviceInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    id: long(name='Id', description='This parameter is required.', example='1234567'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model DeleteScheduleTaskResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: boolean(name='Result', example='true'),
}

model DeleteScheduleTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteScheduleTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteScheduleTask  DeleteScheduleTaskRequest
  * @return DeleteScheduleTaskResponse
 */
async function deleteScheduleTask(request: DeleteScheduleTaskRequest): DeleteScheduleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScheduleTask', 'POST', '/v1.0/ssp/DeleteScheduleTask', 'json', true, 'form', request);
}

model DeleteSubRequest {
  subId: long(name='SubId', description='This parameter is required.', example='81', position='Query'),
}

model DeleteSubResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0AA6C15C-FD61-1E32-9881-480CC6F35A70'),
  result?: boolean(name='Result', example='true'),
}

model DeleteSubResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSub  DeleteSubRequest
  * @return DeleteSubResponse
 */
async function deleteSub(request: DeleteSubRequest): DeleteSubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSub', 'POST', '/v1.0/ssp/deleteSub', 'json', false, 'json', request);
}

model DeviceControlRequest {
  controlRequest?: {
    muted?: boolean(name='Muted', example='false'),
    volume?: int32(name='Volume', example='10'),
  }(name='ControlRequest', shrink='json', position='Body'),
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1*****2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result'),
}

model DeviceControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeviceControl  DeviceControlRequest
  * @return DeviceControlResponse
 */
async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeviceControl', 'POST', '/v1.0/ssp/control', 'json', true, 'form', request);
}

model EcologyOpennessAuthenticateRequest {
  encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12*****', position='Body'),
  encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID', position='Body'),
  loginStateAccessToken: string(name='LoginStateAccessToken', description='This parameter is required.', example='d15aa*****ee', position='Body'),
}

model EcologyOpennessAuthenticateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73****9-175A-1324-8202-9FAAB*****A'),
  result?: {
    encodeKey?: string(name='EncodeKey', example='12****7'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    sceneCode?: string(name='SceneCode', example='******'),
    thirdUserIdentifier?: string(name='ThirdUserIdentifier', example='******'),
    thirdUserType?: string(name='ThirdUserType', example='******'),
    userOpenId?: string(name='UserOpenId', example='o****RnNAW/smBNX9By7Zlc3J7iQUXPiUj/6OizU+ifLSzn1vpQL9ZgSp22u7hsxj0UZ2i6urbv9HQ=='),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model EcologyOpennessAuthenticateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EcologyOpennessAuthenticateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EcologyOpennessAuthenticate  EcologyOpennessAuthenticateRequest
  * @return EcologyOpennessAuthenticateResponse
 */
async function ecologyOpennessAuthenticate(request: EcologyOpennessAuthenticateRequest): EcologyOpennessAuthenticateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EcologyOpennessAuthenticate', 'POST', '/v1.0/ssp/ecologyOpennessAuthenticate', 'json', true, 'form', request);
}

model EcologyOpennessSendVerificationCodeRequest {
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='18612345678', position='Body'),
  region: string(name='Region', description='This parameter is required.', example='+86', position='Body'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='dbe2eb4458302b9246c6da17fbc95f4b', position='Body'),
}

model EcologyOpennessSendVerificationCodeResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    expireIn?: int32(name='ExpireIn', example='900'),
    repeatInterval?: int32(name='RepeatInterval', example='60'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model EcologyOpennessSendVerificationCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EcologyOpennessSendVerificationCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EcologyOpennessSendVerificationCode  EcologyOpennessSendVerificationCodeRequest
  * @return EcologyOpennessSendVerificationCodeResponse
 */
async function ecologyOpennessSendVerificationCode(request: EcologyOpennessSendVerificationCodeRequest): EcologyOpennessSendVerificationCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EcologyOpennessSendVerificationCode', 'POST', '/v1.0/ssp/ecologyOpennessSendVerificationCode', 'json', true, 'form', request);
}

model FindUserlistToAuthLoginWithPhoneNumberRequest {
  code: string(name='Code', description='This parameter is required.', example='123456', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='18612345678', position='Query'),
  region: string(name='Region', description='This parameter is required.', example='+86', position='Query'),
  sessionId: string(name='SessionId', description='This parameter is required.', example='dbe2eb4458302b9246c6da17fbc95f4b', position='Query'),
}

model FindUserlistToAuthLoginWithPhoneNumberResponseBody = {
  code?: int32(name='Code', example='200'),
  dataObj?: {
    sessionId?: string(name='SessionId', example='dbe2eb4458302b9246c6da17fbc95f4b'),
  }(name='DataObj'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    userListToAuthLogin?: [ 
      {
        avatar?: string(name='Avatar', example='https://xxx'),
        encryptedUserIdentifier?: string(name='EncryptedUserIdentifier', example='KsVgypxAipf+xNECMZV2ONMcheqiIoEGFvgx+T8s1oV6/euTK9+ImYvLVPsSqFDh'),
        findingType?: string(name='FindingType', example='PHONE_NUMBER_BINDING_WITH_ALIGENIE：phoneNumber'),
        nickname?: string(name='Nickname', example='XXX'),
        userType?: string(name='UserType', example='ALIGENIE'),
      }
    ](name='UserListToAuthLogin'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model FindUserlistToAuthLoginWithPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindUserlistToAuthLoginWithPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindUserlistToAuthLoginWithPhoneNumber  FindUserlistToAuthLoginWithPhoneNumberRequest
  * @return FindUserlistToAuthLoginWithPhoneNumberResponse
 */
async function findUserlistToAuthLoginWithPhoneNumber(request: FindUserlistToAuthLoginWithPhoneNumberRequest): FindUserlistToAuthLoginWithPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FindUserlistToAuthLoginWithPhoneNumber', 'GET', '/v1.0/ssp/findUserlistToAuthLoginWithPhoneNumber', 'json', false, 'json', request);
}

model GetAlarmRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    alarmId: long(name='AlarmId', description='This parameter is required.', example='1234567'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model GetAlarmResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: {
    alarmId?: long(name='AlarmId', example='1234567'),
    musicInfo?: {
      musicId?: long(name='MusicId', example='1'),
      musicName?: string(name='MusicName'),
      musicType?: long(name='MusicType', example='1'),
      musicTypeName?: string(name='MusicTypeName'),
      musicUrl?: string(name='MusicUrl', example='http://xx'),
    }(name='MusicInfo'),
    scheduleInfo?: {
      once?: {
        day?: int32(name='Day', example='29'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
        month?: int32(name='Month', example='7'),
        year?: int32(name='Year', example='2022'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='StatutoryWorkingDay'),
      type?: string(name='Type', example='ONCE'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='Weekly'),
    }(name='ScheduleInfo'),
    scheduleTypeDesc?: string(name='ScheduleTypeDesc'),
    status?: int32(name='Status', example='0'),
    triggerDateDesc?: string(name='TriggerDateDesc', example='2022-07-29'),
    triggerTimeDesc?: string(name='TriggerTimeDesc', example='10:00'),
    volume?: int32(name='Volume', example='40'),
  }(name='Result'),
}

model GetAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlarm  GetAlarmRequest
  * @return GetAlarmResponse
 */
async function getAlarm(request: GetAlarmRequest): GetAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlarm', 'POST', '/v1.0/ssp/getAlarm', 'json', true, 'form', request);
}

model GetAlbumRequest {
  id: long(name='Id', description='This parameter is required.', example='12343', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='song', position='Query'),
}

model GetAlbumResponseBody = {
  code?: int32(name='Code', example='200'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: {
    alias?: [ string ](name='Alias'),
    audition?: boolean(name='Audition', example='false'),
    authors?: [ 
      {
        authorTypes?: [ string ](name='AuthorTypes'),
        gender?: string(name='Gender', example='MALE'),
        id?: long(name='Id', example='13123'),
        online?: boolean(name='Online', example='false'),
        source?: string(name='Source', example='qignting'),
        title?: string(name='Title'),
      }
    ](name='Authors'),
    category?: string(name='Category', example='audio'),
    charge?: boolean(name='Charge', example='false'),
    commCateId?: long(name='CommCateId', example='80012017'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
    }(name='Cover'),
    description?: string(name='Description'),
    finished?: string(name='Finished', example='FINISHED'),
    hotScore?: double(name='HotScore', example='10'),
    id?: long(name='Id', example='1231231'),
    itemType?: string(name='ItemType', example='ALBUM'),
    rawId?: string(name='RawId', example='23242'),
    source?: string(name='Source', example='qignting'),
    title?: string(name='Title'),
    totalEpisode?: int32(name='TotalEpisode', example='12'),
    type?: string(name='Type', example='program'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
}

model GetAlbumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlbumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlbum  GetAlbumRequest
  * @return GetAlbumResponse
 */
async function getAlbum(request: GetAlbumRequest): GetAlbumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlbum', 'POST', '/v1.0/ssp/GetAlbum', 'json', false, 'json', request);
}

model GetAlbumDetailByIdRequest {
  albumId?: string(name='AlbumId', example='51999575', position='Query'),
}

model GetAlbumDetailByIdResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A0B7CACD-485B-14E2-854F-39EACB09E45B'),
  result?: {
    albumContentList?: [ 
      {
        duration?: string(name='Duration', example='3分24秒'),
        id?: string(name='Id', example='468009044'),
        orderIndex?: string(name='OrderIndex', example='1000'),
        title?: string(name='Title', example='001为什么肚子饿时会咕咕叫'),
      }
    ](name='AlbumContentList'),
    albumCoverUrl?: string(name='AlbumCoverUrl', example='https://ailabs.alibabausercontent.com/images/8838/1600839452498.jpg'),
    albumDescription?: string(name='AlbumDescription', example='每次一个百科知识或者故事\\n丰富孩子的视野，拓展眼界和知识面，培养和孩子的探究能力和好奇心\\n\\n'),
    albumId?: string(name='AlbumId', example='51999575'),
    albumTitle?: string(name='AlbumTitle', example='小科学家探索'),
  }(name='Result'),
}

model GetAlbumDetailByIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAlbumDetailByIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAlbumDetailById  GetAlbumDetailByIdRequest
  * @return GetAlbumDetailByIdResponse
 */
async function getAlbumDetailById(request: GetAlbumDetailByIdRequest): GetAlbumDetailByIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAlbumDetailById', 'POST', '/v1.0/ssp/getAlbumDetailById', 'json', false, 'json', request);
}

model GetAligenieUserInfoRequest {
  loginStateAccessToken: string(name='LoginStateAccessToken', description='This parameter is required.', example='99ce8a70c23a94f8569e1a525bef6e85', position='Query'),
}

model GetAligenieUserInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: {
    aligenieNickname?: string(name='AligenieNickname', example='XXX'),
    avatar?: string(name='Avatar', example='http://img.alicdn.com/xxx.jpg'),
    deletable?: boolean(name='Deletable'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model GetAligenieUserInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAligenieUserInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAligenieUserInfo  GetAligenieUserInfoRequest
  * @return GetAligenieUserInfoResponse
 */
async function getAligenieUserInfo(request: GetAligenieUserInfoRequest): GetAligenieUserInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAligenieUserInfo', 'GET', '/v1.0/ssp/getAligenieUserInfo', 'json', false, 'json', request);
}

model GetCodeEnhanceRequest {
  channelInfo: {
    channel: string(name='Channel', description='This parameter is required.', example='WeChat、ThirdApp'),
    extInfo?: string(name='ExtInfo', example='{}'),
  }(name='ChannelInfo', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetCodeEnhanceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: string(name='Result', example='Aexfgc'),
}

model GetCodeEnhanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCodeEnhanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCodeEnhance  GetCodeEnhanceRequest
  * @return GetCodeEnhanceResponse
 */
async function getCodeEnhance(request: GetCodeEnhanceRequest): GetCodeEnhanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeEnhance', 'GET', '/v1.0/ssp/getCodeEnhance', 'json', false, 'json', request);
}

model GetContentRequest {
  id: long(name='Id', description='This parameter is required.', example='123123', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='song', position='Query'),
}

model GetContentResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: {
    albumId?: string(name='AlbumId', example='1231'),
    alias?: [ string ](name='Alias'),
    audition?: boolean(name='Audition', example='false'),
    authors?: [ 
      {
        authorTypes?: [ string ](name='AuthorTypes'),
        gender?: string(name='Gender', example='MALE'),
        id?: long(name='Id', example='123123'),
        online?: boolean(name='Online', example='false'),
        source?: string(name='Source', example='qingting'),
        title?: string(name='Title'),
      }
    ](name='Authors'),
    category?: string(name='Category', example='audio'),
    charge?: boolean(name='Charge', example='false'),
    commCateId?: long(name='CommCateId', example='80012017'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
    }(name='Cover'),
    description?: string(name='Description'),
    duration?: long(name='Duration', example='180'),
    hotScore?: double(name='HotScore'),
    id?: long(name='Id', example='13597709'),
    itemType?: string(name='ItemType', example='ALBUM'),
    lyric?: string(name='Lyric', example='http://1231.lrc'),
    rawId?: string(name='RawId', example='1231231'),
    source?: string(name='Source', example='qingting'),
    styles?: [ string ](name='Styles'),
    title?: string(name='Title'),
    type?: string(name='Type', example='program'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
}

model GetContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetContent  GetContentRequest
  * @return GetContentResponse
 */
async function getContent(request: GetContentRequest): GetContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetContent', 'POST', '/v1.0/ssp/GetContent', 'json', false, 'json', request);
}

model GetCurrentPlayingItemRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetCurrentPlayingItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId', example='260744'),
    audioLength?: int32(name='AudioLength', example='190'),
    copyright?: int32(name='Copyright', example='0'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      large?: string(name='Large', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      mediam?: string(name='Mediam', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      medium?: string(name='Medium', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      small?: string(name='Small', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
    itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
    liked?: string(name='Liked', example='false'),
    lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
    playMode?: string(name='PlayMode', example='Repeat'),
    pos?: int32(name='Pos', example='0'),
    progress?: int32(name='Progress', example='0'),
    rawId?: string(name='RawId', example='550144364'),
    singer?: string(name='Singer'),
    source?: string(name='Source', example='ximalayav2'),
    title?: string(name='Title'),
    type?: string(name='Type', example='story'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model GetCurrentPlayingItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCurrentPlayingItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCurrentPlayingItem  GetCurrentPlayingItemRequest
  * @return GetCurrentPlayingItemResponse
 */
async function getCurrentPlayingItem(request: GetCurrentPlayingItemRequest): GetCurrentPlayingItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCurrentPlayingItem', 'POST', '/v1.0/ssp/GetCurrentPlayingItem', 'json', false, 'json', request);
}

model GetCurrentPlayingListRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openQueryPlayListRequest: {
    pageNum: int32(name='PageNum', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='15'),
  }(name='OpenQueryPlayListRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetCurrentPlayingListResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: [ 
    {
      albumName?: string(name='AlbumName'),
      albumRawId?: string(name='AlbumRawId', example='260744'),
      audioLength?: int32(name='AudioLength', example='190'),
      copyright?: int32(name='Copyright', example='0'),
      cover?: {
        canResize?: boolean(name='CanResize', example='false'),
        img?: string(name='Img', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
        large?: string(name='Large', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
        mediam?: string(name='Mediam', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
        medium?: string(name='Medium', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
        small?: string(name='Small', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      }(name='Cover'),
      defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
      itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
      liked?: boolean(name='Liked', example='false'),
      lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
      playMode?: string(name='PlayMode', example='Normal'),
      pos?: int32(name='Pos', example='0'),
      progress?: int32(name='Progress', example='0'),
      rawId?: string(name='RawId', example='550144364'),
      singer?: string(name='Singer'),
      source?: string(name='Source', example='ximalayav2'),
      title?: string(name='Title'),
      type?: string(name='Type', example='story'),
      valid?: string(name='Valid', example='VALID'),
    }
  ](name='Result'),
  success?: string(name='Success', example='true'),
}

model GetCurrentPlayingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCurrentPlayingListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCurrentPlayingList  GetCurrentPlayingListRequest
  * @return GetCurrentPlayingListResponse
 */
async function getCurrentPlayingList(request: GetCurrentPlayingListRequest): GetCurrentPlayingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCurrentPlayingList', 'POST', '/v1.0/ssp/GetCurrentPlayingList', 'json', true, 'form', request);
}

model GetDeviceBasicInfoRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetDeviceBasicInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    firmwareVersion?: string(name='FirmwareVersion', example='2.0.3'),
    mac?: string(name='Mac', example='b4:xx:xx:xx:65:2b'),
    name?: string(name='Name', example='我的设备'),
    sn?: string(name='Sn', example='1200xxx048'),
  }(name='Result'),
}

model GetDeviceBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceBasicInfo  GetDeviceBasicInfoRequest
  * @return GetDeviceBasicInfoResponse
 */
async function getDeviceBasicInfo(request: GetDeviceBasicInfoRequest): GetDeviceBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceBasicInfo', 'GET', '/v1.0/ssp/getDeviceBasicInfo', 'json', false, 'json', request);
}

model GetDeviceIdByIdentityRequest {
  encodeKey: string(name='EncodeKey', description='This parameter is required.', example='129****0946', position='Query'),
  encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID', position='Query'),
  identityId: string(name='IdentityId', description='This parameter is required.', example='b4:xx:xx:xx:65:2b', position='Query'),
  identityType: string(name='IdentityType', description='This parameter is required.', example='MAC', position='Query'),
  productKey?: string(name='ProductKey', example='Mm*****XnZ8', position='Query'),
}

model GetDeviceIdByIdentityResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7DA****A0726E'),
  result?: {
    deviceOpenId?: string(name='DeviceOpenId', example='A963*0158'),
    deviceUnionIds?: [ 
      {
        deviceUnionId?: string(name='DeviceUnionId', example='1553*B0C3'),
        organizationId?: string(name='OrganizationId', example='1**2'),
      }
    ](name='DeviceUnionIds'),
  }(name='Result'),
}

model GetDeviceIdByIdentityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceIdByIdentityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceIdByIdentity  GetDeviceIdByIdentityRequest
  * @return GetDeviceIdByIdentityResponse
 */
async function getDeviceIdByIdentity(request: GetDeviceIdByIdentityRequest): GetDeviceIdByIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceIdByIdentity', 'GET', '/v1.0/ssp/getDeviceIdByIdentity', 'json', false, 'json', request);
}

model GetDeviceSettingRequest {
  deviceInfo?: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12345'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='122'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  keys: [ string ](name='Keys', description='This parameter is required.', shrink='json', position='Query'),
}

model GetDeviceSettingResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: map[string]any(name='Result'),
}

model GetDeviceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceSetting  GetDeviceSettingRequest
  * @return GetDeviceSettingResponse
 */
async function getDeviceSetting(request: GetDeviceSettingRequest): GetDeviceSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceSetting', 'GET', '/v1.0/ssp/getDeviceSetting', 'json', false, 'json', request);
}

model GetDeviceStatusDetailRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  keys: [ string ](name='Keys', description='This parameter is required.', shrink='json', position='Query'),
}

model GetDeviceStatusDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    player?: {
      audioAlbum?: string(name='AudioAlbum'),
      audioAnchor?: string(name='AudioAnchor', example='刘德华'),
      audioExt?: string(name='AudioExt', example='""'),
      audioId?: string(name='AudioId', example='123'),
      audioLength?: string(name='AudioLength', example='253'),
      audioName?: string(name='AudioName'),
      audioSource?: string(name='AudioSource', example='xiami'),
      audioUrl?: string(name='AudioUrl', example='https://xxx'),
      format?: string(name='Format', example='mp3'),
      progress?: string(name='Progress', example='30'),
      source?: string(name='Source', example='cloud'),
      status?: string(name='Status', example='pause'),
      timestamp?: string(name='Timestamp'),
    }(name='Player'),
    power?: {
      quantity?: int32(name='Quantity', example='30'),
      status?: string(name='Status'),
    }(name='Power'),
    speaker?: {
      muted?: boolean(name='Muted'),
      volume?: int32(name='Volume', example='10'),
    }(name='Speaker'),
  }(name='Result'),
}

model GetDeviceStatusDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceStatusDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceStatusDetail  GetDeviceStatusDetailRequest
  * @return GetDeviceStatusDetailResponse
 */
async function getDeviceStatusDetail(request: GetDeviceStatusDetailRequest): GetDeviceStatusDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceStatusDetail', 'GET', '/v1.0/ssp/getDeviceStatusDetail', 'json', false, 'json', request);
}

model GetDeviceStatusInfoRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetDeviceStatusInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    online?: int32(name='Online', example='1'),
  }(name='Result'),
}

model GetDeviceStatusInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceStatusInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceStatusInfo  GetDeviceStatusInfoRequest
  * @return GetDeviceStatusInfoResponse
 */
async function getDeviceStatusInfo(request: GetDeviceStatusInfoRequest): GetDeviceStatusInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceStatusInfo', 'GET', '/v1.0/ssp/getDeviceStatusInfo', 'json', false, 'json', request);
}

model GetDeviceTagRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetDeviceTagResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    deviceTags?: map[string]any(name='DeviceTags', example='{       "antest1": "antest1",       "antest": "a"     }'),
  }(name='Result'),
}

model GetDeviceTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceTagResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDeviceTag  GetDeviceTagRequest
  * @return GetDeviceTagResponse
 */
async function getDeviceTag(request: GetDeviceTagRequest): GetDeviceTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetDeviceTag', 'GET', '/v1.0/ssp/getDeviceTag', 'json', false, 'json', request);
}

model GetJiangSuTelecomDataRequest {
  date?: string(name='Date', example='2024-11-09', position='Query'),
}

model GetJiangSuTelecomDataResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', description='Id of the request', example='successful'),
  requestId?: string(name='RequestId', example='26C9C3D0-160D-5CDE-BF7A-B3C8D14AA949'),
  result?: {
    ossUrl?: string(name='OssUrl', example='http://jiangsu-telecom.oss-cn-zhangjiakou.aliyuncs.com/jiangsuTelecom/jiangsu_telecom_2024-11-06_data.xls?Expires=1731056700&OSSAccessKeyId=STS.NUqZx6e1HjWYHhYwyDqbRNySp&Signature=wqMK%2Bspo08cg7xDIrzJdgFpZT3U%3D&security-token=CAIS6wJ1q6Ft5B2yfSjIr5bEEcKCiO5p3ZWySk7ok3kRfe1%2Bobz4kjz2IHhMeXJsBuketv42nmxV7%2FoblrN0UIQAT1HPbsZsq84Pq1%2F4O9GY%2FpXrseBZ08VJ18si00SpsvXJasDVEfn%2FGJ70GX2m%2BwZ3xbzlD0bAO3WuLZyOj7N%2Bc90TRXPWRDFaBdBQVGAAwY1gQhm3D%2Fu2NQPwiWf9FVdhvhEG6Vly8qOi2MaRmHG85R%2FYsrZL%2B9uuc8b5P5A0Y8wlAo6PsbYoJvab4kl58ANX8ap6tqtA9Arcs8uVa1sruE3ebrGIrYQ3dFUgPPRnQvIdtrP1nvt5%2FOXS0p%2Fs01NHNOpWXiLTAoe7247OBeiqO8p%2FKeyjZGQuOTooxiRr2elNRQX4VGsiE7JJQhf7CU293KO0YeZxdAR%2FoOMPnzRBdA2yRaA0rjOmtJPBTFOEIL7ymXpDY8bnsxtwDRYu1%2BXrCqUee2Ik3j4vnOf9Je0agAEDuPfR8GLB8uVv4ZCGRRAM5mV3gKCxl07flVk1UPsxMZWBeVwwALT34lxk4x6ivWA7ZXjXdMmIapup%2FEb6UU%2BWhJH1G4sevkw5%2BGb8h8aRjJHBoxB4YLXNTEb5Rk6sVv%2BoCfkljy3%2FWImWGIMigurkAfOIBgUSql8JgFTxQrOHbiAA'),
  }(name='Result'),
}

model GetJiangSuTelecomDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJiangSuTelecomDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJiangSuTelecomData  GetJiangSuTelecomDataRequest
  * @return GetJiangSuTelecomDataResponse
 */
async function getJiangSuTelecomData(request: GetJiangSuTelecomDataRequest): GetJiangSuTelecomDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJiangSuTelecomData', 'POST', '/v1.0/ssp/GetJiangSuTelecomData', 'json', false, 'json', request);
}

model GetScheduleTaskRequest {
  deviceInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    id: long(name='Id', description='This parameter is required.', example='1234567'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model GetScheduleTaskResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F7E21065-6C21-1158-A2F9-AEFE5CAB7C94'),
  result?: {
    actionTopicList?: [ 
      {
        customAction?: map[string]any(name='CustomAction', example='{"k1":"v1","k2":{"key":1}}'),
      }
    ](name='ActionTopicList'),
    cron?: string(name='Cron', example='0 10 20 30 6 ? 2022'),
    scheduleEndTime?: string(name='ScheduleEndTime', example='1659169473000'),
    scheduleId?: long(name='ScheduleId', example='1234567'),
    scheduleStartTime?: string(name='ScheduleStartTime', example='1656577473000'),
    scheduleType?: string(name='ScheduleType', example='ONCE'),
  }(name='Result'),
}

model GetScheduleTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScheduleTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScheduleTask  GetScheduleTaskRequest
  * @return GetScheduleTaskResponse
 */
async function getScheduleTask(request: GetScheduleTaskRequest): GetScheduleTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetScheduleTask', 'POST', '/v1.0/ssp/GetScheduleTask', 'json', true, 'form', request);
}

model GetUnreadMessageCountRequest {
  userInfo?: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetUnreadMessageCountResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  result?: int32(name='Result', example='10'),
}

model GetUnreadMessageCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUnreadMessageCountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUnreadMessageCount  GetUnreadMessageCountRequest
  * @return GetUnreadMessageCountResponse
 */
async function getUnreadMessageCount(request: GetUnreadMessageCountRequest): GetUnreadMessageCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUnreadMessageCount', 'GET', '/v1.0/ssp/getUnreadMessageCount', 'json', false, 'json', request);
}

model GetUserByDeviceIdRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetUserByDeviceIdResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    userOpenId?: string(name='UserOpenId', example='0963*0158'),
    userUnionIds?: [ 
      {
        organizationId?: string(name='OrganizationId', example='1**2'),
        userUnionId?: string(name='UserUnionId', example='1553*B0C3'),
      }
    ](name='UserUnionIds'),
  }(name='Result', example='true'),
}

model GetUserByDeviceIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserByDeviceIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserByDeviceId  GetUserByDeviceIdRequest
  * @return GetUserByDeviceIdResponse
 */
async function getUserByDeviceId(request: GetUserByDeviceIdRequest): GetUserByDeviceIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUserByDeviceId', 'GET', '/v1.0/ssp/getUserByDeviceId', 'json', false, 'json', request);
}

model GetWeatherRequest {
  deviceInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload?: {
  }(name='Payload', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model GetWeatherResponseBody = {
  code?: int32(name='Code', description='HttpCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: {
    currentMeteorology?: {
      temperature?: {
        current?: string(name='Current', example='36'),
        currentDesc?: string(name='CurrentDesc'),
        high?: string(name='High', example='37'),
        highDesc?: string(name='HighDesc'),
        logical?: string(name='Logical', example='41'),
        low?: string(name='Low', example='28'),
        lowDesc?: string(name='LowDesc'),
      }(name='Temperature'),
      weather?: {
        code?: string(name='Code', example='000'),
        name?: string(name='Name'),
      }(name='Weather'),
    }(name='CurrentMeteorology'),
  }(name='Result'),
}

model GetWeatherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWeatherResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWeather  GetWeatherRequest
  * @return GetWeatherResponse
 */
async function getWeather(request: GetWeatherRequest): GetWeatherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWeather', 'POST', '/v1.0/ssp/GetWeather', 'json', true, 'form', request);
}

model IndexControlPlayingListRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openIndexControlRequest: {
    extendInfo?: map[string]any(name='ExtendInfo'),
    index: int32(name='Index', description='This parameter is required.', example='0'),
    needContentContinued?: boolean(name='NeedContentContinued', example='false'),
  }(name='OpenIndexControlRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model IndexControlPlayingListResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId', example='260744'),
    audioLength?: int32(name='AudioLength', example='190'),
    copyright?: int32(name='Copyright', example='0'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      large?: string(name='Large', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      mediam?: string(name='Mediam', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      medium?: string(name='Medium', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      small?: string(name='Small', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
    itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
    liked?: boolean(name='Liked', example='false'),
    lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
    playMode?: string(name='PlayMode', example='Repeat'),
    pos?: int32(name='Pos', example='0'),
    progress?: int32(name='Progress', example='0'),
    rawId?: string(name='RawId', example='550144364'),
    singer?: string(name='Singer'),
    source?: string(name='Source', example='ximalayav2'),
    title?: string(name='Title'),
    type?: string(name='Type', example='story'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model IndexControlPlayingListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IndexControlPlayingListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of IndexControlPlayingList  IndexControlPlayingListRequest
  * @return IndexControlPlayingListResponse
 */
async function indexControlPlayingList(request: IndexControlPlayingListRequest): IndexControlPlayingListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'IndexControlPlayingList', 'POST', '/v1.0/ssp/IndexControlPlayingList', 'json', true, 'form', request);
}

model InvalidateThirdPartyAppLoginStateRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='com.*.*.*'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  thirdPartyAppId: string(name='ThirdPartyAppId', description='This parameter is required.', example='com.*.*.*', position='Body'),
}

model InvalidateThirdPartyAppLoginStateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='FAFCD152-4791-5F2F-B0BE-2DC06FD4F05B'),
  success?: boolean(name='Success', example='true'),
}

model InvalidateThirdPartyAppLoginStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvalidateThirdPartyAppLoginStateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InvalidateThirdPartyAppLoginState  InvalidateThirdPartyAppLoginStateRequest
  * @return InvalidateThirdPartyAppLoginStateResponse
 */
async function invalidateThirdPartyAppLoginState(request: InvalidateThirdPartyAppLoginStateRequest): InvalidateThirdPartyAppLoginStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvalidateThirdPartyAppLoginState', 'POST', '/v1.0/ssp/invalidateThirdPartyAppLoginState', 'json', true, 'form', request);
}

model ListAlarmsRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model ListAlarmsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    model?: [ 
      {
        alarmId?: long(name='AlarmId', example='1234567'),
        musicInfo?: {
          musicId?: long(name='MusicId', example='1'),
          musicName?: string(name='MusicName'),
          musicType?: long(name='MusicType', example='1'),
          musicTypeName?: string(name='MusicTypeName'),
          musicUrl?: string(name='MusicUrl', example='http://xx'),
        }(name='MusicInfo'),
        scheduleInfo?: {
          once?: {
            day?: int32(name='Day', example='29'),
            hour?: int32(name='Hour', example='10'),
            minute?: int32(name='Minute', example='0'),
            month?: int32(name='Month', example='7'),
            year?: int32(name='Year', example='2022'),
          }(name='Once'),
          statutoryWorkingDay?: {
            hour?: int32(name='Hour', example='10'),
            minute?: int32(name='Minute', example='0'),
          }(name='StatutoryWorkingDay'),
          type?: string(name='Type', example='ONCE'),
          weekly?: {
            daysOfWeek?: [ int32 ](name='DaysOfWeek'),
            hour?: int32(name='Hour', example='10'),
            minute?: int32(name='Minute', example='0'),
          }(name='Weekly'),
        }(name='ScheduleInfo'),
        scheduleTypeDesc?: string(name='ScheduleTypeDesc'),
        status?: int32(name='Status', example='0'),
        triggerDateDesc?: string(name='TriggerDateDesc', example='2022-07-29'),
        triggerTimeDesc?: string(name='TriggerTimeDesc', example='10:00'),
        volume?: int32(name='Volume', example='40'),
      }
    ](name='Model'),
    pageCount?: int32(name='PageCount', example='10'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Result'),
}

model ListAlarmsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlarmsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlarms  ListAlarmsRequest
  * @return ListAlarmsResponse
 */
async function listAlarms(request: ListAlarmsRequest): ListAlarmsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlarms', 'POST', '/v1.0/ssp/listAlarm', 'json', true, 'form', request);
}

model ListAlbumDetailRequest {
  id: long(name='Id', description='This parameter is required.', example='121321', position='Query'),
  pageNum: int32(name='PageNum', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', position='Query'),
}

model ListAlbumDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: {
    currentPageNum?: long(name='CurrentPageNum', example='1'),
    openDataItemList?: [ 
      {
        alias?: [ string ](name='Alias'),
        audition?: boolean(name='Audition', example='false'),
        authors?: [ 
          {
            authorTypes?: [ string ](name='AuthorTypes'),
            gender?: string(name='Gender', example='MALE'),
            id?: long(name='Id', example='12314'),
            online?: boolean(name='Online', example='false'),
            source?: string(name='Source', example='qingting'),
            title?: string(name='Title'),
          }
        ](name='Authors'),
        category?: string(name='Category', example='audio'),
        charge?: boolean(name='Charge', example='false'),
        commCateId?: long(name='CommCateId', example='80012017'),
        cover?: {
          canResize?: boolean(name='CanResize', example='false'),
          img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
          large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
          medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
          small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        }(name='Cover'),
        description?: string(name='Description'),
        duration?: long(name='Duration', example='180'),
        hotScore?: double(name='HotScore', example='10'),
        id?: long(name='Id', example='1231231'),
        itemType?: string(name='ItemType', example='ALBUM'),
        orderIndex?: long(name='OrderIndex', example='1'),
        rawId?: string(name='RawId', example='12323423'),
        source?: string(name='Source', example='qingting'),
        styles?: [ string ](name='Styles'),
        title?: string(name='Title'),
        type?: string(name='Type', example='program'),
        valid?: string(name='Valid', example='VALID'),
      }
    ](name='OpenDataItemList'),
    pageSize?: long(name='PageSize', example='10'),
    totalSize?: long(name='TotalSize', example='21421'),
  }(name='Result'),
}

model ListAlbumDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlbumDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlbumDetail  ListAlbumDetailRequest
  * @return ListAlbumDetailResponse
 */
async function listAlbumDetail(request: ListAlbumDetailRequest): ListAlbumDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlbumDetail', 'POST', '/v1.0/ssp/ListAlbumDetail', 'json', false, 'json', request);
}

model ListAlbumIsAddedRequest {
  albumIdList?: [ string ](name='AlbumIdList', shrink='json', position='Query'),
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model ListAlbumIsAddedResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='BCC85E69-5DA6-197E-A8C1-8A1B19CF781B'),
  result?: [ 
    {
      albumId?: string(name='AlbumId', example='51999575'),
      isAdded?: string(name='IsAdded', example='false'),
    }
  ](name='Result'),
}

model ListAlbumIsAddedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAlbumIsAddedResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAlbumIsAdded  ListAlbumIsAddedRequest
  * @return ListAlbumIsAddedResponse
 */
async function listAlbumIsAdded(request: ListAlbumIsAddedRequest): ListAlbumIsAddedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAlbumIsAdded', 'POST', '/v1.0/ssp/listAlbumIsAdded', 'json', false, 'json', request);
}

model ListCateContentRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  request: {
    cateId: long(name='CateId', description='This parameter is required.', example='80010'),
    isAlbum: boolean(name='IsAlbum', description='This parameter is required.', example='false'),
    pageNum: int32(name='PageNum', description='This parameter is required.', example='1'),
    pageSize: int32(name='PageSize', description='This parameter is required.', example='10'),
    sortBy?: string(name='SortBy', example='hot_score'),
    sortOrder: string(name='SortOrder', description='This parameter is required.', example='DESC'),
  }(name='Request', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListCateContentResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='sucess'),
  requestId?: string(name='RequestId', description='Id of the request', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: {
    currentPageNum?: int32(name='CurrentPageNum', example='1'),
    openDataItemList?: [ 
      {
        alias?: [ string ](name='Alias'),
        audition?: boolean(name='Audition', example='true'),
        authors?: [ 
          {
            authorTypes?: [ string ](name='AuthorTypes'),
            cover?: {
              canResize?: boolean(name='CanResize', example='false'),
              img?: string(name='Img', example='https://a.jpg'),
              large?: string(name='Large', example='https://a.jpg'),
              mediam?: string(name='Mediam', example='https://a.jpg'),
              medium?: string(name='Medium', example='https://a.jpg'),
              small?: string(name='Small', example='https://a.jpg'),
            }(name='Cover'),
            description?: string(name='Description'),
            gender?: string(name='Gender', example='MALE'),
            id?: long(name='Id', example='13597709'),
            online?: boolean(name='Online', example='true'),
            rawId?: string(name='RawId', example='123123'),
            source?: string(name='Source', example='qingting'),
            title?: string(name='Title'),
          }
        ](name='Authors'),
        category?: string(name='Category', example='audio'),
        charge?: boolean(name='Charge', example='false'),
        commCateId?: string(name='CommCateId', example='80012017'),
        cover?: {
          img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
          large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718275.jpg'),
          mediam?: string(name='Mediam', example='http://pic.qtfm.cn/2017/0207/2017020718275.jpg'),
          medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/20170207175.jpg'),
          small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020675.jpg'),
          canResize?: boolean(name='canResize', example='false'),
        }(name='Cover'),
        description?: string(name='Description'),
        hotScore?: double(name='HotScore', example='0'),
        itemType?: string(name='ItemType', example='ALBUM'),
        rawId?: string(name='RawId', example='206775'),
        source?: string(name='Source', example='qingting'),
        title?: string(name='Title'),
        type?: string(name='Type', example='program'),
        valid?: string(name='Valid', example='VALID'),
        id?: long(name='id', example='26152778'),
      }
    ](name='OpenDataItemList'),
    pageSize?: int32(name='PageSize', example='10'),
    totalSize?: long(name='TotalSize', example='12002'),
  }(name='Result'),
}

model ListCateContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCateContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCateContent  ListCateContentRequest
  * @return ListCateContentResponse
 */
async function listCateContent(request: ListCateContentRequest): ListCateContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCateContent', 'POST', '/v1.0/ssp/ListCateContent', 'json', true, 'form', request);
}

model ListCateInfoRequest {
  type: string(name='Type', description='This parameter is required.', example='song', position='Query'),
}

model ListCateInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: [ 
    {
      cateId?: long(name='CateId', example='80064'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId', example='0'),
    }
  ](name='Result'),
}

model ListCateInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCateInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCateInfo  ListCateInfoRequest
  * @return ListCateInfoResponse
 */
async function listCateInfo(request: ListCateInfoRequest): ListCateInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCateInfo', 'POST', '/v1.0/ssp/ListCateInfo', 'json', false, 'json', request);
}

model ListCommonCateFirstFloorRequest {
  type: string(name='Type', description='This parameter is required.', example='song', position='Query'),
}

model ListCommonCateFirstFloorResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: [ 
    {
      cateId?: long(name='CateId', example='80012'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId', example='0'),
    }
  ](name='Result'),
}

model ListCommonCateFirstFloorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommonCateFirstFloorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCommonCateFirstFloor  ListCommonCateFirstFloorRequest
  * @return ListCommonCateFirstFloorResponse
 */
async function listCommonCateFirstFloor(request: ListCommonCateFirstFloorRequest): ListCommonCateFirstFloorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCommonCateFirstFloor', 'POST', '/v1.0/ssp/ListCommonCateFirstFloor', 'json', false, 'json', request);
}

model ListCommonCateSecondFloorRequest {
  parentCateId?: long(name='ParentCateId', example='80010', position='Query'),
}

model ListCommonCateSecondFloorResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: [ 
    {
      cateId?: long(name='CateId', example='80018009'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId', example='80018'),
    }
  ](name='Result'),
}

model ListCommonCateSecondFloorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCommonCateSecondFloorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCommonCateSecondFloor  ListCommonCateSecondFloorRequest
  * @return ListCommonCateSecondFloorResponse
 */
async function listCommonCateSecondFloor(request: ListCommonCateSecondFloorRequest): ListCommonCateSecondFloorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCommonCateSecondFloor', 'POST', '/v1.0/ssp/ListCommonCateSecondFloor', 'json', false, 'json', request);
}

model ListDeviceBasicInfoRequest {
  deviceInfos?: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    ids?: [ string ](name='Ids'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='DeviceInfos', shrink='json', position='Query'),
}

model ListDeviceBasicInfoResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: map[string]ResultValue(name='Result'),
}

model ListDeviceBasicInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceBasicInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeviceBasicInfo  ListDeviceBasicInfoRequest
  * @return ListDeviceBasicInfoResponse
 */
async function listDeviceBasicInfo(request: ListDeviceBasicInfoRequest): ListDeviceBasicInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeviceBasicInfo', 'GET', '/v1.0/ssp/listDeviceBasicInfo', 'json', false, 'json', request);
}

model ListDeviceByUserIdRequest {
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListDeviceByUserIdResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      deviceOpenId?: string(name='DeviceOpenId', example='A963*0158'),
      deviceUnionIds?: [ 
        {
          deviceUnionId?: string(name='DeviceUnionId', example='1553*B0C3'),
          organizationId?: string(name='OrganizationId', example='1**2'),
        }
      ](name='DeviceUnionIds'),
    }
  ](name='Result'),
}

model ListDeviceByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeviceByUserId  ListDeviceByUserIdRequest
  * @return ListDeviceByUserIdResponse
 */
async function listDeviceByUserId(request: ListDeviceByUserIdRequest): ListDeviceByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeviceByUserId', 'GET', '/v1.0/ssp/listDeviceByUserId', 'json', false, 'json', request);
}

model ListDeviceByUserIdAndChanelRequest {
  channelInfo: {
    channel: string(name='Channel', description='This parameter is required.', example='WeChat、ThirdApp'),
    extInfo?: string(name='ExtInfo', example='{}'),
  }(name='ChannelInfo', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1***2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListDeviceByUserIdAndChanelResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RE***D'),
  result?: [ 
    {
      deviceOpenId?: string(name='DeviceOpenId', example='A963*0158'),
      deviceUnionIds?: [ 
        {
          deviceUnionId?: string(name='DeviceUnionId', example='1553*B0C3'),
          organizationId?: string(name='OrganizationId', example='1***2'),
        }
      ](name='DeviceUnionIds'),
    }
  ](name='Result'),
}

model ListDeviceByUserIdAndChanelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceByUserIdAndChanelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeviceByUserIdAndChanel  ListDeviceByUserIdAndChanelRequest
  * @return ListDeviceByUserIdAndChanelResponse
 */
async function listDeviceByUserIdAndChanel(request: ListDeviceByUserIdAndChanelRequest): ListDeviceByUserIdAndChanelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeviceByUserIdAndChanel', 'POST', '/v1.0/ssp/listDeviceByUserIdAndChanel', 'json', false, 'json', request);
}

model ListDeviceIdByIdentitiesRequest {
  encodeKey: string(name='EncodeKey', description='This parameter is required.', example='125****0946', position='Query'),
  encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID', position='Query'),
  identityIds?: [ string ](name='IdentityIds', shrink='json', position='Query'),
  identityType: string(name='IdentityType', description='This parameter is required.', example='MAC', position='Query'),
  productKey: string(name='ProductKey', description='This parameter is required.', example='Mm*****XnZ8', position='Query'),
}

model ListDeviceIdByIdentitiesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: map[string]ResultValue(name='Result'),
}

model ListDeviceIdByIdentitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceIdByIdentitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeviceIdByIdentities  ListDeviceIdByIdentitiesRequest
  * @return ListDeviceIdByIdentitiesResponse
 */
async function listDeviceIdByIdentities(request: ListDeviceIdByIdentitiesRequest): ListDeviceIdByIdentitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDeviceIdByIdentities', 'GET', '/v1.0/ssp/listDeviceIdByIdentities', 'json', false, 'json', request);
}

model ListMusicRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    currentPage?: int32(name='CurrentPage', example='1'),
    musicId?: long(name='MusicId', example='1'),
    musicName?: string(name='MusicName'),
    musicType: long(name='MusicType', description='This parameter is required.', example='1'),
    musicTypeName: string(name='MusicTypeName', description='This parameter is required.'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model ListMusicResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    model?: [ 
      {
        musicId?: long(name='MusicId', example='1'),
        musicName?: string(name='MusicName', example='xx'),
        musicType?: long(name='MusicType', example='1'),
        musicTypeName?: string(name='MusicTypeName', example='xx'),
        musicUrl?: string(name='MusicUrl', example='http://xx'),
      }
    ](name='Model'),
    pageCount?: int32(name='PageCount', example='10'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Result'),
}

model ListMusicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMusicResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMusic  ListMusicRequest
  * @return ListMusicResponse
 */
async function listMusic(request: ListMusicRequest): ListMusicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMusic', 'POST', '/v1.0/ssp/listMusic', 'json', true, 'form', request);
}

model ListPlayHistoryRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId: string(name='OrganizationId', description='This parameter is required.', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  request: {
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    type?: string(name='Type', example='music'),
  }(name='Request', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId: string(name='OrganizationId', description='This parameter is required.', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListPlayHistoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  result?: [ 
    {
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition', example='false'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize', example='false'),
            img?: string(name='Img', example='https://a.jpg'),
            large?: string(name='Large', example='https://a.jpg'),
            medium?: string(name='Medium', example='https://a.jpg'),
            small?: string(name='Small', example='https://a.jpg'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender', example='MALE'),
          id?: long(name='Id', example='13597709'),
          online?: boolean(name='Online', example='false'),
          rawId?: string(name='RawId', example='123123'),
          source?: string(name='Source', example='qingting'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category', example='audio'),
      charge?: boolean(name='Charge', example='false'),
      commCateId?: long(name='CommCateId', example='80012017'),
      cover?: {
        canResize?: boolean(name='CanResize', example='false'),
        img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        mediam?: string(name='Mediam', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      }(name='Cover'),
      description?: string(name='Description'),
      hotScore?: double(name='HotScore', example='10'),
      id?: long(name='Id', example='13597709'),
      itemType?: string(name='ItemType', example='ALBUM'),
      source?: string(name='Source', example='qingting'),
      title?: string(name='Title'),
      type?: string(name='Type', example='program'),
      valid?: string(name='Valid', example='VALID'),
    }
  ](name='Result'),
  requestId?: string(name='requestId', description='Id of the request', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
}

model ListPlayHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPlayHistoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPlayHistory  ListPlayHistoryRequest
  * @return ListPlayHistoryResponse
 */
async function listPlayHistory(request: ListPlayHistoryRequest): ListPlayHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPlayHistory', 'POST', '/v1.0/ssp/ListPlayHistory', 'json', true, 'form', request);
}

model ListRecommendContentRequest {
  deviceInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  request: {
    count?: int32(name='Count', example='10'),
    type?: string(name='Type', example='song'),
  }(name='Request', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListRecommendContentResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: [ 
    {
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition', example='false'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize', example='false'),
            img?: string(name='Img', example='https://a.jpg'),
            large?: string(name='Large', example='https://a.jpg'),
            medium?: string(name='Medium', example='https://a.jpg'),
            small?: string(name='Small', example='https://a.jpg'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender', example='MALE'),
          id?: long(name='Id', example='13597709'),
          online?: boolean(name='Online', example='false'),
          rawId?: string(name='RawId', example='12311'),
          source?: string(name='Source', example='qingting'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category', example='audio'),
      charge?: boolean(name='Charge', example='false'),
      commCateId?: long(name='CommCateId', example='80012017'),
      cover?: {
        canResize?: boolean(name='CanResize', example='false'),
        img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        mediam?: string(name='Mediam', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      }(name='Cover'),
      description?: string(name='Description'),
      hotScore?: double(name='HotScore', example='10'),
      id?: long(name='Id', example='13597709'),
      itemType?: string(name='ItemType', example='ALBUM'),
      rawId?: string(name='RawId', example='123123'),
      source?: string(name='Source', example='qingting'),
      title?: string(name='Title'),
      type?: string(name='Type', example='program'),
      valid?: string(name='Valid', example='VALID'),
    }
  ](name='Result'),
}

model ListRecommendContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecommendContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRecommendContent  ListRecommendContentRequest
  * @return ListRecommendContentResponse
 */
async function listRecommendContent(request: ListRecommendContentRequest): ListRecommendContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRecommendContent', 'POST', '/v1.0/ssp/ListRecommendContent', 'json', true, 'form', request);
}

model ListSubRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  page: {
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='UNION_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListSubResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0D0C09C2-ADC1-198B-964D-24F4FAD967DB'),
  result?: {
    dataList?: [ 
      {
        albumId?: string(name='AlbumId', example='51999575'),
        coverUrl?: string(name='CoverUrl', example='https://ailabs.alibabausercontent.com/images/8838/1600839452498.jpg'),
        dailyStudyCnt?: int32(name='DailyStudyCnt', example='2'),
        deviceId?: string(name='DeviceId', example='5874DBCCA3038FAA1A70A8060F07F26D'),
        id?: long(name='Id', example='1'),
        playMode?: string(name='PlayMode', example='sequence'),
        scheduleInfo?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour', example='12'),
          minute?: int32(name='Minute', example='23'),
        }(name='ScheduleInfo'),
        title?: string(name='Title', example='小科学家探索'),
        userId?: long(name='UserId', example='1152893538998276761'),
      }
    ](name='DataList'),
    hasNext?: boolean(name='HasNext'),
    totalCount?: long(name='TotalCount', example='3'),
    totalPageCount?: int32(name='TotalPageCount', example='1'),
  }(name='Result'),
}

model ListSubResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSub  ListSubRequest
  * @return ListSubResponse
 */
async function listSub(request: ListSubRequest): ListSubResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSub', 'POST', '/v1.0/ssp/listSub', 'json', false, 'json', request);
}

model ListSubAlbumRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  querySubscriptionAlbumRequest?: {
    albumId?: string(name='AlbumId', example='4476001'),
    categoryId: int32(name='CategoryId', description='This parameter is required.', example='80011'),
    page: {
      pageNum?: int32(name='PageNum', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
    }(name='Page', description='This parameter is required.'),
    title?: string(name='Title', example='睡前故事'),
  }(name='QuerySubscriptionAlbumRequest', description='request', shrink='json', position='Query'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model ListSubAlbumResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='CB13B8D7-37FB-1B3E-8EB9-65BB413267E1'),
  result?: {
    dataList?: [ 
      {
        albumId?: string(name='AlbumId', example='4476001'),
        categoryId?: int32(name='CategoryId', example='80011'),
        coverUrl?: string(name='CoverUrl', example='https://ailabs.alibabausercontent.com/images/17825/jknoamc2.jpg'),
        id?: long(name='Id', example='1'),
        isAdded?: boolean(name='IsAdded'),
        scheduleInfo?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour', example='12'),
          minute?: int32(name='Minute', example='23'),
          scheduleId?: long(name='ScheduleId'),
        }(name='ScheduleInfo'),
        sequence?: long(name='Sequence', example='1'),
        title?: string(name='Title', example='睡前故事'),
        totalEpisode?: int32(name='TotalEpisode', example='23'),
      }
    ](name='DataList'),
    hasNext?: boolean(name='HasNext'),
    totalCount?: int32(name='TotalCount', example='3'),
    totalPageCount?: int32(name='TotalPageCount', example='1'),
  }(name='Result'),
}

model ListSubAlbumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubAlbumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubAlbum  ListSubAlbumRequest
  * @return ListSubAlbumResponse
 */
async function listSubAlbum(request: ListSubAlbumRequest): ListSubAlbumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubAlbum', 'POST', '/v1.0/ssp/listSubAlbum', 'json', false, 'json', request);
}

model ListSubscriptionAlbumCategoryRequest {
  categoryName?: string(name='CategoryName', example='儿歌', position='Query'),
}

model ListSubscriptionAlbumCategoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='60E7A523-9766-1D07-87A2-6E587420C59B'),
  result?: [ 
    {
      categoryId?: string(name='CategoryId', example='80011'),
      categoryName?: string(name='CategoryName', example='儿童'),
    }
  ](name='Result'),
}

model ListSubscriptionAlbumCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubscriptionAlbumCategoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubscriptionAlbumCategory  ListSubscriptionAlbumCategoryRequest
  * @return ListSubscriptionAlbumCategoryResponse
 */
async function listSubscriptionAlbumCategory(request: ListSubscriptionAlbumCategoryRequest): ListSubscriptionAlbumCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSubscriptionAlbumCategory', 'POST', '/v1.0/ssp/listSubscriptionAlbumCategory', 'json', false, 'json', request);
}

model ListUserMessageRequest {
  beforeTime?: string(name='BeforeTime', example='2022-07-27 14:06:55.984', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
  limit?: int32(name='limit', example='10', position='Query'),
}

model ListUserMessageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  result?: [ 
    {
      content?: string(name='Content'),
      deviceName?: string(name='DeviceName'),
      gmtCreate?: string(name='GmtCreate', example='2022-07-27 14:06:27.000'),
      id?: string(name='Id', example='123456'),
      pic?: string(name='Pic', example='http://xx'),
      source?: string(name='Source', example='app'),
      sourceUuid?: string(name='SourceUuid', example='AF188**065EE4B**DD68CE**951D84D4'),
      status?: int32(name='Status', example='0'),
      type?: string(name='Type', example='audio'),
      url?: string(name='Url', example='http://xx'),
    }
  ](name='Result'),
}

model ListUserMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserMessage  ListUserMessageRequest
  * @return ListUserMessageResponse
 */
async function listUserMessage(request: ListUserMessageRequest): ListUserMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUserMessage', 'GET', '/v1.0/ssp/listUserMessage', 'json', false, 'json', request);
}

model MobileRecommendRequest {
  botId?: string(name='BotId', example='10', position='Query'),
  count?: string(name='Count', example='6', position='Query'),
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='1414895629783187053'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='fjwZiYQdtkaI95fHaLNjYcaOA/mxUPzxxw2J5iBiTBnjUCWKwER4TSHCqkBnNOYvGJ4bRZA9KzBB2naS4r/Am0lSe8ECDAAOcJ9QKLFF6DM='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  style?: string(name='Style', position='Query'),
  type?: string(name='Type', example='DAILY_REC', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='1414895629783187053'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='R457Av3qg/OXTwVnFt12z6MwNe0HAS699V6n63OaLdu+VmwvhcNfMzBd+la553wWJhj3kBMjgHq2Y2dyCFoDBg=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model MobileRecommendResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='5C5809B4-F465-52E0-9A8B-61396F9E593B'),
  result?: [ 
    {
      authors?: [ string ](name='Authors'),
      cover?: string(name='Cover', example='http://img4.kuwo.cn/star/albumcover/120/78/77/1688821132.jpg'),
      rawId?: string(name='RawId', example='550144364'),
      source?: string(name='Source', example='KG'),
      title?: string(name='Title'),
    }
  ](name='Result'),
}

model MobileRecommendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: MobileRecommendResponseBody(name='body'),
}

/**
  * @param request  the request parameters of MobileRecommend  MobileRecommendRequest
  * @return MobileRecommendResponse
 */
async function mobileRecommend(request: MobileRecommendRequest): MobileRecommendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MobileRecommend', 'POST', '/v1.0/ssp/mobile/recommend/music', 'json', false, 'json', request);
}

model PlayAndPauseControlRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openPlayAndPauseControlParam: {
    openPlayAndPauseCommand: string(name='OpenPlayAndPauseCommand', description='This parameter is required.', example='Play'),
  }(name='OpenPlayAndPauseControlParam', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model PlayAndPauseControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: boolean(name='Result', example='true'),
  success?: string(name='Success', example='true'),
}

model PlayAndPauseControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PlayAndPauseControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PlayAndPauseControl  PlayAndPauseControlRequest
  * @return PlayAndPauseControlResponse
 */
async function playAndPauseControl(request: PlayAndPauseControlRequest): PlayAndPauseControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PlayAndPauseControl', 'POST', '/v1.0/ssp/PlayAndPauseControl', 'json', true, 'form', request);
}

model PlayModeControlRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openPlayModeControlRequest: {
    openPlayMode: string(name='OpenPlayMode', description='This parameter is required.', example='Normal'),
  }(name='OpenPlayModeControlRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model PlayModeControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    openPlayMode?: string(name='OpenPlayMode', example='Normal'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model PlayModeControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PlayModeControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PlayModeControl  PlayModeControlRequest
  * @return PlayModeControlResponse
 */
async function playModeControl(request: PlayModeControlRequest): PlayModeControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PlayModeControl', 'POST', '/v1.0/ssp/PlayModeControl', 'json', true, 'form', request);
}

model PreviousAndNextControlRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openControlPlayingListRequest: {
    cmd: string(name='Cmd', description='This parameter is required.', example='NEXT'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    isFromDevice?: boolean(name='IsFromDevice', example='false'),
  }(name='OpenControlPlayingListRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model PreviousAndNextControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId', example='260744'),
    audioLength?: int32(name='AudioLength', example='190'),
    copyright?: int32(name='Copyright', example='0'),
    cover?: {
      canResize?: boolean(name='CanResize', example='false'),
      img?: string(name='Img', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      large?: string(name='Large', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      mediam?: string(name='Mediam', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      medium?: string(name='Medium', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
      small?: string(name='Small', example='http://imgopen.xmcdn.com/group58/M06/08/9B/wKgLglzTyTjiOy0oAAcOTv16ohg815.jpg!op_type=3&columns=640&rows=640'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder', example='1'),
    itemUrl?: string(name='ItemUrl', example='https://openaudio.cos.tx.xmcdn.com/storages/587f-audiofreehighqps/15/CE/GKwRIJIGnb11ABc6SwF59DNb.mp3'),
    liked?: boolean(name='Liked', example='false'),
    lyricUrl?: string(name='LyricUrl', example='https://aicontent.alibabausercontent.com/lyric/thirdsource/6f4c8408073db134b0d097c122b5a1a1.lrc'),
    playMode?: string(name='PlayMode', example='Repeat'),
    pos?: int32(name='Pos', example='0'),
    progress?: int32(name='Progress', example='0'),
    rawId?: string(name='RawId', example='550144364'),
    singer?: string(name='Singer'),
    source?: string(name='Source', example='ximalayav2'),
    title?: string(name='Title'),
    type?: string(name='Type', example='story'),
    valid?: string(name='Valid', example='VALID'),
  }(name='Result'),
  success?: string(name='Success', example='true'),
}

model PreviousAndNextControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PreviousAndNextControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PreviousAndNextControl  PreviousAndNextControlRequest
  * @return PreviousAndNextControlResponse
 */
async function previousAndNextControl(request: PreviousAndNextControlRequest): PreviousAndNextControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreviousAndNextControl', 'POST', '/v1.0/ssp/PreviousAndNextControl', 'json', true, 'form', request);
}

model ProgressControlRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  openProgressControlRequest: {
    extendInfo?: map[string]any(name='ExtendInfo'),
    progress: int32(name='Progress', description='This parameter is required.', example='12'),
  }(name='OpenProgressControlRequest', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='rV/XSgPuxZjx/hN3iw8U+e8ouRjKOX95tn1a0kwb2+Ao6Q1CAxASJUZDWtlk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ProgressControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='10002398812'),
  result?: boolean(name='Result', example='true'),
  success?: string(name='Success', example='true'),
}

model ProgressControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ProgressControlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ProgressControl  ProgressControlRequest
  * @return ProgressControlResponse
 */
async function progressControl(request: ProgressControlRequest): ProgressControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ProgressControl', 'POST', '/v1.0/ssp/ProgressControl', 'json', true, 'form', request);
}

model QueryMusicTypeRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload?: {
  }(name='Payload', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model QueryMusicTypeResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: [ 
    {
      musicType?: long(name='MusicType', example='1'),
      musicTypeName?: string(name='MusicTypeName', example='xx'),
    }
  ](name='Result'),
}

model QueryMusicTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMusicTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryMusicType  QueryMusicTypeRequest
  * @return QueryMusicTypeResponse
 */
async function queryMusicType(request: QueryMusicTypeRequest): QueryMusicTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryMusicType', 'POST', '/v1.0/ssp/queryMusicType', 'json', true, 'form', request);
}

model QueryUserDeviceListByTmeUserIdRequest {
  sp: string(name='Sp', description='This parameter is required.', position='Query'),
  tmeUserId: string(name='TmeUserId', description='This parameter is required.', position='Query'),
}

model QueryUserDeviceListByTmeUserIdResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    aligenieUserInfoList?: [ 
      {
        authorizedDeviceList?: [ 
          {
            deviceName?: string(name='DeviceName'),
            online?: boolean(name='Online', example='true'),
            openDeviceId?: string(name='OpenDeviceId'),
            tmeDeviceId?: string(name='TmeDeviceId'),
            tmeProductId?: string(name='TmeProductId'),
          }
        ](name='AuthorizedDeviceList'),
        openUserId?: string(name='OpenUserId'),
        userNickname?: string(name='UserNickname'),
      }
    ](name='AligenieUserInfoList'),
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    sp?: string(name='Sp'),
  }(name='Result'),
  success?: boolean(name='Success'),
}

model QueryUserDeviceListByTmeUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserDeviceListByTmeUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserDeviceListByTmeUserId  QueryUserDeviceListByTmeUserIdRequest
  * @return QueryUserDeviceListByTmeUserIdResponse
 */
async function queryUserDeviceListByTmeUserId(request: QueryUserDeviceListByTmeUserIdRequest): QueryUserDeviceListByTmeUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryUserDeviceListByTmeUserId', 'GET', '/v1.0/ssp/queryUserDeviceListByTmeUserId', 'json', false, 'json', request);
}

model ReadMessageRequest {
  messageId?: long(name='MessageId', example='12345', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123L'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ReadMessageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  result?: boolean(name='Result', example='true'),
}

model ReadMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessage  ReadMessageRequest
  * @return ReadMessageResponse
 */
async function readMessage(request: ReadMessageRequest): ReadMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReadMessage', 'GET', '/v1.0/ssp/readMessage', 'json', false, 'json', request);
}

model ScanCodeBindRequest {
  bindReq: {
    clientId: string(name='ClientId', description='This parameter is required.', example='RnY8v0W0ZVn58ZrUAOr2RD'),
    code: string(name='Code', description='authCode

This parameter is required.', example='ASdfre'),
    extInfo?: string(name='ExtInfo', example='{"key":"value"}'),
  }(name='BindReq', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='129****0946'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='111'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model ScanCodeBindResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='686DF82F-45C4-7DF7-8B67-27B91CFD63A9'),
  result?: {
    bizGroup?: string(name='BizGroup', example='X1'),
    bizType?: string(name='BizType', example='AILABS'),
    deviceOpenId?: string(name='DeviceOpenId', description='A963*0158', example='设备OpenId'),
    userOpenId?: string(name='UserOpenId', description='DAFE****ce3ej=', example='用户opneId'),
  }(name='Result'),
}

model ScanCodeBindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScanCodeBindResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ScanCodeBind  ScanCodeBindRequest
  * @return ScanCodeBindResponse
 */
async function scanCodeBind(request: ScanCodeBindRequest): ScanCodeBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScanCodeBind', 'POST', '/v1.0/ssp/scanCode', 'json', true, 'form', request);
}

model ScgSearchRequest {
  scgFilter: {
    offSetParam?: {
      limit?: int32(name='Limit', example='20'),
      offset?: int32(name='Offset', example='10'),
    }(name='OffSetParam'),
    pageParam?: {
      pageNum?: int32(name='PageNum', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
    }(name='PageParam'),
    sortParam: {
      sortKey?: string(name='SortKey', example='internal_id'),
      sortOrder?: string(name='SortOrder', example='ASC'),
      sortText?: string(name='SortText', example='“”'),
    }(name='SortParam', description='This parameter is required.'),
    useOffSet: boolean(name='UseOffSet', description='This parameter is required.', example='true'),
  }(name='ScgFilter', description='This parameter is required.', shrink='json', position='Query'),
  topicId: string(name='TopicId', description='This parameter is required.', example='MC201132', position='Query'),
}

model ScgSearchResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: [ 
    {
      album?: boolean(name='Album', example='false'),
      albumRawId?: string(name='AlbumRawId', example='1795716629'),
      albumType?: int32(name='AlbumType', example='0'),
      alias?: [ string ](name='Alias'),
      authorIds?: [ long ](name='AuthorIds'),
      authorNames?: [ string ](name='AuthorNames'),
      category?: string(name='Category', example='audio'),
      contentType?: string(name='ContentType', example='MUSIC_CONTENT'),
      cover?: {
        img?: string(name='Img', example='http://img.xiami.net/images/album/img59/56/58da2153e3133_2826959_1490690387.jpg'),
        large?: string(name='Large', example='http://img.xiami.net/images/album/img59/56/58da2153e3133_2826959_1490690387.jpg'),
        medium?: string(name='Medium', example='http://img.xiami.net/images/album/img59/56/58da2153e3133_2826959_1490690387.jpg'),
        small?: string(name='Small', example='http://img.xiami.net/images/album/img59/56/58da2153e3133_2826959_1490690387.jpg'),
        canResize?: boolean(name='canResize', example='false'),
      }(name='Cover'),
      isAudition?: boolean(name='IsAudition', example='false'),
      isCharge?: string(name='IsCharge', example='false'),
      needCharge?: boolean(name='NeedCharge', example='false'),
      rawId?: string(name='RawId', example='1795716629'),
      singers?: string(name='Singers'),
      source?: string(name='Source', example='xiami'),
      supportAudition?: boolean(name='SupportAudition', example='false'),
      title?: string(name='Title'),
      type?: string(name='Type', example='music'),
    }
  ](name='Result'),
}

model ScgSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ScgSearchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ScgSearch  ScgSearchRequest
  * @return ScgSearchResponse
 */
async function scgSearch(request: ScgSearchRequest): ScgSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ScgSearch', 'POST', '/v1.0/ssp/scgSearch', 'json', false, 'json', request);
}

model SearchContentRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  request: {
    cate?: string(name='Cate', example='music'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    query?: string(name='Query'),
    queryAlbum?: boolean(name='QueryAlbum', example='false'),
    subCate?: string(name='SubCate', example='singer'),
  }(name='Request', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model SearchContentResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='Id of the request', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
  result?: [ 
    {
      albumId?: string(name='AlbumId', example='13123'),
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition', example='false'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize', example='false'),
            img?: string(name='Img', example='https://a.jpg'),
            large?: string(name='Large', example='https://a.jpg'),
            medium?: string(name='Medium', example='https://a.jpg'),
            small?: string(name='Small', example='https://a.jpg'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender', example='MALE'),
          id?: long(name='Id', example='13597709'),
          online?: boolean(name='Online', example='true'),
          rawId?: string(name='RawId', example='123123'),
          source?: string(name='Source', example='qingting'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category', example='audio'),
      charge?: boolean(name='Charge', example='fasle'),
      commCateId?: long(name='CommCateId', example='80012017'),
      cover?: {
        canResize?: boolean(name='CanResize', example='false'),
        img?: string(name='Img', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        large?: string(name='Large', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        mediam?: string(name='Mediam', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        medium?: string(name='Medium', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
        small?: string(name='Small', example='http://pic.qtfm.cn/2017/0207/2017020718285.jpg'),
      }(name='Cover'),
      description?: string(name='Description'),
      duration?: long(name='Duration', example='180'),
      hotScore?: double(name='HotScore', example='10'),
      id?: long(name='Id', example='13597709'),
      itemType?: string(name='ItemType', example='ALBUM'),
      lyric?: string(name='Lyric', example='http://a1231.lrc'),
      orderIndex?: string(name='OrderIndex', example='1'),
      source?: string(name='Source', example='qingting'),
      styles?: [ string ](name='Styles'),
      title?: string(name='Title'),
      type?: string(name='Type', example='program'),
      valid?: string(name='Valid', example='VALID'),
    }
  ](name='Result'),
}

model SearchContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchContent  SearchContentRequest
  * @return SearchContentResponse
 */
async function searchContent(request: SearchContentRequest): SearchContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchContent', 'POST', '/v1.0/ssp/SearchContent', 'json', true, 'form', request);
}

model SendMessageRequest {
  url?: string(name='Url', example='http://xx', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123L'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123L'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model SendMessageResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message'),
  result?: boolean(name='Result', example='true'),
}

model SendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SendMessage  SendMessageRequest
  * @return SendMessageResponse
 */
async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendMessage', 'POST', '/v1.0/ssp/sendMessage', 'json', false, 'json', request);
}

model SetDeviceSettingRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='123'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='123'),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  key: string(name='Key', description='This parameter is required.', example='nightMode', position='Body'),
  value?: any(name='Value', example='{"enable":true}', position='Body'),
}

model SetDeviceSettingResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result'),
}

model SetDeviceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDeviceSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDeviceSetting  SetDeviceSettingRequest
  * @return SetDeviceSettingResponse
 */
async function setDeviceSetting(request: SetDeviceSettingRequest): SetDeviceSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SetDeviceSetting', 'POST', '/v1.0/ssp/setDeviceSetting', 'json', true, 'form', request);
}

model ThirdImmediateMsgPushRequest {
  bizType?: string(name='BizType', example='FLIGHT', position='Query'),
  changeDetail?: string(name='ChangeDetail', example='changeDetail', position='Query'),
  orderId?: string(name='OrderId', example='orderId', position='Query'),
  psgIds?: string(name='PsgIds', example='psgIds', position='Query'),
  source?: string(name='Source', example='source', position='Query'),
  trafficChangeType?: string(name='TrafficChangeType', example='trafficChangeType', position='Query'),
  trafficChangeTypeDesc?: string(name='TrafficChangeTypeDesc', example='trafficChangeTypeDesc', position='Query'),
  trafficJourneyIds?: string(name='TrafficJourneyIds', example='trafficJourneyIds', position='Query'),
  trafficSubOrderIds?: string(name='TrafficSubOrderIds', example='trafficSubOrderIds', position='Query'),
  userId?: string(name='UserId', example='userId', position='Query'),
}

model ThirdImmediateMsgPushResponseBody = {
  errorCode?: string(name='ErrorCode', example='500000000'),
  errorMsg?: string(name='ErrorMsg', example='服务器内部异常'),
  model?: {
    requestId?: string(name='RequestId', example='2DF6FEFE-3301-16DD-ABCC-968A9524920B'),
    success?: boolean(name='Success'),
  }(name='Model'),
  success?: boolean(name='Success'),
}

model ThirdImmediateMsgPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ThirdImmediateMsgPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ThirdImmediateMsgPush  ThirdImmediateMsgPushRequest
  * @return ThirdImmediateMsgPushResponse
 */
async function thirdImmediateMsgPush(request: ThirdImmediateMsgPushRequest): ThirdImmediateMsgPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ThirdImmediateMsgPush', 'POST', '/v1.0/ssp/thirdImmediateMsgPush', 'json', false, 'json', request);
}

model UnbindAligenieUserRequest {
  loginStateAccessToken: string(name='LoginStateAccessToken', description='This parameter is required.', example='99ce8a70c23a94f8569e1a525bef6e85', position='Body'),
}

model UnbindAligenieUserResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='OK'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  success?: boolean(name='Success'),
}

model UnbindAligenieUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindAligenieUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindAligenieUser  UnbindAligenieUserRequest
  * @return UnbindAligenieUserResponse
 */
async function unbindAligenieUser(request: UnbindAligenieUserRequest): UnbindAligenieUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnbindAligenieUser', 'POST', '/v1.0/ssp/unbindAligenieUser', 'json', true, 'form', request);
}

model UnbindDeviceRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PROJECT_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model UnbindDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
}

model UnbindDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnbindDeviceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnbindDevice  UnbindDeviceRequest
  * @return UnbindDeviceResponse
 */
async function unbindDevice(request: UnbindDeviceRequest): UnbindDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnbindDevice', 'POST', '/v1.0/ssp/unbindDevice', 'json', true, 'form', request);
}

model UpdateAlarmRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    alarmId: long(name='AlarmId', description='This parameter is required.', example='1234567'),
    musicInfo: {
      musicId: long(name='MusicId', description='This parameter is required.', example='2'),
      musicName: string(name='MusicName', description='This parameter is required.'),
      musicType: long(name='MusicType', description='This parameter is required.', example='12'),
      musicTypeName: string(name='MusicTypeName', description='This parameter is required.'),
      musicUrl?: string(name='MusicUrl', example='http://music-url.mp3'),
    }(name='MusicInfo', description='This parameter is required.'),
    scheduleInfo: {
      once?: {
        day?: int32(name='Day', example='1'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
        month?: int32(name='Month', example='8'),
        year?: int32(name='Year', example='2022'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='StatutoryWorkingDay'),
      type: string(name='Type', description='This parameter is required.', example='WEEKLY'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour', example='10'),
        minute?: int32(name='Minute', example='0'),
      }(name='Weekly'),
    }(name='ScheduleInfo', description='This parameter is required.'),
    volume?: int32(name='Volume', example='40'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateAlarmResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: boolean(name='Result', example='true'),
}

model UpdateAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAlarmResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateAlarm  UpdateAlarmRequest
  * @return UpdateAlarmResponse
 */
async function updateAlarm(request: UpdateAlarmRequest): UpdateAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAlarm', 'POST', '/v1.0/ssp/updateAlarm', 'json', true, 'form', request);
}

model ResultValue = {
  deviceOpenId?: string(name='DeviceOpenId', example='A963*0158'),
  deviceUnionIds?: [ 
    {
      organizationId?: string(name='OrganizationId', example='1**2'),
      deviceUnionId?: string(name='DeviceUnionId', example='1553*B0C3'),
    }
  ](name='DeviceUnionIds'),
  name?: string(name='Name', example='我的设备'),
  firmwareVersion?: string(name='FirmwareVersion', example='2.0.3'),
  mac?: string(name='Mac', example='b4:xx:xx:xx:65:2b'),
  sn?: string(name='Sn', example='1200xx048'),
}

