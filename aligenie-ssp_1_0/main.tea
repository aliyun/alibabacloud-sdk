/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model GetDeviceIdByIdentityHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceIdByIdentityRequest {
  identityType?: string(name='IdentityType', description='认证类型，MAC/SN'),
  encodeType?: string(name='EncodeType', description='编码类型'),
  identityId?: string(name='IdentityId', description='认证标识，具体的MAC地址或者SN号'),
  productKey?: string(name='ProductKey', description='产品productKey'),
  encodeKey?: string(name='EncodeKey', description='编码Key'),
}

model GetDeviceIdByIdentityResponseBody = {
  message?: string(name='Message', description='message'),
  code?: int32(name='Code', description='code'),
  result?: string(name='Result', description='result'),
  requestId?: string(name='RequestId'),
}

model GetDeviceIdByIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceIdByIdentityResponseBody(name='body'),
}

async function getDeviceIdByIdentity(request: GetDeviceIdByIdentityRequest): GetDeviceIdByIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceIdByIdentityHeaders{};
  return getDeviceIdByIdentityWithOptions(request, headers, runtime);
}

async function getDeviceIdByIdentityWithOptions(request: GetDeviceIdByIdentityRequest, headers: GetDeviceIdByIdentityHeaders, runtime: Util.RuntimeOptions): GetDeviceIdByIdentityResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.identityType)) {
    query.IdentityType = request.identityType;
  }
  if (!Util.isUnset(request.encodeType)) {
    query.EncodeType = request.encodeType;
  }
  if (!Util.isUnset(request.identityId)) {
    query.IdentityId = request.identityId;
  }
  if (!Util.isUnset(request.productKey)) {
    query.ProductKey = request.productKey;
  }
  if (!Util.isUnset(request.encodeKey)) {
    query.EncodeKey = request.encodeKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders.x-acs-aligenie-access-token = headers.xAcsAligenieAccessToken;
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders.Authorization = headers.authorization;
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('GetDeviceIdByIdentity', 'ssp_1.0', 'HTTPS', 'GET', 'AK', `/getDeviceIdByIdentity`, 'json', req, runtime);
}

