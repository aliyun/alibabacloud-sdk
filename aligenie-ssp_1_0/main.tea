/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAndRemoveFavoriteContentHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddAndRemoveFavoriteContentRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openAddAndRemoveFavoriteContentRequest?: {
    favoriteCmd?: string(name='FavoriteCmd'),
    openSourceRawIdPair?: {
      extendInfo?: map[string]any(name='ExtendInfo'),
      rawId?: string(name='RawId'),
      source?: string(name='Source'),
    }(name='OpenSourceRawIdPair'),
    packageType?: string(name='PackageType'),
  }(name='OpenAddAndRemoveFavoriteContentRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model AddAndRemoveFavoriteContentShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openAddAndRemoveFavoriteContentRequestShrink?: string(name='OpenAddAndRemoveFavoriteContentRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model AddAndRemoveFavoriteContentResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: string(name='Success'),
}

model AddAndRemoveFavoriteContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAndRemoveFavoriteContentResponseBody(name='body'),
}

async function addAndRemoveFavoriteContent(request: AddAndRemoveFavoriteContentRequest): AddAndRemoveFavoriteContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddAndRemoveFavoriteContentHeaders{};
  return addAndRemoveFavoriteContentWithOptions(request, headers, runtime);
}

async function addAndRemoveFavoriteContentWithOptions(tmpReq: AddAndRemoveFavoriteContentRequest, headers: AddAndRemoveFavoriteContentHeaders, runtime: Util.RuntimeOptions): AddAndRemoveFavoriteContentResponse {
  Util.validateModel(tmpReq);
  var request = new AddAndRemoveFavoriteContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openAddAndRemoveFavoriteContentRequest)) {
    request.openAddAndRemoveFavoriteContentRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openAddAndRemoveFavoriteContentRequest, 'OpenAddAndRemoveFavoriteContentRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openAddAndRemoveFavoriteContentRequestShrink)) {
    body['OpenAddAndRemoveFavoriteContentRequest'] = request.openAddAndRemoveFavoriteContentRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddAndRemoveFavoriteContent',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/AddAndRemoveFavoriteContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddSubHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddSubRequest {
  addSubscriptionInfoRequest?: {
    albumId?: string(name='AlbumId'),
    dailyStudyCnt?: int32(name='DailyStudyCnt'),
    playMode?: string(name='PlayMode'),
    scheduleInfo?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='ScheduleInfo'),
  }(name='AddSubscriptionInfoRequest'),
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model AddSubShrinkRequest {
  addSubscriptionInfoRequestShrink?: string(name='AddSubscriptionInfoRequest'),
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model AddSubResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumId?: string(name='AlbumId'),
    dailyStudyCnt?: int32(name='DailyStudyCnt'),
    deviceId?: string(name='DeviceId'),
    id?: long(name='Id'),
    playMode?: string(name='PlayMode'),
    scheduleInfo?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='ScheduleInfo'),
    userId?: string(name='UserId'),
  }(name='Result'),
}

model AddSubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSubResponseBody(name='body'),
}

async function addSub(request: AddSubRequest): AddSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddSubHeaders{};
  return addSubWithOptions(request, headers, runtime);
}

async function addSubWithOptions(tmpReq: AddSubRequest, headers: AddSubHeaders, runtime: Util.RuntimeOptions): AddSubResponse {
  Util.validateModel(tmpReq);
  var request = new AddSubShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addSubscriptionInfoRequest)) {
    request.addSubscriptionInfoRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addSubscriptionInfoRequest, 'AddSubscriptionInfoRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.addSubscriptionInfoRequestShrink)) {
    query['AddSubscriptionInfoRequest'] = request.addSubscriptionInfoRequestShrink;
  }
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSub',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/addSub`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CheckAuthCodeBindForExtHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CheckAuthCodeBindForExtRequest {
  authCode?: string(name='AuthCode'),
  encodeKey?: string(name='EncodeKey'),
  encodeType?: string(name='EncodeType'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model CheckAuthCodeBindForExtShrinkRequest {
  authCode?: string(name='AuthCode'),
  encodeKey?: string(name='EncodeKey'),
  encodeType?: string(name='EncodeType'),
  userInfoShrink?: string(name='UserInfo'),
}

model CheckAuthCodeBindForExtResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    deviceOpenInfo?: {
      id?: string(name='Id'),
      idType?: string(name='IdType'),
    }(name='DeviceOpenInfo'),
    userOpenInfo?: {
      id?: string(name='Id'),
      idType?: string(name='IdType'),
    }(name='UserOpenInfo'),
  }(name='Result'),
}

model CheckAuthCodeBindForExtResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckAuthCodeBindForExtResponseBody(name='body'),
}

async function checkAuthCodeBindForExt(request: CheckAuthCodeBindForExtRequest): CheckAuthCodeBindForExtResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CheckAuthCodeBindForExtHeaders{};
  return checkAuthCodeBindForExtWithOptions(request, headers, runtime);
}

async function checkAuthCodeBindForExtWithOptions(tmpReq: CheckAuthCodeBindForExtRequest, headers: CheckAuthCodeBindForExtHeaders, runtime: Util.RuntimeOptions): CheckAuthCodeBindForExtResponse {
  Util.validateModel(tmpReq);
  var request = new CheckAuthCodeBindForExtShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.authCode)) {
    query['AuthCode'] = request.authCode;
  }
  if (!Util.isUnset(request.encodeKey)) {
    query['EncodeKey'] = request.encodeKey;
  }
  if (!Util.isUnset(request.encodeType)) {
    query['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckAuthCodeBindForExt',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/checkAuthCodeBindForExt`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateAlarmRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    musicInfo?: {
      musicId?: long(name='MusicId'),
      musicName?: string(name='MusicName'),
      musicType?: long(name='MusicType'),
      musicTypeName?: string(name='MusicTypeName'),
      musicUrl?: string(name='MusicUrl'),
    }(name='MusicInfo'),
    scheduleInfo?: {
      once?: {
        day?: int32(name='Day'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
        month?: int32(name='Month'),
        year?: int32(name='Year'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='StatutoryWorkingDay'),
      type?: string(name='Type'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='Weekly'),
    }(name='ScheduleInfo'),
    volume?: int32(name='Volume'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model CreateAlarmShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model CreateAlarmResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model CreateAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAlarmResponseBody(name='body'),
}

async function createAlarm(request: CreateAlarmRequest): CreateAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateAlarmHeaders{};
  return createAlarmWithOptions(request, headers, runtime);
}

async function createAlarmWithOptions(tmpReq: CreateAlarmRequest, headers: CreateAlarmHeaders, runtime: Util.RuntimeOptions): CreateAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAlarm',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/createAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreatePlayingListHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreatePlayingListRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openCreatePlayingListRequest?: {
    contentList?: [ 
      {
        rawId?: string(name='RawId'),
        source?: string(name='Source'),
      }
    ](name='ContentList'),
    contentType?: string(name='ContentType'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    index?: int32(name='Index'),
    needAlbumContinued?: boolean(name='NeedAlbumContinued'),
    playFrom?: string(name='PlayFrom'),
    playMode?: string(name='PlayMode'),
  }(name='OpenCreatePlayingListRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model CreatePlayingListShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openCreatePlayingListRequestShrink?: string(name='OpenCreatePlayingListRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model CreatePlayingListResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId'),
    audioLength?: int32(name='AudioLength'),
    copyright?: int32(name='Copyright'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      mediam?: string(name='Mediam'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder'),
    itemUrl?: string(name='ItemUrl'),
    liked?: boolean(name='Liked'),
    lyricUrl?: string(name='LyricUrl'),
    playMode?: string(name='PlayMode'),
    pos?: int32(name='Pos'),
    progress?: int32(name='Progress'),
    rawId?: string(name='RawId'),
    singer?: string(name='Singer'),
    source?: string(name='Source'),
    title?: string(name='Title'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
  success?: string(name='Success'),
}

model CreatePlayingListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePlayingListResponseBody(name='body'),
}

async function createPlayingList(request: CreatePlayingListRequest): CreatePlayingListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreatePlayingListHeaders{};
  return createPlayingListWithOptions(request, headers, runtime);
}

async function createPlayingListWithOptions(tmpReq: CreatePlayingListRequest, headers: CreatePlayingListHeaders, runtime: Util.RuntimeOptions): CreatePlayingListResponse {
  Util.validateModel(tmpReq);
  var request = new CreatePlayingListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openCreatePlayingListRequest)) {
    request.openCreatePlayingListRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openCreatePlayingListRequest, 'OpenCreatePlayingListRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openCreatePlayingListRequestShrink)) {
    body['OpenCreatePlayingListRequest'] = request.openCreatePlayingListRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePlayingList',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/CreatePlayingList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateScheduleTaskHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateScheduleTaskRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    actionDTOs?: [ 
      {
        customAction?: map[string]any(name='customAction'),
      }
    ](name='ActionDTOs'),
    idempotentId?: string(name='IdempotentId'),
    scheduleDTO?: {
      once?: {
        day?: int32(name='Day'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
        month?: int32(name='Month'),
        year?: int32(name='Year'),
      }(name='Once'),
      scheduleEndTime?: long(name='ScheduleEndTime'),
      scheduleStartTime?: long(name='ScheduleStartTime'),
      scheduleType?: string(name='ScheduleType'),
      statutoryWorkingDay?: {
        hours?: [ int32 ](name='Hours'),
        minutes?: [ int32 ](name='Minutes'),
      }(name='StatutoryWorkingDay'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hours?: [ int32 ](name='Hours'),
        minutes?: [ int32 ](name='Minutes'),
      }(name='Weekly'),
    }(name='ScheduleDTO'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model CreateScheduleTaskShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model CreateScheduleTaskResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model CreateScheduleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateScheduleTaskResponseBody(name='body'),
}

async function createScheduleTask(request: CreateScheduleTaskRequest): CreateScheduleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateScheduleTaskHeaders{};
  return createScheduleTaskWithOptions(request, headers, runtime);
}

async function createScheduleTaskWithOptions(tmpReq: CreateScheduleTaskRequest, headers: CreateScheduleTaskHeaders, runtime: Util.RuntimeOptions): CreateScheduleTaskResponse {
  Util.validateModel(tmpReq);
  var request = new CreateScheduleTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateScheduleTask',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/CreateScheduleTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteAlarmsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteAlarmsRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    alarmIds?: [ long ](name='AlarmIds'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model DeleteAlarmsShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeleteAlarmsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteAlarmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAlarmsResponseBody(name='body'),
}

async function deleteAlarms(request: DeleteAlarmsRequest): DeleteAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteAlarmsHeaders{};
  return deleteAlarmsWithOptions(request, headers, runtime);
}

async function deleteAlarmsWithOptions(tmpReq: DeleteAlarmsRequest, headers: DeleteAlarmsHeaders, runtime: Util.RuntimeOptions): DeleteAlarmsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteAlarmsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAlarms',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/deleteAlarms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteScheduleTaskHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteScheduleTaskRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    id?: long(name='Id'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model DeleteScheduleTaskShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeleteScheduleTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteScheduleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteScheduleTaskResponseBody(name='body'),
}

async function deleteScheduleTask(request: DeleteScheduleTaskRequest): DeleteScheduleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteScheduleTaskHeaders{};
  return deleteScheduleTaskWithOptions(request, headers, runtime);
}

async function deleteScheduleTaskWithOptions(tmpReq: DeleteScheduleTaskRequest, headers: DeleteScheduleTaskHeaders, runtime: Util.RuntimeOptions): DeleteScheduleTaskResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteScheduleTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteScheduleTask',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/DeleteScheduleTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteSubHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteSubRequest {
  subId?: long(name='SubId'),
}

model DeleteSubResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteSubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteSubResponseBody(name='body'),
}

async function deleteSub(request: DeleteSubRequest): DeleteSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteSubHeaders{};
  return deleteSubWithOptions(request, headers, runtime);
}

async function deleteSubWithOptions(request: DeleteSubRequest, headers: DeleteSubHeaders, runtime: Util.RuntimeOptions): DeleteSubResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.subId)) {
    query['SubId'] = request.subId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSub',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/deleteSub`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeviceControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeviceControlRequest {
  controlRequest?: {
    muted?: boolean(name='Muted'),
    volume?: int32(name='Volume'),
  }(name='ControlRequest'),
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
}

model DeviceControlShrinkRequest {
  controlRequestShrink?: string(name='ControlRequest'),
  deviceInfoShrink?: string(name='DeviceInfo'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeviceControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeviceControlResponseBody(name='body'),
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeviceControlHeaders{};
  return deviceControlWithOptions(request, headers, runtime);
}

async function deviceControlWithOptions(tmpReq: DeviceControlRequest, headers: DeviceControlHeaders, runtime: Util.RuntimeOptions): DeviceControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeviceControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.controlRequest)) {
    request.controlRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.controlRequest, 'ControlRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.controlRequestShrink)) {
    body['ControlRequest'] = request.controlRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeviceControl',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/control`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetAlarmRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    alarmId?: long(name='AlarmId'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetAlarmShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetAlarmResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    alarmId?: long(name='AlarmId'),
    musicInfo?: {
      musicId?: long(name='MusicId'),
      musicName?: string(name='MusicName'),
      musicType?: long(name='MusicType'),
      musicTypeName?: string(name='MusicTypeName'),
      musicUrl?: string(name='MusicUrl'),
    }(name='MusicInfo'),
    scheduleInfo?: {
      once?: {
        day?: int32(name='Day'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
        month?: int32(name='Month'),
        year?: int32(name='Year'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='StatutoryWorkingDay'),
      type?: string(name='Type'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='Weekly'),
    }(name='ScheduleInfo'),
    scheduleTypeDesc?: string(name='ScheduleTypeDesc'),
    status?: int32(name='Status'),
    triggerDateDesc?: string(name='TriggerDateDesc'),
    triggerTimeDesc?: string(name='TriggerTimeDesc'),
    userId?: long(name='UserId'),
    uuid?: string(name='Uuid'),
    volume?: int32(name='Volume'),
  }(name='Result'),
}

model GetAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlarmResponseBody(name='body'),
}

async function getAlarm(request: GetAlarmRequest): GetAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAlarmHeaders{};
  return getAlarmWithOptions(request, headers, runtime);
}

async function getAlarmWithOptions(tmpReq: GetAlarmRequest, headers: GetAlarmHeaders, runtime: Util.RuntimeOptions): GetAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new GetAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetAlarm',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAlbumHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetAlbumRequest {
  id?: long(name='Id'),
  type?: string(name='Type'),
}

model GetAlbumResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
  result?: {
    alias?: [ string ](name='Alias'),
    audition?: boolean(name='Audition'),
    authors?: [ 
      {
        authorTypes?: [ string ](name='AuthorTypes'),
        gender?: string(name='Gender'),
        id?: long(name='Id'),
        online?: boolean(name='Online'),
        source?: string(name='Source'),
        title?: string(name='Title'),
      }
    ](name='Authors'),
    category?: string(name='Category'),
    charge?: boolean(name='Charge'),
    commCateId?: long(name='CommCateId'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    description?: string(name='Description'),
    finished?: string(name='Finished'),
    hotScore?: double(name='HotScore'),
    id?: long(name='Id'),
    itemType?: string(name='ItemType'),
    rawId?: string(name='RawId'),
    source?: string(name='Source'),
    title?: string(name='Title'),
    totalEpisode?: int32(name='TotalEpisode'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
}

model GetAlbumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlbumResponseBody(name='body'),
}

async function getAlbum(request: GetAlbumRequest): GetAlbumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAlbumHeaders{};
  return getAlbumWithOptions(request, headers, runtime);
}

async function getAlbumWithOptions(request: GetAlbumRequest, headers: GetAlbumHeaders, runtime: Util.RuntimeOptions): GetAlbumResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlbum',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetAlbum`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAlbumDetailByIdHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetAlbumDetailByIdRequest {
  albumId?: string(name='AlbumId'),
}

model GetAlbumDetailByIdResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumContentList?: [ 
      {
        duration?: string(name='Duration'),
        id?: string(name='Id'),
        orderIndex?: string(name='OrderIndex'),
        title?: string(name='Title'),
      }
    ](name='AlbumContentList'),
    albumCoverUrl?: string(name='AlbumCoverUrl'),
    albumDescription?: string(name='AlbumDescription'),
    albumId?: string(name='AlbumId'),
    albumTitle?: string(name='AlbumTitle'),
  }(name='Result'),
}

model GetAlbumDetailByIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAlbumDetailByIdResponseBody(name='body'),
}

async function getAlbumDetailById(request: GetAlbumDetailByIdRequest): GetAlbumDetailByIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAlbumDetailByIdHeaders{};
  return getAlbumDetailByIdWithOptions(request, headers, runtime);
}

async function getAlbumDetailByIdWithOptions(request: GetAlbumDetailByIdRequest, headers: GetAlbumDetailByIdHeaders, runtime: Util.RuntimeOptions): GetAlbumDetailByIdResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.albumId)) {
    query['AlbumId'] = request.albumId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAlbumDetailById',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getAlbumDetailById`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCodeEnhanceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetCodeEnhanceRequest {
  channelInfo?: {
    channel?: string(name='Channel'),
    extInfo?: string(name='ExtInfo'),
  }(name='ChannelInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetCodeEnhanceShrinkRequest {
  channelInfoShrink?: string(name='ChannelInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetCodeEnhanceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model GetCodeEnhanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCodeEnhanceResponseBody(name='body'),
}

async function getCodeEnhance(request: GetCodeEnhanceRequest): GetCodeEnhanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCodeEnhanceHeaders{};
  return getCodeEnhanceWithOptions(request, headers, runtime);
}

async function getCodeEnhanceWithOptions(tmpReq: GetCodeEnhanceRequest, headers: GetCodeEnhanceHeaders, runtime: Util.RuntimeOptions): GetCodeEnhanceResponse {
  Util.validateModel(tmpReq);
  var request = new GetCodeEnhanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.channelInfo)) {
    request.channelInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.channelInfo, 'ChannelInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.channelInfoShrink)) {
    query['ChannelInfo'] = request.channelInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCodeEnhance',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getCodeEnhance`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetContentHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetContentRequest {
  id?: long(name='Id'),
  type?: string(name='Type'),
}

model GetContentResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumId?: string(name='AlbumId'),
    alias?: [ string ](name='Alias'),
    audition?: boolean(name='Audition'),
    authors?: [ 
      {
        authorTypes?: [ string ](name='AuthorTypes'),
        gender?: string(name='Gender'),
        id?: long(name='Id'),
        online?: boolean(name='Online'),
        source?: string(name='Source'),
        title?: string(name='Title'),
      }
    ](name='Authors'),
    category?: string(name='Category'),
    charge?: boolean(name='Charge'),
    commCateId?: long(name='CommCateId'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    description?: string(name='Description'),
    duration?: long(name='Duration'),
    hotScore?: double(name='HotScore'),
    id?: long(name='Id'),
    itemType?: string(name='ItemType'),
    lyric?: string(name='Lyric'),
    source?: string(name='Source'),
    styles?: [ string ](name='Styles'),
    title?: string(name='Title'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
}

model GetContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetContentResponseBody(name='body'),
}

async function getContent(request: GetContentRequest): GetContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetContentHeaders{};
  return getContentWithOptions(request, headers, runtime);
}

async function getContentWithOptions(request: GetContentRequest, headers: GetContentHeaders, runtime: Util.RuntimeOptions): GetContentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetContent',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCurrentPlayingItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetCurrentPlayingItemRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetCurrentPlayingItemShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetCurrentPlayingItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId'),
    audioLength?: int32(name='AudioLength'),
    copyright?: int32(name='Copyright'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      mediam?: string(name='Mediam'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder'),
    itemUrl?: string(name='ItemUrl'),
    liked?: string(name='Liked'),
    lyricUrl?: string(name='LyricUrl'),
    playMode?: string(name='PlayMode'),
    pos?: int32(name='Pos'),
    progress?: int32(name='Progress'),
    rawId?: string(name='RawId'),
    singer?: string(name='Singer'),
    source?: string(name='Source'),
    title?: string(name='Title'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
  success?: string(name='Success'),
}

model GetCurrentPlayingItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCurrentPlayingItemResponseBody(name='body'),
}

async function getCurrentPlayingItem(request: GetCurrentPlayingItemRequest): GetCurrentPlayingItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCurrentPlayingItemHeaders{};
  return getCurrentPlayingItemWithOptions(request, headers, runtime);
}

async function getCurrentPlayingItemWithOptions(tmpReq: GetCurrentPlayingItemRequest, headers: GetCurrentPlayingItemHeaders, runtime: Util.RuntimeOptions): GetCurrentPlayingItemResponse {
  Util.validateModel(tmpReq);
  var request = new GetCurrentPlayingItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCurrentPlayingItem',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetCurrentPlayingItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetCurrentPlayingListHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetCurrentPlayingListRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openQueryPlayListRequest?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
  }(name='OpenQueryPlayListRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetCurrentPlayingListShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openQueryPlayListRequestShrink?: string(name='OpenQueryPlayListRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetCurrentPlayingListResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      albumName?: string(name='AlbumName'),
      albumRawId?: string(name='AlbumRawId'),
      audioLength?: int32(name='AudioLength'),
      copyright?: int32(name='Copyright'),
      cover?: {
        canResize?: boolean(name='CanResize'),
        img?: string(name='Img'),
        large?: string(name='Large'),
        mediam?: string(name='Mediam'),
        medium?: string(name='Medium'),
        small?: string(name='Small'),
      }(name='Cover'),
      defaultPlayOrder?: int32(name='DefaultPlayOrder'),
      itemUrl?: string(name='ItemUrl'),
      liked?: boolean(name='Liked'),
      lyricUrl?: string(name='LyricUrl'),
      playMode?: string(name='PlayMode'),
      pos?: int32(name='Pos'),
      progress?: int32(name='Progress'),
      rawId?: string(name='RawId'),
      singer?: string(name='Singer'),
      source?: string(name='Source'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      valid?: string(name='Valid'),
    }
  ](name='Result'),
  success?: string(name='Success'),
}

model GetCurrentPlayingListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCurrentPlayingListResponseBody(name='body'),
}

async function getCurrentPlayingList(request: GetCurrentPlayingListRequest): GetCurrentPlayingListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCurrentPlayingListHeaders{};
  return getCurrentPlayingListWithOptions(request, headers, runtime);
}

async function getCurrentPlayingListWithOptions(tmpReq: GetCurrentPlayingListRequest, headers: GetCurrentPlayingListHeaders, runtime: Util.RuntimeOptions): GetCurrentPlayingListResponse {
  Util.validateModel(tmpReq);
  var request = new GetCurrentPlayingListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openQueryPlayListRequest)) {
    request.openQueryPlayListRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openQueryPlayListRequest, 'OpenQueryPlayListRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openQueryPlayListRequestShrink)) {
    body['OpenQueryPlayListRequest'] = request.openQueryPlayListRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCurrentPlayingList',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetCurrentPlayingList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceBasicInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceBasicInfoRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
}

model GetDeviceBasicInfoShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
}

model GetDeviceBasicInfoResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    firmwareVersion?: string(name='FirmwareVersion'),
    mac?: string(name='Mac'),
    name?: string(name='Name'),
    sn?: string(name='Sn'),
  }(name='Result'),
}

model GetDeviceBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceBasicInfoResponseBody(name='body'),
}

async function getDeviceBasicInfo(request: GetDeviceBasicInfoRequest): GetDeviceBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceBasicInfoHeaders{};
  return getDeviceBasicInfoWithOptions(request, headers, runtime);
}

async function getDeviceBasicInfoWithOptions(tmpReq: GetDeviceBasicInfoRequest, headers: GetDeviceBasicInfoHeaders, runtime: Util.RuntimeOptions): GetDeviceBasicInfoResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeviceBasicInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceBasicInfo',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceBasicInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceIdByIdentityHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceIdByIdentityRequest {
  encodeKey?: string(name='EncodeKey'),
  encodeType?: string(name='EncodeType'),
  identityId?: string(name='IdentityId'),
  identityType?: string(name='IdentityType'),
  productKey?: string(name='ProductKey'),
}

model GetDeviceIdByIdentityResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    deviceOpenId?: string(name='DeviceOpenId'),
    deviceUnionIds?: [ 
      {
        deviceUnionId?: string(name='DeviceUnionId'),
        organizationId?: string(name='OrganizationId'),
      }
    ](name='DeviceUnionIds'),
  }(name='Result'),
}

model GetDeviceIdByIdentityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceIdByIdentityResponseBody(name='body'),
}

async function getDeviceIdByIdentity(request: GetDeviceIdByIdentityRequest): GetDeviceIdByIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceIdByIdentityHeaders{};
  return getDeviceIdByIdentityWithOptions(request, headers, runtime);
}

async function getDeviceIdByIdentityWithOptions(request: GetDeviceIdByIdentityRequest, headers: GetDeviceIdByIdentityHeaders, runtime: Util.RuntimeOptions): GetDeviceIdByIdentityResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.encodeKey)) {
    query['EncodeKey'] = request.encodeKey;
  }
  if (!Util.isUnset(request.encodeType)) {
    query['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.identityId)) {
    query['IdentityId'] = request.identityId;
  }
  if (!Util.isUnset(request.identityType)) {
    query['IdentityType'] = request.identityType;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceIdByIdentity',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceIdByIdentity`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceSettingHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceSettingRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  keys?: [ string ](name='Keys'),
}

model GetDeviceSettingShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  keysShrink?: string(name='Keys'),
}

model GetDeviceSettingResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model GetDeviceSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceSettingResponseBody(name='body'),
}

async function getDeviceSetting(request: GetDeviceSettingRequest): GetDeviceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceSettingHeaders{};
  return getDeviceSettingWithOptions(request, headers, runtime);
}

async function getDeviceSettingWithOptions(tmpReq: GetDeviceSettingRequest, headers: GetDeviceSettingHeaders, runtime: Util.RuntimeOptions): GetDeviceSettingResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeviceSettingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.keys)) {
    request.keysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keys, 'Keys', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.keysShrink)) {
    query['Keys'] = request.keysShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceSetting',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceSetting`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceStatusDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceStatusDetailRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  keys?: [ string ](name='Keys'),
}

model GetDeviceStatusDetailShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  keysShrink?: string(name='Keys'),
}

model GetDeviceStatusDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    player?: {
      audioAlbum?: string(name='AudioAlbum'),
      audioAnchor?: string(name='AudioAnchor'),
      audioExt?: string(name='AudioExt'),
      audioId?: string(name='AudioId'),
      audioLength?: string(name='AudioLength'),
      audioName?: string(name='AudioName'),
      audioSource?: string(name='AudioSource'),
      audioUrl?: string(name='AudioUrl'),
      format?: string(name='Format'),
      progress?: string(name='Progress'),
      source?: string(name='Source'),
      status?: string(name='Status'),
      timestamp?: string(name='Timestamp'),
    }(name='Player'),
    power?: {
      quantity?: int32(name='Quantity'),
      status?: string(name='Status'),
    }(name='Power'),
    speaker?: {
      muted?: boolean(name='Muted'),
      volume?: int32(name='Volume'),
    }(name='Speaker'),
  }(name='Result'),
}

model GetDeviceStatusDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceStatusDetailResponseBody(name='body'),
}

async function getDeviceStatusDetail(request: GetDeviceStatusDetailRequest): GetDeviceStatusDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceStatusDetailHeaders{};
  return getDeviceStatusDetailWithOptions(request, headers, runtime);
}

async function getDeviceStatusDetailWithOptions(tmpReq: GetDeviceStatusDetailRequest, headers: GetDeviceStatusDetailHeaders, runtime: Util.RuntimeOptions): GetDeviceStatusDetailResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeviceStatusDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.keys)) {
    request.keysShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keys, 'Keys', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.keysShrink)) {
    query['Keys'] = request.keysShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceStatusDetail',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceStatusDetail`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceStatusInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceStatusInfoRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
}

model GetDeviceStatusInfoShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
}

model GetDeviceStatusInfoResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    online?: int32(name='Online'),
  }(name='Result'),
}

model GetDeviceStatusInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceStatusInfoResponseBody(name='body'),
}

async function getDeviceStatusInfo(request: GetDeviceStatusInfoRequest): GetDeviceStatusInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceStatusInfoHeaders{};
  return getDeviceStatusInfoWithOptions(request, headers, runtime);
}

async function getDeviceStatusInfoWithOptions(tmpReq: GetDeviceStatusInfoRequest, headers: GetDeviceStatusInfoHeaders, runtime: Util.RuntimeOptions): GetDeviceStatusInfoResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeviceStatusInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceStatusInfo',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceStatusInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetDeviceTagHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetDeviceTagRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
}

model GetDeviceTagShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
}

model GetDeviceTagResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    deviceTags?: map[string]any(name='DeviceTags'),
  }(name='Result'),
}

model GetDeviceTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDeviceTagResponseBody(name='body'),
}

async function getDeviceTag(request: GetDeviceTagRequest): GetDeviceTagResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetDeviceTagHeaders{};
  return getDeviceTagWithOptions(request, headers, runtime);
}

async function getDeviceTagWithOptions(tmpReq: GetDeviceTagRequest, headers: GetDeviceTagHeaders, runtime: Util.RuntimeOptions): GetDeviceTagResponse {
  Util.validateModel(tmpReq);
  var request = new GetDeviceTagShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceTag',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getDeviceTag`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetScheduleTaskHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetScheduleTaskRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    id?: long(name='Id'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetScheduleTaskShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetScheduleTaskResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    actionTopicList?: [ 
      {
        customAction?: map[string]any(name='CustomAction'),
      }
    ](name='ActionTopicList'),
    cron?: string(name='Cron'),
    scheduleEndTime?: string(name='ScheduleEndTime'),
    scheduleId?: long(name='ScheduleId'),
    scheduleStartTime?: string(name='ScheduleStartTime'),
    scheduleType?: string(name='ScheduleType'),
  }(name='Result'),
}

model GetScheduleTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetScheduleTaskResponseBody(name='body'),
}

async function getScheduleTask(request: GetScheduleTaskRequest): GetScheduleTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetScheduleTaskHeaders{};
  return getScheduleTaskWithOptions(request, headers, runtime);
}

async function getScheduleTaskWithOptions(tmpReq: GetScheduleTaskRequest, headers: GetScheduleTaskHeaders, runtime: Util.RuntimeOptions): GetScheduleTaskResponse {
  Util.validateModel(tmpReq);
  var request = new GetScheduleTaskShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetScheduleTask',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetScheduleTask`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUnreadMessageCountHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetUnreadMessageCountRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetUnreadMessageCountShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetUnreadMessageCountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: int32(name='Result'),
}

model GetUnreadMessageCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUnreadMessageCountResponseBody(name='body'),
}

async function getUnreadMessageCount(request: GetUnreadMessageCountRequest): GetUnreadMessageCountResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUnreadMessageCountHeaders{};
  return getUnreadMessageCountWithOptions(request, headers, runtime);
}

async function getUnreadMessageCountWithOptions(tmpReq: GetUnreadMessageCountRequest, headers: GetUnreadMessageCountHeaders, runtime: Util.RuntimeOptions): GetUnreadMessageCountResponse {
  Util.validateModel(tmpReq);
  var request = new GetUnreadMessageCountShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUnreadMessageCount',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getUnreadMessageCount`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetUserByDeviceIdHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetUserByDeviceIdRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
}

model GetUserByDeviceIdShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
}

model GetUserByDeviceIdResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    userOpenId?: string(name='UserOpenId'),
    userUnionIds?: [ 
      {
        organizationId?: string(name='OrganizationId'),
        userUnionId?: string(name='UserUnionId'),
      }
    ](name='UserUnionIds'),
  }(name='Result'),
}

model GetUserByDeviceIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserByDeviceIdResponseBody(name='body'),
}

async function getUserByDeviceId(request: GetUserByDeviceIdRequest): GetUserByDeviceIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUserByDeviceIdHeaders{};
  return getUserByDeviceIdWithOptions(request, headers, runtime);
}

async function getUserByDeviceIdWithOptions(tmpReq: GetUserByDeviceIdRequest, headers: GetUserByDeviceIdHeaders, runtime: Util.RuntimeOptions): GetUserByDeviceIdResponse {
  Util.validateModel(tmpReq);
  var request = new GetUserByDeviceIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUserByDeviceId',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/getUserByDeviceId`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetWeatherHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetWeatherRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetWeatherShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetWeatherResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentMeteorology?: {
      temperature?: {
        current?: string(name='Current'),
        currentDesc?: string(name='CurrentDesc'),
        high?: string(name='High'),
        highDesc?: string(name='HighDesc'),
        logical?: string(name='Logical'),
        low?: string(name='Low'),
        lowDesc?: string(name='LowDesc'),
      }(name='Temperature'),
      weather?: {
        code?: string(name='Code'),
        name?: string(name='Name'),
      }(name='Weather'),
    }(name='CurrentMeteorology'),
  }(name='Result'),
}

model GetWeatherResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWeatherResponseBody(name='body'),
}

async function getWeather(request: GetWeatherRequest): GetWeatherResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWeatherHeaders{};
  return getWeatherWithOptions(request, headers, runtime);
}

async function getWeatherWithOptions(tmpReq: GetWeatherRequest, headers: GetWeatherHeaders, runtime: Util.RuntimeOptions): GetWeatherResponse {
  Util.validateModel(tmpReq);
  var request = new GetWeatherShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWeather',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/GetWeather`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model IndexControlPlayingListHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model IndexControlPlayingListRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openIndexControlRequest?: {
    extendInfo?: map[string]any(name='ExtendInfo'),
    index?: int32(name='Index'),
    needContentContinued?: boolean(name='NeedContentContinued'),
  }(name='OpenIndexControlRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model IndexControlPlayingListShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openIndexControlRequestShrink?: string(name='OpenIndexControlRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model IndexControlPlayingListResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId'),
    audioLength?: int32(name='AudioLength'),
    copyright?: int32(name='Copyright'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      mediam?: string(name='Mediam'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder'),
    itemUrl?: string(name='ItemUrl'),
    liked?: boolean(name='Liked'),
    lyricUrl?: string(name='LyricUrl'),
    playMode?: string(name='PlayMode'),
    pos?: int32(name='Pos'),
    progress?: int32(name='Progress'),
    rawId?: string(name='RawId'),
    singer?: string(name='Singer'),
    source?: string(name='Source'),
    title?: string(name='Title'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
  success?: string(name='Success'),
}

model IndexControlPlayingListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IndexControlPlayingListResponseBody(name='body'),
}

async function indexControlPlayingList(request: IndexControlPlayingListRequest): IndexControlPlayingListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new IndexControlPlayingListHeaders{};
  return indexControlPlayingListWithOptions(request, headers, runtime);
}

async function indexControlPlayingListWithOptions(tmpReq: IndexControlPlayingListRequest, headers: IndexControlPlayingListHeaders, runtime: Util.RuntimeOptions): IndexControlPlayingListResponse {
  Util.validateModel(tmpReq);
  var request = new IndexControlPlayingListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openIndexControlRequest)) {
    request.openIndexControlRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openIndexControlRequest, 'OpenIndexControlRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openIndexControlRequestShrink)) {
    body['OpenIndexControlRequest'] = request.openIndexControlRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IndexControlPlayingList',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/IndexControlPlayingList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAlarmsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListAlarmsRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListAlarmsShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListAlarmsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentPage?: int32(name='CurrentPage'),
    model?: [ 
      {
        alarmId?: long(name='AlarmId'),
        musicInfo?: {
          musicId?: long(name='MusicId'),
          musicName?: string(name='MusicName'),
          musicType?: long(name='MusicType'),
          musicTypeName?: string(name='MusicTypeName'),
          musicUrl?: string(name='MusicUrl'),
        }(name='MusicInfo'),
        scheduleInfo?: {
          once?: {
            day?: int32(name='Day'),
            hour?: int32(name='Hour'),
            minute?: int32(name='Minute'),
            month?: int32(name='Month'),
            year?: int32(name='Year'),
          }(name='Once'),
          statutoryWorkingDay?: {
            hour?: int32(name='Hour'),
            minute?: int32(name='Minute'),
          }(name='StatutoryWorkingDay'),
          type?: string(name='Type'),
          weekly?: {
            daysOfWeek?: [ int32 ](name='DaysOfWeek'),
            hour?: int32(name='Hour'),
            minute?: int32(name='Minute'),
          }(name='Weekly'),
        }(name='ScheduleInfo'),
        scheduleTypeDesc?: string(name='ScheduleTypeDesc'),
        status?: int32(name='Status'),
        triggerDateDesc?: string(name='TriggerDateDesc'),
        triggerTimeDesc?: string(name='TriggerTimeDesc'),
        userId?: long(name='UserId'),
        uuid?: string(name='Uuid'),
        volume?: int32(name='Volume'),
      }
    ](name='Model'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model ListAlarmsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlarmsResponseBody(name='body'),
}

async function listAlarms(request: ListAlarmsRequest): ListAlarmsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListAlarmsHeaders{};
  return listAlarmsWithOptions(request, headers, runtime);
}

async function listAlarmsWithOptions(tmpReq: ListAlarmsRequest, headers: ListAlarmsHeaders, runtime: Util.RuntimeOptions): ListAlarmsResponse {
  Util.validateModel(tmpReq);
  var request = new ListAlarmsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListAlarms',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAlbumDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListAlbumDetailRequest {
  id?: long(name='Id'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model ListAlbumDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentPageNum?: long(name='CurrentPageNum'),
    openDataItemList?: [ 
      {
        alias?: [ string ](name='Alias'),
        audition?: boolean(name='Audition'),
        authors?: [ 
          {
            authorTypes?: [ string ](name='AuthorTypes'),
            gender?: string(name='Gender'),
            id?: long(name='Id'),
            online?: boolean(name='Online'),
            source?: string(name='Source'),
            title?: string(name='Title'),
          }
        ](name='Authors'),
        category?: string(name='Category'),
        charge?: boolean(name='Charge'),
        commCateId?: long(name='CommCateId'),
        cover?: {
          canResize?: boolean(name='CanResize'),
          img?: string(name='Img'),
          large?: string(name='Large'),
          medium?: string(name='Medium'),
          small?: string(name='Small'),
        }(name='Cover'),
        description?: string(name='Description'),
        duration?: long(name='Duration'),
        hotScore?: double(name='HotScore'),
        id?: long(name='Id'),
        itemType?: string(name='ItemType'),
        orderIndex?: long(name='OrderIndex'),
        rawId?: string(name='RawId'),
        source?: string(name='Source'),
        styles?: [ string ](name='Styles'),
        title?: string(name='Title'),
        type?: string(name='Type'),
        valid?: string(name='Valid'),
      }
    ](name='OpenDataItemList'),
    pageSize?: long(name='PageSize'),
    totalSize?: long(name='TotalSize'),
  }(name='Result'),
}

model ListAlbumDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlbumDetailResponseBody(name='body'),
}

async function listAlbumDetail(request: ListAlbumDetailRequest): ListAlbumDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListAlbumDetailHeaders{};
  return listAlbumDetailWithOptions(request, headers, runtime);
}

async function listAlbumDetailWithOptions(request: ListAlbumDetailRequest, headers: ListAlbumDetailHeaders, runtime: Util.RuntimeOptions): ListAlbumDetailResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlbumDetail',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListAlbumDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListAlbumIsAddedHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListAlbumIsAddedRequest {
  albumIdList?: [ string ](name='AlbumIdList'),
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListAlbumIsAddedShrinkRequest {
  albumIdListShrink?: string(name='AlbumIdList'),
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListAlbumIsAddedResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      albumId?: string(name='AlbumId'),
      isAdded?: string(name='IsAdded'),
    }
  ](name='Result'),
}

model ListAlbumIsAddedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAlbumIsAddedResponseBody(name='body'),
}

async function listAlbumIsAdded(request: ListAlbumIsAddedRequest): ListAlbumIsAddedResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListAlbumIsAddedHeaders{};
  return listAlbumIsAddedWithOptions(request, headers, runtime);
}

async function listAlbumIsAddedWithOptions(tmpReq: ListAlbumIsAddedRequest, headers: ListAlbumIsAddedHeaders, runtime: Util.RuntimeOptions): ListAlbumIsAddedResponse {
  Util.validateModel(tmpReq);
  var request = new ListAlbumIsAddedShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.albumIdList)) {
    request.albumIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.albumIdList, 'AlbumIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.albumIdListShrink)) {
    query['AlbumIdList'] = request.albumIdListShrink;
  }
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAlbumIsAdded',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listAlbumIsAdded`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCateContentHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCateContentRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  request?: {
    cateId?: long(name='CateId'),
    isAlbum?: boolean(name='IsAlbum'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    sortBy?: string(name='SortBy'),
    sortOrder?: string(name='SortOrder'),
  }(name='Request'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListCateContentShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  requestShrink?: string(name='Request'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListCateContentResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentPageNum?: int32(name='CurrentPageNum'),
    openDataItemList?: [ 
      {
        alias?: [ string ](name='Alias'),
        audition?: boolean(name='Audition'),
        authors?: [ 
          {
            authorTypes?: [ string ](name='AuthorTypes'),
            cover?: {
              canResize?: boolean(name='CanResize'),
              img?: string(name='Img'),
              large?: string(name='Large'),
              mediam?: string(name='Mediam'),
              medium?: string(name='Medium'),
              small?: string(name='Small'),
            }(name='Cover'),
            description?: string(name='Description'),
            gender?: string(name='Gender'),
            id?: long(name='Id'),
            online?: boolean(name='Online'),
            rawId?: string(name='RawId'),
            source?: string(name='Source'),
            title?: string(name='Title'),
          }
        ](name='Authors'),
        category?: string(name='Category'),
        charge?: boolean(name='Charge'),
        commCateId?: string(name='CommCateId'),
        cover?: {
          img?: string(name='Img'),
          large?: string(name='Large'),
          mediam?: string(name='Mediam'),
          medium?: string(name='Medium'),
          small?: string(name='Small'),
          canResize?: boolean(name='canResize'),
        }(name='Cover'),
        description?: string(name='Description'),
        hotScore?: double(name='HotScore'),
        itemType?: string(name='ItemType'),
        rawId?: string(name='RawId'),
        source?: string(name='Source'),
        title?: string(name='Title'),
        type?: string(name='Type'),
        valid?: string(name='Valid'),
        id?: long(name='id'),
      }
    ](name='OpenDataItemList'),
    pageSize?: int32(name='PageSize'),
    totalSize?: long(name='TotalSize'),
  }(name='Result'),
}

model ListCateContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCateContentResponseBody(name='body'),
}

async function listCateContent(request: ListCateContentRequest): ListCateContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCateContentHeaders{};
  return listCateContentWithOptions(request, headers, runtime);
}

async function listCateContentWithOptions(tmpReq: ListCateContentRequest, headers: ListCateContentHeaders, runtime: Util.RuntimeOptions): ListCateContentResponse {
  Util.validateModel(tmpReq);
  var request = new ListCateContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCateContent',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListCateContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCateInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCateInfoRequest {
  type?: string(name='Type'),
}

model ListCateInfoResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId'),
    }
  ](name='Result'),
}

model ListCateInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCateInfoResponseBody(name='body'),
}

async function listCateInfo(request: ListCateInfoRequest): ListCateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCateInfoHeaders{};
  return listCateInfoWithOptions(request, headers, runtime);
}

async function listCateInfoWithOptions(request: ListCateInfoRequest, headers: ListCateInfoHeaders, runtime: Util.RuntimeOptions): ListCateInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCateInfo',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListCateInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCommonCateFirstFloorHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCommonCateFirstFloorRequest {
  type?: string(name='Type'),
}

model ListCommonCateFirstFloorResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId'),
    }
  ](name='Result'),
}

model ListCommonCateFirstFloorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCommonCateFirstFloorResponseBody(name='body'),
}

async function listCommonCateFirstFloor(request: ListCommonCateFirstFloorRequest): ListCommonCateFirstFloorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCommonCateFirstFloorHeaders{};
  return listCommonCateFirstFloorWithOptions(request, headers, runtime);
}

async function listCommonCateFirstFloorWithOptions(request: ListCommonCateFirstFloorRequest, headers: ListCommonCateFirstFloorHeaders, runtime: Util.RuntimeOptions): ListCommonCateFirstFloorResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCommonCateFirstFloor',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListCommonCateFirstFloor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListCommonCateSecondFloorHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCommonCateSecondFloorRequest {
  parentCateId?: long(name='ParentCateId'),
}

model ListCommonCateSecondFloorResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      parentCateId?: long(name='ParentCateId'),
    }
  ](name='Result'),
}

model ListCommonCateSecondFloorResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCommonCateSecondFloorResponseBody(name='body'),
}

async function listCommonCateSecondFloor(request: ListCommonCateSecondFloorRequest): ListCommonCateSecondFloorResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCommonCateSecondFloorHeaders{};
  return listCommonCateSecondFloorWithOptions(request, headers, runtime);
}

async function listCommonCateSecondFloorWithOptions(request: ListCommonCateSecondFloorRequest, headers: ListCommonCateSecondFloorHeaders, runtime: Util.RuntimeOptions): ListCommonCateSecondFloorResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.parentCateId)) {
    query['ParentCateId'] = request.parentCateId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCommonCateSecondFloor',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListCommonCateSecondFloor`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDeviceBasicInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDeviceBasicInfoRequest {
  deviceInfos?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    idType?: string(name='IdType'),
    ids?: [ string ](name='Ids'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfos'),
}

model ListDeviceBasicInfoShrinkRequest {
  deviceInfosShrink?: string(name='DeviceInfos'),
}

model ListDeviceBasicInfoResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]ResultValue(name='Result'),
}

model ListDeviceBasicInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceBasicInfoResponseBody(name='body'),
}

async function listDeviceBasicInfo(request: ListDeviceBasicInfoRequest): ListDeviceBasicInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDeviceBasicInfoHeaders{};
  return listDeviceBasicInfoWithOptions(request, headers, runtime);
}

async function listDeviceBasicInfoWithOptions(tmpReq: ListDeviceBasicInfoRequest, headers: ListDeviceBasicInfoHeaders, runtime: Util.RuntimeOptions): ListDeviceBasicInfoResponse {
  Util.validateModel(tmpReq);
  var request = new ListDeviceBasicInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfos)) {
    request.deviceInfosShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfos, 'DeviceInfos', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfosShrink)) {
    query['DeviceInfos'] = request.deviceInfosShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceBasicInfo',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listDeviceBasicInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDeviceByUserIdHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDeviceByUserIdRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListDeviceByUserIdShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model ListDeviceByUserIdResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      deviceOpenId?: string(name='DeviceOpenId'),
      deviceUnionIds?: [ 
        {
          deviceUnionId?: string(name='DeviceUnionId'),
          organizationId?: string(name='OrganizationId'),
        }
      ](name='DeviceUnionIds'),
    }
  ](name='Result'),
}

model ListDeviceByUserIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceByUserIdResponseBody(name='body'),
}

async function listDeviceByUserId(request: ListDeviceByUserIdRequest): ListDeviceByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDeviceByUserIdHeaders{};
  return listDeviceByUserIdWithOptions(request, headers, runtime);
}

async function listDeviceByUserIdWithOptions(tmpReq: ListDeviceByUserIdRequest, headers: ListDeviceByUserIdHeaders, runtime: Util.RuntimeOptions): ListDeviceByUserIdResponse {
  Util.validateModel(tmpReq);
  var request = new ListDeviceByUserIdShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceByUserId',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listDeviceByUserId`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDeviceByUserIdAndChanelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDeviceByUserIdAndChanelRequest {
  channelInfo?: {
    channel?: string(name='Channel'),
    extInfo?: string(name='ExtInfo'),
  }(name='ChannelInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListDeviceByUserIdAndChanelShrinkRequest {
  channelInfoShrink?: string(name='ChannelInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListDeviceByUserIdAndChanelResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      deviceOpenId?: string(name='DeviceOpenId'),
      deviceUnionIds?: [ 
        {
          deviceUnionId?: string(name='DeviceUnionId'),
          organizationId?: string(name='OrganizationId'),
        }
      ](name='DeviceUnionIds'),
    }
  ](name='Result'),
}

model ListDeviceByUserIdAndChanelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceByUserIdAndChanelResponseBody(name='body'),
}

async function listDeviceByUserIdAndChanel(request: ListDeviceByUserIdAndChanelRequest): ListDeviceByUserIdAndChanelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDeviceByUserIdAndChanelHeaders{};
  return listDeviceByUserIdAndChanelWithOptions(request, headers, runtime);
}

async function listDeviceByUserIdAndChanelWithOptions(tmpReq: ListDeviceByUserIdAndChanelRequest, headers: ListDeviceByUserIdAndChanelHeaders, runtime: Util.RuntimeOptions): ListDeviceByUserIdAndChanelResponse {
  Util.validateModel(tmpReq);
  var request = new ListDeviceByUserIdAndChanelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.channelInfo)) {
    request.channelInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.channelInfo, 'ChannelInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.channelInfoShrink)) {
    query['ChannelInfo'] = request.channelInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceByUserIdAndChanel',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listDeviceByUserIdAndChanel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDeviceIdByIdentitiesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDeviceIdByIdentitiesRequest {
  encodeKey?: string(name='EncodeKey'),
  encodeType?: string(name='EncodeType'),
  identityIds?: [ string ](name='IdentityIds'),
  identityType?: string(name='IdentityType'),
  productKey?: string(name='ProductKey'),
}

model ListDeviceIdByIdentitiesShrinkRequest {
  encodeKey?: string(name='EncodeKey'),
  encodeType?: string(name='EncodeType'),
  identityIdsShrink?: string(name='IdentityIds'),
  identityType?: string(name='IdentityType'),
  productKey?: string(name='ProductKey'),
}

model ListDeviceIdByIdentitiesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]ResultValue(name='Result'),
}

model ListDeviceIdByIdentitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDeviceIdByIdentitiesResponseBody(name='body'),
}

async function listDeviceIdByIdentities(request: ListDeviceIdByIdentitiesRequest): ListDeviceIdByIdentitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDeviceIdByIdentitiesHeaders{};
  return listDeviceIdByIdentitiesWithOptions(request, headers, runtime);
}

async function listDeviceIdByIdentitiesWithOptions(tmpReq: ListDeviceIdByIdentitiesRequest, headers: ListDeviceIdByIdentitiesHeaders, runtime: Util.RuntimeOptions): ListDeviceIdByIdentitiesResponse {
  Util.validateModel(tmpReq);
  var request = new ListDeviceIdByIdentitiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.identityIds)) {
    request.identityIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.identityIds, 'IdentityIds', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.encodeKey)) {
    query['EncodeKey'] = request.encodeKey;
  }
  if (!Util.isUnset(request.encodeType)) {
    query['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.identityIdsShrink)) {
    query['IdentityIds'] = request.identityIdsShrink;
  }
  if (!Util.isUnset(request.identityType)) {
    query['IdentityType'] = request.identityType;
  }
  if (!Util.isUnset(request.productKey)) {
    query['ProductKey'] = request.productKey;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceIdByIdentities',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listDeviceIdByIdentities`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMusicHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListMusicRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    currentPage?: int32(name='CurrentPage'),
    musicId?: long(name='MusicId'),
    musicName?: string(name='MusicName'),
    musicType?: long(name='MusicType'),
    musicTypeName?: string(name='MusicTypeName'),
    pageSize?: int32(name='PageSize'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListMusicShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListMusicResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentPage?: int32(name='CurrentPage'),
    model?: [ 
      {
        musicId?: long(name='MusicId'),
        musicName?: string(name='MusicName'),
        musicType?: long(name='MusicType'),
        musicTypeName?: string(name='MusicTypeName'),
        musicUrl?: string(name='MusicUrl'),
      }
    ](name='Model'),
    pageCount?: int32(name='PageCount'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Result'),
}

model ListMusicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMusicResponseBody(name='body'),
}

async function listMusic(request: ListMusicRequest): ListMusicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListMusicHeaders{};
  return listMusicWithOptions(request, headers, runtime);
}

async function listMusicWithOptions(tmpReq: ListMusicRequest, headers: ListMusicHeaders, runtime: Util.RuntimeOptions): ListMusicResponse {
  Util.validateModel(tmpReq);
  var request = new ListMusicShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMusic',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listMusic`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListPlayHistoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListPlayHistoryRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  request?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    type?: string(name='Type'),
  }(name='Request'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListPlayHistoryShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  requestShrink?: string(name='Request'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListPlayHistoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  result?: [ 
    {
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize'),
            img?: string(name='Img'),
            large?: string(name='Large'),
            medium?: string(name='Medium'),
            small?: string(name='Small'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender'),
          id?: long(name='Id'),
          online?: boolean(name='Online'),
          rawId?: string(name='RawId'),
          source?: string(name='Source'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category'),
      charge?: boolean(name='Charge'),
      commCateId?: long(name='CommCateId'),
      cover?: {
        canResize?: boolean(name='CanResize'),
        img?: string(name='Img'),
        large?: string(name='Large'),
        mediam?: string(name='Mediam'),
        medium?: string(name='Medium'),
        small?: string(name='Small'),
      }(name='Cover'),
      description?: string(name='Description'),
      hotScore?: double(name='HotScore'),
      id?: long(name='Id'),
      itemType?: string(name='ItemType'),
      source?: string(name='Source'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      valid?: string(name='Valid'),
    }
  ](name='Result'),
  requestId?: string(name='requestId'),
}

model ListPlayHistoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListPlayHistoryResponseBody(name='body'),
}

async function listPlayHistory(request: ListPlayHistoryRequest): ListPlayHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListPlayHistoryHeaders{};
  return listPlayHistoryWithOptions(request, headers, runtime);
}

async function listPlayHistoryWithOptions(tmpReq: ListPlayHistoryRequest, headers: ListPlayHistoryHeaders, runtime: Util.RuntimeOptions): ListPlayHistoryResponse {
  Util.validateModel(tmpReq);
  var request = new ListPlayHistoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListPlayHistory',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListPlayHistory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRecommendContentHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListRecommendContentRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  request?: {
    count?: int32(name='Count'),
    type?: string(name='Type'),
  }(name='Request'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListRecommendContentShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  requestShrink?: string(name='Request'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListRecommendContentResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize'),
            img?: string(name='Img'),
            large?: string(name='Large'),
            medium?: string(name='Medium'),
            small?: string(name='Small'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender'),
          id?: long(name='Id'),
          online?: boolean(name='Online'),
          rawId?: string(name='RawId'),
          source?: string(name='Source'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category'),
      charge?: boolean(name='Charge'),
      commCateId?: long(name='CommCateId'),
      cover?: {
        canResize?: boolean(name='CanResize'),
        img?: string(name='Img'),
        large?: string(name='Large'),
        mediam?: string(name='Mediam'),
        medium?: string(name='Medium'),
        small?: string(name='Small'),
      }(name='Cover'),
      description?: string(name='Description'),
      hotScore?: double(name='HotScore'),
      id?: long(name='Id'),
      itemType?: string(name='ItemType'),
      rawId?: string(name='RawId'),
      source?: string(name='Source'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      valid?: string(name='Valid'),
    }
  ](name='Result'),
}

model ListRecommendContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRecommendContentResponseBody(name='body'),
}

async function listRecommendContent(request: ListRecommendContentRequest): ListRecommendContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListRecommendContentHeaders{};
  return listRecommendContentWithOptions(request, headers, runtime);
}

async function listRecommendContentWithOptions(tmpReq: ListRecommendContentRequest, headers: ListRecommendContentHeaders, runtime: Util.RuntimeOptions): ListRecommendContentResponse {
  Util.validateModel(tmpReq);
  var request = new ListRecommendContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListRecommendContent',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ListRecommendContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSubHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSubRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  page?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
  }(name='Page'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListSubShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  pageShrink?: string(name='Page'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListSubResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    dataList?: [ 
      {
        albumId?: string(name='AlbumId'),
        coverUrl?: string(name='CoverUrl'),
        dailyStudyCnt?: int32(name='DailyStudyCnt'),
        deviceId?: string(name='DeviceId'),
        id?: long(name='Id'),
        playMode?: string(name='PlayMode'),
        scheduleInfo?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
        }(name='ScheduleInfo'),
        title?: string(name='Title'),
        userId?: long(name='UserId'),
      }
    ](name='DataList'),
    hasNext?: boolean(name='HasNext'),
    totalCount?: long(name='TotalCount'),
    totalPageCount?: int32(name='TotalPageCount'),
  }(name='Result'),
}

model ListSubResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubResponseBody(name='body'),
}

async function listSub(request: ListSubRequest): ListSubResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSubHeaders{};
  return listSubWithOptions(request, headers, runtime);
}

async function listSubWithOptions(tmpReq: ListSubRequest, headers: ListSubHeaders, runtime: Util.RuntimeOptions): ListSubResponse {
  Util.validateModel(tmpReq);
  var request = new ListSubShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSub',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listSub`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSubAlbumHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSubAlbumRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  querySubscriptionAlbumRequest?: {
    albumId?: string(name='AlbumId'),
    categoryId?: int32(name='CategoryId'),
    page?: {
      pageNum?: int32(name='PageNum'),
      pageSize?: int32(name='PageSize'),
    }(name='Page'),
    title?: string(name='Title'),
  }(name='QuerySubscriptionAlbumRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListSubAlbumShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  querySubscriptionAlbumRequestShrink?: string(name='QuerySubscriptionAlbumRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListSubAlbumResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    dataList?: [ 
      {
        albumId?: string(name='AlbumId'),
        categoryId?: int32(name='CategoryId'),
        coverUrl?: string(name='CoverUrl'),
        id?: long(name='Id'),
        isAdded?: boolean(name='IsAdded'),
        scheduleInfo?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
          scheduleId?: long(name='ScheduleId'),
        }(name='ScheduleInfo'),
        sequence?: long(name='Sequence'),
        title?: string(name='Title'),
        totalEpisode?: int32(name='TotalEpisode'),
      }
    ](name='DataList'),
    hasNext?: boolean(name='HasNext'),
    totalCount?: int32(name='TotalCount'),
    totalPageCount?: int32(name='TotalPageCount'),
  }(name='Result'),
}

model ListSubAlbumResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubAlbumResponseBody(name='body'),
}

async function listSubAlbum(request: ListSubAlbumRequest): ListSubAlbumResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSubAlbumHeaders{};
  return listSubAlbumWithOptions(request, headers, runtime);
}

async function listSubAlbumWithOptions(tmpReq: ListSubAlbumRequest, headers: ListSubAlbumHeaders, runtime: Util.RuntimeOptions): ListSubAlbumResponse {
  Util.validateModel(tmpReq);
  var request = new ListSubAlbumShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.querySubscriptionAlbumRequest)) {
    request.querySubscriptionAlbumRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.querySubscriptionAlbumRequest, 'QuerySubscriptionAlbumRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.querySubscriptionAlbumRequestShrink)) {
    query['QuerySubscriptionAlbumRequest'] = request.querySubscriptionAlbumRequestShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubAlbum',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listSubAlbum`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSubscriptionAlbumCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSubscriptionAlbumCategoryRequest {
  categoryName?: string(name='CategoryName'),
}

model ListSubscriptionAlbumCategoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      categoryId?: string(name='CategoryId'),
      categoryName?: string(name='CategoryName'),
    }
  ](name='Result'),
}

model ListSubscriptionAlbumCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSubscriptionAlbumCategoryResponseBody(name='body'),
}

async function listSubscriptionAlbumCategory(request: ListSubscriptionAlbumCategoryRequest): ListSubscriptionAlbumCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSubscriptionAlbumCategoryHeaders{};
  return listSubscriptionAlbumCategoryWithOptions(request, headers, runtime);
}

async function listSubscriptionAlbumCategoryWithOptions(request: ListSubscriptionAlbumCategoryRequest, headers: ListSubscriptionAlbumCategoryHeaders, runtime: Util.RuntimeOptions): ListSubscriptionAlbumCategoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.categoryName)) {
    query['CategoryName'] = request.categoryName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListSubscriptionAlbumCategory',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listSubscriptionAlbumCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListUserMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListUserMessageRequest {
  beforeTime?: string(name='BeforeTime'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
  limit?: int32(name='limit'),
}

model ListUserMessageShrinkRequest {
  beforeTime?: string(name='BeforeTime'),
  userInfoShrink?: string(name='UserInfo'),
  limit?: int32(name='limit'),
}

model ListUserMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: [ 
    {
      content?: string(name='Content'),
      deviceName?: string(name='DeviceName'),
      gmtCreate?: string(name='GmtCreate'),
      id?: string(name='Id'),
      pic?: string(name='Pic'),
      source?: string(name='Source'),
      sourceUuid?: string(name='SourceUuid'),
      status?: int32(name='Status'),
      type?: string(name='Type'),
      url?: string(name='Url'),
    }
  ](name='Result'),
}

model ListUserMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUserMessageResponseBody(name='body'),
}

async function listUserMessage(request: ListUserMessageRequest): ListUserMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListUserMessageHeaders{};
  return listUserMessageWithOptions(request, headers, runtime);
}

async function listUserMessageWithOptions(tmpReq: ListUserMessageRequest, headers: ListUserMessageHeaders, runtime: Util.RuntimeOptions): ListUserMessageResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }
  if (!Util.isUnset(request.limit)) {
    query['limit'] = request.limit;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUserMessage',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/listUserMessage`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PlayAndPauseControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PlayAndPauseControlRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openPlayAndPauseControlParam?: {
    openPlayAndPauseCommand?: string(name='OpenPlayAndPauseCommand'),
  }(name='OpenPlayAndPauseControlParam'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model PlayAndPauseControlShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openPlayAndPauseControlParamShrink?: string(name='OpenPlayAndPauseControlParam'),
  userInfoShrink?: string(name='UserInfo'),
}

model PlayAndPauseControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: string(name='Success'),
}

model PlayAndPauseControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PlayAndPauseControlResponseBody(name='body'),
}

async function playAndPauseControl(request: PlayAndPauseControlRequest): PlayAndPauseControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PlayAndPauseControlHeaders{};
  return playAndPauseControlWithOptions(request, headers, runtime);
}

async function playAndPauseControlWithOptions(tmpReq: PlayAndPauseControlRequest, headers: PlayAndPauseControlHeaders, runtime: Util.RuntimeOptions): PlayAndPauseControlResponse {
  Util.validateModel(tmpReq);
  var request = new PlayAndPauseControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openPlayAndPauseControlParam)) {
    request.openPlayAndPauseControlParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openPlayAndPauseControlParam, 'OpenPlayAndPauseControlParam', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openPlayAndPauseControlParamShrink)) {
    body['OpenPlayAndPauseControlParam'] = request.openPlayAndPauseControlParamShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PlayAndPauseControl',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/PlayAndPauseControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PlayModeControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PlayModeControlRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openPlayModeControlRequest?: {
    openPlayMode?: string(name='OpenPlayMode'),
  }(name='OpenPlayModeControlRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model PlayModeControlShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openPlayModeControlRequestShrink?: string(name='OpenPlayModeControlRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model PlayModeControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    openPlayMode?: string(name='OpenPlayMode'),
  }(name='Result'),
  success?: string(name='Success'),
}

model PlayModeControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PlayModeControlResponseBody(name='body'),
}

async function playModeControl(request: PlayModeControlRequest): PlayModeControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PlayModeControlHeaders{};
  return playModeControlWithOptions(request, headers, runtime);
}

async function playModeControlWithOptions(tmpReq: PlayModeControlRequest, headers: PlayModeControlHeaders, runtime: Util.RuntimeOptions): PlayModeControlResponse {
  Util.validateModel(tmpReq);
  var request = new PlayModeControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openPlayModeControlRequest)) {
    request.openPlayModeControlRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openPlayModeControlRequest, 'OpenPlayModeControlRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openPlayModeControlRequestShrink)) {
    body['OpenPlayModeControlRequest'] = request.openPlayModeControlRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PlayModeControl',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/PlayModeControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PreviousAndNextControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PreviousAndNextControlRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openControlPlayingListRequest?: {
    cmd?: string(name='Cmd'),
    extendInfo?: map[string]any(name='ExtendInfo'),
    isFromDevice?: boolean(name='IsFromDevice'),
  }(name='OpenControlPlayingListRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model PreviousAndNextControlShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openControlPlayingListRequestShrink?: string(name='OpenControlPlayingListRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model PreviousAndNextControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    albumName?: string(name='AlbumName'),
    albumRawId?: string(name='AlbumRawId'),
    audioLength?: int32(name='AudioLength'),
    copyright?: int32(name='Copyright'),
    cover?: {
      canResize?: boolean(name='CanResize'),
      img?: string(name='Img'),
      large?: string(name='Large'),
      mediam?: string(name='Mediam'),
      medium?: string(name='Medium'),
      small?: string(name='Small'),
    }(name='Cover'),
    defaultPlayOrder?: int32(name='DefaultPlayOrder'),
    itemUrl?: string(name='ItemUrl'),
    liked?: boolean(name='Liked'),
    lyricUrl?: string(name='LyricUrl'),
    playMode?: string(name='PlayMode'),
    pos?: int32(name='Pos'),
    progress?: int32(name='Progress'),
    rawId?: string(name='RawId'),
    singer?: string(name='Singer'),
    source?: string(name='Source'),
    title?: string(name='Title'),
    type?: string(name='Type'),
    valid?: string(name='Valid'),
  }(name='Result'),
  success?: string(name='Success'),
}

model PreviousAndNextControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PreviousAndNextControlResponseBody(name='body'),
}

async function previousAndNextControl(request: PreviousAndNextControlRequest): PreviousAndNextControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PreviousAndNextControlHeaders{};
  return previousAndNextControlWithOptions(request, headers, runtime);
}

async function previousAndNextControlWithOptions(tmpReq: PreviousAndNextControlRequest, headers: PreviousAndNextControlHeaders, runtime: Util.RuntimeOptions): PreviousAndNextControlResponse {
  Util.validateModel(tmpReq);
  var request = new PreviousAndNextControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openControlPlayingListRequest)) {
    request.openControlPlayingListRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openControlPlayingListRequest, 'OpenControlPlayingListRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openControlPlayingListRequestShrink)) {
    body['OpenControlPlayingListRequest'] = request.openControlPlayingListRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PreviousAndNextControl',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/PreviousAndNextControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ProgressControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ProgressControlRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  openProgressControlRequest?: {
    extendInfo?: map[string]any(name='ExtendInfo'),
    progress?: int32(name='Progress'),
  }(name='OpenProgressControlRequest'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ProgressControlShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  openProgressControlRequestShrink?: string(name='OpenProgressControlRequest'),
  userInfoShrink?: string(name='UserInfo'),
}

model ProgressControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: string(name='Success'),
}

model ProgressControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProgressControlResponseBody(name='body'),
}

async function progressControl(request: ProgressControlRequest): ProgressControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ProgressControlHeaders{};
  return progressControlWithOptions(request, headers, runtime);
}

async function progressControlWithOptions(tmpReq: ProgressControlRequest, headers: ProgressControlHeaders, runtime: Util.RuntimeOptions): ProgressControlResponse {
  Util.validateModel(tmpReq);
  var request = new ProgressControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.openProgressControlRequest)) {
    request.openProgressControlRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.openProgressControlRequest, 'OpenProgressControlRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.openProgressControlRequestShrink)) {
    body['OpenProgressControlRequest'] = request.openProgressControlRequestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ProgressControl',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/ProgressControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryMusicTypeHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryMusicTypeRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryMusicTypeShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model QueryMusicTypeResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      musicType?: long(name='MusicType'),
      musicTypeName?: string(name='MusicTypeName'),
    }
  ](name='Result'),
}

model QueryMusicTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryMusicTypeResponseBody(name='body'),
}

async function queryMusicType(request: QueryMusicTypeRequest): QueryMusicTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryMusicTypeHeaders{};
  return queryMusicTypeWithOptions(request, headers, runtime);
}

async function queryMusicTypeWithOptions(tmpReq: QueryMusicTypeRequest, headers: QueryMusicTypeHeaders, runtime: Util.RuntimeOptions): QueryMusicTypeResponse {
  Util.validateModel(tmpReq);
  var request = new QueryMusicTypeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryMusicType',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/queryMusicType`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ReadMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ReadMessageRequest {
  messageId?: long(name='MessageId'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ReadMessageShrinkRequest {
  messageId?: long(name='MessageId'),
  userInfoShrink?: string(name='UserInfo'),
}

model ReadMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: boolean(name='Result'),
}

model ReadMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReadMessageResponseBody(name='body'),
}

async function readMessage(request: ReadMessageRequest): ReadMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ReadMessageHeaders{};
  return readMessageWithOptions(request, headers, runtime);
}

async function readMessageWithOptions(tmpReq: ReadMessageRequest, headers: ReadMessageHeaders, runtime: Util.RuntimeOptions): ReadMessageResponse {
  Util.validateModel(tmpReq);
  var request = new ReadMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReadMessage',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/readMessage`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ScgSearchHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ScgSearchRequest {
  scgFilter?: {
    offSetParam?: {
      limit?: int32(name='Limit'),
      offset?: int32(name='Offset'),
    }(name='OffSetParam'),
    pageParam?: {
      pageNum?: int32(name='PageNum'),
      pageSize?: int32(name='PageSize'),
    }(name='PageParam'),
    sortParam?: {
      sortKey?: string(name='SortKey'),
      sortOrder?: string(name='SortOrder'),
      sortText?: string(name='SortText'),
    }(name='SortParam'),
    useOffSet?: boolean(name='UseOffSet'),
  }(name='ScgFilter'),
  topicId?: string(name='TopicId'),
}

model ScgSearchShrinkRequest {
  scgFilterShrink?: string(name='ScgFilter'),
  topicId?: string(name='TopicId'),
}

model ScgSearchResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model ScgSearchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ScgSearchResponseBody(name='body'),
}

async function scgSearch(request: ScgSearchRequest): ScgSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ScgSearchHeaders{};
  return scgSearchWithOptions(request, headers, runtime);
}

async function scgSearchWithOptions(tmpReq: ScgSearchRequest, headers: ScgSearchHeaders, runtime: Util.RuntimeOptions): ScgSearchResponse {
  Util.validateModel(tmpReq);
  var request = new ScgSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.scgFilter)) {
    request.scgFilterShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scgFilter, 'ScgFilter', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.scgFilterShrink)) {
    query['ScgFilter'] = request.scgFilterShrink;
  }
  if (!Util.isUnset(request.topicId)) {
    query['TopicId'] = request.topicId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ScgSearch',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/scgSearch`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SearchContentHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SearchContentRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  request?: {
    cate?: string(name='Cate'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    query?: string(name='Query'),
    queryAlbum?: boolean(name='QueryAlbum'),
    subCate?: string(name='SubCate'),
  }(name='Request'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SearchContentShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  requestShrink?: string(name='Request'),
  userInfoShrink?: string(name='UserInfo'),
}

model SearchContentResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      albumId?: string(name='AlbumId'),
      alias?: [ string ](name='Alias'),
      audition?: boolean(name='Audition'),
      authors?: [ 
        {
          authorTypes?: [ string ](name='AuthorTypes'),
          cover?: {
            canResize?: boolean(name='CanResize'),
            img?: string(name='Img'),
            large?: string(name='Large'),
            medium?: string(name='Medium'),
            small?: string(name='Small'),
          }(name='Cover'),
          description?: string(name='Description'),
          gender?: string(name='Gender'),
          id?: long(name='Id'),
          online?: boolean(name='Online'),
          rawId?: string(name='RawId'),
          source?: string(name='Source'),
          title?: string(name='Title'),
        }
      ](name='Authors'),
      category?: string(name='Category'),
      charge?: boolean(name='Charge'),
      commCateId?: long(name='CommCateId'),
      cover?: {
        canResize?: boolean(name='CanResize'),
        img?: string(name='Img'),
        large?: string(name='Large'),
        mediam?: string(name='Mediam'),
        medium?: string(name='Medium'),
        small?: string(name='Small'),
      }(name='Cover'),
      description?: string(name='Description'),
      duration?: long(name='Duration'),
      hotScore?: double(name='HotScore'),
      id?: long(name='Id'),
      itemType?: string(name='ItemType'),
      lyric?: string(name='Lyric'),
      orderIndex?: string(name='OrderIndex'),
      source?: string(name='Source'),
      styles?: [ string ](name='Styles'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      valid?: string(name='Valid'),
    }
  ](name='Result'),
}

model SearchContentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchContentResponseBody(name='body'),
}

async function searchContent(request: SearchContentRequest): SearchContentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SearchContentHeaders{};
  return searchContentWithOptions(request, headers, runtime);
}

async function searchContentWithOptions(tmpReq: SearchContentRequest, headers: SearchContentHeaders, runtime: Util.RuntimeOptions): SearchContentResponse {
  Util.validateModel(tmpReq);
  var request = new SearchContentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.request)) {
    request.requestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.request, 'Request', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.requestShrink)) {
    body['Request'] = request.requestShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SearchContent',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/SearchContent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SendMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SendMessageRequest {
  url?: string(name='Url'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SendMessageShrinkRequest {
  url?: string(name='Url'),
  userInfoShrink?: string(name='UserInfo'),
}

model SendMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  result?: boolean(name='Result'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SendMessageHeaders{};
  return sendMessageWithOptions(request, headers, runtime);
}

async function sendMessageWithOptions(tmpReq: SendMessageRequest, headers: SendMessageHeaders, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/sendMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SetDeviceSettingHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SetDeviceSettingRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  key?: string(name='Key'),
  value?: any(name='Value'),
}

model SetDeviceSettingShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  key?: string(name='Key'),
  value?: any(name='Value'),
}

model SetDeviceSettingResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model SetDeviceSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDeviceSettingResponseBody(name='body'),
}

async function setDeviceSetting(request: SetDeviceSettingRequest): SetDeviceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SetDeviceSettingHeaders{};
  return setDeviceSettingWithOptions(request, headers, runtime);
}

async function setDeviceSettingWithOptions(tmpReq: SetDeviceSettingRequest, headers: SetDeviceSettingHeaders, runtime: Util.RuntimeOptions): SetDeviceSettingResponse {
  Util.validateModel(tmpReq);
  var request = new SetDeviceSettingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.key)) {
    body['Key'] = request.key;
  }
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SetDeviceSetting',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/setDeviceSetting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UnbindDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UnbindDeviceRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model UnbindDeviceShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model UnbindDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UnbindDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnbindDeviceResponseBody(name='body'),
}

async function unbindDevice(request: UnbindDeviceRequest): UnbindDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UnbindDeviceHeaders{};
  return unbindDeviceWithOptions(request, headers, runtime);
}

async function unbindDeviceWithOptions(tmpReq: UnbindDeviceRequest, headers: UnbindDeviceHeaders, runtime: Util.RuntimeOptions): UnbindDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new UnbindDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UnbindDevice',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/unbindDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateAlarmRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  payload?: {
    alarmId?: long(name='AlarmId'),
    musicInfo?: {
      musicId?: long(name='MusicId'),
      musicName?: string(name='MusicName'),
      musicType?: long(name='MusicType'),
      musicTypeName?: string(name='MusicTypeName'),
      musicUrl?: string(name='MusicUrl'),
    }(name='MusicInfo'),
    scheduleInfo?: {
      once?: {
        day?: int32(name='Day'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
        month?: int32(name='Month'),
        year?: int32(name='Year'),
      }(name='Once'),
      statutoryWorkingDay?: {
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='StatutoryWorkingDay'),
      type?: string(name='Type'),
      weekly?: {
        daysOfWeek?: [ int32 ](name='DaysOfWeek'),
        hour?: int32(name='Hour'),
        minute?: int32(name='Minute'),
      }(name='Weekly'),
    }(name='ScheduleInfo'),
    volume?: int32(name='Volume'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model UpdateAlarmShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model UpdateAlarmResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UpdateAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAlarmResponseBody(name='body'),
}

async function updateAlarm(request: UpdateAlarmRequest): UpdateAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateAlarmHeaders{};
  return updateAlarmWithOptions(request, headers, runtime);
}

async function updateAlarmWithOptions(tmpReq: UpdateAlarmRequest, headers: UpdateAlarmHeaders, runtime: Util.RuntimeOptions): UpdateAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAlarm',
    version = 'ssp_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ssp/updateAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResultValue = {
  deviceOpenId?: string(name='DeviceOpenId'),
  deviceUnionIds?: [ 
    {
      organizationId?: string(name='OrganizationId'),
      deviceUnionId?: string(name='DeviceUnionId'),
    }
  ](name='DeviceUnionIds'),
  name?: string(name='Name'),
  firmwareVersion?: string(name='FirmwareVersion'),
  mac?: string(name='Mac'),
  sn?: string(name='Sn'),
}

