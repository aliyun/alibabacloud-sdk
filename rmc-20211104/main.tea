/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('rmc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ListResourceRelationshipsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  scene?: string(name='Scene'),
  sourceRegionId?: string(name='SourceRegionId'),
  sourceResourceId?: [ string ](name='SourceResourceId'),
  sourceResourceType?: string(name='SourceResourceType'),
  targetResourceType?: [ string ](name='TargetResourceType'),
}

model ListResourceRelationshipsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resourceRelationships?: [ 
    {
      accountId?: string(name='AccountId'),
      relationshipType?: string(name='RelationshipType'),
      sourceRegionId?: string(name='SourceRegionId'),
      sourceResourceId?: string(name='SourceResourceId'),
      sourceResourceType?: string(name='SourceResourceType'),
      targetRegionId?: string(name='TargetRegionId'),
      targetResourceId?: string(name='TargetResourceId'),
      targetResourceType?: string(name='TargetResourceType'),
    }
  ](name='ResourceRelationships'),
}

model ListResourceRelationshipsResponse = {
  headers: map[string]string(name='headers'),
  body: ListResourceRelationshipsResponseBody(name='body'),
}

async function listResourceRelationshipsWithOptions(request: ListResourceRelationshipsRequest, runtime: Util.RuntimeOptions): ListResourceRelationshipsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.scene)) {
    query['Scene'] = request.scene;
  }
  if (!Util.isUnset(request.sourceRegionId)) {
    query['SourceRegionId'] = request.sourceRegionId;
  }
  if (!Util.isUnset(request.sourceResourceId)) {
    query['SourceResourceId'] = request.sourceResourceId;
  }
  if (!Util.isUnset(request.sourceResourceType)) {
    query['SourceResourceType'] = request.sourceResourceType;
  }
  if (!Util.isUnset(request.targetResourceType)) {
    query['TargetResourceType'] = request.targetResourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListResourceRelationships',
    version = '2021-11-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listResourceRelationships(request: ListResourceRelationshipsRequest): ListResourceRelationshipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceRelationshipsWithOptions(request, runtime);
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      matchType?: string(name='MatchType'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  resourceGroupId?: string(name='ResourceGroupId'),
  sortCriterion?: {
    key?: string(name='Key'),
    order?: string(name='Order'),
  }(name='SortCriterion'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key'),
      matchType?: string(name='MatchType'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      accountId?: string(name='AccountId'),
      createTime?: string(name='CreateTime'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId'),
      resourceName?: string(name='ResourceName'),
      resourceType?: string(name='ResourceType'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Resources'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchResourcesResponseBody(name='body'),
}

async function searchResourcesWithOptions(request: SearchResourcesRequest, runtime: Util.RuntimeOptions): SearchResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.resourceGroupId)) {
    query['ResourceGroupId'] = request.resourceGroupId;
  }
  if (!Util.isUnset(request.sortCriterion)) {
    query['SortCriterion'] = request.sortCriterion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchResources',
    version = '2021-11-04',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchResourcesWithOptions(request, runtime);
}

