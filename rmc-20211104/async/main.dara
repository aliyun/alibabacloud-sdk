/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'RMC';
  @version = '2021-11-04';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model SearchResourcesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      matchType?: string(name='MatchType'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model SearchResourcesResponseBody = {
  filters?: [ 
    {
      key?: string(name='Key'),
      matchType?: string(name='MatchType'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  resources?: [ 
    {
      accountId?: string(name='AccountId'),
      createTime?: string(name='CreateTime'),
      ipAddresses?: [ string ](name='IpAddresses'),
      regionId?: string(name='RegionId'),
      resourceGroupId?: string(name='ResourceGroupId'),
      resourceId?: string(name='ResourceId'),
      resourceName?: string(name='ResourceName'),
      resourceType?: string(name='ResourceType'),
      tags?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Resources'),
}

model SearchResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: SearchResourcesResponseBody(name='body'),
}

async function searchResources(request: SearchResourcesRequest): SearchResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchResources', 'POST', '/', 'json', false, 'json', request);
}

