/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'paiAutoML';
  @version = '2022-08-28';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AutofeExperimentConfiguration {
  odpsConfig: {
    odpsAccessId?: string(name='odps_access_id'),
    odpsAccessKey?: string(name='odps_access_key'),
    odpsEndpoint: string(name='odps_endpoint', example='http://service.cn-beijing.maxcompute.aliyun.com/api'),
    odpsProjectName: string(name='odps_project_name'),
    odpsRegionId: string(name='odps_region_id', example='cn-beijing'),
    odpsRoleArn?: string(name='odps_role_arn'),
  }(name='odps_config'),
  ossConfig: {
    ossAccessId?: string(name='oss_access_id'),
    ossAccessKey?: string(name='oss_access_key'),
    ossBucket: string(name='oss_bucket', example='autofe-service'),
    ossEndpoint: string(name='oss_endpoint', example='oss-cn-beijing.aliyuncs.com'),
    ossRoleArn?: string(name='oss_role_arn'),
  }(name='oss_config'),
  ymlConfig: {
    action?: string(name='action', example='train'),
    aggregateOnly?: string(name='aggregate_only', example='true'),
    analyzeExpId?: string(name='analyze_exp_id'),
    cpu?: string(name='cpu', example='2'),
    dataPartition?: string(name='data_partition'),
    dataSource: string(name='data_source', example='odps_table_name'),
    dataType?: string(name='data_type', example='odps'),
    debugMode?: string(name='debug_mode', example='false'),
    excludeColumns?: string(name='exclude_columns'),
    featureSelection?: string(name='feature_selection'),
    filterThresh?: string(name='filter_thresh', example='10'),
    ivThresh?: string(name='iv_thresh', example='0.02'),
    label: string(name='label', example='label'),
    memory?: string(name='memory', example='4000'),
    outputConfigOssDir: string(name='output_config_oss_dir', example='oss://bucket_name/'),
    pipelineExpId?: string(name='pipeline_exp_id'),
    reuseResults?: string(name='reuse_results', example='false'),
    sampleRatio?: string(name='sample_ratio', example='0'),
    sampleSize?: string(name='sample_size', example='5000000'),
    selectionExpId?: string(name='selection_exp_id'),
    skipSelect?: string(name='skip_select', example='true'),
    workers?: string(name='workers', example='10'),
    workspaceName: string(name='workspace_name'),
  }(name='yml_config'),
}

model HpoExperimentConfig {
  dlcConfig?: {
    accessId?: string(name='access_id'),
    accessKey?: string(name='access_key'),
    endpoint?: string(name='endpoint'),
    protocol?: string(name='protocol'),
    region?: string(name='region'),
  }(name='dlc_config'),
  k8sConfig?: {
    nniContainerCpuLimit?: string(name='nni_container_cpu_limit'),
    nniContainerMemoryLimit?: string(name='nni_container_memory_limit'),
    nniContainerRequestedCpu?: string(name='nni_container_requested_cpu'),
    nniContainerRequestedMemory?: string(name='nni_container_requested_memory'),
  }(name='k8s_config'),
  metricConfig: {
    finalMode: string(name='final_mode'),
    metricDict: map[string]any(name='metric_dict'),
    metricSource: [ string ](name='metric_source'),
    metricType: string(name='metric_type'),
    sourceListFinalMode?: string(name='source_list_final_mode'),
  }(name='metric_config'),
  monitorConfig?: {
    atMobiles?: string(name='at_mobiles'),
    atUserIds?: string(name='at_user_ids'),
    isAtAll?: string(name='is_at_all'),
    keyword?: string(name='keyword'),
    url?: string(name='url'),
  }(name='monitor_config'),
  odpsConfig?: {
    accessId?: string(name='access_id'),
    accessKey?: string(name='access_key'),
    endPoint?: string(name='end_point'),
    logViewHost?: string(name='log_view_host'),
    projectName?: string(name='project_name'),
    region?: string(name='region'),
    roleArn?: string(name='role_arn'),
  }(name='odps_config'),
  ossConfig?: {
    accessKeyID?: string(name='accessKeyID'),
    accessKeySecret?: string(name='accessKeySecret'),
    endpoint?: string(name='endpoint'),
    roleArn?: string(name='role_arn'),
  }(name='oss_config'),
  outputConfig?: {
    modelPath?: string(name='model_path'),
    summaryPath?: string(name='summary_path'),
  }(name='output_config'),
  paiflowConfig?: {
    accessKeyId?: string(name='access_key_id'),
    accessKeySecret?: string(name='access_key_secret'),
    regionId?: string(name='region_id'),
    workspaceId?: string(name='workspace_id'),
  }(name='paiflow_config'),
  paramsConfig?: {
    paramsSrcDstFilepath?: [ string ](name='params_src_dst_filepath', example='src_path,dst_file_path'),
  }(name='params_config'),
  platformConfig: {
    cmd: [ string ](name='cmd'),
    name: string(name='name', example='DLC, MC,paiflow, etc'),
    resume?: string(name='resume'),
  }(name='platform_config'),
  scheduleConfig?: {
    day?: string(name='day'),
    endTime?: string(name='end_time'),
    startTime?: string(name='start_time'),
  }(name='schedule_config'),
  searchSpace?: map[string]any(name='search_space'),
  tsConfig?: {
    accessKeyId?: string(name='access_key_id'),
    accessKeySecret?: string(name='access_key_secret'),
    endpoint?: string(name='endpoint'),
    regionId?: string(name='region_id'),
  }(name='ts_config'),
  ymlConfig?: {
    assessor?: {
      classArgs?: {
        earlystop?: boolean(name='earlystop'),
        movingAvg?: string(name='moving_avg'),
        optimizeMode?: string(name='optimize_mode'),
        proportion?: float(name='proportion'),
        startStep?: int32(name='start_step'),
      }(name='class_args'),
      name?: string(name='name'),
    }(name='assessor'),
    debug?: boolean(name='debug'),
    experimentName?: string(name='experiment_name'),
    logLevel?: string(name='log_level'),
    maxTrialNumber?: int32(name='max_trial_number'),
    trialConcurrency?: int32(name='trial_concurrency'),
    tuner?: {
      classArgs?: map[string]any(name='class_args'),
      name?: string(name='name'),
    }(name='tuner'),
  }(name='yml_config'),
}

model CreateAutofeExperimentRequest {
  accessibility?: string(name='Accessibility', example='PUBLIC', position='Body'),
  autofeExperimentConfiguration?: AutofeExperimentConfiguration(name='AutofeExperimentConfiguration', position='Body'),
  description?: string(name='Description', example='This is an AutoFE experiment.', position='Body'),
  name: string(name='Name', example='my experiment x', position='Body'),
  workspaceId?: string(name='WorkspaceId', example='283301', position='Body'),
}

model CreateAutofeExperimentResponseBody = {
  code?: string(name='Code', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]any(name='Detail', example='{}'),
  experimentId?: string(name='ExperimentId', example='t8cNdMO'),
  message?: string(name='Message', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', example='22A1EC4E-15A2-51FF-BFA3-10D6735BAA69'),
}

model CreateAutofeExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAutofeExperimentResponseBody(name='body'),
}

async function createAutofeExperiment(request: CreateAutofeExperimentRequest): CreateAutofeExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAutofeExperiment', 'POST', '/api/automl/v1/autofe/experiment', 'json', false, 'json', request);
}

model CreateHpoExperimentRequest {
  accessibility?: string(name='Accessibility', description='Experiment accesibility, public or private.', example='PRIVATE', position='Body'),
  description?: string(name='Description', description='Experiment description.', example='This is an AutoML HPO experiment.', position='Body'),
  hpoExperimentConfiguration?: HpoExperimentConfig(name='HpoExperimentConfiguration', description='The config object of the expriment.', position='Body'),
  name?: string(name='Name', description='Experiment Name', example='my experiment x', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='AI Workspace ID', example='default', position='Body'),
}

model CreateHpoExperimentResponseBody = {
  code?: string(name='Code', description='The HTTP status code. The status code 200 indicates that the request was successful.', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail', description='Detailed information of the failure.'),
  experimentId?: string(name='ExperimentId', description='Id of the request', example='sORVEck'),
  message?: string(name='Message', description='The error message returned.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model CreateHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHpoExperimentResponseBody(name='body'),
}

async function createHpoExperiment(request: CreateHpoExperimentRequest): CreateHpoExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHpoExperiment', 'POST', '/api/automl/v1/hpo/experiment', 'json', false, 'json', request);
}

model CreateServiceIdentityRoleRequest {
}

model CreateServiceIdentityRoleResponseBody = {
  code?: string(name='Code', example='ExecutionFailure'),
  message?: string(name='Message', example='Execution failure, please try again.'),
  requestId?: string(name='RequestId', description='Id of the request', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForPaiAutoml'),
}

model CreateServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceIdentityRoleResponseBody(name='body'),
}

async function createServiceIdentityRole(request: CreateServiceIdentityRoleRequest): CreateServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceIdentityRole', 'POST', '/api/automl/v1/serviceidentityrole', 'json', false, 'json', request);
}

model DeleteHpoExperimentRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID', example='sORVEck', position='Path'),
}

model DeleteHpoExperimentResponseBody = {
  code?: string(name='Code', description='The error code when the API call is not successful.', example='INVALID_USER_OR_EXP'),
  detail?: map[string]any(name='Detail', description='Extra info on the execution failure.', example='{}'),
  message?: string(name='Message', description='The error message returned.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model DeleteHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHpoExperimentResponseBody(name='body'),
}

async function deleteHpoExperiment(request: DeleteHpoExperimentRequest): DeleteHpoExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHpoExperiment', 'PUT', '/api/automl/v1/hpo/experiment/{ExperimentId}/delete', 'json', false, 'json', request);
}

model GetAutofeExperimentRequest {
  experimentId: string(name='ExperimentId', example='tfKs0Ds', position='Path'),
}

model GetAutofeExperimentResponseBody = {
  code?: string(name='Code', example='INVALID_USER_OR_EXP'),
  creator?: string(name='Creator', example='266977839132045194'),
  detail?: map[string]any(name='Detail'),
  experimentId?: string(name='ExperimentId', example='tfKs0Ds'),
  gmtCreateTime?: string(name='GmtCreateTime', example='2023-08-18T09:41:01Z'),
  gmtModifiedTime?: string(name='GmtModifiedTime', example='2023-11-30T02:05:34.000Z'),
  jobMeta?: string(name='JobMeta', example='{"action": "fs_train", "request_id": "6B6D4FB6-87AA-5C0E-94AB-E0F830955D1E", "job_num": 7, "job_runs": [{"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-fqlk86bvk68", "duration": 181, "finish_at": 1719158854000, "create_time": "2024-06-23T16:04:31.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-q18k5jo66h3k", "duration": 233, "finish_at": 1719159106000, "create_time": "2024-06-23T16:07:51.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-g7b38dmqes0nm4le", "duration": 173, "finish_at": 1719159306000, "create_time": "2024-06-23T16:12:12.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-524dab97aazs3jmc", "duration": 199, "finish_at": 1719159527000, "create_time": "2024-06-23T16:15:28.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-a8z56wy2ppwmxx04", "duration": 197, "finish_at": 1719159747000, "create_time": "2024-06-23T16:19:08.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-2cgsbxzzzma1j", "duration": 210, "finish_at": 1719159982000, "create_time": "2024-06-23T16:22:51.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-3cgsvf3ien1cw7", "duration": 184, "finish_at": 1719160188000, "create_time": "2024-06-23T16:26:43.000Z", "status": "Succeeded"}], "workspace_id": "86006"}{"action": "fs_train", "request_id": "6B6D4FB6-87AA-5C0E-94AB-E0F830955D1E", "job_num": 7, "job_runs": [{"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-fqlk86betchc69vk68", "duration": 181, "finish_at": 1719158854000, "create_time": "2024-06-23T16:04:31.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-q18ijqak558jo66h3k", "duration": 233, "finish_at": 1719159106000, "create_time": "2024-06-23T16:07:51.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-g7b38df7mqes0nm4le", "duration": 173, "finish_at": 1719159306000, "create_time": "2024-06-23T16:12:12.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-524zedab97aazs3jmc", "duration": 199, "finish_at": 1719159527000, "create_time": "2024-06-23T16:15:28.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-a8z56wy2ppm6wmxx04", "duration": 197, "finish_at": 1719159747000, "create_time": "2024-06-23T16:19:08.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-2cgsbxzx9i35zzma1j", "duration": 210, "finish_at": 1719159982000, "create_time": "2024-06-23T16:22:51.000Z", "status": "Succeeded"}, {"job_url": "https://pai.console.aliyun.com/?projectId=&regionId=cn-beijing#/studio/task/detail/flow-3cgsvf3bprlien1cw7", "duration": 184, "finish_at": 1719160188000, "create_time": "2024-06-23T16:26:43.000Z", "status": "Succeeded"}], "workspace_id": "86006"}'),
  message?: string(name='Message', example='Missing \\"user_id\\" in request.'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
  selectedFeatures?: string(name='SelectedFeatures', example='age,sex,education'),
  status?: string(name='Status', example='FINISHED, FAILED, USER_CANCELED'),
}

model GetAutofeExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAutofeExperimentResponseBody(name='body'),
}

async function getAutofeExperiment(request: GetAutofeExperimentRequest): GetAutofeExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAutofeExperiment', 'GET', '/api/automl/v1/autofe/experiment/{ExperimentId}', 'json', false, 'json', request);
}

model GetHpoExperimentRequest {
  experimentId?: string(name='ExperimentId', description='A short description of struct', example='sX5O9Q8', position='Path'),
}

model GetHpoExperimentResponseBody = {
  accessibility?: string(name='Accessibility', description='Accessibility of expriment, public or private.', example='PRIVATE'),
  code?: string(name='Code', description='Error when the API call is not success.', example='INVALID_INPUT_PARAMS'),
  configIni?: string(name='ConfigIni', description='Experiment run environment configurations.', example='[odps_config]
access_id=foo
access_key=bar
end_point=http://service.odps.aliyun.com/api
log_view_host=http://logview.odps.aliyun.com
project_name=my_project'),
  configYml?: string(name='ConfigYml', description='HPO search config yaml.', example='assessor:
  classArgs:
    optimize_mode: maximize
    start_step: 1
  name: PAIAssessor
debug: true
experimentName: maxcompute_kmeans_monitor
experimentWorkingDirectory: ../expdir
logLevel: debug
maxTrialNumber: 10
searchSpaceFile: search_space.json
trainingService:
  platform: local
trialCommand: python3 -m hpo_tools.core.utils.run --config=./config.ini
trialConcurrency: 2
tuner:
  classArgs:
    optimize_mode: maximize
  name: TPE'),
  creator?: string(name='Creator', description='The one who created the experiment.', example='123456789'),
  deleted?: boolean(name='Deleted', description='If the Experiment if deleted.', example='0'),
  description?: string(name='Description', description='Description of the experiment.', example='This is experiment is for tune the LR of model.'),
  detail?: map[string]any(name='Detail', description='Extra error message info.', example='TBD'),
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='sX5O9Q8'),
  gmtCreateTime?: string(name='GmtCreateTime', description='Experiment create time.', example='2024-01-01 08:30:11'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='Experiment last update time.', example='2024-01-01 08:30:11'),
  hpoExperimentConfiguration?: map[string]any(name='HpoExperimentConfiguration', description='Experiment configuration in json format.', example='{
    "output_config": {
        "model_path": "bi_ps_${exp_id}_${trial_id}"
    },
    "platform_config": {
        "cmd": [
            "PAI -name ps_smart\\n    -project foo",
            "PAI -name prediction\\n    -project foo",
            "PAI -name evaluate -project foo",
            "INSERT OVERWRITE TABLE my_table;"
        ],
        "name": "MaxCompute"
    },
    "metric_config": {
        "metric_dict": {
            "recall": 0.5,
            "auc": 0.25,
            "precision": 0.25
        },
        "metric_source": [
            "select * from my_metrics where pt=\\"${exp_id}_${trial_id}\\";"
        ],
        "metric_type": "table",
        "final_mode": "best"
    },
    "odps_config": {
        "project_name": "my_project",
        "role_arn": "acs:ram::123456789:role/aliyunserviceroleforfoo",
        "region": "cn-shanghai",
        "end_point": "http://service.cn.maxcompute.aliyun-inc.com/api",
        "log_view_host": "http://logview.odps.aliyun.com"
    },
    "yml_config": {
        "max_trial_number": 5,
        "assessor": {
            "name": "PAIAssessor",
            "class_args": {
                "earlystop": true,
                "start_step": 5,
                "optimize_mode": "maximize"
            }
        },
        "experiment_name": "my_exp",
        "tuner": {
            "name": "TPE",
            "class_args": {
                "optimize_mode": "maximize"
            }
        },
        "trial_concurrency": 2
    },
    "search_space": {
        "${max_depth}": {
            "_type": "choice",
            "_value": [
                1,
                3,
                5
            ]
        },
        "${tree_count}": {
            "_value": [
                50,
                100,
                150
            ],
            "_type": "choice"
        }
    }
}'),
  jobType?: string(name='JobType', description='Experiment  Job type.', example='1'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  name?: string(name='Name', description='Experiment name.', example='my_hpo_exp_1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  searchSpace?: string(name='SearchSpace', description='HPO hyperparameter search space.', example='{"${centerCount}":{"_type":"choice","_value":[2,3,4,5]},"${distanceType}":{"_type":"choice","_value":["euclidean","cosine","cityblock"]}}'),
  status?: string(name='Status', description='Experiment status.', example='INVALID_USER_OR_EXP, SUCCESS, or EXECUTION_FAILURE'),
  trialCount?: int32(name='TrialCount', description='Trials amount run till now.', example='3'),
  trialStatus?: map[string]string(name='TrialStatus', description='Status if a trial'),
  workspaceId?: string(name='WorkspaceId', description='AI Workspace ID.', example='12345'),
}

model GetHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHpoExperimentResponseBody(name='body'),
}

async function getHpoExperiment(request: GetHpoExperimentRequest): GetHpoExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHpoExperiment', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}', 'json', false, 'json', request);
}

model GetHpoTrialRequest {
  experimentId: string(name='ExperimentId', description='Experimetn ID', example='abcde', position='Path'),
  trialId: string(name='TrialId', description='trial id', example='mf99W4', position='Path'),
}

model GetHpoTrialResponseBody = {
  code?: string(name='Code', description='Error code.', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde'),
  finalMetric?: string(name='FinalMetric', description='Final metric of the trial.', example='{"default":0.087745,"type":"FINAL","val_loss=([0-9\\\\\\\\.]+)":0.087745}'),
  gmtCreateTime?: string(name='GmtCreateTime', description='Trial create time.', example='2024-01-02 12:34:56'),
  gmtModifiedTime?: string(name='GmtModifiedTime', description='Trial last update time.', example='2024-01-02 21:32:56'),
  hyperparam?: string(name='Hyperparam', description='Hyperparameters used to run the trial.', example='{"${centerCount}": 5, "${distanceType}": "cosine"}'),
  jobMeta?: string(name='JobMeta', description='trial meta infomation.', example='{"nni_trial_id": "asdf", "nni_exp_id": "abcde", "nni_trial_sequence_id": 2}'),
  message?: string(name='Message', description='The error message.', example='Missing \\"user_id\\" in request.'),
  metric?: string(name='Metric', description='metric details uploaded during running.', example='[{"default":0.087745,"val_loss=([0-9\\\\\\\\.]+)":0.087745},
{"default":1.085841,"val_loss=([0-9\\\\\\\\.]+)":0.085841},
{"default":0.087745,"type":"FINAL","val_loss=([0-9\\\\\\\\.]+)":0.087745}]'),
  metricName?: string(name='MetricName', description='Name of the metric.', example='AUC or F1, Accuracy etc.'),
  model?: string(name='Model', description='Trial output model.', example='model_table_name_foo'),
  parameterId?: int32(name='ParameterId', description='Parameter id, start from 0.', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  status?: string(name='Status', description='Trial status.', example='FINISHED, FAILED, USER_CANCELED'),
  trialId?: string(name='TrialId', description='Trail ID.', example='mf99W4'),
  userComment?: string(name='UserComment', description='User added comments.', example='best trial till now.'),
  userScore?: int32(name='UserScore', description='User updated score.', example='0'),
}

model GetHpoTrialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHpoTrialResponseBody(name='body'),
}

async function getHpoTrial(request: GetHpoTrialRequest): GetHpoTrialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHpoTrial', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/trial/{TrialId}', 'json', false, 'json', request);
}

model GetServiceIdentityRoleRequest {
}

model GetServiceIdentityRoleResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  message?: string(name='Message', example='Execution failure, please try again.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  roleName?: string(name='RoleName', example='AliyunServiceRoleForPaiAutoml'),
}

model GetServiceIdentityRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceIdentityRoleResponseBody(name='body'),
}

async function getServiceIdentityRole(request: GetServiceIdentityRoleRequest): GetServiceIdentityRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceIdentityRole', 'GET', '/api/automl/v1/serviceidentityrole', 'json', false, 'json', request);
}

model ListHpoExperimentLogsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  logName?: string(name='LogName', description='Log name to be listed.', example='nnimanager.log', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.', example='40', position='Query'),
}

model ListHpoExperimentLogsResponseBody = {
  code?: string(name='Code', description='Error code.', example='SUCCESS'),
  detail?: map[string]any(name='Detail', description='Extra error message.', example='{}'),
  logs?: [ string ](name='Logs', description='The log.'),
  message?: string(name='Message', description='The error message returned.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
  totalCount?: int32(name='TotalCount', description='The total number of entries.', example='467'),
}

model ListHpoExperimentLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoExperimentLogsResponseBody(name='body'),
}

async function listHpoExperimentLogs(request: ListHpoExperimentLogsRequest): ListHpoExperimentLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoExperimentLogs', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/logs', 'json', false, 'json', request);
}

model ListHpoExperimentsRequest {
  accessibility?: string(name='Accessibility', description='The accessibility of the experiments to be listed.', example='PRIVATE', position='Query'),
  creator?: string(name='Creator', description='Who created the expriment.', example='266977839132045194', position='Query'),
  includeConfigData?: string(name='IncludeConfigData', description='Return experiment detailed configuration or not.', example='True, False', position='Query'),
  maxCreateTime?: string(name='MaxCreateTime', description='The maximum create time of the experiment.', example='yyyy-mm-dd hh:mm:ss或着yyyy-mm-dd，比如2023-03-31 10:29:30', position='Query'),
  minCreateTime?: string(name='MinCreateTime', description='The minimum create time of the experiment.', example='yyyy-mm-dd hh:mm:ss或着yyyy-mm-dd，比如2023-03-31 10:29:30', position='Query'),
  name?: string(name='Name', description='Experiment name filter.', example='my_hpo_exp_1', position='Query'),
  order?: string(name='Order', description='ASC, DESC.', example='ASC, DESC.', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Record number on each page', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The returned experiments to be sorted by this column.', example='GmtCreateTime', position='Query'),
  status?: string(name='Status', description='Experiment status to be listed.', example='CREATED, RUNNING, FINISHED, FAILED, EARLY_STOPPED, USER_CANCELED, SYS_CANCELED, WAITING, NO_MORE_TRIAL, UNKNOWN', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The AI workspace ID the experiments belongs to.', example='default', position='Query'),
}

model ListHpoExperimentsResponseBody = {
  code?: string(name='Code', description='Error code.', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  experiments?: [ 
    {
      accessibility?: string(name='Accessibility', description='Experiment accessibility, private or public.', example='PUBLIC'),
      configIni?: string(name='ConfigIni', description='Experiment job run environment configurations.', example='[odps_config]
key1 = value1
key2 = value2'),
      configYml?: string(name='ConfigYml', description='HPO experiment run configuration.', example='experimentName: dlc_oss_mnist
experimentWorkingDirectory: ../expdir
searchSpaceFile: search_space.json
trialCommand: python3 -m hpo_tools.core.utils.run --config=./trial.ini
trialConcurrency: 1
maxTrialNumber: 4
tuner:
  name: TPE
  classArgs:
    optimize_mode: maximize
trainingService:
  platform: local
assessor:
  name: PAIAssessor
  classArgs:
    optimize_mode: maximize
    start_step: 2'),
      creator?: string(name='Creator', description='The one who created the experiment.', example='1049310008714189'),
      deleted?: boolean(name='Deleted', description='If the experiment is deleted.', example='1'),
      description?: string(name='Description', description='The description of the experiment.', example='desc'),
      experimentId?: string(name='ExperimentId', description='Experiment ID.', example='sORVEck'),
      gmtCreateTime?: string(name='GmtCreateTime', description='Experiment Create Time.', example='2023-03-31T10:29:30Z'),
      gmtModifiedTime?: string(name='GmtModifiedTime', description='Last modified time.', example='2022-10-27T00:55:54Z'),
      jobType?: string(name='JobType', description='Experimetn job type.', example='1'),
      name?: string(name='Name', description='Experiment name', example='my experiment x'),
      searchSpace?: string(name='SearchSpace', description='Experiment hyperparameter search space.', example='{\\"foo\\":\\"bar\\"}'),
      status?: string(name='Status', description='Experiment status.', example='CREATED, RUNNING, FINISHED, FAILED, EARLY_STOPPED, USER_CANCELED, SYS_CANCELED, WAITING, NO_MORE_TRIAL, UNKNOWN'),
      trialCount?: int32(name='TrialCount', description='How many trials the experiment have.', example='20'),
      trialStatus?: map[string]string(name='TrialStatus', description='Trial status map.'),
      workspaceId?: string(name='WorkspaceId', description='The ID of the AI workspace.', example='foo'),
    }
  ](name='Experiments', description='experiment array.'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount', description='Total qualified experiment count.', example='5'),
}

model ListHpoExperimentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoExperimentsResponseBody(name='body'),
}

async function listHpoExperiments(request: ListHpoExperimentsRequest): ListHpoExperimentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoExperiments', 'GET', '/api/automl/v1/hpo/experiments', 'json', false, 'json', request);
}

model ListHpoTrialCommandsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  trialId?: string(name='TrialId', description='Trial id', example='zUEapH', position='Path'),
}

model ListHpoTrialCommandsResponseBody = {
  code?: string(name='Code', description='The status code.', example='INVALID_USER_OR_EXP'),
  commands?: [ 
    {
      command?: string(name='Command', description='The command that you want to run.', example='dlc submit pytorch --name=test_nni_foo_bar'),
      id?: int32(name='Id', description='The id of the command.', example='1'),
      output?: string(name='Output', description='The output of the above command', example='dlc job submitted.'),
    }
  ](name='Commands', description='The list of commands.'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  message?: string(name='Message', description='The error message returned.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
}

model ListHpoTrialCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialCommandsResponseBody(name='body'),
}

async function listHpoTrialCommands(request: ListHpoTrialCommandsRequest): ListHpoTrialCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoTrialCommands', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/trial/{TrialId}/commands', 'json', false, 'json', request);
}

model ListHpoTrialLogNamesRequest {
  experimentId: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  trialId: string(name='TrialId', description='Trial id', example='zUEapH', position='Path'),
}

model ListHpoTrialLogNamesResponseBody = {
  code?: string(name='Code', description='Error code.', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  logNames?: [ string ](name='LogNames', description='Existing log files.'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model ListHpoTrialLogNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialLogNamesResponseBody(name='body'),
}

async function listHpoTrialLogNames(request: ListHpoTrialLogNamesRequest): ListHpoTrialLogNamesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoTrialLogNames', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/trial/{TrialId}/lognames', 'json', false, 'json', request);
}

model ListHpoTrialLogsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID', example='abcde', position='Path'),
  trialId?: string(name='TrialId', description='Trial ID', example='asdf', position='Path'),
  logName?: string(name='LogName', description='Log file name.', example='trial.log', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
}

model ListHpoTrialLogsResponseBody = {
  code?: string(name='Code', description='Error code.', example='SUCCESS'),
  detail?: map[string]any(name='Detail', description='Extra error information.', example='{}'),
  logs?: [ string ](name='Logs', description='The log.'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='123'),
}

model ListHpoTrialLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialLogsResponseBody(name='body'),
}

async function listHpoTrialLogs(request: ListHpoTrialLogsRequest): ListHpoTrialLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoTrialLogs', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/trial/{TrialId}/logs', 'json', false, 'json', request);
}

model ListHpoTrialsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  order?: string(name='Order', description='The trial results order.', example='ASC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10', position='Query'),
  sortBy?: string(name='SortBy', description='The results to be sorted by which column.', example='GmtCreateTime', position='Query'),
}

model ListHpoTrialsResponseBody = {
  code?: string(name='Code', description='Error code.', example='INVALID_USER_OR_EXP'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  message?: string(name='Message', description='The error message returned.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount', description='The total number of entries qualified.', example='5'),
  trials?: [ 
    {
      experimentId?: string(name='ExperimentId'),
      finalMetric?: string(name='FinalMetric'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      hyperparam?: string(name='Hyperparam'),
      jobMeta?: string(name='JobMeta'),
      metric?: string(name='Metric'),
      metricName?: string(name='MetricName'),
      model?: string(name='Model'),
      parameterId?: int32(name='ParameterId'),
      status?: string(name='Status'),
      trialId?: string(name='TrialId'),
      userComment?: string(name='UserComment'),
      userScore?: int32(name='UserScore'),
    }
  ](name='Trials', description='Trial array.'),
}

model ListHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialsResponseBody(name='body'),
}

async function listHpoTrials(request: ListHpoTrialsRequest): ListHpoTrialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHpoTrials', 'GET', '/api/automl/v1/hpo/experiment/{ExperimentId}/trials', 'json', false, 'json', request);
}

model RestartHpoTrialsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID', example='abcde', position='Path'),
  trialHyperParameters?: string(name='TrialHyperParameters', description='A hyperparameter combination instance.', example='‘{"${batch_size}": "32", "${lr}": "0.01"}\\"', position='Body'),
  trialIds?: [ string ](name='TrialIds', description='Trial ID array.', position='Body'),
}

model RestartHpoTrialsResponseBody = {
  code?: string(name='Code', description='Response code.', example='INVALID_USER_OR_EXP'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='Id of the request', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  results?: map[string]any(name='Results', description='Restart status of all the trial IDs.', example='{
\\"xrYq99\\": TrialJobInfo text,
\\"xrYq9N\\":TrialJobInfo text
}'),
}

model RestartHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartHpoTrialsResponseBody(name='body'),
}

async function restartHpoTrials(request: RestartHpoTrialsRequest): RestartHpoTrialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartHpoTrials', 'PUT', '/api/automl/v1/hpo/experiment/{ExperimentId}/restart_trials', 'json', false, 'json', request);
}

model StopHpoExperimentRequest {
  experimentId: string(name='ExperimentId', description='需要被停止的实验的id。', example='abcde', position='Path'),
}

model StopHpoExperimentResponseBody = {
  code?: string(name='Code', description='Response code.', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  expId?: string(name='ExpId', description='Experiment ID', example='sHpITOH'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
  status?: string(name='Status'),
}

model StopHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopHpoExperimentResponseBody(name='body'),
}

async function stopHpoExperiment(request: StopHpoExperimentRequest): StopHpoExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopHpoExperiment', 'PUT', '/api/automl/v1/hpo/experiment/{ExperimentId}/stop', 'json', false, 'json', request);
}

model StopHpoTrialsRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  trialIds?: [ string ](name='TrialIds', description='Trial Ids to be stopped.', position='Body'),
}

model StopHpoTrialsResponseBody = {
  code?: string(name='Code', description='Error code.', example='INVALID_USER_OR_EXP'),
  detail?: map[string]string(name='Detail', description='Extra error information.'),
  message?: string(name='Message', description='Error message.', example='failed to stop any trial'),
  requestId?: string(name='RequestId', description='The request ID.', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
  results?: map[string]any(name='Results', description='The results of trial stop.', example='{
    \\"xrYq99\\":\\"successfully stopped trial,\\",
    \\"xrYq9N\\":\\"failed to stop trial,\\"
}'),
}

model StopHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopHpoTrialsResponseBody(name='body'),
}

async function stopHpoTrials(request: StopHpoTrialsRequest): StopHpoTrialsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopHpoTrials', 'PUT', '/api/automl/v1/hpo/experiment/{ExperimentId}/stop_trials', 'json', false, 'json', request);
}

model UpdateHpoExperimentRequest {
  experimentId?: string(name='ExperimentId', description='Experiment ID.', example='abcde', position='Path'),
  accessibility?: string(name='Accessibility', description='Experiment accessibility, private or public.', example='PRIVATE', position='Body'),
  description?: string(name='Description', description='Experiment description.', example='This is an AutoML HPO experiment.', position='Body'),
  hpoExperimentConfiguration?: HpoExperimentConfig(name='HpoExperimentConfiguration', description='Experiment configuration.', position='Body'),
  name?: string(name='Name', description='Experiment name.', example='my experiment x', position='Body'),
  workspaceId?: string(name='WorkspaceId', description='Expeirment\\"s AI workspace ID.', example='12345', position='Body'),
}

model UpdateHpoExperimentResponseBody = {
  code?: string(name='Code', description='Error code.', example='SUCCESS'),
  detail?: map[string]any(name='Detail', description='Extra error information.', example='{}'),
  message?: string(name='Message', description='Error message.', example='Missing \\"user_id\\" in request.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model UpdateHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHpoExperimentResponseBody(name='body'),
}

async function updateHpoExperiment(request: UpdateHpoExperimentRequest): UpdateHpoExperimentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHpoExperiment', 'PUT', '/api/automl/v1/hpo/experiment/{ExperimentId}/update', 'json', false, 'json', request);
}

