/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('paiautoml', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AutofeExperimentConfiguration {
  odpsConfig?: {
    odpsAccessId?: string(name='odps_access_id'),
    odpsAccessKey?: string(name='odps_access_key'),
    odpsEndpoint?: string(name='odps_endpoint', description='This parameter is required.', example='http://service.cn-beijing.maxcompute.aliyun.com/api'),
    odpsProjectName?: string(name='odps_project_name', description='This parameter is required.'),
    odpsRegionId?: string(name='odps_region_id', description='This parameter is required.', example='cn-beijing'),
    odpsRoleArn?: string(name='odps_role_arn'),
  }(name='odps_config', description='This parameter is required.'),
  ossConfig?: {
    ossAccessId?: string(name='oss_access_id'),
    ossAccessKey?: string(name='oss_access_key'),
    ossBucket?: string(name='oss_bucket', description='This parameter is required.', example='autofe-service'),
    ossEndpoint?: string(name='oss_endpoint', description='This parameter is required.', example='oss-cn-beijing.aliyuncs.com'),
    ossRoleArn?: string(name='oss_role_arn'),
  }(name='oss_config', description='This parameter is required.'),
  ymlConfig?: {
    action?: string(name='action', example='train'),
    aggregateOnly?: string(name='aggregate_only', example='true'),
    analyzeExpId?: string(name='analyze_exp_id'),
    cpu?: string(name='cpu', example='2'),
    dataPartition?: string(name='data_partition'),
    dataSource?: string(name='data_source', description='This parameter is required.', example='odps_table_name'),
    dataType?: string(name='data_type', example='odps'),
    debugMode?: string(name='debug_mode', example='false'),
    excludeColumns?: string(name='exclude_columns'),
    featureSelection?: string(name='feature_selection'),
    filterThresh?: string(name='filter_thresh', example='10'),
    ivThresh?: string(name='iv_thresh', example='0.02'),
    label?: string(name='label', description='This parameter is required.', example='label'),
    memory?: string(name='memory', example='4000'),
    outputConfigOssDir?: string(name='output_config_oss_dir', description='This parameter is required.', example='oss://bucket_name/'),
    pipelineExpId?: string(name='pipeline_exp_id'),
    reuseResults?: string(name='reuse_results', example='false'),
    sampleRatio?: string(name='sample_ratio', example='0'),
    sampleSize?: string(name='sample_size', example='5000000'),
    selectionExpId?: string(name='selection_exp_id'),
    skipSelect?: string(name='skip_select', example='true'),
    workers?: string(name='workers', example='10'),
    workspaceName?: string(name='workspace_name', description='This parameter is required.'),
  }(name='yml_config', description='This parameter is required.'),
}

model HpoExperimentConfig {
  dlcConfig?: {
    accessId?: string(name='access_id'),
    accessKey?: string(name='access_key'),
    endpoint?: string(name='endpoint'),
    protocol?: string(name='protocol'),
    region?: string(name='region'),
  }(name='dlc_config'),
  k8sConfig?: {
    nniContainerCpuLimit?: string(name='nni_container_cpu_limit'),
    nniContainerMemoryLimit?: string(name='nni_container_memory_limit'),
    nniContainerRequestedCpu?: string(name='nni_container_requested_cpu'),
    nniContainerRequestedMemory?: string(name='nni_container_requested_memory'),
  }(name='k8s_config'),
  metricConfig?: {
    finalMode?: string(name='final_mode', description='This parameter is required.'),
    metricDict?: map[string]any(name='metric_dict', description='This parameter is required.'),
    metricSource?: [ string ](name='metric_source', description='This parameter is required.'),
    metricType?: string(name='metric_type', description='This parameter is required.'),
    sourceListFinalMode?: string(name='source_list_final_mode'),
  }(name='metric_config', description='This parameter is required.'),
  monitorConfig?: {
    atMobiles?: string(name='at_mobiles'),
    atUserIds?: string(name='at_user_ids'),
    isAtAll?: string(name='is_at_all'),
    keyword?: string(name='keyword'),
    url?: string(name='url'),
  }(name='monitor_config'),
  odpsConfig?: {
    accessId?: string(name='access_id'),
    accessKey?: string(name='access_key'),
    endPoint?: string(name='end_point'),
    logViewHost?: string(name='log_view_host'),
    projectName?: string(name='project_name'),
    region?: string(name='region'),
    roleArn?: string(name='role_arn'),
  }(name='odps_config'),
  ossConfig?: {
    accessKeyID?: string(name='accessKeyID'),
    accessKeySecret?: string(name='accessKeySecret'),
    endpoint?: string(name='endpoint'),
    roleArn?: string(name='role_arn'),
  }(name='oss_config'),
  outputConfig?: {
    modelPath?: string(name='model_path'),
    summaryPath?: string(name='summary_path'),
  }(name='output_config'),
  paiflowConfig?: {
    accessKeyId?: string(name='access_key_id'),
    accessKeySecret?: string(name='access_key_secret'),
    regionId?: string(name='region_id'),
    workspaceId?: string(name='workspace_id'),
  }(name='paiflow_config'),
  paramsConfig?: {
    paramsSrcDstFilepath?: [ string ](name='params_src_dst_filepath', example='src_path,dst_file_path'),
  }(name='params_config'),
  platformConfig?: {
    cmd?: [ string ](name='cmd', description='This parameter is required.'),
    name?: string(name='name', description='This parameter is required.', example='DLC, MC,paiflow, etc'),
    resume?: string(name='resume'),
  }(name='platform_config', description='This parameter is required.'),
  scheduleConfig?: {
    day?: string(name='day'),
    endTime?: string(name='end_time'),
    startTime?: string(name='start_time'),
  }(name='schedule_config'),
  searchSpace?: map[string]any(name='search_space'),
  tsConfig?: {
    accessKeyId?: string(name='access_key_id'),
    accessKeySecret?: string(name='access_key_secret'),
    endpoint?: string(name='endpoint'),
    regionId?: string(name='region_id'),
  }(name='ts_config'),
  ymlConfig?: {
    assessor?: {
      classArgs?: {
        earlystop?: boolean(name='earlystop'),
        movingAvg?: string(name='moving_avg'),
        optimizeMode?: string(name='optimize_mode'),
        proportion?: float(name='proportion'),
        startStep?: int32(name='start_step'),
      }(name='class_args'),
      name?: string(name='name'),
    }(name='assessor'),
    debug?: boolean(name='debug'),
    experimentName?: string(name='experiment_name'),
    logLevel?: string(name='log_level'),
    maxTrialNumber?: int32(name='max_trial_number'),
    trialConcurrency?: int32(name='trial_concurrency'),
    tuner?: {
      classArgs?: map[string]any(name='class_args'),
      name?: string(name='name'),
    }(name='tuner'),
  }(name='yml_config'),
}

model CreateHpoExperimentRequest {
  accessibility?: string(name='Accessibility'),
  description?: string(name='Description'),
  hpoExperimentConfiguration?: HpoExperimentConfig(name='HpoExperimentConfiguration'),
  name?: string(name='Name', example='my experiment x'),
  workspaceId?: string(name='WorkspaceId'),
}

model CreateHpoExperimentResponseBody = {
  code?: string(name='Code'),
  detail?: map[string]string(name='Detail'),
  experimentId?: string(name='ExperimentId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHpoExperimentResponseBody(name='body'),
}

/**
 * @summary calling HPO CreateExperiment
 *
 * @param request CreateHpoExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateHpoExperimentResponse
 */
async function createHpoExperimentWithOptions(request: CreateHpoExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateHpoExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hpoExperimentConfiguration)) {
    body['HpoExperimentConfiguration'] = request.hpoExperimentConfiguration;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHpoExperiment',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary calling HPO CreateExperiment
 *
 * @param request CreateHpoExperimentRequest
 * @return CreateHpoExperimentResponse
 */
async function createHpoExperiment(request: CreateHpoExperimentRequest): CreateHpoExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createHpoExperimentWithOptions(request, headers, runtime);
}

model DeleteHpoExperimentResponseBody = {
  code?: string(name='Code', example='INVALID_USER_OR_EXP'),
  detail?: map[string]any(name='Detail', example='{}'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model DeleteHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHpoExperimentResponseBody(name='body'),
}

/**
 * @summary Delete an hpo experiment and its trials
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteHpoExperimentResponse
 */
async function deleteHpoExperimentWithOptions(ExperimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteHpoExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteHpoExperiment',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/delete`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete an hpo experiment and its trials
 *
 * @return DeleteHpoExperimentResponse
 */
async function deleteHpoExperiment(ExperimentId: string): DeleteHpoExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteHpoExperimentWithOptions(ExperimentId, headers, runtime);
}

model GetHpoExperimentResponseBody = {
  accessibility?: string(name='Accessibility'),
  code?: string(name='Code'),
  configIni?: string(name='ConfigIni'),
  configYml?: string(name='ConfigYml'),
  creator?: string(name='Creator'),
  deleted?: boolean(name='Deleted'),
  description?: string(name='Description'),
  detail?: map[string]any(name='Detail'),
  experimentId?: string(name='ExperimentId'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  hpoExperimentConfiguration?: map[string]any(name='HpoExperimentConfiguration'),
  jobType?: string(name='JobType'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  searchSpace?: string(name='SearchSpace'),
  status?: string(name='Status', example='SUCCESS, FAILED_CREATE_EXP'),
  trialCount?: int32(name='TrialCount'),
  trialStatus?: map[string]string(name='TrialStatus'),
  workspaceId?: string(name='WorkspaceId'),
}

model GetHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHpoExperimentResponseBody(name='body'),
}

/**
 * @summary get hpo experiment by user id and exp id
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHpoExperimentResponse
 */
async function getHpoExperimentWithOptions(ExperimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHpoExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHpoExperiment',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary get hpo experiment by user id and exp id
 *
 * @return GetHpoExperimentResponse
 */
async function getHpoExperiment(ExperimentId: string): GetHpoExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHpoExperimentWithOptions(ExperimentId, headers, runtime);
}

model GetHpoTrialResponseBody = {
  code?: string(name='Code', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail'),
  experimentId?: string(name='ExperimentId'),
  finalMetric?: string(name='FinalMetric'),
  gmtCreateTime?: string(name='GmtCreateTime'),
  gmtModifiedTime?: string(name='GmtModifiedTime'),
  hyperparam?: string(name='Hyperparam'),
  jobMeta?: string(name='JobMeta'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  metric?: string(name='Metric'),
  metricName?: string(name='MetricName'),
  model?: string(name='Model'),
  parameterId?: int32(name='ParameterId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  trialId?: string(name='TrialId'),
  userComment?: string(name='UserComment'),
  userScore?: int32(name='UserScore'),
}

model GetHpoTrialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHpoTrialResponseBody(name='body'),
}

/**
 * @summary Get trial detail information
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetHpoTrialResponse
 */
async function getHpoTrialWithOptions(ExperimentId: string, TrialId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetHpoTrialResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetHpoTrial',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/trial/${OpenApiUtil.getEncodeParam(TrialId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get trial detail information
 *
 * @return GetHpoTrialResponse
 */
async function getHpoTrial(ExperimentId: string, TrialId: string): GetHpoTrialResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getHpoTrialWithOptions(ExperimentId, TrialId, headers, runtime);
}

model ListHpoExperimentLogsRequest {
  logName?: string(name='LogName', example='nnimanager.log'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='40'),
}

model ListHpoExperimentLogsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  detail?: map[string]any(name='Detail', example='{}'),
  logs?: [ string ](name='Logs'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
  totalCount?: int32(name='TotalCount', example='467'),
}

model ListHpoExperimentLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoExperimentLogsResponseBody(name='body'),
}

/**
 * @summary list the content of a specified hpo experiment log
 *
 * @param request ListHpoExperimentLogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoExperimentLogsResponse
 */
async function listHpoExperimentLogsWithOptions(ExperimentId: string, request: ListHpoExperimentLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoExperimentLogsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.logName)) {
    query['LogName'] = request.logName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHpoExperimentLogs',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary list the content of a specified hpo experiment log
 *
 * @param request ListHpoExperimentLogsRequest
 * @return ListHpoExperimentLogsResponse
 */
async function listHpoExperimentLogs(ExperimentId: string, request: ListHpoExperimentLogsRequest): ListHpoExperimentLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoExperimentLogsWithOptions(ExperimentId, request, headers, runtime);
}

model ListHpoExperimentsRequest {
  accessibility?: string(name='Accessibility'),
  creator?: string(name='Creator'),
  includeConfigData?: string(name='IncludeConfigData'),
  maxCreateTime?: string(name='MaxCreateTime'),
  minCreateTime?: string(name='MinCreateTime'),
  name?: string(name='Name'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  status?: string(name='Status'),
  workspaceId?: string(name='WorkspaceId'),
}

model ListHpoExperimentsResponseBody = {
  code?: string(name='Code', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail'),
  experiments?: [ 
    {
      accessibility?: string(name='Accessibility', example='PUBLIC'),
      configIni?: string(name='ConfigIni', example='[odps_config]
key1 = value1
key2 = value2'),
      configYml?: string(name='ConfigYml', example='experimentName: dlc_oss_mnist
experimentWorkingDirectory: ../expdir
searchSpaceFile: search_space.json
trialCommand: python3 -m hpo_tools.core.utils.run --config=./trial.ini
trialConcurrency: 1
maxTrialNumber: 4
tuner:
  name: TPE
  classArgs:
    optimize_mode: maximize
trainingService:
  platform: local
assessor:
  name: PAIAssessor
  classArgs:
    optimize_mode: maximize
    start_step: 2'),
      creator?: string(name='Creator'),
      deleted?: boolean(name='Deleted'),
      description?: string(name='Description', example='desc'),
      experimentId?: string(name='ExperimentId'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      jobType?: string(name='JobType', example='1'),
      name?: string(name='Name', example='my experiment x'),
      searchSpace?: string(name='SearchSpace', example='{\\\\"foo\\\\":\\\\"bar\\\\"}'),
      status?: string(name='Status', example='CREATED, RUNNING, FINISHED, FAILED, EARLY_STOPPED, USER_CANCELED, SYS_CANCELED, WAITING, NO_MORE_TRIAL, UNKNOWN'),
      trialCount?: int32(name='TrialCount', example='20'),
      trialStatus?: map[string]string(name='TrialStatus'),
      workspaceId?: string(name='WorkspaceId', example='foo'),
    }
  ](name='Experiments'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount'),
}

model ListHpoExperimentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoExperimentsResponseBody(name='body'),
}

/**
 * @summary List hpo Experiments
 *
 * @param request ListHpoExperimentsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoExperimentsResponse
 */
async function listHpoExperimentsWithOptions(request: ListHpoExperimentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoExperimentsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    query['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.creator)) {
    query['Creator'] = request.creator;
  }
  if (!Util.isUnset(request.includeConfigData)) {
    query['IncludeConfigData'] = request.includeConfigData;
  }
  if (!Util.isUnset(request.maxCreateTime)) {
    query['MaxCreateTime'] = request.maxCreateTime;
  }
  if (!Util.isUnset(request.minCreateTime)) {
    query['MinCreateTime'] = request.minCreateTime;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.workspaceId)) {
    query['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHpoExperiments',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiments`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List hpo Experiments
 *
 * @param request ListHpoExperimentsRequest
 * @return ListHpoExperimentsResponse
 */
async function listHpoExperiments(request: ListHpoExperimentsRequest): ListHpoExperimentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoExperimentsWithOptions(request, headers, runtime);
}

model ListHpoTrialCommandsResponseBody = {
  code?: string(name='Code', example='INVALID_USER_OR_EXP'),
  commands?: [ 
    {
      command?: string(name='Command', example='dlc submit pytorch --name=test_nni_foo_bar'),
      id?: int32(name='Id', example='1'),
      output?: string(name='Output', example='foo'),
    }
  ](name='Commands'),
  detail?: map[string]string(name='Detail'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='071A904D-5A49-597F-9F69-81C7701D04AC'),
}

model ListHpoTrialCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialCommandsResponseBody(name='body'),
}

/**
 * @summary 返回一个trial所对应的任务里所有已经执行的命令
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoTrialCommandsResponse
 */
async function listHpoTrialCommandsWithOptions(ExperimentId: string, TrialId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoTrialCommandsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListHpoTrialCommands',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/trial/${OpenApiUtil.getEncodeParam(TrialId)}/commands`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 返回一个trial所对应的任务里所有已经执行的命令
 *
 * @return ListHpoTrialCommandsResponse
 */
async function listHpoTrialCommands(ExperimentId: string, TrialId: string): ListHpoTrialCommandsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoTrialCommandsWithOptions(ExperimentId, TrialId, headers, runtime);
}

model ListHpoTrialLogNamesResponseBody = {
  code?: string(name='Code', example='INVALID_INPUT_PARAMS'),
  detail?: map[string]string(name='Detail'),
  logNames?: [ string ](name='LogNames'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model ListHpoTrialLogNamesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialLogNamesResponseBody(name='body'),
}

/**
 * @summary 返回一个trial的所有的log文件的路径
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoTrialLogNamesResponse
 */
async function listHpoTrialLogNamesWithOptions(ExperimentId: string, TrialId: string, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoTrialLogNamesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListHpoTrialLogNames',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/trial/${OpenApiUtil.getEncodeParam(TrialId)}/lognames`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 返回一个trial的所有的log文件的路径
 *
 * @return ListHpoTrialLogNamesResponse
 */
async function listHpoTrialLogNames(ExperimentId: string, TrialId: string): ListHpoTrialLogNamesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoTrialLogNamesWithOptions(ExperimentId, TrialId, headers, runtime);
}

model ListHpoTrialLogsRequest {
  logName?: string(name='LogName', example='trial.log'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListHpoTrialLogsResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  detail?: map[string]any(name='Detail', example='{}'),
  logs?: [ string ](name='Logs'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount', example='123'),
}

model ListHpoTrialLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialLogsResponseBody(name='body'),
}

/**
 * @summary Get the content of specified hpo trial log
 *
 * @param request ListHpoTrialLogsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoTrialLogsResponse
 */
async function listHpoTrialLogsWithOptions(ExperimentId: string, TrialId: string, request: ListHpoTrialLogsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoTrialLogsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.logName)) {
    query['LogName'] = request.logName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHpoTrialLogs',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/trial/${OpenApiUtil.getEncodeParam(TrialId)}/logs`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get the content of specified hpo trial log
 *
 * @param request ListHpoTrialLogsRequest
 * @return ListHpoTrialLogsResponse
 */
async function listHpoTrialLogs(ExperimentId: string, TrialId: string, request: ListHpoTrialLogsRequest): ListHpoTrialLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoTrialLogsWithOptions(ExperimentId, TrialId, request, headers, runtime);
}

model ListHpoTrialsRequest {
  order?: string(name='Order', example='ASC'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortBy?: string(name='SortBy'),
}

model ListHpoTrialsResponseBody = {
  code?: string(name='Code', example='INVALID_USER_OR_EXP'),
  detail?: map[string]string(name='Detail'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
  totalCount?: int32(name='TotalCount', example='5'),
  trials?: [ 
    {
      experimentId?: string(name='ExperimentId'),
      finalMetric?: string(name='FinalMetric'),
      gmtCreateTime?: string(name='GmtCreateTime'),
      gmtModifiedTime?: string(name='GmtModifiedTime'),
      hyperparam?: string(name='Hyperparam'),
      jobMeta?: string(name='JobMeta'),
      metric?: string(name='Metric'),
      metricName?: string(name='MetricName'),
      model?: string(name='Model'),
      parameterId?: int32(name='ParameterId'),
      status?: string(name='Status'),
      trialId?: string(name='TrialId'),
      userComment?: string(name='UserComment'),
      userScore?: int32(name='UserScore'),
    }
  ](name='Trials'),
}

model ListHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHpoTrialsResponseBody(name='body'),
}

/**
 * @summary 返回指定实验id的trial
 *
 * @param request ListHpoTrialsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListHpoTrialsResponse
 */
async function listHpoTrialsWithOptions(ExperimentId: string, request: ListHpoTrialsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListHpoTrialsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHpoTrials',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/trials`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 返回指定实验id的trial
 *
 * @param request ListHpoTrialsRequest
 * @return ListHpoTrialsResponse
 */
async function listHpoTrials(ExperimentId: string, request: ListHpoTrialsRequest): ListHpoTrialsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listHpoTrialsWithOptions(ExperimentId, request, headers, runtime);
}

model RestartHpoTrialsRequest {
  trialHyperParameters?: string(name='TrialHyperParameters'),
  trialIds?: [ string ](name='TrialIds'),
}

model RestartHpoTrialsResponseBody = {
  code?: string(name='Code'),
  detail?: map[string]string(name='Detail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  results?: map[string]any(name='Results', example='{
\\\\"xrYq99\\\\": TrialJobInfo text,
\\\\"xrYq9N\\\\":TrialJobInfo text
}'),
}

model RestartHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartHpoTrialsResponseBody(name='body'),
}

/**
 * @summary Restart hpo trials
 *
 * @param request RestartHpoTrialsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestartHpoTrialsResponse
 */
async function restartHpoTrialsWithOptions(ExperimentId: string, request: RestartHpoTrialsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RestartHpoTrialsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.trialHyperParameters)) {
    body['TrialHyperParameters'] = request.trialHyperParameters;
  }
  if (!Util.isUnset(request.trialIds)) {
    body['TrialIds'] = request.trialIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RestartHpoTrials',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/restart_trials`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Restart hpo trials
 *
 * @param request RestartHpoTrialsRequest
 * @return RestartHpoTrialsResponse
 */
async function restartHpoTrials(ExperimentId: string, request: RestartHpoTrialsRequest): RestartHpoTrialsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restartHpoTrialsWithOptions(ExperimentId, request, headers, runtime);
}

model StopHpoExperimentResponseBody = {
  code?: string(name='Code'),
  detail?: map[string]string(name='Detail'),
  expId?: string(name='ExpId', example='sHpITOH'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopHpoExperimentResponseBody(name='body'),
}

/**
 * @summary calling hpo StopExperiment
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopHpoExperimentResponse
 */
async function stopHpoExperimentWithOptions(ExperimentId: string, headers: map[string]string, runtime: Util.RuntimeOptions): StopHpoExperimentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StopHpoExperiment',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/stop`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary calling hpo StopExperiment
 *
 * @return StopHpoExperimentResponse
 */
async function stopHpoExperiment(ExperimentId: string): StopHpoExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopHpoExperimentWithOptions(ExperimentId, headers, runtime);
}

model StopHpoTrialsRequest {
  trialIds?: [ string ](name='TrialIds'),
}

model StopHpoTrialsResponseBody = {
  code?: string(name='Code'),
  detail?: map[string]string(name='Detail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  results?: map[string]any(name='Results', example='{
    \\\\"xrYq99\\\\":\\\\"successfully stopped trial,\\\\",
    \\\\"xrYq9N\\\\":\\\\"failed to stop trial,\\\\"
}'),
}

model StopHpoTrialsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopHpoTrialsResponseBody(name='body'),
}

/**
 * @summary Stop trials of an experiment
 *
 * @param request StopHpoTrialsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopHpoTrialsResponse
 */
async function stopHpoTrialsWithOptions(ExperimentId: string, request: StopHpoTrialsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopHpoTrialsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.trialIds)) {
    body['TrialIds'] = request.trialIds;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'StopHpoTrials',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/stop_trials`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Stop trials of an experiment
 *
 * @param request StopHpoTrialsRequest
 * @return StopHpoTrialsResponse
 */
async function stopHpoTrials(ExperimentId: string, request: StopHpoTrialsRequest): StopHpoTrialsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopHpoTrialsWithOptions(ExperimentId, request, headers, runtime);
}

model UpdateHpoExperimentRequest {
  accessibility?: string(name='Accessibility', example='PRIVATE'),
  description?: string(name='Description', example='This is an AutoML HPO experiment.'),
  hpoExperimentConfiguration?: HpoExperimentConfig(name='HpoExperimentConfiguration'),
  name?: string(name='Name', example='my experiment x'),
  workspaceId?: string(name='WorkspaceId', example='12345'),
}

model UpdateHpoExperimentResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  detail?: map[string]any(name='Detail', example='{}'),
  message?: string(name='Message', example='Missing \\\\"user_id\\\\" in request.'),
  requestId?: string(name='RequestId', example='3F190916-B3E5-5D1E-AD0C-35C0DF105F51'),
}

model UpdateHpoExperimentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHpoExperimentResponseBody(name='body'),
}

/**
 * @summary Update the information of an HPO experiment
 *
 * @param request UpdateHpoExperimentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateHpoExperimentResponse
 */
async function updateHpoExperimentWithOptions(ExperimentId: string, request: UpdateHpoExperimentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateHpoExperimentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.accessibility)) {
    body['Accessibility'] = request.accessibility;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.hpoExperimentConfiguration)) {
    body['HpoExperimentConfiguration'] = request.hpoExperimentConfiguration;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.workspaceId)) {
    body['WorkspaceId'] = request.workspaceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHpoExperiment',
    version = '2022-08-28',
    protocol = 'HTTPS',
    pathname = `/api/automl/v1/hpo/experiment/${OpenApiUtil.getEncodeParam(ExperimentId)}/update`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update the information of an HPO experiment
 *
 * @param request UpdateHpoExperimentRequest
 * @return UpdateHpoExperimentResponse
 */
async function updateHpoExperiment(ExperimentId: string, request: UpdateHpoExperimentRequest): UpdateHpoExperimentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateHpoExperimentWithOptions(ExperimentId, request, headers, runtime);
}

