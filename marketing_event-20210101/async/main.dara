/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'marketing_event';
  @version = '2021-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model FindGuestCredentialsRecordRequest {
  activityId?: string(name='ActivityId', example='34429', position='Query'),
  dateTimeString?: string(name='DateTimeString', example='2023-08-07 12:00:00', position='Query'),
}

model FindGuestCredentialsRecordResponseBody = {
  data?: [ 
    {
      admin?: map[string]any(name='Admin', example='{}'),
      channelId?: long(name='ChannelId', example='1401'),
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName'),
        levelOneChannelName?: string(name='LevelOneChannelName'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_396545'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_160953'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_87239'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      credentialsCode?: string(name='CredentialsCode', example='3602-10010215'),
      credentialsName?: string(name='CredentialsName'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='0'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='25294484-D133-5BDC-8952-243AD90CDF66'),
  success?: boolean(name='Success', example='True'),
}

model FindGuestCredentialsRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestCredentialsRecordResponseBody(name='body'),
}

async function findGuestCredentialsRecord(request: FindGuestCredentialsRecordRequest): FindGuestCredentialsRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindGuestCredentialsRecord', 'POST', '/', 'json', false, 'json', request);
}

model FindGuestTicketRecordRequest {
  activityId?: string(name='ActivityId', example='34434', position='Query'),
  dateTimeString?: string(name='DateTimeString', example='2023-09-04 15:14:00', position='Query'),
}

model FindGuestTicketRecordResponseBody = {
  data?: [ 
    {
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName', example='VIP'),
        levelOneChannelName?: string(name='LevelOneChannelName', example='VIP'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName', example='VIP'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName', example='VIP'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      equityDates?: string(name='EquityDates', example='2023-10-31,2023-11-02'),
      healthCommitmentStatus?: int32(name='HealthCommitmentStatus', example='-1'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
      ticketCode?: string(name='TicketCode', example='3702-10240842'),
      ticketName?: string(name='TicketName'),
      ticketType?: string(name='TicketType', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='Success'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='8D190CE8-7D76-5781-8055-0990BBD2249F'),
  success?: boolean(name='Success', example='true'),
}

model FindGuestTicketRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestTicketRecordResponseBody(name='body'),
}

async function findGuestTicketRecord(request: FindGuestTicketRecordRequest): FindGuestTicketRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindGuestTicketRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllActivityInfoRequest {
  activityId: string(name='ActivityId', position='Query'),
}

model QueryAllActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='1234'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName'),
      customerName?: string(name='CustomerName', example='test'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='12123455'),
      QRCode?: string(name='QRCode'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QueryAllActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllActivityInfoResponseBody(name='body'),
}

async function queryAllActivityInfo(request: QueryAllActivityInfoRequest): QueryAllActivityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllActivityInfo', 'GET', '/', 'json', false, 'json', request);
}

model QuerySingleActivityInfoRequest {
  activityId: string(name='ActivityId', example='123', position='Query'),
  companyName?: string(name='CompanyName', position='Query'),
  customerName?: string(name='CustomerName', position='Query'),
  mobile?: string(name='Mobile', example='12233445', position='Query'),
  QRCode?: string(name='QRCode', position='Query'),
}

model QuerySingleActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='123'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName', example='aliyun'),
      customerName?: string(name='CustomerName', example='xxx'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id', example='1'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='234355**'),
      QRCode?: string(name='QRCode', example='http://xxx.com?a=xx'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QuerySingleActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleActivityInfoResponseBody(name='body'),
}

async function querySingleActivityInfo(request: QuerySingleActivityInfoRequest): QuerySingleActivityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySingleActivityInfo', 'GET', '/', 'json', false, 'json', request);
}

model SyncSignInInfoRequest {
  activityId: string(name='ActivityId', position='Query'),
  QRCode: string(name='QRCode', position='Query'),
}

model SyncSignInInfoResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncSignInInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSignInInfoResponseBody(name='body'),
}

async function syncSignInInfo(request: SyncSignInInfoRequest): SyncSignInInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncSignInInfo', 'GET', '/', 'json', false, 'json', request);
}

