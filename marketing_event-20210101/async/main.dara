/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'marketing_event';
  @version = '2021-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddSumRecordFlowPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: string(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  code?: string(name='Code', example='4546-100000', position='Query'),
  conferenceName: string(name='ConferenceName', description='This parameter is required.', example='会议名称', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='Z10', position='Query'),
  entryName: string(name='EntryName', description='This parameter is required.', example='入口名称', position='Query'),
  idcard?: string(name='Idcard', example='429005111100000', position='Query'),
  signTime: string(name='SignTime', description='This parameter is required.', example='2024-09-25 14:11', position='Query'),
  type: int32(name='Type', description='This parameter is required.', example='1', position='Query'),
}

model AddSumRecordFlowPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model AddSumRecordFlowPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSumRecordFlowPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSumRecordFlowPop  AddSumRecordFlowPopRequest
  * @return AddSumRecordFlowPopResponse
 */
async function addSumRecordFlowPop(request: AddSumRecordFlowPopRequest): AddSumRecordFlowPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSumRecordFlowPop', 'POST', '/', 'json', false, 'json', request);
}

model BindExhibitorRfidPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='Z10', position='Query'),
  gmtCreate?: string(name='GmtCreate', example='2024-09-25 14:11', position='Query'),
  gmtModified?: string(name='GmtModified', example='2024-09-25 14:11', position='Query'),
  guestTicketRecordId?: long(name='GuestTicketRecordId', example='451246', position='Query'),
  id?: long(name='Id', example='1', position='Query'),
  rfid: string(name='Rfid', description='This parameter is required.', example='asdojzopf', position='Query'),
  ticketCode: string(name='TicketCode', description='This parameter is required.', example='4546-100000', position='Query'),
}

model BindExhibitorRfidPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model BindExhibitorRfidPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindExhibitorRfidPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindExhibitorRfidPop  BindExhibitorRfidPopRequest
  * @return BindExhibitorRfidPopResponse
 */
async function bindExhibitorRfidPop(request: BindExhibitorRfidPopRequest): BindExhibitorRfidPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindExhibitorRfidPop', 'POST', '/', 'json', false, 'json', request);
}

model BindGuestRfidPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='Z10', position='Query'),
  gmtCreate?: string(name='GmtCreate', example='2024-09-25 14:11', position='Query'),
  gmtModified?: string(name='GmtModified', example='2024-09-25 14:11', position='Query'),
  guestTicketRecordId?: long(name='GuestTicketRecordId', example='451246', position='Query'),
  id?: long(name='Id', example='1', position='Query'),
  rfid: string(name='Rfid', description='This parameter is required.', example='asdojzopf', position='Query'),
  ticketCode: string(name='TicketCode', description='This parameter is required.', example='4546-100000', position='Query'),
}

model BindGuestRfidPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model BindGuestRfidPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindGuestRfidPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BindGuestRfidPop  BindGuestRfidPopRequest
  * @return BindGuestRfidPopResponse
 */
async function bindGuestRfidPop(request: BindGuestRfidPopRequest): BindGuestRfidPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BindGuestRfidPop', 'POST', '/', 'json', false, 'json', request);
}

model CheckNFCBindPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  nfcId: string(name='NfcId', description='This parameter is required.', example='asdojzopf', position='Query'),
}

model CheckNFCBindPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: {
    isGlobal?: int32(name='IsGlobal', example='0'),
    isSign?: boolean(name='IsSign', example='true'),
  }(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model CheckNFCBindPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckNFCBindPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckNFCBindPop  CheckNFCBindPopRequest
  * @return CheckNFCBindPopResponse
 */
async function checkNFCBindPop(request: CheckNFCBindPopRequest): CheckNFCBindPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckNFCBindPop', 'POST', '/', 'json', false, 'json', request);
}

model FindGuestCredentialsRecordRequest {
  activityId?: string(name='ActivityId', example='34429', position='Query'),
  dateTimeString?: string(name='DateTimeString', example='2023-08-07 12:00:00', position='Query'),
  endDateTime?: string(name='EndDateTime', position='Query'),
  startDateTime?: string(name='StartDateTime', position='Query'),
}

model FindGuestCredentialsRecordResponseBody = {
  data?: [ 
    {
      admin?: map[string]any(name='Admin', example='{}'),
      channelId?: long(name='ChannelId', example='1401'),
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName'),
        levelOneChannelName?: string(name='LevelOneChannelName'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_396545'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_160953'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_87239'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      credentialsCode?: string(name='CredentialsCode', example='3602-10010215'),
      credentialsName?: string(name='CredentialsName'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='0'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='25294484-D133-5BDC-8952-243AD90CDF66'),
  success?: boolean(name='Success', example='True'),
}

model FindGuestCredentialsRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestCredentialsRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindGuestCredentialsRecord  FindGuestCredentialsRecordRequest
  * @return FindGuestCredentialsRecordResponse
 */
async function findGuestCredentialsRecord(request: FindGuestCredentialsRecordRequest): FindGuestCredentialsRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindGuestCredentialsRecord', 'POST', '/', 'json', false, 'json', request);
}

model FindGuestTicketRecordRequest {
  activityId?: string(name='ActivityId', example='34434', position='Query'),
  dateTimeString?: string(name='DateTimeString', example='2023-09-04 15:14:00', position='Query'),
  endDateTime?: string(name='EndDateTime', position='Query'),
  startDateTime?: string(name='StartDateTime', position='Query'),
}

model FindGuestTicketRecordResponseBody = {
  data?: [ 
    {
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName', example='VIP'),
        levelOneChannelName?: string(name='LevelOneChannelName', example='VIP'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName', example='VIP'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName', example='VIP'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      equityDates?: string(name='EquityDates', example='2023-10-31,2023-11-02'),
      healthCommitmentStatus?: int32(name='HealthCommitmentStatus', example='-1'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
      ticketCode?: string(name='TicketCode', example='3702-10240842'),
      ticketName?: string(name='TicketName'),
      ticketType?: string(name='TicketType', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='Success'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='8D190CE8-7D76-5781-8055-0990BBD2249F'),
  success?: boolean(name='Success', example='true'),
}

model FindGuestTicketRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestTicketRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindGuestTicketRecord  FindGuestTicketRecordRequest
  * @return FindGuestTicketRecordResponse
 */
async function findGuestTicketRecord(request: FindGuestTicketRecordRequest): FindGuestTicketRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindGuestTicketRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryAllActivityInfoRequest {
  activityId: string(name='ActivityId', description='This parameter is required.', position='Query'),
}

model QueryAllActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='1234'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName'),
      customerName?: string(name='CustomerName', example='test'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='12123455'),
      QRCode?: string(name='QRCode'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QueryAllActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllActivityInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAllActivityInfo  QueryAllActivityInfoRequest
  * @return QueryAllActivityInfoResponse
 */
async function queryAllActivityInfo(request: QueryAllActivityInfoRequest): QueryAllActivityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAllActivityInfo', 'GET', '/', 'json', false, 'json', request);
}

model QueryOrderSessionListPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  nfcId: string(name='NfcId', description='This parameter is required.', example='asdojzopf', position='Query'),
}

model QueryOrderSessionListPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      sessionId?: long(name='SessionId', example='1'),
      signInDate?: string(name='SignInDate', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QueryOrderSessionListPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderSessionListPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrderSessionListPop  QueryOrderSessionListPopRequest
  * @return QueryOrderSessionListPopResponse
 */
async function queryOrderSessionListPop(request: QueryOrderSessionListPopRequest): QueryOrderSessionListPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrderSessionListPop', 'POST', '/', 'json', false, 'json', request);
}

model QuerySessionByActivityIdPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
}

model QuerySessionByActivityIdPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      description?: string(name='Description', example='描述'),
      descriptionEn?: string(name='DescriptionEn', example='description'),
      endDateTime?: string(name='EndDateTime', example='2024-09-25 14:11'),
      id?: long(name='Id', example='1'),
      location?: string(name='Location', example='地点'),
      name?: string(name='Name', example='1234'),
      nameEn?: string(name='NameEn', example='name'),
      startDateTime?: string(name='StartDateTime', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySessionByActivityIdPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionByActivityIdPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySessionByActivityIdPop  QuerySessionByActivityIdPopRequest
  * @return QuerySessionByActivityIdPopResponse
 */
async function querySessionByActivityIdPop(request: QuerySessionByActivityIdPopRequest): QuerySessionByActivityIdPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySessionByActivityIdPop', 'POST', '/', 'json', false, 'json', request);
}

model QuerySessionListPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  nfcId: string(name='NfcId', description='This parameter is required.', example='asdojzopf', position='Query'),
}

model QuerySessionListPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      code?: string(name='Code', description='code', example='code'),
      endTime?: string(name='EndTime', example='2024-09-25 14:11'),
      id?: long(name='Id', description='id', example='1'),
      location?: string(name='Location', description='location', example='location'),
      name?: string(name='Name', description='name', example='name'),
      startTime?: string(name='StartTime', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySessionListPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionListPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySessionListPop  QuerySessionListPopRequest
  * @return QuerySessionListPopResponse
 */
async function querySessionListPop(request: QuerySessionListPopRequest): QuerySessionListPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySessionListPop', 'POST', '/', 'json', false, 'json', request);
}

model QuerySignInRecordPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: long(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  endTime?: string(name='EndTime', example='2024-09-25 14:11', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  startTime?: string(name='StartTime', example='2024-09-25 14:11', position='Query'),
}

model QuerySignInRecordPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      event?: string(name='Event', example='boarding'),
      rfid?: string(name='Rfid', description='nfcid', example='cshdsaodhoashd'),
      sessionId?: long(name='SessionId', description='sessionId', example='2001'),
      time?: string(name='Time', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySignInRecordPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySignInRecordPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySignInRecordPop  QuerySignInRecordPopRequest
  * @return QuerySignInRecordPopResponse
 */
async function querySignInRecordPop(request: QuerySignInRecordPopRequest): QuerySignInRecordPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySignInRecordPop', 'POST', '/', 'json', false, 'json', request);
}

model QuerySingleActivityInfoRequest {
  activityId: string(name='ActivityId', description='This parameter is required.', example='123', position='Query'),
  companyName?: string(name='CompanyName', position='Query'),
  customerName?: string(name='CustomerName', position='Query'),
  mobile?: string(name='Mobile', example='12233445', position='Query'),
  QRCode?: string(name='QRCode', position='Query'),
}

model QuerySingleActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='123'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName', example='aliyun'),
      customerName?: string(name='CustomerName', example='xxx'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id', example='1'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='234355**'),
      QRCode?: string(name='QRCode', example='http://xxx.com?a=xx'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QuerySingleActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleActivityInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySingleActivityInfo  QuerySingleActivityInfoRequest
  * @return QuerySingleActivityInfoResponse
 */
async function querySingleActivityInfo(request: QuerySingleActivityInfoRequest): QuerySingleActivityInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySingleActivityInfo', 'GET', '/', 'json', false, 'json', request);
}

model SyncSignInInfoRequest {
  activityId: string(name='ActivityId', description='This parameter is required.', position='Query'),
  QRCode: string(name='QRCode', description='This parameter is required.', position='Query'),
}

model SyncSignInInfoResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncSignInInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSignInInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncSignInInfo  SyncSignInInfoRequest
  * @return SyncSignInInfoResponse
 */
async function syncSignInInfo(request: SyncSignInInfoRequest): SyncSignInInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncSignInInfo', 'GET', '/', 'json', false, 'json', request);
}

model TicketOrCredentialsSignInPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  activityId: string(name='ActivityId', description='This parameter is required.', example='4546', position='Query'),
  code?: string(name='Code', example='4546-100000', position='Query'),
  conferenceName: string(name='ConferenceName', description='This parameter is required.', example='会议名称', position='Query'),
  deviceId: string(name='DeviceId', description='This parameter is required.', example='Z10', position='Query'),
  entryName: string(name='EntryName', description='This parameter is required.', example='入口名称', position='Query'),
  idcard?: string(name='Idcard', example='429005111100000', position='Query'),
  signTime: string(name='SignTime', description='This parameter is required.', example='2024-09-25 14:11', position='Query'),
  type: int32(name='Type', description='This parameter is required.', example='1', position='Query'),
}

model TicketOrCredentialsSignInPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: any(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model TicketOrCredentialsSignInPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketOrCredentialsSignInPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TicketOrCredentialsSignInPop  TicketOrCredentialsSignInPopRequest
  * @return TicketOrCredentialsSignInPopResponse
 */
async function ticketOrCredentialsSignInPop(request: TicketOrCredentialsSignInPopRequest): TicketOrCredentialsSignInPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TicketOrCredentialsSignInPop', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCredentialsStatusPopRequest {
  regionId?: string(name='RegionId', position='Host'),
  code?: string(name='Code', example='4546-100000', position='Query'),
  proxyRecipientName?: string(name='ProxyRecipientName', example='张三', position='Query'),
  proxyRecipientPhoneNumber?: string(name='ProxyRecipientPhoneNumber', example='14787627188', position='Query'),
  receiptLocation?: string(name='ReceiptLocation', example='Z30', position='Query'),
  time?: string(name='Time', example='429005111100000', position='Query'),
}

model UpdateCredentialsStatusPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCredentialsStatusPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCredentialsStatusPopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCredentialsStatusPop  UpdateCredentialsStatusPopRequest
  * @return UpdateCredentialsStatusPopResponse
 */
async function updateCredentialsStatusPop(request: UpdateCredentialsStatusPopRequest): UpdateCredentialsStatusPopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCredentialsStatusPop', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTicketRecordByticketCodePopRequest {
  regionId?: string(name='RegionId', position='Host'),
  agendaId?: string(name='AgendaId', example='3402', position='Query'),
  code?: string(name='Code', example='4546-100000', position='Query'),
  event?: string(name='Event', example='boarding', position='Query'),
  sceneId?: string(name='SceneId', example='12345', position='Query'),
  time?: string(name='Time', example='2024-09-25 14:11', position='Query'),
}

model UpdateTicketRecordByticketCodePopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTicketRecordByticketCodePopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTicketRecordByticketCodePopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTicketRecordByticketCodePop  UpdateTicketRecordByticketCodePopRequest
  * @return UpdateTicketRecordByticketCodePopResponse
 */
async function updateTicketRecordByticketCodePop(request: UpdateTicketRecordByticketCodePopRequest): UpdateTicketRecordByticketCodePopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTicketRecordByticketCodePop', 'POST', '/', 'json', false, 'json', request);
}

