/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('marketing_event', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model FindGuestCredentialsRecordRequest {
  activityId?: string(name='ActivityId', example='34429'),
  dateTimeString?: string(name='DateTimeString', example='2023-08-07 12:00:00'),
}

model FindGuestCredentialsRecordResponseBody = {
  data?: [ 
    {
      admin?: map[string]any(name='Admin', example='{}'),
      channelId?: long(name='ChannelId', example='1401'),
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName'),
        levelOneChannelName?: string(name='LevelOneChannelName'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_396545'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_160953'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_87239'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      credentialsCode?: string(name='CredentialsCode', example='3602-10010215'),
      credentialsName?: string(name='CredentialsName'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='0'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='25294484-D133-5BDC-8952-243AD90CDF66'),
  success?: boolean(name='Success', example='True'),
}

model FindGuestCredentialsRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestCredentialsRecordResponseBody(name='body'),
}

/**
 * @summary 拉取领证人员记录
 *
 * @param request FindGuestCredentialsRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindGuestCredentialsRecordResponse
 */
async function findGuestCredentialsRecordWithOptions(request: FindGuestCredentialsRecordRequest, runtime: Util.RuntimeOptions): FindGuestCredentialsRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!Util.isUnset(request.dateTimeString)) {
    query['DateTimeString'] = request.dateTimeString;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindGuestCredentialsRecord',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 拉取领证人员记录
 *
 * @param request FindGuestCredentialsRecordRequest
 * @return FindGuestCredentialsRecordResponse
 */
async function findGuestCredentialsRecord(request: FindGuestCredentialsRecordRequest): FindGuestCredentialsRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return findGuestCredentialsRecordWithOptions(request, runtime);
}

model FindGuestTicketRecordRequest {
  activityId?: string(name='ActivityId', example='34434'),
  dateTimeString?: string(name='DateTimeString', example='2023-09-04 15:14:00'),
}

model FindGuestTicketRecordResponseBody = {
  data?: [ 
    {
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName', example='VIP'),
        levelOneChannelName?: string(name='LevelOneChannelName', example='VIP'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName', example='VIP'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName', example='VIP'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      equityDates?: string(name='EquityDates', example='2023-10-31,2023-11-02'),
      healthCommitmentStatus?: int32(name='HealthCommitmentStatus', example='-1'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
      ticketCode?: string(name='TicketCode', example='3702-10240842'),
      ticketName?: string(name='TicketName'),
      ticketType?: string(name='TicketType', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='Success'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='8D190CE8-7D76-5781-8055-0990BBD2249F'),
  success?: boolean(name='Success', example='true'),
}

model FindGuestTicketRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestTicketRecordResponseBody(name='body'),
}

/**
 * @summary 云栖大会获取取票人信息list接口
 *
 * @param request FindGuestTicketRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindGuestTicketRecordResponse
 */
async function findGuestTicketRecordWithOptions(request: FindGuestTicketRecordRequest, runtime: Util.RuntimeOptions): FindGuestTicketRecordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!Util.isUnset(request.dateTimeString)) {
    query['DateTimeString'] = request.dateTimeString;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindGuestTicketRecord',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 云栖大会获取取票人信息list接口
 *
 * @param request FindGuestTicketRecordRequest
 * @return FindGuestTicketRecordResponse
 */
async function findGuestTicketRecord(request: FindGuestTicketRecordRequest): FindGuestTicketRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return findGuestTicketRecordWithOptions(request, runtime);
}

model QueryAllActivityInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.'),
}

model QueryAllActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='1234'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName'),
      customerName?: string(name='CustomerName', example='test'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='12123455'),
      QRCode?: string(name='QRCode'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QueryAllActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllActivityInfoResponseBody(name='body'),
}

/**
 * @param request QueryAllActivityInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAllActivityInfoResponse
 */
async function queryAllActivityInfoWithOptions(request: QueryAllActivityInfoRequest, runtime: Util.RuntimeOptions): QueryAllActivityInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAllActivityInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryAllActivityInfoRequest
 * @return QueryAllActivityInfoResponse
 */
async function queryAllActivityInfo(request: QueryAllActivityInfoRequest): QueryAllActivityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAllActivityInfoWithOptions(request, runtime);
}

model QuerySingleActivityInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.', example='123'),
  companyName?: string(name='CompanyName'),
  customerName?: string(name='CustomerName'),
  mobile?: string(name='Mobile', example='12233445'),
  QRCode?: string(name='QRCode'),
}

model QuerySingleActivityInfoResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='123'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName', example='aliyun'),
      customerName?: string(name='CustomerName', example='xxx'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id', example='1'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='234355**'),
      QRCode?: string(name='QRCode', example='http://xxx.com?a=xx'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QuerySingleActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleActivityInfoResponseBody(name='body'),
}

/**
 * @param request QuerySingleActivityInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySingleActivityInfoResponse
 */
async function querySingleActivityInfoWithOptions(request: QuerySingleActivityInfoRequest, runtime: Util.RuntimeOptions): QuerySingleActivityInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySingleActivityInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySingleActivityInfoRequest
 * @return QuerySingleActivityInfoResponse
 */
async function querySingleActivityInfo(request: QuerySingleActivityInfoRequest): QuerySingleActivityInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySingleActivityInfoWithOptions(request, runtime);
}

model SyncSignInInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.'),
  QRCode?: string(name='QRCode', description='This parameter is required.'),
}

model SyncSignInInfoResponseBody = {
  code?: string(name='Code'),
  data?: int32(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncSignInInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSignInInfoResponseBody(name='body'),
}

/**
 * @param request SyncSignInInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncSignInInfoResponse
 */
async function syncSignInInfoWithOptions(request: SyncSignInInfoRequest, runtime: Util.RuntimeOptions): SyncSignInInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SyncSignInInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SyncSignInInfoRequest
 * @return SyncSignInInfoResponse
 */
async function syncSignInInfo(request: SyncSignInInfoRequest): SyncSignInInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncSignInInfoWithOptions(request, runtime);
}

