/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('marketing_event', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddSumRecordFlowPopRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.', example='4546'),
  code?: string(name='Code', example='4546-100000'),
  conferenceName?: string(name='ConferenceName', description='This parameter is required.', example='会议名称'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='Z10'),
  entryName?: string(name='EntryName', description='This parameter is required.', example='入口名称'),
  idcard?: string(name='Idcard', example='429005111100000'),
  signTime?: string(name='SignTime', description='This parameter is required.', example='2024-09-25 14:11'),
  type?: int32(name='Type', description='This parameter is required.', example='1'),
}

model AddSumRecordFlowPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model AddSumRecordFlowPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSumRecordFlowPopResponseBody(name='body'),
}

/**
 * @param request AddSumRecordFlowPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddSumRecordFlowPopResponse
 */
@context("addSumRecordFlowPopWithContext")
async function addSumRecordFlowPopWithOptions(request: AddSumRecordFlowPopRequest, runtime: $RuntimeOptions): AddSumRecordFlowPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.conferenceName)) {
    query['ConferenceName'] = request.conferenceName;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.entryName)) {
    query['EntryName'] = request.entryName;
  }
  if (!$isNull(request.idcard)) {
    query['Idcard'] = request.idcard;
  }
  if (!$isNull(request.signTime)) {
    query['SignTime'] = request.signTime;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'AddSumRecordFlowPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request AddSumRecordFlowPopRequest
 * @return AddSumRecordFlowPopResponse
 */
async function addSumRecordFlowPop(request: AddSumRecordFlowPopRequest): AddSumRecordFlowPopResponse {
  var runtime = new $RuntimeOptions{};
  return addSumRecordFlowPopWithOptions(request, runtime);
}

model BindExhibitorRfidPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='Z10'),
  gmtCreate?: string(name='GmtCreate', example='2024-09-25 14:11'),
  gmtModified?: string(name='GmtModified', example='2024-09-25 14:11'),
  guestTicketRecordId?: long(name='GuestTicketRecordId', example='451246'),
  id?: long(name='Id', example='1'),
  rfid?: string(name='Rfid', description='This parameter is required.', example='asdojzopf'),
  ticketCode?: string(name='TicketCode', description='This parameter is required.', example='4546-100000'),
}

model BindExhibitorRfidPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model BindExhibitorRfidPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindExhibitorRfidPopResponseBody(name='body'),
}

/**
 * @param request BindExhibitorRfidPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindExhibitorRfidPopResponse
 */
@context("bindExhibitorRfidPopWithContext")
async function bindExhibitorRfidPopWithOptions(request: BindExhibitorRfidPopRequest, runtime: $RuntimeOptions): BindExhibitorRfidPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!$isNull(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!$isNull(request.guestTicketRecordId)) {
    query['GuestTicketRecordId'] = request.guestTicketRecordId;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.rfid)) {
    query['Rfid'] = request.rfid;
  }
  if (!$isNull(request.ticketCode)) {
    query['TicketCode'] = request.ticketCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindExhibitorRfidPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BindExhibitorRfidPopRequest
 * @return BindExhibitorRfidPopResponse
 */
async function bindExhibitorRfidPop(request: BindExhibitorRfidPopRequest): BindExhibitorRfidPopResponse {
  var runtime = new $RuntimeOptions{};
  return bindExhibitorRfidPopWithOptions(request, runtime);
}

model BindGuestRfidPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='Z10'),
  gmtCreate?: string(name='GmtCreate', example='2024-09-25 14:11'),
  gmtModified?: string(name='GmtModified', example='2024-09-25 14:11'),
  guestTicketRecordId?: long(name='GuestTicketRecordId', example='451246'),
  id?: long(name='Id', example='1'),
  rfid?: string(name='Rfid', description='This parameter is required.', example='asdojzopf'),
  ticketCode?: string(name='TicketCode', description='This parameter is required.', example='4546-100000'),
}

model BindGuestRfidPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model BindGuestRfidPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BindGuestRfidPopResponseBody(name='body'),
}

/**
 * @param request BindGuestRfidPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BindGuestRfidPopResponse
 */
@context("bindGuestRfidPopWithContext")
async function bindGuestRfidPopWithOptions(request: BindGuestRfidPopRequest, runtime: $RuntimeOptions): BindGuestRfidPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.gmtCreate)) {
    query['GmtCreate'] = request.gmtCreate;
  }
  if (!$isNull(request.gmtModified)) {
    query['GmtModified'] = request.gmtModified;
  }
  if (!$isNull(request.guestTicketRecordId)) {
    query['GuestTicketRecordId'] = request.guestTicketRecordId;
  }
  if (!$isNull(request.id)) {
    query['Id'] = request.id;
  }
  if (!$isNull(request.rfid)) {
    query['Rfid'] = request.rfid;
  }
  if (!$isNull(request.ticketCode)) {
    query['TicketCode'] = request.ticketCode;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'BindGuestRfidPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request BindGuestRfidPopRequest
 * @return BindGuestRfidPopResponse
 */
async function bindGuestRfidPop(request: BindGuestRfidPopRequest): BindGuestRfidPopResponse {
  var runtime = new $RuntimeOptions{};
  return bindGuestRfidPopWithOptions(request, runtime);
}

model CheckNFCBindPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  nfcId?: string(name='NfcId', description='This parameter is required.', example='asdojzopf'),
}

model CheckNFCBindPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: {
    isGlobal?: int32(name='IsGlobal', example='0'),
    isSign?: boolean(name='IsSign', example='true'),
  }(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model CheckNFCBindPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckNFCBindPopResponseBody(name='body'),
}

/**
 * @param request CheckNFCBindPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckNFCBindPopResponse
 */
@context("checkNFCBindPopWithContext")
async function checkNFCBindPopWithOptions(request: CheckNFCBindPopRequest, runtime: $RuntimeOptions): CheckNFCBindPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.nfcId)) {
    query['NfcId'] = request.nfcId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckNFCBindPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request CheckNFCBindPopRequest
 * @return CheckNFCBindPopResponse
 */
async function checkNFCBindPop(request: CheckNFCBindPopRequest): CheckNFCBindPopResponse {
  var runtime = new $RuntimeOptions{};
  return checkNFCBindPopWithOptions(request, runtime);
}

model FindGuestCredentialsRecordRequest {
  activityId?: string(name='ActivityId', example='34429'),
  dateTimeString?: string(name='DateTimeString', example='2023-08-07 12:00:00'),
  endDateTime?: string(name='EndDateTime'),
  startDateTime?: string(name='StartDateTime'),
}

model FindGuestCredentialsRecordResponseBody = {
  data?: [ 
    {
      admin?: map[string]any(name='Admin', example='{}'),
      channelId?: long(name='ChannelId', example='1401'),
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName'),
        levelOneChannelName?: string(name='LevelOneChannelName'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_396545'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_160953'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='hBCycGELqJd6LEqSWKiLCQ=='),
            ownerName?: string(name='OwnerName', example='buc_87239'),
            ownerNickName?: string(name='OwnerNickName', example='hBCycGELqJd6LEqSWKiLCQ=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      credentialsCode?: string(name='CredentialsCode', example='3602-10010215'),
      credentialsName?: string(name='CredentialsName'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='0'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='25294484-D133-5BDC-8952-243AD90CDF66'),
  success?: boolean(name='Success', example='True'),
}

model FindGuestCredentialsRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestCredentialsRecordResponseBody(name='body'),
}

/**
 * @summary 拉取领证人员记录
 *
 * @param request FindGuestCredentialsRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindGuestCredentialsRecordResponse
 */
@context("findGuestCredentialsRecordWithContext")
async function findGuestCredentialsRecordWithOptions(request: FindGuestCredentialsRecordRequest, runtime: $RuntimeOptions): FindGuestCredentialsRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.dateTimeString)) {
    query['DateTimeString'] = request.dateTimeString;
  }
  if (!$isNull(request.endDateTime)) {
    query['EndDateTime'] = request.endDateTime;
  }
  if (!$isNull(request.startDateTime)) {
    query['StartDateTime'] = request.startDateTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'FindGuestCredentialsRecord',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 拉取领证人员记录
 *
 * @param request FindGuestCredentialsRecordRequest
 * @return FindGuestCredentialsRecordResponse
 */
async function findGuestCredentialsRecord(request: FindGuestCredentialsRecordRequest): FindGuestCredentialsRecordResponse {
  var runtime = new $RuntimeOptions{};
  return findGuestCredentialsRecordWithOptions(request, runtime);
}

model FindGuestTicketRecordRequest {
  activityId?: string(name='ActivityId', example='34434'),
  dateTimeString?: string(name='DateTimeString', example='2023-09-04 15:14:00'),
  endDateTime?: string(name='EndDateTime'),
  startDateTime?: string(name='StartDateTime'),
}

model FindGuestTicketRecordResponseBody = {
  data?: [ 
    {
      channelLevelInfo?: {
        channelId?: long(name='ChannelId', example='1401'),
        channelName?: string(name='ChannelName', example='VIP'),
        levelOneChannelName?: string(name='LevelOneChannelName', example='VIP'),
        levelOneOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelOneOwner'),
        levelThreeChannelName?: string(name='LevelThreeChannelName', example='VIP'),
        levelThreeOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelThreeOwner'),
        levelTwoChannelName?: string(name='LevelTwoChannelName', example='VIP'),
        levelTwoOwner?: [ 
          {
            ownerEmpIdOrTelephone?: string(name='OwnerEmpIdOrTelephone', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
            ownerName?: string(name='OwnerName'),
            ownerNickName?: string(name='OwnerNickName', example='dUffKUpLXP5LFGeJa+Rs8Q=='),
          }
        ](name='LevelTwoOwner'),
      }(name='ChannelLevelInfo'),
      companyName?: string(name='CompanyName'),
      equityDates?: string(name='EquityDates', example='2023-10-31,2023-11-02'),
      healthCommitmentStatus?: int32(name='HealthCommitmentStatus', example='-1'),
      idNumber?: string(name='IdNumber', example='IjEqZpp8Wn29+sqOr3hxXuOqn6CyKYNSQ5dmMA0txiM='),
      idType?: string(name='IdType'),
      name?: string(name='Name'),
      status?: int32(name='Status', example='1'),
      ticketCode?: string(name='TicketCode', example='3702-10240842'),
      ticketName?: string(name='TicketName'),
      ticketReceiveDates?: string(name='TicketReceiveDates'),
      ticketType?: string(name='TicketType', example='1'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='Success'),
  errMessage?: string(name='ErrMessage', example='error'),
  requestId?: string(name='RequestId', example='8D190CE8-7D76-5781-8055-0990BBD2249F'),
  success?: boolean(name='Success', example='true'),
}

model FindGuestTicketRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindGuestTicketRecordResponseBody(name='body'),
}

/**
 * @summary 云栖大会获取取票人信息list接口
 *
 * @param request FindGuestTicketRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindGuestTicketRecordResponse
 */
@context("findGuestTicketRecordWithContext")
async function findGuestTicketRecordWithOptions(request: FindGuestTicketRecordRequest, runtime: $RuntimeOptions): FindGuestTicketRecordResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.dateTimeString)) {
    query['DateTimeString'] = request.dateTimeString;
  }
  if (!$isNull(request.endDateTime)) {
    query['EndDateTime'] = request.endDateTime;
  }
  if (!$isNull(request.startDateTime)) {
    query['StartDateTime'] = request.startDateTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'FindGuestTicketRecord',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 云栖大会获取取票人信息list接口
 *
 * @param request FindGuestTicketRecordRequest
 * @return FindGuestTicketRecordResponse
 */
async function findGuestTicketRecord(request: FindGuestTicketRecordRequest): FindGuestTicketRecordResponse {
  var runtime = new $RuntimeOptions{};
  return findGuestTicketRecordWithOptions(request, runtime);
}

model QueryAllActivityInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.'),
}

model QueryAllActivityInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='1234'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName'),
      customerName?: string(name='CustomerName', example='test'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='12123455'),
      QRCode?: string(name='QRCode'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QueryAllActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAllActivityInfoResponseBody(name='body'),
}

/**
 * @param request QueryAllActivityInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAllActivityInfoResponse
 */
@context("queryAllActivityInfoWithContext")
async function queryAllActivityInfoWithOptions(request: QueryAllActivityInfoRequest, runtime: $RuntimeOptions): QueryAllActivityInfoResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryAllActivityInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryAllActivityInfoRequest
 * @return QueryAllActivityInfoResponse
 */
async function queryAllActivityInfo(request: QueryAllActivityInfoRequest): QueryAllActivityInfoResponse {
  var runtime = new $RuntimeOptions{};
  return queryAllActivityInfoWithOptions(request, runtime);
}

model QueryOrderSessionListPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  nfcId?: string(name='NfcId', description='This parameter is required.', example='asdojzopf'),
}

model QueryOrderSessionListPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      sessionId?: long(name='SessionId', example='1'),
      signInDate?: string(name='SignInDate', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QueryOrderSessionListPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrderSessionListPopResponseBody(name='body'),
}

/**
 * @param request QueryOrderSessionListPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryOrderSessionListPopResponse
 */
@context("queryOrderSessionListPopWithContext")
async function queryOrderSessionListPopWithOptions(request: QueryOrderSessionListPopRequest, runtime: $RuntimeOptions): QueryOrderSessionListPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.nfcId)) {
    query['NfcId'] = request.nfcId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QueryOrderSessionListPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QueryOrderSessionListPopRequest
 * @return QueryOrderSessionListPopResponse
 */
async function queryOrderSessionListPop(request: QueryOrderSessionListPopRequest): QueryOrderSessionListPopResponse {
  var runtime = new $RuntimeOptions{};
  return queryOrderSessionListPopWithOptions(request, runtime);
}

model QuerySessionByActivityIdPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
}

model QuerySessionByActivityIdPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      description?: string(name='Description', example='描述'),
      descriptionEn?: string(name='DescriptionEn', example='description'),
      endDateTime?: string(name='EndDateTime', example='2024-09-25 14:11'),
      id?: long(name='Id', example='1'),
      location?: string(name='Location', example='地点'),
      name?: string(name='Name', example='1234'),
      nameEn?: string(name='NameEn', example='name'),
      startDateTime?: string(name='StartDateTime', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySessionByActivityIdPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionByActivityIdPopResponseBody(name='body'),
}

/**
 * @param request QuerySessionByActivityIdPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySessionByActivityIdPopResponse
 */
@context("querySessionByActivityIdPopWithContext")
async function querySessionByActivityIdPopWithOptions(request: QuerySessionByActivityIdPopRequest, runtime: $RuntimeOptions): QuerySessionByActivityIdPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySessionByActivityIdPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySessionByActivityIdPopRequest
 * @return QuerySessionByActivityIdPopResponse
 */
async function querySessionByActivityIdPop(request: QuerySessionByActivityIdPopRequest): QuerySessionByActivityIdPopResponse {
  var runtime = new $RuntimeOptions{};
  return querySessionByActivityIdPopWithOptions(request, runtime);
}

model QuerySessionListPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  nfcId?: string(name='NfcId', description='This parameter is required.', example='asdojzopf'),
}

model QuerySessionListPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      code?: string(name='Code', description='code', example='code'),
      endTime?: string(name='EndTime', example='2024-09-25 14:11'),
      id?: long(name='Id', description='id', example='1'),
      location?: string(name='Location', description='location', example='location'),
      name?: string(name='Name', description='name', example='name'),
      startTime?: string(name='StartTime', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySessionListPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionListPopResponseBody(name='body'),
}

/**
 * @param request QuerySessionListPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySessionListPopResponse
 */
@context("querySessionListPopWithContext")
async function querySessionListPopWithOptions(request: QuerySessionListPopRequest, runtime: $RuntimeOptions): QuerySessionListPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.nfcId)) {
    query['NfcId'] = request.nfcId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySessionListPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySessionListPopRequest
 * @return QuerySessionListPopResponse
 */
async function querySessionListPop(request: QuerySessionListPopRequest): QuerySessionListPopResponse {
  var runtime = new $RuntimeOptions{};
  return querySessionListPopWithOptions(request, runtime);
}

model QuerySignInRecordPopRequest {
  activityId?: long(name='ActivityId', description='This parameter is required.', example='4546'),
  endTime?: string(name='EndTime', example='2024-09-25 14:11'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  startTime?: string(name='StartTime', example='2024-09-25 14:11'),
}

model QuerySignInRecordPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: [ 
    {
      event?: string(name='Event', example='boarding'),
      rfid?: string(name='Rfid', description='nfcid', example='cshdsaodhoashd'),
      sessionId?: long(name='SessionId', description='sessionId', example='2001'),
      time?: string(name='Time', example='2024-09-25 14:11'),
    }
  ](name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model QuerySignInRecordPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySignInRecordPopResponseBody(name='body'),
}

/**
 * @param request QuerySignInRecordPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySignInRecordPopResponse
 */
@context("querySignInRecordPopWithContext")
async function querySignInRecordPopWithOptions(request: QuerySignInRecordPopRequest, runtime: $RuntimeOptions): QuerySignInRecordPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!$isNull(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!$isNull(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySignInRecordPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySignInRecordPopRequest
 * @return QuerySignInRecordPopResponse
 */
async function querySignInRecordPop(request: QuerySignInRecordPopRequest): QuerySignInRecordPopResponse {
  var runtime = new $RuntimeOptions{};
  return querySignInRecordPopWithOptions(request, runtime);
}

model QuerySingleActivityInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.', example='123'),
  companyName?: string(name='CompanyName'),
  customerName?: string(name='CustomerName'),
  mobile?: string(name='Mobile', example='12233445'),
  QRCode?: string(name='QRCode'),
}

model QuerySingleActivityInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      activityId?: long(name='ActivityId', example='123'),
      channelName?: string(name='ChannelName', example='vip'),
      companyName?: string(name='CompanyName', example='aliyun'),
      customerName?: string(name='CustomerName', example='xxx'),
      email?: string(name='Email', example='xx@aliyun.com'),
      id?: long(name='Id', example='1'),
      isVipCustomer?: string(name='IsVipCustomer', example='true'),
      mobile?: string(name='Mobile', example='234355**'),
      QRCode?: string(name='QRCode', example='http://xxx.com?a=xx'),
      reportFields?: string(name='ReportFields', example='{}'),
    }
  ](name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model QuerySingleActivityInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySingleActivityInfoResponseBody(name='body'),
}

/**
 * @param request QuerySingleActivityInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySingleActivityInfoResponse
 */
@context("querySingleActivityInfoWithContext")
async function querySingleActivityInfoWithOptions(request: QuerySingleActivityInfoRequest, runtime: $RuntimeOptions): QuerySingleActivityInfoResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'QuerySingleActivityInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request QuerySingleActivityInfoRequest
 * @return QuerySingleActivityInfoResponse
 */
async function querySingleActivityInfo(request: QuerySingleActivityInfoRequest): QuerySingleActivityInfoResponse {
  var runtime = new $RuntimeOptions{};
  return querySingleActivityInfoWithOptions(request, runtime);
}

model SyncSignInInfoRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.'),
  QRCode?: string(name='QRCode', description='This parameter is required.'),
}

model SyncSignInInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code'),
  data?: int32(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncSignInInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncSignInInfoResponseBody(name='body'),
}

/**
 * @param request SyncSignInInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SyncSignInInfoResponse
 */
@context("syncSignInInfoWithContext")
async function syncSignInInfoWithOptions(request: SyncSignInInfoRequest, runtime: $RuntimeOptions): SyncSignInInfoResponse {
  request.validate();
  var query = OpenApiUtil.query(request.toMap());
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'SyncSignInInfo',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request SyncSignInInfoRequest
 * @return SyncSignInInfoResponse
 */
async function syncSignInInfo(request: SyncSignInInfoRequest): SyncSignInInfoResponse {
  var runtime = new $RuntimeOptions{};
  return syncSignInInfoWithOptions(request, runtime);
}

model TicketOrCredentialsSignInPopRequest {
  activityId?: string(name='ActivityId', description='This parameter is required.', example='4546'),
  code?: string(name='Code', example='4546-100000'),
  conferenceName?: string(name='ConferenceName', description='This parameter is required.', example='会议名称'),
  deviceId?: string(name='DeviceId', description='This parameter is required.', example='Z10'),
  entryName?: string(name='EntryName', description='This parameter is required.', example='入口名称'),
  idcard?: string(name='Idcard', example='429005111100000'),
  signTime?: string(name='SignTime', description='This parameter is required.', example='2024-09-25 14:11'),
  type?: int32(name='Type', description='This parameter is required.', example='1'),
}

model TicketOrCredentialsSignInPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: any(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model TicketOrCredentialsSignInPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TicketOrCredentialsSignInPopResponseBody(name='body'),
}

/**
 * @param request TicketOrCredentialsSignInPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TicketOrCredentialsSignInPopResponse
 */
@context("ticketOrCredentialsSignInPopWithContext")
async function ticketOrCredentialsSignInPopWithOptions(request: TicketOrCredentialsSignInPopRequest, runtime: $RuntimeOptions): TicketOrCredentialsSignInPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.activityId)) {
    query['ActivityId'] = request.activityId;
  }
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.conferenceName)) {
    query['ConferenceName'] = request.conferenceName;
  }
  if (!$isNull(request.deviceId)) {
    query['DeviceId'] = request.deviceId;
  }
  if (!$isNull(request.entryName)) {
    query['EntryName'] = request.entryName;
  }
  if (!$isNull(request.idcard)) {
    query['Idcard'] = request.idcard;
  }
  if (!$isNull(request.signTime)) {
    query['SignTime'] = request.signTime;
  }
  if (!$isNull(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'TicketOrCredentialsSignInPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request TicketOrCredentialsSignInPopRequest
 * @return TicketOrCredentialsSignInPopResponse
 */
async function ticketOrCredentialsSignInPop(request: TicketOrCredentialsSignInPopRequest): TicketOrCredentialsSignInPopResponse {
  var runtime = new $RuntimeOptions{};
  return ticketOrCredentialsSignInPopWithOptions(request, runtime);
}

model UpdateCredentialsStatusPopRequest {
  code?: string(name='Code', example='4546-100000'),
  proxyRecipientName?: string(name='ProxyRecipientName', example='张三'),
  proxyRecipientPhoneNumber?: string(name='ProxyRecipientPhoneNumber', example='14787627188'),
  receiptLocation?: string(name='ReceiptLocation', example='Z30'),
  time?: string(name='Time', example='429005111100000'),
}

model UpdateCredentialsStatusPopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model UpdateCredentialsStatusPopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCredentialsStatusPopResponseBody(name='body'),
}

/**
 * @param request UpdateCredentialsStatusPopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCredentialsStatusPopResponse
 */
@context("updateCredentialsStatusPopWithContext")
async function updateCredentialsStatusPopWithOptions(request: UpdateCredentialsStatusPopRequest, runtime: $RuntimeOptions): UpdateCredentialsStatusPopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.proxyRecipientName)) {
    query['ProxyRecipientName'] = request.proxyRecipientName;
  }
  if (!$isNull(request.proxyRecipientPhoneNumber)) {
    query['ProxyRecipientPhoneNumber'] = request.proxyRecipientPhoneNumber;
  }
  if (!$isNull(request.receiptLocation)) {
    query['ReceiptLocation'] = request.receiptLocation;
  }
  if (!$isNull(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateCredentialsStatusPop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateCredentialsStatusPopRequest
 * @return UpdateCredentialsStatusPopResponse
 */
async function updateCredentialsStatusPop(request: UpdateCredentialsStatusPopRequest): UpdateCredentialsStatusPopResponse {
  var runtime = new $RuntimeOptions{};
  return updateCredentialsStatusPopWithOptions(request, runtime);
}

model UpdateTicketRecordByticketCodePopRequest {
  agendaId?: string(name='AgendaId', example='3402'),
  code?: string(name='Code', example='4546-100000'),
  event?: string(name='Event', example='boarding'),
  sceneId?: string(name='SceneId', example='12345'),
  time?: string(name='Time', example='2024-09-25 14:11'),
}

model UpdateTicketRecordByticketCodePopResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='deny'),
  data?: boolean(name='Data', example='data'),
  errCode?: string(name='ErrCode', example='200'),
  errMessage?: string(name='ErrMessage', example='error'),
  httpStatusCode?: int32(name='HttpStatusCode', example='403'),
  requestId?: string(name='RequestId', example='1skladklasmda'),
  success?: boolean(name='Success', example='true'),
}

model UpdateTicketRecordByticketCodePopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTicketRecordByticketCodePopResponseBody(name='body'),
}

/**
 * @param request UpdateTicketRecordByticketCodePopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTicketRecordByticketCodePopResponse
 */
@context("updateTicketRecordByticketCodePopWithContext")
async function updateTicketRecordByticketCodePopWithOptions(request: UpdateTicketRecordByticketCodePopRequest, runtime: $RuntimeOptions): UpdateTicketRecordByticketCodePopResponse {
  request.validate();
  var query = {};
  if (!$isNull(request.agendaId)) {
    query['AgendaId'] = request.agendaId;
  }
  if (!$isNull(request.code)) {
    query['Code'] = request.code;
  }
  if (!$isNull(request.event)) {
    query['Event'] = request.event;
  }
  if (!$isNull(request.sceneId)) {
    query['SceneId'] = request.sceneId;
  }
  if (!$isNull(request.time)) {
    query['Time'] = request.time;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateTicketRecordByticketCodePop',
    version = '2021-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @param request UpdateTicketRecordByticketCodePopRequest
 * @return UpdateTicketRecordByticketCodePopResponse
 */
async function updateTicketRecordByticketCodePop(request: UpdateTicketRecordByticketCodePopRequest): UpdateTicketRecordByticketCodePopResponse {
  var runtime = new $RuntimeOptions{};
  return updateTicketRecordByticketCodePopWithOptions(request, runtime);
}

