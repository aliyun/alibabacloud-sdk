/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eiam', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AuthorizeApplicationToOrganizationalUnitsRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk2676xxxx'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='被授权的组织ID的列表，必填，列表中最多包含100个元素。', example='ou_wovwffm62xifdziem7an7xxxxx'),
}

model AuthorizeApplicationToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToOrganizationalUnitsResponseBody(name='body'),
}

async function authorizeApplicationToOrganizationalUnitsWithOptions(request: AuthorizeApplicationToOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): AuthorizeApplicationToOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeApplicationToOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeApplicationToOrganizationalUnits(request: AuthorizeApplicationToOrganizationalUnitsRequest): AuthorizeApplicationToOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeApplicationToOrganizationalUnitsWithOptions(request, runtime);
}

model AuthorizeApplicationToUsersRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk2676xxxx'),
  userIds?: [ string ](name='UserIds', description='被授权的账户ID列表，必填，列表中最多包含100个元素。', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model AuthorizeApplicationToUsersResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToUsersResponseBody(name='body'),
}

async function authorizeApplicationToUsersWithOptions(request: AuthorizeApplicationToUsersRequest, runtime: Util.RuntimeOptions): AuthorizeApplicationToUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeApplicationToUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeApplicationToUsers(request: AuthorizeApplicationToUsersRequest): AuthorizeApplicationToUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeApplicationToUsersWithOptions(request, runtime);
}

model CreateApplicationRequest {
  applicationName?: string(name='ApplicationName', description='应用的表示名称', example='Ram Account SSO'),
  applicationSourceType?: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用', example='urn:alibaba:idaas:app:source:standard'),
  applicationTemplateId?: string(name='ApplicationTemplateId', description='应用创建来源为模板应用时必须指定', example='template_cloud_ram'),
  description?: string(name='Description', description='应用的描述信息', example='某个Uid的RAM账号SSO应用'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk2676xxxx'),
  logoUrl?: string(name='LogoUrl', description='应用Logo地址', example='https://oss.cn-hangzhou.aliyuncs.com/logo.png'),
  ssoType?: string(name='SsoType', description='单点登录类型，saml2 or oidc', example='saml2'),
}

model CreateApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', example='app_mkv7rgt4d7i4u7zqtzev2mnkom'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationSourceType)) {
    query['ApplicationSourceType'] = request.applicationSourceType;
  }
  if (!Util.isUnset(request.applicationTemplateId)) {
    query['ApplicationTemplateId'] = request.applicationTemplateId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logoUrl)) {
    query['LogoUrl'] = request.logoUrl;
  }
  if (!Util.isUnset(request.ssoType)) {
    query['SsoType'] = request.ssoType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model CreateApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='IDaaS EIAM 客户端密钥', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id', example='sci_k52x2ru63rlkflina5utgkxxxx'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationClientSecretResponseBody(name='body'),
}

async function createApplicationClientSecretWithOptions(request: CreateApplicationClientSecretRequest, runtime: Util.RuntimeOptions): CreateApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplicationClientSecret(request: CreateApplicationClientSecretRequest): CreateApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationClientSecretWithOptions(request, runtime);
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='idaas_wj5htncdvoc4q5xxxxxxxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(runtime: Util.RuntimeOptions): CreateInstanceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(runtime);
}

model DeleteApplicationRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_11111'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='eiam-111ccc1111'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeleteApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  secretId?: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', example='sci_k52x2ru63rlkflina5utgkxxxx'),
}

model DeleteApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationClientSecretResponseBody(name='body'),
}

async function deleteApplicationClientSecretWithOptions(request: DeleteApplicationClientSecretRequest, runtime: Util.RuntimeOptions): DeleteApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplicationClientSecret(request: DeleteApplicationClientSecretRequest): DeleteApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationClientSecretWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='eiam-111ccc1111'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DisableApplicationRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model DisableApplicationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationResponseBody(name='body'),
}

async function disableApplicationWithOptions(request: DisableApplicationRequest, runtime: Util.RuntimeOptions): DisableApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplication(request: DisableApplicationRequest): DisableApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationWithOptions(request, runtime);
}

model DisableApplicationApiInvokeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_11111'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='eiam-111ccc1111'),
}

model DisableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationApiInvokeResponseBody(name='body'),
}

async function disableApplicationApiInvokeWithOptions(request: DisableApplicationApiInvokeRequest, runtime: Util.RuntimeOptions): DisableApplicationApiInvokeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationApiInvoke',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationApiInvoke(request: DisableApplicationApiInvokeRequest): DisableApplicationApiInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationApiInvokeWithOptions(request, runtime);
}

model DisableApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  secretId?: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥ID', example='sci_k52x2ru63rlkflina5utgkxxxx'),
}

model DisableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationClientSecretResponseBody(name='body'),
}

async function disableApplicationClientSecretWithOptions(request: DisableApplicationClientSecretRequest, runtime: Util.RuntimeOptions): DisableApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationClientSecret(request: DisableApplicationClientSecretRequest): DisableApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationClientSecretWithOptions(request, runtime);
}

model DisableApplicationProvisioningRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model DisableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationProvisioningResponseBody(name='body'),
}

async function disableApplicationProvisioningWithOptions(request: DisableApplicationProvisioningRequest, runtime: Util.RuntimeOptions): DisableApplicationProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationProvisioning',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationProvisioning(request: DisableApplicationProvisioningRequest): DisableApplicationProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationProvisioningWithOptions(request, runtime);
}

model EnableApplicationRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model EnableApplicationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationResponseBody(name='body'),
}

async function enableApplicationWithOptions(request: EnableApplicationRequest, runtime: Util.RuntimeOptions): EnableApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplication(request: EnableApplicationRequest): EnableApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationWithOptions(request, runtime);
}

model EnableApplicationApiInvokeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_11111'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='eiam-111ccc1111'),
}

model EnableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationApiInvokeResponseBody(name='body'),
}

async function enableApplicationApiInvokeWithOptions(request: EnableApplicationApiInvokeRequest, runtime: Util.RuntimeOptions): EnableApplicationApiInvokeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationApiInvoke',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationApiInvoke(request: EnableApplicationApiInvokeRequest): EnableApplicationApiInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationApiInvokeWithOptions(request, runtime);
}

model EnableApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  secretId?: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', example='sci_k52x2ru63rlkflina5utgkxxxx'),
}

model EnableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationClientSecretResponseBody(name='body'),
}

async function enableApplicationClientSecretWithOptions(request: EnableApplicationClientSecretRequest, runtime: Util.RuntimeOptions): EnableApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationClientSecret(request: EnableApplicationClientSecretRequest): EnableApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationClientSecretWithOptions(request, runtime);
}

model EnableApplicationProvisioningRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model EnableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationProvisioningResponseBody(name='body'),
}

async function enableApplicationProvisioningWithOptions(request: EnableApplicationProvisioningRequest, runtime: Util.RuntimeOptions): EnableApplicationProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationProvisioning',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationProvisioning(request: EnableApplicationProvisioningRequest): EnableApplicationProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationProvisioningWithOptions(request, runtime);
}

model GetApplicationRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用资源ID。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetApplicationResponseBody = {
  application?: {
    apiInvokeStatus?: string(name='ApiInvokeStatus', description='IDaaS EIAM 应用apiInvoke能力启用状态', example='disabled'),
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    applicationName?: string(name='ApplicationName', description='IDaaS EIAM 应用名称'),
    applicationSourceType?: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用', example='urn:alibaba:idaas:app:source:template'),
    applicationTemplateId?: string(name='ApplicationTemplateId', description='创建来源应用模板id。当且仅当创建来源为应用模板时才返回。'),
    authorizationType?: string(name='AuthorizationType', description='IDaaS EIAM 应用授权类型，default or authorize_required', example='authorize_required'),
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    createTime?: long(name='CreateTime', description='IDaaS EIAM 应用创建时间', example='1649830226000'),
    description?: string(name='Description', description='IDaaS EIAM 应用描述信息'),
    features?: string(name='Features', description='IDaaS EIAM 应用支持的特性，provisioning、permission_system、api_invoke等', example='["sso", "provision"]'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    logoUrl?: string(name='LogoUrl', description='IDaaS EIAM 应用图标URL地址', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
    managedServiceCode?: string(name='ManagedServiceCode', description='托管应用模板的云产品ServiceCode。当且仅当ServiceManaged为true是返回。', example='rpa'),
    serviceManaged?: boolean(name='ServiceManaged', description='应用模板是否被云产品托管。', example='true'),
    ssoType?: string(name='SsoType', description='IDaaS EIAM 应用支持的sso协议类型，oidc、saml2', example='saml2'),
    status?: string(name='Status', description='IDaaS EIAM 应用状态', example='enabled'),
    updateTime?: long(name='UpdateTime', description='IDaaS EIAM 应用最近更新时间', example='1649830226000'),
  }(name='Application'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetApplicationGrantScopeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetApplicationGrantScopeResponseBody = {
  applicationGrantScope?: {
    grantScopes?: [ string ](name='GrantScopes', description='应用授权的api权限scope列表'),
  }(name='ApplicationGrantScope'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationGrantScopeResponseBody(name='body'),
}

async function getApplicationGrantScopeWithOptions(request: GetApplicationGrantScopeRequest, runtime: Util.RuntimeOptions): GetApplicationGrantScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationGrantScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationGrantScope(request: GetApplicationGrantScopeRequest): GetApplicationGrantScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationGrantScopeWithOptions(request, runtime);
}

model GetApplicationProvisioningConfigRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用资源ID。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetApplicationProvisioningConfigResponseBody = {
  applicationProvisioningConfig?: {
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    callbackProvisioningConfig?: {
      callbackUrl?: string(name='CallbackUrl', description='IDaaS回调SP地址，当provisionProtocolType为idaas_callback时必填', example='https://example.com/event/callback'),
      encryptKey?: string(name='EncryptKey', description='IDaaS回调对称加密秘钥, AES 256格式', example='1adfdfdfd******111'),
      encryptRequired?: boolean(name='EncryptRequired', description='IDaaS回调是否加密', example='true'),
      listenEventScopes?: [ string ](name='ListenEventScopes', description='IDaaS回调事件监听范围'),
    }(name='CallbackProvisioningConfig', description='IDaaS回调同步配置，当provisionProtocolType为idaas_callback时必填'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    provisionJwksEndpoint?: string(name='ProvisionJwksEndpoint', description='应用同步验签公钥端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk267xxxxx/app_mkv7rgt4d7i4u7zqtzev2mxxxx/provisioning/jwks'),
    provisionPassword?: boolean(name='ProvisionPassword', description='同步信息是否包含密码', example='true'),
    provisionProtocolType?: string(name='ProvisionProtocolType', description='IDaaS EIAM 应用同步协议，scim2 or custom or idaas_callback', example='idaas_callback'),
    scimProvisioningConfig?: {
      authnConfiguration?: {
        authnMode?: string(name='AuthnMode', description='认证类型'),
        authnParam?: {
          accessToken?: string(name='AccessToken', description='accessToken'),
          authnMethod?: string(name='AuthnMethod', description='oauth2 authentication method'),
          clientId?: string(name='ClientId', description='oauth2 client id'),
          clientSecret?: string(name='ClientSecret', description='oauth2 client secret'),
          tokenEndpoint?: string(name='TokenEndpoint', description='oauth2 token端点'),
        }(name='AuthnParam', description='授权相关配置'),
        grantType?: string(name='GrantType', description='授权模式'),
      }(name='AuthnConfiguration', description='scim同步相关配置'),
      fullPushScopes?: [ string ](name='FullPushScopes', description='全量推送范围'),
      provisioningActions?: [ string ](name='ProvisioningActions', description='目标资源操作行为'),
      scimBaseUrl?: string(name='ScimBaseUrl', description='scim同步端点'),
    }(name='ScimProvisioningConfig', description='IDaaS SCIM同步配置，当provisionProtocolType为scim2时填写该配置'),
    status?: string(name='Status', description='IDaaS 应用同步启用状态', example='enabled'),
  }(name='ApplicationProvisioningConfig'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningConfigResponseBody(name='body'),
}

async function getApplicationProvisioningConfigWithOptions(request: GetApplicationProvisioningConfigRequest, runtime: Util.RuntimeOptions): GetApplicationProvisioningConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationProvisioningConfig(request: GetApplicationProvisioningConfigRequest): GetApplicationProvisioningConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationProvisioningConfigWithOptions(request, runtime);
}

model GetApplicationProvisioningScopeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetApplicationProvisioningScopeResponseBody = {
  applicationProvisioningScope?: {
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='同步授权的组织机构列表'),
  }(name='ApplicationProvisioningScope'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScopeWithOptions(request: GetApplicationProvisioningScopeRequest, runtime: Util.RuntimeOptions): GetApplicationProvisioningScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationProvisioningScopeWithOptions(request, runtime);
}

model GetApplicationSsoConfigRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用资源ID。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetApplicationSsoConfigResponseBody = {
  applicationSsoConfig?: {
    initLoginType?: string(name='InitLoginType', description='初始化登录方式，idp_init or sp_init or idp_or_sp_init', example='only_app_init_sso'),
    initLoginUrl?: string(name='InitLoginUrl', description='仅SP-init情况下，SP指定的登录地址', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF'),
    oidcSsoConfig?: {
      accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='返回的access token有效时间，单位为Second', example='1200'),
      codeEffectiveTime?: long(name='CodeEffectiveTime', description='Authorization code流中code的有效时间，单位为Second', example='60'),
      customClaims?: [ 
        {
          claimName?: string(name='ClaimName', description='返回的claim名称', example='userOuIds'),
          claimValueExpression?: string(name='ClaimValueExpression', description='返回的claim取值表达式', example='ObjectToJsonString(user.organizationalUnits)'),
        }
      ](name='CustomClaims', description='自定义id token返回信息'),
      grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等', example='profile，email'),
      grantTypes?: [ string ](name='GrantTypes', description='应用支持的授权类型，OIDC标准参数', example='authorization_code'),
      idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='id token有效时间，单位为Second', example='1200'),
      passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='密码模式使用的身份认证来源id，仅对password模式生效', example='ia_password'),
      passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='是否强制需要TOTP二次认证，仅对password模式生效', example='true'),
      pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='支持的PKCE算法类型', example='S256'),
      pkceRequired?: boolean(name='PkceRequired', description='是否强制PKCE,authorization_code强制必须指定PKCE参数', example='true'),
      postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='Logout回调支持的Uri列表，OIDC协议标准参数。'),
      redirectUris?: [ string ](name='RedirectUris', description='应用SSO支持的回调的uri列表，OIDC标准参数。'),
      refreshTokenEffective?: long(name='RefreshTokenEffective', description='refresh token有效时间，单位为Second', example='86400'),
      responseTypes?: [ string ](name='ResponseTypes', description='隐式流支持的返回类型，OIDC标准参数，如token id_token', example='token id_token'),
      subjectIdExpression?: string(name='SubjectIdExpression', description='自定义id token返回信息', example='user.userid'),
    }(name='OidcSsoConfig', description='IDaaS OIDC SSO配置，单点登录类型为Oidc时可以配置'),
    protocolEndpointDomain?: {
      oauth2AuthorizationEndpoint?: string(name='Oauth2AuthorizationEndpoint', description='单点登录地址，接受认证请求', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/authorize'),
      oauth2DeviceAuthorizationEndpoint?: string(name='Oauth2DeviceAuthorizationEndpoint', description='oauth2设备模式授权端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/device/code'),
      oauth2RevokeEndpoint?: string(name='Oauth2RevokeEndpoint', description='吊销 access token 端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/revoke'),
      oauth2TokenEndpoint?: string(name='Oauth2TokenEndpoint', description='换取access token 端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/token'),
      oauth2UserinfoEndpoint?: string(name='Oauth2UserinfoEndpoint', description='获取用户信息端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/userinfo'),
      oidcIssuer?: string(name='OidcIssuer', description='OIDC issuer地址，类似于SAML Entity ID', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc'),
      oidcJwksEndpoint?: string(name='OidcJwksEndpoint', description='获取公钥信息端点', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc/jwks'),
      oidcLogoutEndpoint?: string(name='OidcLogoutEndpoint', description='OIDC RP-initial Logout端点', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/logout'),
      samlMetaEndpoint?: string(name='SamlMetaEndpoint', description='IdP 单点登录地址 SSO URL', example='https://l1seshcn.aliyunidaas.com/api/v2/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/meta'),
      samlSsoEndpoint?: string(name='SamlSsoEndpoint', description='saml SSO URL 单点登录地址', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/sso'),
    }(name='ProtocolEndpointDomain', description='IDaaS metadata 端点配置信息'),
    samlSsoConfig?: {
      attributeStatements?: [ 
        {
          attributeName?: string(name='AttributeName', description='SAML属性的Name', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
          attributeValueExpression?: string(name='AttributeValueExpression', description='SAML属性取值表达式', example='user.username'),
        }
      ](name='AttributeStatements', description='SAML断言的属性配置'),
      defaultRelayState?: string(name='DefaultRelayState', description='默认RelayState取值，可空', example='https://home.console.aliyun.com'),
      nameIdFormat?: string(name='NameIdFormat', description='SAML标准协议中的NameID格式', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
      nameIdValueExpression?: string(name='NameIdValueExpression', description='返回的claim名称', example='user.username'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='IDaaS签发SAML断言时使用的签名算法', example='RSA-SHA256'),
      spEntityId?: string(name='SpEntityId', description='SP的EntityId，用于唯一标识SP身份', example='urn:alibaba:cloudcomputing'),
      spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='SP的SSO地址，用于接受IDaaS签发的SAML断言', example='https://signin.aliyun.com/saml-role/sso'),
    }(name='SamlSsoConfig', description='IDaaS SAML SSO配置，单点登录类型为saml2时可以配置'),
    ssoStatus?: string(name='SsoStatus', description='应用 SSO 启用状态', example='enabled'),
  }(name='ApplicationSsoConfig'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationSsoConfigResponseBody(name='body'),
}

async function getApplicationSsoConfigWithOptions(request: GetApplicationSsoConfigRequest, runtime: Util.RuntimeOptions): GetApplicationSsoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationSsoConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationSsoConfig(request: GetApplicationSsoConfigRequest): GetApplicationSsoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationSsoConfigWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetInstanceResponseBody = {
  instance?: {
    createTime?: long(name='CreateTime', description='实例的创建时间', example='1550115455000'),
    defaultEndpoint?: {
      endpoint?: string(name='Endpoint', description='用户portal和应用开发集成的端点地址', example='example-xxx.aliyunidaas.com'),
      status?: string(name='Status', description='实例域名状态，Unresolved(未解析)、Resolved(已解析)', example='resolved'),
    }(name='DefaultEndpoint', description='实例默认域名,用户portal和应用开发集成的端点地址'),
    description?: string(name='Description', description='实例描述信息'),
    egressAddresses?: [ string ](name='EgressAddresses', description='IDaaS实例出口公网地址段'),
    instanceId?: string(name='InstanceId', description='实例id', example='idaas_abt3pfwojojcq323si6g5xxxxx'),
    status?: string(name='Status', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)', example='running'),
  }(name='Instance'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetOrganizationalUnitRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='机构Id', example='ou_wovwffm62xifdziem7an7xxxxx'),
}

model GetOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='创建时间', example='1652085686179'),
    description?: string(name='Description', description='描述'),
    instanceId?: string(name='InstanceId', description='实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='外部ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称', example='name001'),
    organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='来源ID', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='来源类型, build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导]', example='build_in'),
    parentId?: string(name='ParentId', description='父机构ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间', example='1652085686179'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnitWithOptions(request: GetOrganizationalUnitRequest, runtime: Util.RuntimeOptions): GetOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrganizationalUnitWithOptions(request, runtime);
}

model GetRootOrganizationalUnitRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model GetRootOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='创建时间', example='1652085686179'),
    description?: string(name='Description', description='描述'),
    instanceId?: string(name='InstanceId', description='实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称', example='name001'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间', example='1652085686179'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetRootOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRootOrganizationalUnitResponseBody(name='body'),
}

async function getRootOrganizationalUnitWithOptions(request: GetRootOrganizationalUnitRequest, runtime: Util.RuntimeOptions): GetRootOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRootOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRootOrganizationalUnit(request: GetRootOrganizationalUnitRequest): GetRootOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRootOrganizationalUnitWithOptions(request, runtime);
}

model GetUserRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  userId?: string(name='UserId', description='账号ID', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  user?: {
    accountExpireTime?: long(name='AccountExpireTime', description='账户过期时间', example='1652085686179'),
    createTime?: long(name='CreateTime', description='创建时间', example='1652085686179'),
    customFields?: [ 
      {
        fieldName?: string(name='FieldName', description='字段标识'),
        fieldValue?: string(name='FieldValue', description='字段数据值'),
      }
    ](name='CustomFields', description='账户扩展字段列表'),
    description?: string(name='Description', description='账号描述'),
    displayName?: string(name='DisplayName', description='账户显示名', example='display_name001'),
    email?: string(name='Email', description='邮箱', example='example@xxx.com'),
    emailVerified?: boolean(name='EmailVerified', description='邮箱是否已验证', example='true'),
    instanceId?: string(name='InstanceId', description='实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lockExpireTime?: long(name='LockExpireTime', description='锁定过期时间', example='1652085686179'),
    organizationalUnits?: [ 
      {
        organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID'),
        organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称'),
        primary?: boolean(name='Primary', description='是否主机构'),
      }
    ](name='OrganizationalUnits', description='账户所属组织列表'),
    passwordExpireTime?: long(name='PasswordExpireTime'),
    passwordSet?: boolean(name='PasswordSet', description='密码是否已设置'),
    phoneNumber?: string(name='PhoneNumber', description='手机号码', example='156xxxxxxx'),
    phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='手机号是否已验证', example='true'),
    phoneRegion?: string(name='PhoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +', example='86'),
    primaryOrganizationalUnitId?: string(name='PrimaryOrganizationalUnitId', description='账户主机构ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
    registerTime?: long(name='RegisterTime', description='账户注册时间', example='1652085686179'),
    status?: string(name='Status', description='账户状态, enabled:启用,disabled:禁用', example='enabled'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间', example='1652085686179'),
    userExternalId?: string(name='UserExternalId', description='外部ID', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userId?: string(name='UserId', description='账户ID', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userSourceId?: string(name='UserSourceId', description='来源ID', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    userSourceType?: string(name='UserSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]', example='build_in'),
    username?: string(name='Username', description='账户名', example='name001'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model ListApplicationClientSecretsRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model ListApplicationClientSecretsResponseBody = {
  applicationClientSecrets?: [ 
    {
      applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientSecret?: string(name='ClientSecret', description='客户端密钥（已脱敏）', example='eyJh*****************************************************************************************************OQ'),
      instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_wdziy4vnjt33ehhf7z2o2nxxxx'),
      lastUsedTime?: long(name='LastUsedTime', description='IDaaS EIAM 客户端密钥最近使用时间', example='1649830226000'),
      secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id', example='sci_k52x2ru63rlkflina5utgkxxxx'),
      status?: string(name='Status', description='IDaaS EIAM 客户端密钥状态', example='enabled'),
    }
  ](name='ApplicationClientSecrets'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListApplicationClientSecretsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationClientSecretsResponseBody(name='body'),
}

async function listApplicationClientSecretsWithOptions(request: ListApplicationClientSecretsRequest, runtime: Util.RuntimeOptions): ListApplicationClientSecretsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationClientSecrets',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationClientSecrets(request: ListApplicationClientSecretsRequest): ListApplicationClientSecretsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationClientSecretsWithOptions(request, runtime);
}

model ListApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='应用Id列表', example='Ram Account SSO'),
  applicationName?: string(name='ApplicationName', description='应用的表示名称', example='Ram Account SSO'),
  authorizationType?: string(name='AuthorizationType', description='应用的授权类型。', example='authorize_required'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20', example='20'),
  status?: string(name='Status', description='应用状态检索条件', example='enabled'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      applicationName?: string(name='ApplicationName', description='IDaaS EIAM 应用名称'),
      applicationSourceType?: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用', example='urn:alibaba:idaas:app:source:standard'),
      clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      createTime?: long(name='CreateTime', description='IDaaS EIAM 应用创建时间', example='1649830226000'),
      description?: string(name='Description', description='IDaaS EIAM 应用描述信息'),
      features?: string(name='Features', description='IDaaS EIAM 应用支持的特性，provisioning、permission_system、api_invoke等', example='["sso", "provision"]'),
      instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      logoUrl?: string(name='LogoUrl', description='IDaaS EIAM 应用图标URL地址', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
      managedServiceCode?: string(name='ManagedServiceCode', description='托管应用模板的云产品ServiceCode。当且仅当ServiceManaged为true是返回。'),
      serviceManaged?: boolean(name='ServiceManaged', description='应用模板是否被云产品托管。'),
      ssoType?: string(name='SsoType', description='IDaaS EIAM 应用支持的sso协议类型，oidc、saml2', example='saml2'),
      status?: string(name='Status', description='IDaaS EIAM 应用状态', example='enabled'),
      updateTime?: long(name='UpdateTime', description='IDaaS EIAM 应用最近更新时间', example='1649830226000'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplicationsWithOptions(request: ListApplicationsRequest, runtime: Util.RuntimeOptions): ListApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.authorizationType)) {
    query['AuthorizationType'] = request.authorizationType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplications',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithOptions(request, runtime);
}

model ListApplicationsForOrganizationalUnitRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='非必填，如果填写则可以基于应用ID进行过滤，列表中最多包含100个元素。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='组织的唯一标识。', example='ou_wovwffm62xifdziem7an7xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
}

model ListApplicationsForOrganizationalUnitResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListApplicationsForOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForOrganizationalUnitResponseBody(name='body'),
}

async function listApplicationsForOrganizationalUnitWithOptions(request: ListApplicationsForOrganizationalUnitRequest, runtime: Util.RuntimeOptions): ListApplicationsForOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForOrganizationalUnit(request: ListApplicationsForOrganizationalUnitRequest): ListApplicationsForOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForOrganizationalUnitWithOptions(request, runtime);
}

model ListApplicationsForUserRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='非必填，如果填写则可以基于应用ID进行过滤，列表中最多包含100个元素。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
  queryMode?: string(name='QueryMode', description='有两种查询模式，IncludeInherit-包含继承的权限，OnlyDirect-不包含继承的权限，默认值：OnlyDirect', example='OnlyDirect'),
  userId?: string(name='UserId', description='账户的唯一标识。', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model ListApplicationsForUserResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      hasDirectAuthorization?: boolean(name='HasDirectAuthorization', description='直接分配给当前用户的权限，视为直接授权。', example='true'),
      hasInheritAuthorization?: boolean(name='HasInheritAuthorization', description='通过用户隶属的组织、组获取的权限，视为继承权限。', example='false'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListApplicationsForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForUserResponseBody(name='body'),
}

async function listApplicationsForUserWithOptions(request: ListApplicationsForUserRequest, runtime: Util.RuntimeOptions): ListApplicationsForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryMode)) {
    query['QueryMode'] = request.queryMode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForUser(request: ListApplicationsForUserRequest): ListApplicationsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForUserWithOptions(request, runtime);
}

model ListInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds', description='实例ID列表，支持0到100个'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20', example='20'),
  status?: string(name='Status', description='实例状态', example='running'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime', description='实例的创建时间', example='1550115455000'),
      defaultEndpoint?: {
        endpoint?: string(name='Endpoint', description='用户portal和应用开发集成的端点地址', example='example-xxx.aliyunidaas.com'),
        status?: string(name='Status', description='实例域名状态，Unresolved(未解析)、Resolved(已解析)', example='resolved'),
      }(name='DefaultEndpoint', description='实例默认域名,用户portal和应用开发集成的端点地址'),
      description?: string(name='Description', description='实例描述信息'),
      instanceId?: string(name='InstanceId', description='实例id', example='idaas_eypq6ljgyeuwmlw672sulxxxxx'),
      status?: string(name='Status', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)', example='running'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListOrganizationalUnitsRequest {
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称', example='name_001'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
  parentId?: string(name='ParentId', description='父机构ID', example='ou_001'),
}

model ListOrganizationalUnitsResponseBody = {
  organizationalUnits?: [ 
    {
      createTime?: long(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='描述'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='外部ID'),
      organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID'),
      organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='来源ID'),
      organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='来源类型, build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导]'),
      parentId?: string(name='ParentId', description='父机构ID'),
      updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnitsWithOptions(request: ListOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): ListOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    query['OrganizationalUnitName'] = request.organizationalUnitName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrganizationalUnitsWithOptions(request, runtime);
}

model ListOrganizationalUnitsForApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='非必填，如果填写则可以基于组织ID进行过滤，列表中最多包含100个元素。', example='ou_wovwffm62xifdziem7an7xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
}

model ListOrganizationalUnitsForApplicationResponseBody = {
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='组织的唯一标识.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListOrganizationalUnitsForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsForApplicationResponseBody(name='body'),
}

async function listOrganizationalUnitsForApplicationWithOptions(request: ListOrganizationalUnitsForApplicationRequest, runtime: Util.RuntimeOptions): ListOrganizationalUnitsForApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnitsForApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrganizationalUnitsForApplication(request: ListOrganizationalUnitsForApplicationRequest): ListOrganizationalUnitsForApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrganizationalUnitsForApplicationWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称', example='华东1（杭州）'),
      regionEndpoint?: string(name='RegionEndpoint', description='地域对应的接入地址', example='eiam.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='地域ID', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListUsersRequest {
  email?: string(name='Email', description='邮箱', example='example@xxx.com'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID', example='ou_wovwffm62xifdziem7an7xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
  phoneNumber?: string(name='PhoneNumber', description='手机区号', example='156xxxxxxx'),
  phoneRegion?: string(name='PhoneRegion', description='手机区号', example='86'),
  status?: string(name='Status', description='账户状态', example='enable'),
  userExternalId?: string(name='UserExternalId', description='外部关联ID', example='id_wovwffm62xifdziem7an7xxxxx'),
  userSourceId?: string(name='UserSourceId', description='自建类型为实例ID，非自建类型，为对应企业ID，比如钉钉，对应的corpId', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  userSourceType?: string(name='UserSourceType', description='build_in(自建),ding_talk(钉钉导入),ad(AD导入),ldap(LDAP导入)', example='build_in'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
  users?: [ 
    {
      accountExpireTime?: long(name='AccountExpireTime', description='账户过期时间', example='1652085686179'),
      createTime?: long(name='CreateTime', description='创建时间', example='1652085686179'),
      description?: string(name='Description', description='账号描述'),
      displayName?: string(name='DisplayName', description='账户显示名', example='display_name001'),
      email?: string(name='Email', description='邮箱', example='example@xxx.com'),
      emailVerified?: boolean(name='EmailVerified', description='邮箱是否已验证', example='true'),
      instanceId?: string(name='InstanceId', description='实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockExpireTime?: long(name='LockExpireTime', description='锁定过期时间', example='1652085686179'),
      passwordSet?: boolean(name='PasswordSet', description='密码是否已设置', example='false'),
      phoneNumber?: string(name='PhoneNumber', description='手机号码', example='156xxxxxxx'),
      phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='手机号是否已验证', example='true'),
      phoneRegion?: string(name='PhoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +', example='86'),
      registerTime?: long(name='RegisterTime', description='账户注册时间', example='1652085686179'),
      status?: string(name='Status', description='账户状态, enabled:启用,disabled:禁用', example='enabled'),
      updateTime?: long(name='UpdateTime', description='最近一次更新时间', example='1652085686179'),
      userExternalId?: string(name='UserExternalId', description='外部ID', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userId?: string(name='UserId', description='账户ID', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userSourceId?: string(name='UserSourceId', description='来源ID', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      userSourceType?: string(name='UserSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]', example='build_in'),
      username?: string(name='Username', description='账户名', example='name001'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    query['PhoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userExternalId)) {
    query['UserExternalId'] = request.userExternalId;
  }
  if (!Util.isUnset(request.userSourceId)) {
    query['UserSourceId'] = request.userSourceId;
  }
  if (!Util.isUnset(request.userSourceType)) {
    query['UserSourceType'] = request.userSourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListUsersForApplicationRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20'),
  userIds?: [ string ](name='UserIds', description='非必填，如果填写则可以基于账户ID进行过滤，列表中最多包含100个元素。', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model ListUsersForApplicationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
  users?: [ 
    {
      userId?: string(name='UserId', description='账户的唯一标识。', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Users'),
}

model ListUsersForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersForApplicationResponseBody(name='body'),
}

async function listUsersForApplicationWithOptions(request: ListUsersForApplicationRequest, runtime: Util.RuntimeOptions): ListUsersForApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsersForApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsersForApplication(request: ListUsersForApplicationRequest): ListUsersForApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersForApplicationWithOptions(request, runtime);
}

model ObtainApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  secretId?: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', example='sci_k52x2ru63rlkflina5utgkxxxx'),
}

model ObtainApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='客户端密钥', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lastUsedTime?: long(name='LastUsedTime', description='IDaaS EIAM 客户端密钥最近使用时间', example='1649830226000'),
    secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id', example='sci_k52x2ru63rlkflina5utgkxxxx'),
    status?: string(name='Status', description='IDaaS EIAM 客户端密钥状态', example='enabled'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ObtainApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ObtainApplicationClientSecretResponseBody(name='body'),
}

async function obtainApplicationClientSecretWithOptions(request: ObtainApplicationClientSecretRequest, runtime: Util.RuntimeOptions): ObtainApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ObtainApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function obtainApplicationClientSecret(request: ObtainApplicationClientSecretRequest): ObtainApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return obtainApplicationClientSecretWithOptions(request, runtime);
}

model RevokeApplicationFromOrganizationalUnitsRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='被取消授权的组织ID列表，必填，列表中最多包含100个元素。', example='ou_wovwffm62xifdziem7an7xxxxx'),
}

model RevokeApplicationFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromOrganizationalUnitsResponseBody(name='body'),
}

async function revokeApplicationFromOrganizationalUnitsWithOptions(request: RevokeApplicationFromOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): RevokeApplicationFromOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeApplicationFromOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeApplicationFromOrganizationalUnits(request: RevokeApplicationFromOrganizationalUnitsRequest): RevokeApplicationFromOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeApplicationFromOrganizationalUnitsWithOptions(request, runtime);
}

model RevokeApplicationFromUsersRequest {
  applicationId?: string(name='ApplicationId', description='应用的唯一标识。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  userIds?: [ string ](name='UserIds', description='被取消授权的账户ID列表，必填，列表中最多包含100个元素。', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model RevokeApplicationFromUsersResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromUsersResponseBody(name='body'),
}

async function revokeApplicationFromUsersWithOptions(request: RevokeApplicationFromUsersRequest, runtime: Util.RuntimeOptions): RevokeApplicationFromUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeApplicationFromUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeApplicationFromUsers(request: RevokeApplicationFromUsersRequest): RevokeApplicationFromUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeApplicationFromUsersWithOptions(request, runtime);
}

model SetApplicationGrantScopeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  grantScopes?: [ string ](name='GrantScopes', description='api调用的授权范围'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model SetApplicationGrantScopeResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationGrantScopeResponseBody(name='body'),
}

async function setApplicationGrantScopeWithOptions(request: SetApplicationGrantScopeRequest, runtime: Util.RuntimeOptions): SetApplicationGrantScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.grantScopes)) {
    query['GrantScopes'] = request.grantScopes;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationGrantScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationGrantScope(request: SetApplicationGrantScopeRequest): SetApplicationGrantScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationGrantScopeWithOptions(request, runtime);
}

model SetApplicationProvisioningConfigRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用资源ID。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  callbackProvisioningConfig?: {
    callbackUrl?: string(name='CallbackUrl', description='IDaaS回调SP地址，当provisionProtocolType为idaas_callback时必填', example='https://example.com/event/callback'),
    encryptKey?: string(name='EncryptKey', description='IDaaS回调对称加密秘钥', example='ad3b248**************************b3561a73d7'),
    encryptRequired?: boolean(name='EncryptRequired', description='IDaaS回调是否加密', example='true'),
    listenEventScopes?: [ string ](name='ListenEventScopes', description='IDaaS回调事件监听范围'),
  }(name='CallbackProvisioningConfig', description='IDaaS 事件回调同步配置，当provisionProtocolType为idaas_callback时填写该配置'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  provisionPassword?: boolean(name='ProvisionPassword', description='同步信息是否包含密码', example='true'),
  provisionProtocolType?: string(name='ProvisionProtocolType', description='同步协议类型', example='idaas_callback'),
  scimProvisioningConfig?: {
    authnConfiguration?: {
      authnMode?: string(name='AuthnMode', description='认证类型'),
      authnParam?: {
        accessToken?: string(name='AccessToken', description='accessToken'),
        authnMethod?: string(name='AuthnMethod', description='oauth2 authentication method'),
        clientId?: string(name='ClientId', description='oauth2 client id'),
        clientSecret?: string(name='ClientSecret', description='oauth2 client secret'),
        tokenEndpoint?: string(name='TokenEndpoint', description='oauth2 token端点'),
      }(name='AuthnParam', description='授权相关配置'),
      grantType?: string(name='GrantType', description='授权模式'),
    }(name='AuthnConfiguration', description='scim同步相关配置'),
    fullPushScopes?: [ string ](name='FullPushScopes', description='全量推送范围'),
    provisioningActions?: [ string ](name='ProvisioningActions', description='目标资源操作行为'),
    scimBaseUrl?: string(name='ScimBaseUrl', description='scim同步端点'),
  }(name='ScimProvisioningConfig', description='IDaaS SCIM同步配置，当provisionProtocolType为scim2时填写该配置'),
}

model SetApplicationProvisioningConfigResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningConfigResponseBody(name='body'),
}

async function setApplicationProvisioningConfigWithOptions(request: SetApplicationProvisioningConfigRequest, runtime: Util.RuntimeOptions): SetApplicationProvisioningConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.callbackProvisioningConfig)) {
    query['CallbackProvisioningConfig'] = request.callbackProvisioningConfig;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.provisionPassword)) {
    query['ProvisionPassword'] = request.provisionPassword;
  }
  if (!Util.isUnset(request.provisionProtocolType)) {
    query['ProvisionProtocolType'] = request.provisionProtocolType;
  }
  if (!Util.isUnset(request.scimProvisioningConfig)) {
    query['ScimProvisioningConfig'] = request.scimProvisioningConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationProvisioningConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationProvisioningConfig(request: SetApplicationProvisioningConfigRequest): SetApplicationProvisioningConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationProvisioningConfigWithOptions(request, runtime);
}

model SetApplicationProvisioningScopeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='授权同步出的组织机构列表'),
}

model SetApplicationProvisioningScopeResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningScopeResponseBody(name='body'),
}

async function setApplicationProvisioningScopeWithOptions(request: SetApplicationProvisioningScopeRequest, runtime: Util.RuntimeOptions): SetApplicationProvisioningScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationProvisioningScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationProvisioningScope(request: SetApplicationProvisioningScopeRequest): SetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationProvisioningScopeWithOptions(request, runtime);
}

model SetApplicationSsoConfigRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用资源ID。', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  initLoginType?: string(name='InitLoginType', description='初始化登录方式，only_app_init_sso or idaas_or_app_init_sso', example='only_app_init_sso'),
  initLoginUrl?: string(name='InitLoginUrl', description='仅only_app_init_sso情况下，SP指定的登录地址', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
  oidcSsoConfig?: {
    accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='返回的access token有效时间，单位为Second', example='1200'),
    codeEffectiveTime?: long(name='CodeEffectiveTime', description='Authorization code流中code的有效时间，单位为Second', example='60'),
    customClaims?: [ 
      {
        claimName?: string(name='ClaimName', description='返回的claim名称', example='"Role"'),
        claimValueExpression?: string(name='ClaimValueExpression', description='返回的claim取值表达式', example='user.dict.applicationRole'),
      }
    ](name='CustomClaims', description='自定义id token返回信息'),
    grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等', example='profile，email'),
    grantTypes?: [ string ](name='GrantTypes', description='应用支持的授权类型，OIDC标准参数', example='authorization_code'),
    idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='id token有效时间，单位为Second', example='300'),
    passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='密码模式使用的身份认证来源id，仅对password模式生效', example='ia_password'),
    passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='是否强制需要TOTP二次认证，仅对password模式生效', example='true'),
    pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='支持的PKCE算法类型', example='S256'),
    pkceRequired?: boolean(name='PkceRequired', description='是否强制PKCE,authorization_code强制必须指定PKCE参数', example='true'),
    postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='Logout回调支持的Uri列表，OIDC协议标准参数。'),
    redirectUris?: [ string ](name='RedirectUris', description='应用SSO支持的回调的uri列表，OIDC标准参数。'),
    refreshTokenEffective?: long(name='RefreshTokenEffective', description='refresh token有效时间，单位为Second', example='86400'),
    responseTypes?: [ string ](name='ResponseTypes', description='隐式流支持的返回类型，OIDC标准参数，如token id_token', example='token id_token'),
    subjectIdExpression?: string(name='SubjectIdExpression', description='自定义id token返回信息', example='user.userid'),
  }(name='OidcSsoConfig', description='单点登录类型为Oidc时可以配置'),
  samlSsoConfig?: {
    attributeStatements?: [ 
      {
        attributeName?: string(name='AttributeName', description='SAML属性的Name', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
        attributeValueExpression?: string(name='AttributeValueExpression', description='SAML属性取值表达式', example='user.username'),
      }
    ](name='AttributeStatements', description='SAML断言的属性配置'),
    defaultRelayState?: string(name='DefaultRelayState', description='默认RelayState取值，可空', example='https://home.console.aliyun.com'),
    nameIdFormat?: string(name='NameIdFormat', description='SAML标准协议中的NameID格式', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
    nameIdValueExpression?: string(name='NameIdValueExpression', description='返回的claim名称', example='user.email'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='IDaaS签发SAML断言时使用的签名算法', example='RSA-SHA256'),
    spEntityId?: string(name='SpEntityId', description='SP的EntityId，用于唯一标识SP身份', example='urn:alibaba:cloudcomputing'),
    spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='SP的SSO地址，用于接受IDaaS签发的SAML断言', example='https://signin.aliyun.com/saml-role/sso'),
  }(name='SamlSsoConfig', description='单点登录类型为saml2时可以配置'),
}

model SetApplicationSsoConfigResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationSsoConfigResponseBody(name='body'),
}

async function setApplicationSsoConfigWithOptions(request: SetApplicationSsoConfigRequest, runtime: Util.RuntimeOptions): SetApplicationSsoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.initLoginType)) {
    query['InitLoginType'] = request.initLoginType;
  }
  if (!Util.isUnset(request.initLoginUrl)) {
    query['InitLoginUrl'] = request.initLoginUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.oidcSsoConfig)) {
    query['OidcSsoConfig'] = request.oidcSsoConfig;
  }
  if (!Util.isUnset(request.samlSsoConfig)) {
    query['SamlSsoConfig'] = request.samlSsoConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationSsoConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationSsoConfig(request: SetApplicationSsoConfigRequest): SetApplicationSsoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationSsoConfigWithOptions(request, runtime);
}

model UpdateApplicationAuthorizationTypeRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  authorizationType?: string(name='AuthorizationType', description='应用的授权类型', example='authorize_required'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model UpdateApplicationAuthorizationTypeResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationAuthorizationTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationAuthorizationTypeResponseBody(name='body'),
}

async function updateApplicationAuthorizationTypeWithOptions(request: UpdateApplicationAuthorizationTypeRequest, runtime: Util.RuntimeOptions): UpdateApplicationAuthorizationTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.authorizationType)) {
    query['AuthorizationType'] = request.authorizationType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationAuthorizationType',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationAuthorizationType(request: UpdateApplicationAuthorizationTypeRequest): UpdateApplicationAuthorizationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationAuthorizationTypeWithOptions(request, runtime);
}

model UpdateApplicationDescriptionRequest {
  applicationId?: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
  description?: string(name='Description', description='IDaaS的应用描述信息', example='Demo应用-用于测试使用'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk2676xxxx'),
}

model UpdateApplicationDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationDescriptionResponseBody(name='body'),
}

async function updateApplicationDescriptionWithOptions(request: UpdateApplicationDescriptionRequest, runtime: Util.RuntimeOptions): UpdateApplicationDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationDescription(request: UpdateApplicationDescriptionRequest): UpdateApplicationDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationDescriptionWithOptions(request, runtime);
}

model UpdateInstanceDescriptionRequest {
  description?: string(name='Description', description='实例的描述信息', example='测试实例'),
  instanceId?: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
}

model UpdateInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceDescriptionResponseBody(name='body'),
}

async function updateInstanceDescriptionWithOptions(request: UpdateInstanceDescriptionRequest, runtime: Util.RuntimeOptions): UpdateInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceDescription(request: UpdateInstanceDescriptionRequest): UpdateInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceDescriptionWithOptions(request, runtime);
}

