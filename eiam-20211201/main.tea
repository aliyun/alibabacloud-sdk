/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('eiam', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AuthorizeApplicationToOrganizationalUnitsRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
}

model AuthorizeApplicationToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeApplicationToOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToOrganizationalUnitsResponseBody(name='body'),
}

async function authorizeApplicationToOrganizationalUnitsWithOptions(request: AuthorizeApplicationToOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): AuthorizeApplicationToOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeApplicationToOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeApplicationToOrganizationalUnits(request: AuthorizeApplicationToOrganizationalUnitsRequest): AuthorizeApplicationToOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeApplicationToOrganizationalUnitsWithOptions(request, runtime);
}

model AuthorizeApplicationToUsersRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  userIds?: [ string ](name='UserIds'),
}

model AuthorizeApplicationToUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeApplicationToUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToUsersResponseBody(name='body'),
}

async function authorizeApplicationToUsersWithOptions(request: AuthorizeApplicationToUsersRequest, runtime: Util.RuntimeOptions): AuthorizeApplicationToUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuthorizeApplicationToUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function authorizeApplicationToUsers(request: AuthorizeApplicationToUsersRequest): AuthorizeApplicationToUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeApplicationToUsersWithOptions(request, runtime);
}

model CreateApplicationRequest {
  applicationName?: string(name='ApplicationName'),
  applicationSourceType?: string(name='ApplicationSourceType'),
  applicationTemplateId?: string(name='ApplicationTemplateId'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
  logoUrl?: string(name='LogoUrl'),
  ssoType?: string(name='SsoType'),
}

model CreateApplicationResponseBody = {
  applicationId?: string(name='ApplicationId'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationSourceType)) {
    query['ApplicationSourceType'] = request.applicationSourceType;
  }
  if (!Util.isUnset(request.applicationTemplateId)) {
    query['ApplicationTemplateId'] = request.applicationTemplateId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.logoUrl)) {
    query['LogoUrl'] = request.logoUrl;
  }
  if (!Util.isUnset(request.ssoType)) {
    query['SsoType'] = request.ssoType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model CreateApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    clientId?: string(name='ClientId'),
    clientSecret?: string(name='ClientSecret'),
    secretId?: string(name='SecretId'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationClientSecretResponseBody(name='body'),
}

async function createApplicationClientSecretWithOptions(request: CreateApplicationClientSecretRequest, runtime: Util.RuntimeOptions): CreateApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApplicationClientSecret(request: CreateApplicationClientSecretRequest): CreateApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationClientSecretWithOptions(request, runtime);
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(runtime: Util.RuntimeOptions): CreateInstanceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(runtime);
}

model DeleteApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeleteApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  secretId?: string(name='SecretId'),
}

model DeleteApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationClientSecretResponseBody(name='body'),
}

async function deleteApplicationClientSecretWithOptions(request: DeleteApplicationClientSecretRequest, runtime: Util.RuntimeOptions): DeleteApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApplicationClientSecret(request: DeleteApplicationClientSecretRequest): DeleteApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationClientSecretWithOptions(request, runtime);
}

model DeleteInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model DisableApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model DisableApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationResponseBody(name='body'),
}

async function disableApplicationWithOptions(request: DisableApplicationRequest, runtime: Util.RuntimeOptions): DisableApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplication(request: DisableApplicationRequest): DisableApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationWithOptions(request, runtime);
}

model DisableApplicationApiInvokeRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model DisableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationApiInvokeResponseBody(name='body'),
}

async function disableApplicationApiInvokeWithOptions(request: DisableApplicationApiInvokeRequest, runtime: Util.RuntimeOptions): DisableApplicationApiInvokeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationApiInvoke',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationApiInvoke(request: DisableApplicationApiInvokeRequest): DisableApplicationApiInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationApiInvokeWithOptions(request, runtime);
}

model DisableApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  secretId?: string(name='SecretId'),
}

model DisableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationClientSecretResponseBody(name='body'),
}

async function disableApplicationClientSecretWithOptions(request: DisableApplicationClientSecretRequest, runtime: Util.RuntimeOptions): DisableApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationClientSecret(request: DisableApplicationClientSecretRequest): DisableApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationClientSecretWithOptions(request, runtime);
}

model DisableApplicationProvisioningRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model DisableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationProvisioningResponseBody(name='body'),
}

async function disableApplicationProvisioningWithOptions(request: DisableApplicationProvisioningRequest, runtime: Util.RuntimeOptions): DisableApplicationProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableApplicationProvisioning',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableApplicationProvisioning(request: DisableApplicationProvisioningRequest): DisableApplicationProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableApplicationProvisioningWithOptions(request, runtime);
}

model EnableApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model EnableApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationResponseBody(name='body'),
}

async function enableApplicationWithOptions(request: EnableApplicationRequest, runtime: Util.RuntimeOptions): EnableApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplication(request: EnableApplicationRequest): EnableApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationWithOptions(request, runtime);
}

model EnableApplicationApiInvokeRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model EnableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationApiInvokeResponseBody(name='body'),
}

async function enableApplicationApiInvokeWithOptions(request: EnableApplicationApiInvokeRequest, runtime: Util.RuntimeOptions): EnableApplicationApiInvokeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationApiInvoke',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationApiInvoke(request: EnableApplicationApiInvokeRequest): EnableApplicationApiInvokeResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationApiInvokeWithOptions(request, runtime);
}

model EnableApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  secretId?: string(name='SecretId'),
}

model EnableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationClientSecretResponseBody(name='body'),
}

async function enableApplicationClientSecretWithOptions(request: EnableApplicationClientSecretRequest, runtime: Util.RuntimeOptions): EnableApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationClientSecret(request: EnableApplicationClientSecretRequest): EnableApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationClientSecretWithOptions(request, runtime);
}

model EnableApplicationProvisioningRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model EnableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationProvisioningResponseBody(name='body'),
}

async function enableApplicationProvisioningWithOptions(request: EnableApplicationProvisioningRequest, runtime: Util.RuntimeOptions): EnableApplicationProvisioningResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableApplicationProvisioning',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableApplicationProvisioning(request: EnableApplicationProvisioningRequest): EnableApplicationProvisioningResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableApplicationProvisioningWithOptions(request, runtime);
}

model GetApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model GetApplicationResponseBody = {
  application?: {
    apiInvokeStatus?: string(name='ApiInvokeStatus'),
    applicationId?: string(name='ApplicationId'),
    applicationName?: string(name='ApplicationName'),
    applicationSourceType?: string(name='ApplicationSourceType'),
    authorizationType?: string(name='AuthorizationType'),
    clientId?: string(name='ClientId'),
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    features?: string(name='Features'),
    instanceId?: string(name='InstanceId'),
    logoUrl?: string(name='LogoUrl'),
    ssoType?: string(name='SsoType'),
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
  }(name='Application'),
  requestId?: string(name='RequestId'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplicationWithOptions(request: GetApplicationRequest, runtime: Util.RuntimeOptions): GetApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationWithOptions(request, runtime);
}

model GetApplicationGrantScopeRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model GetApplicationGrantScopeResponseBody = {
  applicationGrantScope?: {
    grantScopes?: [ string ](name='GrantScopes'),
  }(name='ApplicationGrantScope'),
  requestId?: string(name='RequestId'),
}

model GetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationGrantScopeResponseBody(name='body'),
}

async function getApplicationGrantScopeWithOptions(request: GetApplicationGrantScopeRequest, runtime: Util.RuntimeOptions): GetApplicationGrantScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationGrantScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationGrantScope(request: GetApplicationGrantScopeRequest): GetApplicationGrantScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationGrantScopeWithOptions(request, runtime);
}

model GetApplicationProvisioningConfigRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model GetApplicationProvisioningConfigResponseBody = {
  applicationProvisioningConfig?: {
    applicationId?: string(name='ApplicationId'),
    callbackProvisioningConfig?: {
      callbackUrl?: string(name='CallbackUrl'),
      encryptKey?: string(name='EncryptKey'),
      encryptRequired?: boolean(name='EncryptRequired'),
      listenEventScopes?: [ string ](name='ListenEventScopes'),
    }(name='CallbackProvisioningConfig'),
    instanceId?: string(name='InstanceId'),
    provisionJwksEndpoint?: string(name='ProvisionJwksEndpoint'),
    provisionPassword?: boolean(name='ProvisionPassword'),
    provisionProtocolType?: string(name='ProvisionProtocolType'),
    status?: string(name='Status'),
  }(name='ApplicationProvisioningConfig'),
  requestId?: string(name='RequestId'),
}

model GetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningConfigResponseBody(name='body'),
}

async function getApplicationProvisioningConfigWithOptions(request: GetApplicationProvisioningConfigRequest, runtime: Util.RuntimeOptions): GetApplicationProvisioningConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationProvisioningConfig(request: GetApplicationProvisioningConfigRequest): GetApplicationProvisioningConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationProvisioningConfigWithOptions(request, runtime);
}

model GetApplicationProvisioningScopeRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model GetApplicationProvisioningScopeResponseBody = {
  applicationProvisioningScope?: {
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
  }(name='ApplicationProvisioningScope'),
  requestId?: string(name='RequestId'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScopeWithOptions(request: GetApplicationProvisioningScopeRequest, runtime: Util.RuntimeOptions): GetApplicationProvisioningScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationProvisioningScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationProvisioningScopeWithOptions(request, runtime);
}

model GetApplicationSsoConfigRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model GetApplicationSsoConfigResponseBody = {
  applicationSsoConfig?: {
    initLoginType?: string(name='InitLoginType'),
    initLoginUrl?: string(name='InitLoginUrl'),
    oidcSsoConfig?: {
      accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime'),
      codeEffectiveTime?: long(name='CodeEffectiveTime'),
      customClaims?: [ 
        {
          claimName?: string(name='ClaimName'),
          claimValueExpression?: string(name='ClaimValueExpression'),
        }
      ](name='CustomClaims'),
      grantScopes?: [ string ](name='GrantScopes'),
      grantTypes?: [ string ](name='GrantTypes'),
      idTokenEffectiveTime?: long(name='IdTokenEffectiveTime'),
      pkceChallengeMethods?: [ string ](name='PkceChallengeMethods'),
      pkceRequired?: boolean(name='PkceRequired'),
      redirectUris?: [ string ](name='RedirectUris'),
      refreshTokenEffective?: long(name='RefreshTokenEffective'),
      responseTypes?: [ string ](name='ResponseTypes'),
      subjectIdExpression?: string(name='SubjectIdExpression'),
    }(name='OidcSsoConfig'),
    protocolEndpointDomain?: {
      oauth2AuthorizationEndpoint?: string(name='Oauth2AuthorizationEndpoint'),
      oauth2DeviceAuthorizationEndpoint?: string(name='Oauth2DeviceAuthorizationEndpoint'),
      oauth2RevokeEndpoint?: string(name='Oauth2RevokeEndpoint'),
      oauth2TokenEndpoint?: string(name='Oauth2TokenEndpoint'),
      oauth2UserinfoEndpoint?: string(name='Oauth2UserinfoEndpoint'),
      oidcIssuer?: string(name='OidcIssuer'),
      oidcJwksEndpoint?: string(name='OidcJwksEndpoint'),
      samlMetaEndpoint?: string(name='SamlMetaEndpoint'),
      samlSsoEndpoint?: string(name='SamlSsoEndpoint'),
    }(name='ProtocolEndpointDomain'),
    samlSsoConfig?: {
      attributeStatements?: [ 
        {
          attributeName?: string(name='AttributeName'),
          attributeValueExpression?: string(name='AttributeValueExpression'),
        }
      ](name='AttributeStatements'),
      defaultRelayState?: string(name='DefaultRelayState'),
      nameIdFormat?: string(name='NameIdFormat'),
      nameIdValueExpression?: string(name='NameIdValueExpression'),
      signatureAlgorithm?: string(name='SignatureAlgorithm'),
      spEntityId?: string(name='SpEntityId'),
      spSsoAcsUrl?: string(name='SpSsoAcsUrl'),
    }(name='SamlSsoConfig'),
    ssoStatus?: string(name='SsoStatus'),
  }(name='ApplicationSsoConfig'),
  requestId?: string(name='RequestId'),
}

model GetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationSsoConfigResponseBody(name='body'),
}

async function getApplicationSsoConfigWithOptions(request: GetApplicationSsoConfigRequest, runtime: Util.RuntimeOptions): GetApplicationSsoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetApplicationSsoConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getApplicationSsoConfig(request: GetApplicationSsoConfigRequest): GetApplicationSsoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApplicationSsoConfigWithOptions(request, runtime);
}

model GetInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model GetInstanceResponseBody = {
  instance?: {
    createTime?: long(name='CreateTime'),
    defaultEndpoint?: {
      endpoint?: string(name='Endpoint'),
      status?: string(name='Status'),
    }(name='DefaultEndpoint'),
    description?: string(name='Description'),
    egressAddresses?: [ string ](name='EgressAddresses'),
    instanceId?: string(name='InstanceId'),
    status?: string(name='Status'),
  }(name='Instance'),
  requestId?: string(name='RequestId'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstanceWithOptions(request: GetInstanceRequest, runtime: Util.RuntimeOptions): GetInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetInstance',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getInstanceWithOptions(request, runtime);
}

model GetOrganizationalUnitRequest {
  instanceId?: string(name='InstanceId'),
  organizationalUnitId?: string(name='OrganizationalUnitId'),
}

model GetOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    instanceId?: string(name='InstanceId'),
    organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId'),
    organizationalUnitId?: string(name='OrganizationalUnitId'),
    organizationalUnitName?: string(name='OrganizationalUnitName'),
    organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId'),
    organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType'),
    parentId?: string(name='ParentId'),
    updateTime?: long(name='UpdateTime'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnitWithOptions(request: GetOrganizationalUnitRequest, runtime: Util.RuntimeOptions): GetOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrganizationalUnitWithOptions(request, runtime);
}

model GetRootOrganizationalUnitRequest {
  instanceId?: string(name='InstanceId'),
}

model GetRootOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    instanceId?: string(name='InstanceId'),
    organizationalUnitId?: string(name='OrganizationalUnitId'),
    organizationalUnitName?: string(name='OrganizationalUnitName'),
    updateTime?: long(name='UpdateTime'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId'),
}

model GetRootOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRootOrganizationalUnitResponseBody(name='body'),
}

async function getRootOrganizationalUnitWithOptions(request: GetRootOrganizationalUnitRequest, runtime: Util.RuntimeOptions): GetRootOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRootOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRootOrganizationalUnit(request: GetRootOrganizationalUnitRequest): GetRootOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRootOrganizationalUnitWithOptions(request, runtime);
}

model GetUserRequest {
  instanceId?: string(name='InstanceId'),
  userId?: string(name='UserId'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId'),
  user?: {
    accountExpireTime?: long(name='AccountExpireTime'),
    createTime?: long(name='CreateTime'),
    description?: string(name='Description'),
    displayName?: string(name='DisplayName'),
    email?: string(name='Email'),
    emailVerified?: boolean(name='EmailVerified'),
    instanceId?: string(name='InstanceId'),
    lockExpireTime?: long(name='LockExpireTime'),
    phoneNumber?: string(name='PhoneNumber'),
    phoneNumberVerified?: boolean(name='PhoneNumberVerified'),
    phoneRegion?: string(name='PhoneRegion'),
    primaryOrganizationalUnitId?: string(name='PrimaryOrganizationalUnitId'),
    registerTime?: long(name='RegisterTime'),
    status?: string(name='Status'),
    updateTime?: long(name='UpdateTime'),
    userExternalId?: string(name='UserExternalId'),
    userId?: string(name='UserId'),
    userSourceId?: string(name='UserSourceId'),
    userSourceType?: string(name='UserSourceType'),
    username?: string(name='Username'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUserWithOptions(request: GetUserRequest, runtime: Util.RuntimeOptions): GetUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUser(request: GetUserRequest): GetUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserWithOptions(request, runtime);
}

model ListApplicationClientSecretsRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
}

model ListApplicationClientSecretsResponseBody = {
  applicationClientSecrets?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      clientId?: string(name='ClientId'),
      clientSecret?: string(name='ClientSecret'),
      instanceId?: string(name='InstanceId'),
      lastUsedTime?: long(name='LastUsedTime'),
      secretId?: string(name='SecretId'),
      status?: string(name='Status'),
    }
  ](name='ApplicationClientSecrets'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListApplicationClientSecretsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationClientSecretsResponseBody(name='body'),
}

async function listApplicationClientSecretsWithOptions(request: ListApplicationClientSecretsRequest, runtime: Util.RuntimeOptions): ListApplicationClientSecretsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationClientSecrets',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationClientSecrets(request: ListApplicationClientSecretsRequest): ListApplicationClientSecretsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationClientSecretsWithOptions(request, runtime);
}

model ListApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  applicationName?: string(name='ApplicationName'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  status?: string(name='Status'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      applicationName?: string(name='ApplicationName'),
      applicationSourceType?: string(name='ApplicationSourceType'),
      clientId?: string(name='ClientId'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      features?: string(name='Features'),
      instanceId?: string(name='InstanceId'),
      logoUrl?: string(name='LogoUrl'),
      ssoType?: string(name='SsoType'),
      status?: string(name='Status'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplicationsWithOptions(request: ListApplicationsRequest, runtime: Util.RuntimeOptions): ListApplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplications',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithOptions(request, runtime);
}

model ListApplicationsForOrganizationalUnitRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitId?: string(name='OrganizationalUnitId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListApplicationsForOrganizationalUnitResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListApplicationsForOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForOrganizationalUnitResponseBody(name='body'),
}

async function listApplicationsForOrganizationalUnitWithOptions(request: ListApplicationsForOrganizationalUnitRequest, runtime: Util.RuntimeOptions): ListApplicationsForOrganizationalUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForOrganizationalUnit',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForOrganizationalUnit(request: ListApplicationsForOrganizationalUnitRequest): ListApplicationsForOrganizationalUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForOrganizationalUnitWithOptions(request, runtime);
}

model ListApplicationsForUserRequest {
  applicationIds?: [ string ](name='ApplicationIds'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  queryMode?: string(name='QueryMode'),
  userId?: string(name='UserId'),
}

model ListApplicationsForUserResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId'),
      hasDirectAuthorization?: boolean(name='HasDirectAuthorization'),
      hasInheritAuthorization?: boolean(name='HasInheritAuthorization'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListApplicationsForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForUserResponseBody(name='body'),
}

async function listApplicationsForUserWithOptions(request: ListApplicationsForUserRequest, runtime: Util.RuntimeOptions): ListApplicationsForUserResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationIds)) {
    query['ApplicationIds'] = request.applicationIds;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryMode)) {
    query['QueryMode'] = request.queryMode;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListApplicationsForUser',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listApplicationsForUser(request: ListApplicationsForUserRequest): ListApplicationsForUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsForUserWithOptions(request, runtime);
}

model ListInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  status?: string(name='Status'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime'),
      defaultEndpoint?: {
        endpoint?: string(name='Endpoint'),
        status?: string(name='Status'),
      }(name='DefaultEndpoint'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstancesWithOptions(request: ListInstancesRequest, runtime: Util.RuntimeOptions): ListInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListInstances',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listInstancesWithOptions(request, runtime);
}

model ListOrganizationalUnitsRequest {
  instanceId?: string(name='InstanceId'),
  organizationalUnitName?: string(name='OrganizationalUnitName'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  parentId?: string(name='ParentId'),
}

model ListOrganizationalUnitsResponseBody = {
  organizationalUnits?: [ 
    {
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      instanceId?: string(name='InstanceId'),
      organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId'),
      organizationalUnitId?: string(name='OrganizationalUnitId'),
      organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId'),
      organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType'),
      parentId?: string(name='ParentId'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnitsWithOptions(request: ListOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): ListOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitName)) {
    query['OrganizationalUnitName'] = request.organizationalUnitName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentId)) {
    query['ParentId'] = request.parentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrganizationalUnitsWithOptions(request, runtime);
}

model ListOrganizationalUnitsForApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model ListOrganizationalUnitsForApplicationResponseBody = {
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListOrganizationalUnitsForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsForApplicationResponseBody(name='body'),
}

async function listOrganizationalUnitsForApplicationWithOptions(request: ListOrganizationalUnitsForApplicationRequest, runtime: Util.RuntimeOptions): ListOrganizationalUnitsForApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListOrganizationalUnitsForApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOrganizationalUnitsForApplication(request: ListOrganizationalUnitsForApplicationRequest): ListOrganizationalUnitsForApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOrganizationalUnitsForApplicationWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListRegions',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListUsersRequest {
  email?: string(name='Email'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitId?: string(name='OrganizationalUnitId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  phoneNumber?: string(name='PhoneNumber'),
  phoneRegion?: string(name='PhoneRegion'),
  status?: string(name='Status'),
  userExternalId?: string(name='UserExternalId'),
  userSourceId?: string(name='UserSourceId'),
  userSourceType?: string(name='UserSourceType'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  users?: [ 
    {
      accountExpireTime?: long(name='AccountExpireTime'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description'),
      displayName?: string(name='DisplayName'),
      email?: string(name='Email'),
      emailVerified?: boolean(name='EmailVerified'),
      instanceId?: string(name='InstanceId'),
      lockExpireTime?: long(name='LockExpireTime'),
      passwordSet?: boolean(name='PasswordSet'),
      phoneNumber?: string(name='PhoneNumber'),
      phoneNumberVerified?: boolean(name='PhoneNumberVerified'),
      phoneRegion?: string(name='PhoneRegion'),
      registerTime?: long(name='RegisterTime'),
      status?: string(name='Status'),
      updateTime?: long(name='UpdateTime'),
      userExternalId?: string(name='UserExternalId'),
      userId?: string(name='UserId'),
      userSourceId?: string(name='UserSourceId'),
      userSourceType?: string(name='UserSourceType'),
      username?: string(name='Username'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsersWithOptions(request: ListUsersRequest, runtime: Util.RuntimeOptions): ListUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitId)) {
    query['OrganizationalUnitId'] = request.organizationalUnitId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.phoneRegion)) {
    query['PhoneRegion'] = request.phoneRegion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userExternalId)) {
    query['UserExternalId'] = request.userExternalId;
  }
  if (!Util.isUnset(request.userSourceId)) {
    query['UserSourceId'] = request.userSourceId;
  }
  if (!Util.isUnset(request.userSourceType)) {
    query['UserSourceType'] = request.userSourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersWithOptions(request, runtime);
}

model ListUsersForApplicationRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  userIds?: [ string ](name='UserIds'),
}

model ListUsersForApplicationResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  users?: [ 
    {
      userId?: string(name='UserId'),
    }
  ](name='Users'),
}

model ListUsersForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersForApplicationResponseBody(name='body'),
}

async function listUsersForApplicationWithOptions(request: ListUsersForApplicationRequest, runtime: Util.RuntimeOptions): ListUsersForApplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListUsersForApplication',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listUsersForApplication(request: ListUsersForApplicationRequest): ListUsersForApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUsersForApplicationWithOptions(request, runtime);
}

model ObtainApplicationClientSecretRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  secretId?: string(name='SecretId'),
}

model ObtainApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    applicationId?: string(name='ApplicationId'),
    clientId?: string(name='ClientId'),
    clientSecret?: string(name='ClientSecret'),
    instanceId?: string(name='InstanceId'),
    lastUsedTime?: long(name='LastUsedTime'),
    secretId?: string(name='SecretId'),
    status?: string(name='Status'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId'),
}

model ObtainApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ObtainApplicationClientSecretResponseBody(name='body'),
}

async function obtainApplicationClientSecretWithOptions(request: ObtainApplicationClientSecretRequest, runtime: Util.RuntimeOptions): ObtainApplicationClientSecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.secretId)) {
    query['SecretId'] = request.secretId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ObtainApplicationClientSecret',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function obtainApplicationClientSecret(request: ObtainApplicationClientSecretRequest): ObtainApplicationClientSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return obtainApplicationClientSecretWithOptions(request, runtime);
}

model RevokeApplicationFromOrganizationalUnitsRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
}

model RevokeApplicationFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeApplicationFromOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromOrganizationalUnitsResponseBody(name='body'),
}

async function revokeApplicationFromOrganizationalUnitsWithOptions(request: RevokeApplicationFromOrganizationalUnitsRequest, runtime: Util.RuntimeOptions): RevokeApplicationFromOrganizationalUnitsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeApplicationFromOrganizationalUnits',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeApplicationFromOrganizationalUnits(request: RevokeApplicationFromOrganizationalUnitsRequest): RevokeApplicationFromOrganizationalUnitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeApplicationFromOrganizationalUnitsWithOptions(request, runtime);
}

model RevokeApplicationFromUsersRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  userIds?: [ string ](name='UserIds'),
}

model RevokeApplicationFromUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeApplicationFromUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromUsersResponseBody(name='body'),
}

async function revokeApplicationFromUsersWithOptions(request: RevokeApplicationFromUsersRequest, runtime: Util.RuntimeOptions): RevokeApplicationFromUsersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.userIds)) {
    query['UserIds'] = request.userIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeApplicationFromUsers',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeApplicationFromUsers(request: RevokeApplicationFromUsersRequest): RevokeApplicationFromUsersResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeApplicationFromUsersWithOptions(request, runtime);
}

model SetApplicationGrantScopeRequest {
  applicationId?: string(name='ApplicationId'),
  grantScopes?: [ string ](name='GrantScopes'),
  instanceId?: string(name='InstanceId'),
}

model SetApplicationGrantScopeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationGrantScopeResponseBody(name='body'),
}

async function setApplicationGrantScopeWithOptions(request: SetApplicationGrantScopeRequest, runtime: Util.RuntimeOptions): SetApplicationGrantScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.grantScopes)) {
    query['GrantScopes'] = request.grantScopes;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationGrantScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationGrantScope(request: SetApplicationGrantScopeRequest): SetApplicationGrantScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationGrantScopeWithOptions(request, runtime);
}

model SetApplicationProvisioningConfigRequest {
  applicationId?: string(name='ApplicationId'),
  callbackProvisioningConfig?: {
    callbackUrl?: string(name='CallbackUrl'),
    encryptKey?: string(name='EncryptKey'),
    encryptRequired?: boolean(name='EncryptRequired'),
    listenEventScopes?: [ string ](name='ListenEventScopes'),
  }(name='CallbackProvisioningConfig'),
  instanceId?: string(name='InstanceId'),
  provisionPassword?: boolean(name='ProvisionPassword'),
  provisionProtocolType?: string(name='ProvisionProtocolType'),
}

model SetApplicationProvisioningConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningConfigResponseBody(name='body'),
}

async function setApplicationProvisioningConfigWithOptions(request: SetApplicationProvisioningConfigRequest, runtime: Util.RuntimeOptions): SetApplicationProvisioningConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.callbackProvisioningConfig)) {
    query['CallbackProvisioningConfig'] = request.callbackProvisioningConfig;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.provisionPassword)) {
    query['ProvisionPassword'] = request.provisionPassword;
  }
  if (!Util.isUnset(request.provisionProtocolType)) {
    query['ProvisionProtocolType'] = request.provisionProtocolType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationProvisioningConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationProvisioningConfig(request: SetApplicationProvisioningConfigRequest): SetApplicationProvisioningConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationProvisioningConfigWithOptions(request, runtime);
}

model SetApplicationProvisioningScopeRequest {
  applicationId?: string(name='ApplicationId'),
  instanceId?: string(name='InstanceId'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
}

model SetApplicationProvisioningScopeResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningScopeResponseBody(name='body'),
}

async function setApplicationProvisioningScopeWithOptions(request: SetApplicationProvisioningScopeRequest, runtime: Util.RuntimeOptions): SetApplicationProvisioningScopeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.organizationalUnitIds)) {
    query['OrganizationalUnitIds'] = request.organizationalUnitIds;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationProvisioningScope',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationProvisioningScope(request: SetApplicationProvisioningScopeRequest): SetApplicationProvisioningScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationProvisioningScopeWithOptions(request, runtime);
}

model SetApplicationSsoConfigRequest {
  applicationId?: string(name='ApplicationId'),
  initLoginType?: string(name='InitLoginType'),
  initLoginUrl?: string(name='InitLoginUrl'),
  instanceId?: string(name='InstanceId'),
  oidcSsoConfig?: {
    accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime'),
    codeEffectiveTime?: long(name='CodeEffectiveTime'),
    customClaims?: [ 
      {
        claimName?: string(name='ClaimName'),
        claimValueExpression?: string(name='ClaimValueExpression'),
      }
    ](name='CustomClaims'),
    grantScopes?: [ string ](name='GrantScopes'),
    grantTypes?: [ string ](name='GrantTypes'),
    idTokenEffectiveTime?: long(name='IdTokenEffectiveTime'),
    pkceChallengeMethods?: [ string ](name='PkceChallengeMethods'),
    pkceRequired?: boolean(name='PkceRequired'),
    redirectUris?: [ string ](name='RedirectUris'),
    refreshTokenEffective?: long(name='RefreshTokenEffective'),
    responseTypes?: [ string ](name='ResponseTypes'),
    subjectIdExpression?: string(name='SubjectIdExpression'),
  }(name='OidcSsoConfig'),
  samlSsoConfig?: {
    attributeStatements?: [ 
      {
        attributeName?: string(name='AttributeName'),
        attributeValueExpression?: string(name='AttributeValueExpression'),
      }
    ](name='AttributeStatements'),
    defaultRelayState?: string(name='DefaultRelayState'),
    nameIdFormat?: string(name='NameIdFormat'),
    nameIdValueExpression?: string(name='NameIdValueExpression'),
    signatureAlgorithm?: string(name='SignatureAlgorithm'),
    spEntityId?: string(name='SpEntityId'),
    spSsoAcsUrl?: string(name='SpSsoAcsUrl'),
  }(name='SamlSsoConfig'),
}

model SetApplicationSsoConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationSsoConfigResponseBody(name='body'),
}

async function setApplicationSsoConfigWithOptions(request: SetApplicationSsoConfigRequest, runtime: Util.RuntimeOptions): SetApplicationSsoConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.initLoginType)) {
    query['InitLoginType'] = request.initLoginType;
  }
  if (!Util.isUnset(request.initLoginUrl)) {
    query['InitLoginUrl'] = request.initLoginUrl;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.oidcSsoConfig)) {
    query['OidcSsoConfig'] = request.oidcSsoConfig;
  }
  if (!Util.isUnset(request.samlSsoConfig)) {
    query['SamlSsoConfig'] = request.samlSsoConfig;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApplicationSsoConfig',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApplicationSsoConfig(request: SetApplicationSsoConfigRequest): SetApplicationSsoConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApplicationSsoConfigWithOptions(request, runtime);
}

model UpdateApplicationAuthorizationTypeRequest {
  applicationId?: string(name='ApplicationId'),
  authorizationType?: string(name='AuthorizationType'),
  instanceId?: string(name='InstanceId'),
}

model UpdateApplicationAuthorizationTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateApplicationAuthorizationTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationAuthorizationTypeResponseBody(name='body'),
}

async function updateApplicationAuthorizationTypeWithOptions(request: UpdateApplicationAuthorizationTypeRequest, runtime: Util.RuntimeOptions): UpdateApplicationAuthorizationTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.authorizationType)) {
    query['AuthorizationType'] = request.authorizationType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationAuthorizationType',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationAuthorizationType(request: UpdateApplicationAuthorizationTypeRequest): UpdateApplicationAuthorizationTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationAuthorizationTypeWithOptions(request, runtime);
}

model UpdateApplicationDescriptionRequest {
  applicationId?: string(name='ApplicationId'),
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
}

model UpdateApplicationDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateApplicationDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationDescriptionResponseBody(name='body'),
}

async function updateApplicationDescriptionWithOptions(request: UpdateApplicationDescriptionRequest, runtime: Util.RuntimeOptions): UpdateApplicationDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationId)) {
    query['ApplicationId'] = request.applicationId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplicationDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateApplicationDescription(request: UpdateApplicationDescriptionRequest): UpdateApplicationDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateApplicationDescriptionWithOptions(request, runtime);
}

model UpdateInstanceDescriptionRequest {
  description?: string(name='Description'),
  instanceId?: string(name='InstanceId'),
}

model UpdateInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceDescriptionResponseBody(name='body'),
}

async function updateInstanceDescriptionWithOptions(request: UpdateInstanceDescriptionRequest, runtime: Util.RuntimeOptions): UpdateInstanceDescriptionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceDescription',
    version = '2021-12-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInstanceDescription(request: UpdateInstanceDescriptionRequest): UpdateInstanceDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInstanceDescriptionWithOptions(request, runtime);
}

