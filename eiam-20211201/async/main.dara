/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eiam';
  @version = '2021-12-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserToOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The organization IDs. You can add an account to a maximum of 100 organizations.', position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model AddUserToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AddUserToOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUserToOrganizationalUnitsResponseBody(name='body'),
}

async function addUserToOrganizationalUnits(request: AddUserToOrganizationalUnitsRequest): AddUserToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model AddUsersToGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The account IDs.', example='[ou_001]', position='Query'),
}

model AddUsersToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AddUsersToGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddUsersToGroupResponseBody(name='body'),
}

async function addUsersToGroup(request: AddUsersToGroupRequest): AddUsersToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsersToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
}

model AuthorizeApplicationToGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToGroupsResponseBody(name='body'),
}

async function authorizeApplicationToGroups(request: AuthorizeApplicationToGroupsRequest): AuthorizeApplicationToGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToGroups', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application on which you want to grant permissions.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations to which you want to grant permissions. You can grant permissions to a maximum of 100 organizations at a time.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
}

model AuthorizeApplicationToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToOrganizationalUnitsResponseBody(name='body'),
}

async function authorizeApplicationToOrganizationalUnits(request: AuthorizeApplicationToOrganizationalUnitsRequest): AuthorizeApplicationToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application on which you want to grant permissions.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The IDs of the accounts to which you want to grant permissions. You can grant permissions to a maximum of 100 accounts at a time.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model AuthorizeApplicationToUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuthorizeApplicationToUsersResponseBody(name='body'),
}

async function authorizeApplicationToUsers(request: AuthorizeApplicationToUsersRequest): AuthorizeApplicationToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToUsers', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationName: string(name='ApplicationName', description='The name of the application.', example='Ram Account SSO', maxLength=64, position='Query'),
  applicationSourceType: string(name='ApplicationSourceType', description='The type of the application source. Valid values:

*   urn:alibaba:idaas:app:source:template: application template
*   urn:alibaba:idaas:app:source:standard: standard protocol', example='urn:alibaba:idaas:app:source:standard', maxLength=64, position='Query'),
  applicationTemplateId?: string(name='ApplicationTemplateId', description='The ID of the application template. This parameter is required if you set the ApplicationSourceType parameter to urn:alibaba:idaas:app:source:template.', example='template_cloud_ram', position='Query'),
  description?: string(name='Description', description='The description of the application.', example='RAM user SSO application', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  logoUrl?: string(name='LogoUrl', description='The URL of the application logo.', example='https://oss.cn-hangzhou.aliyuncs.com/logo.png', maxLength=128, position='Query'),
  ssoType: string(name='SsoType', description='The SSO protocol. Valid values:

*   saml2: the SAML 2.0 protocol.
*   oidc: the OpenID Connect protocol.', example='saml2', maxLength=64, position='Query'),
}

model CreateApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mnkom'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationResponseBody(name='body'),
}

/**
  * IDaaS EIAM supports the following two standard single sign-on (SSO) protocols for adding applications: SAML 2.0 and OIDC. You can select an SSO protocol based on your business requirements when you add an application. You cannot change the SSO protocol that you selected after the application is added.
  *
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to create a client key.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='The client key secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
  }(name='ApplicationClientSecret', description='The information about the client key.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateApplicationClientSecretResponseBody(name='body'),
}

async function createApplicationClientSecret(request: CreateApplicationClientSecretRequest): CreateApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain: string(name='Domain', description='域名。最大长度限制255，格式由数字、字母、横线（-）点（.）组成;', example='www.example.com', position='Query'),
  filing?: {
    icpNumber?: string(name='IcpNumber', description='域名关联的备案号，长度最大限制64。', example='浙xx-xxxxxx'),
  }(name='Filing', description='备案信息参数。', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateDomainResponseBody = {
  domainId?: string(name='DomainId', example='dm_mtohn6mltdz3ibtly2rxvnvxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainResponseBody(name='body'),
}

async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateDomainProxyTokenResponseBody = {
  domainProxyTokenId?: string(name='DomainProxyTokenId', example='pt_mtohn73423stghoivjmi4jwxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateDomainProxyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDomainProxyTokenResponseBody(name='body'),
}

async function createDomainProxyToken(request: CreateDomainProxyTokenRequest): CreateDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the group. The value can be up to 256 characters in length.', example='this is a test.', position='Query'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID. The value can be up to 64 characters in length.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupName: string(name='GroupName', description='The name of the group. The name can be up to 64 characters in length.', example='name_test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateGroupResponseBody = {
  groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the instance. The description can be up to 128 characters in length.', example='instance_for_test', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance that is created.', example='idaas_wj5htncdvoc4q5xxxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。', example='client-token-example', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointName: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch。', example='vsw-examplexxx', maxLength=2, position='Query'),
  vpcId: string(name='VpcId', description='专属网络端点连接的VpcID。', example='vpc-examplexxx', position='Query'),
  vpcRegionId: string(name='VpcRegionId', description='专属网络端点连接的VpcID所属地域，该地域取值必须在ListNetworkAccessEndpointAvailableRegions接口中返回。', example='cn-hangzhou', position='Query'),
}

model CreateNetworkAccessEndpointResponseBody = {
  networkAccessEndpointId?: string(name='NetworkAccessEndpointId', example='nae_examplexxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateNetworkAccessEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNetworkAccessEndpointResponseBody(name='body'),
}

async function createNetworkAccessEndpoint(request: CreateNetworkAccessEndpointRequest): CreateNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the organization. The value can be up to 256 characters in length.', example='description', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organization, which can be used to associate the organization with an external system. By default, the external ID is the organization ID. The value can be up to 64 characters in length.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=128, position='Query'),
  organizationalUnitName: string(name='OrganizationalUnitName', description='The name of the organization. The name can be up to 64 characters in length.', example='test_ou_name', maxLength=64, position='Query'),
  parentId: string(name='ParentId', description='The parent organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateOrganizationalUnitResponseBody(name='body'),
}

async function createOrganizationalUnit(request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  customFields?: [ 
    {
      fieldName?: string(name='FieldName', description='The name of the extended field. You must create the extended field in advance. To create an extended field, log on to the IDaaS console. In the left-side navigation pane, choose Accounts > Extended Fields, and then click Create Field on the Extended Fields page.', example='age', maxLength=64),
      fieldValue?: string(name='FieldValue', description='The value of the extended field. The value follows the limits on the properties of the extended field.', example='10', maxLength=64),
    }
  ](name='CustomFields', description='The extended fields.', example='description', position='Query'),
  description?: string(name='Description', description='The description of the organizational unit. The description can be up to 256 characters in length.', example='description text', maxLength=256, position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the account. The display name can be up to 64 characters in length.', example='name_001', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address of the user who owns the account. The email address prefix can contain letters, digits, underscores (\\_), periods (.), and hyphens (-).', example='example@example.com', maxLength=64, position='Query'),
  emailVerified?: boolean(name='EmailVerified', description='Specifies whether the email address is a trusted email address. This parameter is required if the Email parameter is specified. If you have no special business requirements, set this parameter to true.', example='true', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The IDs of organizational units to which the account belongs. An account can belong to multiple organizational units.', position='Query'),
  password?: string(name='Password', description='The password of the account. For more information, view the password policy of the instance in the IDaaS console.', example='123456', maxLength=64, position='Query'),
  passwordInitializationConfig?: {
    passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to forcibly change the password status. Default value: disabled. Valid values:

*   enabled: forcibly changes the password status.
*   disabled: does not forcibly change the password status.', example='enabled', maxLength=64),
    passwordInitializationPolicyPriority?: string(name='PasswordInitializationPolicyPriority', description='The priority of the password initialization policy. By default, this parameter does not take effect. Valid values:

*   global: The password initialization policy globally takes effect.
*   custom: The password initialization policy takes effect based on custom settings.', example='global', maxLength=64),
    passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. Set the value to random,

*   which indicates that the password is randomly generated.', example='random', maxLength=64),
    userNotificationChannels?: [ string ](name='UserNotificationChannels', description='The password notification methods.', example='sms', maxLength=64),
  }(name='PasswordInitializationConfig', description='The configurations for password initialization.', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile phone number, which contains 6 to 15 digits.', example='12345678901', maxLength=32, position='Query'),
  phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Specifies whether the mobile phone number is a trusted mobile phone number. This parameter is required if the PhoneNumber parameter is specified. If you have no special business requirements, set this parameter to true.', example='true', maxLength=64, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile phone number. The country code contains only digits and does not contain a plus sign (+).', example='86', maxLength=32, position='Query'),
  primaryOrganizationalUnitId: string(name='PrimaryOrganizationalUnitId', description='The ID of the primary organizational unit to which the account belongs.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used to associate the account with an external system. The external ID can be up to 64 characters in length. If you do not specify an external ID for the account, the ID of the account is used as the external ID by default.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  username: string(name='Username', description='The name of the account. The name can be up to 64 characters in length and can contain letters, digits, underscores (\\_), periods (.), at signs (@), and hyphens (-).', example='user_001', maxLength=64, position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateUserResponseBody(name='body'),
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to delete.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationResponseBody(name='body'),
}

/**
  * Make sure that the EIAM application that you want to delete is not used before you delete the EIAM application. After you delete the EIAM application, all configurations are deleted and cannot be restored.
  *
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to delete a client key.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The ID of the client key that you want to delete for the application.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model DeleteApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteApplicationClientSecretResponseBody(name='body'),
}

async function deleteApplicationClientSecret(request: DeleteApplicationClientSecretRequest): DeleteApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteDomainProxyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainProxyTokenResponseBody(name='body'),
}

async function deleteDomainProxyToken(request: DeleteDomainProxyTokenRequest): DeleteDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance to be deleted.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceResponseBody(name='body'),
}

/**
  * Make sure that the instance to be deleted is no longer used. If the instance is deleted, all data related to the instance will be deleted.
  *
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxxx', position='Query'),
}

model DeleteNetworkAccessEndpointResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteNetworkAccessEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNetworkAccessEndpointResponseBody(name='body'),
}

async function deleteNetworkAccessEndpoint(request: DeleteNetworkAccessEndpointRequest): DeleteNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model DeleteOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteOrganizationalUnitResponseBody(name='body'),
}

async function deleteOrganizationalUnit(request: DeleteOrganizationalUnitRequest): DeleteOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteUserResponseBody(name='body'),
}

async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to disable.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationResponseBody(name='body'),
}

/**
  * All features of the EIAM application cannot be used if you disable the EIAM application, such as single sign-on (SSO) and account synchronization. Make sure that you acknowledge the risks of the delete operation.
  *
 */
async function disableApplication(request: DisableApplicationRequest): DisableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplication', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationApiInvokeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationApiInvokeResponseBody(name='body'),
}

async function disableApplicationApiInvoke(request: DisableApplicationApiInvokeRequest): DisableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to disable a client key.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model DisableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationClientSecretResponseBody(name='body'),
}

async function disableApplicationClientSecret(request: DisableApplicationClientSecretRequest): DisableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationProvisioningRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationProvisioningResponseBody(name='body'),
}

async function disableApplicationProvisioning(request: DisableApplicationProvisioningRequest): DisableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationSsoRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationSsoResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationSsoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableApplicationSsoResponseBody(name='body'),
}

async function disableApplicationSso(request: DisableApplicationSsoRequest): DisableApplicationSsoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationSso', 'POST', '/', 'json', false, 'json', request);
}

model DisableDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableDomainProxyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDomainProxyTokenResponseBody(name='body'),
}

async function disableDomainProxyToken(request: DisableDomainProxyTokenRequest): DisableDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model DisableInitDomainAutoRedirectRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableInitDomainAutoRedirectResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableInitDomainAutoRedirectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableInitDomainAutoRedirectResponseBody(name='body'),
}

async function disableInitDomainAutoRedirect(request: DisableInitDomainAutoRedirectRequest): DisableInitDomainAutoRedirectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInitDomainAutoRedirect', 'POST', '/', 'json', false, 'json', request);
}

model DisableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model DisableUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableUserResponseBody(name='body'),
}

async function disableUser(request: DisableUserRequest): DisableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableUser', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to enable.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationResponseBody(name='body'),
}

async function enableApplication(request: EnableApplicationRequest): EnableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplication', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationApiInvokeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationApiInvokeResponseBody(name='body'),
}

async function enableApplicationApiInvoke(request: EnableApplicationApiInvokeRequest): EnableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model EnableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationClientSecretResponseBody(name='body'),
}

async function enableApplicationClientSecret(request: EnableApplicationClientSecretRequest): EnableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationProvisioningRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationProvisioningResponseBody(name='body'),
}

async function enableApplicationProvisioning(request: EnableApplicationProvisioningRequest): EnableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationSsoRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationSsoResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationSsoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableApplicationSsoResponseBody(name='body'),
}

async function enableApplicationSso(request: EnableApplicationSsoRequest): EnableApplicationSsoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationSso', 'POST', '/', 'json', false, 'json', request);
}

model EnableDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableDomainProxyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableDomainProxyTokenResponseBody(name='body'),
}

async function enableDomainProxyToken(request: EnableDomainProxyTokenRequest): EnableDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model EnableInitDomainAutoRedirectRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableInitDomainAutoRedirectResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableInitDomainAutoRedirectResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableInitDomainAutoRedirectResponseBody(name='body'),
}

async function enableInitDomainAutoRedirect(request: EnableInitDomainAutoRedirectRequest): EnableInitDomainAutoRedirectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInitDomainAutoRedirect', 'POST', '/', 'json', false, 'json', request);
}

model EnableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model EnableUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableUserResponseBody(name='body'),
}

async function enableUser(request: EnableUserRequest): EnableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableUser', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    apiInvokeStatus?: string(name='ApiInvokeStatus', description='The status of the Developer API feature. Valid values:

*   Enabled: The Developer API feature is enabled.
*   Disabled: The Developer API feature is disabled.', example='disabled'),
    applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    applicationName?: string(name='ApplicationName', description='The name of the application.', example='SAML Application'),
    applicationSourceType?: string(name='ApplicationSourceType', description='The origin of the application. Valid values:

*   urn:alibaba:idaas:app:source:template: The application is created based on a template.
*   urn:alibaba:idaas: The application is created based on the standard protocol.', example='urn:alibaba:idaas:app:source:template'),
    applicationTemplateId?: string(name='ApplicationTemplateId', description='The ID of the template based on which the application is created. This parameter is returned only if the application is created based on a template.', example='apt_rpa_tdsxxx'),
    authorizationType?: string(name='AuthorizationType', description='The authorization type of the EIAM application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.', example='authorize_required'),
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    createTime?: long(name='CreateTime', description='The time when the application was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    description?: string(name='Description', description='The description of the application.', example='The application is applicable to the test environment.'),
    features?: string(name='Features', description='The features that are supported by the application. The value is a JSON array. Valid values:

*   sso: The application supports SSO.
*   provision: The application supports account synchronization.
*   api_invoke: The application supports custom APIs.', example='["sso", "provision"]'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    logoUrl?: string(name='LogoUrl', description='The URL of the application icon.', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
    managedServiceCode?: string(name='ManagedServiceCode', description='The service code of the cloud service that manages the application template.', example='rpa'),
    serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the application template is managed by a cloud service.', example='true'),
    ssoType?: string(name='SsoType', description='The type of the single sign-on (SSO) protocol. Valid values:

*   saml2: the Security Assertion Markup Language (SAML) 2.0 protocol.
*   oidc: the OpenID Connect (OIDC) protocol.', example='saml2'),
    status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled'),
    updateTime?: long(name='UpdateTime', description='The time when the application was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
  }(name='Application', description='The details of the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationGrantScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationGrantScopeResponseBody = {
  applicationGrantScope?: {
    grantScopes?: [ string ](name='GrantScopes', description='The permissions of the Developer API feature.'),
  }(name='ApplicationGrantScope', description='The permissions of the Developer API feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationGrantScopeResponseBody(name='body'),
}

async function getApplicationGrantScope(request: GetApplicationGrantScopeRequest): GetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationProvisioningConfigResponseBody = {
  applicationProvisioningConfig?: {
    applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    callbackProvisioningConfig?: {
      callbackUrl?: string(name='CallbackUrl', description='The URL that the application uses to receive IDaaS event callbacks.', example='https://example.com/event/callback'),
      encryptKey?: string(name='EncryptKey', description='The symmetric key for IDaaS event callbacks. The key is an AES-256 encryption key in the HEX format.', example='1adfdfdfd******111'),
      encryptRequired?: boolean(name='EncryptRequired', description='Indicates whether IDaaS event callback messages are encrypted. Valid values:

*   true: The messages are encrypted.
*   false: The messages are transmitted in plaintext.', example='true'),
      listenEventScopes?: [ string ](name='ListenEventScopes', description='The list of types of IDaaS event callback messages that are supported by the listener.'),
    }(name='CallbackProvisioningConfig', description='The configuration of the custom event callback protocol of IDaaS.'),
    configOperateMode?: string(name='ConfigOperateMode', description='Client-side rendering, Valid values: 
- standard：standard mode.
- template：template mode.', example='standard'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    provisionJwksEndpoint?: string(name='ProvisionJwksEndpoint', description='The public key endpoint for signature verification of the synchronization callback information.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk267xxxxx/app_mkv7rgt4d7i4u7zqtzev2mxxxx/provisioning/jwks'),
    provisionPassword?: boolean(name='ProvisionPassword', description='Indicates whether the password is synchronized in IDaaS user event callbacks. Valid values:

*   true: The password is synchronized.
*   false: The password is not synchronized.', example='true'),
    provisionProtocolType?: string(name='ProvisionProtocolType', description='The synchronization protocol type of the application. Valid values:

*   idaas_callback: custom event callback protocol of IDaaS.
*   scim2: System for Cross-domain Identity Management (SCIM) protocol.', example='idaas_callback'),
    scimProvisioningConfig?: {
      authnConfiguration?: {
        authnMode?: string(name='AuthnMode', description='The authentication mode of the SCIM protocol. Valid value:

*   oauth2: OAuth2.0 mode.', example='oauth2'),
        authnParam?: {
          accessToken?: string(name='AccessToken', description='The access token. This parameter is returned when the GrantType parameter is set to bearer_token.', example='k52x2ru63rlkflina5utgkxxxx'),
          authnMethod?: string(name='AuthnMethod', description='The authentication mode of the SCIM protocol. Valid values:

*   client_secret_basic: The client secret is passed in the request header.
*   client_secret_post: The client secret is passed in the request body.', example='client_secret_basic'),
          clientId?: string(name='ClientId', description='The client ID of the application.', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
          clientSecret?: string(name='ClientSecret', description='The client secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
          tokenEndpoint?: string(name='TokenEndpoint', description='The token endpoint.', example='https://www.example.com/oauth/token'),
        }(name='AuthnParam', description='The configuration parameters related to authorization.

*   If the GrantType parameter is set to client_credentials, the configuration parameters ClientId, ClientSecret, and AuthnMethod are returned.
*   If the GrantType parameter is set to bearer_token, the configuration parameter AccessToken is returned.'),
        grantType?: string(name='GrantType', description='The grant type of the SCIM protocol. Valid values:

*   client_credentials: client mode.
*   bearer_token: key mode.', example='bearer_token'),
      }(name='AuthnConfiguration', description='The configuration parameters related to SCIM-based synchronization.'),
      fullPushScopes?: [ string ](name='FullPushScopes', description='The full synchronization scope of the SCIM protocol. Valid value:

*   urn:alibaba:idaas:app:scim:User:PUSH: full account data synchronization.'),
      provisioningActions?: [ string ](name='ProvisioningActions', description='The resource operations of the SCIM protocol. Valid values:

*   urn:alibaba:idaas:app:scim:User:CREATE: account creation.
*   urn:alibaba:idaas:app:scim:User:UPDATE: account update.
*   urn:alibaba:idaas:app:scim:User:DELETE: account deletion.'),
      scimBaseUrl?: string(name='ScimBaseUrl', description='The base URL that the application uses to receive the SCIM protocol for IDaaS synchronization.', example='https://example.com/scim'),
    }(name='ScimProvisioningConfig', description='The configuration of SCIM-based IDaaS synchronization.'),
    status?: string(name='Status', description='The status of the IDaaS account synchronization feature. Valid values:

*   enabled: The feature is enabled.
*   disabled: The feature is disabled.', example='enabled'),
  }(name='ApplicationProvisioningConfig', description='The configuration of the account synchronization feature for the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningConfigResponseBody(name='body'),
}

async function getApplicationProvisioningConfig(request: GetApplicationProvisioningConfigRequest): GetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationProvisioningScopeResponseBody = {
  applicationProvisioningScope?: {
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The list of organizational units that are authorized for account synchronization.'),
  }(name='ApplicationProvisioningScope', description='The scope of account synchronization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationSsoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationSsoConfigResponseBody = {
  applicationSsoConfig?: {
    initLoginType?: string(name='InitLoginType', description='The initial SSO method. Valid values:

*   only_app_init_sso: Only application-initiated SSO is allowed. This method is selected by default when the SSO protocol of the application is an OIDC protocol. If this method is selected when the SSO protocol of the application is SAML, the InitLoginUrl parameter is required.
*   idaas_or_app_init_sso: IDaaS-initiated SSO and application-initiated SSO are allowed. This method is selected by default when the SSO protocol of the application is SAML. If this method is selected when the SSO protocol of the application is an OIDC protocol, the InitLoginUrl parameter is required.', example='only_app_init_sso'),
    initLoginUrl?: string(name='InitLoginUrl', description='The initial webhook URL of SSO. This parameter is required when the SSO protocol of the application is an OIDC protocol and the InitLoginType parameters is set to idaas_or_app_init_sso or when the SSO protocol of the application is SAML and the InitLoginType parameter is set to only_app_init_sso.', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF'),
    oidcSsoConfig?: {
      accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='The validity period of the issued access token. Unit: seconds. Default value: 1200.', example='1200'),
      codeEffectiveTime?: long(name='CodeEffectiveTime', description='The validity period of the issued code. Unit: seconds. Default value: 60.', example='60'),
      customClaims?: [ 
        {
          claimName?: string(name='ClaimName', description='The claim name.', example='userOuIds'),
          claimValueExpression?: string(name='ClaimValueExpression', description='The expression that is used to generate the value of the claim.', example='ObjectToJsonString(user.organizationalUnits)'),
        }
      ](name='CustomClaims', description='The custom claims that are returned for the ID token.'),
      grantScopes?: [ string ](name='GrantScopes', description='The scopes of user attributes that can be returned for the UserInfo endpoint or ID token.', example='profile，email'),
      grantTypes?: [ string ](name='GrantTypes', description='The list of grant types that are supported for OIDC protocols.', example='authorization_code'),
      idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='The validity period of the issued ID token. Unit: seconds. Default value: 300.', example='1200'),
      passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='The ID of the identity authentication source in password mode. This parameter is returned only when the value of the GrantTypes parameter includes the password mode.', example='ia_password'),
      passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='Indicates whether time-based one-time password (TOTP) authentication is required in password mode. This parameter is returned only when the value of the GrantTypes parameter includes the password mode.', example='true'),
      pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='The algorithms that are used to calculate the code challenge for PKCE.', example='S256'),
      pkceRequired?: boolean(name='PkceRequired', description='Indicates whether the SSO of the application requires Proof Key for Code Exchange (PKCE) (RFC 7636).', example='true'),
      postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='The list of logout redirect URIs that are supported by the application.'),
      redirectUris?: [ string ](name='RedirectUris', description='The list of redirect URIs that are supported by the application.'),
      refreshTokenEffective?: long(name='RefreshTokenEffective', description='The validity period of the issued refresh token. Unit: seconds. Default value: 86400.', example='86400'),
      responseTypes?: [ string ](name='ResponseTypes', description='The response types that are supported by the application. This parameter is returned when the value of the GrantTypes parameter includes the implicit mode.', example='token id_token'),
      subjectIdExpression?: string(name='SubjectIdExpression', description='The custom expression that is used to generate the subject ID returned for the ID token.', example='user.userid'),
    }(name='OidcSsoConfig', description='The Open ID Connect (OIDC)-based SSO configuration attributes of the application. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.'),
    protocolEndpointDomain?: {
      oauth2AuthorizationEndpoint?: string(name='Oauth2AuthorizationEndpoint', description='The OAuth2.0 authorization endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/authorize'),
      oauth2DeviceAuthorizationEndpoint?: string(name='Oauth2DeviceAuthorizationEndpoint', description='The OAuth2.0 device authorization endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/device/code'),
      oauth2RevokeEndpoint?: string(name='Oauth2RevokeEndpoint', description='The OAuth2.0 token revocation endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/revoke'),
      oauth2TokenEndpoint?: string(name='Oauth2TokenEndpoint', description='The OAuth2.0 token endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/token'),
      oauth2UserinfoEndpoint?: string(name='Oauth2UserinfoEndpoint', description='The OIDC UserInfo endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/userinfo'),
      oidcIssuer?: string(name='OidcIssuer', description='The information about the OIDC issuer. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc'),
      oidcJwksEndpoint?: string(name='OidcJwksEndpoint', description='The JSON Web Key Set (JWKS) URL of the OIDC issuer. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc/jwks'),
      oidcLogoutEndpoint?: string(name='OidcLogoutEndpoint', description='The OIDC relying party (RP)-initiated logout endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/logout'),
      samlMetaEndpoint?: string(name='SamlMetaEndpoint', description='The metadata URL of the SAML protocol. This parameter is returned only when the SSO protocol of the application is SAML 2.0.', example='https://l1seshcn.aliyunidaas.com/api/v2/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/meta'),
      samlSsoEndpoint?: string(name='SamlSsoEndpoint', description='The request receiving URL of the SAML protocol. This parameter is returned only when the SSO protocol of the application is SAML 2.0.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/sso'),
    }(name='ProtocolEndpointDomain', description='The configuration of the metadata endpoint provided by the application.'),
    samlSsoConfig?: {
      assertionSigned?: boolean(name='AssertionSigned', description='assertion是否签名', example='true'),
      attributeStatements?: [ 
        {
          attributeName?: string(name='AttributeName', description='The attribute name.', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
          attributeValueExpression?: string(name='AttributeValueExpression', description='The expression that is used to generate the value of the attribute.', example='user.username'),
        }
      ](name='AttributeStatements', description='The additional user attributes in the SAML assertion.'),
      defaultRelayState?: string(name='DefaultRelayState', description='The default value of the RelayState attribute. If the SSO request is initiated in EIAM, the RelayState attribute in the SAML response is set to this default value.', example='https://home.console.aliyun.com'),
      nameIdFormat?: string(name='NameIdFormat', description='The Format attribute of the NameID element in the SAML assertion. Valid values:

*   urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified: No format is specified. How to resolve the NameID element depends on the application.
*   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress: The NameID element must be an email address.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:persistent: The NameID element must be persistent.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:transient: The NameID element must be transient.', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
      nameIdValueExpression?: string(name='NameIdValueExpression', description='The expression that is used to generate the value of NameID in the SAML assertion.', example='user.username'),
      responseSigned?: boolean(name='ResponseSigned', description='response是否签名', example='true'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The algorithm that is used to calculate the signature for the SAML assertion.', example='RSA-SHA256'),
      spEntityId?: string(name='SpEntityId', description='The entity ID of the application in SAML. The application assumes the role of service provider.', example='urn:alibaba:cloudcomputing'),
      spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='The Assertion Consumer Service (ACS) URL of the application in SAML. The application assumes the role of service provider.', example='https://signin.aliyun.com/saml-role/sso'),
    }(name='SamlSsoConfig', description='The Security Assertion Markup Language (SAML)-based SSO configuration attributes of the application. This parameter is returned only when the SSO protocol of the application is SAML 2.0.'),
    ssoStatus?: string(name='SsoStatus', description='The SSO feature status of the application. Valid values:

*   enabled: The feature is enabled.
*   disabled: The feature is disabled.', example='enabled'),
  }(name='ApplicationSsoConfig', description='The SSO configuration information of the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetApplicationSsoConfigResponseBody(name='body'),
}

async function getApplicationSsoConfig(request: GetApplicationSsoConfigRequest): GetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetDomainResponseBody = {
  domain?: {
    createTime?: long(name='CreateTime', description='域名创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    defaultDomain?: boolean(name='DefaultDomain', description='是否默认域名。true表示实例默认域名，false表示非默认域名', example='false'),
    domain?: string(name='Domain', description='域名。', example='login.example.com'),
    domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx'),
    domainType?: string(name='DomainType', description='域名类型。枚举取值:system_init(系统初始化)、user_custom(用户自定义)。', example='system_init'),
    filing?: {
      icpNumber?: string(name='IcpNumber', description='域名关联的备案号, 长度最大限制64。'),
    }(name='Filing', description='域名备案信息。'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lockMode?: string(name='LockMode', description='域名锁定状态。枚举取值:unlock(正常)、lockByLicense(因License限制不可用)。', example='unlock'),
    updateTime?: long(name='UpdateTime', description='域名最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
  }(name='Domain'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDomainResponseBody(name='body'),
}

async function getDomain(request: GetDomainRequest): GetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainDnsChallengeRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain: string(name='Domain', description='域名。', example='dm_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetDomainDnsChallengeResponseBody = {
  domainDnsChallenge?: {
    dnsChallengeName?: string(name='DnsChallengeName', description='DNS challenge名称。', example='_idaas-challenge.${domain}'),
    dnsChallengeValue?: string(name='DnsChallengeValue', description='DNS challenge值。', example='exmple123xxx'),
    dnsType?: string(name='DnsType', description='DNS记录类型。', example='枚举，目前只支持TXT类型'),
  }(name='DomainDnsChallenge'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetDomainDnsChallengeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetDomainDnsChallengeResponseBody(name='body'),
}

async function getDomainDnsChallenge(request: GetDomainDnsChallengeRequest): GetDomainDnsChallengeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainDnsChallenge', 'POST', '/', 'json', false, 'json', request);
}

model GetForgetPasswordConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetForgetPasswordConfigurationResponseBody = {
  openForgetPasswordConfiguration?: {
    authenticationChannels?: [ string ](name='AuthenticationChannels', description='表示忘记密码认证渠道。枚举取值:email(邮件)、sms(短信)'),
    enable?: boolean(name='Enable', description='Indicates whether the forgot password feature is enabled.', example='true'),
    enableEmail?: boolean(name='EnableEmail', description='Indicates whether email authentication is enabled for the forgot password feature.', example='true'),
    enableSms?: boolean(name='EnableSms', description='Indicates whether Short Message Service (SMS) authentication is enabled for the forgot password feature.', example='true'),
    forgetPasswordStatus?: string(name='ForgetPasswordStatus', description='表示忘记密码配置状态。枚举取值:enabled(开启)、disabled(禁用)'),
  }(name='OpenForgetPasswordConfiguration', description='The forgot password configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetForgetPasswordConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetForgetPasswordConfigurationResponseBody(name='body'),
}

async function getForgetPasswordConfiguration(request: GetForgetPasswordConfigurationRequest): GetForgetPasswordConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetForgetPasswordConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetGroupResponseBody = {
  group?: {
    createTime?: long(name='CreateTime', description='The time at which the group was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
    description?: string(name='Description', description='The description of the group.', example='test_group'),
    groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
    groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
    groupName?: string(name='GroupName', description='The name of the group.', example='group_name'),
    groupSourceId?: string(name='GroupSourceId', description='The source ID of the group. By default, the source ID is the instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    groupSourceType?: string(name='GroupSourceType', description='The source type of the group. Only build_in may be returned, which indicates that the group was created in IDaaS.

*', example='build_in'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    updateTime?: long(name='UpdateTime', description='The time at which the group was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  }(name='Group', description='The information about the account group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGroupResponseBody(name='body'),
}

async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetInstanceResponseBody = {
  instance?: {
    createTime?: long(name='CreateTime', description='The time when the instance was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1550115455000'),
    defaultEndpoint?: {
      endpoint?: string(name='Endpoint', description='The endpoint of the instance.', example='example-xxx.aliyunidaas.com'),
      status?: string(name='Status', description='The status of the endpoint. Valid values:

*   resolved
*   unresolved', example='resolved'),
    }(name='DefaultEndpoint', description='The default endpoint of the instance.'),
    description?: string(name='Description', description='The description of the instance.', example='test_description'),
    domainConfig?: {
      defaultDomain?: string(name='DefaultDomain', description='The default domain of the instance.', example='example-xxx.example.com'),
      initDomain?: string(name='InitDomain', description='The init domain of the instance.', example='example-xxx.aliyunidaas.com'),
      initDomainAutoRedirectStatus?: string(name='InitDomainAutoRedirectStatus', description='Valid values:

*   true
*   false', example='true'),
    }(name='DomainConfig', description='The default domain of the instance.'),
    egressAddresses?: [ string ](name='EgressAddresses', description='The outbound public CIDR blocks of the instance. For example, when you synchronize Active Directory (AD) accounts, the IDaaS EIAM instance accesses your AD service by using the outbound public CIDR blocks.'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_abt3pfwojojcq323si6g5xxxxx'),
    status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running'),
  }(name='Instance', description='The details of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae-examplexxxx', position='Query'),
}

model GetNetworkAccessEndpointResponseBody = {
  networkAccessEndpoint?: {
    createTime?: long(name='CreateTime', description='专属网络端点创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    egressPrivateIpAddresses?: [ string ](name='EgressPrivateIpAddresses', description='网络访问端私网出口IP地址列表。', example='172.168.x.x'),
    egressPublicIpAddresses?: [ string ](name='EgressPublicIpAddresses', description='网络访问端点公网出口IP地址段', example='8.xx.xx.xxx/27'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
    networkAccessEndpointName?: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点'),
    networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。', example='private'),
    securityGroupId?: string(name='SecurityGroupId', description='专属网络端点使用的安全组ID。', example='sg-examplexxx'),
    status?: string(name='Status', description='专属网络端点状态。', example='running'),
    updateTime?: long(name='UpdateTime', description='专属网络端点最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch列表。', example='vsw-examplexxx'),
    vpcId?: string(name='VpcId', description='专属网络端点连接的VpcID。', example='vpc-examplexxx'),
    vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域。', example='cn-hangzhou'),
  }(name='NetworkAccessEndpoint'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetNetworkAccessEndpointResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetNetworkAccessEndpointResponseBody(name='body'),
}

async function getNetworkAccessEndpoint(request: GetNetworkAccessEndpointRequest): GetNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model GetOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    leaf?: boolean(name='Leaf', description='Indicates whether the node is a leaf node.', example='false'),
    organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used by external data to map the data of the organizational unit in IDaaS EIAM. By default, the external ID is the organizational unit ID.

For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='组织名称。', example='test_organizationalUnit_name'),
    organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='The source ID of the organizational unit.

If the organizational unit was created in IDaaS, its source ID is the ID of the IDaaS instance. If the organizational unit was imported, its source ID is the enterprise ID in the source. For example, if the organizational unit was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
    parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
  }(name='OrganizationalUnit', description='The data object of the organizational unit.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordComplexityConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordComplexityConfigurationResponseBody = {
  passwordComplexityConfiguration?: {
    passwordComplexityRules?: [ 
      {
        passwordCheckType?: string(name='PasswordCheckType', description='The type of the password check. Valid values:

*   inclusion_upper_case: The password must contain uppercase letters.
*   inclusion_lower_case: The password must contain lowercase letters.
*   inclusion_special_case: The password must contain one or more of the following special characters: @ % + \\ / \\" ! # $ ^ ? : , ( ) { } \\[ ] ~ - \\_ .
*   inclusion_number: The password must contain digits.
*   exclusion_username: The password cannot contain a username.
*   exclusion_email: The password cannot contain an email prefix.
*   exclusion_phone_number: The password cannot contain a mobile number.
*   exclusion_display_name: The password cannot contain a display name.', example='inclusion_upper_case'),
      }
    ](name='PasswordComplexityRules', description='The password complexity rules.'),
    passwordMinLength?: int32(name='PasswordMinLength', description='The minimum number of characters in a password.', example='3'),
  }(name='PasswordComplexityConfiguration', description='The password complexity configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordComplexityConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPasswordComplexityConfigurationResponseBody(name='body'),
}

async function getPasswordComplexityConfiguration(request: GetPasswordComplexityConfigurationRequest): GetPasswordComplexityConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordComplexityConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordExpirationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordExpirationConfigurationResponseBody = {
  passwordExpirationConfiguration?: {
    passwordExpirationAction?: string(name='PasswordExpirationAction', description='The action to take when a password expires. Valid values:

*   forbid_login: Prohibit the user from using the password to log on to IDaaS.
*   force_update_password: Force the user to change the password.
*   remind_update_password: Remind the user to change the password.', example='forbid_login'),
    passwordExpirationNotificationChannels?: [ string ](name='PasswordExpirationNotificationChannels', description='The methods for receiving password expiration notifications.', example='login'),
    passwordExpirationNotificationDuration?: int32(name='PasswordExpirationNotificationDuration', description='The number of days before the expiration date during which password expiration notifications are sent. Unit: day.', example='7'),
    passwordExpirationNotificationStatus?: string(name='PasswordExpirationNotificationStatus', description='Indicates whether the password expiration notification feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordExpirationStatus?: string(name='PasswordExpirationStatus', description='Indicates whether the password expiration feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordForcedUpdateDuration?: int32(name='PasswordForcedUpdateDuration', description='The number of days before which users must change the password to prevent password expiration. Unit: day.', example='3'),
    passwordValidMaxDay?: int32(name='PasswordValidMaxDay', description='The validity period of a password. Unit: day.', example='180'),
  }(name='PasswordExpirationConfiguration', description='The password expiration configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordExpirationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPasswordExpirationConfigurationResponseBody(name='body'),
}

async function getPasswordExpirationConfiguration(request: GetPasswordExpirationConfigurationRequest): GetPasswordExpirationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordExpirationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordHistoryConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordHistoryConfigurationResponseBody = {
  passwordHistoryConfiguration?: {
    passwordHistoryMaxRetention?: int32(name='PasswordHistoryMaxRetention', description='The maximum number of recent passwords that are retained.', example='3'),
    passwordHistoryStatus?: string(name='PasswordHistoryStatus', description='Indicates whether the password history feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
  }(name='PasswordHistoryConfiguration', description='The password history configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordHistoryConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPasswordHistoryConfigurationResponseBody(name='body'),
}

async function getPasswordHistoryConfiguration(request: GetPasswordHistoryConfigurationRequest): GetPasswordHistoryConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordHistoryConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordInitializationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordInitializationConfigurationResponseBody = {
  passwordInitializationConfiguration?: {
    passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Indicates whether forcible password change upon first logon is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordInitializationNotificationChannels?: [ string ](name='PasswordInitializationNotificationChannels', description='The methods for receiving password initialization notifications.', example='email'),
    passwordInitializationStatus?: string(name='PasswordInitializationStatus', description='Indicates whether the password initialization feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. Set the value to random.

*   random: A randomly generated password is used.', example='random'),
  }(name='PasswordInitializationConfiguration', description='The password initialization configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordInitializationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPasswordInitializationConfigurationResponseBody(name='body'),
}

async function getPasswordInitializationConfiguration(request: GetPasswordInitializationConfigurationRequest): GetPasswordInitializationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordInitializationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetRootOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetRootOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organization.', example='name001'),
    updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
  }(name='OrganizationalUnit', description='The data object of the organizational unit.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetRootOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRootOrganizationalUnitResponseBody(name='body'),
}

async function getRootOrganizationalUnit(request: GetRootOrganizationalUnitRequest): GetRootOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRootOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  user?: {
    accountExpireTime?: long(name='AccountExpireTime', description='The time when the account expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    createTime?: long(name='CreateTime', description='The time when the account was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    customFields?: [ 
      {
        fieldName?: string(name='FieldName', description='The identifier of the custom field.', example='age'),
        fieldValue?: string(name='FieldValue', description='The value of the custom field.', example='10'),
      }
    ](name='CustomFields', description='The list of custom fields that describe the account.'),
    description?: string(name='Description', description='The description of the account.', example='Test account'),
    displayName?: string(name='DisplayName', description='The display name of the account.', example='display_name001'),
    email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com'),
    emailVerified?: boolean(name='EmailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
    groups?: [ 
      {
        description?: string(name='Description', description='The description of the organizational unit.', example='this is a test.'),
        groupId?: string(name='GroupId', description='The ID of the organizational unit.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
        groupName?: string(name='GroupName', description='The name of the organizational unit.', example='group_test_name'),
      }
    ](name='Groups', description='The organizational units to which the account belongs.'),
    instanceId?: string(name='InstanceId', description='The ID of the instance', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lockExpireTime?: long(name='LockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    organizationalUnits?: [ 
      {
        organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
        organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organizational unit.', example='test_ou_name'),
        primary?: boolean(name='Primary', description='Indicates whether the organization is the primary organization.', example='true'),
      }
    ](name='OrganizationalUnits', description='The organizational units to which the account belongs.'),
    passwordExpireTime?: long(name='PasswordExpireTime', description='The time when the password of the account expires. This value is a UNIX timestamp. Unit: milliseconds.

*   If the value -1 is returned, the password does not expire.
*   If no value is returned, the password does not expire.
*   If a UNIX timestamp is returned, the password expires at the indicated point of time.', example='1652085686179'),
    passwordSet?: boolean(name='PasswordSet', description='Indicates whether a password is set.', example='false'),
    phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
    phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
    phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
    primaryOrganizationalUnitId?: string(name='PrimaryOrganizationalUnitId', description='The ID of the primary organizational unit to which the account belongs.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    registerTime?: long(name='RegisterTime', description='The time when the account was registered. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enabled'),
    updateTime?: long(name='UpdateTime', description='The time when the account was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM. By default, the external ID is the account ID.

For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
    username?: string(name='Username', description='The username of the account.', example='name001'),
  }(name='User', description='The data object of the account.'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationClientSecretsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListApplicationClientSecretsResponseBody = {
  applicationClientSecrets?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientSecret?: string(name='ClientSecret', description='The client key secret of the application. The value is not masked.', example='eyJh*****************************************************************************************************OQ'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_wdziy4vnjt33ehhf7z2o2nxxxx'),
      lastUsedTime?: long(name='LastUsedTime', description='The time when the client key was last used. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
      secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
      status?: string(name='Status', description='The status of the client key. Valid values:

*   Enabled: The client key is enabled.
*   Disabled: The client key is disabled.', example='enabled'),
    }
  ](name='ApplicationClientSecrets', description='The information about the client keys.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='100'),
}

model ListApplicationClientSecretsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationClientSecretsResponseBody(name='body'),
}

async function listApplicationClientSecrets(request: ListApplicationClientSecretsRequest): ListApplicationClientSecretsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationClientSecrets', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications.', example='Ram Account SSO', position='Query'),
  applicationName?: string(name='ApplicationName', description='The name of the application. Only fuzzy match from the leftmost character is supported.', example='Ram Account SSO', maxLength=64, position='Query'),
  authorizationType?: string(name='AuthorizationType', description='The authorization of the application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.', example='authorize_required', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled', maxLength=32, position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      applicationName?: string(name='ApplicationName', description='The name of the application.', example='SAML Application'),
      applicationSourceType?: string(name='ApplicationSourceType', description='The origin of the application. Valid values:

*   urn:alibaba:idaas:app:source:template: The application is created based on a template.
*   urn:alibaba:idaas: The application is created based on the standard protocol.', example='urn:alibaba:idaas:app:source:standard'),
      applicationTemplateId?: string(name='ApplicationTemplateId', description='应用模板ID'),
      clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      createTime?: long(name='CreateTime', description='The time when the application was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
      description?: string(name='Description', description='The description of the application.', example='A single application. The code is pkces.'),
      features?: string(name='Features', description='The features that are supported by the application. The value is a JSON array. Valid values:

*   sso: The application supports SSO.
*   provision: The application supports account synchronization.
*   api_invoke: The application supports custom APIs.', example='["sso", "provision"]'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      logoUrl?: string(name='LogoUrl', description='The URL of the application icon.', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
      managedServiceCode?: string(name='ManagedServiceCode', description='The service code of the cloud service that manages the application template.', example='rpa'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the application template is managed by a cloud service.', example='true'),
      ssoType?: string(name='SsoType', description='The type of the single sign-on (SSO) protocol. Valid values:

*   saml2: the Security Assertion Markup Language (SAML) 2.0 protocol.
*   oidc: the OpenID Connect (OIDC) protocol.', example='saml2'),
      status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled'),
      updateTime?: long(name='UpdateTime', description='The time when the application was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    }
  ](name='Applications', description='The details of the applications.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications that the EIAM organization can access. You can query a maximum of 100 application IDs at a time.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the EIAM organization.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListApplicationsForOrganizationalUnitResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that the EIAM organization can access.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    }
  ](name='Applications', description='The applications that the EIAM organization can access.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsForOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForOrganizationalUnitResponseBody(name='body'),
}

/**
  * You can only query the permissions that are directly granted to the EIAM organization by calling the ListApplicationsForOrganizationalUnit operation. You can filter applications by configuring the **ApplicationIds** parameter when you call this operation.
  *
 */
async function listApplicationsForOrganizationalUnit(request: ListApplicationsForOrganizationalUnitRequest): ListApplicationsForOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications that the EIAM account can access. You can query a maximum of 100 application IDs at a time.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  queryMode?: string(name='QueryMode', description='The query mode. Default value: **OnlyDirect**. Valid values:

*   OnlyDirect: Only the direct permissions are queried. Direct permissions are the permissions that are directly granted to the account.
*   IncludeInherit: Both the permissions that are directly granted to the account and the inherited permissions are queried. Inherited permissions are the permissions that an account inherits from the parent organization or the group to which the account belongs.', example='OnlyDirect', maxLength=32, position='Query'),
  userId: string(name='UserId', description='The ID of the EIAM account.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model ListApplicationsForUserResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that the EIAM account can access.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      hasDirectAuthorization?: boolean(name='HasDirectAuthorization', description='Indicates whether the EIAM account has direct permissions on the application. Valid values:

*   true: The EIAM account has direct permissions on the application.
*   false: The EIAM account does not have direct permissions on the application.', example='true'),
      hasInheritAuthorization?: boolean(name='HasInheritAuthorization', description='Indicates whether the EIAM account has inherited permissions on the application. Valid values:

*   true: A parent organization or an organization to which the EIAM account belongs has direct permissions on the application.
*   false: A parent organization or an organization to which the EIAM account belongs does not have direct permissions on the application.', example='false'),
    }
  ](name='Applications', description='The applications that the EIAM account can access.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListApplicationsForUserResponseBody(name='body'),
}

async function listApplicationsForUser(request: ListApplicationsForUserRequest): ListApplicationsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainProxyTokensRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListDomainProxyTokensResponseBody = {
  domainProxyTokens?: [ 
    {
      createTime?: long(name='CreateTime', description='域名代理Token创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxx'),
      domainProxyToken?: string(name='DomainProxyToken', description='域名代理Token。', example='PTxxxxxxxx'),
      domainProxyTokenId?: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lastUsedTime?: long(name='LastUsedTime', description='域名代理Token最近使用时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      status?: string(name='Status', description='token状态，枚举类型：(enabled）启用,（disabled）禁用。', example='enabled'),
      updateTime?: long(name='UpdateTime', description='域名代理Token最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    }
  ](name='DomainProxyTokens'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListDomainProxyTokensResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainProxyTokensResponseBody(name='body'),
}

async function listDomainProxyTokens(request: ListDomainProxyTokensRequest): ListDomainProxyTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomainProxyTokens', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListDomainsResponseBody = {
  domains?: [ 
    {
      createTime?: long(name='CreateTime', description='域名创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      defaultDomain?: boolean(name='DefaultDomain', description='是否默认域名。true表示实例默认域名，false表示非默认域名', example='false'),
      domain?: string(name='Domain', description='域名。', example='www.example.com'),
      domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx'),
      domainType?: string(name='DomainType', description='域名类型。枚举取值:system_init(系统初始化)、user_custom(用户自定义)。', example='system_init'),
      filing?: {
        icpNumber?: string(name='IcpNumber', description='域名关联的备案号, 长度最大限制64。'),
      }(name='Filing', description='域名备案信息。'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockMode?: string(name='LockMode', description='域名锁定状态。枚举取值:unlock(正常)、lockByLicense(因License限制不可用)。', example='unlock'),
      updateTime?: long(name='UpdateTime', description='域名最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomains', 'POST', '/', 'json', false, 'json', request);
}

model ListEiamInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceIds?: [ string ](name='InstanceIds', description='实例ID列表，支持0到100个', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', description='实例所属Region', example='cn-hangzhou', maxLength=32, position='Query'),
}

model ListEiamInstancesResponseBody = {
  instances?: [ 
    {
      description?: string(name='Description', description='实例描述信息'),
      developerAPIPrivateDomain?: string(name='DeveloperAPIPrivateDomain', description='实例developer私网域名地址', example='eiam-developerapi-cn.vpc-proxy.aliyuncs.com'),
      developerAPIPublicDomain?: string(name='DeveloperAPIPublicDomain', description='实例developer公网域名地址', example='eiam-developerapi.cn-hangzhou.aliyuncs.com'),
      instanceId?: string(name='InstanceId', description='实例id', example='idaas_eypq6ljgyeuwmlw672sulxxxxx'),
      instanceStatus?: string(name='InstanceStatus', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)', example='RUNNING'),
      instanceVersion?: string(name='InstanceVersion', description='实例版本，EIAM2.0/ EIAM1.0', example='EIAM 2.0'),
      openAPIPrivateDomain?: string(name='OpenAPIPrivateDomain', description='实例openApi私网域名地址', example='eiam-cn.vpc-proxy.aliyuncs.com'),
      openAPIPublicDomain?: string(name='OpenAPIPublicDomain', description='实例openApi公网域名地址', example='eiam.cn-hangzhou.aliyuncs.com'),
      SSODomain?: string(name='SSODomain', description='实例域名地址', example='xxxx.aliyunidaas.com'),
      startTime?: long(name='StartTime', description='实例的创建时间', example='1677810869300'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListEiamInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEiamInstancesResponseBody(name='body'),
}

async function listEiamInstances(request: ListEiamInstancesRequest): ListEiamInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEiamInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListEiamRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListEiamRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称', example='华东1（杭州）'),
      regionId?: string(name='RegionId', description='地域ID', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListEiamRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListEiamRegionsResponseBody(name='body'),
}

async function listEiamRegions(request: ListEiamRegionsRequest): ListEiamRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEiamRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group.', example='group_external_id', position='Query'),
  groupIds?: [ string ](name='GroupIds', description='The group IDs.', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group. If you specify this parameter, the query is based on an exact match.', example='name_test', position='Query'),
  groupNameStartsWith?: string(name='GroupNameStartsWith', description='The prefix of the group name. If you specify this parameter, the query follows the leftmost matching principle.', example='name', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: [ 
    {
      createTime?: long(name='CreateTime', description='The time at which the group was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      description?: string(name='Description', description='The description of the group.', example='test group'),
      groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
      groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
      groupName?: string(name='GroupName', description='The name of the group.', example='group_name'),
      groupSourceId?: string(name='GroupSourceId', description='The source ID of the group. If the group was imported from other services, this value indicates the external source ID. By default, the source ID is the instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupSourceType?: string(name='GroupSourceType', description='The source type of the group. Only build_in may be returned, which indicates that the group was created in IDaaS.

*', example='build_in'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      updateTime?: long(name='UpdateTime', description='The time at which the group was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
    }
  ](name='Groups', description='The queried account groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries returned at a time depends on the value of PageSize.', example='100'),
}

model ListGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsResponseBody(name='body'),
}

async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds?: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
}

model ListGroupsForApplicationResponseBody = {
  groups?: [ 
    {
      groupId?: string(name='GroupId', description='The group ID.', example='group_miu8e4t4d7i4u7uwezgr54xxxx'),
    }
  ](name='Groups', description='The group IDs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListGroupsForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsForApplicationResponseBody(name='body'),
}

async function listGroupsForApplication(request: ListGroupsForApplicationRequest): ListGroupsForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model ListGroupsForUserResponseBody = {
  groups?: [ 
    {
      groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Groups', description='The queried account groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries returned at a time depends on the value of PageSize.', example='1000'),
}

model ListGroupsForUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGroupsForUserResponseBody(name='body'),
}

async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceIds?: [ string ](name='InstanceIds', description='The list of instance IDs.', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the instance was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1550115455000'),
      defaultEndpoint?: {
        endpoint?: string(name='Endpoint', description='The endpoint of the instance.', example='example-xxx.aliyunidaas.com'),
        status?: string(name='Status', description='The status of the endpoint. Valid values:

*   resolved
*   unresolved', example='resolved'),
      }(name='DefaultEndpoint', description='The default endpoint of the instance.'),
      description?: string(name='Description', description='The description of the instance.'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_eypq6ljgyeuwmlw672sulxxxxx'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running'),
    }
  ](name='Instances', description='The information of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointAvailableRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListNetworkAccessEndpointAvailableRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称。', example='华东1（杭州）'),
      regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListNetworkAccessEndpointAvailableRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkAccessEndpointAvailableRegionsResponseBody(name='body'),
}

async function listNetworkAccessEndpointAvailableRegions(request: ListNetworkAccessEndpointAvailableRegionsRequest): ListNetworkAccessEndpointAvailableRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpointAvailableRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointAvailableZonesRequest {
  regionId?: string(name='RegionId', position='Host'),
  naeRegionId: string(name='NaeRegionId', description='专属网络端点支持的地域', example='cn-hangzhou', position='Query'),
}

model ListNetworkAccessEndpointAvailableZonesResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='可用区名称。', example='华东1（杭州）可用区J'),
      zoneId?: string(name='ZoneId', description='可用区ID。', example='cn-hangzhou-j'),
    }
  ](name='Zones'),
}

model ListNetworkAccessEndpointAvailableZonesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkAccessEndpointAvailableZonesResponseBody(name='body'),
}

async function listNetworkAccessEndpointAvailableZones(request: ListNetworkAccessEndpointAvailableZonesRequest): ListNetworkAccessEndpointAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpointAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  maxResults?: long(name='MaxResults', description='分页查询时每页行数。默认值为20，最大值为100。', example='20', position='Query'),
  networkAccessEndpointStatus?: string(name='NetworkAccessEndpointStatus', description='专属网络端点连接的状态。NetworkAccessEndpointType取值为shared时不生效。', example='running', position='Query'),
  networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。取值可选范围：1. private - 专属网络端点；2. shared - 共享网络端点', example='private', position='Query'),
  nextToken?: string(name='NextToken', description='查询凭证（Token），取值为上一次API调用返回的NextToken参数值。', example='NTxxxxxexample', position='Query'),
  vpcId?: string(name='VpcId', description='专属网络端点连接的Vpc ID。NetworkAccessEndpointType取值为shared时不生效。', example='vpc-examplexxx', position='Query'),
  vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域，该地域取值必须在ListNetworkAccessEndpointAvailableRegions接口中返回。NetworkAccessEndpointType取值为shared时不生效。', example='cn-hangzhou', position='Query'),
}

model ListNetworkAccessEndpointsResponseBody = {
  networkAccessEndpoints?: [ 
    {
      createTime?: long(name='CreateTime', description='专属网络端点创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
      networkAccessEndpointName?: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点'),
      networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。', example='private'),
      securityGroupId?: string(name='SecurityGroupId', description='专属网络端点使用的安全组ID。', example='sg-examplexxx'),
      status?: string(name='Status', description='专属网络端点状态。', example='running'),
      updateTime?: long(name='UpdateTime', description='专属网络端点最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch列表。', example='vsw-examplexxx'),
      vpcId?: string(name='VpcId', description='专属网络端点连接的VpcID。', example='vpc-examplexxx'),
      vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域。', example='cn-hangzhou'),
    }
  ](name='NetworkAccessEndpoints'),
  nextToken?: string(name='NextToken', description='本次调用返回的查询凭证（Token）值，用于下一次翻页查询。', example='NTxxxexample'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListNetworkAccessEndpointsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkAccessEndpointsResponseBody(name='body'),
}

async function listNetworkAccessEndpoints(request: ListNetworkAccessEndpointsRequest): ListNetworkAccessEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxxx', position='Query'),
}

model ListNetworkAccessPathsResponseBody = {
  networkAccessPaths?: [ 
    {
      createTime?: long(name='CreateTime', description='专属网络端点访问路径创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
      networkAccessPathId?: string(name='NetworkAccessPathId', description='专属网络端点访问路径ID。', example='nap_examplexxx'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='专属网络端点访问路径使用的ENI ID。', example='eni-examplexxx'),
      privateIpAddress?: string(name='PrivateIpAddress', description='专属网络端点访问路径使用的ENI私网地址。', example='cn-hangzhou'),
      status?: string(name='Status', description='专属网络端点访问路径状态。', example='running'),
      updateTime?: long(name='UpdateTime', description='专属网络端点访问路径最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      vSwitchId?: string(name='VSwitchId', description='专属网络端点访问路径的ENI归属的交换机ID。', example='vsw-examplexxx'),
    }
  ](name='NetworkAccessPaths'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListNetworkAccessPathsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListNetworkAccessPathsResponseBody(name='body'),
}

async function listNetworkAccessPaths(request: ListNetworkAccessPathsRequest): ListNetworkAccessPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessPaths', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitParentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='组织ID。', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model ListOrganizationalUnitParentsResponseBody = {
  parents?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='组织ID', example='ou_4lag76zc2km5ssg5vsmm2lznvu'),
      parentId?: string(name='ParentId', description='父组织ID', example='ou_x3beoyepv2ls5iwuge3xhjkwbm'),
    }
  ](name='Parents'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListOrganizationalUnitParentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitParentsResponseBody(name='body'),
}

async function listOrganizationalUnitParents(request: ListOrganizationalUnitParentsRequest): ListOrganizationalUnitParentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnitParents', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='组织ID列表。size限制最大100。', example='[ou_wovwffm62xifdziem7an7xxxxx]', position='Query'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organizational unit.', example='name_001', maxLength=64, position='Query'),
  organizationalUnitNameStartsWith?: string(name='OrganizationalUnitNameStartsWith', description='组织名称，左匹配', example='name', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model ListOrganizationalUnitsResponseBody = {
  organizationalUnits?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      leaf?: boolean(name='Leaf', description='Indicates whether the node is a leaf node.', example='false'),
      organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used by external data to map the data of the organizational unit in IDaaS EIAM. By default, the external ID is the organizational unit ID.

For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitName?: string(name='OrganizationalUnitName', description='组织名称。', example='test_organizationalUnit_name'),
      organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='The source ID of the organizational unit.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    }
  ](name='OrganizationalUnits', description='The list of data objects of organizational units.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The number of entries in the list.', example='100'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations that are allowed to access the application. You can query a maximum of 100 organization IDs at a time.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListOrganizationalUnitsForApplicationResponseBody = {
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organization that is allowed to access the application.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    }
  ](name='OrganizationalUnits', description='The IDs of the organizations that are allowed to access the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListOrganizationalUnitsForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListOrganizationalUnitsForApplicationResponseBody(name='body'),
}

async function listOrganizationalUnitsForApplication(request: ListOrganizationalUnitsForApplicationRequest): ListOrganizationalUnitsForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnitsForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='eiam.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The supported regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  displayNameStartsWith?: string(name='DisplayNameStartsWith', description='账户展示名，模糊匹配', example='name_001', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx', maxLength=32, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86', maxLength=32, position='Query'),
  status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enable', maxLength=32, position='Query'),
  userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM.

For accounts with the same source type and source ID, each account has a unique external ID.', example='id_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userIds?: [ string ](name='UserIds', description='账户的ID集合', position='Query'),
  userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in', maxLength=32, position='Query'),
  usernameStartsWith?: string(name='UsernameStartsWith', description='账户名，左模糊匹配', example='name_001', maxLength=64, position='Query'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The number of entries in the list.', example='100'),
  users?: [ 
    {
      accountExpireTime?: long(name='AccountExpireTime', description='The time when the account expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      createTime?: long(name='CreateTime', description='The time when the account was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      description?: string(name='Description', description='The description of the account.', example='Test account'),
      displayName?: string(name='DisplayName', description='The display name of the account.', example='display_name001'),
      email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com'),
      emailVerified?: boolean(name='EmailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockExpireTime?: long(name='LockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      passwordExpireTime?: long(name='PasswordExpireTime', description='Time When Password Expires', example='1652085686179'),
      passwordSet?: boolean(name='PasswordSet', description='Indicates whether a password is set.', example='false'),
      phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
      phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
      phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
      registerTime?: long(name='RegisterTime', description='The time when the account was registered. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enabled'),
      updateTime?: long(name='UpdateTime', description='The time when the account was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM. By default, the external ID is the account ID.

For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      username?: string(name='Username', description='The username of the account.', example='name001'),
    }
  ](name='Users', description='The list of data objects of accounts.'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  userIds?: [ string ](name='UserIds', description='The IDs of the accounts. You can query a maximum of 100 accounts at a time.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model ListUsersForApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='100'),
  users?: [ 
    {
      userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Users', description='The IDs of the accounts.'),
}

model ListUsersForApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersForApplicationResponseBody(name='body'),
}

async function listUsersForApplication(request: ListUsersForApplicationRequest): ListUsersForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 100.', example='20', position='Query'),
  userIds?: [ string ](name='UserIds', description='The account IDs. A maximum of 100 accounts can be queried.', example='[ou_001]', position='Query'),
}

model ListUsersForGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries that can be returned per page is specified by PageSize.', example='1000'),
  users?: [ 
    {
      userId?: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Users', description='The information about accounts.'),
}

model ListUsersForGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListUsersForGroupResponseBody(name='body'),
}

async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ObtainApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application whose client key you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model ObtainApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    applicationId?: string(name='ApplicationId', description='The ID of the application whose client key you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='The client key secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lastUsedTime?: long(name='LastUsedTime', description='The time when the client key was last used. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
    status?: string(name='Status', description='The status of the client key. Valid values:

*   Enabled: The client key is enabled.
*   Disabled: The client key is disabled.', example='enabled'),
  }(name='ApplicationClientSecret', description='The information about the client key.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ObtainApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ObtainApplicationClientSecretResponseBody(name='body'),
}

async function obtainApplicationClientSecret(request: ObtainApplicationClientSecretRequest): ObtainApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ObtainApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model ObtainDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ObtainDomainProxyTokenResponseBody = {
  domainProxyToken?: {
    createTime?: long(name='CreateTime', description='域名代理Token创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxx'),
    domainProxyToken?: string(name='DomainProxyToken', description='域名代理Token。', example='PTxxxxxxxx'),
    domainProxyTokenId?: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lastUsedTime?: long(name='LastUsedTime', description='域名代理Token最近使用时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    status?: string(name='Status', description='token状态，枚举类型：(enabled）启用,（disabled）禁用。', example='enabled'),
    updateTime?: long(name='UpdateTime', description='域名代理Token最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
  }(name='DomainProxyToken'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ObtainDomainProxyTokenResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ObtainDomainProxyTokenResponseBody(name='body'),
}

async function obtainDomainProxyToken(request: ObtainDomainProxyTokenRequest): ObtainDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ObtainDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The organization IDs. You can remove an account from a maximum of 100 organizations.', position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model RemoveUserFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RemoveUserFromOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUserFromOrganizationalUnitsResponseBody(name='body'),
}

async function removeUserFromOrganizationalUnits(request: RemoveUserFromOrganizationalUnitsRequest): RemoveUserFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersFromGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The account IDs. A maximum of 100 accounts can be removed from a group.', example='[ou_001]', position='Query'),
}

model RemoveUsersFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RemoveUsersFromGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveUsersFromGroupResponseBody(name='body'),
}

async function removeUsersFromGroup(request: RemoveUsersFromGroupRequest): RemoveUsersFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsersFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model RevokeApplicationFromGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromGroupsResponseBody(name='body'),
}

async function revokeApplicationFromGroups(request: RevokeApplicationFromGroupsRequest): RevokeApplicationFromGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromGroups', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations. You can revoke the access permissions from a maximum of 100 organizations at a time.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
}

model RevokeApplicationFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromOrganizationalUnitsResponseBody(name='body'),
}

async function revokeApplicationFromOrganizationalUnits(request: RevokeApplicationFromOrganizationalUnitsRequest): RevokeApplicationFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The IDs of the accounts. You can revoke the access permissions from a maximum of 100 accounts at a time.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model RevokeApplicationFromUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromUsersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RevokeApplicationFromUsersResponseBody(name='body'),
}

async function revokeApplicationFromUsers(request: RevokeApplicationFromUsersRequest): RevokeApplicationFromUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromUsers', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationGrantScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to configure.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  grantScopes?: [ string ](name='GrantScopes', description='The permissions of the Developer API feature.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model SetApplicationGrantScopeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationGrantScopeResponseBody(name='body'),
}

async function setApplicationGrantScope(request: SetApplicationGrantScopeRequest): SetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  callbackProvisioningConfig?: {
    callbackUrl?: string(name='CallbackUrl', description='The URL that the application uses to receive IDaaS event callbacks.', example='https://example.com/event/callback'),
    encryptKey?: string(name='EncryptKey', description='The symmetric key for IDaaS event callbacks. The key is an AES-256 encryption key in the HEX format.', example='ad3b248**************************b3561a73d7'),
    encryptRequired?: boolean(name='EncryptRequired', description='Specifies whether to encrypt IDaaS event callback messages. Valid values:

*   true: encrypt the messages.
*   false: transmit the messages in plaintext.', example='true'),
    listenEventScopes?: [ string ](name='ListenEventScopes', description='The list of types of IDaaS event callback messages that are supported by the listener.'),
  }(name='CallbackProvisioningConfig', description='The configuration of event callback synchronization. This parameter is required when the ProvisionProtocolType parameter is set to idaas_callback.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  provisionPassword?: boolean(name='ProvisionPassword', description='Specifies whether to synchronize the password in IDaaS user event callbacks. Valid values:

*   true: synchronize the password.
*   false: do not synchronize the password.', example='true', position='Query'),
  provisionProtocolType: string(name='ProvisionProtocolType', description='The synchronization protocol type of the application. Valid values:

*   idaas_callback: custom event callback protocol of IDaaS.
*   scim2: System for Cross-domain Identity Management (SCIM) protocol.', example='idaas_callback', maxLength=64, position='Query'),
  scimProvisioningConfig?: {
    authnConfiguration?: {
      authnMode?: string(name='AuthnMode', description='The authentication mode of the SCIM protocol. Valid value:

*   oauth2: OAuth2.0 mode.', example='oauth2'),
      authnParam?: {
        accessToken?: string(name='AccessToken', description='The access token. If the GrantType parameter is set to bearer_token, you can set this parameter.', example='k52x2ru63rlkflina5utgkxxxx'),
        authnMethod?: string(name='AuthnMethod', description='The authentication mode of the SCIM protocol. Valid values:

*   client_secret_basic: The client secret is passed in the request header.
*   client_secret_post: The client secret is passed in the request body.', example='client_secret_basic'),
        clientId?: string(name='ClientId', description='The client ID of the application.', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
        clientSecret?: string(name='ClientSecret', description='The client secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
        tokenEndpoint?: string(name='TokenEndpoint', description='The token endpoint.', example='https://www.example.com/oauth/token'),
      }(name='AuthnParam', description='The configuration parameters related to authorization.

*   If the GrantType parameter is set to client_credentials, you can set the configuration parameters ClientId, ClientSecret, and AuthnMethod.
*   If the GrantType parameter is set to bearer_token, you can set the configuration parameter AccessToken.'),
      grantType?: string(name='GrantType', description='The grant type of the SCIM protocol. Valid values:

*   client_credentials: client mode.
*   bearer_token: key mode.', example='bearer_token'),
    }(name='AuthnConfiguration', description='The configuration parameters related to SCIM-based synchronization.'),
    fullPushScopes?: [ string ](name='FullPushScopes', description='The full synchronization scope of the SCIM protocol. Valid value:

*   urn:alibaba:idaas:app:scim:User:PUSH: full account data synchronization.'),
    provisioningActions?: [ string ](name='ProvisioningActions', description='The resource operations of the SCIM protocol. Valid values:

*   urn:alibaba:idaas:app:scim:User:CREATE: account creation.
*   urn:alibaba:idaas:app:scim:User:UPDATE: account update.
*   urn:alibaba:idaas:app:scim:User:DELETE: account deletion.'),
    scimBaseUrl?: string(name='ScimBaseUrl', description='The base URL that the application uses to receive the SCIM protocol for IDaaS synchronization.', example='https://example.com/scim'),
  }(name='ScimProvisioningConfig', description='The configuration of SCIM-based IDaaS synchronization. This parameter is required when the ProvisionProtocolType parameter is set to scim2.', position='Query'),
}

model SetApplicationProvisioningConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningConfigResponseBody(name='body'),
}

async function setApplicationProvisioningConfig(request: SetApplicationProvisioningConfigRequest): SetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The list of organizational units that are authorized for account synchronization.', position='Query'),
}

model SetApplicationProvisioningScopeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationProvisioningScopeResponseBody(name='body'),
}

async function setApplicationProvisioningScope(request: SetApplicationProvisioningScopeRequest): SetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationSsoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  initLoginType?: string(name='InitLoginType', description='The initial SSO method. Valid values:

*   only_app_init_sso: Only application-initiated SSO is allowed. This method is selected by default when the SSO protocol of the application is an OIDC protocol. If this method is selected when the SSO protocol of the application is SAML, the InitLoginUrl parameter is required.
*   idaas_or_app_init_sso: IDaaS-initiated SSO and application-initiated SSO are allowed. This method is selected by default when the SSO protocol of the application is SAML. If this method is selected when the SSO protocol of the application is an OIDC protocol, the InitLoginUrl parameter is required.', example='only_app_init_sso', position='Query'),
  initLoginUrl?: string(name='InitLoginUrl', description='The initial webhook URL of SSO. This parameter is required when the SSO protocol of the application is an OIDC protocol and the InitLoginType parameters is set to idaas_or_app_init_sso or when the SSO protocol of the application is SAML and the InitLoginType parameter is set to only_app_init_sso.', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  oidcSsoConfig?: {
    accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='The validity period of the issued access token. Unit: seconds. Default value: 1200.', example='1200'),
    codeEffectiveTime?: long(name='CodeEffectiveTime', description='The validity period of the issued code. Unit: seconds. Default value: 60.', example='60'),
    customClaims?: [ 
      {
        claimName?: string(name='ClaimName', description='The claim name.', example='"Role"'),
        claimValueExpression?: string(name='ClaimValueExpression', description='The expression that is used to generate the value of the claim.', example='user.dict.applicationRole'),
      }
    ](name='CustomClaims', description='The custom claims that are returned for the ID token.'),
    grantScopes?: [ string ](name='GrantScopes', description='The scopes of user attributes that can be returned for the UserInfo endpoint or ID token.', example='profile，email'),
    grantTypes?: [ string ](name='GrantTypes', description='The list of grant types that are supported for OIDC protocols.', example='authorization_code'),
    idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='The validity period of the issued ID token. Unit: seconds. Default value: 300.', example='300'),
    passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='The ID of the identity authentication source in password mode. Specify this parameter only when the value of the GrantTypes parameter includes the password mode.', example='ia_password'),
    passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='Specifies whether time-based one-time password (TOTP) authentication is required in password mode. Specify this parameter only when the value of the GrantTypes parameter includes the password mode.', example='true'),
    pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='The algorithms that are used to calculate the code challenge for PKCE.', example='S256'),
    pkceRequired?: boolean(name='PkceRequired', description='Specifies whether the SSO of the application requires Proof Key for Code Exchange (PKCE) (RFC 7636).', example='true'),
    postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='The list of logout redirect URIs that are supported by the application.'),
    redirectUris?: [ string ](name='RedirectUris', description='The list of redirect URIs that are supported by the application.'),
    refreshTokenEffective?: long(name='RefreshTokenEffective', description='The validity period of the issued refresh token. Unit: seconds. Default value: 86400.', example='86400'),
    responseTypes?: [ string ](name='ResponseTypes', description='The response types that are supported by the application. Specify this parameter when the value of the GrantTypes parameter includes the implicit mode.', example='token id_token'),
    subjectIdExpression?: string(name='SubjectIdExpression', description='The custom expression that is used to generate the subject ID returned for the ID token.', example='user.userid', maxLength=128),
  }(name='OidcSsoConfig', description='The Open ID Connect (OIDC)-based SSO configuration attributes of the application.', position='Query'),
  samlSsoConfig?: {
    assertionSigned?: boolean(name='AssertionSigned', description='assertion是否签名', example='true'),
    attributeStatements?: [ 
      {
        attributeName?: string(name='AttributeName', description='The attribute name.', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
        attributeValueExpression?: string(name='AttributeValueExpression', description='The expression that is used to generate the value of the attribute.', example='user.username'),
      }
    ](name='AttributeStatements', description='The additional user attributes in the SAML assertion.'),
    defaultRelayState?: string(name='DefaultRelayState', description='The default value of the RelayState attribute. If the SSO request is initiated in EIAM, the RelayState attribute in the SAML response is set to this default value.', example='https://home.console.aliyun.com'),
    nameIdFormat?: string(name='NameIdFormat', description='The Format attribute of the NameID element in the SAML assertion. Valid values:

*   urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified: No format is specified. How to resolve the NameID element depends on the application.
*   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress: The NameID element must be an email address.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:persistent: The NameID element must be persistent.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:transient: The NameID element must be transient.', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
    nameIdValueExpression?: string(name='NameIdValueExpression', description='The expression that is used to generate the value of NameID in the SAML assertion.', example='user.email'),
    responseSigned?: boolean(name='ResponseSigned', description='response是否签名', example='true'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The algorithm that is used to calculate the signature for the SAML assertion.', example='RSA-SHA256'),
    spEntityId?: string(name='SpEntityId', description='The entity ID of the application in SAML. The application assumes the role of service provider.', example='urn:alibaba:cloudcomputing'),
    spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='The Assertion Consumer Service (ACS) URL of the application in SAML. The application assumes the role of service provider.', example='https://signin.aliyun.com/saml-role/sso'),
  }(name='SamlSsoConfig', description='The Security Assertion Markup Language (SAML)-based SSO configuration attributes of the application.', position='Query'),
}

model SetApplicationSsoConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetApplicationSsoConfigResponseBody(name='body'),
}

/**
  * In IDaaS EIAM, the application management feature supports multiple SSO protocols for applications, including SAML 2.0 and OIDC protocols. Each application supports only one protocol, and the protocol cannot be changed after the application is created. You can specify the SSO configuration attributes of an application based on the supported SSO protocol.
  *
 */
async function setApplicationSsoConfig(request: SetApplicationSsoConfigRequest): SetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model SetDefaultDomainResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetDefaultDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetDefaultDomainResponseBody(name='body'),
}

async function setDefaultDomain(request: SetDefaultDomainRequest): SetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetForgetPasswordConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  authenticationChannels?: [ string ](name='AuthenticationChannels', description='身份认证渠道。枚举取值:email(邮件)、sms(短信)', example='email', maxLength=32, position='Query'),
  forgetPasswordStatus: string(name='ForgetPasswordStatus', description='忘记密码配置状态。枚举取值:enabled(开启)、disabled(禁用)', example='enabled', maxLength=32, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='eiam-111ccc1111', maxLength=64, position='Query'),
}

model SetForgetPasswordConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetForgetPasswordConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetForgetPasswordConfigurationResponseBody(name='body'),
}

async function setForgetPasswordConfiguration(request: SetForgetPasswordConfigurationRequest): SetForgetPasswordConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetForgetPasswordConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordComplexityConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordComplexityRules?: [ 
    {
      passwordCheckType?: string(name='PasswordCheckType', description='The type of the password check. Valid values:

*   inclusion_upper_case: The password must contain uppercase letters.
*   inclusion_lower_case: The password must contain lowercase letters.
*   inclusion_special_case: The password must contain one or more of the following special characters: @ % + \\ / \\" ! # $ ^ ? : , ( ) { } \\[ ] ~ - \\_ .
*   inclusion_number: The password must contain digits.
*   exclusion_username: The password cannot contain a username.
*   exclusion_email: The password cannot contain an email prefix.
*   exclusion_phone_number: The password cannot contain a mobile number.
*   exclusion_display_name: The password cannot contain a display name.', example='inclusion_upper_case', maxLength=64),
    }
  ](name='PasswordComplexityRules', description='The password complexity rules.', position='Query'),
  passwordMinLength: int32(name='PasswordMinLength', description='The minimum number of characters in a password.', example='10', maxLength=32, position='Query'),
}

model SetPasswordComplexityConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordComplexityConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetPasswordComplexityConfigurationResponseBody(name='body'),
}

async function setPasswordComplexityConfiguration(request: SetPasswordComplexityConfigurationRequest): SetPasswordComplexityConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordComplexityConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordExpirationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordExpirationAction?: string(name='PasswordExpirationAction', description='The action to take upon password expiration. This parameter must be specified when PasswordExpirationStatus is set to enabled. Valid values:

*   forbid_login: Users cannot log on to IDaaS.
*   force_update_password: Users must change the password.
*   remind_update_password: IDaaS reminds users to change the password upon each logon.', example='force_update_password', maxLength=32, position='Query'),
  passwordExpirationNotificationChannels?: [ string ](name='PasswordExpirationNotificationChannels', description='The methods for receiving password expiration notifications. This parameter must be specified when PasswordExpirationNotificationStatus is set to enabled.', example='login', maxLength=32, position='Query'),
  passwordExpirationNotificationDuration?: int32(name='PasswordExpirationNotificationDuration', description='The number of days before the expiration date during which password expiration notifications are sent. Unit: day. This parameter must be specified when PasswordExpirationNotificationStatus is set to enabled.', example='7', maxLength=32, position='Query'),
  passwordExpirationNotificationStatus?: string(name='PasswordExpirationNotificationStatus', description='Specifies whether to enable the password expiration notification feature. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordExpirationStatus: string(name='PasswordExpirationStatus', description='Specifies whether to enable the password expiration feature. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordForcedUpdateDuration?: int32(name='PasswordForcedUpdateDuration', description='The number of days before which users must change the password to prevent password expiration. Unit: day. You must set this parameter to a value greater than the value of PasswordExpirationNotificationDuration.', example='7', maxLength=32, position='Query'),
  passwordValidMaxDay?: int32(name='PasswordValidMaxDay', description='The validity period of a password. Unit: day. This parameter must be specified when PasswordExpirationStatus is set to enabled.', example='180', maxLength=32, position='Query'),
}

model SetPasswordExpirationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordExpirationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetPasswordExpirationConfigurationResponseBody(name='body'),
}

async function setPasswordExpirationConfiguration(request: SetPasswordExpirationConfigurationRequest): SetPasswordExpirationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordExpirationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordHistoryConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordHistoryMaxRetention?: int32(name='PasswordHistoryMaxRetention', description='The maximum number of recent passwords that can be retained. This parameter must be specified when PasswordHistoryStatus is set to enabled.', example='3', maxLength=32, position='Query'),
  passwordHistoryStatus: string(name='PasswordHistoryStatus', description='Specifies whether to enable the password history feature. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
}

model SetPasswordHistoryConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordHistoryConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetPasswordHistoryConfigurationResponseBody(name='body'),
}

async function setPasswordHistoryConfiguration(request: SetPasswordHistoryConfigurationRequest): SetPasswordHistoryConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordHistoryConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordInitializationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to enable forcible password change upon first logon. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordInitializationNotificationChannels?: [ string ](name='PasswordInitializationNotificationChannels', description='The methods for receiving password initialization notifications.', example='email', maxLength=32, position='Query'),
  passwordInitializationStatus: string(name='PasswordInitializationStatus', description='Specifies whether to enable password initialization. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. This parameter is required when PasswordInitializationStatus is set to enabled. Set the value to random.

*   random: A randomly generated password is used.', example='random', maxLength=32, position='Query'),
}

model SetPasswordInitializationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordInitializationConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetPasswordInitializationConfigurationResponseBody(name='body'),
}

async function setPasswordInitializationConfiguration(request: SetPasswordInitializationConfigurationRequest): SetPasswordInitializationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordInitializationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetUserPrimaryOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the new primary organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model SetUserPrimaryOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetUserPrimaryOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetUserPrimaryOrganizationalUnitResponseBody(name='body'),
}

async function setUserPrimaryOrganizationalUnit(request: SetUserPrimaryOrganizationalUnitRequest): SetUserPrimaryOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserPrimaryOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model UnlockUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UnlockUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnlockUserResponseBody(name='body'),
}

async function unlockUser(request: UnlockUserRequest): UnlockUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationAuthorizationTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to modify.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  authorizationType: string(name='AuthorizationType', description='The authorization type of the application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.', example='authorize_required', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateApplicationAuthorizationTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationAuthorizationTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationAuthorizationTypeResponseBody(name='body'),
}

async function updateApplicationAuthorizationType(request: UpdateApplicationAuthorizationTypeRequest): UpdateApplicationAuthorizationTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationAuthorizationType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to modify.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  description?: string(name='Description', description='The description of the application.', example='A demo application that is used for test.', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
}

model UpdateApplicationDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateApplicationDescriptionResponseBody(name='body'),
}

async function updateApplicationDescription(request: UpdateApplicationDescriptionRequest): UpdateApplicationDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupId: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group.', example='name_test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupResponseBody(name='body'),
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the account group. The value can be up to 256 characters in length.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupId: string(name='GroupId', description='The ID of the account group.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateGroupDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateGroupDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGroupDescriptionResponseBody(name='body'),
}

async function updateGroupDescription(request: UpdateGroupDescriptionRequest): UpdateGroupDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The new description of the instance.', example='测试实例', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose description you want to modify.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateInstanceDescriptionResponseBody(name='body'),
}

async function updateInstanceDescription(request: UpdateInstanceDescriptionRequest): UpdateInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNetworkAccessEndpointNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxxx', position='Query'),
  networkAccessEndpointName: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点', position='Query'),
}

model UpdateNetworkAccessEndpointNameResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateNetworkAccessEndpointNameResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateNetworkAccessEndpointNameResponseBody(name='body'),
}

async function updateNetworkAccessEndpointName(request: UpdateNetworkAccessEndpointNameRequest): UpdateNetworkAccessEndpointNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNetworkAccessEndpointName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organization. The name can be up to 64 characters in length and must be unique in the same parent organization.', example='ou_name', maxLength=64, position='Query'),
}

model UpdateOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOrganizationalUnitResponseBody(name='body'),
}

async function updateOrganizationalUnit(request: UpdateOrganizationalUnitRequest): UpdateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the organization. The value can be up to 256 characters in length.', example='organizationalUnit_test', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model UpdateOrganizationalUnitDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOrganizationalUnitDescriptionResponseBody(name='body'),
}

async function updateOrganizationalUnitDescription(request: UpdateOrganizationalUnitDescriptionRequest): UpdateOrganizationalUnitDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnitDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitParentIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  parentId: string(name='ParentId', description='The parent organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model UpdateOrganizationalUnitParentIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitParentIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateOrganizationalUnitParentIdResponseBody(name='body'),
}

async function updateOrganizationalUnitParentId(request: UpdateOrganizationalUnitParentIdRequest): UpdateOrganizationalUnitParentIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnitParentId', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  customFields?: [ 
    {
      fieldName?: string(name='FieldName', description='The name of the extended field. You must create an extended field before you specify this parameter. To create an extended field, go to the Extended Fields page of the specified EIAM instance in the IDaaS console.', example='nick_name', maxLength=64),
      fieldValue?: string(name='FieldValue', description='The value of the extended field. The value follows the limits on the properties of the extended field.', example='test_value', maxLength=64),
      operation?: string(name='Operation', description='The operation type of the extended field. Valid values:

*   add: adds a value to the extended field of the account.
*   replace: replaces the existing value of the extended field of the account. If the existing value to be replaced does not exist, this operation changes to the add operation.
*   remove: removes a value from the extended field of the account.', example='add', maxLength=64),
    }
  ](name='CustomFields', description='The custom extended fields.', position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the account. The display name can be up to 64 characters in length.', example='test_name', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address. The prefix of the email address can contain letters, digits, periods (.), underscores (\\_), and hyphens (-).', example='example@example.com', maxLength=64, position='Query'),
  emailVerified?: boolean(name='EmailVerified', description='Specifies whether the email address is verified. This parameter must be specified if you specify Email. You can set this parameter to true if you have no special business requirements.', example='true', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile number. The mobile number must be 6 to 15 digits in length.', example='156xxxxxxxxx', maxLength=32, position='Query'),
  phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Specifies whether the mobile number is verified. This parameter must be specified if you specify PhoneNumber. You can set this parameter to true if you have no special business requirements.', example='true', maxLength=64, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The area code of the mobile number. For example, the area code of a mobile number in the Chinese mainland is 86 without 00 or the plus sign (+). This parameter must be specified if you specify PhoneNumber.', example='86', maxLength=32, position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  username?: string(name='Username', description='The name of the account. The name can be up to 64 characters in length. It can contain letters, digits, and the following special characters: \\_ . @ -', example='username_test', maxLength=64, position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the account. The value can be up to 256 characters in length.', example='this is a test.', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model UpdateUserDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserDescriptionResponseBody(name='body'),
}

async function updateUserDescription(request: UpdateUserDescriptionRequest): UpdateUserDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserPasswordRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  password: string(name='Password', description='The new password of the account. For more information about the password format, see the "Password Policies" topic.', example='123456', maxLength=64, position='Query'),
  passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to enable forcible password change upon first logon. Default value: disabled. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  userNotificationChannels?: [ string ](name='UserNotificationChannels', description='The methods for receiving password notifications.', example='sms', maxLength=64, position='Query'),
}

model UpdateUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateUserPasswordResponseBody(name='body'),
}

async function updateUserPassword(request: UpdateUserPasswordRequest): UpdateUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserPassword', 'POST', '/', 'json', false, 'json', request);
}

