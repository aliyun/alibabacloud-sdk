/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eiam';
  @version = '2021-12-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AuthorizeApplicationToOrganizationalUnitsRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='被授权的组织ID的列表，必填，列表中最多包含100个元素。', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model AuthorizeApplicationToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
}

model AuthorizeApplicationToOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeApplicationToOrganizationalUnitsResponseBody(name='body'),
}

async function authorizeApplicationToOrganizationalUnits(request: AuthorizeApplicationToOrganizationalUnitsRequest): AuthorizeApplicationToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToUsersRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userIds: [ string ](name='UserIds', description='被授权的账户ID列表，必填，列表中最多包含100个元素。', position='Query'),
}

model AuthorizeApplicationToUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
}

model AuthorizeApplicationToUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeApplicationToUsersResponseBody(name='body'),
}

async function authorizeApplicationToUsers(request: AuthorizeApplicationToUsersRequest): AuthorizeApplicationToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToUsers', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  applicationName: string(name='ApplicationName', description='应用的表示名称', maxLength=64, position='Query'),
  applicationSourceType: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用', maxLength=64, position='Query'),
  applicationTemplateId?: string(name='ApplicationTemplateId', description='应用创建来源为模板应用时必须指定', position='Query'),
  description?: string(name='Description', description='应用的描述信息', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  logoUrl?: string(name='LogoUrl', description='应用Logo地址', maxLength=128, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  ssoType: string(name='SsoType', description='单点登录类型，saml2 or oidc', maxLength=64, position='Query'),
}

model CreateApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', description='应用Id'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationClientSecretRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID'),
    clientSecret?: string(name='ClientSecret', description='IDaaS EIAM 客户端密钥'),
    secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationClientSecretResponseBody(name='body'),
}

async function createApplicationClientSecret(request: CreateApplicationClientSecretRequest): CreateApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='实例ID'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationClientSecretRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  secretId: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', maxLength=64, position='Query'),
}

model DeleteApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationClientSecretResponseBody(name='body'),
}

async function deleteApplicationClientSecret(request: DeleteApplicationClientSecretRequest): DeleteApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DeleteInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceResponseBody(name='body'),
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DisableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DisableApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableApplicationResponseBody(name='body'),
}

async function disableApplication(request: DisableApplicationRequest): DisableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplication', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationApiInvokeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DisableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DisableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  body: DisableApplicationApiInvokeResponseBody(name='body'),
}

async function disableApplicationApiInvoke(request: DisableApplicationApiInvokeRequest): DisableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationClientSecretRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  secretId: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥ID', maxLength=64, position='Query'),
}

model DisableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DisableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  body: DisableApplicationClientSecretResponseBody(name='body'),
}

async function disableApplicationClientSecret(request: DisableApplicationClientSecretRequest): DisableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationProvisioningRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DisableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model DisableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  body: DisableApplicationProvisioningResponseBody(name='body'),
}

async function disableApplicationProvisioning(request: DisableApplicationProvisioningRequest): DisableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EnableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model EnableApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableApplicationResponseBody(name='body'),
}

async function enableApplication(request: EnableApplicationRequest): EnableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplication', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationApiInvokeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EnableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model EnableApplicationApiInvokeResponse = {
  headers: map[string]string(name='headers'),
  body: EnableApplicationApiInvokeResponseBody(name='body'),
}

async function enableApplicationApiInvoke(request: EnableApplicationApiInvokeRequest): EnableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationClientSecretRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  secretId: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', maxLength=64, position='Query'),
}

model EnableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model EnableApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  body: EnableApplicationClientSecretResponseBody(name='body'),
}

async function enableApplicationClientSecret(request: EnableApplicationClientSecretRequest): EnableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationProvisioningRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EnableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model EnableApplicationProvisioningResponse = {
  headers: map[string]string(name='headers'),
  body: EnableApplicationProvisioningResponseBody(name='body'),
}

async function enableApplicationProvisioning(request: EnableApplicationProvisioningRequest): EnableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetApplicationResponseBody = {
  application?: {
    apiInvokeStatus?: string(name='ApiInvokeStatus', description='IDaaS EIAM 应用apiInvoke能力启用状态'),
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id'),
    applicationName?: string(name='ApplicationName', description='IDaaS EIAM 应用名称'),
    applicationSourceType?: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用'),
    authorizationType?: string(name='AuthorizationType', description='IDaaS EIAM 应用授权类型，default or authorize_required'),
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID'),
    createTime?: long(name='CreateTime', description='IDaaS EIAM 应用创建时间'),
    description?: string(name='Description', description='IDaaS EIAM 应用描述信息'),
    features?: string(name='Features', description='IDaaS EIAM 应用支持的特性，provisioning、permission_system、api_invoke等'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id'),
    logoUrl?: string(name='LogoUrl', description='IDaaS EIAM 应用图标URL地址'),
    ssoType?: string(name='SsoType', description='IDaaS EIAM 应用支持的sso协议类型，oidc、saml2'),
    status?: string(name='Status', description='IDaaS EIAM 应用状态'),
    updateTime?: long(name='UpdateTime', description='IDaaS EIAM 应用最近更新时间'),
  }(name='Application'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationResponseBody(name='body'),
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationGrantScopeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetApplicationGrantScopeResponseBody = {
  applicationGrantScope?: {
    grantScopes?: [ string ](name='GrantScopes', description='应用授权的api权限scope列表'),
  }(name='ApplicationGrantScope', description='授权范围'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model GetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationGrantScopeResponseBody(name='body'),
}

async function getApplicationGrantScope(request: GetApplicationGrantScopeRequest): GetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningConfigRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetApplicationProvisioningConfigResponseBody = {
  applicationProvisioningConfig?: {
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id'),
    callbackProvisioningConfig?: {
      callbackUrl?: string(name='CallbackUrl', description='IDaaS回调SP地址，当provisionProtocolType为idaas_callback时必填'),
      encryptKey?: string(name='EncryptKey', description='IDaaS回调对称加密秘钥, AES 256格式'),
      encryptRequired?: boolean(name='EncryptRequired', description='IDaaS回调是否加密'),
      listenEventScopes?: [ string ](name='ListenEventScopes', description='IDaaS回调事件监听范围'),
    }(name='CallbackProvisioningConfig', description='IDaaS回调同步配置，当provisionProtocolType为idaas_callback时必填'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id'),
    provisionJwksEndpoint?: string(name='ProvisionJwksEndpoint', description='应用同步验签公钥端点'),
    provisionPassword?: boolean(name='ProvisionPassword', description='同步信息是否包含密码'),
    provisionProtocolType?: string(name='ProvisionProtocolType', description='IDaaS EIAM 应用同步协议，scim2 or custom or idaas_callback'),
    status?: string(name='Status', description='IDaaS 应用同步启用状态'),
  }(name='ApplicationProvisioningConfig'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model GetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationProvisioningConfigResponseBody(name='body'),
}

async function getApplicationProvisioningConfig(request: GetApplicationProvisioningConfigRequest): GetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningScopeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetApplicationProvisioningScopeResponseBody = {
  applicationProvisioningScope?: {
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='同步授权的组织机构列表'),
  }(name='ApplicationProvisioningScope', description='同步实体范围'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model GetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationProvisioningScopeResponseBody(name='body'),
}

async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationSsoConfigRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetApplicationSsoConfigResponseBody = {
  applicationSsoConfig?: {
    initLoginType?: string(name='InitLoginType', description='初始化登录方式，idp_init or sp_init or idp_or_sp_init'),
    initLoginUrl?: string(name='InitLoginUrl', description='仅SP-init情况下，SP指定的登录地址'),
    oidcSsoConfig?: {
      accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='返回的access token有效时间，单位为Second'),
      codeEffectiveTime?: long(name='CodeEffectiveTime', description='Authorization code流中code的有效时间，单位为Second'),
      customClaims?: [ 
        {
          claimName?: string(name='ClaimName', description='返回的claim名称'),
          claimValueExpression?: string(name='ClaimValueExpression', description='返回的claim取值表达式'),
        }
      ](name='CustomClaims', description='自定义id token返回信息'),
      grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等'),
      grantTypes?: [ string ](name='GrantTypes', description='应用支持的授权类型，OIDC标准参数'),
      idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='id token有效时间，单位为Second'),
      pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='支持的PKCE算法类型'),
      pkceRequired?: boolean(name='PkceRequired', description='是否强制PKCE,authorization_code强制必须指定PKCE参数'),
      redirectUris?: [ string ](name='RedirectUris', description='应用支持的回调的uri列表，OIDC标准参数'),
      refreshTokenEffective?: long(name='RefreshTokenEffective', description='refresh token有效时间，单位为Second'),
      responseTypes?: [ string ](name='ResponseTypes', description='隐式流支持的返回类型，OIDC标准参数，如token id_token'),
      subjectIdExpression?: string(name='SubjectIdExpression', description='自定义id token返回信息'),
    }(name='OidcSsoConfig', description='IDaaS OIDC SSO配置，单点登录类型为Oidc时可以配置'),
    protocolEndpointDomain?: {
      oauth2AuthorizationEndpoint?: string(name='Oauth2AuthorizationEndpoint', description='单点登录地址，接受认证请求'),
      oauth2DeviceAuthorizationEndpoint?: string(name='Oauth2DeviceAuthorizationEndpoint', description='oauth2设备模式授权端点'),
      oauth2RevokeEndpoint?: string(name='Oauth2RevokeEndpoint', description='吊销 access token 端点'),
      oauth2TokenEndpoint?: string(name='Oauth2TokenEndpoint', description='换取access token 端点'),
      oauth2UserinfoEndpoint?: string(name='Oauth2UserinfoEndpoint', description='获取用户信息端点'),
      oidcIssuer?: string(name='OidcIssuer', description='OIDC issuer地址，类似于SAML Entity ID'),
      oidcJwksEndpoint?: string(name='OidcJwksEndpoint', description='获取公钥信息端点'),
      samlMetaEndpoint?: string(name='SamlMetaEndpoint', description='IdP 单点登录地址 SSO URL'),
      samlSsoEndpoint?: string(name='SamlSsoEndpoint', description='saml SSO URL 单点登录地址 '),
    }(name='ProtocolEndpointDomain', description='IDaaS metadata 端点配置信息'),
    samlSsoConfig?: {
      attributeStatements?: [ 
        {
          attributeName?: string(name='AttributeName', description='SAML属性的Name'),
          attributeValueExpression?: string(name='AttributeValueExpression', description='SAML属性取值表达式'),
        }
      ](name='AttributeStatements', description='SAML断言的属性配置'),
      defaultRelayState?: string(name='DefaultRelayState', description='默认RelayState取值，可空'),
      nameIdFormat?: string(name='NameIdFormat', description='SAML标准协议中的NameID格式'),
      nameIdValueExpression?: string(name='NameIdValueExpression', description='返回的claim名称'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='IDaaS签发SAML断言时使用的签名算法'),
      spEntityId?: string(name='SpEntityId', description='SP的EntityId，用于唯一标识SP身份'),
      spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='SP的SSO地址，用于接受IDaaS签发的SAML断言'),
    }(name='SamlSsoConfig', description='IDaaS SAML SSO配置，单点登录类型为saml2时可以配置'),
    ssoStatus?: string(name='SsoStatus', description='应用 SSO 启用状态'),
  }(name='ApplicationSsoConfig'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model GetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetApplicationSsoConfigResponseBody(name='body'),
}

async function getApplicationSsoConfig(request: GetApplicationSsoConfigRequest): GetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetInstanceResponseBody = {
  instance?: {
    createTime?: long(name='CreateTime', description='实例的创建时间'),
    defaultEndpoint?: {
      endpoint?: string(name='Endpoint', description='用户portal和应用开发集成的端点地址'),
      status?: string(name='Status', description='实例域名状态，Unresolved(未解析)、Resolved(已解析)'),
    }(name='DefaultEndpoint', description='实例默认域名,用户portal和应用开发集成的端点地址'),
    description?: string(name='Description', description='实例描述信息'),
    egressAddresses?: [ string ](name='EgressAddresses', description='IDaaS实例出口公网地址段'),
    instanceId?: string(name='InstanceId', description='实例id'),
    status?: string(name='Status', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)'),
  }(name='Instance'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetOrganizationalUnitRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='机构Id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='描述'),
    instanceId?: string(name='InstanceId', description='实例Id'),
    organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='外部ID'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称'),
    organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='来源ID'),
    organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='来源类型, build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导]'),
    parentId?: string(name='ParentId', description='父机构ID'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrganizationalUnitResponseBody(name='body'),
}

async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetRootOrganizationalUnitRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model GetRootOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='描述'),
    instanceId?: string(name='InstanceId', description='实例Id'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
  }(name='OrganizationalUnit'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model GetRootOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  body: GetRootOrganizationalUnitResponseBody(name='body'),
}

async function getRootOrganizationalUnit(request: GetRootOrganizationalUnitRequest): GetRootOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRootOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userId: string(name='UserId', description='账号ID', maxLength=64, position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  user?: {
    accountExpireTime?: long(name='AccountExpireTime', description='账户过期时间'),
    createTime?: long(name='CreateTime', description='创建时间'),
    description?: string(name='Description', description='账号描述'),
    displayName?: string(name='DisplayName', description='账户显示名'),
    email?: string(name='Email', description='邮箱'),
    emailVerified?: boolean(name='EmailVerified', description='邮箱是否已验证'),
    instanceId?: string(name='InstanceId', description='实例Id'),
    lockExpireTime?: long(name='LockExpireTime', description='锁定过期时间'),
    phoneNumber?: string(name='PhoneNumber', description='手机号码'),
    phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='手机号是否已验证'),
    phoneRegion?: string(name='PhoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
    primaryOrganizationalUnitId?: string(name='PrimaryOrganizationalUnitId', description='用户所属主机构ID'),
    registerTime?: long(name='RegisterTime', description='账户注册时间'),
    status?: string(name='Status', description='账户状态, enabled:启用,disabled:禁用'),
    updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
    userExternalId?: string(name='UserExternalId', description='外部ID'),
    userId?: string(name='UserId', description='账户ID'),
    userSourceId?: string(name='UserSourceId', description='来源ID'),
    userSourceType?: string(name='UserSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
    username?: string(name='Username', description='账户名'),
  }(name='User'),
}

model GetUserResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserResponseBody(name='body'),
}

async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationClientSecretsRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListApplicationClientSecretsResponseBody = {
  applicationClientSecrets?: [ 
    {
      applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id'),
      clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID'),
      clientSecret?: string(name='ClientSecret', description='客户端密钥（已脱敏）'),
      instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id'),
      lastUsedTime?: long(name='LastUsedTime', description='IDaaS EIAM 客户端密钥最近使用时间'),
      secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id'),
      status?: string(name='Status', description='IDaaS EIAM 客户端密钥状态'),
    }
  ](name='ApplicationClientSecrets'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='列表条数目'),
}

model ListApplicationClientSecretsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationClientSecretsResponseBody(name='body'),
}

async function listApplicationClientSecrets(request: ListApplicationClientSecretsRequest): ListApplicationClientSecretsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationClientSecrets', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='应用Id列表', position='Query'),
  applicationName?: string(name='ApplicationName', description='应用的表示名称', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', description='应用状态检索条件', maxLength=32, position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id'),
      applicationName?: string(name='ApplicationName', description='IDaaS EIAM 应用名称'),
      applicationSourceType?: string(name='ApplicationSourceType', description='创建应用的来源类型，标准协议 or 模板应用 or 自建应用'),
      clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID'),
      createTime?: long(name='CreateTime', description='IDaaS EIAM 应用创建时间'),
      description?: string(name='Description', description='IDaaS EIAM 应用描述信息'),
      features?: string(name='Features', description='IDaaS EIAM 应用支持的特性，provisioning、permission_system、api_invoke等'),
      instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id'),
      logoUrl?: string(name='LogoUrl', description='IDaaS EIAM 应用图标URL地址'),
      ssoType?: string(name='SsoType', description='IDaaS EIAM 应用支持的sso协议类型，oidc、saml2'),
      status?: string(name='Status', description='IDaaS EIAM 应用状态'),
      updateTime?: long(name='UpdateTime', description='IDaaS EIAM 应用最近更新时间'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='列表条数目'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForOrganizationalUnitRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='非必填，如果填写则可以基于应用ID进行过滤，列表中最多包含100个元素。', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='组织的唯一标识。', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListApplicationsForOrganizationalUnitResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用的唯一标识。'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
}

model ListApplicationsForOrganizationalUnitResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsForOrganizationalUnitResponseBody(name='body'),
}

async function listApplicationsForOrganizationalUnit(request: ListApplicationsForOrganizationalUnitRequest): ListApplicationsForOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForUserRequest {
  applicationIds?: [ string ](name='ApplicationIds', description='非必填，如果填写则可以基于应用ID进行过滤，列表中最多包含100个元素。', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  queryMode?: string(name='QueryMode', description='有两种查询模式，IncludeInherit-包含继承的权限，OnlyDirect-不包含继承的权限，默认值：OnlyDirect', maxLength=32, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userId: string(name='UserId', description='账户的唯一标识。', maxLength=64, position='Query'),
}

model ListApplicationsForUserResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='应用的唯一标识。'),
      hasDirectAuthorization?: boolean(name='HasDirectAuthorization', description='直接分配给当前用户的权限，视为直接授权。'),
      hasInheritAuthorization?: boolean(name='HasInheritAuthorization', description='通过用户隶属的组织、组获取的权限，视为继承权限。'),
    }
  ](name='Applications'),
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
}

model ListApplicationsForUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsForUserResponseBody(name='body'),
}

async function listApplicationsForUser(request: ListApplicationsForUserRequest): ListApplicationsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  instanceIds?: [ string ](name='InstanceIds', description='实例ID列表，支持0到100个', position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', description='实例状态', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime', description='实例的创建时间'),
      defaultEndpoint?: {
        endpoint?: string(name='Endpoint', description='用户portal和应用开发集成的端点地址'),
        status?: string(name='Status', description='实例域名状态，Unresolved(未解析)、Resolved(已解析)'),
      }(name='DefaultEndpoint', description='实例默认域名,用户portal和应用开发集成的端点地址'),
      description?: string(name='Description', description='实例描述信息'),
      instanceId?: string(name='InstanceId', description='实例id'),
      status?: string(name='Status', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', description='请求Id'),
  totalCount?: long(name='TotalCount', description='列表条数目'),
}

model ListInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstancesResponseBody(name='body'),
}

async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsRequest {
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='机构名称', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  parentId?: string(name='ParentId', description='父机构ID', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListOrganizationalUnitsResponseBody = {
  organizationalUnits?: [ 
    {
      createTime?: long(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='描述'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='外部ID'),
      organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID'),
      organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='来源ID'),
      organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='来源类型, build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导]'),
      parentId?: string(name='ParentId', description='父机构ID'),
      updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
}

model ListOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationalUnitsResponseBody(name='body'),
}

async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsForApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='非必填，如果填写则可以基于组织ID进行过滤，列表中最多包含100个元素。', position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ListOrganizationalUnitsForApplicationResponseBody = {
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='组织的唯一标识.'),
    }
  ](name='OrganizationalUnits'),
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
}

model ListOrganizationalUnitsForApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ListOrganizationalUnitsForApplicationResponseBody(name='body'),
}

async function listOrganizationalUnitsForApplication(request: ListOrganizationalUnitsForApplicationRequest): ListOrganizationalUnitsForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnitsForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称'),
      regionEndpoint?: string(name='RegionEndpoint', description='地域对应的接入地址'),
      regionId?: string(name='RegionId', description='地域ID'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', description='请求ID。'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  email?: string(name='Email', description='邮箱', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='机构ID', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='手机区号', maxLength=32, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='手机区号', maxLength=32, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status?: string(name='Status', description='账户状态', maxLength=32, position='Query'),
  userExternalId?: string(name='UserExternalId', description='外部关联ID', maxLength=64, position='Query'),
  userSourceId?: string(name='UserSourceId', description='自建类型为实例ID，非自建类型，为对应企业ID，比如钉钉，对应的corpId', maxLength=64, position='Query'),
  userSourceType?: string(name='UserSourceType', description='build_in(自建),ding_talk(钉钉导入),ad(AD导入),ldap(LDAP导入)', maxLength=32, position='Query'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
  users?: [ 
    {
      accountExpireTime?: long(name='AccountExpireTime', description='账户过期时间'),
      createTime?: long(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='账号描述'),
      displayName?: string(name='DisplayName', description='账户显示名'),
      email?: string(name='Email', description='邮箱'),
      emailVerified?: boolean(name='EmailVerified', description='邮箱是否已验证'),
      instanceId?: string(name='InstanceId', description='实例Id'),
      lockExpireTime?: long(name='LockExpireTime', description='锁定过期时间'),
      passwordSet?: boolean(name='PasswordSet', description='密码是否已设置'),
      phoneNumber?: string(name='PhoneNumber', description='手机号码'),
      phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='手机号是否已验证'),
      phoneRegion?: string(name='PhoneRegion', description='手机地区编号,示例：中国大陆手区号为86，不带 00 或 +'),
      registerTime?: long(name='RegisterTime', description='账户注册时间'),
      status?: string(name='Status', description='账户状态, enabled:启用,disabled:禁用'),
      updateTime?: long(name='UpdateTime', description='最近一次更新时间'),
      userExternalId?: string(name='UserExternalId', description='外部ID'),
      userId?: string(name='UserId', description='账户ID'),
      userSourceId?: string(name='UserSourceId', description='来源ID'),
      userSourceType?: string(name='UserSourceType', description='来源类型，build_in[自建],ding_talk[钉钉导入],ad[AD导入],ldap[LDAP导入]'),
      username?: string(name='Username', description='账户名'),
    }
  ](name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForApplicationRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userIds?: [ string ](name='UserIds', description='非必填，如果填写则可以基于账户ID进行过滤，列表中最多包含100个元素。', position='Query'),
}

model ListUsersForApplicationResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  totalCount?: long(name='TotalCount', description='列表总条数目。'),
  users?: [ 
    {
      userId?: string(name='UserId', description='账户的唯一标识。'),
    }
  ](name='Users'),
}

model ListUsersForApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersForApplicationResponseBody(name='body'),
}

async function listUsersForApplication(request: ListUsersForApplicationRequest): ListUsersForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ObtainApplicationClientSecretRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  secretId: string(name='SecretId', description='OIDC 场景下用于客户端身份验证的客户端密钥', maxLength=64, position='Query'),
}

model ObtainApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    applicationId?: string(name='ApplicationId', description='IDaaS EIAM 应用Id'),
    clientId?: string(name='ClientId', description='IDaaS EIAM 客户端ID'),
    clientSecret?: string(name='ClientSecret', description='客户端密钥'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id'),
    lastUsedTime?: long(name='LastUsedTime', description='IDaaS EIAM 客户端密钥最近使用时间'),
    secretId?: string(name='SecretId', description='IDaaS EIAM 客户端密钥Id'),
    status?: string(name='Status', description='IDaaS EIAM 客户端密钥状态'),
  }(name='ApplicationClientSecret'),
  requestId?: string(name='RequestId', description='请求Id'),
}

model ObtainApplicationClientSecretResponse = {
  headers: map[string]string(name='headers'),
  body: ObtainApplicationClientSecretResponseBody(name='body'),
}

async function obtainApplicationClientSecret(request: ObtainApplicationClientSecretRequest): ObtainApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ObtainApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromOrganizationalUnitsRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='被取消授权的组织ID列表，必填，列表中最多包含100个元素。', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model RevokeApplicationFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
}

model RevokeApplicationFromOrganizationalUnitsResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeApplicationFromOrganizationalUnitsResponseBody(name='body'),
}

async function revokeApplicationFromOrganizationalUnits(request: RevokeApplicationFromOrganizationalUnitsRequest): RevokeApplicationFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromUsersRequest {
  applicationId: string(name='ApplicationId', description='应用的唯一标识。', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  userIds: [ string ](name='UserIds', description='被取消授权的账户ID列表，必填，列表中最多包含100个元素。', position='Query'),
}

model RevokeApplicationFromUsersResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
}

model RevokeApplicationFromUsersResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeApplicationFromUsersResponseBody(name='body'),
}

async function revokeApplicationFromUsers(request: RevokeApplicationFromUsersRequest): RevokeApplicationFromUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromUsers', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationGrantScopeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  grantScopes?: [ string ](name='GrantScopes', description='api调用的授权范围', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model SetApplicationGrantScopeResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model SetApplicationGrantScopeResponse = {
  headers: map[string]string(name='headers'),
  body: SetApplicationGrantScopeResponseBody(name='body'),
}

async function setApplicationGrantScope(request: SetApplicationGrantScopeRequest): SetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningConfigRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用资源ID。', maxLength=64, position='Query'),
  callbackProvisioningConfig?: {
    callbackUrl?: string(name='CallbackUrl', description='IDaaS回调SP地址，当provisionProtocolType为idaas_callback时必填'),
    encryptKey?: string(name='EncryptKey', description='IDaaS回调对称加密秘钥'),
    encryptRequired?: boolean(name='EncryptRequired', description='IDaaS回调是否加密'),
    listenEventScopes?: [ string ](name='ListenEventScopes', description='IDaaS回调事件监听范围'),
  }(name='CallbackProvisioningConfig', description='IDaaS回调同步配置，当provisionProtocolType为idaas_callback时填写该配置', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  provisionPassword?: boolean(name='ProvisionPassword', description='同步信息是否包含密码', position='Query'),
  provisionProtocolType: string(name='ProvisionProtocolType', description='同步协议类型', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model SetApplicationProvisioningConfigResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model SetApplicationProvisioningConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetApplicationProvisioningConfigResponseBody(name='body'),
}

async function setApplicationProvisioningConfig(request: SetApplicationProvisioningConfigRequest): SetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningScopeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='授权同步出的组织机构列表', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model SetApplicationProvisioningScopeResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model SetApplicationProvisioningScopeResponse = {
  headers: map[string]string(name='headers'),
  body: SetApplicationProvisioningScopeResponseBody(name='body'),
}

async function setApplicationProvisioningScope(request: SetApplicationProvisioningScopeRequest): SetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationSsoConfigRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  initLoginType?: string(name='InitLoginType', description='初始化登录方式，only_app_init_sso or idaas_or_app_init_sso', position='Query'),
  initLoginUrl?: string(name='InitLoginUrl', description='仅only_app_init_sso情况下，SP指定的登录地址', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  oidcSsoConfig?: {
    accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='返回的access token有效时间，单位为Second'),
    codeEffectiveTime?: long(name='CodeEffectiveTime', description='Authorization code流中code的有效时间，单位为Second'),
    customClaims?: [ 
      {
        claimName?: string(name='ClaimName', description='返回的claim名称'),
        claimValueExpression?: string(name='ClaimValueExpression', description='返回的claim取值表达式'),
      }
    ](name='CustomClaims', description='自定义id token返回信息'),
    grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等'),
    grantTypes?: [ string ](name='GrantTypes', description='应用支持的授权类型，OIDC标准参数'),
    idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='id token有效时间，单位为Second'),
    pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='支持的PKCE算法类型'),
    pkceRequired?: boolean(name='PkceRequired', description='是否强制PKCE,authorization_code强制必须指定PKCE参数'),
    redirectUris?: [ string ](name='RedirectUris', description='应用支持的回调的uri列表，OIDC标准参数'),
    refreshTokenEffective?: long(name='RefreshTokenEffective', description='refresh token有效时间，单位为Second'),
    responseTypes?: [ string ](name='ResponseTypes', description='隐式流支持的返回类型，OIDC标准参数，如token id_token'),
    subjectIdExpression?: string(name='SubjectIdExpression', description='自定义id token返回信息', maxLength=128),
  }(name='OidcSsoConfig', description='单点登录类型为Oidc时可以配置', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  samlSsoConfig?: {
    attributeStatements?: [ 
      {
        attributeName?: string(name='AttributeName', description='SAML属性的Name'),
        attributeValueExpression?: string(name='AttributeValueExpression', description='SAML属性取值表达式'),
      }
    ](name='AttributeStatements', description='SAML断言的属性配置'),
    defaultRelayState?: string(name='DefaultRelayState', description='默认RelayState取值，可空'),
    nameIdFormat?: string(name='NameIdFormat', description='SAML标准协议中的NameID格式'),
    nameIdValueExpression?: string(name='NameIdValueExpression', description='返回的claim名称'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='IDaaS签发SAML断言时使用的签名算法'),
    spEntityId?: string(name='SpEntityId', description='SP的EntityId，用于唯一标识SP身份'),
    spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='SP的SSO地址，用于接受IDaaS签发的SAML断言'),
  }(name='SamlSsoConfig', description='单点登录类型为saml2时可以配置', position='Query'),
}

model SetApplicationSsoConfigResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model SetApplicationSsoConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetApplicationSsoConfigResponseBody(name='body'),
}

async function setApplicationSsoConfig(request: SetApplicationSsoConfigRequest): SetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationAuthorizationTypeRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  authorizationType: string(name='AuthorizationType', description='应用的授权类型', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateApplicationAuthorizationTypeResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model UpdateApplicationAuthorizationTypeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApplicationAuthorizationTypeResponseBody(name='body'),
}

async function updateApplicationAuthorizationType(request: UpdateApplicationAuthorizationTypeRequest): UpdateApplicationAuthorizationTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationAuthorizationType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationDescriptionRequest {
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id', maxLength=64, position='Query'),
  description?: string(name='Description', description='IDaaS的应用描述信息', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateApplicationDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model UpdateApplicationDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApplicationDescriptionResponseBody(name='body'),
}

async function updateApplicationDescription(request: UpdateApplicationDescriptionRequest): UpdateApplicationDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceDescriptionRequest {
  description?: string(name='Description', description='实例的描述信息', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id', maxLength=64, position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdateInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='请求Id'),
}

model UpdateInstanceDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInstanceDescriptionResponseBody(name='body'),
}

async function updateInstanceDescription(request: UpdateInstanceDescriptionRequest): UpdateInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

