/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Eiam';
  @version = '2021-12-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddUserToOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The organization IDs. You can add an account to a maximum of 100 organizations.

This parameter is required.', position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model AddUserToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AddUserToOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserToOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserToOrganizationalUnits  AddUserToOrganizationalUnitsRequest
  * @return AddUserToOrganizationalUnitsResponse
 */
async function addUserToOrganizationalUnits(request: AddUserToOrganizationalUnitsRequest): AddUserToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model AddUsersToGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The account IDs.

This parameter is required.', example='[ou_001]', position='Query'),
}

model AddUsersToGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AddUsersToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUsersToGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUsersToGroup  AddUsersToGroupRequest
  * @return AddUsersToGroupResponse
 */
async function addUsersToGroup(request: AddUsersToGroupRequest): AddUsersToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsersToGroup', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.

This parameter is required.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
}

model AuthorizeApplicationToGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeApplicationToGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeApplicationToGroups  AuthorizeApplicationToGroupsRequest
  * @return AuthorizeApplicationToGroupsResponse
 */
async function authorizeApplicationToGroups(request: AuthorizeApplicationToGroupsRequest): AuthorizeApplicationToGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToGroups', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application on which you want to grant permissions.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations to which you want to grant permissions. You can grant permissions to a maximum of 100 organizations at a time.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
}

model AuthorizeApplicationToOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeApplicationToOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeApplicationToOrganizationalUnits  AuthorizeApplicationToOrganizationalUnitsRequest
  * @return AuthorizeApplicationToOrganizationalUnitsResponse
 */
async function authorizeApplicationToOrganizationalUnits(request: AuthorizeApplicationToOrganizationalUnitsRequest): AuthorizeApplicationToOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeApplicationToUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application on which you want to grant permissions.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The IDs of the accounts to which you want to grant permissions. You can grant permissions to a maximum of 100 accounts at a time.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model AuthorizeApplicationToUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model AuthorizeApplicationToUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeApplicationToUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeApplicationToUsers  AuthorizeApplicationToUsersRequest
  * @return AuthorizeApplicationToUsersResponse
 */
async function authorizeApplicationToUsers(request: AuthorizeApplicationToUsersRequest): AuthorizeApplicationToUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeApplicationToUsers', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationName: string(name='ApplicationName', description='The name of the application.

This parameter is required.', example='Ram Account SSO', maxLength=64, position='Query'),
  applicationSourceType: string(name='ApplicationSourceType', description='The type of the application source. Valid values:

*   urn:alibaba:idaas:app:source:template: application template
*   urn:alibaba:idaas:app:source:standard: standard protocol

This parameter is required.', example='urn:alibaba:idaas:app:source:standard', maxLength=64, position='Query'),
  applicationTemplateId?: string(name='ApplicationTemplateId', description='The ID of the application template. This parameter is required if you set the ApplicationSourceType parameter to urn:alibaba:idaas:app:source:template.', example='template_cloud_ram', position='Query'),
  description?: string(name='Description', description='The description of the application.', example='RAM user SSO application', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
  logoUrl?: string(name='LogoUrl', description='The URL of the application logo.', example='https://oss.cn-hangzhou.aliyuncs.com/logo.png', maxLength=128, position='Query'),
  ssoType: string(name='SsoType', description='The SSO protocol. Valid values:

*   saml2: the SAML 2.0 protocol.
*   oidc: the OpenID Connect protocol.

This parameter is required.', example='saml2', maxLength=64, position='Query'),
}

model CreateApplicationResponseBody = {
  applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mnkom'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

/**
  * @description IDaaS EIAM supports the following two standard single sign-on (SSO) protocols for adding applications: SAML 2.0 and OIDC. You can select an SSO protocol based on your business requirements when you add an application. You cannot change the SSO protocol that you selected after the application is added.
  * @param request  the request parameters of CreateApplication  CreateApplicationRequest
  * @return CreateApplicationResponse
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to create a client key.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='The client key secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
  }(name='ApplicationClientSecret', description='The information about the client key.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateApplicationClientSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationClientSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApplicationClientSecret  CreateApplicationClientSecretRequest
  * @return CreateApplicationClientSecretResponse
 */
async function createApplicationClientSecret(request: CreateApplicationClientSecretRequest): CreateApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model CreateConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='Idempotent token.', example='client-token-example', position='Query'),
  conditionalAccessPolicyName: string(name='ConditionalAccessPolicyName', description='Conditional access policy name

This parameter is required.', example='My Conditional Access Policy', maxLength=64, position='Query'),
  conditionalAccessPolicyType: string(name='ConditionalAccessPolicyType', description='Type of the conditional access policy, with the following options:

arn:alibaba:idaas:authn:access:policy:system: System policy.

This parameter is required.', example='arn:alibaba:idaas:authn:access:policy:system', maxLength=64, position='Query'),
  conditionsConfig?: {
    applications?: {
      excludeApplications?: [ string ](name='ExcludeApplications', description='Excluded applications'),
      includeApplications?: [ string ](name='IncludeApplications', description='Included applications'),
    }(name='Applications', description='Target applications for the conditional access policy'),
    networkZones?: {
      excludeNetworkZones?: [ string ](name='ExcludeNetworkZones', description='Excluded network zones'),
      includeNetworkZones?: [ string ](name='IncludeNetworkZones', description='Included network zones'),
    }(name='NetworkZones', description='Network zones for conditional access policy'),
    users?: {
      excludeGroups?: [ string ](name='ExcludeGroups', description='Excluded user groups'),
      excludeOrganizationalUnits?: [ string ](name='ExcludeOrganizationalUnits', description='Excluded organizations'),
      excludeUsers?: [ string ](name='ExcludeUsers', description='Excluded users'),
      includeGroups?: [ string ](name='IncludeGroups', description='Included user groups'),
      includeOrganizationalUnits?: [ string ](name='IncludeOrganizationalUnits', description='Included organizations'),
      includeUsers?: [ string ](name='IncludeUsers', description='Selected user'),
    }(name='Users', description='Target users of the conditional access policy'),
  }(name='ConditionsConfig', description='Condition content configuration for the conditional access policy', position='Query'),
  decisionConfig?: {
    activeSessionReuseStatus?: string(name='ActiveSessionReuseStatus', description='Whether to enable session reuse', example='enabled'),
    effect?: string(name='Effect', description='Decision action for the conditional access policy, with the following options:

- allow: Allow.
- deny: Deny.', example='allow or deny'),
    mfaAuthenticationIntervalSeconds?: long(name='MfaAuthenticationIntervalSeconds', description='Re-authentication interval (in seconds) for the conditional access policy

- Maximum MFA re-authentication interval: 86400
- Minimum MFA re-authentication interval: 300', example='500'),
    mfaAuthenticationMethods?: [ string ](name='MfaAuthenticationMethods', description='Allowed MFA types for the conditional access policy, with the following options:
- ia_otp_sms: SMS verification code
- ia_otp_email: Email verification code
- ia_totp: OTP dynamic password
- ia_webauthn: WebAuthn'),
    mfaType?: string(name='MfaType', description='MFA type for the conditional access policy, with the following options:

- directly_access: Direct access
- mfa_required: MFA required', example='directly_access'),
  }(name='DecisionConfig', description='Action configuration for the conditional access policy', position='Query'),
  decisionType: string(name='DecisionType', description='Execution type of the conditional access policy, with the following options:

enforcement: Enforce the policy.

This parameter is required.', example='enforcement', maxLength=32, position='Query'),
  description?: string(name='Description', description='Description of the conditional access policy', example='Test Description', maxLength=128, position='Query'),
  evaluateAt: string(name='EvaluateAt', description='Execution point of the conditional access policy, with the following options:

- arn:alibaba:idaas:authn:access:rule:eval_at:after_step1: Allow.

This parameter is required.', example='arn:alibaba:idaas:authn:access:rule:eval_at:after_step1', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  priority?: int32(name='Priority', description='Priority of the conditional access policy, lower values indicate higher priority
Minimum value: 1
Maximum value: 100', example='1', position='Query'),
}

model CreateConditionalAccessPolicyResponseBody = {
  conditionalAccessPolicyId?: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID', example='cp_xxxxx'),
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description Create Conditional Access Policy
  * @param request  the request parameters of CreateConditionalAccessPolicy  CreateConditionalAccessPolicyRequest
  * @return CreateConditionalAccessPolicyResponse
 */
async function createConditionalAccessPolicy(request: CreateConditionalAccessPolicyRequest): CreateConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain: string(name='Domain', description='域名。最大长度限制255，格式由数字、字母、横线（-）点（.）组成;

This parameter is required.', example='www.example.com', position='Query'),
  filing?: {
    icpNumber?: string(name='IcpNumber', description='域名关联的备案号，长度最大限制64。', example='浙xx-xxxxxx'),
  }(name='Filing', description='备案信息参数。', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateDomainResponseBody = {
  domainId?: string(name='DomainId', example='dm_mtohn6mltdz3ibtly2rxvnvxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDomain  CreateDomainRequest
  * @return CreateDomainResponse
 */
async function createDomain(request: CreateDomainRequest): CreateDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateDomainProxyTokenResponseBody = {
  domainProxyTokenId?: string(name='DomainProxyTokenId', example='pt_mtohn73423stghoivjmi4jwxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateDomainProxyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDomainProxyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDomainProxyToken  CreateDomainProxyTokenRequest
  * @return CreateDomainProxyTokenResponse
 */
async function createDomainProxyToken(request: CreateDomainProxyTokenRequest): CreateDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the group. The value can be up to 256 characters in length.', example='this is a test.', position='Query'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID. The value can be up to 64 characters in length.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupName: string(name='GroupName', description='The name of the group. The name can be up to 64 characters in length.

This parameter is required.', example='name_test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model CreateGroupResponseBody = {
  groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGroup  CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateIdentityProviderRequest {
  regionId?: string(name='RegionId', position='Host'),
  authnConfig?: {
    authnStatus: string(name='AuthnStatus', description='对应IdP是否支持认证

This parameter is required.', example='enabled', maxLength=32),
    autoUpdatePasswordStatus?: string(name='AutoUpdatePasswordStatus', description='是否支持自动更新密码', example='enabled'),
  }(name='AuthnConfig', description='认证配置', position='Query'),
  autoCreateUserConfig?: {
    autoCreateUserStatus?: string(name='AutoCreateUserStatus', description='自动创建账户是否开启', example='disabled'),
    targetOrganizationalUnitIds?: [ string ](name='TargetOrganizationalUnitIds'),
  }(name='AutoCreateUserConfig', description='自动创建账户账户规则配置。', position='Query'),
  autoUpdateUserConfig?: {
    autoUpdateUserStatus?: string(name='AutoUpdateUserStatus', description='自动更新账户是否开启', example='disabled'),
  }(name='AutoUpdateUserConfig', description='自动更新账户规则配置。', position='Query'),
  bindingConfig?: {
    autoMatchUserProfileExpressions?: [ 
      {
        expressionMappingType: string(name='ExpressionMappingType', description='表达式的类型

This parameter is required.', example='filed'),
        sourceValueExpression: string(name='SourceValueExpression', description='映射属性取值表达式

This parameter is required.', example='idpUser.phoneNumber'),
        targetField: string(name='TargetField', description='映射目标属性名称

This parameter is required.', example='user.username'),
        targetFieldDescription?: string(name='TargetFieldDescription', description='映射目标属性名称'),
      }
    ](name='AutoMatchUserProfileExpressions', description='自动匹配账户的规则'),
    autoMatchUserStatus?: string(name='AutoMatchUserStatus', description='自动匹配账户是否开启', example='disabled'),
    mappingBindingStatus?: string(name='MappingBindingStatus', description='用户手动绑定账户功能是否开启', example='enabled'),
  }(name='BindingConfig', description='账户绑定规则配置。', position='Query'),
  dingtalkAppConfig?: {
    appKey?: string(name='AppKey', description='钉钉一方应用的AppKey', example='Xczngvfemo4e'),
    appSecret?: string(name='AppSecret', description='钉钉一方应用的AppSecret', example='5d405a12a6f84ad4ab05ee09axxxx'),
    corpId?: string(name='CorpId', description='钉钉一方应用的corpId', example='3075680424786133505'),
    dingtalkVersion?: string(name='DingtalkVersion', description='钉钉版本', example='public_dingtalk', maxLength=32),
  }(name='DingtalkAppConfig', description='钉钉配置', position='Query'),
  identityProviderName: string(name='IdentityProviderName', description='身份提供方名称

This parameter is required.', example='test', maxLength=64, position='Query'),
  identityProviderType: string(name='IdentityProviderType', description='身份提供发类型

This parameter is required.', example='urn:alibaba:idaas:idp:alibaba:dingtalk:push', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  larkConfig?: {
    appId?: string(name='AppId', example='cli_xxxx'),
    appSecret?: string(name='AppSecret', example='KiiLzh5Dueh4wbLxxxx'),
    encryptKey?: string(name='EncryptKey'),
    enterpriseNumber?: string(name='EnterpriseNumber', example='FSX123111xxx', maxLength=128),
    verificationToken?: string(name='VerificationToken'),
  }(name='LarkConfig', description='飞书配置', position='Query'),
  ldapConfig?: {
    administratorPassword?: string(name='AdministratorPassword', description='管理员密码', example='xxxx'),
    administratorUsername?: string(name='AdministratorUsername', description='管理员账号', example='DC=example,DC=com'),
    certificateFingerprintStatus?: string(name='CertificateFingerprintStatus', description='是否验证指纹证书', example='enabled'),
    certificateFingerprints?: [ string ](name='CertificateFingerprints', description='证书指纹列表'),
    groupMemberAttributeName?: string(name='GroupMemberAttributeName', description='组成员标识', example='member'),
    groupObjectClass?: string(name='GroupObjectClass', description='组objectClass', example='group'),
    groupObjectClassCustomFilter?: string(name='GroupObjectClassCustomFilter', description='组自定义Filter', example='(|(cn=test)(group=test@test.com))'),
    ldapProtocol?: string(name='LdapProtocol', description='通信协议', example='ldap'),
    ldapServerHost?: string(name='LdapServerHost', description='ad/ldap 服务器地址', example='123.xx.xx.89'),
    ldapServerPort?: int32(name='LdapServerPort', description='端口号', example='636'),
    organizationUnitObjectClass?: string(name='OrganizationUnitObjectClass', description='组织objectClass', example='organizationUnit,top'),
    startTlsStatus?: string(name='StartTlsStatus', description='startTls是否开启', example='enabled'),
    userLoginIdentifier?: string(name='UserLoginIdentifier', description='用户登录标识', example='userPrincipalName, mail'),
    userObjectClass?: string(name='UserObjectClass', description='用户objectClass', example='person,user'),
    userObjectClassCustomFilter?: string(name='UserObjectClassCustomFilter', description='用户自定义Filter', example='(|(cn=test)(mail=test@test.com))'),
  }(name='LdapConfig', description='AD/LDAP配置', position='Query'),
  logoUrl?: string(name='LogoUrl', position='Query'),
  networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='网络端点ID', example='nae_examplexxxx', position='Query'),
  oidcConfig?: {
    authnParam?: {
      authnMethod?: string(name='AuthnMethod', description='OIDC/oAuth2 认证方法。', example='client_secret_post'),
      clientId?: string(name='ClientId', description='OIDC/oAuth2 客户端ID。', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientSecret?: string(name='ClientSecret', description='OIDC/oAuth2 客户端密钥。', example='CSEHDddddddxxxxuxkJEHPveWRXBGqVqRsxxxx'),
    }(name='AuthnParam', description='OIDC客户端认证配置。'),
    endpointConfig?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', description='oAuth2 授权端点。', example='https://example.com/auth/authorize'),
      issuer?: string(name='Issuer', description='OIDC issuer信息。', example='https://example.com/auth'),
      jwksUri?: string(name='JwksUri', description='OIDC jwks地址。', example='https://example.com/auth/jwks'),
      tokenEndpoint?: string(name='TokenEndpoint', description='oAuth2 Token端点。', example='https://example.com/auth/token'),
      userinfoEndpoint?: string(name='UserinfoEndpoint', description='OIDC 用户信息端点。', example='https://example.com/auth/userinfo'),
    }(name='EndpointConfig', description='OIDC 端点配置。'),
    grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等', example='openid'),
    grantType?: string(name='GrantType', description='OIDC授权类型。', example='authorization_code'),
    pkceChallengeMethod?: string(name='PkceChallengeMethod', description='支持的PKCE算法类型。', example='S256'),
    pkceRequired?: boolean(name='PkceRequired', description='AuthorizationCode授权模式下是否使用PKCE。', example='true'),
  }(name='OidcConfig', description='OIDC IdP配置。', position='Query'),
  udPullConfig?: {
    groupSyncStatus?: string(name='GroupSyncStatus', description='是否支持组同步，默认为disabled', example='disabled', maxLength=32),
    incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='disabled', maxLength=32),
    periodicSyncConfig?: {
      periodicSyncCron?: string(name='PeriodicSyncCron', example='0 45 1 * * ?'),
      periodicSyncTimes?: [ int32 ](name='PeriodicSyncTimes'),
      periodicSyncType?: string(name='PeriodicSyncType', example='cron'),
    }(name='PeriodicSyncConfig'),
    periodicSyncStatus?: string(name='PeriodicSyncStatus', example='disabled', maxLength=32),
    udSyncScopeConfig: {
      sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
      targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_lyhyy6p7yf7mdrdiq5xxxx'),
    }(name='UdSyncScopeConfig', description='同步入配置信息

This parameter is required.'),
  }(name='UdPullConfig', description='同步入配置', position='Query'),
  udPushConfig?: {
    incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='disabled', maxLength=32),
    periodicSyncStatus?: string(name='PeriodicSyncStatus', example='disabled', maxLength=32),
    udSyncScopeConfigs?: [ 
      {
        sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
        targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_lyhyy6p7yf7mdrdiq5xxxx'),
      }
    ](name='UdSyncScopeConfigs', description='同步出配置信息'),
  }(name='UdPushConfig', description='同步出配置', position='Query'),
  weComConfig?: {
    agentId?: string(name='AgentId', description='企业微信自建应用的Id', example='278231941749863339'),
    authorizeCallbackDomain?: string(name='AuthorizeCallbackDomain', description='授权回调域', example='https://xxx.aliyunidaas.com/xxxx'),
    corpId?: string(name='CorpId', description='企业微信自建应用的corpId', example='3756043633237690761'),
    corpSecret?: string(name='CorpSecret', description='企业微信自建应用的corpSecret', example='CSEHDddddddxxxxuxkJEHPveWRXBGqVqRsxxxx'),
    trustableDomain?: string(name='TrustableDomain', description='可信域名', example='https://xxx.aliyunidaas.com/'),
  }(name='WeComConfig', description='WeCom配置', position='Query'),
}

model CreateIdentityProviderResponseBody = {
  identityProviderId?: string(name='IdentityProviderId', example='idp_mwpcwnhrimlr2horxXXXX'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateIdentityProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateIdentityProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateIdentityProvider  CreateIdentityProviderRequest
  * @return CreateIdentityProviderResponse
 */
async function createIdentityProvider(request: CreateIdentityProviderRequest): CreateIdentityProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIdentityProvider', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the instance. The description can be up to 128 characters in length.', example='instance_for_test', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId', description='The ID of the instance that is created.', example='idaas_wj5htncdvoc4q5xxxxxxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstance  CreateInstanceRequest
  * @return CreateInstanceResponse
 */
async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', description='保证请求幂等性。从您的客户端生成一个参数值，确保不同请求间该参数值唯一。ClientToken只支持ASCII字符，且不能超过64个字符。', example='client-token-example', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointName: string(name='NetworkAccessEndpointName', description='专属网络端点名称。

This parameter is required.', example='xx业务VPC访问端点', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch。', example='vsw-examplexxx', maxLength=2, position='Query'),
  vpcId: string(name='VpcId', description='专属网络端点连接的VpcID。

This parameter is required.', example='vpc-examplexxx', position='Query'),
  vpcRegionId: string(name='VpcRegionId', description='专属网络端点连接的VpcID所属地域，该地域取值必须在ListNetworkAccessEndpointAvailableRegions接口中返回。

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model CreateNetworkAccessEndpointResponseBody = {
  networkAccessEndpointId?: string(name='NetworkAccessEndpointId', example='nae_examplexxxx'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateNetworkAccessEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNetworkAccessEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNetworkAccessEndpoint  CreateNetworkAccessEndpointRequest
  * @return CreateNetworkAccessEndpointResponse
 */
async function createNetworkAccessEndpoint(request: CreateNetworkAccessEndpointRequest): CreateNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model CreateOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the organization. The value can be up to 256 characters in length.', example='description', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organization, which can be used to associate the organization with an external system. By default, the external ID is the organization ID. The value can be up to 64 characters in length.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=128, position='Query'),
  organizationalUnitName: string(name='OrganizationalUnitName', description='The name of the organization. The name can be up to 64 characters in length.

This parameter is required.', example='test_ou_name', maxLength=128, position='Query'),
  parentId: string(name='ParentId', description='The parent organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model CreateOrganizationalUnitResponseBody = {
  organizationalUnitId?: string(name='OrganizationalUnitId', description='The organization ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model CreateOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOrganizationalUnit  CreateOrganizationalUnitRequest
  * @return CreateOrganizationalUnitResponse
 */
async function createOrganizationalUnit(request: CreateOrganizationalUnitRequest): CreateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  customFields?: [ 
    {
      fieldName?: string(name='FieldName', description='The name of the extended field. You must create the extended field in advance. To create an extended field, log on to the IDaaS console. In the left-side navigation pane, choose Accounts > Extended Fields, and then click Create Field on the Extended Fields page.', example='age', maxLength=64),
      fieldValue?: string(name='FieldValue', description='The value of the extended field. The value follows the limits on the properties of the extended field.', example='10', maxLength=64),
    }
  ](name='CustomFields', description='The extended fields.', example='description', position='Query'),
  description?: string(name='Description', description='The description of the organizational unit. The description can be up to 256 characters in length.', example='description text', maxLength=256, position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the account. The display name can be up to 64 characters in length.', example='name_001', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address of the user who owns the account. The email address prefix can contain letters, digits, underscores (_), periods (.), and hyphens (-).', example='example@example.com', maxLength=64, position='Query'),
  emailVerified?: boolean(name='EmailVerified', description='Specifies whether the email address is a trusted email address. This parameter is required if the Email parameter is specified. If you have no special business requirements, set this parameter to true.', example='true', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The IDs of organizational units to which the account belongs. An account can belong to multiple organizational units.', position='Query'),
  password?: string(name='Password', description='The password of the account. For more information, view the password policy of the instance in the IDaaS console.', example='123456', maxLength=64, position='Query'),
  passwordInitializationConfig?: {
    passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to forcibly change the password status. Default value: disabled. Valid values:

*   enabled: forcibly changes the password status.
*   disabled: does not forcibly change the password status.', example='enabled', maxLength=64),
    passwordInitializationPolicyPriority?: string(name='PasswordInitializationPolicyPriority', description='The priority of the password initialization policy. By default, this parameter does not take effect. Valid values:

*   global: The password initialization policy globally takes effect.
*   custom: The password initialization policy takes effect based on custom settings.', example='global', maxLength=64),
    passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. Set the value to random,

*   which indicates that the password is randomly generated.', example='random', maxLength=64),
    userNotificationChannels?: [ string ](name='UserNotificationChannels', description='The password notification methods.', example='sms', maxLength=64),
  }(name='PasswordInitializationConfig', description='The configurations for password initialization.', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile phone number, which contains 6 to 15 digits.', example='12345678901', maxLength=32, position='Query'),
  phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Specifies whether the mobile phone number is a trusted mobile phone number. This parameter is required if the PhoneNumber parameter is specified. If you have no special business requirements, set this parameter to true.', example='true', maxLength=64, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile phone number. The country code contains only digits and does not contain a plus sign (+).', example='86', maxLength=32, position='Query'),
  primaryOrganizationalUnitId: string(name='PrimaryOrganizationalUnitId', description='The ID of the primary organizational unit to which the account belongs.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used to associate the account with an external system. The external ID can be up to 64 characters in length. If you do not specify an external ID for the account, the ID of the account is used as the external ID by default.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  username: string(name='Username', description='The name of the account. The name can be up to 64 characters in length and can contain letters, digits, underscores (_), periods (.), at signs (@), and hyphens (-).

This parameter is required.', example='user_001', maxLength=64, position='Query'),
}

model CreateUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
}

model CreateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUser  CreateUserRequest
  * @return CreateUserResponse
 */
async function createUser(request: CreateUserRequest): CreateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to delete.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationResponseBody(name='body'),
}

/**
  * @description Make sure that the EIAM application that you want to delete is not used before you delete the EIAM application. After you delete the EIAM application, all configurations are deleted and cannot be restored.
  * @param request  the request parameters of DeleteApplication  DeleteApplicationRequest
  * @return DeleteApplicationResponse
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to delete a client key.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The ID of the client key that you want to delete for the application.

This parameter is required.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model DeleteApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteApplicationClientSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationClientSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApplicationClientSecret  DeleteApplicationClientSecretRequest
  * @return DeleteApplicationClientSecretResponse
 */
async function deleteApplicationClientSecret(request: DeleteApplicationClientSecretRequest): DeleteApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DeleteConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteConditionalAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description When deleting a specified conditional access policy, please ensure that the policy is no longer in use. After deletion, all configuration data will be removed and cannot be recovered.
  * @param request  the request parameters of DeleteConditionalAccessPolicy  DeleteConditionalAccessPolicyRequest
  * @return DeleteConditionalAccessPolicyResponse
 */
async function deleteConditionalAccessPolicy(request: DeleteConditionalAccessPolicyRequest): DeleteConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDomain  DeleteDomainRequest
  * @return DeleteDomainResponse
 */
async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。

This parameter is required.', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteDomainProxyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainProxyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDomainProxyToken  DeleteDomainProxyTokenRequest
  * @return DeleteDomainProxyTokenResponse
 */
async function deleteDomainProxyToken(request: DeleteDomainProxyTokenRequest): DeleteDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGroup  DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIdentityProviderRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteIdentityProviderResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteIdentityProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIdentityProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteIdentityProvider  DeleteIdentityProviderRequest
  * @return DeleteIdentityProviderResponse
 */
async function deleteIdentityProvider(request: DeleteIdentityProviderRequest): DeleteIdentityProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIdentityProvider', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance to be deleted.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DeleteInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceResponseBody(name='body'),
}

/**
  * @description Make sure that the instance to be deleted is no longer used. If the instance is deleted, all data related to the instance will be deleted.
  * @param request  the request parameters of DeleteInstance  DeleteInstanceRequest
  * @return DeleteInstanceResponse
 */
async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。

This parameter is required.', example='nae_examplexxxx', position='Query'),
}

model DeleteNetworkAccessEndpointResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteNetworkAccessEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNetworkAccessEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNetworkAccessEndpoint  DeleteNetworkAccessEndpointRequest
  * @return DeleteNetworkAccessEndpointResponse
 */
async function deleteNetworkAccessEndpoint(request: DeleteNetworkAccessEndpointRequest): DeleteNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model DeleteOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOrganizationalUnit  DeleteOrganizationalUnitRequest
  * @return DeleteOrganizationalUnitResponse
 */
async function deleteOrganizationalUnit(request: DeleteOrganizationalUnitRequest): DeleteOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOrganizationalUnitChildrenRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='Organizational Unit ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model DeleteOrganizationalUnitChildrenResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteOrganizationalUnitChildrenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOrganizationalUnitChildrenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOrganizationalUnitChildren  DeleteOrganizationalUnitChildrenRequest
  * @return DeleteOrganizationalUnitChildrenResponse
 */
async function deleteOrganizationalUnitChildren(request: DeleteOrganizationalUnitChildrenRequest): DeleteOrganizationalUnitChildrenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOrganizationalUnitChildren', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to disable.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableApplicationResponseBody(name='body'),
}

/**
  * @description All features of the EIAM application cannot be used if you disable the EIAM application, such as single sign-on (SSO) and account synchronization. Make sure that you acknowledge the risks of the delete operation.
  * @param request  the request parameters of DisableApplication  DisableApplicationRequest
  * @return DisableApplicationResponse
 */
async function disableApplication(request: DisableApplicationRequest): DisableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplication', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationApiInvokeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationApiInvokeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableApplicationApiInvokeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableApplicationApiInvoke  DisableApplicationApiInvokeRequest
  * @return DisableApplicationApiInvokeResponse
 */
async function disableApplicationApiInvoke(request: DisableApplicationApiInvokeRequest): DisableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application for which you want to disable a client key.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.

This parameter is required.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model DisableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationClientSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableApplicationClientSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableApplicationClientSecret  DisableApplicationClientSecretRequest
  * @return DisableApplicationClientSecretResponse
 */
async function disableApplicationClientSecret(request: DisableApplicationClientSecretRequest): DisableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationProvisioningRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationProvisioningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableApplicationProvisioningResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableApplicationProvisioning  DisableApplicationProvisioningRequest
  * @return DisableApplicationProvisioningResponse
 */
async function disableApplicationProvisioning(request: DisableApplicationProvisioningRequest): DisableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model DisableApplicationSsoRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableApplicationSsoResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableApplicationSsoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableApplicationSsoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableApplicationSso  DisableApplicationSsoRequest
  * @return DisableApplicationSsoResponse
 */
async function disableApplicationSso(request: DisableApplicationSsoRequest): DisableApplicationSsoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableApplicationSso', 'POST', '/', 'json', false, 'json', request);
}

model DisableConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableConditionalAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description When changing a conditional access policy from an enabled state to a disabled state, the policy will no longer intercept. Please confirm that you are aware of the potential risks associated with this action.
  * @param request  the request parameters of DisableConditionalAccessPolicy  DisableConditionalAccessPolicyRequest
  * @return DisableConditionalAccessPolicyResponse
 */
async function disableConditionalAccessPolicy(request: DisableConditionalAccessPolicyRequest): DisableConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisableDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。

This parameter is required.', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableDomainProxyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableDomainProxyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableDomainProxyToken  DisableDomainProxyTokenRequest
  * @return DisableDomainProxyTokenResponse
 */
async function disableDomainProxyToken(request: DisableDomainProxyTokenRequest): DisableDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model DisableIdentityProviderUdPullRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableIdentityProviderUdPullResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableIdentityProviderUdPullResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableIdentityProviderUdPullResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableIdentityProviderUdPull  DisableIdentityProviderUdPullRequest
  * @return DisableIdentityProviderUdPullResponse
 */
async function disableIdentityProviderUdPull(request: DisableIdentityProviderUdPullRequest): DisableIdentityProviderUdPullResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableIdentityProviderUdPull', 'POST', '/', 'json', false, 'json', request);
}

model DisableInitDomainAutoRedirectRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model DisableInitDomainAutoRedirectResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableInitDomainAutoRedirectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableInitDomainAutoRedirectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableInitDomainAutoRedirect  DisableInitDomainAutoRedirectRequest
  * @return DisableInitDomainAutoRedirectResponse
 */
async function disableInitDomainAutoRedirect(request: DisableInitDomainAutoRedirectRequest): DisableInitDomainAutoRedirectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableInitDomainAutoRedirect', 'POST', '/', 'json', false, 'json', request);
}

model DisableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model DisableUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model DisableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableUser  DisableUserRequest
  * @return DisableUserResponse
 */
async function disableUser(request: DisableUserRequest): DisableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableUser', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to enable.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableApplication  EnableApplicationRequest
  * @return EnableApplicationResponse
 */
async function enableApplication(request: EnableApplicationRequest): EnableApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplication', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationApiInvokeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationApiInvokeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationApiInvokeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableApplicationApiInvokeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableApplicationApiInvoke  EnableApplicationApiInvokeRequest
  * @return EnableApplicationApiInvokeResponse
 */
async function enableApplicationApiInvoke(request: EnableApplicationApiInvokeRequest): EnableApplicationApiInvokeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationApiInvoke', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.

This parameter is required.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model EnableApplicationClientSecretResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationClientSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableApplicationClientSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableApplicationClientSecret  EnableApplicationClientSecretRequest
  * @return EnableApplicationClientSecretResponse
 */
async function enableApplicationClientSecret(request: EnableApplicationClientSecretRequest): EnableApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationProvisioningRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationProvisioningResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationProvisioningResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableApplicationProvisioningResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableApplicationProvisioning  EnableApplicationProvisioningRequest
  * @return EnableApplicationProvisioningResponse
 */
async function enableApplicationProvisioning(request: EnableApplicationProvisioningRequest): EnableApplicationProvisioningResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationProvisioning', 'POST', '/', 'json', false, 'json', request);
}

model EnableApplicationSsoRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='IDaaS的应用主键id

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableApplicationSsoResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableApplicationSsoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableApplicationSsoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableApplicationSso  EnableApplicationSsoRequest
  * @return EnableApplicationSsoResponse
 */
async function enableApplicationSso(request: EnableApplicationSsoRequest): EnableApplicationSsoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableApplicationSso', 'POST', '/', 'json', false, 'json', request);
}

model EnableConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableConditionalAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description When changing the status of a conditional access policy from enabled to disabled, the policy will no longer intercept. Please confirm that you are aware of the potential risks associated with this action.
  * @param request  the request parameters of EnableConditionalAccessPolicy  EnableConditionalAccessPolicyRequest
  * @return EnableConditionalAccessPolicyResponse
 */
async function enableConditionalAccessPolicy(request: EnableConditionalAccessPolicyRequest): EnableConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。

This parameter is required.', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableDomainProxyTokenResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableDomainProxyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableDomainProxyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableDomainProxyToken  EnableDomainProxyTokenRequest
  * @return EnableDomainProxyTokenResponse
 */
async function enableDomainProxyToken(request: EnableDomainProxyTokenRequest): EnableDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model EnableIdentityProviderUdPullRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM的实例id

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableIdentityProviderUdPullResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableIdentityProviderUdPullResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableIdentityProviderUdPullResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableIdentityProviderUdPull  EnableIdentityProviderUdPullRequest
  * @return EnableIdentityProviderUdPullResponse
 */
async function enableIdentityProviderUdPull(request: EnableIdentityProviderUdPullRequest): EnableIdentityProviderUdPullResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableIdentityProviderUdPull', 'POST', '/', 'json', false, 'json', request);
}

model EnableInitDomainAutoRedirectRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model EnableInitDomainAutoRedirectResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableInitDomainAutoRedirectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableInitDomainAutoRedirectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableInitDomainAutoRedirect  EnableInitDomainAutoRedirectRequest
  * @return EnableInitDomainAutoRedirectResponse
 */
async function enableInitDomainAutoRedirect(request: EnableInitDomainAutoRedirectRequest): EnableInitDomainAutoRedirectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableInitDomainAutoRedirect', 'POST', '/', 'json', false, 'json', request);
}

model EnableUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model EnableUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model EnableUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableUser  EnableUserRequest
  * @return EnableUserResponse
 */
async function enableUser(request: EnableUserRequest): EnableUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableUser', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    apiInvokeStatus?: string(name='ApiInvokeStatus', description='The status of the Developer API feature. Valid values:

*   Enabled: The Developer API feature is enabled.
*   Disabled: The Developer API feature is disabled.', example='disabled'),
    applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    applicationName?: string(name='ApplicationName', description='The name of the application.', example='SAML Application'),
    applicationSourceType?: string(name='ApplicationSourceType', description='The origin of the application. Valid values:

*   urn:alibaba:idaas:app:source:template: The application is created based on a template.
*   urn:alibaba:idaas: The application is created based on the standard protocol.', example='urn:alibaba:idaas:app:source:template'),
    applicationTemplateId?: string(name='ApplicationTemplateId', description='The ID of the template based on which the application is created. This parameter is returned only if the application is created based on a template.', example='apt_rpa_tdsxxx'),
    applicationVisibility?: [ string ](name='ApplicationVisibility'),
    authorizationType?: string(name='AuthorizationType', description='The authorization type of the EIAM application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.', example='authorize_required'),
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    createTime?: long(name='CreateTime', description='The time when the application was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    description?: string(name='Description', description='The description of the application.', example='The application is applicable to the test environment.'),
    features?: string(name='Features', description='The features that are supported by the application. The value is a JSON array. Valid values:

*   sso: The application supports SSO.
*   provision: The application supports account synchronization.
*   api_invoke: The application supports custom APIs.', example='["sso", "provision"]'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    logoUrl?: string(name='LogoUrl', description='The URL of the application icon.', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
    m2MClientStatus?: string(name='M2MClientStatus'),
    managedServiceCode?: string(name='ManagedServiceCode', description='The service code of the cloud service that manages the application template.', example='rpa'),
    resourceServerIdentifier?: string(name='ResourceServerIdentifier'),
    resourceServerStatus?: string(name='ResourceServerStatus'),
    serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the application template is managed by a cloud service.', example='true'),
    ssoType?: string(name='SsoType', description='The type of the single sign-on (SSO) protocol. Valid values:

*   saml2: the Security Assertion Markup Language (SAML) 2.0 protocol.
*   oidc: the OpenID Connect (OIDC) protocol.', example='saml2'),
    status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled'),
    updateTime?: long(name='UpdateTime', description='The time when the application was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
  }(name='Application', description='The details of the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplication  GetApplicationRequest
  * @return GetApplicationResponse
 */
async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationGrantScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationGrantScopeResponseBody = {
  applicationGrantScope?: {
    grantScopes?: [ string ](name='GrantScopes', description='The permissions of the Developer API feature.'),
  }(name='ApplicationGrantScope', description='The permissions of the Developer API feature.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationGrantScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationGrantScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationGrantScope  GetApplicationGrantScopeRequest
  * @return GetApplicationGrantScopeResponse
 */
async function getApplicationGrantScope(request: GetApplicationGrantScopeRequest): GetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationProvisioningConfigResponseBody = {
  applicationProvisioningConfig?: {
    applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    callbackProvisioningConfig?: {
      callbackUrl?: string(name='CallbackUrl', description='The URL that the application uses to receive IDaaS event callbacks.', example='https://example.com/event/callback'),
      encryptKey?: string(name='EncryptKey', description='The symmetric key for IDaaS event callbacks. The key is an AES-256 encryption key in the HEX format.', example='1adfdfdfd******111'),
      encryptRequired?: boolean(name='EncryptRequired', description='Indicates whether IDaaS event callback messages are encrypted. Valid values:

*   true: The messages are encrypted.
*   false: The messages are transmitted in plaintext.', example='true'),
      listenEventScopes?: [ string ](name='ListenEventScopes', description='The list of types of IDaaS event callback messages that are supported by the listener.'),
    }(name='CallbackProvisioningConfig', description='The configuration of the custom event callback protocol of IDaaS.'),
    configOperateMode?: string(name='ConfigOperateMode', description='The rendering mode of the account synchronization page. Valid values:

*   standard: standard mode
*   template: template mode', example='standard'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    provisionJwksEndpoint?: string(name='ProvisionJwksEndpoint', description='The public key endpoint for signature verification of the synchronization callback information.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk267xxxxx/app_mkv7rgt4d7i4u7zqtzev2mxxxx/provisioning/jwks'),
    provisionPassword?: boolean(name='ProvisionPassword', description='Indicates whether the password is synchronized in IDaaS user event callbacks. Valid values:

*   true: The password is synchronized.
*   false: The password is not synchronized.', example='true'),
    provisionProtocolType?: string(name='ProvisionProtocolType', description='The synchronization protocol type of the application. Valid values:

*   idaas_callback: custom event callback protocol of IDaaS.
*   scim2: System for Cross-domain Identity Management (SCIM) protocol.', example='idaas_callback'),
    scimProvisioningConfig?: {
      authnConfiguration?: {
        authnMode?: string(name='AuthnMode', description='The authentication mode of the SCIM protocol. Valid value:

*   oauth2: OAuth2.0 mode.', example='oauth2'),
        authnParam?: {
          accessToken?: string(name='AccessToken', description='The access token. This parameter is returned when the GrantType parameter is set to bearer_token.', example='k52x2ru63rlkflina5utgkxxxx'),
          authnMethod?: string(name='AuthnMethod', description='The authentication mode of the SCIM protocol. Valid values:

*   client_secret_basic: The client secret is passed in the request header.
*   client_secret_post: The client secret is passed in the request body.', example='client_secret_basic'),
          clientId?: string(name='ClientId', description='The client ID of the application.', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
          clientSecret?: string(name='ClientSecret', description='The client secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
          tokenEndpoint?: string(name='TokenEndpoint', description='The token endpoint.', example='https://www.example.com/oauth/token'),
        }(name='AuthnParam', description='The configuration parameters related to authorization.

*   If the GrantType parameter is set to client_credentials, the configuration parameters ClientId, ClientSecret, and AuthnMethod are returned.
*   If the GrantType parameter is set to bearer_token, the configuration parameter AccessToken is returned.'),
        grantType?: string(name='GrantType', description='The grant type of the SCIM protocol. Valid values:

*   client_credentials: client mode.
*   bearer_token: key mode.', example='bearer_token'),
      }(name='AuthnConfiguration', description='The configuration parameters related to SCIM-based synchronization.'),
      fullPushScopes?: [ string ](name='FullPushScopes', description='The full synchronization scope of the SCIM protocol. Valid value:

*   urn:alibaba:idaas:app:scim:User:PUSH: full account data synchronization.'),
      provisioningActions?: [ string ](name='ProvisioningActions', description='The resource operations of the SCIM protocol. Valid values:

*   urn:alibaba:idaas:app:scim:User:CREATE: account creation.
*   urn:alibaba:idaas:app:scim:User:UPDATE: account update.
*   urn:alibaba:idaas:app:scim:User:DELETE: account deletion.'),
      scimBaseUrl?: string(name='ScimBaseUrl', description='The base URL that the application uses to receive the SCIM protocol for IDaaS synchronization.', example='https://example.com/scim'),
    }(name='ScimProvisioningConfig', description='The configuration of SCIM-based IDaaS synchronization.'),
    status?: string(name='Status', description='The status of the IDaaS account synchronization feature. Valid values:

*   enabled: The feature is enabled.
*   disabled: The feature is disabled.', example='enabled'),
  }(name='ApplicationProvisioningConfig', description='The configuration of the account synchronization feature for the application.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationProvisioningConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationProvisioningConfig  GetApplicationProvisioningConfigRequest
  * @return GetApplicationProvisioningConfigResponse
 */
async function getApplicationProvisioningConfig(request: GetApplicationProvisioningConfigRequest): GetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationProvisioningScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationProvisioningScopeResponseBody = {
  applicationProvisioningScope?: {
    groupIds?: [ string ](name='GroupIds', description='Synchronize the list of authorized groups'),
    maxQuota?: int32(name='MaxQuota', description='Instance Indicates the maximum quota number of authorized agents', example='20'),
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The list of organizational units that are authorized for account synchronization.'),
    usedQuota?: int32(name='UsedQuota', description='Indicates the quota number of used authorized agents', example='10'),
  }(name='ApplicationProvisioningScope', description='The scope of account synchronization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationProvisioningScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationProvisioningScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationProvisioningScope  GetApplicationProvisioningScopeRequest
  * @return GetApplicationProvisioningScopeResponse
 */
async function getApplicationProvisioningScope(request: GetApplicationProvisioningScopeRequest): GetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationSsoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetApplicationSsoConfigResponseBody = {
  applicationSsoConfig?: {
    initLoginType?: string(name='InitLoginType', description='The initial SSO method. Valid values:

*   only_app_init_sso: Only application-initiated SSO is allowed. This method is selected by default when the SSO protocol of the application is an OIDC protocol. If this method is selected when the SSO protocol of the application is SAML, the InitLoginUrl parameter is required.
*   idaas_or_app_init_sso: IDaaS-initiated SSO and application-initiated SSO are allowed. This method is selected by default when the SSO protocol of the application is SAML. If this method is selected when the SSO protocol of the application is an OIDC protocol, the InitLoginUrl parameter is required.', example='only_app_init_sso'),
    initLoginUrl?: string(name='InitLoginUrl', description='The initial webhook URL of SSO. This parameter is required when the SSO protocol of the application is an OIDC protocol and the InitLoginType parameters is set to idaas_or_app_init_sso or when the SSO protocol of the application is SAML and the InitLoginType parameter is set to only_app_init_sso.', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF'),
    oidcSsoConfig?: {
      accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='The validity period of the issued access token. Unit: seconds. Default value: 1200.', example='1200'),
      codeEffectiveTime?: long(name='CodeEffectiveTime', description='The validity period of the issued code. Unit: seconds. Default value: 60.', example='60'),
      customClaims?: [ 
        {
          claimName?: string(name='ClaimName', description='The claim name.', example='userOuIds'),
          claimValueExpression?: string(name='ClaimValueExpression', description='The expression that is used to generate the value of the claim.', example='ObjectToJsonString(user.organizationalUnits)'),
        }
      ](name='CustomClaims', description='The custom claims that are returned for the ID token.'),
      grantScopes?: [ string ](name='GrantScopes', description='The scopes of user attributes that can be returned for the UserInfo endpoint or ID token.', example='profile，email'),
      grantTypes?: [ string ](name='GrantTypes', description='The list of grant types that are supported for OIDC protocols.', example='authorization_code'),
      idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='The validity period of the issued ID token. Unit: seconds. Default value: 300.', example='1200'),
      passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='The ID of the identity authentication source in password mode. This parameter is returned only when the value of the GrantTypes parameter includes the password mode.', example='ia_password'),
      passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='Indicates whether time-based one-time password (TOTP) authentication is required in password mode. This parameter is returned only when the value of the GrantTypes parameter includes the password mode.', example='true'),
      pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='The algorithms that are used to calculate the code challenge for PKCE.', example='S256'),
      pkceRequired?: boolean(name='PkceRequired', description='Indicates whether the SSO of the application requires Proof Key for Code Exchange (PKCE) (RFC 7636).', example='true'),
      postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='The list of logout redirect URIs that are supported by the application.'),
      redirectUris?: [ string ](name='RedirectUris', description='The list of redirect URIs that are supported by the application.'),
      refreshTokenEffective?: long(name='RefreshTokenEffective', description='The validity period of the issued refresh token. Unit: seconds. Default value: 86400.', example='86400'),
      responseTypes?: [ string ](name='ResponseTypes', description='The response types that are supported by the application. This parameter is returned when the value of the GrantTypes parameter includes the implicit mode.', example='token id_token'),
      subjectIdExpression?: string(name='SubjectIdExpression', description='The custom expression that is used to generate the subject ID returned for the ID token.', example='user.userid'),
    }(name='OidcSsoConfig', description='The Open ID Connect (OIDC)-based SSO configuration attributes of the application. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.'),
    protocolEndpointDomain?: {
      oauth2AuthorizationEndpoint?: string(name='Oauth2AuthorizationEndpoint', description='The OAuth2.0 authorization endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/authorize'),
      oauth2DeviceAuthorizationEndpoint?: string(name='Oauth2DeviceAuthorizationEndpoint', description='The OAuth2.0 device authorization endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/device/code'),
      oauth2RevokeEndpoint?: string(name='Oauth2RevokeEndpoint', description='The OAuth2.0 token revocation endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/revoke'),
      oauth2TokenEndpoint?: string(name='Oauth2TokenEndpoint', description='The OAuth2.0 token endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/token'),
      oauth2UserinfoEndpoint?: string(name='Oauth2UserinfoEndpoint', description='The OIDC UserInfo endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oauth2/userinfo'),
      oidcIssuer?: string(name='OidcIssuer', description='The information about the OIDC issuer. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc'),
      oidcJwksEndpoint?: string(name='OidcJwksEndpoint', description='The JSON Web Key Set (JWKS) URL of the OIDC issuer. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://eiam-api-cn-hangzhou.aliyuncs.com/v2/idaas_ue2jvisn35ea5lmthk2676rypm/app_mltta64q65enci54slingvvsgq/oidc/jwks'),
      oidcLogoutEndpoint?: string(name='OidcLogoutEndpoint', description='The OIDC relying party (RP)-initiated logout endpoint. This parameter is returned only when the SSO protocol of the application is an OIDC protocol.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltta64q65enci54slingvvsgq/oauth2/logout'),
      samlMetaEndpoint?: string(name='SamlMetaEndpoint', description='The metadata URL of the SAML protocol. This parameter is returned only when the SSO protocol of the application is SAML 2.0.', example='https://l1seshcn.aliyunidaas.com/api/v2/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/meta'),
      samlSsoEndpoint?: string(name='SamlSsoEndpoint', description='The request receiving URL of the SAML protocol. This parameter is returned only when the SSO protocol of the application is SAML 2.0.', example='https://l1seshcn.aliyunidaas.com/login/app/app_mltuxdwd4lq4eer6tmtlmaxm5e/saml2/sso'),
    }(name='ProtocolEndpointDomain', description='The configuration of the metadata endpoint provided by the application.'),
    samlSsoConfig?: {
      assertionSigned?: boolean(name='AssertionSigned', description='Whether the Assertion needs a signature. ResponseSigned and AssertionSigned cannot be false at the same time.

true: signature is required.
false: signature is not required.', example='true'),
      attributeStatements?: [ 
        {
          attributeName?: string(name='AttributeName', description='The attribute name.', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
          attributeValueExpression?: string(name='AttributeValueExpression', description='The expression that is used to generate the value of the attribute.', example='user.username'),
        }
      ](name='AttributeStatements', description='The additional user attributes in the SAML assertion.'),
      defaultRelayState?: string(name='DefaultRelayState', description='The default value of the RelayState attribute. If the SSO request is initiated in EIAM, the RelayState attribute in the SAML response is set to this default value.', example='https://home.console.aliyun.com'),
      idPEntityId?: string(name='IdPEntityId', description='The custom issuer ID.', example='https://example.com/'),
      nameIdFormat?: string(name='NameIdFormat', description='The Format attribute of the NameID element in the SAML assertion. Valid values:

*   urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified: No format is specified. How to resolve the NameID element depends on the application.
*   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress: The NameID element must be an email address.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:persistent: The NameID element must be persistent.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:transient: The NameID element must be transient.', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
      nameIdValueExpression?: string(name='NameIdValueExpression', description='The expression that is used to generate the value of NameID in the SAML assertion.', example='user.username'),
      optionalRelayStates?: [ 
        {
          displayName?: string(name='DisplayName', description='The display name of the RelayState', example='Ram Account SSO'),
          relayState?: string(name='RelayState', description='RelayState.The user will see the display names of multiple optional redirect addresses in the application card of the application portal. After the user clicks and completes SSO, they will automatically jump to the corresponding address. This field can only be filled in after the default redirect address is filled in.', example='https://home.console.aliyun.com'),
        }
      ](name='OptionalRelayStates', description='Optional RelayState. The user will see the display names of multiple optional redirect addresses in the application card of the application portal. After the user clicks and completes SSO, they will automatically jump to the corresponding address. This field can only be filled in after the default redirect address is filled in.'),
      responseSigned?: boolean(name='ResponseSigned', description='Whether the response needs to be signed. ResponseSigned and AssertionSigned cannot be false at the same time.

true: signature is required.
false: signature is not required.', example='true'),
      signatureAlgorithm?: string(name='SignatureAlgorithm', description='The algorithm that is used to calculate the signature for the SAML assertion.', example='RSA-SHA256'),
      spEntityId?: string(name='SpEntityId', description='The entity ID of the application in SAML. The application assumes the role of service provider.', example='urn:alibaba:cloudcomputing'),
      spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='The Assertion Consumer Service (ACS) URL of the application in SAML. The application assumes the role of service provider.', example='https://signin.aliyun.com/saml-role/sso'),
    }(name='SamlSsoConfig', description='The Security Assertion Markup Language (SAML)-based SSO configuration attributes of the application. This parameter is returned only if the SSO protocol of the application is SAML 2.0.'),
    ssoStatus?: string(name='SsoStatus', description='The SSO feature status of the application. Valid values:

*   enabled: The feature is enabled.
*   disabled: The feature is disabled.', example='enabled'),
  }(name='ApplicationSsoConfig', description='The single sign-on (SSO) configuration information of the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetApplicationSsoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationSsoConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationSsoConfig  GetApplicationSsoConfigRequest
  * @return GetApplicationSsoConfigResponse
 */
async function getApplicationSsoConfig(request: GetApplicationSsoConfigRequest): GetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetConditionalAccessPolicyResponseBody = {
  conditionalAccessPolicy?: {
    conditionalAccessPolicyId?: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID', example='cp_xxxxx'),
    conditionalAccessPolicyName?: string(name='ConditionalAccessPolicyName', description='Conditional Access Policy Name', example='My Policy'),
    conditionalAccessPolicyType?: string(name='ConditionalAccessPolicyType', description='Type of the conditional access policy', example='arn:alibaba:idaas:authn:access:policy:system'),
    conditionsConfig?: {
      applications?: {
        excludeApplications?: [ string ](name='ExcludeApplications', description='Excluded applications'),
        includeApplications?: [ string ](name='IncludeApplications', description='Selected applications'),
      }(name='Applications', description='Target applications of the conditional access policy'),
      networkZones?: {
        excludeNetworkZones?: [ string ](name='ExcludeNetworkZones', description='Excluded network zones'),
        includeNetworkZones?: [ string ](name='IncludeNetworkZones', description='Included network zones'),
      }(name='NetworkZones', description='Network zones for the conditional access policy'),
      users?: {
        excludeGroups?: [ string ](name='ExcludeGroups', description='Excluded user groups'),
        excludeOrganizationalUnits?: [ string ](name='ExcludeOrganizationalUnits', description='Excluded organizations'),
        excludeUsers?: [ string ](name='ExcludeUsers', description='Excluded users'),
        includeGroups?: [ string ](name='IncludeGroups', description='Selected user groups'),
        includeOrganizationalUnits?: [ string ](name='IncludeOrganizationalUnits', description='Included organizations'),
        includeUsers?: [ string ](name='IncludeUsers', description='Selected users'),
      }(name='Users', description='Target users of the conditional access policy'),
    }(name='ConditionsConfig', description='Conditional access policy content'),
    createTime?: long(name='CreateTime', description='Creation time', example='1741857554000'),
    decisionConfig?: {
      activeSessionReuseStatus?: string(name='ActiveSessionReuseStatus', description='Whether to enable session reuse', example='enabled'),
      effect?: string(name='Effect', description='Decision action of the conditional access policy', example='allow'),
      mfaAuthenticationIntervalSeconds?: long(name='MfaAuthenticationIntervalSeconds', description='Re-authentication interval (in seconds) for the conditional access policy', example='300'),
      mfaAuthenticationMethods?: [ string ](name='MfaAuthenticationMethods', description='Allowed MFA types for the conditional access policy'),
      mfaType?: string(name='MfaType', description='MFA authentication type of the conditional access policy', example='directly_access'),
    }(name='DecisionConfig', description='Action of the conditional access policy'),
    decisionType?: string(name='DecisionType', description='Execution type of the conditional access policy', example='enforcement'),
    description?: string(name='Description', description='Description of the conditional access policy', example='ga access port for ecs: internal-cn-hangzhou-docker-builder-2(i-bp19g1pheaailkk1xvr6)'),
    evaluateAt?: string(name='EvaluateAt', description='Execution point of the conditional access policy', example='arn:alibaba:idaas:authn:access:rule:eval_at:after_step1'),
    instanceId?: string(name='InstanceId', description='Instance ID', example='idaas_qnx6fbrinlecptl5hld23lfkvy'),
    lastUpdatedTime?: long(name='LastUpdatedTime', description='Last updated time', example='1741857554000'),
    priority?: int32(name='Priority', description='Priority', example='5'),
    status?: string(name='Status', description='Enable or disable status of the conditional access policy', example='enabled'),
  }(name='ConditionalAccessPolicy', description='Details of the conditional access policy'),
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description Query Conditional Access Policy
  * @param request  the request parameters of GetConditionalAccessPolicy  GetConditionalAccessPolicyRequest
  * @return GetConditionalAccessPolicyResponse
 */
async function getConditionalAccessPolicy(request: GetConditionalAccessPolicyRequest): GetConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetDomainResponseBody = {
  domain?: {
    createTime?: long(name='CreateTime', description='域名创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    defaultDomain?: boolean(name='DefaultDomain', description='是否默认域名。true表示实例默认域名，false表示非默认域名', example='false'),
    domain?: string(name='Domain', description='域名。', example='login.example.com'),
    domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx'),
    domainType?: string(name='DomainType', description='域名类型。枚举取值:system_init(系统初始化)、user_custom(用户自定义)。', example='system_init'),
    filing?: {
      icpNumber?: string(name='IcpNumber', description='域名关联的备案号, 长度最大限制64。'),
    }(name='Filing', description='域名备案信息。'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lockMode?: string(name='LockMode', description='域名锁定状态。枚举取值:unlock(正常)、lockByLicense(因License限制不可用)。', example='unlock'),
    updateTime?: long(name='UpdateTime', description='域名最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
  }(name='Domain'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDomain  GetDomainRequest
  * @return GetDomainResponse
 */
async function getDomain(request: GetDomainRequest): GetDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomain', 'POST', '/', 'json', false, 'json', request);
}

model GetDomainDnsChallengeRequest {
  regionId?: string(name='RegionId', position='Host'),
  domain: string(name='Domain', description='域名。

This parameter is required.', example='dm_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetDomainDnsChallengeResponseBody = {
  domainDnsChallenge?: {
    dnsChallengeName?: string(name='DnsChallengeName', description='DNS challenge名称。', example='_idaas-challenge.${domain}'),
    dnsChallengeValue?: string(name='DnsChallengeValue', description='DNS challenge值。', example='exmple123xxx'),
    dnsType?: string(name='DnsType', description='DNS记录类型。', example='枚举，目前只支持TXT类型'),
  }(name='DomainDnsChallenge'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetDomainDnsChallengeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDomainDnsChallengeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDomainDnsChallenge  GetDomainDnsChallengeRequest
  * @return GetDomainDnsChallengeResponse
 */
async function getDomainDnsChallenge(request: GetDomainDnsChallengeRequest): GetDomainDnsChallengeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDomainDnsChallenge', 'POST', '/', 'json', false, 'json', request);
}

model GetForgetPasswordConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetForgetPasswordConfigurationResponseBody = {
  openForgetPasswordConfiguration?: {
    authenticationChannels?: [ string ](name='AuthenticationChannels', description='表示忘记密码认证渠道。枚举取值:email(邮件)、sms(短信)'),
    enable?: boolean(name='Enable', description='Indicates whether the forgot password feature is enabled.', example='true'),
    enableEmail?: boolean(name='EnableEmail', description='Indicates whether email authentication is enabled for the forgot password feature.', example='true'),
    enableSms?: boolean(name='EnableSms', description='Indicates whether Short Message Service (SMS) authentication is enabled for the forgot password feature.', example='true'),
    forgetPasswordStatus?: string(name='ForgetPasswordStatus', description='表示忘记密码配置状态。枚举取值:enabled(开启)、disabled(禁用)'),
  }(name='OpenForgetPasswordConfiguration', description='The forgot password configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetForgetPasswordConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetForgetPasswordConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetForgetPasswordConfiguration  GetForgetPasswordConfigurationRequest
  * @return GetForgetPasswordConfigurationResponse
 */
async function getForgetPasswordConfiguration(request: GetForgetPasswordConfigurationRequest): GetForgetPasswordConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetForgetPasswordConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetGroupResponseBody = {
  group?: {
    createTime?: long(name='CreateTime', description='The time at which the group was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
    description?: string(name='Description', description='The description of the group.', example='test_group'),
    groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
    groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
    groupName?: string(name='GroupName', description='The name of the group.', example='group_name'),
    groupSourceId?: string(name='GroupSourceId', description='The source ID of the group. By default, the source ID is the instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    groupSourceType?: string(name='GroupSourceType', description='The source type of the group. Only build_in may be returned, which indicates that the group was created in IDaaS.

*build_in:Create By Self.', example='build_in'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    updateTime?: long(name='UpdateTime', description='The time at which the group was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
  }(name='Group', description='The information about the account group.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGroup  GetGroupRequest
  * @return GetGroupResponse
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetIdentityProviderRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetIdentityProviderResponseBody = {
  identityProviderDetail?: {
    advancedStatus?: string(name='AdvancedStatus', description='高阶配置能力', example='disabled'),
    authnSourceSupplier?: string(name='AuthnSourceSupplier', description='IDaaS EIAM 对应的认证来源产品，okta or google or azure ad', example='urn:alibaba:idaas:idp:bytedance:lark'),
    authnSourceType?: string(name='AuthnSourceType', description='IDaaS EIAM 认证方式类型 oidc or saml', example='urn:alibaba:idaas:authntype:oidc'),
    authnStatus?: string(name='AuthnStatus', description='IDaaS EIAM 对应IdP是否支持认证', example='disabled'),
    createTime?: long(name='CreateTime', description='创建时间', example='1726021079000'),
    description?: string(name='Description', description='IDaaS EIAM 身份提供方描述', example='for poc test'),
    dingtalkAppConfig?: {
      appKey?: string(name='AppKey', description='IDaaS EIAM 钉钉一方应用的AppKey', example='41reopmwoy9s'),
      appSecret?: string(name='AppSecret', description='IDaaS EIAM 钉钉一方应用的AppSecret', example='REOQ6Cl55kriOd8NOBeqWYLKpHR4p6fdZxxxx'),
      corpId?: string(name='CorpId', description='IDaaS EIAM 钉钉一方应用的corpId', example='3756043633237690761'),
      dingtalkVersion?: string(name='DingtalkVersion', description='IDaaS EIAM 钉钉版本', example='public_dingtalk'),
    }(name='DingtalkAppConfig', description='钉钉基础配置'),
    dingtalkProvisioningConfig?: {
      authedDepartmentIds?: [ 
        {
          deptId?: string(name='DeptId', description='钉钉部门Id', example='123xxx444'),
          deptName?: string(name='DeptName', description='钉钉部门名称', example='测试部门'),
        }
      ](name='AuthedDepartmentIds', description='授权的钉钉部门'),
      authedUsers?: [ 
        {
          name?: string(name='Name', description='钉钉用户名称', example='张三'),
          userId?: string(name='UserId', description='钉钉用户userId', example='130308333929200479'),
        }
      ](name='AuthedUsers', description='授权的钉钉账户列表'),
      corpId?: string(name='CorpId', description='钉钉企业corpId', example='ding_xxxxx'),
      corpName?: string(name='CorpName', description='钉钉企业名称', example='测试企业'),
    }(name='DingtalkProvisioningConfig', description='钉钉同步配置'),
    identityProviderExternalId?: string(name='IdentityProviderExternalId', description='IDaaS EIAM 身份提供方外部ID', example='idp_xxxx'),
    identityProviderId?: string(name='IdentityProviderId', description='IDaaS EIAM 身份提供方ID', example='idp_mwpcwnhrimlr2horx7xgg7pp7y'),
    identityProviderName?: string(name='IdentityProviderName', description='IDaaS EIAM 身份提供方名称', example='test'),
    identityProviderType?: string(name='IdentityProviderType', description='身份提供方同步类型', example='urn:alibaba:idaas:idp:alibaba:dingtalk:push'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_x2df3bak3uwnapqm6xxxx'),
    larkConfig?: {
      appId?: string(name='AppId', description='IDaaS EIAM 飞书自建应用的corpId', example='cli_a7a99f53a317100c'),
      appSecret?: string(name='AppSecret', description='IDaaS EIAM 飞书自建应用的AppSecret', example='***'),
      encryptKey?: string(name='EncryptKey'),
      enterpriseNumber?: string(name='EnterpriseNumber', description='IDaaS EIAM 飞书企业编码', example='FX1231xxxx'),
      verificationToken?: string(name='VerificationToken'),
    }(name='LarkConfig', description='飞书配置'),
    lastStatusCheckJobResult?: string(name='LastStatusCheckJobResult', description='最后一次状态检查结果', example='success'),
    ldapConfig?: {
      administratorPassword?: string(name='AdministratorPassword', description='管理员密码', example='XXXX'),
      administratorUsername?: string(name='AdministratorUsername', description='管理员账号', example='example.com'),
      certificateFingerprintStatus?: string(name='CertificateFingerprintStatus', description='是否验证指纹证书', example='enabled'),
      certificateFingerprints?: [ string ](name='CertificateFingerprints', description='证书指纹列表'),
      ldapProtocol?: string(name='LdapProtocol', description='通信协议', example='ldap'),
      ldapServerHost?: string(name='LdapServerHost', description='ad/ldap 服务器地址', example='127.xx.xx.100'),
      ldapServerPort?: int32(name='LdapServerPort', description='ad/ldap 服务器地址', example='389'),
      startTlsStatus?: string(name='StartTlsStatus', description='startTls是否开启', example='enabled'),
    }(name='LdapConfig', description='AD/LDAP身份提供方相关信息'),
    lockReason?: string(name='LockReason', description='锁定原因', example='financial'),
    logoUrl?: string(name='LogoUrl'),
    networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='网络端点ID', example='nae_mx4vsadfe6govkqkwckxxxx'),
    oidcConfig?: {
      authnParam?: {
        authnMethod?: string(name='AuthnMethod', description='OIDC/oAuth2 认证方法。', example='client_secret_post'),
        clientId?: string(name='ClientId', description='OIDC/oAuth2 客户端ID。', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
        clientSecret?: string(name='ClientSecret', description='OIDC/oAuth2 客户端密钥。', example='CSEHDddddddxxxxuxkJEHPveWRXBGqVqRsxxxx'),
      }(name='AuthnParam', description='OIDC客户端认证配置。'),
      endpointConfig?: {
        authorizationEndpoint?: string(name='AuthorizationEndpoint', description='oAuth2 授权端点。', example='https://example.com/oauth/authorize'),
        issuer?: string(name='Issuer', description='OIDC issuer信息。', example='https://example.com/oauth'),
        jwksUri?: string(name='JwksUri', description='OIDC jwks地址。', example='https://example.com/oauth/jwks'),
        tokenEndpoint?: string(name='TokenEndpoint', description='oAuth2 Token端点。', example='https://example.com/oauth/token'),
        userinfoEndpoint?: string(name='UserinfoEndpoint', description='OIDC 用户信息端点。', example='https://example.com/oauth/userinfo'),
      }(name='EndpointConfig', description='OIDC 端点配置。'),
      grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等', example='openid'),
      grantType?: string(name='GrantType', description='OIDC授权类型。', example='authorization_code'),
      pkceChallengeMethod?: string(name='PkceChallengeMethod', description='支持的PKCE算法类型。', example='S256'),
      pkceRequired?: boolean(name='PkceRequired', description='AuthorizationCode授权模式下是否使用PKCE。', example='true'),
    }(name='OidcConfig', description='OIDC IdP配置。'),
    udPullConfig?: {
      groupSyncStatus?: string(name='GroupSyncStatus', example='disabled'),
      incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='disabled'),
      udSyncScopeConfig?: {
        sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
        targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_123xxxx'),
      }(name='UdSyncScopeConfig', description='同步入配置信息'),
    }(name='UdPullConfig', description='同步入配置'),
    udPullStatus?: string(name='UdPullStatus', description='IDaaS EIAM 是否支持UD同步', example='disabled'),
    udPushConfig?: {
      incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='disabled'),
      udSyncScopeConfigs?: [ 
        {
          sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
          targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_123xxxx'),
        }
      ](name='UdSyncScopeConfigs', description='同步出配置信息'),
    }(name='UdPushConfig', description='同步出配置'),
    udPushStatus?: string(name='UdPushStatus', description='同步出能力', example='disabled'),
    updateTime?: long(name='UpdateTime', description='更新时间', example='1726021079000'),
    weComConfig?: {
      agentId?: string(name='AgentId', description='IDaaS EIAM 企业微信自建应用的Id', example='1242350'),
      authorizeCallbackDomain?: string(name='AuthorizeCallbackDomain', description='授权回调域', example='https://example.com/xxxx'),
      corpId?: string(name='CorpId', description='IDaaS EIAM 企业微信自建应用的corpId', example='3562012953454577801'),
      corpSecret?: string(name='CorpSecret', description='IDaaS EIAM 企业微信自建应用的corpSecret', example='weaseiszjskejskaj12sjeszojxxxx'),
      trustableDomain?: string(name='TrustableDomain', description='可信域名', example='https://example.com'),
    }(name='WeComConfig', description='企业微信'),
  }(name='IdentityProviderDetail'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetIdentityProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIdentityProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIdentityProvider  GetIdentityProviderRequest
  * @return GetIdentityProviderResponse
 */
async function getIdentityProvider(request: GetIdentityProviderRequest): GetIdentityProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIdentityProvider', 'POST', '/', 'json', false, 'json', request);
}

model GetIdentityProviderUdPullConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetIdentityProviderUdPullConfigurationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  udPullConfiguration?: {
    groupSyncStatus?: string(name='GroupSyncStatus', description='组同步状态', example='enabled'),
    identityProviderId?: string(name='IdentityProviderId', description='IDaaS EIAM 身份提供方ID', example='idp_my664lwkhpicbyzirog3xxxxx'),
    incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='enabled'),
    instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    ldapUdPullConfig?: {
      groupMemberAttributeName?: string(name='GroupMemberAttributeName', description='组成员标识', example='group'),
      groupObjectClass?: string(name='GroupObjectClass', description='组objectClass', example='member'),
      groupObjectClassCustomFilter?: string(name='GroupObjectClassCustomFilter', description='组自定义Filter', example='(|(cn=test)(group=test@test.com))'),
      organizationUnitObjectClass?: string(name='OrganizationUnitObjectClass', description='组织objectClass', example='ou,top'),
      userObjectClass?: string(name='UserObjectClass', description='用户objectClass', example='ou,top'),
      userObjectClassCustomFilter?: string(name='UserObjectClassCustomFilter', description='用户自定义Filter', example='(|(cn=test)(mail=test@test.com))'),
    }(name='LdapUdPullConfig', description='ldap同步侧相关配置信息'),
    periodicSyncConfig?: {
      periodicSyncCron?: string(name='PeriodicSyncCron', example='0 45 1 * * ?'),
      periodicSyncTimes?: int32(name='PeriodicSyncTimes'),
      periodicSyncType?: string(name='PeriodicSyncType', example='cron'),
    }(name='PeriodicSyncConfig'),
    periodicSyncStatus?: string(name='PeriodicSyncStatus', example='enabled'),
    pullProtectedRule?: {
      groupDeletedThreshold?: int32(name='GroupDeletedThreshold', description='同步保护规则-删除组数量', example='10'),
      organizationalUnitDeletedThreshold?: int32(name='OrganizationalUnitDeletedThreshold', description='IDaaS EIAM 钉钉一方应用同步保护规则-删除组织数量', example='10'),
      userDeletedThreshold?: int32(name='UserDeletedThreshold', description='IDaaS EIAM 钉钉一方应用同步保护规则-删除账户数量', example='30'),
    }(name='PullProtectedRule', description='同步入用户映射字段配置列表'),
    udSyncScopeConfig?: {
      sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
      targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_asjdfhaskfhw213mnsj33sXXX'),
    }(name='UdSyncScopeConfig', description='同步入配置信息'),
  }(name='UdPullConfiguration'),
}

model GetIdentityProviderUdPullConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIdentityProviderUdPullConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIdentityProviderUdPullConfiguration  GetIdentityProviderUdPullConfigurationRequest
  * @return GetIdentityProviderUdPullConfigurationResponse
 */
async function getIdentityProviderUdPullConfiguration(request: GetIdentityProviderUdPullConfigurationRequest): GetIdentityProviderUdPullConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIdentityProviderUdPullConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetInstanceResponseBody = {
  instance?: {
    createTime?: long(name='CreateTime', description='The time when the instance was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1550115455000'),
    defaultEndpoint?: {
      endpoint?: string(name='Endpoint', description='The endpoint of the instance.', example='example-xxx.aliyunidaas.com'),
      status?: string(name='Status', description='The status of the endpoint. Valid values:

*   resolved
*   unresolved', example='resolved'),
    }(name='DefaultEndpoint', description='The default endpoint of the instance.'),
    description?: string(name='Description', description='The description of the instance.', example='test_description'),
    domainConfig?: {
      defaultDomain?: string(name='DefaultDomain', description='The default domain of the instance.', example='example-xxx.example.com'),
      initDomain?: string(name='InitDomain', description='The init domain of the instance.', example='example-xxx.aliyunidaas.com'),
      initDomainAutoRedirectStatus?: string(name='InitDomainAutoRedirectStatus', description='Valid values:

*   true
*   false', example='true'),
    }(name='DomainConfig', description='The default domain of the instance.'),
    egressAddresses?: [ string ](name='EgressAddresses', description='The outbound public CIDR blocks of the instance. For example, when you synchronize Active Directory (AD) accounts, the IDaaS EIAM instance accesses your AD service by using the outbound public CIDR blocks.'),
    instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_abt3pfwojojcq323si6g5xxxxx'),
    status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running'),
  }(name='Instance', description='The details of the instance.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInstance  GetInstanceRequest
  * @return GetInstanceResponse
 */
async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetInstanceLicenseRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='Instance ID

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
}

model GetInstanceLicenseResponseBody = {
  license?: {
    edition?: string(name='Edition', description='Edition of the License', example='free'),
    endTime?: long(name='EndTime', description='End date of the validity period of the License, timestamp', example='1723996800000'),
    licenseChargeType?: string(name='LicenseChargeType', description='Payment type of the License', example='prepay'),
    licenseConfigJson?: string(name='LicenseConfigJson', description='Detailed configuration JSON string of the License', example='{"modules":[{"features":[{"name":"urn:alibaba:idaas:license:module:ud:customField","status":"enabled"}]……{"name":"urn:alibaba:idaas:license:tag:enterprise","status":"enabled"}],"version":"1.0"}'),
    licenseCreateTime?: long(name='LicenseCreateTime', description='Creation time of the License, timestamp', example='1720509699000'),
    licenseId?: string(name='LicenseId', description='Unique identifier of the License', example='license_1234xxxx'),
    licenseStatus?: string(name='LicenseStatus', description='Status of the License', example='valid'),
    purchaseChannel?: string(name='PurchaseChannel', description='Purchase channel of the License', example='alibaba_cloud'),
    purchaseInstanceId?: string(name='PurchaseInstanceId', description='Unique external product identifier corresponding to the License', example='eiam-cn-xxxxx'),
    startTime?: long(name='StartTime', description='Start date of the validity period of the License, timestamp', example='1720509699000'),
    userQuota?: long(name='UserQuota', description='User quota of the License', example='100'),
  }(name='License', description='Returned result.'),
  requestId?: string(name='RequestId', description='Request ID', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetInstanceLicenseResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInstanceLicenseResponseBody(name='body'),
}

/**
  * @description Please ensure that your current instance is no longer in use. When the EIAM instance is deleted, all related data will be deleted.
  * @param request  the request parameters of GetInstanceLicense  GetInstanceLicenseRequest
  * @return GetInstanceLicenseResponse
 */
async function getInstanceLicense(request: GetInstanceLicenseRequest): GetInstanceLicenseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceLicense', 'POST', '/', 'json', false, 'json', request);
}

model GetNetworkAccessEndpointRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。

This parameter is required.', example='nae-examplexxxx', position='Query'),
}

model GetNetworkAccessEndpointResponseBody = {
  networkAccessEndpoint?: {
    createTime?: long(name='CreateTime', description='专属网络端点创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    egressPrivateIpAddresses?: [ string ](name='EgressPrivateIpAddresses', description='网络访问端私网出口IP地址列表。', example='172.168.x.x'),
    egressPublicIpAddresses?: [ string ](name='EgressPublicIpAddresses', description='网络访问端点公网出口IP地址段', example='8.xx.xx.xxx/27'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
    networkAccessEndpointName?: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点'),
    networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。', example='private'),
    securityGroupId?: string(name='SecurityGroupId', description='专属网络端点使用的安全组ID。', example='sg-examplexxx'),
    status?: string(name='Status', description='专属网络端点状态。', example='running'),
    updateTime?: long(name='UpdateTime', description='专属网络端点最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch列表。', example='vsw-examplexxx'),
    vpcId?: string(name='VpcId', description='专属网络端点连接的VpcID。', example='vpc-examplexxx'),
    vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域。', example='cn-hangzhou'),
  }(name='NetworkAccessEndpoint'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetNetworkAccessEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNetworkAccessEndpointResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNetworkAccessEndpoint  GetNetworkAccessEndpointRequest
  * @return GetNetworkAccessEndpointResponse
 */
async function getNetworkAccessEndpoint(request: GetNetworkAccessEndpointRequest): GetNetworkAccessEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNetworkAccessEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model GetOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model GetOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    leaf?: boolean(name='Leaf', description='Indicates whether the node is a leaf node.', example='false'),
    organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used by external data to map the data of the organizational unit in IDaaS EIAM. By default, the external ID is the organizational unit ID.

For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='组织名称。', example='test_organizationalUnit_name'),
    organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='The source ID of the organizational unit.

If the organizational unit was created in IDaaS, its source ID is the ID of the IDaaS instance. If the organizational unit was imported, its source ID is the enterprise ID in the source. For example, if the organizational unit was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
    parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
  }(name='OrganizationalUnit', description='The data object of the organizational unit.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOrganizationalUnit  GetOrganizationalUnitRequest
  * @return GetOrganizationalUnitResponse
 */
async function getOrganizationalUnit(request: GetOrganizationalUnitRequest): GetOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordComplexityConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordComplexityConfigurationResponseBody = {
  passwordComplexityConfiguration?: {
    passwordComplexityRules?: [ 
      {
        passwordCheckType?: string(name='PasswordCheckType', description='The type of the password check. Valid values:

*   inclusion_upper_case: The password must contain uppercase letters.
*   inclusion_lower_case: The password must contain lowercase letters.
*   inclusion_special_case: The password must contain one or more of the following special characters: @ % + \\ / \\" ! # $ ^ ? : , ( ) { } [ ] ~ - _ .
*   inclusion_number: The password must contain digits.
*   exclusion_username: The password cannot contain a username.
*   exclusion_email: The password cannot contain an email prefix.
*   exclusion_phone_number: The password cannot contain a mobile number.
*   exclusion_display_name: The password cannot contain a display name.', example='inclusion_upper_case'),
      }
    ](name='PasswordComplexityRules', description='The password complexity rules.'),
    passwordMinLength?: int32(name='PasswordMinLength', description='The minimum number of characters in a password.', example='3'),
  }(name='PasswordComplexityConfiguration', description='The password complexity configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordComplexityConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPasswordComplexityConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPasswordComplexityConfiguration  GetPasswordComplexityConfigurationRequest
  * @return GetPasswordComplexityConfigurationResponse
 */
async function getPasswordComplexityConfiguration(request: GetPasswordComplexityConfigurationRequest): GetPasswordComplexityConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordComplexityConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordExpirationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordExpirationConfigurationResponseBody = {
  passwordExpirationConfiguration?: {
    effectiveAuthenticationSourceIds?: [ string ](name='EffectiveAuthenticationSourceIds', description='The list of valid authentication IDs. The default is all ["ia_all"]

ia_all: All. If you fill in this value, you cannot fill in other values

ia_password: Account password login

ia_otp_sms: SMS verification code login method

ia_webauthn: WebAuthn authenticator login method

idp_xxx: Specific identity provider authentication method'),
    passwordExpirationAction?: string(name='PasswordExpirationAction', description='The action to take when a password expires. Valid values:

*   forbid_login: Prohibit the user from using the password to log on to IDaaS.
*   force_update_password: Force the user to change the password.
*   remind_update_password: Remind the user to change the password.', example='forbid_login'),
    passwordExpirationNotificationChannels?: [ string ](name='PasswordExpirationNotificationChannels', description='The methods for receiving password expiration notifications.', example='login'),
    passwordExpirationNotificationDuration?: int32(name='PasswordExpirationNotificationDuration', description='The number of days before the expiration date during which password expiration notifications are sent. Unit: day.', example='7'),
    passwordExpirationNotificationStatus?: string(name='PasswordExpirationNotificationStatus', description='Indicates whether the password expiration notification feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordExpirationStatus?: string(name='PasswordExpirationStatus', description='Indicates whether the password expiration feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordForcedUpdateDuration?: int32(name='PasswordForcedUpdateDuration', description='The number of days before which users must change the password to prevent password expiration. Unit: day.', example='3'),
    passwordValidMaxDay?: int32(name='PasswordValidMaxDay', description='The validity period of a password. Unit: day.', example='180'),
  }(name='PasswordExpirationConfiguration', description='The password expiration configurations.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordExpirationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPasswordExpirationConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPasswordExpirationConfiguration  GetPasswordExpirationConfigurationRequest
  * @return GetPasswordExpirationConfigurationResponse
 */
async function getPasswordExpirationConfiguration(request: GetPasswordExpirationConfigurationRequest): GetPasswordExpirationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordExpirationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordHistoryConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordHistoryConfigurationResponseBody = {
  passwordHistoryConfiguration?: {
    passwordHistoryMaxRetention?: int32(name='PasswordHistoryMaxRetention', description='The maximum number of recent passwords that are retained.', example='3'),
    passwordHistoryStatus?: string(name='PasswordHistoryStatus', description='Indicates whether the password history feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
  }(name='PasswordHistoryConfiguration', description='The password history configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordHistoryConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPasswordHistoryConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPasswordHistoryConfiguration  GetPasswordHistoryConfigurationRequest
  * @return GetPasswordHistoryConfigurationResponse
 */
async function getPasswordHistoryConfiguration(request: GetPasswordHistoryConfigurationRequest): GetPasswordHistoryConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordHistoryConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetPasswordInitializationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetPasswordInitializationConfigurationResponseBody = {
  passwordInitializationConfiguration?: {
    passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Indicates whether forcible password change upon first logon is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordInitializationNotificationChannels?: [ string ](name='PasswordInitializationNotificationChannels', description='The methods for receiving password initialization notifications.', example='email'),
    passwordInitializationStatus?: string(name='PasswordInitializationStatus', description='Indicates whether the password initialization feature is enabled. Valid values:

*   enabled
*   disabled', example='enabled'),
    passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. Set the value to random.

*   random: A randomly generated password is used.', example='random'),
  }(name='PasswordInitializationConfiguration', description='The password initialization configurations.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetPasswordInitializationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPasswordInitializationConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPasswordInitializationConfiguration  GetPasswordInitializationConfigurationRequest
  * @return GetPasswordInitializationConfigurationResponse
 */
async function getPasswordInitializationConfiguration(request: GetPasswordInitializationConfigurationRequest): GetPasswordInitializationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPasswordInitializationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model GetRootOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model GetRootOrganizationalUnitResponseBody = {
  organizationalUnit?: {
    createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organization.', example='name001'),
    updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
  }(name='OrganizationalUnit', description='The data object of the organizational unit.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model GetRootOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRootOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRootOrganizationalUnit  GetRootOrganizationalUnitRequest
  * @return GetRootOrganizationalUnitResponse
 */
async function getRootOrganizationalUnit(request: GetRootOrganizationalUnitRequest): GetRootOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRootOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model GetSynchronizationJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  synchronizationJobId: string(name='SynchronizationJobId', description='同步任务ID

This parameter is required.', example='sync_0000347vjovtcf41li0fgsd98gn24q9njxxxxx', maxLength=64, position='Query'),
}

model GetSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  synchronizationJob?: {
    direction?: string(name='Direction', description='同步任务方向', example='ingress'),
    endTime?: long(name='EndTime', description='同步结束时间', example='1649830226000'),
    result?: {
      errorCode?: string(name='ErrorCode', description='同步结果错误码', example='ErrorCodeNotFound'),
      errorMessage?: string(name='ErrorMessage', description='同步结果错误信息描述'),
      groupMemberStatistics?: {
        binded?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Binded', description='绑定结果统计'),
        created?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Created', description='创建结果统计'),
        deleted?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Deleted', description='删除结果统计'),
        pushed?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Pushed', description='推送结果统计'),
        same?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Same', description='相同结果统计'),
        updated?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Updated', description='更新结果统计'),
      }(name='GroupMemberStatistics', description='组成员同步结果统计'),
      groupStatistics?: {
        binded?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Binded', description='绑定结果统计'),
        created?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Created', description='创建结果统计'),
        deleted?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Deleted', description='删除结果统计'),
        pushed?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Pushed', description='推送结果统计'),
        same?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Same', description='相同结果统计'),
        updated?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Updated', description='更新结果统计'),
      }(name='GroupStatistics', description='组同步结果统计'),
      organizationalUnitStatistics?: {
        binded?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Binded', description='绑定结果统计'),
        created?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Created', description='创建结果统计'),
        deleted?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Deleted', description='删除结果统计'),
        pushed?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Pushed', description='推送结果统计'),
        same?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Same', description='相同结果统计'),
        updated?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='30'),
        }(name='Updated', description='更新结果统计'),
      }(name='OrganizationalUnitStatistics', description='组织同步结果统计'),
      userStatistics?: {
        binded?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Binded', description='绑定结果统计'),
        created?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Created', description='创建结果统计'),
        deleted?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Deleted', description='删除结果统计'),
        pushed?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Pushed', description='推送结果统计'),
        same?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Same', description='相同结果统计'),
        updated?: {
          failed?: long(name='Failed', description='失败数目', example='10'),
          skipped?: long(name='Skipped', description='跳过数目', example='10'),
          success?: long(name='Success', description='成功数目', example='10'),
          total?: long(name='Total', description='总共数目', example='10'),
        }(name='Updated', description='更新结果统计'),
      }(name='UserStatistics', description='用户同步结果统计'),
    }(name='Result', description='同步任务结果'),
    startTime?: long(name='StartTime', description='同步开始时间', example='1649830226000'),
    status?: string(name='Status', description='同步任务状态', example='running'),
    synchronizationJobId?: string(name='SynchronizationJobId', description='同步任务ID', example='sync_0000347vjovtcf41li0fgsd98gn24q9nj9xxxxx'),
    targetId?: string(name='TargetId', description='同步目标ID', example='idp_my664lwkhpicbyzirog3nxxxxx'),
    targetType?: string(name='TargetType', description='同步目标类型', example='identity_provider'),
    triggerType?: string(name='TriggerType', description='同步触发类型', example='auto'),
  }(name='SynchronizationJob'),
}

model GetSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSynchronizationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSynchronizationJob  GetSynchronizationJobRequest
  * @return GetSynchronizationJobResponse
 */
async function getSynchronizationJob(request: GetSynchronizationJobRequest): GetSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model GetUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model GetUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  user?: {
    accountExpireTime?: long(name='AccountExpireTime', description='The time when the account expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    createTime?: long(name='CreateTime', description='The time when the account was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    customFields?: [ 
      {
        fieldName?: string(name='FieldName', description='The identifier of the custom field.', example='age'),
        fieldValue?: string(name='FieldValue', description='The value of the custom field.', example='10'),
      }
    ](name='CustomFields', description='The list of custom fields that describe the account.'),
    description?: string(name='Description', description='The description of the account.', example='Test account'),
    displayName?: string(name='DisplayName', description='The display name of the account.', example='display_name001'),
    email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com'),
    emailVerified?: boolean(name='EmailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
    groups?: [ 
      {
        description?: string(name='Description', description='The description of the organizational unit.', example='this is a test.'),
        groupId?: string(name='GroupId', description='The ID of the organizational unit.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
        groupName?: string(name='GroupName', description='The name of the organizational unit.', example='group_test_name'),
      }
    ](name='Groups', description='The organizational units to which the account belongs.'),
    instanceId?: string(name='InstanceId', description='The ID of the instance', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lockExpireTime?: long(name='LockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    organizationalUnits?: [ 
      {
        organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
        organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organizational unit.', example='test_ou_name'),
        primary?: boolean(name='Primary', description='Indicates whether the organization is the primary organization.', example='true'),
      }
    ](name='OrganizationalUnits', description='The organizational units to which the account belongs.'),
    passwordExpireTime?: long(name='PasswordExpireTime', description='The time when the password of the account expires. This value is a UNIX timestamp. Unit: milliseconds.

*   If the value -1 is returned, the password does not expire.
*   If no value is returned, the password does not expire.
*   If a UNIX timestamp is returned, the password expires at the indicated point of time.', example='1652085686179'),
    passwordSet?: boolean(name='PasswordSet', description='Indicates whether a password is set.', example='false'),
    phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
    phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
    phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
    preferredLanguage?: string(name='PreferredLanguage', description='Preferred language', example='en-US'),
    primaryOrganizationalUnitId?: string(name='PrimaryOrganizationalUnitId', description='The ID of the primary organizational unit to which the account belongs.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    registerTime?: long(name='RegisterTime', description='The time when the account was registered. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enabled'),
    updateTime?: long(name='UpdateTime', description='The time when the account was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM. By default, the external ID is the account ID.

For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
    username?: string(name='Username', description='The username of the account.', example='name001'),
  }(name='User', description='The data object of the account.'),
}

model GetUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUser  GetUserRequest
  * @return GetUserResponse
 */
async function getUser(request: GetUserRequest): GetUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUser', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationClientSecretsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListApplicationClientSecretsResponseBody = {
  applicationClientSecrets?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      clientSecret?: string(name='ClientSecret', description='The client key secret of the application. The value is not masked.', example='eyJh*****************************************************************************************************OQ'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_wdziy4vnjt33ehhf7z2o2nxxxx'),
      lastUsedTime?: long(name='LastUsedTime', description='The time when the client key was last used. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
      secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
      status?: string(name='Status', description='The status of the client key. Valid values:

*   Enabled: The client key is enabled.
*   Disabled: The client key is disabled.', example='enabled'),
    }
  ](name='ApplicationClientSecrets', description='The information about the client keys.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='100'),
}

model ListApplicationClientSecretsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationClientSecretsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationClientSecrets  ListApplicationClientSecretsRequest
  * @return ListApplicationClientSecretsResponse
 */
async function listApplicationClientSecrets(request: ListApplicationClientSecretsRequest): ListApplicationClientSecretsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationClientSecrets', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications.', example='Ram Account SSO', position='Query'),
  applicationName?: string(name='ApplicationName', description='The name of the application. Only fuzzy match from the leftmost character is supported.', example='Ram Account SSO', maxLength=64, position='Query'),
  authorizationType?: string(name='AuthorizationType', description='The authorization of the application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.', example='authorize_required', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  m2MClientStatus?: string(name='M2MClientStatus', example='enabled', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  resourceServerStatus?: string(name='ResourceServerStatus', example='enabled', position='Query'),
  ssoType?: string(name='SsoType', example='oauth2/m2m', position='Query'),
  status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled', maxLength=32, position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      applicationName?: string(name='ApplicationName', description='The name of the application.', example='SAML Application'),
      applicationSourceType?: string(name='ApplicationSourceType', description='The origin of the application. Valid values:

*   urn:alibaba:idaas:app:source:template: The application is created based on a template.
*   urn:alibaba:idaas: The application is created based on the standard protocol.', example='urn:alibaba:idaas:app:source:standard'),
      applicationTemplateId?: string(name='ApplicationTemplateId', description='应用模板ID'),
      clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      createTime?: long(name='CreateTime', description='The time when the application was created. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
      description?: string(name='Description', description='The description of the application.', example='A single application. The code is pkces.'),
      features?: string(name='Features', description='The features that are supported by the application. The value is a JSON array. Valid values:

*   sso: The application supports SSO.
*   provision: The application supports account synchronization.
*   api_invoke: The application supports custom APIs.', example='["sso", "provision"]'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      logoUrl?: string(name='LogoUrl', description='The URL of the application icon.', example='https://img.alicdn.com/imgextra/i4/O1CN01lvYwpv1aGowQXDML9_!!6000000003303-0-tps-580-580.jpg'),
      m2MClientStatus?: string(name='M2MClientStatus'),
      managedServiceCode?: string(name='ManagedServiceCode', description='The service code of the cloud service that manages the application template.', example='rpa'),
      resourceServerIdentifier?: string(name='ResourceServerIdentifier'),
      resourceServerStatus?: string(name='ResourceServerStatus'),
      serviceManaged?: boolean(name='ServiceManaged', description='Indicates whether the application template is managed by a cloud service.', example='true'),
      ssoType?: string(name='SsoType', description='The type of the single sign-on (SSO) protocol. Valid values:

*   saml2: the Security Assertion Markup Language (SAML) 2.0 protocol.
*   oidc: the OpenID Connect (OIDC) protocol.', example='saml2'),
      status?: string(name='Status', description='The status of the application. Valid values:

*   Enabled: The application is enabled.
*   Disabled: The application is disabled.', example='enabled'),
      updateTime?: long(name='UpdateTime', description='The time when the application was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    }
  ](name='Applications', description='The details of the applications.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplications  ListApplicationsRequest
  * @return ListApplicationsResponse
 */
async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications that the EIAM organization can access. You can query a maximum of 100 application IDs at a time.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the EIAM organization.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListApplicationsForOrganizationalUnitResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that the EIAM organization can access.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    }
  ](name='Applications', description='The applications that the EIAM organization can access.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsForOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsForOrganizationalUnitResponseBody(name='body'),
}

/**
  * @description You can only query the permissions that are directly granted to the EIAM organization by calling the ListApplicationsForOrganizationalUnit operation. You can filter applications by configuring the **ApplicationIds** parameter when you call this operation.
  * @param request  the request parameters of ListApplicationsForOrganizationalUnit  ListApplicationsForOrganizationalUnitRequest
  * @return ListApplicationsForOrganizationalUnitResponse
 */
async function listApplicationsForOrganizationalUnit(request: ListApplicationsForOrganizationalUnitRequest): ListApplicationsForOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationIds?: [ string ](name='ApplicationIds', description='The IDs of the applications that the EIAM account can access. You can query a maximum of 100 application IDs at a time.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  queryMode?: string(name='QueryMode', description='The query mode. Default value: **OnlyDirect**. Valid values:

*   OnlyDirect: Only the direct permissions are queried. Direct permissions are the permissions that are directly granted to the account.
*   IncludeInherit: Both the permissions that are directly granted to the account and the inherited permissions are queried. Inherited permissions are the permissions that an account inherits from the parent organization or the group to which the account belongs.', example='OnlyDirect', maxLength=32, position='Query'),
  userId: string(name='UserId', description='The ID of the EIAM account.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model ListApplicationsForUserResponseBody = {
  applications?: [ 
    {
      applicationId?: string(name='ApplicationId', description='The ID of the application that the EIAM account can access.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
      hasDirectAuthorization?: boolean(name='HasDirectAuthorization', description='Indicates whether the EIAM account has direct permissions on the application. Valid values:

*   true: The EIAM account has direct permissions on the application.
*   false: The EIAM account does not have direct permissions on the application.', example='true'),
      hasInheritAuthorization?: boolean(name='HasInheritAuthorization', description='Indicates whether the EIAM account has inherited permissions on the application. Valid values:

*   true: A parent organization or an organization to which the EIAM account belongs has direct permissions on the application.
*   false: A parent organization or an organization to which the EIAM account belongs does not have direct permissions on the application.', example='false'),
    }
  ](name='Applications', description='The applications that the EIAM account can access.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListApplicationsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationsForUser  ListApplicationsForUserRequest
  * @return ListApplicationsForUserResponse
 */
async function listApplicationsForUser(request: ListApplicationsForUserRequest): ListApplicationsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListConditionalAccessPoliciesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  maxResults?: long(name='MaxResults', description='Number of items per page in a paginated query.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='Token for the next page query.', example='NTxxxxxexample', position='Query'),
  previousToken?: string(name='PreviousToken', description='Token for the previous page query.', example='PTxxxxxexample', position='Query'),
}

model ListConditionalAccessPoliciesResponseBody = {
  conditionalAccessPolicies?: [ 
    {
      conditionalAccessPolicyId?: string(name='ConditionalAccessPolicyId', description='Conditional access policy ID', example='cp_xxxxx'),
      conditionalAccessPolicyName?: string(name='ConditionalAccessPolicyName', description='Conditional access policy name', example='My Policy'),
      conditionalAccessPolicyType?: string(name='ConditionalAccessPolicyType', description='Type of the conditional access policy', example='arn:alibaba:idaas:authn:access:policy:system'),
      conditionsConfig?: {
        applications?: {
          excludeApplications?: [ string ](name='ExcludeApplications', description='Excluded applications'),
          includeApplications?: [ string ](name='IncludeApplications', description='Selected applications'),
        }(name='Applications', description='Target applications of the conditional access policy'),
        networkZones?: {
          excludeNetworkZones?: [ string ](name='ExcludeNetworkZones', description='Excluded network zones'),
          includeNetworkZones?: [ string ](name='IncludeNetworkZones', description='Included network ranges'),
        }(name='NetworkZones', description='Network zones for conditional access policies'),
        users?: {
          excludeGroups?: [ string ](name='ExcludeGroups', description='Excluded user groups'),
          excludeOrganizationalUnits?: [ string ](name='ExcludeOrganizationalUnits', description='Excluded organizations'),
          excludeUsers?: [ string ](name='ExcludeUsers', description='Excluded users'),
          includeGroups?: [ string ](name='IncludeGroups', description='Included user groups'),
          includeOrganizationalUnits?: [ string ](name='IncludeOrganizationalUnits', description='Included organizations'),
          includeUsers?: [ string ](name='IncludeUsers', description='Selected users'),
        }(name='Users', description='Target users of the conditional access policy'),
      }(name='ConditionsConfig', description='Content of the conditional access policy'),
      createTime?: long(name='CreateTime', description='Creation time', example='1741857554000'),
      decisionConfig?: {
        activeSessionReuseStatus?: string(name='ActiveSessionReuseStatus', description='Whether to enable session reuse for secondary authentication', example='disabled'),
        effect?: string(name='Effect', description='Decision action of the conditional access policy:
deny  Deny
allow Allow', example='deny'),
        mfaAuthenticationIntervalSeconds?: long(name='MfaAuthenticationIntervalSeconds', description='Re-authentication interval for the conditional access policy (in seconds) 300-86400', example='300'),
        mfaAuthenticationMethods?: [ string ](name='MfaAuthenticationMethods', description='MFA types allowed by the conditional access policy'),
        mfaType?: string(name='MfaType', description='Conditional Access Policy Mfa Type', example='directly_access'),
      }(name='DecisionConfig', description='Action of the conditional access policy'),
      decisionType?: string(name='DecisionType', description='Execution type of the conditional access policy', example='enforcement'),
      description?: string(name='Description', description='Description of the conditional access policy', example='My Policy Description'),
      evaluateAt?: string(name='EvaluateAt', description='Execution point of the conditional access policy', example='arn:alibaba:idaas:authn:access:rule:eval_at:after_step1'),
      instanceId?: string(name='InstanceId', description='Instance ID', example='idaas_ksvv5c7f2l6uzh6oqspeks23ni'),
      lastUpdatedTime?: long(name='LastUpdatedTime', description='Last updated time', example='1741857554000'),
      priority?: int32(name='Priority', description='Priority, 1-100', example='1'),
      status?: string(name='Status', description='Enable or disable status of the conditional access policy', example='disabled'),
    }
  ](name='ConditionalAccessPolicies', description='Collection of conditional access policies'),
  nextToken?: string(name='NextToken', description='The token value returned by this call for the next page query.', example='NTxxxexample'),
  previousToken?: string(name='PreviousToken', description='Previous page query token (Token)', example='PTxxxxxexample'),
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='Total number of items in the list.', example='100'),
}

model ListConditionalAccessPoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConditionalAccessPoliciesResponseBody(name='body'),
}

/**
  * @description Paginated query for the list of conditional access policies
  * @param request  the request parameters of ListConditionalAccessPolicies  ListConditionalAccessPoliciesRequest
  * @return ListConditionalAccessPoliciesResponse
 */
async function listConditionalAccessPolicies(request: ListConditionalAccessPoliciesRequest): ListConditionalAccessPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConditionalAccessPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListConditionalAccessPoliciesForNetworkZoneRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkZoneId: string(name='NetworkZoneId', description='Application ID associated with the conditional access policy

This parameter is required.', example='app_11111', maxLength=64, position='Query'),
}

model ListConditionalAccessPoliciesForNetworkZoneResponseBody = {
  conditionalAccessPolicies?: [ 
    {
      conditionalAccessPolicyId?: string(name='ConditionalAccessPolicyId', description='Conditional access policy ID', example='cp_xxxxx'),
      conditionalAccessPolicyName?: string(name='ConditionalAccessPolicyName', description='Conditional access policy name', example='My Policy'),
      conditionalAccessPolicyType?: string(name='ConditionalAccessPolicyType', description='Type of the conditional access policy', example='arn:alibaba:idaas:authn:access:policy:system'),
      conditionsConfig?: {
        applications?: {
          excludeApplications?: [ string ](name='ExcludeApplications', description='Excluded applications'),
          includeApplications?: [ string ](name='IncludeApplications', description='Selected applications'),
        }(name='Applications', description='Target applications of the conditional access policy'),
        networkZones?: {
          excludeNetworkZones?: [ string ](name='ExcludeNetworkZones', description='Excluded network zones'),
          includeNetworkZones?: [ string ](name='IncludeNetworkZones', description='Included network zones'),
        }(name='NetworkZones', description='Network zones for conditional access policies'),
        users?: {
          excludeGroups?: [ string ](name='ExcludeGroups', description='Excluded user groups'),
          excludeOrganizationalUnits?: [ string ](name='ExcludeOrganizationalUnits', description='Excluded organizations'),
          excludeUsers?: [ string ](name='ExcludeUsers', description='Excluded Users'),
          includeGroups?: [ string ](name='IncludeGroups', description='Selected user groups'),
          includeOrganizationalUnits?: [ string ](name='IncludeOrganizationalUnits', description='Selected organizations'),
          includeUsers?: [ string ](name='IncludeUsers', description='Selected users'),
        }(name='Users', description='Target users of the conditional access policy'),
      }(name='ConditionsConfig', description='Content of the conditional access policy'),
      createTime?: long(name='CreateTime', description='Creation Time', example='1741857554000'),
      decisionConfig?: {
        activeSessionReuseStatus?: string(name='ActiveSessionReuseStatus', description='Whether session reuse is enabled', example='enabled'),
        effect?: string(name='Effect', description='Decision action of the conditional access policy', example='allow'),
        mfaAuthenticationIntervalSeconds?: long(name='MfaAuthenticationIntervalSeconds', description='Re-authentication interval for conditional access policy (seconds)', example='300'),
        mfaAuthenticationMethods?: [ string ](name='MfaAuthenticationMethods', description='MFA types allowed by the conditional access policy'),
        mfaType?: string(name='MfaType', description='MFA type of the conditional access policy', example='directly_access'),
      }(name='DecisionConfig', description='Action of the conditional access policy'),
      decisionType?: string(name='DecisionType', description='Execution type of the conditional access policy', example='enforcement'),
      description?: string(name='Description', description='Description of the conditional access policy', example='terraform-example'),
      evaluateAt?: string(name='EvaluateAt', description='Execution point of the conditional access policy', example='arn:alibaba:idaas:authn:access:rule:eval_at:after_step1'),
      instanceId?: string(name='InstanceId', description='Instance ID', example='idaas_oynbcyaaejuik6b37eldz4pinu'),
      lastUpdatedTime?: long(name='LastUpdatedTime', description='Last Updated Time', example='1741857554000'),
      priority?: int32(name='Priority', description='Priority', example='10'),
      status?: string(name='Status', description='Enable or disable status of the conditional access policy', example='disabled'),
    }
  ](name='ConditionalAccessPolicies', description='Collection of conditional access policies'),
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListConditionalAccessPoliciesForNetworkZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConditionalAccessPoliciesForNetworkZoneResponseBody(name='body'),
}

/**
  * @description List Conditional Access Policies Associated with Network Zones
  * @param request  the request parameters of ListConditionalAccessPoliciesForNetworkZone  ListConditionalAccessPoliciesForNetworkZoneRequest
  * @return ListConditionalAccessPoliciesForNetworkZoneResponse
 */
async function listConditionalAccessPoliciesForNetworkZone(request: ListConditionalAccessPoliciesForNetworkZoneRequest): ListConditionalAccessPoliciesForNetworkZoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConditionalAccessPoliciesForNetworkZone', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainProxyTokensRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListDomainProxyTokensResponseBody = {
  domainProxyTokens?: [ 
    {
      createTime?: long(name='CreateTime', description='域名代理Token创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxx'),
      domainProxyToken?: string(name='DomainProxyToken', description='域名代理Token。', example='PTxxxxxxxx'),
      domainProxyTokenId?: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lastUsedTime?: long(name='LastUsedTime', description='域名代理Token最近使用时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      status?: string(name='Status', description='token状态，枚举类型：(enabled）启用,（disabled）禁用。', example='enabled'),
      updateTime?: long(name='UpdateTime', description='域名代理Token最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    }
  ](name='DomainProxyTokens'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListDomainProxyTokensResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDomainProxyTokensResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDomainProxyTokens  ListDomainProxyTokensRequest
  * @return ListDomainProxyTokensResponse
 */
async function listDomainProxyTokens(request: ListDomainProxyTokensRequest): ListDomainProxyTokensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomainProxyTokens', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ListDomainsResponseBody = {
  domains?: [ 
    {
      createTime?: long(name='CreateTime', description='域名创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      defaultDomain?: boolean(name='DefaultDomain', description='是否默认域名。true表示实例默认域名，false表示非默认域名', example='false'),
      domain?: string(name='Domain', description='域名。', example='www.example.com'),
      domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxxx'),
      domainType?: string(name='DomainType', description='域名类型。枚举取值:system_init(系统初始化)、user_custom(用户自定义)。', example='system_init'),
      filing?: {
        icpNumber?: string(name='IcpNumber', description='域名关联的备案号, 长度最大限制64。'),
      }(name='Filing', description='域名备案信息。'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockMode?: string(name='LockMode', description='域名锁定状态。枚举取值:unlock(正常)、lockByLicense(因License限制不可用)。', example='unlock'),
      updateTime?: long(name='UpdateTime', description='域名最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    }
  ](name='Domains'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDomains  ListDomainsRequest
  * @return ListDomainsResponse
 */
async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomains', 'POST', '/', 'json', false, 'json', request);
}

model ListEiamInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceIds?: [ string ](name='InstanceIds', description='实例ID列表，支持0到100个', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', description='实例所属Region', example='cn-hangzhou', maxLength=32, position='Query'),
}

model ListEiamInstancesResponseBody = {
  instances?: [ 
    {
      description?: string(name='Description', description='实例描述信息'),
      developerAPIPrivateDomain?: string(name='DeveloperAPIPrivateDomain', description='实例developer私网域名地址', example='eiam-developerapi-cn.vpc-proxy.aliyuncs.com'),
      developerAPIPublicDomain?: string(name='DeveloperAPIPublicDomain', description='实例developer公网域名地址', example='eiam-developerapi.cn-hangzhou.aliyuncs.com'),
      instanceId?: string(name='InstanceId', description='实例id', example='idaas_eypq6ljgyeuwmlw672sulxxxxx'),
      instanceStatus?: string(name='InstanceStatus', description='实例状态，Pending(初始状态)、Creating(创建中)、Running(运行中)、Disabled(禁用)、CreateFailed(创建失败)', example='RUNNING'),
      instanceVersion?: string(name='InstanceVersion', description='实例版本，EIAM2.0/ EIAM1.0', example='EIAM 2.0'),
      openAPIPrivateDomain?: string(name='OpenAPIPrivateDomain', description='实例openApi私网域名地址', example='eiam-cn.vpc-proxy.aliyuncs.com'),
      openAPIPublicDomain?: string(name='OpenAPIPublicDomain', description='实例openApi公网域名地址', example='eiam.cn-hangzhou.aliyuncs.com'),
      SSODomain?: string(name='SSODomain', description='实例域名地址', example='xxxx.aliyunidaas.com'),
      startTime?: long(name='StartTime', description='实例的创建时间', example='1677810869300'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListEiamInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEiamInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEiamInstances  ListEiamInstancesRequest
  * @return ListEiamInstancesResponse
 */
async function listEiamInstances(request: ListEiamInstancesRequest): ListEiamInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEiamInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListEiamRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListEiamRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称', example='华东1（杭州）'),
      regionId?: string(name='RegionId', description='地域ID', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListEiamRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEiamRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEiamRegions  ListEiamRegionsRequest
  * @return ListEiamRegionsResponse
 */
async function listEiamRegions(request: ListEiamRegionsRequest): ListEiamRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEiamRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group.', example='group_external_id', position='Query'),
  groupIds?: [ string ](name='GroupIds', description='The group IDs.', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group. If you specify this parameter, the query is based on an exact match.', example='name_test', position='Query'),
  groupNameStartsWith?: string(name='GroupNameStartsWith', description='The prefix of the group name. If you specify this parameter, the query follows the leftmost matching principle.', example='name', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListGroupsResponseBody = {
  groups?: [ 
    {
      createTime?: long(name='CreateTime', description='The time at which the group was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
      description?: string(name='Description', description='The description of the group.', example='test group'),
      groupExternalId?: string(name='GroupExternalId', description='The external ID of the group, which can be used to associate the group with an external system. By default, the external ID is the group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
      groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
      groupName?: string(name='GroupName', description='The name of the group.', example='group_name'),
      groupSourceId?: string(name='GroupSourceId', description='The source ID of the group. If the group was imported from other services, this value indicates the external source ID. By default, the source ID is the instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupSourceType?: string(name='GroupSourceType', description='The source type of the group. Only build_in may be returned, which indicates that the group was created in IDaaS.', example='build_in'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      updateTime?: long(name='UpdateTime', description='The time at which the group was last updated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1652085686179'),
    }
  ](name='Groups', description='The queried account groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries returned at a time depends on the value of PageSize.', example='100'),
}

model ListGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroups  ListGroupsRequest
  * @return ListGroupsResponse
 */
async function listGroups(request: ListGroupsRequest): ListGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds?: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The page number.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries per page.', example='20', position='Query'),
}

model ListGroupsForApplicationResponseBody = {
  groups?: [ 
    {
      groupId?: string(name='GroupId', description='The group ID.', example='group_miu8e4t4d7i4u7uwezgr54xxxx'),
    }
  ](name='Groups', description='The group IDs.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListGroupsForApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsForApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroupsForApplication  ListGroupsForApplicationRequest
  * @return ListGroupsForApplicationResponse
 */
async function listGroupsForApplication(request: ListGroupsForApplicationRequest): ListGroupsForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupsForUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model ListGroupsForUserResponseBody = {
  groups?: [ 
    {
      groupId?: string(name='GroupId', description='The group ID.', example='group_d6sbsuumeta4h66ec3il7yxxxx'),
      groupMemberRelationSourceId?: string(name='GroupMemberRelationSourceId', description='Account membership source ID', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupMemberRelationSourceType?: string(name='GroupMemberRelationSourceType', description='Account membership source type', example='build_in'),
    }
  ](name='Groups', description='The queried account groups.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries returned at a time depends on the value of PageSize.', example='1000'),
}

model ListGroupsForUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupsForUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroupsForUser  ListGroupsForUserRequest
  * @return ListGroupsForUserResponse
 */
async function listGroupsForUser(request: ListGroupsForUserRequest): ListGroupsForUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupsForUser', 'POST', '/', 'json', false, 'json', request);
}

model ListIdentityProvidersRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='20', position='Query'),
}

model ListIdentityProvidersResponseBody = {
  identityProviders?: [ 
    {
      advancedStatus?: string(name='AdvancedStatus', description='高阶配置能力', example='disabled'),
      authnSourceSupplier?: string(name='AuthnSourceSupplier', description='IDaaS EIAM 对应的认证来源产品，okta or google or azure ad', example='urn:alibaba:idaas:idp:bytedance:lark'),
      authnSourceType?: string(name='AuthnSourceType', description='IDaaS EIAM 认证方式类型 oidc or saml', example='urn:alibaba:idaas:authntype:oidc'),
      authnStatus?: string(name='AuthnStatus', description='IDaaS EIAM 对应IdP是否支持认证', example='disabled'),
      createTime?: long(name='CreateTime', example='1712561597000'),
      description?: string(name='Description', description='IDaaS EIAM 身份提供方描述'),
      identityProviderExternalId?: string(name='IdentityProviderExternalId', description='IDaaS EIAM 身份提供方外部ID', example='test_123'),
      identityProviderId?: string(name='IdentityProviderId', description='IDaaS EIAM 身份提供方ID', example='idp_m5b5wd5s2hpq4t6iaehhXXX'),
      identityProviderName?: string(name='IdentityProviderName', description='IDaaS EIAM 身份提供方名称'),
      identityProviderType?: string(name='IdentityProviderType', description='身份提供方同步类型', example='urn:alibaba:idaas:idp:bytedance:lark:pull'),
      incrementalCallbackStatus?: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据', example='enabled'),
      instanceId?: string(name='InstanceId', description='IDaaS EIAM 实例Id', example='idaas_pbf4dth34l2qb7mydpntXXX'),
      lastStatusCheckJobResult?: string(name='LastStatusCheckJobResult', example='success'),
      lockReason?: string(name='LockReason', description='锁定原因', example='financial'),
      logoUrl?: string(name='LogoUrl', example='https://cdn-cn-hangzhou.aliyunidaas.com/xx/logos/xx'),
      periodicSyncStatus?: string(name='PeriodicSyncStatus', example='disabled'),
      udPullStatus?: string(name='UdPullStatus', description='IDaaS EIAM 是否支持UD同步', example='disabled'),
      udPullTargetScope?: string(name='UdPullTargetScope', description='当支持ud_pullIDaaS侧UD中的范围', example='ou_2buqmxsa3ltyqkjgpwfijurXXX'),
      udPushStatus?: string(name='UdPushStatus', description='同步出能力', example='disabled'),
      updateTime?: long(name='UpdateTime', example='1712561597000'),
    }
  ](name='IdentityProviders'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListIdentityProvidersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIdentityProvidersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIdentityProviders  ListIdentityProvidersRequest
  * @return ListIdentityProvidersResponse
 */
async function listIdentityProviders(request: ListIdentityProvidersRequest): ListIdentityProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIdentityProviders', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancesRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceIds?: [ string ](name='InstanceIds', description='The list of instance IDs.', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running', position='Query'),
}

model ListInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the instance was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1550115455000'),
      defaultEndpoint?: {
        endpoint?: string(name='Endpoint', description='The endpoint of the instance.', example='example-xxx.aliyunidaas.com'),
        status?: string(name='Status', description='The status of the endpoint. Valid values:

*   resolved
*   unresolved', example='resolved'),
      }(name='DefaultEndpoint', description='The default endpoint of the instance.'),
      description?: string(name='Description', description='The description of the instance.'),
      instanceId?: string(name='InstanceId', description='The instance ID.', example='idaas_eypq6ljgyeuwmlw672sulxxxxx'),
      status?: string(name='Status', description='The status of the instance. Valid values:

*   creating
*   running', example='running'),
    }
  ](name='Instances', description='The information of instances.'),
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='100'),
}

model ListInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstances  ListInstancesRequest
  * @return ListInstancesResponse
 */
async function listInstances(request: ListInstancesRequest): ListInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstances', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointAvailableRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListNetworkAccessEndpointAvailableRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='地域名称。', example='华东1（杭州）'),
      regionId?: string(name='RegionId', description='地域ID。', example='cn-hangzhou'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListNetworkAccessEndpointAvailableRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkAccessEndpointAvailableRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkAccessEndpointAvailableRegions  ListNetworkAccessEndpointAvailableRegionsRequest
  * @return ListNetworkAccessEndpointAvailableRegionsResponse
 */
async function listNetworkAccessEndpointAvailableRegions(request: ListNetworkAccessEndpointAvailableRegionsRequest): ListNetworkAccessEndpointAvailableRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpointAvailableRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointAvailableZonesRequest {
  regionId?: string(name='RegionId', position='Host'),
  naeRegionId: string(name='NaeRegionId', description='专属网络端点支持的地域

This parameter is required.', example='cn-hangzhou', position='Query'),
}

model ListNetworkAccessEndpointAvailableZonesResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  zones?: [ 
    {
      localName?: string(name='LocalName', description='可用区名称。', example='华东1（杭州）可用区J'),
      zoneId?: string(name='ZoneId', description='可用区ID。', example='cn-hangzhou-j'),
    }
  ](name='Zones'),
}

model ListNetworkAccessEndpointAvailableZonesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkAccessEndpointAvailableZonesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkAccessEndpointAvailableZones  ListNetworkAccessEndpointAvailableZonesRequest
  * @return ListNetworkAccessEndpointAvailableZonesResponse
 */
async function listNetworkAccessEndpointAvailableZones(request: ListNetworkAccessEndpointAvailableZonesRequest): ListNetworkAccessEndpointAvailableZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpointAvailableZones', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessEndpointsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  maxResults?: long(name='MaxResults', description='分页查询时每页行数。默认值为20，最大值为100。', example='20', position='Query'),
  networkAccessEndpointStatus?: string(name='NetworkAccessEndpointStatus', description='专属网络端点连接的状态。NetworkAccessEndpointType取值为shared时不生效。', example='running', position='Query'),
  networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。取值可选范围：1. private - 专属网络端点；2. shared - 共享网络端点', example='private', position='Query'),
  nextToken?: string(name='NextToken', description='查询凭证（Token），取值为上一次API调用返回的NextToken参数值。', example='NTxxxxxexample', position='Query'),
  vpcId?: string(name='VpcId', description='专属网络端点连接的Vpc ID。NetworkAccessEndpointType取值为shared时不生效。', example='vpc-examplexxx', position='Query'),
  vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域，该地域取值必须在ListNetworkAccessEndpointAvailableRegions接口中返回。NetworkAccessEndpointType取值为shared时不生效。', example='cn-hangzhou', position='Query'),
}

model ListNetworkAccessEndpointsResponseBody = {
  networkAccessEndpoints?: [ 
    {
      createTime?: long(name='CreateTime', description='专属网络端点创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
      networkAccessEndpointName?: string(name='NetworkAccessEndpointName', description='专属网络端点名称。', example='xx业务VPC访问端点'),
      networkAccessEndpointType?: string(name='NetworkAccessEndpointType', description='专属网络端点连接的类型。', example='private'),
      securityGroupId?: string(name='SecurityGroupId', description='专属网络端点使用的安全组ID。', example='sg-examplexxx'),
      status?: string(name='Status', description='专属网络端点状态。', example='running'),
      updateTime?: long(name='UpdateTime', description='专属网络端点最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      vSwitchIds?: [ string ](name='VSwitchIds', description='专属网络端点连接的指定vSwitch列表。', example='vsw-examplexxx'),
      vpcId?: string(name='VpcId', description='专属网络端点连接的VpcID。', example='vpc-examplexxx'),
      vpcRegionId?: string(name='VpcRegionId', description='专属网络端点连接的Vpc所属地域。', example='cn-hangzhou'),
    }
  ](name='NetworkAccessEndpoints'),
  nextToken?: string(name='NextToken', description='本次调用返回的查询凭证（Token）值，用于下一次翻页查询。', example='NTxxxexample'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListNetworkAccessEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkAccessEndpointsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkAccessEndpoints  ListNetworkAccessEndpointsRequest
  * @return ListNetworkAccessEndpointsResponse
 */
async function listNetworkAccessEndpoints(request: ListNetworkAccessEndpointsRequest): ListNetworkAccessEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessEndpoints', 'POST', '/', 'json', false, 'json', request);
}

model ListNetworkAccessPathsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。

This parameter is required.', example='nae_examplexxxx', position='Query'),
}

model ListNetworkAccessPathsResponseBody = {
  networkAccessPaths?: [ 
    {
      createTime?: long(name='CreateTime', description='专属网络端点访问路径创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='专属网络端点ID。', example='nae_examplexxx'),
      networkAccessPathId?: string(name='NetworkAccessPathId', description='专属网络端点访问路径ID。', example='nap_examplexxx'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='专属网络端点访问路径使用的ENI ID。', example='eni-examplexxx'),
      privateIpAddress?: string(name='PrivateIpAddress', description='专属网络端点访问路径使用的ENI私网地址。', example='cn-hangzhou'),
      status?: string(name='Status', description='专属网络端点访问路径状态。', example='running'),
      updateTime?: long(name='UpdateTime', description='专属网络端点访问路径最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
      vSwitchId?: string(name='VSwitchId', description='专属网络端点访问路径的ENI归属的交换机ID。', example='vsw-examplexxx'),
    }
  ](name='NetworkAccessPaths'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListNetworkAccessPathsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNetworkAccessPathsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNetworkAccessPaths  ListNetworkAccessPathsRequest
  * @return ListNetworkAccessPathsResponse
 */
async function listNetworkAccessPaths(request: ListNetworkAccessPathsRequest): ListNetworkAccessPathsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNetworkAccessPaths', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitParentsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='组织ID。

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model ListOrganizationalUnitParentsResponseBody = {
  parents?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='组织ID', example='ou_4lag76zc2km5ssg5vsmm2lznvu'),
      parentId?: string(name='ParentId', description='父组织ID', example='ou_x3beoyepv2ls5iwuge3xhjkwbm'),
    }
  ](name='Parents'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListOrganizationalUnitParentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationalUnitParentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationalUnitParents  ListOrganizationalUnitParentsRequest
  * @return ListOrganizationalUnitParentsResponse
 */
async function listOrganizationalUnitParents(request: ListOrganizationalUnitParentsRequest): ListOrganizationalUnitParentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnitParents', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The IDs of organizational units.', example='[ou_wovwffm62xifdziem7an7xxxxx]', position='Query'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organizational unit.', example='name_001', maxLength=64, position='Query'),
  organizationalUnitNameStartsWith?: string(name='OrganizationalUnitNameStartsWith', description='Organization name, matching left', example='name', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model ListOrganizationalUnitsResponseBody = {
  organizationalUnits?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the organizational unit was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      description?: string(name='Description', description='The description of the organizational unit.', example='Test organizational unit'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      leaf?: boolean(name='Leaf', description='Indicates whether the node is a leaf node.', example='false'),
      organizationalUnitExternalId?: string(name='OrganizationalUnitExternalId', description='The external ID of the organizational unit. The external ID can be used by external data to map the data of the organizational unit in IDaaS EIAM. By default, the external ID is the organizational unit ID.

For organizational units with the same source type and source ID, each organizational unit has a unique external ID.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      organizationalUnitName?: string(name='OrganizationalUnitName', description='组织名称。', example='test_organizationalUnit_name'),
      organizationalUnitSourceId?: string(name='OrganizationalUnitSourceId', description='The source ID of the organizational unit.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      organizationalUnitSourceType?: string(name='OrganizationalUnitSourceType', description='The source type of the organizational unit. Valid values:

*   build_in: The organizational unit was created in IDaaS.
*   ding_talk: The organizational unit was imported from DingTalk.
*   ad: The organizational unit was imported from Microsoft Active Directory (AD).
*   ldap: The organizational unit was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      parentId?: string(name='ParentId', description='The ID of the parent organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx'),
      updateTime?: long(name='UpdateTime', description='The time when the organizational unit was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
    }
  ](name='OrganizationalUnits', description='The list of data objects of organizational units.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The number of entries in the list.', example='100'),
}

model ListOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationalUnits  ListOrganizationalUnitsRequest
  * @return ListOrganizationalUnitsResponse
 */
async function listOrganizationalUnits(request: ListOrganizationalUnitsRequest): ListOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationalUnitsForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to query.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations that are allowed to access the application. You can query a maximum of 100 organization IDs at a time.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
}

model ListOrganizationalUnitsForApplicationResponseBody = {
  organizationalUnits?: [ 
    {
      organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organization that is allowed to access the application.', example='ou_wovwffm62xifdziem7an7xxxxx'),
    }
  ](name='OrganizationalUnits', description='The IDs of the organizations that are allowed to access the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of the returned entries.', example='100'),
}

model ListOrganizationalUnitsForApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationalUnitsForApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationalUnitsForApplication  ListOrganizationalUnitsForApplicationRequest
  * @return ListOrganizationalUnitsForApplicationResponse
 */
async function listOrganizationalUnitsForApplication(request: ListOrganizationalUnitsForApplicationRequest): ListOrganizationalUnitsForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationalUnitsForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model ListRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='eiam.cn-hangzhou.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Regions', description='The supported regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListSynchronizationJobsRequest {
  regionId?: string(name='RegionId', position='Host'),
  direction?: string(name='Direction', description='同步方向[ingress,egress]', example='ingress', maxLength=64, position='Query'),
  endTime?: long(name='EndTime', description='同步结束时间', example='1649830226000', position='Query'),
  filters?: [ 
    {
      key?: string(name='Key'),
      values?: [ string ](name='Values'),
    }
  ](name='Filters', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  maxResults?: long(name='MaxResults', description='分页查询时每页行数。默认值为20，最大值为100。', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='查询凭证（Token），取值为上一次API调用返回的NextToken参数值。', example='NTxxxxxexample', position='Query'),
  pageNumber?: long(name='PageNumber', description='当前查询的列表页码，默认为1。', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='当前查询的列表页码，默认为20。', example='10', position='Query'),
  startTime?: long(name='StartTime', description='同步开始时间', example='1649830226000', position='Query'),
  status?: string(name='Status', description='同步状态[pending,running,suspending,failed,partial_success,success]', example='running', maxLength=64, position='Query'),
  targetIds?: [ string ](name='TargetIds', description='同步目标ID', example='target_001', position='Query'),
  targetType?: string(name='TargetType', description='同步目标类型[identity_provider,organizational_unit,application,user]', example='identity_provider', position='Query'),
}

model ListSynchronizationJobsResponseBody = {
  nextToken?: string(name='NextToken', description='本次调用返回的查询凭证（Token）值，用于下一次翻页查询。', example='NTxxxexample'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  synchronizationJobs?: [ 
    {
      description?: string(name='Description', example='描述', maxLength=128),
      direction?: string(name='Direction', description='同步任务方向', example='ingress'),
      endTime?: long(name='EndTime', description='同步结束时间', example='1649830226000'),
      result?: {
        errorCode?: string(name='ErrorCode', description='同步结果错误码', example='ErrorCodeNotFound'),
        errorMessage?: string(name='ErrorMessage', description='同步结果错误信息描述'),
        groupMemberStatistics?: {
          binded?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Binded', description='绑定结果统计'),
          created?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Created', description='创建结果统计'),
          deleted?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Deleted', description='删除结果统计'),
          pushed?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Pushed', description='推送结果统计'),
          same?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Same', description='相同结果统计'),
          updated?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Updated', description='更新结果统计'),
        }(name='GroupMemberStatistics', description='组成员同步结果统计'),
        groupStatistics?: {
          binded?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Binded', description='绑定结果统计'),
          created?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Created', description='创建结果统计'),
          deleted?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Deleted', description='删除结果统计'),
          pushed?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Pushed', description='推送结果统计'),
          same?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Same', description='相同结果统计'),
          updated?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Updated', description='更新结果统计'),
        }(name='GroupStatistics', description='组同步结果统计'),
        organizationalUnitStatistics?: {
          binded?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Binded', description='绑定结果统计'),
          created?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Created', description='创建结果统计'),
          deleted?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Deleted', description='删除结果统计'),
          pushed?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Pushed', description='推送结果统计'),
          same?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Same', description='相同结果统计'),
          updated?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Updated', description='更新结果统计'),
        }(name='OrganizationalUnitStatistics', description='组织同步结果统计'),
        userStatistics?: {
          binded?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Binded', description='绑定结果统计'),
          created?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Created', description='创建结果统计'),
          deleted?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Deleted', description='删除结果统计'),
          exported?: {
            failed?: long(name='Failed'),
            skipped?: long(name='Skipped'),
            success?: long(name='Success'),
            total?: long(name='Total'),
          }(name='Exported'),
          pushed?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Pushed', description='推送结果统计'),
          same?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Same', description='相同结果统计'),
          updated?: {
            failed?: long(name='Failed', description='失败数目', example='1'),
            skipped?: long(name='Skipped', description='跳过数目', example='1'),
            success?: long(name='Success', description='成功数目', example='1'),
            total?: long(name='Total', description='总共数目', example='3'),
          }(name='Updated', description='更新结果统计'),
        }(name='UserStatistics', description='用户同步结果统计'),
      }(name='Result', description='同步任务结果'),
      startTime?: long(name='StartTime', description='同步开始时间', example='1649830226000'),
      status?: string(name='Status', description='同步任务状态', example='success'),
      synchronizationJobId?: string(name='SynchronizationJobId', description='同步任务ID', example='sync_0000347vjovtcf41li0fgsd98gn24q9njxxxxx'),
      targetId?: string(name='TargetId', description='同步目标ID', example='idp_my664lwkhpicbyzirog3xxxxx'),
      targetType?: string(name='TargetType', description='同步目标类型', example='identity_provider'),
      triggerType?: string(name='TriggerType', description='同步触发类型', example='auto'),
    }
  ](name='SynchronizationJobs'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListSynchronizationJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSynchronizationJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSynchronizationJobs  ListSynchronizationJobsRequest
  * @return ListSynchronizationJobsResponse
 */
async function listSynchronizationJobs(request: ListSynchronizationJobsRequest): ListSynchronizationJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSynchronizationJobs', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  displayNameStartsWith?: string(name='DisplayNameStartsWith', description='Displayname', example='name_001', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId?: string(name='OrganizationalUnitId', description='The ID of the organizational unit.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx', maxLength=32, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86', maxLength=32, position='Query'),
  status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enable', maxLength=32, position='Query'),
  userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM.

For accounts with the same source type and source ID, each account has a unique external ID.', example='id_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userIds?: [ string ](name='UserIds', description='User ID set', position='Query'),
  userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in', maxLength=32, position='Query'),
  usernameStartsWith?: string(name='UsernameStartsWith', description='Username', example='name_001', maxLength=64, position='Query'),
}

model ListUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The number of entries in the list.', example='100'),
  users?: [ 
    {
      accountExpireTime?: long(name='AccountExpireTime', description='The time when the account expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      createTime?: long(name='CreateTime', description='The time when the account was created. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      description?: string(name='Description', description='The description of the account.', example='Test account'),
      displayName?: string(name='DisplayName', description='The display name of the account.', example='display_name001'),
      email?: string(name='Email', description='The email address of the user who owns the account.', example='user@example.com'),
      emailVerified?: boolean(name='EmailVerified', description='Indicates whether the email address has been verified. A value of true indicates that the email address has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the email address has not been verified.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the instance', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      lockExpireTime?: long(name='LockExpireTime', description='The time when the account lock expires. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      passwordExpireTime?: long(name='PasswordExpireTime', description='Time When Password Expires', example='1652085686179'),
      passwordSet?: boolean(name='PasswordSet', description='Indicates whether a password is set.', example='false'),
      phoneNumber?: string(name='PhoneNumber', description='The mobile number of the user who owns the account.', example='156xxxxxxx'),
      phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Indicates whether the mobile number has been verified. A value of true indicates that the mobile number has been verified by the user or has been set to the verified status by the administrator. A value of false indicates that the mobile number has not been verified.', example='true'),
      phoneRegion?: string(name='PhoneRegion', description='The country code of the mobile number. For example, the country code of China is 86 without 00 or +.', example='86'),
      registerTime?: long(name='RegisterTime', description='The time when the account was registered. This value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      status?: string(name='Status', description='The status of the account. Valid values:

*   enabled: The account is enabled.
*   disabled: The account is disabled.', example='enabled'),
      updateTime?: long(name='UpdateTime', description='The time when the account was last updated. The value is a UNIX timestamp. Unit: milliseconds.', example='1652085686179'),
      userExternalId?: string(name='UserExternalId', description='The external ID of the account. The external ID can be used by external data to map the data of the account in IDaaS EIAM. By default, the external ID is the account ID.

For accounts with the same source type and source ID, each account has a unique external ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
      userSourceId?: string(name='UserSourceId', description='The source ID of the account.

If the account was created in IDaaS, its source ID is the ID of the IDaaS instance. If the account was imported, its source ID is the enterprise ID in the source. For example, if the account was imported from DingTalk, its source ID is the corpId value of the enterprise in DingTalk.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      userSourceType?: string(name='UserSourceType', description='The source type of the account. Valid values:

*   build_in: The account was created in IDaaS.
*   ding_talk: The account was imported from DingTalk.
*   ad: The account was imported from Microsoft Active Directory (AD).
*   ldap: The account was imported from a Lightweight Directory Access Protocol (LDAP) service.', example='build_in'),
      username?: string(name='Username', description='The username of the account.', example='name001'),
    }
  ](name='Users', description='The list of data objects of accounts.'),
}

model ListUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsers  ListUsersRequest
  * @return ListUsersResponse
 */
async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForApplicationRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page.', example='20', position='Query'),
  userIds?: [ string ](name='UserIds', description='The IDs of the accounts. You can query a maximum of 100 accounts at a time.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model ListUsersForApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='100'),
  users?: [ 
    {
      userId?: string(name='UserId', description='The ID of the account.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Users', description='The IDs of the accounts.'),
}

model ListUsersForApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersForApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersForApplication  ListUsersForApplicationRequest
  * @return ListUsersForApplicationResponse
 */
async function listUsersForApplication(request: ListUsersForApplicationRequest): ListUsersForApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForApplication', 'POST', '/', 'json', false, 'json', request);
}

model ListUsersForGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  pageNumber?: long(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 100.', example='20', position='Query'),
  userIds?: [ string ](name='UserIds', description='The account IDs. A maximum of 100 accounts can be queried.', example='[ou_001]', position='Query'),
}

model ListUsersForGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned. The maximum number of entries that can be returned per page is specified by PageSize.', example='1000'),
  users?: [ 
    {
      groupMemberRelationSourceId?: string(name='GroupMemberRelationSourceId', description='Account membership source id', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
      groupMemberRelationSourceType?: string(name='GroupMemberRelationSourceType', description='Account membership source type', example='build_in'),
      userId?: string(name='UserId', description='The account ID.', example='user_d6sbsuumeta4h66ec3il7yxxxx'),
    }
  ](name='Users', description='The information about accounts.'),
}

model ListUsersForGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUsersForGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUsersForGroup  ListUsersForGroupRequest
  * @return ListUsersForGroupResponse
 */
async function listUsersForGroup(request: ListUsersForGroupRequest): ListUsersForGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersForGroup', 'POST', '/', 'json', false, 'json', request);
}

model ObtainApplicationClientSecretRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application whose client key you want to query.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  secretId: string(name='SecretId', description='The client key ID of the application.

This parameter is required.', example='sci_k52x2ru63rlkflina5utgkxxxx', maxLength=64, position='Query'),
}

model ObtainApplicationClientSecretResponseBody = {
  applicationClientSecret?: {
    applicationId?: string(name='ApplicationId', description='The ID of the application whose client key you want to query.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientId?: string(name='ClientId', description='The client ID of the application.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx'),
    clientSecret?: string(name='ClientSecret', description='The client key secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lastUsedTime?: long(name='LastUsedTime', description='The time when the client key was last used. The value is a UNIX timestamp. Unit: milliseconds.', example='1649830226000'),
    secretId?: string(name='SecretId', description='The client key ID of the application.', example='sci_k52x2ru63rlkflina5utgkxxxx'),
    status?: string(name='Status', description='The status of the client key. Valid values:

*   Enabled: The client key is enabled.
*   Disabled: The client key is disabled.', example='enabled'),
  }(name='ApplicationClientSecret', description='The information about the client key.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ObtainApplicationClientSecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ObtainApplicationClientSecretResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ObtainApplicationClientSecret  ObtainApplicationClientSecretRequest
  * @return ObtainApplicationClientSecretResponse
 */
async function obtainApplicationClientSecret(request: ObtainApplicationClientSecretRequest): ObtainApplicationClientSecretResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ObtainApplicationClientSecret', 'POST', '/', 'json', false, 'json', request);
}

model ObtainDomainProxyTokenRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  domainProxyTokenId: string(name='DomainProxyTokenId', description='域名代理Token ID。

This parameter is required.', example='pt_examplexxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model ObtainDomainProxyTokenResponseBody = {
  domainProxyToken?: {
    createTime?: long(name='CreateTime', description='域名代理Token创建时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    domainId?: string(name='DomainId', description='域名ID。', example='dm_examplexxxx'),
    domainProxyToken?: string(name='DomainProxyToken', description='域名代理Token。', example='PTxxxxxxxx'),
    domainProxyTokenId?: string(name='DomainProxyTokenId', description='域名代理Token ID。', example='pt_examplexxxx'),
    instanceId?: string(name='InstanceId', description='实例ID。', example='idaas_ue2jvisn35ea5lmthk267xxxxx'),
    lastUsedTime?: long(name='LastUsedTime', description='域名代理Token最近使用时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
    status?: string(name='Status', description='token状态，枚举类型：(enabled）启用,（disabled）禁用。', example='enabled'),
    updateTime?: long(name='UpdateTime', description='域名代理Token最近更新时间，Unix时间戳格式，单位为毫秒。', example='1649830226000'),
  }(name='DomainProxyToken'),
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model ObtainDomainProxyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ObtainDomainProxyTokenResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ObtainDomainProxyToken  ObtainDomainProxyTokenRequest
  * @return ObtainDomainProxyTokenResponse
 */
async function obtainDomainProxyToken(request: ObtainDomainProxyTokenRequest): ObtainDomainProxyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ObtainDomainProxyToken', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUserFromOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The organization IDs. You can remove an account from a maximum of 100 organizations.

This parameter is required.', position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model RemoveUserFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RemoveUserFromOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUserFromOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUserFromOrganizationalUnits  RemoveUserFromOrganizationalUnitsRequest
  * @return RemoveUserFromOrganizationalUnitsResponse
 */
async function removeUserFromOrganizationalUnits(request: RemoveUserFromOrganizationalUnitsRequest): RemoveUserFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUserFromOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model RemoveUsersFromGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The account IDs. A maximum of 100 accounts can be removed from a group.

This parameter is required.', example='[ou_001]', position='Query'),
}

model RemoveUsersFromGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RemoveUsersFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveUsersFromGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveUsersFromGroup  RemoveUsersFromGroupRequest
  * @return RemoveUsersFromGroupResponse
 */
async function removeUsersFromGroup(request: RemoveUsersFromGroupRequest): RemoveUsersFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveUsersFromGroup', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromGroupsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The application ID.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds: [ string ](name='GroupIds', description='The group IDs. You can specify up to 100 group IDs at a time.

This parameter is required.', example='group_miu8e4t4d7i4u7uwezgr54xxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model RevokeApplicationFromGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeApplicationFromGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeApplicationFromGroups  RevokeApplicationFromGroupsRequest
  * @return RevokeApplicationFromGroupsResponse
 */
async function revokeApplicationFromGroups(request: RevokeApplicationFromGroupsRequest): RevokeApplicationFromGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromGroups', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromOrganizationalUnitsRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds: [ string ](name='OrganizationalUnitIds', description='The IDs of the organizations. You can revoke the access permissions from a maximum of 100 organizations at a time.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', position='Query'),
}

model RevokeApplicationFromOrganizationalUnitsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromOrganizationalUnitsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeApplicationFromOrganizationalUnitsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeApplicationFromOrganizationalUnits  RevokeApplicationFromOrganizationalUnitsRequest
  * @return RevokeApplicationFromOrganizationalUnitsResponse
 */
async function revokeApplicationFromOrganizationalUnits(request: RevokeApplicationFromOrganizationalUnitsRequest): RevokeApplicationFromOrganizationalUnitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromOrganizationalUnits', 'POST', '/', 'json', false, 'json', request);
}

model RevokeApplicationFromUsersRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userIds: [ string ](name='UserIds', description='The IDs of the accounts. You can revoke the access permissions from a maximum of 100 accounts at a time.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
}

model RevokeApplicationFromUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model RevokeApplicationFromUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeApplicationFromUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RevokeApplicationFromUsers  RevokeApplicationFromUsersRequest
  * @return RevokeApplicationFromUsersResponse
 */
async function revokeApplicationFromUsers(request: RevokeApplicationFromUsersRequest): RevokeApplicationFromUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeApplicationFromUsers', 'POST', '/', 'json', false, 'json', request);
}

model RunSynchronizationJobRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', example='描述', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordInitialization?: boolean(name='PasswordInitialization', position='Query'),
  synchronizationScopeConfig?: {
    groupIds?: [ string ](name='GroupIds'),
    organizationalUnitIds?: [ string ](name='OrganizationalUnitIds'),
    userIds?: [ string ](name='UserIds'),
  }(name='SynchronizationScopeConfig', position='Query'),
  targetId: string(name='TargetId', description='同步目标ID

This parameter is required.', example='idp_my664lwkhpicbyzirog3ngxxxxx', maxLength=128, position='Query'),
  targetType: string(name='TargetType', description='同步目标类型

This parameter is required.', example='identity_provider', position='Query'),
  userIdentityTypes?: [ string ](name='UserIdentityTypes', position='Query'),
}

model RunSynchronizationJobResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
  synchronizationJobId?: string(name='SynchronizationJobId', example='sync_0000347vjovtcf41li0fgsd98gn24q9nj9xxxxx'),
}

model RunSynchronizationJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RunSynchronizationJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RunSynchronizationJob  RunSynchronizationJobRequest
  * @return RunSynchronizationJobResponse
 */
async function runSynchronizationJob(request: RunSynchronizationJobRequest): RunSynchronizationJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunSynchronizationJob', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationGrantScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to configure.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  grantScopes?: [ string ](name='GrantScopes', description='The permissions of the Developer API feature.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model SetApplicationGrantScopeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationGrantScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApplicationGrantScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetApplicationGrantScope  SetApplicationGrantScopeRequest
  * @return SetApplicationGrantScopeResponse
 */
async function setApplicationGrantScope(request: SetApplicationGrantScopeRequest): SetApplicationGrantScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationGrantScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  callbackProvisioningConfig?: {
    callbackUrl?: string(name='CallbackUrl', description='The URL that the application uses to receive IDaaS event callbacks.', example='https://example.com/event/callback'),
    encryptKey?: string(name='EncryptKey', description='The symmetric key for IDaaS event callbacks. The key is an AES-256 encryption key in the HEX format.', example='ad3b248**************************b3561a73d7'),
    encryptRequired?: boolean(name='EncryptRequired', description='Specifies whether to encrypt IDaaS event callback messages. Valid values:

*   true: encrypt the messages.
*   false: transmit the messages in plaintext.', example='true'),
    listenEventScopes?: [ string ](name='ListenEventScopes', description='The list of types of IDaaS event callback messages that are supported by the listener.'),
  }(name='CallbackProvisioningConfig', description='The configuration of event callback synchronization. This parameter is required when the ProvisionProtocolType parameter is set to idaas_callback.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  provisionPassword?: boolean(name='ProvisionPassword', description='Specifies whether to synchronize the password in IDaaS user event callbacks. Valid values:

*   true: synchronize the password.
*   false: do not synchronize the password.', example='true', position='Query'),
  provisionProtocolType: string(name='ProvisionProtocolType', description='The synchronization protocol type of the application. Valid values:

*   idaas_callback: custom event callback protocol of IDaaS.
*   scim2: System for Cross-domain Identity Management (SCIM) protocol.

This parameter is required.', example='idaas_callback', maxLength=64, position='Query'),
  scimProvisioningConfig?: {
    authnConfiguration?: {
      authnMode?: string(name='AuthnMode', description='The authentication mode of the SCIM protocol. Valid value:

*   oauth2: OAuth2.0 mode.', example='oauth2'),
      authnParam?: {
        accessToken?: string(name='AccessToken', description='The access token. If the GrantType parameter is set to bearer_token, you can set this parameter.', example='k52x2ru63rlkflina5utgkxxxx'),
        authnMethod?: string(name='AuthnMethod', description='The authentication mode of the SCIM protocol. Valid values:

*   client_secret_basic: The client secret is passed in the request header.
*   client_secret_post: The client secret is passed in the request body.', example='client_secret_basic'),
        clientId?: string(name='ClientId', description='The client ID of the application.', example='mkv7rgt4d7i4u7zqtzev2mxxxx'),
        clientSecret?: string(name='ClientSecret', description='The client secret of the application.', example='CSEHDcHcrUKHw1CuxkJEHPveWRXBGqVqRsxxxx'),
        tokenEndpoint?: string(name='TokenEndpoint', description='The token endpoint.', example='https://www.example.com/oauth/token'),
      }(name='AuthnParam', description='The configuration parameters related to authorization.

*   If the GrantType parameter is set to client_credentials, you can set the configuration parameters ClientId, ClientSecret, and AuthnMethod.
*   If the GrantType parameter is set to bearer_token, you can set the configuration parameter AccessToken.'),
      grantType?: string(name='GrantType', description='The grant type of the SCIM protocol. Valid values:

*   client_credentials: client mode.
*   bearer_token: key mode.', example='bearer_token'),
    }(name='AuthnConfiguration', description='The configuration parameters related to SCIM-based synchronization.'),
    fullPushScopes?: [ string ](name='FullPushScopes', description='The full synchronization scope of the SCIM protocol. Valid value:

*   urn:alibaba:idaas:app:scim:User:PUSH: full account data synchronization.'),
    provisioningActions?: [ string ](name='ProvisioningActions', description='The resource operations of the SCIM protocol. Valid values:

*   urn:alibaba:idaas:app:scim:User:CREATE: account creation.
*   urn:alibaba:idaas:app:scim:User:UPDATE: account update.
*   urn:alibaba:idaas:app:scim:User:DELETE: account deletion.'),
    scimBaseUrl?: string(name='ScimBaseUrl', description='The base URL that the application uses to receive the SCIM protocol for IDaaS synchronization.', example='https://example.com/scim'),
  }(name='ScimProvisioningConfig', description='The configuration of SCIM-based IDaaS synchronization. This parameter is required when the ProvisionProtocolType parameter is set to scim2.', position='Query'),
}

model SetApplicationProvisioningConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApplicationProvisioningConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetApplicationProvisioningConfig  SetApplicationProvisioningConfigRequest
  * @return SetApplicationProvisioningConfigResponse
 */
async function setApplicationProvisioningConfig(request: SetApplicationProvisioningConfigRequest): SetApplicationProvisioningConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationProvisioningScopeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  groupIds?: [ string ](name='GroupIds', description='List of groups that are authorized to be synchronized from', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitIds?: [ string ](name='OrganizationalUnitIds', description='The list of organizational units that are authorized for account synchronization.', position='Query'),
}

model SetApplicationProvisioningScopeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationProvisioningScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApplicationProvisioningScopeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetApplicationProvisioningScope  SetApplicationProvisioningScopeRequest
  * @return SetApplicationProvisioningScopeResponse
 */
async function setApplicationProvisioningScope(request: SetApplicationProvisioningScopeRequest): SetApplicationProvisioningScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationProvisioningScope', 'POST', '/', 'json', false, 'json', request);
}

model SetApplicationSsoConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  initLoginType?: string(name='InitLoginType', description='The initial SSO method. Valid values:

*   only_app_init_sso: Only application-initiated SSO is allowed. This method is selected by default when the SSO protocol of the application is an OIDC protocol. If this method is selected when the SSO protocol of the application is SAML, the InitLoginUrl parameter is required.
*   idaas_or_app_init_sso: IDaaS-initiated SSO and application-initiated SSO are allowed. This method is selected by default when the SSO protocol of the application is SAML. If this method is selected when the SSO protocol of the application is an OIDC protocol, the InitLoginUrl parameter is required.', example='only_app_init_sso', position='Query'),
  initLoginUrl?: string(name='InitLoginUrl', description='The initial webhook URL of SSO. This parameter is required when the SSO protocol of the application is an OIDC protocol and the InitLoginType parameters is set to idaas_or_app_init_sso or when the SSO protocol of the application is SAML and the InitLoginType parameter is set to only_app_init_sso.', example='http://127.0.0.1:8000/start_login?enterprise_code=ABCDEF', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  oidcSsoConfig?: {
    accessTokenEffectiveTime?: long(name='AccessTokenEffectiveTime', description='The validity period of the issued access token. Unit: seconds. Default value: 1200.', example='1200'),
    codeEffectiveTime?: long(name='CodeEffectiveTime', description='The validity period of the issued code. Unit: seconds. Default value: 60.', example='60'),
    customClaims?: [ 
      {
        claimName?: string(name='ClaimName', description='The claim name.', example='"Role"'),
        claimValueExpression?: string(name='ClaimValueExpression', description='The expression that is used to generate the value of the claim.', example='user.dict.applicationRole'),
      }
    ](name='CustomClaims', description='The custom claims that are returned for the ID token.'),
    grantScopes?: [ string ](name='GrantScopes', description='The scopes of user attributes that can be returned for the UserInfo endpoint or ID token.', example='profile，email'),
    grantTypes?: [ string ](name='GrantTypes', description='The list of grant types that are supported for OIDC protocols.', example='authorization_code'),
    idTokenEffectiveTime?: long(name='IdTokenEffectiveTime', description='The validity period of the issued ID token. Unit: seconds. Default value: 300.', example='300'),
    passwordAuthenticationSourceId?: string(name='PasswordAuthenticationSourceId', description='The ID of the identity authentication source in password mode. Specify this parameter only when the value of the GrantTypes parameter includes the password mode.', example='ia_password'),
    passwordTotpMfaRequired?: boolean(name='PasswordTotpMfaRequired', description='Specifies whether time-based one-time password (TOTP) authentication is required in password mode. Specify this parameter only when the value of the GrantTypes parameter includes the password mode.', example='true'),
    pkceChallengeMethods?: [ string ](name='PkceChallengeMethods', description='The algorithms that are used to calculate the code challenge for PKCE.', example='S256'),
    pkceRequired?: boolean(name='PkceRequired', description='Specifies whether the SSO of the application requires Proof Key for Code Exchange (PKCE) (RFC 7636).', example='true'),
    postLogoutRedirectUris?: [ string ](name='PostLogoutRedirectUris', description='The list of logout redirect URIs that are supported by the application.'),
    redirectUris?: [ string ](name='RedirectUris', description='The list of redirect URIs that are supported by the application.'),
    refreshTokenEffective?: long(name='RefreshTokenEffective', description='The validity period of the issued refresh token. Unit: seconds. Default value: 86400.', example='86400'),
    responseTypes?: [ string ](name='ResponseTypes', description='The response types that are supported by the application. Specify this parameter when the value of the GrantTypes parameter includes the implicit mode.', example='token id_token'),
    subjectIdExpression?: string(name='SubjectIdExpression', description='The custom expression that is used to generate the subject ID returned for the ID token.', example='user.userid', maxLength=128),
  }(name='OidcSsoConfig', description='The Open ID Connect (OIDC)-based SSO configuration attributes of the application.', position='Query'),
  samlSsoConfig?: {
    assertionSigned?: boolean(name='AssertionSigned', description='Specifies whether to calculate the signature for the assertion. You cannot set ResponseSigned and AssertionSigned to false at the same time.

*   true
*   false', example='true'),
    attributeStatements?: [ 
      {
        attributeName?: string(name='AttributeName', description='The attribute name.', example='https://www.aliyun.com/SAML-Role/Attributes/RoleSessionName'),
        attributeValueExpression?: string(name='AttributeValueExpression', description='The expression that is used to generate the value of the attribute.', example='user.username'),
      }
    ](name='AttributeStatements', description='The additional user attributes in the SAML assertion.'),
    defaultRelayState?: string(name='DefaultRelayState', description='The default value of the RelayState attribute. If the SSO request is initiated in EIAM, the RelayState attribute in the SAML response is set to this default value.', example='https://home.console.aliyun.com'),
    idPEntityId?: string(name='IdPEntityId'),
    nameIdFormat?: string(name='NameIdFormat', description='The Format attribute of the NameID element in the SAML assertion. Valid values:

*   urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified: No format is specified. How to resolve the NameID element depends on the application.
*   urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress: The NameID element must be an email address.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:persistent: The NameID element must be persistent.
*   urn:oasis:names:tc:SAML:2.0:nameid-format:transient: The NameID element must be transient.', example='urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified'),
    nameIdValueExpression?: string(name='NameIdValueExpression', description='The expression that is used to generate the value of NameID in the SAML assertion.', example='user.email'),
    optionalRelayStates?: [ 
      {
        displayName?: string(name='DisplayName', maxLength=64),
        relayState?: string(name='RelayState', maxLength=256),
      }
    ](name='OptionalRelayStates'),
    responseSigned?: boolean(name='ResponseSigned', description='Specifies whether to calculate the signature for the response. You cannot set ResponseSigned and AssertionSigned to false at the same time.

*   true
*   false', example='true'),
    signatureAlgorithm?: string(name='SignatureAlgorithm', description='The algorithm that is used to calculate the signature for the SAML assertion.

Enumeration value:

*   RSA-SHA256

    <!-- -->

    :

    <!-- -->

    the Rivest-Shamir-Adleman (RSA)-Secure Hash Algorithm 256 (SHA-256) algorithm

    <!-- -->

    .', example='RSA-SHA256'),
    spEntityId?: string(name='SpEntityId', description='The entity ID of the application in SAML.', example='urn:alibaba:cloudcomputing'),
    spSsoAcsUrl?: string(name='SpSsoAcsUrl', description='The Assertion Consumer Service (ACS) URL of the application in SAML.', example='https://signin.aliyun.com/saml-role/sso'),
  }(name='SamlSsoConfig', description='The Security Assertion Markup Language (SAML)-based single sign-on (SSO) configuration attributes of the application.', position='Query'),
}

model SetApplicationSsoConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetApplicationSsoConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApplicationSsoConfigResponseBody(name='body'),
}

/**
  * @description In IDaaS EIAM, the application management feature supports multiple SSO protocols for applications, including SAML 2.0 and OIDC protocols. Each application supports only one protocol, and the protocol cannot be changed after the application is created. You can specify the SSO configuration attributes of an application based on the supported SSO protocol.
  * @param request  the request parameters of SetApplicationSsoConfig  SetApplicationSsoConfigRequest
  * @return SetApplicationSsoConfigResponse
 */
async function setApplicationSsoConfig(request: SetApplicationSsoConfigRequest): SetApplicationSsoConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetApplicationSsoConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDefaultDomainRequest {
  regionId?: string(name='RegionId', position='Host'),
  domainId: string(name='DomainId', description='域名ID。

This parameter is required.', example='dm_examplexxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model SetDefaultDomainResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetDefaultDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultDomain  SetDefaultDomainRequest
  * @return SetDefaultDomainResponse
 */
async function setDefaultDomain(request: SetDefaultDomainRequest): SetDefaultDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultDomain', 'POST', '/', 'json', false, 'json', request);
}

model SetForgetPasswordConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  authenticationChannels?: [ string ](name='AuthenticationChannels', description='The authentication channels. Valid values: email and sms.', example='email', maxLength=32, position='Query'),
  forgetPasswordStatus: string(name='ForgetPasswordStatus', description='The status of the forgot password feature. Valid values: enabled and disabled.

This parameter is required.', example='enabled', maxLength=32, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='eiam-111ccc1111', maxLength=64, position='Query'),
}

model SetForgetPasswordConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetForgetPasswordConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetForgetPasswordConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetForgetPasswordConfiguration  SetForgetPasswordConfigurationRequest
  * @return SetForgetPasswordConfigurationResponse
 */
async function setForgetPasswordConfiguration(request: SetForgetPasswordConfigurationRequest): SetForgetPasswordConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetForgetPasswordConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetIdentityProviderUdPullConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupSyncStatus?: string(name='GroupSyncStatus', description='组同步状态', example='disabled', maxLength=32, position='Query'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  incrementalCallbackStatus: string(name='IncrementalCallbackStatus', description='增量回调状态，是否处理来自IdP的增量回调数据

This parameter is required.', example='disabled', maxLength=32, position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  ldapUdPullConfig?: {
    groupMemberAttributeName?: string(name='GroupMemberAttributeName', description='组成员标识', example='member'),
    groupObjectClass?: string(name='GroupObjectClass', description='组objectClass', example='group'),
    groupObjectClassCustomFilter?: string(name='GroupObjectClassCustomFilter', description='组自定义Filter', example='(|(cn=test)(group=test@test.com))'),
    organizationUnitObjectClass?: string(name='OrganizationUnitObjectClass', description='组织ObjectClass', example='organizationUnit,top'),
    userObjectClass?: string(name='UserObjectClass', description='用户ObjectClass', example='userPrincipalName, mail'),
    userObjectClassCustomFilter?: string(name='UserObjectClassCustomFilter', description='用户自定义Filter', example='(|(cn=test)(mail=test@test.com))'),
  }(name='LdapUdPullConfig', description='ldap同步侧相关配置信息', position='Query'),
  periodicSyncConfig?: {
    periodicSyncCron?: string(name='PeriodicSyncCron', example='0 45 1 * * ?'),
    periodicSyncTimes?: [ int32 ](name='PeriodicSyncTimes'),
    periodicSyncType?: string(name='PeriodicSyncType', example='cron'),
  }(name='PeriodicSyncConfig', position='Query'),
  periodicSyncStatus?: string(name='PeriodicSyncStatus', example='disabled', maxLength=32, position='Query'),
  pullProtectedRule?: {
    groupDeletedThreshold?: int32(name='GroupDeletedThreshold', description='同步保护规则-删除组数量', example='10'),
    organizationalUnitDeletedThreshold?: int32(name='OrganizationalUnitDeletedThreshold', description='钉钉一方应用同步保护规则-删除组织数量', example='10'),
    userDeletedThreshold?: int32(name='UserDeletedThreshold', description='钉钉一方应用同步保护规则-删除账户数量', example='30'),
  }(name='PullProtectedRule', description='同步入保护规则,根据IdP的type做解析', position='Query'),
  udSyncScopeConfig?: {
    sourceScopes?: [ string ](name='SourceScopes', description='同步来源节点'),
    targetScope?: string(name='TargetScope', description='同步目标节点', example='ou_asdaq1addsxzdq1XXX'),
  }(name='UdSyncScopeConfig', description='同步入配置信息', position='Query'),
}

model SetIdentityProviderUdPullConfigurationResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetIdentityProviderUdPullConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetIdentityProviderUdPullConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetIdentityProviderUdPullConfiguration  SetIdentityProviderUdPullConfigurationRequest
  * @return SetIdentityProviderUdPullConfigurationResponse
 */
async function setIdentityProviderUdPullConfiguration(request: SetIdentityProviderUdPullConfigurationRequest): SetIdentityProviderUdPullConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetIdentityProviderUdPullConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordComplexityConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordComplexityRules?: [ 
    {
      passwordCheckType?: string(name='PasswordCheckType', description='The type of the password check. Valid values:

*   inclusion_upper_case: The password must contain uppercase letters.
*   inclusion_lower_case: The password must contain lowercase letters.
*   inclusion_special_case: The password must contain one or more of the following special characters: @ % + \\ / \\" ! # $ ^ ? : , ( ) { } [ ] ~ - _ .
*   inclusion_number: The password must contain digits.
*   exclusion_username: The password cannot contain a username.
*   exclusion_email: The password cannot contain an email prefix.
*   exclusion_phone_number: The password cannot contain a mobile number.
*   exclusion_display_name: The password cannot contain a display name.', example='inclusion_upper_case', maxLength=64),
    }
  ](name='PasswordComplexityRules', description='The password complexity rules.', position='Query'),
  passwordMinLength: int32(name='PasswordMinLength', description='The minimum number of characters in a password.

This parameter is required.', example='10', maxLength=32, position='Query'),
}

model SetPasswordComplexityConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordComplexityConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPasswordComplexityConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPasswordComplexityConfiguration  SetPasswordComplexityConfigurationRequest
  * @return SetPasswordComplexityConfigurationResponse
 */
async function setPasswordComplexityConfiguration(request: SetPasswordComplexityConfigurationRequest): SetPasswordComplexityConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordComplexityConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordExpirationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  effectiveAuthenticationSourceIds?: [ string ](name='EffectiveAuthenticationSourceIds', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordExpirationAction?: string(name='PasswordExpirationAction', description='The action to take upon password expiration. This parameter must be specified when PasswordExpirationStatus is set to enabled. Valid values:

*   forbid_login: Users cannot log on to IDaaS.
*   force_update_password: Users must change the password.
*   remind_update_password: IDaaS reminds users to change the password upon each logon.', example='force_update_password', maxLength=32, position='Query'),
  passwordExpirationNotificationChannels?: [ string ](name='PasswordExpirationNotificationChannels', description='The methods for receiving password expiration notifications. This parameter must be specified when PasswordExpirationNotificationStatus is set to enabled.', example='login', maxLength=32, position='Query'),
  passwordExpirationNotificationDuration?: int32(name='PasswordExpirationNotificationDuration', description='The number of days before the expiration date during which password expiration notifications are sent. Unit: day. This parameter must be specified when PasswordExpirationNotificationStatus is set to enabled.', example='7', maxLength=32, position='Query'),
  passwordExpirationNotificationStatus?: string(name='PasswordExpirationNotificationStatus', description='Specifies whether to enable the password expiration notification feature. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordExpirationStatus: string(name='PasswordExpirationStatus', description='Specifies whether to enable the password expiration feature. Valid values:

*   enabled
*   disabled

This parameter is required.', example='enabled', maxLength=32, position='Query'),
  passwordForcedUpdateDuration?: int32(name='PasswordForcedUpdateDuration', description='The number of days before which users must change the password to prevent password expiration. Unit: day. You must set this parameter to a value greater than the value of PasswordExpirationNotificationDuration.', example='7', maxLength=32, position='Query'),
  passwordValidMaxDay?: int32(name='PasswordValidMaxDay', description='The validity period of a password. Unit: day. This parameter must be specified when PasswordExpirationStatus is set to enabled.', example='180', maxLength=32, position='Query'),
}

model SetPasswordExpirationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordExpirationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPasswordExpirationConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPasswordExpirationConfiguration  SetPasswordExpirationConfigurationRequest
  * @return SetPasswordExpirationConfigurationResponse
 */
async function setPasswordExpirationConfiguration(request: SetPasswordExpirationConfigurationRequest): SetPasswordExpirationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordExpirationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordHistoryConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordHistoryMaxRetention?: int32(name='PasswordHistoryMaxRetention', description='The maximum number of recent passwords that can be retained. This parameter must be specified when PasswordHistoryStatus is set to enabled.', example='3', maxLength=32, position='Query'),
  passwordHistoryStatus: string(name='PasswordHistoryStatus', description='Specifies whether to enable the password history feature. Valid values:

*   enabled
*   disabled

This parameter is required.', example='enabled', maxLength=32, position='Query'),
}

model SetPasswordHistoryConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordHistoryConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPasswordHistoryConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPasswordHistoryConfiguration  SetPasswordHistoryConfigurationRequest
  * @return SetPasswordHistoryConfigurationResponse
 */
async function setPasswordHistoryConfiguration(request: SetPasswordHistoryConfigurationRequest): SetPasswordHistoryConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordHistoryConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetPasswordInitializationConfigurationRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to enable forcible password change upon first logon. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=32, position='Query'),
  passwordInitializationNotificationChannels?: [ string ](name='PasswordInitializationNotificationChannels', description='The methods for receiving password initialization notifications.', example='email', maxLength=32, position='Query'),
  passwordInitializationStatus: string(name='PasswordInitializationStatus', description='Specifies whether to enable password initialization. Valid values:

*   enabled
*   disabled

This parameter is required.', example='enabled', maxLength=32, position='Query'),
  passwordInitializationType?: string(name='PasswordInitializationType', description='The password initialization method. This parameter is required when PasswordInitializationStatus is set to enabled. Set the value to random.

*   random: A randomly generated password is used.', example='random', maxLength=32, position='Query'),
}

model SetPasswordInitializationConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetPasswordInitializationConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPasswordInitializationConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetPasswordInitializationConfiguration  SetPasswordInitializationConfigurationRequest
  * @return SetPasswordInitializationConfigurationResponse
 */
async function setPasswordInitializationConfiguration(request: SetPasswordInitializationConfigurationRequest): SetPasswordInitializationConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPasswordInitializationConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model SetUserPrimaryOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The ID of the new primary organizational unit.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model SetUserPrimaryOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model SetUserPrimaryOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetUserPrimaryOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetUserPrimaryOrganizationalUnit  SetUserPrimaryOrganizationalUnitRequest
  * @return SetUserPrimaryOrganizationalUnitResponse
 */
async function setUserPrimaryOrganizationalUnit(request: SetUserPrimaryOrganizationalUnitRequest): SetUserPrimaryOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetUserPrimaryOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model UnlockUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model UnlockUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UnlockUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnlockUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnlockUser  UnlockUserRequest
  * @return UnlockUserResponse
 */
async function unlockUser(request: UnlockUserRequest): UnlockUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnlockUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationAuthorizationTypeRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to modify.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  authorizationType: string(name='AuthorizationType', description='The authorization type of the application. Valid values:

*   authorize_required: Only the user with explicit authorization can access the application.
*   default_all: By default, all users can access the application.

This parameter is required.', example='authorize_required', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateApplicationAuthorizationTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationAuthorizationTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationAuthorizationTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApplicationAuthorizationType  UpdateApplicationAuthorizationTypeRequest
  * @return UpdateApplicationAuthorizationTypeResponse
 */
async function updateApplicationAuthorizationType(request: UpdateApplicationAuthorizationTypeRequest): UpdateApplicationAuthorizationTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationAuthorizationType', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  applicationId: string(name='ApplicationId', description='The ID of the application that you want to modify.

This parameter is required.', example='app_mkv7rgt4d7i4u7zqtzev2mxxxx', maxLength=64, position='Query'),
  description?: string(name='Description', description='The description of the application.', example='A demo application that is used for test.', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk2676xxxx', maxLength=64, position='Query'),
}

model UpdateApplicationDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateApplicationDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApplicationDescription  UpdateApplicationDescriptionRequest
  * @return UpdateApplicationDescriptionResponse
 */
async function updateApplicationDescription(request: UpdateApplicationDescriptionRequest): UpdateApplicationDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConditionalAccessPolicyRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  conditionalAccessPolicyName: string(name='ConditionalAccessPolicyName', description='Conditional Access Policy Name

This parameter is required.', example='My Policy', maxLength=64, position='Query'),
  conditionsConfig?: {
    applications?: {
      excludeApplications?: [ string ](name='ExcludeApplications', description='Excluded Applications'),
      includeApplications?: [ string ](name='IncludeApplications', description='Included Applications'),
    }(name='Applications', description='Target Applications for the Conditional Access Policy'),
    networkZones?: {
      excludeNetworkZones?: [ string ](name='ExcludeNetworkZones', description='Excluded network zones'),
      includeNetworkZones?: [ string ](name='IncludeNetworkZones', description='Included network zones'),
    }(name='NetworkZones', description='Network zones for conditional access policy'),
    users?: {
      excludeGroups?: [ string ](name='ExcludeGroups', description='Excluded user groups'),
      excludeOrganizationalUnits?: [ string ](name='ExcludeOrganizationalUnits', description='Excluded organizations'),
      excludeUsers?: [ string ](name='ExcludeUsers', description='Excluded Users'),
      includeGroups?: [ string ](name='IncludeGroups', description='Included User Groups'),
      includeOrganizationalUnits?: [ string ](name='IncludeOrganizationalUnits', description='Included organizations'),
      includeUsers?: [ string ](name='IncludeUsers', description='Included Users'),
    }(name='Users', description='Target Users for the Conditional Access Policy'),
  }(name='ConditionsConfig', description='Conditional Access Policy Condition Content Configuration', position='Query'),
  decisionConfig?: {
    activeSessionReuseStatus?: string(name='ActiveSessionReuseStatus', description='Whether to enable session reuse', example='enabled'),
    effect?: string(name='Effect', description='Conditional Access Policy Decision Action', example='allow'),
    mfaAuthenticationIntervalSeconds?: long(name='MfaAuthenticationIntervalSeconds', description='Conditional Access Policy Re-authentication Interval (seconds)', example='300'),
    mfaAuthenticationMethods?: [ string ](name='MfaAuthenticationMethods', description='Allowed MFA types for the Conditional Access Policy'),
    mfaType?: string(name='MfaType', description='Conditional Access Policy MFA Type', example='directly_access'),
  }(name='DecisionConfig', description='Conditional Access Policy Action Configuration', position='Query'),
  decisionType: string(name='DecisionType', description='Conditional Access Policy Execution Type

This parameter is required.', example='enforcement', maxLength=32, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  priority?: int32(name='Priority', description='Priority of the conditional access policy', example='1', position='Query'),
}

model UpdateConditionalAccessPolicyResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateConditionalAccessPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConditionalAccessPolicyResponseBody(name='body'),
}

/**
  * @description Update Conditional Access Policy
  * @param request  the request parameters of UpdateConditionalAccessPolicy  UpdateConditionalAccessPolicyRequest
  * @return UpdateConditionalAccessPolicyResponse
 */
async function updateConditionalAccessPolicy(request: UpdateConditionalAccessPolicyRequest): UpdateConditionalAccessPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConditionalAccessPolicy', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConditionalAccessPolicyDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  conditionalAccessPolicyId: string(name='ConditionalAccessPolicyId', description='Conditional Access Policy ID

This parameter is required.', example='cap_11111', maxLength=64, position='Query'),
  description: string(name='Description', description='Description of the conditional access policy

This parameter is required.', example='Test Description', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='Instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateConditionalAccessPolicyDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateConditionalAccessPolicyDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConditionalAccessPolicyDescriptionResponseBody(name='body'),
}

/**
  * @description Update Conditional Access Policy Description
  * @param request  the request parameters of UpdateConditionalAccessPolicyDescription  UpdateConditionalAccessPolicyDescriptionRequest
  * @return UpdateConditionalAccessPolicyDescriptionResponse
 */
async function updateConditionalAccessPolicyDescription(request: UpdateConditionalAccessPolicyDescriptionRequest): UpdateConditionalAccessPolicyDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConditionalAccessPolicyDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  regionId?: string(name='RegionId', position='Host'),
  groupExternalId?: string(name='GroupExternalId', description='The external ID of the group.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupId: string(name='GroupId', description='The group ID.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupName?: string(name='GroupName', description='The name of the group.', example='name_test', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateGroupResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGroup  UpdateGroupRequest
  * @return UpdateGroupResponse
 */
async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateGroupDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the account group.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  groupId: string(name='GroupId', description='The ID of the account group.

This parameter is required.', example='group_d6sbsuumeta4h66ec3il7yxxxx', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateGroupDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateGroupDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGroupDescription  UpdateGroupDescriptionRequest
  * @return UpdateGroupDescriptionResponse
 */
async function updateGroupDescription(request: UpdateGroupDescriptionRequest): UpdateGroupDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateGroupDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateIdentityProviderRequest {
  regionId?: string(name='RegionId', position='Host'),
  dingtalkAppConfig?: {
    appKey: string(name='AppKey', description='钉钉一方应用的AppKey

This parameter is required.', example='49nyeaqumk7f'),
    appSecret: string(name='AppSecret', description='钉钉一方应用的AppSecret

This parameter is required.', example='86nozWFL2CxgwnhKiXaG8dN4keLPkUNc5xxxx'),
  }(name='DingtalkAppConfig', description='钉钉出基本信息', position='Query'),
  identityProviderId: string(name='IdentityProviderId', description='IDaaS的身份提供方主键id

This parameter is required.', example='idp_my664lwkhpicbyzirog3xxxxx', maxLength=64, position='Query'),
  identityProviderName?: string(name='IdentityProviderName', description='身份提供方名称', example='test', position='Query'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  larkConfig?: {
    appId?: string(name='AppId', example='cli_xxxx'),
    appSecret?: string(name='AppSecret', example='KiiLzh5Dueh4wbLxxxx'),
    encryptKey?: string(name='EncryptKey'),
    verificationToken?: string(name='VerificationToken'),
  }(name='LarkConfig', description='飞书配置', position='Query'),
  ldapConfig?: {
    administratorPassword?: string(name='AdministratorPassword', description='管理员密码', example='xxxxxx'),
    administratorUsername?: string(name='AdministratorUsername', description='管理员账号', example='DC=example,DC=com'),
    certificateFingerprintStatus?: string(name='CertificateFingerprintStatus', description='是否验证指纹证书', example='enabled'),
    certificateFingerprints?: [ string ](name='CertificateFingerprints', description='证书指纹列表'),
    ldapProtocol?: string(name='LdapProtocol', description='通信协议', example='ldap'),
    ldapServerHost?: string(name='LdapServerHost', description='ad/ldap 服务器地址', example='123.xx.xx.89'),
    ldapServerPort?: int32(name='LdapServerPort', description='端口号', example='636'),
    startTlsStatus?: string(name='StartTlsStatus', description='startTls是否开启', example='enabled'),
  }(name='LdapConfig', description='AD/LDAP基本信息', position='Query'),
  logoUrl?: string(name='LogoUrl', position='Query'),
  networkAccessEndpointId?: string(name='NetworkAccessEndpointId', description='网络端点ID', example='nae_examplexxxx', position='Query'),
  oidcConfig?: {
    authnParam?: {
      authnMethod?: string(name='AuthnMethod', description='OIDC/oAuth2 认证方法。', example='client_secret_post'),
      clientSecret?: string(name='ClientSecret', description='OIDC/oAuth2 客户端密钥。', example='CSEHDddddddxxxxuxkJEHPveWRXBGqVqRsxxxx'),
    }(name='AuthnParam', description='OIDC客户端认证配置。'),
    endpointConfig?: {
      authorizationEndpoint?: string(name='AuthorizationEndpoint', description='oAuth2 授权端点。', example='https://example.com/oauth/authorize'),
      issuer?: string(name='Issuer', description='OIDC issuer信息。', example='https://example.com/oauth'),
      jwksUri?: string(name='JwksUri', description='OIDC jwks地址。', example='https://example.com/oauth/jwks'),
      tokenEndpoint?: string(name='TokenEndpoint', description='oAuth2 Token端点。', example='https://example.com/oauth/token'),
      userinfoEndpoint?: string(name='UserinfoEndpoint', description='OIDC 用户信息端点。', example='https://example.com/oauth/userinfo'),
    }(name='EndpointConfig', description='OIDC 端点配置。'),
    grantScopes?: [ string ](name='GrantScopes', description='OIDC标准参数，如profile、email等', example='openid'),
    grantType?: string(name='GrantType', description='OIDC授权类型。', example='authorization_code'),
    pkceChallengeMethod?: string(name='PkceChallengeMethod', description='支持的PKCE算法类型。', example='S256'),
    pkceRequired?: boolean(name='PkceRequired', description='AuthorizationCode授权模式下是否使用PKCE。', example='true'),
  }(name='OidcConfig', description='OIDC IdP配置。', position='Query'),
  weComConfig?: {
    agentId?: string(name='AgentId', description='企业微信自建应用的Id', example='1237403'),
    authorizeCallbackDomain?: string(name='AuthorizeCallbackDomain', description='授权回调域', example='https://xxx.aliyunidaas.com/xxxxx'),
    corpSecret?: string(name='CorpSecret', description='企业微信自建应用的corpSecret', example='CSEHDddddddxxxxuxkJEHPveWRXBGqVqRsxxxx'),
    trustableDomain?: string(name='TrustableDomain', description='可信域名', example='https://xxx.aliyunidaas.com'),
  }(name='WeComConfig', description='企业微信基本信息', position='Query'),
}

model UpdateIdentityProviderResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateIdentityProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateIdentityProviderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateIdentityProvider  UpdateIdentityProviderRequest
  * @return UpdateIdentityProviderResponse
 */
async function updateIdentityProvider(request: UpdateIdentityProviderRequest): UpdateIdentityProviderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIdentityProvider', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstanceDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The new description of the instance.', example='测试实例', maxLength=128, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance whose description you want to modify.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
}

model UpdateInstanceDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateInstanceDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceDescription  UpdateInstanceDescriptionRequest
  * @return UpdateInstanceDescriptionResponse
 */
async function updateInstanceDescription(request: UpdateInstanceDescriptionRequest): UpdateInstanceDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstanceDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateNetworkAccessEndpointNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='IDaaS EIAM实例的ID。

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  networkAccessEndpointId: string(name='NetworkAccessEndpointId', description='专属网络端点ID。

This parameter is required.', example='nae_examplexxxx', position='Query'),
  networkAccessEndpointName: string(name='NetworkAccessEndpointName', description='专属网络端点名称。

This parameter is required.', example='xx业务VPC访问端点', position='Query'),
}

model UpdateNetworkAccessEndpointNameResponseBody = {
  requestId?: string(name='RequestId', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateNetworkAccessEndpointNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNetworkAccessEndpointNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateNetworkAccessEndpointName  UpdateNetworkAccessEndpointNameRequest
  * @return UpdateNetworkAccessEndpointNameResponse
 */
async function updateNetworkAccessEndpointName(request: UpdateNetworkAccessEndpointNameRequest): UpdateNetworkAccessEndpointNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNetworkAccessEndpointName', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  organizationalUnitName?: string(name='OrganizationalUnitName', description='The name of the organization. The name can be up to 128 characters in length and must be unique in the same parent organization.', example='ou_name', maxLength=128, position='Query'),
}

model UpdateOrganizationalUnitResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOrganizationalUnitResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOrganizationalUnit  UpdateOrganizationalUnitRequest
  * @return UpdateOrganizationalUnitResponse
 */
async function updateOrganizationalUnit(request: UpdateOrganizationalUnitRequest): UpdateOrganizationalUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnit', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the organization. The value can be up to 256 characters in length.', example='organizationalUnit_test', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model UpdateOrganizationalUnitDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOrganizationalUnitDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOrganizationalUnitDescription  UpdateOrganizationalUnitDescriptionRequest
  * @return UpdateOrganizationalUnitDescriptionResponse
 */
async function updateOrganizationalUnitDescription(request: UpdateOrganizationalUnitDescriptionRequest): UpdateOrganizationalUnitDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnitDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOrganizationalUnitParentIdRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  organizationalUnitId: string(name='OrganizationalUnitId', description='The organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
  parentId: string(name='ParentId', description='The parent organization ID.

This parameter is required.', example='ou_wovwffm62xifdziem7an7xxxxx', maxLength=64, position='Query'),
}

model UpdateOrganizationalUnitParentIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateOrganizationalUnitParentIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOrganizationalUnitParentIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOrganizationalUnitParentId  UpdateOrganizationalUnitParentIdRequest
  * @return UpdateOrganizationalUnitParentIdResponse
 */
async function updateOrganizationalUnitParentId(request: UpdateOrganizationalUnitParentIdRequest): UpdateOrganizationalUnitParentIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOrganizationalUnitParentId', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  regionId?: string(name='RegionId', position='Host'),
  customFields?: [ 
    {
      fieldName?: string(name='FieldName', description='The name of the extended field. You must create an extended field before you specify this parameter. To create an extended field, go to the Extended Fields page of the specified EIAM instance in the IDaaS console.', example='nick_name', maxLength=64),
      fieldValue?: string(name='FieldValue', description='The value of the extended field. The value follows the limits on the properties of the extended field.', example='test_value', maxLength=64),
      operation?: string(name='Operation', description='The operation type of the extended field. Valid values:

*   add: adds a value to the extended field of the account.
*   replace: replaces the existing value of the extended field of the account. If the existing value to be replaced does not exist, this operation changes to the add operation.
*   remove: removes a value from the extended field of the account.', example='add', maxLength=64),
    }
  ](name='CustomFields', description='The custom extended fields.', position='Query'),
  displayName?: string(name='DisplayName', description='The display name of the account. The display name can be up to 64 characters in length.', example='test_name', maxLength=64, position='Query'),
  email?: string(name='Email', description='The email address. The prefix of the email address can contain letters, digits, periods (.), underscores (_), and hyphens (-).', example='example@example.com', maxLength=64, position='Query'),
  emailVerified?: boolean(name='EmailVerified', description='Specifies whether the email address is verified. This parameter must be specified if you specify Email. You can set this parameter to true if you have no special business requirements.', example='true', maxLength=64, position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile number. The mobile number must be 6 to 15 digits in length.', example='156xxxxxxxxx', maxLength=32, position='Query'),
  phoneNumberVerified?: boolean(name='PhoneNumberVerified', description='Specifies whether the mobile number is verified. This parameter must be specified if you specify PhoneNumber. You can set this parameter to true if you have no special business requirements.', example='true', maxLength=64, position='Query'),
  phoneRegion?: string(name='PhoneRegion', description='The area code of the mobile number. For example, the area code of a mobile number in the Chinese mainland is 86 without 00 or the plus sign (+). This parameter must be specified if you specify PhoneNumber.', example='86', maxLength=32, position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  username?: string(name='Username', description='The name of the account. The name can be up to 64 characters in length. It can contain letters, digits, and the following special characters: _ . @ -', example='username_test', maxLength=64, position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUser  UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserDescriptionRequest {
  regionId?: string(name='RegionId', position='Host'),
  description?: string(name='Description', description='The description of the account. The value can be up to 256 characters in length.', example='this is a test.', maxLength=256, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The ID of the account.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
}

model UpdateUserDescriptionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserDescriptionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserDescriptionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserDescription  UpdateUserDescriptionRequest
  * @return UpdateUserDescriptionResponse
 */
async function updateUserDescription(request: UpdateUserDescriptionRequest): UpdateUserDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserDescription', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserPasswordRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='idaas_ue2jvisn35ea5lmthk267xxxxx', maxLength=64, position='Query'),
  password: string(name='Password', description='The new password of the account. For more information about the password format, see the "Password Policies" topic.

This parameter is required.', example='123456', maxLength=64, position='Query'),
  passwordForcedUpdateStatus?: string(name='PasswordForcedUpdateStatus', description='Specifies whether to enable forcible password change upon first logon. Default value: disabled. Valid values:

*   enabled
*   disabled', example='enabled', maxLength=64, position='Query'),
  userId: string(name='UserId', description='The account ID.

This parameter is required.', example='user_d6sbsuumeta4h66ec3il7yxxxx', maxLength=64, position='Query'),
  userNotificationChannels?: [ string ](name='UserNotificationChannels', description='The methods for receiving password notifications.', example='sms', maxLength=64, position='Query'),
}

model UpdateUserPasswordResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='0441BD79-92F3-53AA-8657-F8CE4A2B912A'),
}

model UpdateUserPasswordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserPasswordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserPassword  UpdateUserPasswordRequest
  * @return UpdateUserPasswordResponse
 */
async function updateUserPassword(request: UpdateUserPasswordRequest): UpdateUserPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserPassword', 'POST', '/', 'json', false, 'json', request);
}

