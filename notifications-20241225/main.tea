/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('notifications', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DelMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  msgId?: string(name='MsgId'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model DelMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelMessageResponseBody(name='body'),
}

/**
 * @summary 方法描述：删除消息
 *
 * @param request DelMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DelMessageResponse
 */
async function delMessageWithOptions(request: DelMessageRequest, runtime: Util.RuntimeOptions): DelMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DelMessage',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：删除消息
 *
 * @param request DelMessageRequest
 * @return DelMessageResponse
 */
async function delMessage(request: DelMessageRequest): DelMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return delMessageWithOptions(request, runtime);
}

model DeleteAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  classId?: long(name='ClassId'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  groupCode?: string(name='GroupCode'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model DeleteAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAllMessageResponseBody(name='body'),
}

/**
 * @summary 方法描述：站内信全部删除（逻辑删除）
 *
 * @param request DeleteAllMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAllMessageResponse
 */
async function deleteAllMessageWithOptions(request: DeleteAllMessageRequest, runtime: Util.RuntimeOptions): DeleteAllMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.groupCode)) {
    body['GroupCode'] = request.groupCode;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAllMessage',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：站内信全部删除（逻辑删除）
 *
 * @param request DeleteAllMessageRequest
 * @return DeleteAllMessageResponse
 */
async function deleteAllMessage(request: DeleteAllMessageRequest): DeleteAllMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllMessageWithOptions(request, runtime);
}

model ReadAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  classId?: long(name='ClassId'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  groupCode?: string(name='GroupCode'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadAllMessageResponseBody(name='body'),
}

/**
 * @summary 方法描述：分类全部标记为已读，不填则全部标记
 *
 * @param request ReadAllMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadAllMessageResponse
 */
async function readAllMessageWithOptions(request: ReadAllMessageRequest, runtime: Util.RuntimeOptions): ReadAllMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.groupCode)) {
    body['GroupCode'] = request.groupCode;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadAllMessage',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：分类全部标记为已读，不填则全部标记
 *
 * @param request ReadAllMessageRequest
 * @return ReadAllMessageResponse
 */
async function readAllMessage(request: ReadAllMessageRequest): ReadAllMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return readAllMessageWithOptions(request, runtime);
}

model ReadClassNameRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadClassNameResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadClassNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadClassNameResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取各分类已读消息数
 *
 * @param request ReadClassNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadClassNameResponse
 */
async function readClassNameWithOptions(request: ReadClassNameRequest, runtime: Util.RuntimeOptions): ReadClassNameResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadClassName',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取各分类已读消息数
 *
 * @param request ReadClassNameRequest
 * @return ReadClassNameResponse
 */
async function readClassName(request: ReadClassNameRequest): ReadClassNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return readClassNameWithOptions(request, runtime);
}

model ReadMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  msgId?: string(name='MsgId'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageResponseBody(name='body'),
}

/**
 * @summary 方法描述：消息标记为已读
 *
 * @param request ReadMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadMessageResponse
 */
async function readMessageWithOptions(request: ReadMessageRequest, runtime: Util.RuntimeOptions): ReadMessageResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadMessage',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：消息标记为已读
 *
 * @param request ReadMessageRequest
 * @return ReadMessageResponse
 */
async function readMessage(request: ReadMessageRequest): ReadMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return readMessageWithOptions(request, runtime);
}

model ReadMessageContentRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  classId?: long(name='ClassId'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  groupCode?: string(name='GroupCode'),
  history?: boolean(name='History'),
  msgId?: string(name='MsgId'),
  srcUrl?: string(name='SrcUrl'),
  status?: int32(name='Status'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadMessageContentResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: {
      item?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='Item'),
      lastItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='LastItem'),
      nextItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='NextItem'),
    }(name='Datas'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageContentResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取消息正文
 *
 * @param request ReadMessageContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadMessageContentResponse
 */
async function readMessageContentWithOptions(request: ReadMessageContentRequest, runtime: Util.RuntimeOptions): ReadMessageContentResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.groupCode)) {
    body['GroupCode'] = request.groupCode;
  }
  if (!Util.isUnset(request.history)) {
    body['History'] = request.history;
  }
  if (!Util.isUnset(request.msgId)) {
    body['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadMessageContent',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取消息正文
 *
 * @param request ReadMessageContentRequest
 * @return ReadMessageContentResponse
 */
async function readMessageContent(request: ReadMessageContentRequest): ReadMessageContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return readMessageContentWithOptions(request, runtime);
}

model ReadMessageListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='语言，默认为简体中文', example='zh-CN'),
  appName?: string(name='AppName', description='系统参数，无需填写', example='/'),
  bizName?: string(name='BizName', description='系统参数，无需填写', example='/'),
  callerProtocol?: string(name='CallerProtocol', description='系统参数，无需填写', example='/'),
  classId?: long(name='ClassId', description='消息类目ID', example='1'),
  clientSource?: string(name='ClientSource', description='系统参数，无需填写', example='/'),
  content?: string(name='Content', description='消息内容，用于模糊搜索', example='"消息内容示例“'),
  cookies?: string(name='Cookies', description='系统参数，无需填写', example='/'),
  groupCode?: string(name='GroupCode'),
  history?: string(name='History'),
  loc?: string(name='Loc', description='栏位 nav代表控制台topbar', example='/'),
  maxResults?: int32(name='MaxResults', description='系统参数，无需填写', example='/'),
  nextToken?: string(name='NextToken', description='系统参数，无需填写', example='/'),
  page?: int32(name='Page', description='分页查询页码', example='2'),
  pageSize?: int32(name='PageSize', description='分页查询大小', example='5'),
  srcUrl?: string(name='SrcUrl', description='系统参数，无需填写', example='/'),
  status?: int32(name='Status', description='消息状态，已读为1，未读为0', example='0'),
  tenantCode?: string(name='TenantCode', description='系统参数，无需填写', example='/'),
  title?: string(name='Title', description='消息标题，用于模糊搜索', example='"标题示例“'),
  uidType?: string(name='UidType', description='系统参数，无需填写', example='/'),
}

model ReadMessageListResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='SUCCESS'),
  data?: {
    count?: long(name='Count', description='The number of entries returned.', example='1'),
    maxResults?: long(name='MaxResults', description='The maximum number of entries returned.', example='/'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='/'),
    page?: int32(name='Page', description='The page number.', example='24'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    rows?: [ 
      {
        categoryCode?: string(name='CategoryCode'),
        categoryName?: string(name='CategoryName', description='CategoryName', example='/'),
        class?: string(name='Class', description='Class', example='/'),
        classId?: long(name='ClassId', description='ClassId', example='1'),
        content?: string(name='Content', description='内容', example='/'),
        deleted?: int32(name='Deleted', description='删除', example='0'),
        gmtCreated?: long(name='GmtCreated', description='创建时间', example='1723772244000'),
        gmtUpdate?: long(name='GmtUpdate', example='1723772244000'),
        massId?: long(name='MassId', description='massId', example='/'),
        memo?: string(name='Memo', description='描述', example='/'),
        msgId?: long(name='MsgId', description='消息id', example='3727683838'),
        status?: long(name='Status', description='状态', example='0'),
        title?: string(name='Title', description='标题', example='/'),
        titleh?: string(name='Titleh'),
      }
    ](name='Rows', description='The number of rows updated or returned on PolarDB-X 2.0 compute nodes.'),
  }(name='Data', description='Data'),
  message?: string(name='Message', description='message', example='/'),
  requestId?: string(name='RequestId', description='唯一请求id', example='A5F62766-1C2F-1F56-A39D-63E3D30F0633'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ReadMessageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageListResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取消息列表
 *
 * @param request ReadMessageListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadMessageListResponse
 */
async function readMessageListWithOptions(request: ReadMessageListRequest, runtime: Util.RuntimeOptions): ReadMessageListResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.classId)) {
    body['ClassId'] = request.classId;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.content)) {
    body['Content'] = request.content;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.groupCode)) {
    body['GroupCode'] = request.groupCode;
  }
  if (!Util.isUnset(request.history)) {
    body['History'] = request.history;
  }
  if (!Util.isUnset(request.loc)) {
    body['Loc'] = request.loc;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.page)) {
    body['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadMessageList',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取消息列表
 *
 * @param request ReadMessageListRequest
 * @return ReadMessageListResponse
 */
async function readMessageList(request: ReadMessageListRequest): ReadMessageListResponse {
  var runtime = new Util.RuntimeOptions{};
  return readMessageListWithOptions(request, runtime);
}

model ReadMessageNewTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadMessageNewTotalResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageNewTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageNewTotalResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取未读消息总数
 *
 * @param request ReadMessageNewTotalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadMessageNewTotalResponse
 */
async function readMessageNewTotalWithOptions(request: ReadMessageNewTotalRequest, runtime: Util.RuntimeOptions): ReadMessageNewTotalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadMessageNewTotal',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取未读消息总数
 *
 * @param request ReadMessageNewTotalRequest
 * @return ReadMessageNewTotalResponse
 */
async function readMessageNewTotal(request: ReadMessageNewTotalRequest): ReadMessageNewTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return readMessageNewTotalWithOptions(request, runtime);
}

model ReadNumGroupByClassRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  uidType?: string(name='UidType'),
}

model ReadNumGroupByClassResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      classId?: long(name='ClassId'),
      msgCount?: long(name='MsgCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupByClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupByClassResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取各分类已读消息数
 *
 * @param request ReadNumGroupByClassRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadNumGroupByClassResponse
 */
async function readNumGroupByClassWithOptions(request: ReadNumGroupByClassRequest, runtime: Util.RuntimeOptions): ReadNumGroupByClassResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadNumGroupByClass',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取各分类已读消息数
 *
 * @param request ReadNumGroupByClassRequest
 * @return ReadNumGroupByClassResponse
 */
async function readNumGroupByClass(request: ReadNumGroupByClassRequest): ReadNumGroupByClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return readNumGroupByClassWithOptions(request, runtime);
}

model ReadNumGroupTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN'),
  appName?: string(name='AppName'),
  bizName?: string(name='BizName'),
  callerProtocol?: string(name='CallerProtocol'),
  clientSource?: string(name='ClientSource'),
  cookies?: string(name='Cookies'),
  srcUrl?: string(name='SrcUrl'),
  tenantCode?: string(name='TenantCode'),
  title?: string(name='Title'),
  uidType?: string(name='UidType'),
}

model ReadNumGroupTotalResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      groupCode?: string(name='GroupCode'),
      id?: long(name='Id'),
      readCount?: long(name='ReadCount'),
      totalCount?: long(name='TotalCount'),
      unReadCount?: long(name='UnReadCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupTotalResponseBody(name='body'),
}

/**
 * @summary 方法描述：获取所有分类下的信息
 *
 * @param request ReadNumGroupTotalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadNumGroupTotalResponse
 */
async function readNumGroupTotalWithOptions(request: ReadNumGroupTotalRequest, runtime: Util.RuntimeOptions): ReadNumGroupTotalResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.acceptLanguage)) {
    body['AcceptLanguage'] = request.acceptLanguage;
  }
  if (!Util.isUnset(request.appName)) {
    body['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.bizName)) {
    body['BizName'] = request.bizName;
  }
  if (!Util.isUnset(request.callerProtocol)) {
    body['CallerProtocol'] = request.callerProtocol;
  }
  if (!Util.isUnset(request.clientSource)) {
    body['ClientSource'] = request.clientSource;
  }
  if (!Util.isUnset(request.cookies)) {
    body['Cookies'] = request.cookies;
  }
  if (!Util.isUnset(request.srcUrl)) {
    body['SrcUrl'] = request.srcUrl;
  }
  if (!Util.isUnset(request.tenantCode)) {
    body['TenantCode'] = request.tenantCode;
  }
  if (!Util.isUnset(request.title)) {
    body['Title'] = request.title;
  }
  if (!Util.isUnset(request.uidType)) {
    body['UidType'] = request.uidType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ReadNumGroupTotal',
    version = '2024-12-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 方法描述：获取所有分类下的信息
 *
 * @param request ReadNumGroupTotalRequest
 * @return ReadNumGroupTotalResponse
 */
async function readNumGroupTotal(request: ReadNumGroupTotalRequest): ReadNumGroupTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return readNumGroupTotalWithOptions(request, runtime);
}

