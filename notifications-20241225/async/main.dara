/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Notifications';
  @version = '2024-12-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DelMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model DelMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DelMessage  DelMessageRequest
  * @return DelMessageResponse
 */
async function delMessage(request: DelMessageRequest): DelMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelMessage', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  groupCode?: string(name='GroupCode', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model DeleteAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAllMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAllMessage  DeleteAllMessageRequest
  * @return DeleteAllMessageResponse
 */
async function deleteAllMessage(request: DeleteAllMessageRequest): DeleteAllMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  groupCode?: string(name='GroupCode', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadAllMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadAllMessage  ReadAllMessageRequest
  * @return ReadAllMessageResponse
 */
async function readAllMessage(request: ReadAllMessageRequest): ReadAllMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadAllMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadClassNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadClassNameResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadClassNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadClassNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadClassName  ReadClassNameRequest
  * @return ReadClassNameResponse
 */
async function readClassName(request: ReadClassNameRequest): ReadClassNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadClassName', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessage  ReadMessageRequest
  * @return ReadMessageResponse
 */
async function readMessage(request: ReadMessageRequest): ReadMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageContentRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  groupCode?: string(name='GroupCode', position='Body'),
  history?: boolean(name='History', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  status?: int32(name='Status', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageContentResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: {
      item?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='Item'),
      lastItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='LastItem'),
      nextItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='NextItem'),
    }(name='Datas'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageContent  ReadMessageContentRequest
  * @return ReadMessageContentResponse
 */
async function readMessageContent(request: ReadMessageContentRequest): ReadMessageContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageContent', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageListRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='语言，默认为简体中文', example='zh-CN', position='Body'),
  appName?: string(name='AppName', description='系统参数，无需填写', example='/', position='Body'),
  bizName?: string(name='BizName', description='系统参数，无需填写', example='/', position='Body'),
  callerProtocol?: string(name='CallerProtocol', description='系统参数，无需填写', example='/', position='Body'),
  classId?: long(name='ClassId', description='消息类目ID', example='1', position='Body'),
  clientSource?: string(name='ClientSource', description='系统参数，无需填写', example='/', position='Body'),
  content?: string(name='Content', description='消息内容，用于模糊搜索', example='"消息内容示例“', position='Body'),
  cookies?: string(name='Cookies', description='系统参数，无需填写', example='/', position='Body'),
  groupCode?: string(name='GroupCode', position='Body'),
  history?: string(name='History', position='Body'),
  loc?: string(name='Loc', description='栏位 nav代表控制台topbar', example='/', position='Body'),
  maxResults?: int32(name='MaxResults', description='系统参数，无需填写', example='/', position='Body'),
  nextToken?: string(name='NextToken', description='系统参数，无需填写', example='/', position='Body'),
  page?: int32(name='Page', description='分页查询页码', example='2', position='Body'),
  pageSize?: int32(name='PageSize', description='分页查询大小', example='5', position='Body'),
  srcUrl?: string(name='SrcUrl', description='系统参数，无需填写', example='/', position='Body'),
  status?: int32(name='Status', description='消息状态，已读为1，未读为0', example='0', position='Body'),
  tenantCode?: string(name='TenantCode', description='系统参数，无需填写', example='/', position='Body'),
  title?: string(name='Title', description='消息标题，用于模糊搜索', example='"标题示例“', position='Body'),
  uidType?: string(name='UidType', description='系统参数，无需填写', example='/', position='Body'),
}

model ReadMessageListResponseBody = {
  code?: string(name='Code', description='The response code. The value Success indicates that the request is successful. Other values indicate that the request failed. For more information about error codes, see Error codes.', example='SUCCESS'),
  data?: {
    count?: long(name='Count', description='The number of entries returned.', example='1'),
    maxResults?: long(name='MaxResults', description='The maximum number of entries returned.', example='/'),
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='/'),
    page?: int32(name='Page', description='The page number.', example='24'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    rows?: [ 
      {
        categoryCode?: string(name='CategoryCode'),
        categoryName?: string(name='CategoryName', description='CategoryName', example='/'),
        class?: string(name='Class', description='Class', example='/'),
        classId?: long(name='ClassId', description='ClassId', example='1'),
        content?: string(name='Content', description='内容', example='/'),
        deleted?: int32(name='Deleted', description='删除', example='0'),
        gmtCreated?: long(name='GmtCreated', description='创建时间', example='1723772244000'),
        gmtUpdate?: long(name='GmtUpdate', example='1723772244000'),
        massId?: long(name='MassId', description='massId', example='/'),
        memo?: string(name='Memo', description='描述', example='/'),
        msgId?: long(name='MsgId', description='消息id', example='3727683838'),
        status?: long(name='Status', description='状态', example='0'),
        title?: string(name='Title', description='标题', example='/'),
        titleh?: string(name='Titleh'),
      }
    ](name='Rows', description='The number of rows updated or returned on PolarDB-X 2.0 compute nodes.'),
  }(name='Data', description='Data'),
  message?: string(name='Message', description='message', example='/'),
  requestId?: string(name='RequestId', description='唯一请求id', example='A5F62766-1C2F-1F56-A39D-63E3D30F0633'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ReadMessageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageList  ReadMessageListRequest
  * @return ReadMessageListResponse
 */
async function readMessageList(request: ReadMessageListRequest): ReadMessageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageList', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageNewTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageNewTotalResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageNewTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageNewTotalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageNewTotal  ReadMessageNewTotalRequest
  * @return ReadMessageNewTotalResponse
 */
async function readMessageNewTotal(request: ReadMessageNewTotalRequest): ReadMessageNewTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageNewTotal', 'POST', '/', 'json', true, 'form', request);
}

model ReadNumGroupByClassRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadNumGroupByClassResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      classId?: long(name='ClassId'),
      msgCount?: long(name='MsgCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupByClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupByClassResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadNumGroupByClass  ReadNumGroupByClassRequest
  * @return ReadNumGroupByClassResponse
 */
async function readNumGroupByClass(request: ReadNumGroupByClassRequest): ReadNumGroupByClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadNumGroupByClass', 'POST', '/', 'json', true, 'form', request);
}

model ReadNumGroupTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  title?: string(name='Title', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadNumGroupTotalResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      groupCode?: string(name='GroupCode'),
      id?: long(name='Id'),
      readCount?: long(name='ReadCount'),
      totalCount?: long(name='TotalCount'),
      unReadCount?: long(name='UnReadCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupTotalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadNumGroupTotal  ReadNumGroupTotalRequest
  * @return ReadNumGroupTotalResponse
 */
async function readNumGroupTotal(request: ReadNumGroupTotalRequest): ReadNumGroupTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadNumGroupTotal', 'POST', '/', 'json', true, 'form', request);
}

