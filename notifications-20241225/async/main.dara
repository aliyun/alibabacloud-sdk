/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Notifications';
  @version = '2024-12-25';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DelMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model DelMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DelMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DelMessage  DelMessageRequest
  * @return DelMessageResponse
 */
async function delMessage(request: DelMessageRequest): DelMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelMessage', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model DeleteAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAllMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAllMessage  DeleteAllMessageRequest
  * @return DeleteAllMessageResponse
 */
async function deleteAllMessage(request: DeleteAllMessageRequest): DeleteAllMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAllMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadAllMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadAllMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadAllMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadAllMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadAllMessage  ReadAllMessageRequest
  * @return ReadAllMessageResponse
 */
async function readAllMessage(request: ReadAllMessageRequest): ReadAllMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadAllMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadClassNameRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadClassNameResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      id?: long(name='Id'),
      name?: string(name='Name'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadClassNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadClassNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadClassName  ReadClassNameRequest
  * @return ReadClassNameResponse
 */
async function readClassName(request: ReadClassNameRequest): ReadClassNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadClassName', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessage  ReadMessageRequest
  * @return ReadMessageResponse
 */
async function readMessage(request: ReadMessageRequest): ReadMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessage', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageContentRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  msgId?: string(name='MsgId', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  status?: int32(name='Status', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageContentResponseBody = {
  code?: string(name='Code'),
  data?: {
    datas?: {
      item?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='Item'),
      lastItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='LastItem'),
      nextItem?: [ 
        {
          categoryName?: string(name='CategoryName'),
          classId?: long(name='ClassId'),
          content?: string(name='Content'),
          deleted?: int32(name='Deleted'),
          gmtCreated?: long(name='GmtCreated'),
          gmtUpdate?: long(name='GmtUpdate'),
          massId?: long(name='MassId'),
          memo?: string(name='Memo'),
          msgId?: long(name='MsgId'),
          status?: long(name='Status'),
          title?: string(name='Title'),
        }
      ](name='NextItem'),
    }(name='Datas'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageContent  ReadMessageContentRequest
  * @return ReadMessageContentResponse
 */
async function readMessageContent(request: ReadMessageContentRequest): ReadMessageContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageContent', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageListRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  classId?: long(name='ClassId', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  content?: string(name='Content', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  loc?: string(name='Loc', position='Body'),
  maxResults?: int32(name='MaxResults', position='Body'),
  nextToken?: string(name='NextToken', position='Body'),
  page?: int32(name='Page', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  status?: int32(name='Status', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  title?: string(name='Title', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageListResponseBody = {
  code?: string(name='Code'),
  data?: {
    count?: long(name='Count'),
    maxResults?: long(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    page?: int32(name='Page'),
    pageSize?: int32(name='PageSize'),
    rows?: [ 
      {
        categoryName?: string(name='CategoryName'),
        class?: string(name='Class'),
        classId?: long(name='ClassId'),
        content?: string(name='Content'),
        deleted?: int32(name='Deleted'),
        gmtCreated?: long(name='GmtCreated'),
        gmtUpdate?: long(name='GmtUpdate'),
        massId?: long(name='MassId'),
        memo?: string(name='Memo'),
        msgId?: long(name='MsgId'),
        status?: long(name='Status'),
        title?: string(name='Title'),
      }
    ](name='Rows'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageList  ReadMessageListRequest
  * @return ReadMessageListResponse
 */
async function readMessageList(request: ReadMessageListRequest): ReadMessageListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageList', 'POST', '/', 'json', true, 'form', request);
}

model ReadMessageNewTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadMessageNewTotalResponseBody = {
  code?: string(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReadMessageNewTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadMessageNewTotalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadMessageNewTotal  ReadMessageNewTotalRequest
  * @return ReadMessageNewTotalResponse
 */
async function readMessageNewTotal(request: ReadMessageNewTotalRequest): ReadMessageNewTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadMessageNewTotal', 'POST', '/', 'json', true, 'form', request);
}

model ReadNumGroupByClassRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadNumGroupByClassResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      classId?: long(name='ClassId'),
      msgCount?: long(name='MsgCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupByClassResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupByClassResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadNumGroupByClass  ReadNumGroupByClassRequest
  * @return ReadNumGroupByClassResponse
 */
async function readNumGroupByClass(request: ReadNumGroupByClassRequest): ReadNumGroupByClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadNumGroupByClass', 'POST', '/', 'json', true, 'form', request);
}

model ReadNumGroupTotalRequest {
  acceptLanguage?: string(name='AcceptLanguage', example='zh-CN', position='Body'),
  appName?: string(name='AppName', position='Body'),
  bizName?: string(name='BizName', position='Body'),
  callerProtocol?: string(name='CallerProtocol', position='Body'),
  clientSource?: string(name='ClientSource', position='Body'),
  cookies?: string(name='Cookies', position='Body'),
  srcUrl?: string(name='SrcUrl', position='Body'),
  tenantCode?: string(name='TenantCode', position='Body'),
  uidType?: string(name='UidType', position='Body'),
}

model ReadNumGroupTotalResponseBody = {
  code?: string(name='Code', example='SUCCESS'),
  data?: [ 
    {
      id?: long(name='Id'),
      readCount?: long(name='ReadCount'),
      totalCount?: long(name='TotalCount'),
      unReadCount?: long(name='UnReadCount'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ReadNumGroupTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadNumGroupTotalResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadNumGroupTotal  ReadNumGroupTotalRequest
  * @return ReadNumGroupTotalResponse
 */
async function readNumGroupTotal(request: ReadNumGroupTotalRequest): ReadNumGroupTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadNumGroupTotal', 'POST', '/', 'json', true, 'form', request);
}

