/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'antiddos-public';
  @version = '2017-05-18';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeBgpPackByIpRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  ip: string(name='Ip', position='Query'),
}

model DescribeBgpPackByIpResponseBody = {
  code?: int32(name='Code'),
  ddosbgpInfo?: {
    baseThreshold?: int32(name='BaseThreshold'),
    ddosbgpInstanceId?: string(name='DdosbgpInstanceId'),
    elasticThreshold?: int32(name='ElasticThreshold'),
    expireTime?: long(name='ExpireTime'),
    ip?: string(name='Ip'),
  }(name='DdosbgpInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBgpPackByIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpPackByIpResponseBody(name='body'),
}

async function describeBgpPackByIp(request: DescribeBgpPackByIpRequest): DescribeBgpPackByIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBgpPackByIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCapRequest {
  begTime: long(name='BegTime', position='Query'),
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetIp?: string(name='InternetIp', position='Query'),
}

model DescribeCapResponseBody = {
  capUrl?: {
    url?: string(name='Url'),
  }(name='CapUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeCapResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapResponseBody(name='body'),
}

async function describeCap(request: DescribeCapRequest): DescribeCapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCap', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosCountRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
}

model DescribeDdosCountResponseBody = {
  ddosCount?: {
    blackholeCount?: int32(name='BlackholeCount'),
    defenseCount?: int32(name='DefenseCount'),
    instacenCount?: int32(name='InstacenCount'),
  }(name='DdosCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDdosCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCountResponseBody(name='body'),
}

async function describeDdosCount(request: DescribeDdosCountRequest): DescribeDdosCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosCreditRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
}

model DescribeDdosCreditResponseBody = {
  ddosCredit?: {
    blackholeTime?: int32(name='BlackholeTime'),
    score?: int32(name='Score'),
    scoreLevel?: string(name='ScoreLevel'),
  }(name='DdosCredit'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDdosCreditResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCreditResponseBody(name='body'),
}

async function describeDdosCredit(request: DescribeDdosCreditRequest): DescribeDdosCreditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosCredit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosEventListRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetIp?: string(name='InternetIp', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model DescribeDdosEventListResponseBody = {
  ddosEventList?: {
    ddosEvent?: [ 
    {
      ddosStatus?: string(name='DdosStatus'),
      ddosType?: string(name='DdosType'),
      delayTime?: long(name='DelayTime'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      unBlackholeTime?: long(name='UnBlackholeTime'),
    }
  ](name='DdosEvent')
  }(name='DdosEventList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDdosEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosEventListResponseBody(name='body'),
}

async function describeDdosEventList(request: DescribeDdosEventListRequest): DescribeDdosEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDdosThresholdRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  ddosType: string(name='DdosType', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
}

model DescribeDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  thresholds?: {
    threshold?: [ 
    {
      bps?: int32(name='Bps'),
      ddosType?: string(name='DdosType'),
      elasticBps?: int32(name='ElasticBps'),
      instanceId?: string(name='InstanceId'),
      internetIp?: string(name='InternetIp'),
      isAuto?: boolean(name='IsAuto'),
      maxBps?: int32(name='MaxBps'),
      maxPps?: int32(name='MaxPps'),
      pps?: int32(name='Pps'),
    }
  ](name='Threshold')
  }(name='Thresholds'),
}

model DescribeDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosThresholdResponseBody(name='body'),
}

async function describeDdosThreshold(request: DescribeDdosThresholdRequest): DescribeDdosThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDdosThreshold', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  ddosStatus?: string(name='DdosStatus', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceIp?: string(name='InstanceIp', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model DescribeInstanceResponseBody = {
  instanceList?: {
    instance?: [ 
    {
      blackholeThreshold?: int32(name='BlackholeThreshold'),
      defenseBpsThreshold?: int32(name='DefenseBpsThreshold'),
      defensePpsThreshold?: int32(name='DefensePpsThreshold'),
      elasticThreshold?: int32(name='ElasticThreshold'),
      instanceId?: string(name='InstanceId'),
      instanceIp?: string(name='InstanceIp'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      ipVersion?: string(name='IpVersion'),
      isBgppack?: boolean(name='IsBgppack'),
    }
  ](name='Instance')
  }(name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceIpAddressRequest {
  currentPage?: int32(name='CurrentPage', position='Query'),
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  ddosStatus?: string(name='DdosStatus', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceIp?: string(name='InstanceIp', position='Query'),
  instanceName?: string(name='InstanceName', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model DescribeInstanceIpAddressResponseBody = {
  instanceList?: [ 
    {
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      ipAddressConfig?: [ 
        {
          blackholeThreshold?: int32(name='BlackholeThreshold'),
          defenseBpsThreshold?: int32(name='DefenseBpsThreshold'),
          defensePpsThreshold?: int32(name='DefensePpsThreshold'),
          elasticThreshold?: int32(name='ElasticThreshold'),
          instanceIp?: string(name='InstanceIp'),
          ipStatus?: string(name='IpStatus'),
          ipVersion?: string(name='IpVersion'),
          isBgppack?: boolean(name='IsBgppack'),
          regionId?: string(name='RegionId'),
        }
      ](name='IpAddressConfig'),
    }
  ](name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeInstanceIpAddressResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceIpAddressResponseBody(name='body'),
}

async function describeInstanceIpAddress(request: DescribeInstanceIpAddressRequest): DescribeInstanceIpAddressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceIpAddress', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpDdosThresholdRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  ddosType: string(name='DdosType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetIp: string(name='InternetIp', position='Query'),
}

model DescribeIpDdosThresholdResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  threshold?: {
    bps?: int32(name='Bps'),
    ddosType?: string(name='DdosType'),
    elasticBps?: int32(name='ElasticBps'),
    instanceId?: string(name='InstanceId'),
    internetIp?: string(name='InternetIp'),
    isAuto?: boolean(name='IsAuto'),
    maxBps?: int32(name='MaxBps'),
    maxPps?: int32(name='MaxPps'),
    pps?: int32(name='Pps'),
  }(name='Threshold'),
}

model DescribeIpDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpDdosThresholdResponseBody(name='body'),
}

async function describeIpDdosThreshold(request: DescribeIpDdosThresholdRequest): DescribeIpDdosThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpDdosThreshold', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpLocationServiceRequest {
  internetIp: string(name='InternetIp', position='Query'),
}

model DescribeIpLocationServiceResponseBody = {
  instance?: {
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    instanceType?: string(name='InstanceType'),
    internetIp?: string(name='InternetIp'),
    region?: string(name='Region'),
  }(name='Instance', description='instance model'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DescribeIpLocationServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpLocationServiceResponseBody(name='body'),
}

async function describeIpLocationService(request: DescribeIpLocationServiceRequest): DescribeIpLocationServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpLocationService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionEnName?: string(name='RegionEnName'),
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      regionNoAlias?: string(name='RegionNoAlias'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDdosStatusRequest {
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetIp?: string(name='InternetIp', position='Query'),
}

model ModifyDdosStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDdosStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDdosStatusResponseBody(name='body'),
}

async function modifyDdosStatus(request: ModifyDdosStatusRequest): ModifyDdosStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDdosStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefenseThresholdRequest {
  bps?: int32(name='Bps', position='Query'),
  ddosRegionId: string(name='DdosRegionId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  internetIp?: string(name='InternetIp', position='Query'),
  isAuto?: boolean(name='IsAuto', position='Query'),
  pps?: int32(name='Pps', position='Query'),
}

model ModifyDefenseThresholdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseThresholdResponseBody(name='body'),
}

async function modifyDefenseThreshold(request: ModifyDefenseThresholdRequest): ModifyDefenseThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefenseThreshold', 'POST', '/', 'json', false, 'json', request);
}

