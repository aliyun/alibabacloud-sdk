/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  

  checkConfig(config);
  @endpoint = getEndpoint('antiddos-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model DescribeBgpPackByIpRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  ip?: string(name='Ip'),
}

model DescribeBgpPackByIpResponseBody = {
  ddosbgpInfo?: {
    baseThreshold?: int32(name='BaseThreshold'),
    ddosbgpInstanceId?: string(name='DdosbgpInstanceId'),
    elasticThreshold?: int32(name='ElasticThreshold'),
    expireTime?: long(name='ExpireTime'),
    ip?: string(name='Ip'),
  }(name='DdosbgpInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeBgpPackByIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBgpPackByIpResponseBody(name='body'),
}

async function describeBgpPackByIpWithOptions(request: DescribeBgpPackByIpRequest, runtime: Util.RuntimeOptions): DescribeBgpPackByIpResponse {
  Util.validateModel(request);
  var query = {};
  query["DdosRegionId"] = request.ddosRegionId;
  query["Ip"] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBgpPackByIp',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBgpPackByIp(request: DescribeBgpPackByIpRequest): DescribeBgpPackByIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpPackByIpWithOptions(request, runtime);
}

model DescribeCapRequest {
  begTime?: long(name='BegTime'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
}

model DescribeCapResponseBody = {
  capUrl?: {
    url?: string(name='Url'),
  }(name='CapUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeCapResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCapResponseBody(name='body'),
}

async function describeCapWithOptions(request: DescribeCapRequest, runtime: Util.RuntimeOptions): DescribeCapResponse {
  Util.validateModel(request);
  var query = {};
  query["BegTime"] = request.begTime;
  query["DdosRegionId"] = request.ddosRegionId;
  query["InstanceId"] = request.instanceId;
  query["InstanceType"] = request.instanceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCap',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCap(request: DescribeCapRequest): DescribeCapResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapWithOptions(request, runtime);
}

model DescribeDdosCountRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDdosCountResponseBody = {
  ddosCount?: {
    blackholeCount?: int32(name='BlackholeCount'),
    defenseCount?: int32(name='DefenseCount'),
    instacenCount?: int32(name='InstacenCount'),
  }(name='DdosCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDdosCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCountResponseBody(name='body'),
}

async function describeDdosCountWithOptions(request: DescribeDdosCountRequest, runtime: Util.RuntimeOptions): DescribeDdosCountResponse {
  Util.validateModel(request);
  var query = {};
  query["DdosRegionId"] = request.ddosRegionId;
  query["InstanceType"] = request.instanceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosCount',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosCount(request: DescribeDdosCountRequest): DescribeDdosCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCountWithOptions(request, runtime);
}

model DescribeDdosCreditRequest {
  ddosRegionId?: string(name='DdosRegionId'),
}

model DescribeDdosCreditResponseBody = {
  ddosCredit?: {
    blackholeTime?: int32(name='BlackholeTime'),
    score?: int32(name='Score'),
    scoreLevel?: string(name='ScoreLevel'),
  }(name='DdosCredit'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDdosCreditResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosCreditResponseBody(name='body'),
}

async function describeDdosCreditWithOptions(request: DescribeDdosCreditRequest, runtime: Util.RuntimeOptions): DescribeDdosCreditResponse {
  Util.validateModel(request);
  var query = {};
  query["DdosRegionId"] = request.ddosRegionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosCredit',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosCredit(request: DescribeDdosCreditRequest): DescribeDdosCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCreditWithOptions(request, runtime);
}

model DescribeDdosEventListRequest {
  currentPage?: int32(name='CurrentPage'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDdosEventListResponseBody = {
  ddosEventList?: {
    ddosEvent?: [ 
    {
      ddosStatus?: string(name='DdosStatus'),
      ddosType?: string(name='DdosType'),
      delayTime?: long(name='DelayTime'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      unBlackholeTime?: long(name='UnBlackholeTime'),
    }
  ](name='DdosEvent')
  }(name='DdosEventList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDdosEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosEventListResponseBody(name='body'),
}

async function describeDdosEventListWithOptions(request: DescribeDdosEventListRequest, runtime: Util.RuntimeOptions): DescribeDdosEventListResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["DdosRegionId"] = request.ddosRegionId;
  query["InstanceId"] = request.instanceId;
  query["InstanceType"] = request.instanceType;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosEventList',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosEventList(request: DescribeDdosEventListRequest): DescribeDdosEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventListWithOptions(request, runtime);
}

model DescribeDdosThresholdRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  ddosType?: string(name='DdosType'),
  instanceIds?: [ string ](name='InstanceIds'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  thresholds?: {
    threshold?: [ 
    {
      bps?: int32(name='Bps'),
      ddosType?: string(name='DdosType'),
      elasticBps?: int32(name='ElasticBps'),
      instanceId?: string(name='InstanceId'),
      isAuto?: boolean(name='IsAuto'),
      maxBps?: int32(name='MaxBps'),
      maxPps?: int32(name='MaxPps'),
      pps?: int32(name='Pps'),
    }
  ](name='Threshold')
  }(name='Thresholds'),
}

model DescribeDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDdosThresholdResponseBody(name='body'),
}

async function describeDdosThresholdWithOptions(request: DescribeDdosThresholdRequest, runtime: Util.RuntimeOptions): DescribeDdosThresholdResponse {
  Util.validateModel(request);
  var query = {};
  query["DdosRegionId"] = request.ddosRegionId;
  query["DdosType"] = request.ddosType;
  query["InstanceIds"] = request.instanceIds;
  query["InstanceType"] = request.instanceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosThreshold(request: DescribeDdosThresholdRequest): DescribeDdosThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosThresholdWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  currentPage?: int32(name='CurrentPage'),
  ddosRegionId?: string(name='DdosRegionId'),
  ddosStatus?: string(name='DdosStatus'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  pageSize?: int32(name='PageSize'),
}

model DescribeInstanceResponseBody = {
  instanceList?: {
    instance?: [ 
    {
      blackholeThreshold?: int32(name='BlackholeThreshold'),
      defenseBpsThreshold?: int32(name='DefenseBpsThreshold'),
      defensePpsThreshold?: int32(name='DefensePpsThreshold'),
      elasticThreshold?: int32(name='ElasticThreshold'),
      instanceId?: string(name='InstanceId'),
      instanceIp?: string(name='InstanceIp'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      ipVersion?: string(name='IpVersion'),
      isBgppack?: boolean(name='IsBgppack'),
    }
  ](name='Instance')
  }(name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["DdosRegionId"] = request.ddosRegionId;
  query["DdosStatus"] = request.ddosStatus;
  query["InstanceId"] = request.instanceId;
  query["InstanceIp"] = request.instanceIp;
  query["InstanceName"] = request.instanceName;
  query["InstanceType"] = request.instanceType;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionEnName?: string(name='RegionEnName'),
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      regionNoAlias?: string(name='RegionNoAlias'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model ModifyDdosStatusRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
}

model ModifyDdosStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDdosStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDdosStatusResponseBody(name='body'),
}

async function modifyDdosStatusWithOptions(request: ModifyDdosStatusRequest, runtime: Util.RuntimeOptions): ModifyDdosStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["DdosRegionId"] = request.ddosRegionId;
  query["InstanceId"] = request.instanceId;
  query["InstanceType"] = request.instanceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDdosStatus',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDdosStatus(request: ModifyDdosStatusRequest): ModifyDdosStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDdosStatusWithOptions(request, runtime);
}

model ModifyDefenseThresholdRequest {
  bps?: int32(name='Bps'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  isAuto?: boolean(name='IsAuto'),
  pps?: int32(name='Pps'),
}

model ModifyDefenseThresholdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDefenseThresholdResponseBody(name='body'),
}

async function modifyDefenseThresholdWithOptions(request: ModifyDefenseThresholdRequest, runtime: Util.RuntimeOptions): ModifyDefenseThresholdResponse {
  Util.validateModel(request);
  var query = {};
  query["Bps"] = request.bps;
  query["DdosRegionId"] = request.ddosRegionId;
  query["InstanceId"] = request.instanceId;
  query["InstanceType"] = request.instanceType;
  query["IsAuto"] = request.isAuto;
  query["Pps"] = request.pps;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseThreshold(request: ModifyDefenseThresholdRequest): ModifyDefenseThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseThresholdWithOptions(request, runtime);
}

