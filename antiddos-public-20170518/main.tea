/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'antiddos.aliyuncs.com',
    cn-beijing = 'antiddos.aliyuncs.com',
    cn-zhangjiakou = 'antiddos-openapi.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'antiddos-openapi.cn-huhehaote.aliyuncs.com',
    cn-wulanchabu = 'antiddos-openapi.cn-wulanchabu.aliyuncs.com',
    cn-hangzhou = 'antiddos.aliyuncs.com',
    cn-shanghai = 'antiddos.aliyuncs.com',
    cn-shenzhen = 'antiddos.aliyuncs.com',
    cn-heyuan = 'antiddos-openapi.cn-heyuan.aliyuncs.com',
    cn-guangzhou = 'antiddos-openapi.cn-guangzhou.aliyuncs.com',
    cn-chengdu = 'antiddos-openapi.cn-chengdu.aliyuncs.com',
    cn-hongkong = 'antiddos.aliyuncs.com',
    ap-northeast-1 = 'antiddos-openapi.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'antiddos.aliyuncs.com',
    ap-southeast-2 = 'antiddos-openapi.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'antiddos-openapi.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'antiddos-openapi.ap-southeast-5.aliyuncs.com',
    us-east-1 = 'antiddos.aliyuncs.com',
    us-west-1 = 'antiddos.aliyuncs.com',
    eu-west-1 = 'antiddos-openapi.eu-west-1.aliyuncs.com',
    eu-central-1 = 'antiddos-openapi.eu-central-1.aliyuncs.com',
    ap-south-1 = 'antiddos-openapi.ap-south-1.aliyuncs.com',
    me-east-1 = 'antiddos-openapi.me-east-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'antiddos.aliyuncs.com',
    cn-shenzhen-finance-1 = 'antiddos.aliyuncs.com',
    cn-north-2-gov-1 = 'antiddos.aliyuncs.com',
    ap-northeast-2-pop = 'antiddos.aliyuncs.com',
    cn-beijing-finance-1 = 'antiddos.aliyuncs.com',
    cn-beijing-finance-pop = 'antiddos.aliyuncs.com',
    cn-beijing-gov-1 = 'antiddos.aliyuncs.com',
    cn-beijing-nu16-b01 = 'antiddos.aliyuncs.com',
    cn-edge-1 = 'antiddos.aliyuncs.com',
    cn-fujian = 'antiddos.aliyuncs.com',
    cn-haidian-cm12-c01 = 'antiddos.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'antiddos.aliyuncs.com',
    cn-hangzhou-finance = 'antiddos.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'antiddos.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'antiddos.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'antiddos.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'antiddos.aliyuncs.com',
    cn-hangzhou-test-306 = 'antiddos.aliyuncs.com',
    cn-hongkong-finance-pop = 'antiddos.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'antiddos.aliyuncs.com',
    cn-qingdao-nebula = 'antiddos.aliyuncs.com',
    cn-shanghai-et15-b01 = 'antiddos.aliyuncs.com',
    cn-shanghai-et2-b01 = 'antiddos.aliyuncs.com',
    cn-shanghai-inner = 'antiddos.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'antiddos.aliyuncs.com',
    cn-shenzhen-inner = 'antiddos.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'antiddos.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'antiddos.aliyuncs.com',
    cn-wuhan = 'antiddos.aliyuncs.com',
    cn-yushanfang = 'antiddos.aliyuncs.com',
    cn-zhangbei = 'antiddos.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'antiddos.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'antiddos-openapi.cn-zhangjiakou.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'antiddos.aliyuncs.com',
    eu-west-1-oxs = 'antiddos.aliyuncs.com',
    rus-west-1-pop = 'antiddos.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('antiddos-public', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DescribeBgpPackByIpRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  ip?: string(name='Ip'),
}

model DescribeBgpPackByIpResponseBody = {
  code?: int32(name='Code'),
  ddosbgpInfo?: {
    baseThreshold?: int32(name='BaseThreshold'),
    ddosbgpInstanceId?: string(name='DdosbgpInstanceId'),
    elasticThreshold?: int32(name='ElasticThreshold'),
    expireTime?: long(name='ExpireTime'),
    ip?: string(name='Ip'),
  }(name='DdosbgpInfo'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBgpPackByIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBgpPackByIpResponseBody(name='body'),
}

async function describeBgpPackByIpWithOptions(request: DescribeBgpPackByIpRequest, runtime: Util.RuntimeOptions): DescribeBgpPackByIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBgpPackByIp',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBgpPackByIp(request: DescribeBgpPackByIpRequest): DescribeBgpPackByIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBgpPackByIpWithOptions(request, runtime);
}

model DescribeCapRequest {
  begTime?: long(name='BegTime'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
}

model DescribeCapResponseBody = {
  capUrl?: {
    url?: string(name='Url'),
  }(name='CapUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeCapResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCapResponseBody(name='body'),
}

async function describeCapWithOptions(request: DescribeCapRequest, runtime: Util.RuntimeOptions): DescribeCapResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.begTime)) {
    query['BegTime'] = request.begTime;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCap',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCap(request: DescribeCapRequest): DescribeCapResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCapWithOptions(request, runtime);
}

model DescribeDdosCountRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDdosCountResponseBody = {
  ddosCount?: {
    blackholeCount?: int32(name='BlackholeCount'),
    defenseCount?: int32(name='DefenseCount'),
    instacenCount?: int32(name='InstacenCount'),
  }(name='DdosCount'),
  requestId?: string(name='RequestId'),
}

model DescribeDdosCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDdosCountResponseBody(name='body'),
}

async function describeDdosCountWithOptions(request: DescribeDdosCountRequest, runtime: Util.RuntimeOptions): DescribeDdosCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosCount',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosCount(request: DescribeDdosCountRequest): DescribeDdosCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCountWithOptions(request, runtime);
}

model DescribeDdosCreditRequest {
  ddosRegionId?: string(name='DdosRegionId'),
}

model DescribeDdosCreditResponseBody = {
  ddosCredit?: {
    blackholeTime?: int32(name='BlackholeTime'),
    score?: int32(name='Score'),
    scoreLevel?: string(name='ScoreLevel'),
  }(name='DdosCredit'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDdosCreditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDdosCreditResponseBody(name='body'),
}

async function describeDdosCreditWithOptions(request: DescribeDdosCreditRequest, runtime: Util.RuntimeOptions): DescribeDdosCreditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosCredit',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosCredit(request: DescribeDdosCreditRequest): DescribeDdosCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosCreditWithOptions(request, runtime);
}

model DescribeDdosEventListRequest {
  currentPage?: int32(name='CurrentPage'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDdosEventListResponseBody = {
  ddosEventList?: {
    ddosEvent?: [ 
    {
      ddosStatus?: string(name='DdosStatus'),
      ddosType?: string(name='DdosType'),
      delayTime?: long(name='DelayTime'),
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      unBlackholeTime?: long(name='UnBlackholeTime'),
    }
  ](name='DdosEvent')
  }(name='DdosEventList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeDdosEventListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDdosEventListResponseBody(name='body'),
}

async function describeDdosEventListWithOptions(request: DescribeDdosEventListRequest, runtime: Util.RuntimeOptions): DescribeDdosEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosEventList',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosEventList(request: DescribeDdosEventListRequest): DescribeDdosEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosEventListWithOptions(request, runtime);
}

model DescribeDdosThresholdRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  ddosType?: string(name='DdosType'),
  instanceIds?: [ string ](name='InstanceIds'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  thresholds?: {
    threshold?: [ 
    {
      bps?: int32(name='Bps'),
      ddosType?: string(name='DdosType'),
      elasticBps?: int32(name='ElasticBps'),
      instanceId?: string(name='InstanceId'),
      internetIp?: string(name='InternetIp'),
      isAuto?: boolean(name='IsAuto'),
      maxBps?: int32(name='MaxBps'),
      maxPps?: int32(name='MaxPps'),
      pps?: int32(name='Pps'),
    }
  ](name='Threshold')
  }(name='Thresholds'),
}

model DescribeDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDdosThresholdResponseBody(name='body'),
}

async function describeDdosThresholdWithOptions(request: DescribeDdosThresholdRequest, runtime: Util.RuntimeOptions): DescribeDdosThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.ddosType)) {
    query['DdosType'] = request.ddosType;
  }
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDdosThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDdosThreshold(request: DescribeDdosThresholdRequest): DescribeDdosThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDdosThresholdWithOptions(request, runtime);
}

model DescribeInstanceRequest {
  currentPage?: int32(name='CurrentPage'),
  ddosRegionId?: string(name='DdosRegionId'),
  ddosStatus?: string(name='DdosStatus'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  pageSize?: int32(name='PageSize'),
}

model DescribeInstanceResponseBody = {
  instanceList?: {
    instance?: [ 
    {
      blackholeThreshold?: int32(name='BlackholeThreshold'),
      defenseBpsThreshold?: int32(name='DefenseBpsThreshold'),
      defensePpsThreshold?: int32(name='DefensePpsThreshold'),
      elasticThreshold?: int32(name='ElasticThreshold'),
      instanceId?: string(name='InstanceId'),
      instanceIp?: string(name='InstanceIp'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      ipVersion?: string(name='IpVersion'),
      isBgppack?: boolean(name='IsBgppack'),
    }
  ](name='Instance')
  }(name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstanceWithOptions(request: DescribeInstanceRequest, runtime: Util.RuntimeOptions): DescribeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.ddosStatus)) {
    query['DdosStatus'] = request.ddosStatus;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceIp)) {
    query['InstanceIp'] = request.instanceIp;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstance',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceWithOptions(request, runtime);
}

model DescribeInstanceIpAddressRequest {
  currentPage?: int32(name='CurrentPage'),
  ddosRegionId?: string(name='DdosRegionId'),
  ddosStatus?: string(name='DdosStatus'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instanceName?: string(name='InstanceName'),
  instanceType?: string(name='InstanceType'),
  pageSize?: int32(name='PageSize'),
}

model DescribeInstanceIpAddressResponseBody = {
  instanceList?: [ 
    {
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      instanceStatus?: string(name='InstanceStatus'),
      instanceType?: string(name='InstanceType'),
      ipAddressConfig?: [ 
        {
          blackholeThreshold?: int32(name='BlackholeThreshold'),
          defenseBpsThreshold?: int32(name='DefenseBpsThreshold'),
          defensePpsThreshold?: int32(name='DefensePpsThreshold'),
          elasticThreshold?: int32(name='ElasticThreshold'),
          instanceIp?: string(name='InstanceIp'),
          ipStatus?: string(name='IpStatus'),
          ipVersion?: string(name='IpVersion'),
          isBgppack?: boolean(name='IsBgppack'),
          regionId?: string(name='RegionId'),
        }
      ](name='IpAddressConfig'),
    }
  ](name='InstanceList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model DescribeInstanceIpAddressResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceIpAddressResponseBody(name='body'),
}

async function describeInstanceIpAddressWithOptions(request: DescribeInstanceIpAddressRequest, runtime: Util.RuntimeOptions): DescribeInstanceIpAddressResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.ddosStatus)) {
    query['DdosStatus'] = request.ddosStatus;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceIp)) {
    query['InstanceIp'] = request.instanceIp;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceIpAddress',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceIpAddress(request: DescribeInstanceIpAddressRequest): DescribeInstanceIpAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceIpAddressWithOptions(request, runtime);
}

model DescribeIpDdosThresholdRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  ddosType?: string(name='DdosType'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
}

model DescribeIpDdosThresholdResponseBody = {
  requestId?: string(name='RequestId'),
  threshold?: {
    bps?: int32(name='Bps'),
    ddosType?: string(name='DdosType'),
    elasticBps?: int32(name='ElasticBps'),
    instanceId?: string(name='InstanceId'),
    internetIp?: string(name='InternetIp'),
    isAuto?: boolean(name='IsAuto'),
    maxBps?: int32(name='MaxBps'),
    maxPps?: int32(name='MaxPps'),
    pps?: int32(name='Pps'),
  }(name='Threshold'),
}

model DescribeIpDdosThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpDdosThresholdResponseBody(name='body'),
}

async function describeIpDdosThresholdWithOptions(request: DescribeIpDdosThresholdRequest, runtime: Util.RuntimeOptions): DescribeIpDdosThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.ddosType)) {
    query['DdosType'] = request.ddosType;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpDdosThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpDdosThreshold(request: DescribeIpDdosThresholdRequest): DescribeIpDdosThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpDdosThresholdWithOptions(request, runtime);
}

model DescribeIpLocationServiceRequest {
  internetIp?: string(name='InternetIp'),
}

model DescribeIpLocationServiceResponseBody = {
  instance?: {
    instanceId?: string(name='InstanceId'),
    instanceName?: string(name='InstanceName'),
    instanceType?: string(name='InstanceType'),
    internetIp?: string(name='InternetIp'),
    region?: string(name='Region'),
  }(name='Instance'),
  requestId?: string(name='RequestId'),
}

model DescribeIpLocationServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIpLocationServiceResponseBody(name='body'),
}

async function describeIpLocationServiceWithOptions(request: DescribeIpLocationServiceRequest, runtime: Util.RuntimeOptions): DescribeIpLocationServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIpLocationService',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIpLocationService(request: DescribeIpLocationServiceRequest): DescribeIpLocationServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpLocationServiceWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      regionEnName?: string(name='RegionEnName'),
      regionName?: string(name='RegionName'),
      regionNo?: string(name='RegionNo'),
      regionNoAlias?: string(name='RegionNoAlias'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model ModifyDdosStatusRequest {
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
}

model ModifyDdosStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDdosStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDdosStatusResponseBody(name='body'),
}

async function modifyDdosStatusWithOptions(request: ModifyDdosStatusRequest, runtime: Util.RuntimeOptions): ModifyDdosStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDdosStatus',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDdosStatus(request: ModifyDdosStatusRequest): ModifyDdosStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDdosStatusWithOptions(request, runtime);
}

model ModifyDefenseThresholdRequest {
  bps?: int32(name='Bps'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
  isAuto?: boolean(name='IsAuto'),
  pps?: int32(name='Pps'),
}

model ModifyDefenseThresholdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefenseThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefenseThresholdResponseBody(name='body'),
}

async function modifyDefenseThresholdWithOptions(request: ModifyDefenseThresholdRequest, runtime: Util.RuntimeOptions): ModifyDefenseThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bps)) {
    query['Bps'] = request.bps;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  if (!Util.isUnset(request.isAuto)) {
    query['IsAuto'] = request.isAuto;
  }
  if (!Util.isUnset(request.pps)) {
    query['Pps'] = request.pps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefenseThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDefenseThreshold(request: ModifyDefenseThresholdRequest): ModifyDefenseThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefenseThresholdWithOptions(request, runtime);
}

model ModifyIpDefenseThresholdRequest {
  bps?: int32(name='Bps'),
  ddosRegionId?: string(name='DdosRegionId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  internetIp?: string(name='InternetIp'),
  isAuto?: boolean(name='IsAuto'),
  pps?: int32(name='Pps'),
}

model ModifyIpDefenseThresholdResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpDefenseThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyIpDefenseThresholdResponseBody(name='body'),
}

async function modifyIpDefenseThresholdWithOptions(request: ModifyIpDefenseThresholdRequest, runtime: Util.RuntimeOptions): ModifyIpDefenseThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bps)) {
    query['Bps'] = request.bps;
  }
  if (!Util.isUnset(request.ddosRegionId)) {
    query['DdosRegionId'] = request.ddosRegionId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.internetIp)) {
    query['InternetIp'] = request.internetIp;
  }
  if (!Util.isUnset(request.isAuto)) {
    query['IsAuto'] = request.isAuto;
  }
  if (!Util.isUnset(request.pps)) {
    query['Pps'] = request.pps;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpDefenseThreshold',
    version = '2017-05-18',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyIpDefenseThreshold(request: ModifyIpDefenseThresholdRequest): ModifyIpDefenseThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpDefenseThresholdWithOptions(request, runtime);
}

