/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('intelligentcreation', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActualDeductResourceCmd {
  cost?: long(name='cost', example='60'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  taskId?: string(name='taskId', example='12249732894'),
}

model ActualDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
}

model DirectDeductResourceCmd {
  accountId?: string(name='accountId', example='123123424'),
  cost?: long(name='cost', example='60'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  resourceType?: long(name='resourceType'),
  subAccountId?: string(name='subAccountId', example='123123424'),
  token?: string(name='token', example='dfshskdfjsdlfjafjls'),
}

model DirectDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
}

model ExpectDeductResourceCmd {
  accountId?: string(name='accountId', example='123123424'),
  cost?: long(name='cost', example='60'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  resourceType?: long(name='resourceType'),
  subAccountId?: string(name='subAccountId', example='123123424'),
  token?: string(name='token', example='dfshskdfjsdlfjafjls'),
}

model ExpectDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
  taskId?: string(name='taskId'),
}

model ActualDeductResourceRequest {
  body?: ActualDeductResourceCmd(name='body'),
}

model ActualDeductResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActualDeductResourceResult  
}

async function actualDeductResourceWithOptions(request: ActualDeductResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ActualDeductResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ActualDeductResource',
    version = '2024-01-18',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/v1/digital-human/commands/actual-deduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function actualDeductResource(request: ActualDeductResourceRequest): ActualDeductResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return actualDeductResourceWithOptions(request, headers, runtime);
}

model DirectDeductResourceRequest {
  body?: DirectDeductResourceCmd(name='body'),
}

model DirectDeductResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DirectDeductResourceResult  
}

async function directDeductResourceWithOptions(request: DirectDeductResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DirectDeductResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'DirectDeductResource',
    version = '2024-01-18',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/v1/digital-human/commands/direct-deduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function directDeductResource(request: DirectDeductResourceRequest): DirectDeductResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return directDeductResourceWithOptions(request, headers, runtime);
}

model ExpectDeductResourceRequest {
  body?: ExpectDeductResourceCmd(name='body'),
}

model ExpectDeductResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ExpectDeductResourceResult  
}

async function expectDeductResourceWithOptions(request: ExpectDeductResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ExpectDeductResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'ExpectDeductResource',
    version = '2024-01-18',
    protocol = 'HTTPS',
    pathname = `/yic/yic-console/v1/digital-human/commands/expect-deduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function expectDeductResource(request: ExpectDeductResourceRequest): ExpectDeductResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return expectDeductResourceWithOptions(request, headers, runtime);
}

