/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IntelligentCreation';
  @version = '2024-01-18';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActualDeductResourceCmd {
  cost: long(name='cost', example='60'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  taskId: string(name='taskId', example='12249732894'),
}

model ActualDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
}

model DigitalHumanLiveBroadcastQACmd {
  accountId: string(name='accountId'),
  history?: [ 
    {
      bot: string(name='bot'),
      user: string(name='user'),
    }
  ](name='history'),
  question: string(name='question'),
  sessionId?: string(name='sessionId'),
  stream?: boolean(name='stream'),
  subAccountId?: string(name='subAccountId'),
}

model DigitalHumanLiveBroadcastQAResult {
  content?: string(name='content'),
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  sessionId?: string(name='sessionId'),
  success?: boolean(name='success'),
}

model DirectDeductResourceCmd {
  accountId: string(name='accountId', example='123123424'),
  cost: long(name='cost', example='60'),
  deductScene?: string(name='deductScene', example='0,1,2,201,3,4'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  resourceType: long(name='resourceType'),
  subAccountId: string(name='subAccountId', example='123123424'),
  token: string(name='token', example='dfshskdfjsdlfjafjls'),
}

model DirectDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
}

model ExpectDeductResourceCmd {
  accountId: string(name='accountId', example='123123424'),
  cost: long(name='cost', example='60'),
  extraInfo?: string(name='extraInfo', example='12249732894'),
  idempotentId?: string(name='idempotentId', example='28274623764834'),
  resourceType: long(name='resourceType'),
  subAccountId: string(name='subAccountId', example='123123424'),
  token: string(name='token', example='dfshskdfjsdlfjafjls'),
}

model ExpectDeductResourceResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  success?: boolean(name='success'),
  taskId?: string(name='taskId'),
}

model SubmitBulletQuestionsCmd {
  accountId: string(name='accountId'),
  questions: [ 
    {
      content: string(name='content'),
      id: string(name='id'),
      time: long(name='time'),
      username?: string(name='username'),
    }
  ](name='questions'),
  roomId?: string(name='roomId'),
  subAccountId?: string(name='subAccountId'),
}

model SubmitBulletQuestionsQAResult {
  errorCode?: string(name='errorCode'),
  errorMessage?: string(name='errorMessage'),
  success?: boolean(name='success'),
}

model ActualDeductResourceRequest {
  body?: ActualDeductResourceCmd(name='body', position='Body'),
}

model ActualDeductResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActualDeductResourceResult  
}

async function actualDeductResource(request: ActualDeductResourceRequest): ActualDeductResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ActualDeductResource', 'POST', '/yic/yic-console/v1/digital-human/commands/actual-deduct', 'json', false, 'json', request);
}

model ActualDeductResourcesRequest {
  body?: ActualDeductResourceCmd(name='body', position='Body'),
}

model ActualDeductResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActualDeductResourceResult  
}

async function actualDeductResources(request: ActualDeductResourcesRequest): ActualDeductResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ActualDeductResources', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/actualDeductResources', 'json', false, 'json', request);
}

model CopywritingQARequest {
  accountId: string(name='accountId', example='715307080659124224', position='Query'),
  histories?: [ 
    {
      bot: string(name='bot'),
      user: string(name='user'),
    }
  ](name='histories', shrink='json', position='Query'),
  history?: {
    bot?: string(name='bot', example='ty'),
    user?: string(name='user', example='user1'),
  }(name='history', deprecated='true', shrink='json', position='Query'),
  question: string(name='question', position='Query'),
  sessionId?: string(name='sessionId', example='S-d35e9f70-7381-4bc8-80fa-c4d2174d14b9', position='Query'),
  stream?: boolean(name='stream', example='true', position='Query'),
  subAccountId?: string(name='subAccountId', example='713168672276873216', position='Query'),
}

model CopywritingQAResponseBody = {
  content?: string(name='content'),
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  sessionId?: string(name='sessionId', example='S-f4ef59ee-7219-404a-ac0f-1e149c3f6b41'),
  success?: boolean(name='success', example='True'),
}

model CopywritingQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopywritingQAResponseBody(name='body'),
}

async function copywritingQA(request: CopywritingQARequest): CopywritingQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CopywritingQA', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/copywritingQA', 'json', false, 'json', request);
}

model CopywritingQAV1Request {
  body?: DigitalHumanLiveBroadcastQACmd(name='body', position='Body'),
}

model CopywritingQAV1Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DigitalHumanLiveBroadcastQAResult  
}

async function copywritingQAV1(request: CopywritingQAV1Request): CopywritingQAV1Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CopywritingQAV1', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/copywritingQAV1', 'json', false, 'json', request);
}

model DirectDeductResourceRequest {
  body?: DirectDeductResourceCmd(name='body', position='Body'),
}

model DirectDeductResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DirectDeductResourceResult  
}

async function directDeductResource(request: DirectDeductResourceRequest): DirectDeductResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DirectDeductResource', 'POST', '/yic/yic-console/v1/digital-human/commands/direct-deduct', 'json', false, 'json', request);
}

model DirectDeductResourcesRequest {
  body?: DirectDeductResourceCmd(name='body', position='Body'),
}

model DirectDeductResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DirectDeductResourceResult  
}

async function directDeductResources(request: DirectDeductResourcesRequest): DirectDeductResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DirectDeductResources', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/directDeductResources', 'json', false, 'json', request);
}

model ExpectDeductResourceRequest {
  body?: ExpectDeductResourceCmd(name='body', position='Body'),
}

model ExpectDeductResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpectDeductResourceResult  
}

async function expectDeductResource(request: ExpectDeductResourceRequest): ExpectDeductResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExpectDeductResource', 'POST', '/yic/yic-console/v1/digital-human/commands/expect-deduct', 'json', false, 'json', request);
}

model ExpectDeductResourcesRequest {
  body?: ExpectDeductResourceCmd(name='body', position='Body'),
}

model ExpectDeductResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExpectDeductResourceResult  
}

async function expectDeductResources(request: ExpectDeductResourcesRequest): ExpectDeductResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExpectDeductResources', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/expectDeductResources', 'json', false, 'json', request);
}

model GetRemainResourceRequest {
  accountId: string(name='accountId', example='1868512340232755', position='Query'),
  resourceType: string(name='resourceType', example='1', position='Query'),
  subAccountId?: string(name='subAccountId', example='124214324234234', position='Query'),
}

model GetRemainResourceResponseBody = {
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  remainCount?: int32(name='remainCount', example='12'),
  requestId?: string(name='requestId', description='Id of the request', example='827BF714-19E7-51B5-A434-C21BFEE05983'),
  success?: boolean(name='success', example='True'),
}

model GetRemainResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRemainResourceResponseBody(name='body'),
}

async function getRemainResource(request: GetRemainResourceRequest): GetRemainResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRemainResource', 'GET', '/yic/yic-console/openService/v1/digitalHuman/commands/getRemainResource', 'json', false, 'json', request);
}

model SubmitBulletQuestionsRequest {
  accountId: string(name='accountId', example='715307080659124224', position='Query'),
  questions: [ 
    {
      content: string(name='content'),
      id: string(name='id', example='21007'),
      time?: long(name='time'),
      username?: string(name='username'),
    }
  ](name='questions', description='questions', shrink='json', position='Query'),
  roomId?: string(name='roomId', example='963865', position='Query'),
  subAccountId?: string(name='subAccountId', example='713168672276873216', position='Query'),
}

model SubmitBulletQuestionsResponseBody = {
  errorCode?: string(name='errorCode', example='040002'),
  errorMessage?: string(name='errorMessage', example='Failed to proxy flink ui request, message: An error occurred: Invalid UUID string: jobsn'),
  success?: boolean(name='success', example='True'),
}

model SubmitBulletQuestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBulletQuestionsResponseBody(name='body'),
}

async function submitBulletQuestions(request: SubmitBulletQuestionsRequest): SubmitBulletQuestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitBulletQuestions', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/submitBulletQuestions', 'json', false, 'json', request);
}

model SubmitBulletQuestionsV1Request {
  body?: SubmitBulletQuestionsCmd(name='body', position='Body'),
}

model SubmitBulletQuestionsV1Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitBulletQuestionsQAResult  
}

async function submitBulletQuestionsV1(request: SubmitBulletQuestionsV1Request): SubmitBulletQuestionsV1Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitBulletQuestionsV1', 'POST', '/yic/yic-console/openService/v1/digitalHuman/commands/submitBulletQuestionsV1', 'json', false, 'json', request);
}

