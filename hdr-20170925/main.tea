/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('hdr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ChangeRecoveryPointRequest {
  eipAddressId?: string(name='EipAddressId'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model ChangeRecoveryPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ChangeRecoveryPointResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRecoveryPointResponseBody(name='body'),
}

async function changeRecoveryPointWithOptions(request: ChangeRecoveryPointRequest, runtime: Util.RuntimeOptions): ChangeRecoveryPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeRecoveryPoint',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeRecoveryPoint(request: ChangeRecoveryPointRequest): ChangeRecoveryPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRecoveryPointWithOptions(request, runtime);
}

model CommitFailoverRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model CommitFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CommitFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: CommitFailoverResponseBody(name='body'),
}

async function commitFailoverWithOptions(request: CommitFailoverRequest, runtime: Util.RuntimeOptions): CommitFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommitFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commitFailover(request: CommitFailoverRequest): CommitFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitFailoverWithOptions(request, runtime);
}

model CreateSitePairRequest {
  primarySiteName?: string(name='PrimarySiteName'),
  primarySiteRegionId?: string(name='PrimarySiteRegionId'),
  primarySiteType?: string(name='PrimarySiteType'),
  primarySiteVpcId?: string(name='PrimarySiteVpcId'),
  primarySiteZoneId?: string(name='PrimarySiteZoneId'),
  secondarySiteName?: string(name='SecondarySiteName'),
  secondarySiteRegionId?: string(name='SecondarySiteRegionId'),
  secondarySiteType?: string(name='SecondarySiteType'),
  secondarySiteVpcId?: string(name='SecondarySiteVpcId'),
  secondarySiteZoneId?: string(name='SecondarySiteZoneId'),
  securityToken?: string(name='SecurityToken'),
  sitePairType?: string(name='SitePairType'),
}

model CreateSitePairResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  primarySiteId?: string(name='PrimarySiteId'),
  requestId?: string(name='RequestId'),
  secondarySiteId?: string(name='SecondarySiteId'),
  sitePairId?: string(name='SitePairId'),
  success?: boolean(name='Success'),
}

model CreateSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSitePairResponseBody(name='body'),
}

async function createSitePairWithOptions(request: CreateSitePairRequest, runtime: Util.RuntimeOptions): CreateSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.primarySiteName)) {
    query['PrimarySiteName'] = request.primarySiteName;
  }
  if (!Util.isUnset(request.primarySiteRegionId)) {
    query['PrimarySiteRegionId'] = request.primarySiteRegionId;
  }
  if (!Util.isUnset(request.primarySiteType)) {
    query['PrimarySiteType'] = request.primarySiteType;
  }
  if (!Util.isUnset(request.primarySiteVpcId)) {
    query['PrimarySiteVpcId'] = request.primarySiteVpcId;
  }
  if (!Util.isUnset(request.primarySiteZoneId)) {
    query['PrimarySiteZoneId'] = request.primarySiteZoneId;
  }
  if (!Util.isUnset(request.secondarySiteName)) {
    query['SecondarySiteName'] = request.secondarySiteName;
  }
  if (!Util.isUnset(request.secondarySiteRegionId)) {
    query['SecondarySiteRegionId'] = request.secondarySiteRegionId;
  }
  if (!Util.isUnset(request.secondarySiteType)) {
    query['SecondarySiteType'] = request.secondarySiteType;
  }
  if (!Util.isUnset(request.secondarySiteVpcId)) {
    query['SecondarySiteVpcId'] = request.secondarySiteVpcId;
  }
  if (!Util.isUnset(request.secondarySiteZoneId)) {
    query['SecondarySiteZoneId'] = request.secondarySiteZoneId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairType)) {
    query['SitePairType'] = request.sitePairType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSitePair(request: CreateSitePairRequest): CreateSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSitePairWithOptions(request, runtime);
}

model DeleteSitePairRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DeleteSitePairResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSitePairResponseBody(name='body'),
}

async function deleteSitePairWithOptions(request: DeleteSitePairRequest, runtime: Util.RuntimeOptions): DeleteSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSitePair(request: DeleteSitePairRequest): DeleteSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSitePairWithOptions(request, runtime);
}

model DescribeAvailableInstanceTypesRequest {
  chargeType?: string(name='ChargeType'),
  diskType?: string(name='DiskType'),
  filter?: string(name='Filter'),
  ioOptimized?: boolean(name='IoOptimized'),
  network?: string(name='Network'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  securityToken?: string(name='SecurityToken'),
  sortBy?: string(name='SortBy'),
  userClient?: boolean(name='UserClient'),
  zoneId?: string(name='ZoneId'),
}

model DescribeAvailableInstanceTypesResponseBody = {
  code?: string(name='Code'),
  instanceTypes?: {
    instanceType?: [ string ](name='instanceType')
  }(name='InstanceTypes'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAvailableInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableInstanceTypesResponseBody(name='body'),
}

async function describeAvailableInstanceTypesWithOptions(request: DescribeAvailableInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeAvailableInstanceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.network)) {
    query['Network'] = request.network;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.userClient)) {
    query['UserClient'] = request.userClient;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableInstanceTypes',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableInstanceTypes(request: DescribeAvailableInstanceTypesRequest): DescribeAvailableInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableInstanceTypesWithOptions(request, runtime);
}

model DescribeInfrastructuresRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
}

model DescribeInfrastructuresResponseBody = {
  code?: string(name='Code'),
  infrastructures?: {
    infrastructure?: [ 
    {
      errno?: string(name='Errno'),
      infrastructureId?: string(name='InfrastructureId'),
      ipAddress?: string(name='IpAddress'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='infrastructure')
  }(name='Infrastructures'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInfrastructuresResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInfrastructuresResponseBody(name='body'),
}

async function describeInfrastructuresWithOptions(request: DescribeInfrastructuresRequest, runtime: Util.RuntimeOptions): DescribeInfrastructuresResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInfrastructures',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInfrastructures(request: DescribeInfrastructuresRequest): DescribeInfrastructuresResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInfrastructuresWithOptions(request, runtime);
}

model DescribeRecoveryPointsRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  startTime?: long(name='StartTime'),
}

model DescribeRecoveryPointsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  recoveryPoints?: {
    recoveryPoint?: [ 
    {
      applicationConsistent?: boolean(name='ApplicationConsistent'),
      disableReason?: string(name='DisableReason'),
      disabled?: boolean(name='Disabled'),
      recoveryPointId?: string(name='RecoveryPointId'),
      recoveryPointTime?: long(name='RecoveryPointTime'),
      used?: boolean(name='Used'),
    }
  ](name='recoveryPoint')
  }(name='RecoveryPoints'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRecoveryPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPointsResponseBody(name='body'),
}

async function describeRecoveryPointsWithOptions(request: DescribeRecoveryPointsRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPoints',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPoints(request: DescribeRecoveryPointsRequest): DescribeRecoveryPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPointsWithOptions(request, runtime);
}

model DescribeServerRequest {
  serverId?: string(name='ServerId'),
}

model DescribeServerResponseBody = {
  agentPort?: int32(name='AgentPort'),
  agentVersion?: string(name='AgentVersion'),
  alias?: string(name='Alias'),
  code?: string(name='Code'),
  connectionStatus?: string(name='ConnectionStatus'),
  consistent?: boolean(name='Consistent'),
  cpu?: int32(name='Cpu'),
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
  errno?: string(name='Errno'),
  fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
  fullSyncProgress?: int32(name='FullSyncProgress'),
  fullSyncStartTime?: long(name='FullSyncStartTime'),
  fullSyncTotalSize?: long(name='FullSyncTotalSize'),
  hostname?: string(name='Hostname'),
  incrementalSyncStartTime?: long(name='IncrementalSyncStartTime'),
  ipAddress?: string(name='IpAddress'),
  memory?: long(name='Memory'),
  message?: string(name='Message'),
  operations?: string(name='Operations'),
  originalInstanceId?: string(name='OriginalInstanceId'),
  osDetail?: string(name='OsDetail'),
  osType?: string(name='OsType'),
  primarySiteId?: string(name='PrimarySiteId'),
  recoveredInstanceId?: string(name='RecoveredInstanceId'),
  recoveredIpAddress?: string(name='RecoveredIpAddress'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
  replicationInfrastructureType?: string(name='ReplicationInfrastructureType'),
  replicationNetwork?: string(name='ReplicationNetwork'),
  replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
  replicationUseEssd?: boolean(name='ReplicationUseEssd'),
  replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
  replicationUseSsd?: boolean(name='ReplicationUseSsd'),
  requestId?: string(name='RequestId'),
  rpo?: int32(name='Rpo'),
  secondarySiteId?: string(name='SecondarySiteId'),
  serverId?: string(name='ServerId'),
  sourceGatewayVersion?: string(name='SourceGatewayVersion'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  targetGatewayVersion?: string(name='TargetGatewayVersion'),
  taskId?: string(name='TaskId'),
  testFailoverStatus?: string(name='TestFailoverStatus'),
  testRecoveredInstanceId?: string(name='TestRecoveredInstanceId'),
  testRecoveredInstanceName?: string(name='TestRecoveredInstanceName'),
  testRecoveredIpAddress?: string(name='TestRecoveredIpAddress'),
}

model DescribeServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServerResponseBody(name='body'),
}

async function describeServerWithOptions(request: DescribeServerRequest, runtime: Util.RuntimeOptions): DescribeServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServer(request: DescribeServerRequest): DescribeServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerWithOptions(request, runtime);
}

model DescribeServersRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  serverIds?: string(name='ServerIds'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeServersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  servers?: {
    server?: [ 
    {
      agentPort?: int32(name='AgentPort'),
      agentVersion?: string(name='AgentVersion'),
      alias?: string(name='Alias'),
      connectionStatus?: string(name='ConnectionStatus'),
      consistent?: boolean(name='Consistent'),
      cpu?: int32(name='Cpu'),
      crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
      errno?: string(name='Errno'),
      fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
      fullSyncProgress?: int32(name='FullSyncProgress'),
      fullSyncStartTime?: long(name='FullSyncStartTime'),
      fullSyncTotalSize?: long(name='FullSyncTotalSize'),
      hostname?: string(name='Hostname'),
      incrementalSyncStartTime?: long(name='IncrementalSyncStartTime'),
      instanceId?: string(name='InstanceId'),
      ipAddress?: string(name='IpAddress'),
      memory?: long(name='Memory'),
      operations?: string(name='Operations'),
      originalInstanceId?: string(name='OriginalInstanceId'),
      osDetail?: string(name='OsDetail'),
      osType?: string(name='OsType'),
      primarySiteId?: string(name='PrimarySiteId'),
      recoveredInstanceId?: string(name='RecoveredInstanceId'),
      recoveredInstanceName?: string(name='RecoveredInstanceName'),
      recoveredIpAddress?: string(name='RecoveredIpAddress'),
      recoveryCpu?: int32(name='RecoveryCpu'),
      recoveryInstanceName?: string(name='RecoveryInstanceName'),
      recoveryInstanceType?: string(name='RecoveryInstanceType'),
      recoveryIpAddress?: string(name='RecoveryIpAddress'),
      recoveryMemory?: long(name='RecoveryMemory'),
      recoveryNetwork?: string(name='RecoveryNetwork'),
      recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
      recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
      recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
      recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
      recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
      recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
      replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
      replicationInfrastructureType?: string(name='ReplicationInfrastructureType'),
      replicationNetwork?: string(name='ReplicationNetwork'),
      replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
      replicationUseEssd?: boolean(name='ReplicationUseEssd'),
      replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
      replicationUseSsd?: boolean(name='ReplicationUseSsd'),
      rpo?: int32(name='Rpo'),
      secondarySiteId?: string(name='SecondarySiteId'),
      serverId?: string(name='ServerId'),
      sourceGatewayVersion?: string(name='SourceGatewayVersion'),
      status?: string(name='Status'),
      targetGatewayVersion?: string(name='TargetGatewayVersion'),
      taskId?: string(name='TaskId'),
      testFailoverStatus?: string(name='TestFailoverStatus'),
      testRecoveredInstanceId?: string(name='TestRecoveredInstanceId'),
      testRecoveredInstanceName?: string(name='TestRecoveredInstanceName'),
      testRecoveredIpAddress?: string(name='TestRecoveredIpAddress'),
    }
  ](name='server')
  }(name='Servers'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeServersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServersResponseBody(name='body'),
}

async function describeServersWithOptions(request: DescribeServersRequest, runtime: Util.RuntimeOptions): DescribeServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverIds)) {
    query['ServerIds'] = request.serverIds;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServers',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServers(request: DescribeServersRequest): DescribeServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServersWithOptions(request, runtime);
}

model DescribeSiteRequest {
  siteId?: string(name='SiteId'),
}

model DescribeSiteResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  siteId?: string(name='SiteId'),
  success?: boolean(name='Success'),
  type?: string(name='Type'),
  userSecurityGroupId?: string(name='UserSecurityGroupId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteResponseBody(name='body'),
}

async function describeSiteWithOptions(request: DescribeSiteRequest, runtime: Util.RuntimeOptions): DescribeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSite',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSite(request: DescribeSiteRequest): DescribeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSiteWithOptions(request, runtime);
}

model DescribeSitePairRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeSitePairResponseBody = {
  code?: string(name='Code'),
  createdTime?: long(name='CreatedTime'),
  message?: string(name='Message'),
  primarySiteId?: string(name='PrimarySiteId'),
  primarySiteName?: string(name='PrimarySiteName'),
  requestId?: string(name='RequestId'),
  secondarySiteId?: string(name='SecondarySiteId'),
  secondarySiteName?: string(name='SecondarySiteName'),
  sitePairId?: string(name='SitePairId'),
  sitePairType?: string(name='SitePairType'),
  success?: boolean(name='Success'),
  version?: string(name='Version'),
}

model DescribeSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairResponseBody(name='body'),
}

async function describeSitePairWithOptions(request: DescribeSitePairRequest, runtime: Util.RuntimeOptions): DescribeSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePair(request: DescribeSitePairRequest): DescribeSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairWithOptions(request, runtime);
}

model DescribeSitePairsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sitePairType?: string(name='SitePairType'),
}

model DescribeSitePairsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  sitePairs?: {
    sitePair?: [ 
    {
      cloudSiteName?: string(name='CloudSiteName'),
      createdTime?: long(name='CreatedTime'),
      localSiteName?: string(name='LocalSiteName'),
      primarySiteId?: string(name='PrimarySiteId'),
      primarySiteName?: string(name='PrimarySiteName'),
      replicationStatistics?: {
        critical?: long(name='Critical'),
        healthy?: long(name='Healthy'),
        notApplicable?: long(name='NotApplicable'),
        warning?: long(name='Warning'),
      }(name='ReplicationStatistics'),
      secondarySiteId?: string(name='SecondarySiteId'),
      secondarySiteName?: string(name='SecondarySiteName'),
      serverCount?: int32(name='ServerCount'),
      sitePairId?: string(name='SitePairId'),
      sitePairType?: string(name='SitePairType'),
      version?: string(name='Version'),
    }
  ](name='sitePair')
  }(name='SitePairs'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSitePairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairsResponseBody(name='body'),
}

async function describeSitePairsWithOptions(request: DescribeSitePairsRequest, runtime: Util.RuntimeOptions): DescribeSitePairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sitePairType)) {
    query['SitePairType'] = request.sitePairType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePairs',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePairs(request: DescribeSitePairsRequest): DescribeSitePairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairsWithOptions(request, runtime);
}

model DescribeTaskRequest {
  taskId?: string(name='TaskId'),
}

model DescribeTaskResponseBody = {
  code?: string(name='Code'),
  content?: string(name='Content'),
  createdTime?: long(name='CreatedTime'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  statusCode?: string(name='StatusCode'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  updatedTime?: long(name='UpdatedTime'),
}

model DescribeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskResponseBody(name='body'),
}

async function describeTaskWithOptions(request: DescribeTaskRequest, runtime: Util.RuntimeOptions): DescribeTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTask',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskWithOptions(request, runtime);
}

model DescribeTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
  sortBy?: string(name='SortBy'),
}

model DescribeTasksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      createdTime?: long(name='CreatedTime'),
      name?: string(name='Name'),
      progress?: int32(name='Progress'),
      statusCode?: string(name='StatusCode'),
      targetName?: string(name='TargetName'),
      taskId?: string(name='TaskId'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DisableReplicationRequest {
  serverId?: string(name='ServerId', description='受保护服务器ID'),
}

model DisableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableReplicationResponseBody(name='body'),
}

async function disableReplicationWithOptions(request: DisableReplicationRequest, runtime: Util.RuntimeOptions): DisableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableReplication(request: DisableReplicationRequest): DisableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableReplicationWithOptions(request, runtime);
}

model EnableReplicationRequest {
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy', description='恢复点策略'),
  recoveryNetwork?: string(name='RecoveryNetwork', description='恢复网络VSwitch ID'),
  replicationNetwork?: string(name='ReplicationNetwork', description='复制网络VSwitch ID'),
  replicationUseEssd?: boolean(name='ReplicationUseEssd', description='复影实例是否使用ESSD云盘'),
  replicationUseSsd?: boolean(name='ReplicationUseSsd', description='复影实例是否使用SSD云盘'),
  serverId?: string(name='ServerId', description='受保护服务器ID'),
}

model EnableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableReplicationResponseBody(name='body'),
}

async function enableReplicationWithOptions(request: EnableReplicationRequest, runtime: Util.RuntimeOptions): EnableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.crashConsistentPointPolicy)) {
    query['CrashConsistentPointPolicy'] = request.crashConsistentPointPolicy;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.replicationNetwork)) {
    query['ReplicationNetwork'] = request.replicationNetwork;
  }
  if (!Util.isUnset(request.replicationUseEssd)) {
    query['ReplicationUseEssd'] = request.replicationUseEssd;
  }
  if (!Util.isUnset(request.replicationUseSsd)) {
    query['ReplicationUseSsd'] = request.replicationUseSsd;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableReplication(request: EnableReplicationRequest): EnableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableReplicationWithOptions(request, runtime);
}

model FailbackRequest {
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInfrastructureId?: string(name='RecoveryInfrastructureId'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model FailbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model FailbackResponse = {
  headers: map[string]string(name='headers'),
  body: FailbackResponseBody(name='body'),
}

async function failbackWithOptions(request: FailbackRequest, runtime: Util.RuntimeOptions): FailbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInfrastructureId)) {
    query['RecoveryInfrastructureId'] = request.recoveryInfrastructureId;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Failback',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failback(request: FailbackRequest): FailbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return failbackWithOptions(request, runtime);
}

model ForcedFailoverRequest {
  eipAddressId?: string(name='EipAddressId'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model ForcedFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ForcedFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: ForcedFailoverResponseBody(name='body'),
}

async function forcedFailoverWithOptions(request: ForcedFailoverRequest, runtime: Util.RuntimeOptions): ForcedFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ForcedFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forcedFailover(request: ForcedFailoverRequest): ForcedFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return forcedFailoverWithOptions(request, runtime);
}

model RegisterServersRequest {
  agentPort?: int32(name='AgentPort', description='代理服务端口，默认9080'),
  serverInstancesInfo?: string(name='ServerInstancesInfo', description='注册服务器信息'),
  sitePairId?: string(name='SitePairId', description='站点对ID'),
}

model RegisterServersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model RegisterServersResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterServersResponseBody(name='body'),
}

async function registerServersWithOptions(request: RegisterServersRequest, runtime: Util.RuntimeOptions): RegisterServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentPort)) {
    query['AgentPort'] = request.agentPort;
  }
  if (!Util.isUnset(request.serverInstancesInfo)) {
    query['ServerInstancesInfo'] = request.serverInstancesInfo;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterServers',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerServers(request: RegisterServersRequest): RegisterServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerServersWithOptions(request, runtime);
}

model ReversedDisableReplicationRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model ReversedDisableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReversedDisableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedDisableReplicationResponseBody(name='body'),
}

async function reversedDisableReplicationWithOptions(request: ReversedDisableReplicationRequest, runtime: Util.RuntimeOptions): ReversedDisableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedDisableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedDisableReplication(request: ReversedDisableReplicationRequest): ReversedDisableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedDisableReplicationWithOptions(request, runtime);
}

model ReversedEnableReplicationRequest {
  appConsistentPointPolicy?: string(name='AppConsistentPointPolicy'),
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  replicationComputeResource?: string(name='ReplicationComputeResource'),
  replicationDatastore?: string(name='ReplicationDatastore'),
  replicationDns?: string(name='ReplicationDns'),
  replicationGateway?: string(name='ReplicationGateway'),
  replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
  replicationIpAddress?: string(name='ReplicationIpAddress'),
  replicationLocation?: string(name='ReplicationLocation'),
  replicationNetMask?: string(name='ReplicationNetMask'),
  replicationNetwork?: string(name='ReplicationNetwork'),
  replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
  replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  shadowInstanceType?: string(name='ShadowInstanceType'),
}

model ReversedEnableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ReversedEnableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedEnableReplicationResponseBody(name='body'),
}

async function reversedEnableReplicationWithOptions(request: ReversedEnableReplicationRequest, runtime: Util.RuntimeOptions): ReversedEnableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appConsistentPointPolicy)) {
    query['AppConsistentPointPolicy'] = request.appConsistentPointPolicy;
  }
  if (!Util.isUnset(request.crashConsistentPointPolicy)) {
    query['CrashConsistentPointPolicy'] = request.crashConsistentPointPolicy;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.replicationComputeResource)) {
    query['ReplicationComputeResource'] = request.replicationComputeResource;
  }
  if (!Util.isUnset(request.replicationDatastore)) {
    query['ReplicationDatastore'] = request.replicationDatastore;
  }
  if (!Util.isUnset(request.replicationDns)) {
    query['ReplicationDns'] = request.replicationDns;
  }
  if (!Util.isUnset(request.replicationGateway)) {
    query['ReplicationGateway'] = request.replicationGateway;
  }
  if (!Util.isUnset(request.replicationInfrastructureId)) {
    query['ReplicationInfrastructureId'] = request.replicationInfrastructureId;
  }
  if (!Util.isUnset(request.replicationIpAddress)) {
    query['ReplicationIpAddress'] = request.replicationIpAddress;
  }
  if (!Util.isUnset(request.replicationLocation)) {
    query['ReplicationLocation'] = request.replicationLocation;
  }
  if (!Util.isUnset(request.replicationNetMask)) {
    query['ReplicationNetMask'] = request.replicationNetMask;
  }
  if (!Util.isUnset(request.replicationNetwork)) {
    query['ReplicationNetwork'] = request.replicationNetwork;
  }
  if (!Util.isUnset(request.replicationUseDhcp)) {
    query['ReplicationUseDhcp'] = request.replicationUseDhcp;
  }
  if (!Util.isUnset(request.replicationUseOriginalInstance)) {
    query['ReplicationUseOriginalInstance'] = request.replicationUseOriginalInstance;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.shadowInstanceType)) {
    query['ShadowInstanceType'] = request.shadowInstanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedEnableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedEnableReplication(request: ReversedEnableReplicationRequest): ReversedEnableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedEnableReplicationWithOptions(request, runtime);
}

model TestCleanupRequest {
  serverId?: string(name='ServerId', description='受保护服务器ID'),
}

model TestCleanupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestCleanupResponse = {
  headers: map[string]string(name='headers'),
  body: TestCleanupResponseBody(name='body'),
}

async function testCleanupWithOptions(request: TestCleanupRequest, runtime: Util.RuntimeOptions): TestCleanupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestCleanup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testCleanup(request: TestCleanupRequest): TestCleanupResponse {
  var runtime = new Util.RuntimeOptions{};
  return testCleanupWithOptions(request, runtime);
}

model TestFailoverRequest {
  eipAddressId?: string(name='EipAddressId', description='演练实例绑定的弹性公网IP ID'),
  recoveryCpu?: int32(name='RecoveryCpu', description='演练实例的CPU核数'),
  recoveryInstanceName?: string(name='RecoveryInstanceName', description='演练的实例名称'),
  recoveryInstanceType?: string(name='RecoveryInstanceType', description='演练的实例规格，未指定时按照指定的CPU核数、内存大小自动寻找可用规格'),
  recoveryIpAddress?: string(name='RecoveryIpAddress', description='演练实例的IP'),
  recoveryMemory?: long(name='RecoveryMemory', description='演练实例的内存大小，单位MB'),
  recoveryNetwork?: string(name='RecoveryNetwork', description='演练实例所在的VSwitch ID'),
  recoveryPointId?: string(name='RecoveryPointId', description='演练实例使用的恢复点ID'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent', description='演练实例启动后执行脚本'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType', description='演练实例启动后执行脚本类型，可选项：SHELL'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp', description='演练实例是否保留源机的IP（需要演练所在的VSwitch包含相应网段）'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp', description='演练实例是否使用DHCP指定IP'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd', description='演练实例是否使用ESSD类型的云盘'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd', description='演练实例是否使用SSD类型的云盘'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId', description='受保护服务器ID'),
}

model TestFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: TestFailoverResponseBody(name='body'),
}

async function testFailoverWithOptions(request: TestFailoverRequest, runtime: Util.RuntimeOptions): TestFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testFailover(request: TestFailoverRequest): TestFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return testFailoverWithOptions(request, runtime);
}

model TriggerReversedRegisterRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model TriggerReversedRegisterResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TriggerReversedRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerReversedRegisterResponseBody(name='body'),
}

async function triggerReversedRegisterWithOptions(request: TriggerReversedRegisterRequest, runtime: Util.RuntimeOptions): TriggerReversedRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerReversedRegister',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerReversedRegister(request: TriggerReversedRegisterRequest): TriggerReversedRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerReversedRegisterWithOptions(request, runtime);
}

model UnregisterServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model UnregisterServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnregisterServerResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterServerResponseBody(name='body'),
}

async function unregisterServerWithOptions(request: UnregisterServerRequest, runtime: Util.RuntimeOptions): UnregisterServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterServer(request: UnregisterServerRequest): UnregisterServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterServerWithOptions(request, runtime);
}

