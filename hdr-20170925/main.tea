/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('hdr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActivateDrGatewayRequest {
  activationCode?: long(name='ActivationCode'),
  gatewayVersion?: string(name='GatewayVersion'),
  ipAddress?: string(name='IpAddress'),
  securityToken?: string(name='SecurityToken'),
}

model ActivateDrGatewayResponseBody = {
  accountId?: long(name='AccountId'),
  bucketName?: string(name='BucketName'),
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  message?: string(name='Message'),
  mqttBroker?: string(name='MqttBroker'),
  protectedServerQuota?: int32(name='ProtectedServerQuota'),
  pubToken?: string(name='PubToken'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  subToken?: string(name='SubToken'),
  success?: boolean(name='Success'),
}

model ActivateDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: ActivateDrGatewayResponseBody(name='body'),
}

async function activateDrGatewayWithOptions(request: ActivateDrGatewayRequest, runtime: Util.RuntimeOptions): ActivateDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.activationCode)) {
    query['ActivationCode'] = request.activationCode;
  }
  if (!Util.isUnset(request.gatewayVersion)) {
    query['GatewayVersion'] = request.gatewayVersion;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivateDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activateDrGateway(request: ActivateDrGatewayRequest): ActivateDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return activateDrGatewayWithOptions(request, runtime);
}

model AddInfrastructureRequest {
  credential?: string(name='Credential'),
  ipAddress?: string(name='IpAddress'),
  name?: string(name='Name'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
  type?: string(name='Type'),
}

model AddInfrastructureResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model AddInfrastructureResponse = {
  headers: map[string]string(name='headers'),
  body: AddInfrastructureResponseBody(name='body'),
}

async function addInfrastructureWithOptions(request: AddInfrastructureRequest, runtime: Util.RuntimeOptions): AddInfrastructureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credential)) {
    query['Credential'] = request.credential;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddInfrastructure',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addInfrastructure(request: AddInfrastructureRequest): AddInfrastructureResponse {
  var runtime = new Util.RuntimeOptions{};
  return addInfrastructureWithOptions(request, runtime);
}

model AddReplicationRequest {
  gatewayId?: string(name='GatewayId'),
  replicationInfo?: string(name='ReplicationInfo'),
  securityToken?: string(name='SecurityToken'),
}

model AddReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: AddReplicationResponseBody(name='body'),
}

async function addReplicationWithOptions(request: AddReplicationRequest, runtime: Util.RuntimeOptions): AddReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.replicationInfo)) {
    query['ReplicationInfo'] = request.replicationInfo;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addReplication(request: AddReplicationRequest): AddReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addReplicationWithOptions(request, runtime);
}

model ChangeRecoveryPointRequest {
  eipAddressId?: string(name='EipAddressId'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ChangeRecoveryPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ChangeRecoveryPointResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRecoveryPointResponseBody(name='body'),
}

async function changeRecoveryPointWithOptions(request: ChangeRecoveryPointRequest, runtime: Util.RuntimeOptions): ChangeRecoveryPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeRecoveryPoint',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeRecoveryPoint(request: ChangeRecoveryPointRequest): ChangeRecoveryPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRecoveryPointWithOptions(request, runtime);
}

model ChangeRecoveryPointForRPRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ChangeRecoveryPointForRPResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ChangeRecoveryPointForRPResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeRecoveryPointForRPResponseBody(name='body'),
}

async function changeRecoveryPointForRPWithOptions(request: ChangeRecoveryPointForRPRequest, runtime: Util.RuntimeOptions): ChangeRecoveryPointForRPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeRecoveryPointForRP',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeRecoveryPointForRP(request: ChangeRecoveryPointForRPRequest): ChangeRecoveryPointForRPResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeRecoveryPointForRPWithOptions(request, runtime);
}

model CheckGatewayConnectivityRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model CheckGatewayConnectivityResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckGatewayConnectivityResponse = {
  headers: map[string]string(name='headers'),
  body: CheckGatewayConnectivityResponseBody(name='body'),
}

async function checkGatewayConnectivityWithOptions(request: CheckGatewayConnectivityRequest, runtime: Util.RuntimeOptions): CheckGatewayConnectivityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckGatewayConnectivity',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkGatewayConnectivity(request: CheckGatewayConnectivityRequest): CheckGatewayConnectivityResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkGatewayConnectivityWithOptions(request, runtime);
}

model CheckOperationPermissionRequest {
  gatewayId?: string(name='GatewayId'),
  operation?: string(name='Operation'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model CheckOperationPermissionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model CheckOperationPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: CheckOperationPermissionResponseBody(name='body'),
}

async function checkOperationPermissionWithOptions(request: CheckOperationPermissionRequest, runtime: Util.RuntimeOptions): CheckOperationPermissionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckOperationPermission',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkOperationPermission(request: CheckOperationPermissionRequest): CheckOperationPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkOperationPermissionWithOptions(request, runtime);
}

model CheckRecoveryPlanRequest {
  operation?: string(name='Operation'),
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
}

model CheckRecoveryPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  servers?: {
    server?: [ 
    {
      errno?: string(name='Errno'),
      serverId?: string(name='ServerId'),
    }
  ](name='server')
  }(name='Servers'),
  success?: boolean(name='Success'),
}

model CheckRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CheckRecoveryPlanResponseBody(name='body'),
}

async function checkRecoveryPlanWithOptions(request: CheckRecoveryPlanRequest, runtime: Util.RuntimeOptions): CheckRecoveryPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.operation)) {
    query['Operation'] = request.operation;
  }
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckRecoveryPlan',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkRecoveryPlan(request: CheckRecoveryPlanRequest): CheckRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkRecoveryPlanWithOptions(request, runtime);
}

model CheckRoleRequest {
  securityToken?: string(name='SecurityToken'),
}

model CheckRoleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckRoleResponseBody(name='body'),
}

async function checkRoleWithOptions(request: CheckRoleRequest, runtime: Util.RuntimeOptions): CheckRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckRole',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkRole(request: CheckRoleRequest): CheckRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkRoleWithOptions(request, runtime);
}

model CheckSlrRoleRequest {
  createIfNotExist?: boolean(name='CreateIfNotExist'),
  roleName?: string(name='RoleName'),
  securityToken?: string(name='SecurityToken'),
}

model CheckSlrRoleResponseBody = {
  code?: string(name='Code'),
  exist?: boolean(name='Exist'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckSlrRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckSlrRoleResponseBody(name='body'),
}

async function checkSlrRoleWithOptions(request: CheckSlrRoleRequest, runtime: Util.RuntimeOptions): CheckSlrRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createIfNotExist)) {
    query['CreateIfNotExist'] = request.createIfNotExist;
  }
  if (!Util.isUnset(request.roleName)) {
    query['RoleName'] = request.roleName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckSlrRole',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkSlrRole(request: CheckSlrRoleRequest): CheckSlrRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkSlrRoleWithOptions(request, runtime);
}

model CheckUpdateRequest {
  channel?: string(name='Channel'),
  currentVersion?: string(name='CurrentVersion'),
  platform?: string(name='Platform'),
  securityToken?: string(name='SecurityToken'),
}

model CheckUpdateResponseBody = {
  code?: string(name='Code'),
  isAvailable?: boolean(name='IsAvailable'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  update?: {
    action?: string(name='Action'),
    checksum?: string(name='Checksum'),
    description?: string(name='Description'),
    size?: long(name='Size'),
    url?: string(name='Url'),
  }(name='Update'),
}

model CheckUpdateResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUpdateResponseBody(name='body'),
}

async function checkUpdateWithOptions(request: CheckUpdateRequest, runtime: Util.RuntimeOptions): CheckUpdateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channel)) {
    query['Channel'] = request.channel;
  }
  if (!Util.isUnset(request.currentVersion)) {
    query['CurrentVersion'] = request.currentVersion;
  }
  if (!Util.isUnset(request.platform)) {
    query['Platform'] = request.platform;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckUpdate',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUpdate(request: CheckUpdateRequest): CheckUpdateResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUpdateWithOptions(request, runtime);
}

model CollectCustomerInfoRequest {
  company?: string(name='Company'),
  contact?: string(name='Contact'),
  label1?: string(name='Label1'),
  label2?: string(name='Label2'),
  label3?: string(name='Label3'),
  label4?: string(name='Label4'),
  label5?: string(name='Label5'),
  label6?: string(name='Label6'),
  label7?: string(name='Label7'),
  label8?: string(name='Label8'),
  label9?: string(name='Label9'),
  securityToken?: string(name='SecurityToken'),
  service?: string(name='Service'),
  telephone?: string(name='Telephone'),
  value1?: string(name='Value1'),
  value2?: string(name='Value2'),
  value3?: string(name='Value3'),
  value4?: string(name='Value4'),
  value5?: string(name='Value5'),
  value6?: string(name='Value6'),
  value7?: string(name='Value7'),
  value8?: string(name='Value8'),
  value9?: string(name='Value9'),
}

model CollectCustomerInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CollectCustomerInfoResponse = {
  headers: map[string]string(name='headers'),
  body: CollectCustomerInfoResponseBody(name='body'),
}

async function collectCustomerInfoWithOptions(request: CollectCustomerInfoRequest, runtime: Util.RuntimeOptions): CollectCustomerInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.company)) {
    query['Company'] = request.company;
  }
  if (!Util.isUnset(request.contact)) {
    query['Contact'] = request.contact;
  }
  if (!Util.isUnset(request.label1)) {
    query['Label1'] = request.label1;
  }
  if (!Util.isUnset(request.label2)) {
    query['Label2'] = request.label2;
  }
  if (!Util.isUnset(request.label3)) {
    query['Label3'] = request.label3;
  }
  if (!Util.isUnset(request.label4)) {
    query['Label4'] = request.label4;
  }
  if (!Util.isUnset(request.label5)) {
    query['Label5'] = request.label5;
  }
  if (!Util.isUnset(request.label6)) {
    query['Label6'] = request.label6;
  }
  if (!Util.isUnset(request.label7)) {
    query['Label7'] = request.label7;
  }
  if (!Util.isUnset(request.label8)) {
    query['Label8'] = request.label8;
  }
  if (!Util.isUnset(request.label9)) {
    query['Label9'] = request.label9;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.service)) {
    query['Service'] = request.service;
  }
  if (!Util.isUnset(request.telephone)) {
    query['Telephone'] = request.telephone;
  }
  if (!Util.isUnset(request.value1)) {
    query['Value1'] = request.value1;
  }
  if (!Util.isUnset(request.value2)) {
    query['Value2'] = request.value2;
  }
  if (!Util.isUnset(request.value3)) {
    query['Value3'] = request.value3;
  }
  if (!Util.isUnset(request.value4)) {
    query['Value4'] = request.value4;
  }
  if (!Util.isUnset(request.value5)) {
    query['Value5'] = request.value5;
  }
  if (!Util.isUnset(request.value6)) {
    query['Value6'] = request.value6;
  }
  if (!Util.isUnset(request.value7)) {
    query['Value7'] = request.value7;
  }
  if (!Util.isUnset(request.value8)) {
    query['Value8'] = request.value8;
  }
  if (!Util.isUnset(request.value9)) {
    query['Value9'] = request.value9;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CollectCustomerInfo',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function collectCustomerInfo(request: CollectCustomerInfoRequest): CollectCustomerInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return collectCustomerInfoWithOptions(request, runtime);
}

model CollectSupportBundleRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model CollectSupportBundleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CollectSupportBundleResponse = {
  headers: map[string]string(name='headers'),
  body: CollectSupportBundleResponseBody(name='body'),
}

async function collectSupportBundleWithOptions(request: CollectSupportBundleRequest, runtime: Util.RuntimeOptions): CollectSupportBundleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CollectSupportBundle',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function collectSupportBundle(request: CollectSupportBundleRequest): CollectSupportBundleResponse {
  var runtime = new Util.RuntimeOptions{};
  return collectSupportBundleWithOptions(request, runtime);
}

model CommitFailoverRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model CommitFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CommitFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: CommitFailoverResponseBody(name='body'),
}

async function commitFailoverWithOptions(request: CommitFailoverRequest, runtime: Util.RuntimeOptions): CommitFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CommitFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function commitFailover(request: CommitFailoverRequest): CommitFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return commitFailoverWithOptions(request, runtime);
}

model CreateDrGatewayRequest {
  description?: string(name='Description'),
  imageType?: string(name='ImageType'),
  name?: string(name='Name'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
}

model CreateDrGatewayResponseBody = {
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDrGatewayResponseBody(name='body'),
}

async function createDrGatewayWithOptions(request: CreateDrGatewayRequest, runtime: Util.RuntimeOptions): CreateDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDrGateway(request: CreateDrGatewayRequest): CreateDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDrGatewayWithOptions(request, runtime);
}

model CreateRecoveryPlanRequest {
  content?: string(name='Content'),
  direction?: string(name='Direction'),
  name?: string(name='Name'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model CreateRecoveryPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model CreateRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRecoveryPlanResponseBody(name='body'),
}

async function createRecoveryPlanWithOptions(request: CreateRecoveryPlanRequest, runtime: Util.RuntimeOptions): CreateRecoveryPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRecoveryPlan',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRecoveryPlan(request: CreateRecoveryPlanRequest): CreateRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecoveryPlanWithOptions(request, runtime);
}

model CreateSitePairRequest {
  cloudSiteName?: string(name='CloudSiteName'),
  localGatewayName?: string(name='LocalGatewayName'),
  localSiteName?: string(name='LocalSiteName'),
  primarySiteName?: string(name='PrimarySiteName'),
  primarySiteRegionId?: string(name='PrimarySiteRegionId'),
  primarySiteType?: string(name='PrimarySiteType'),
  primarySiteVpcId?: string(name='PrimarySiteVpcId'),
  primarySiteZoneId?: string(name='PrimarySiteZoneId'),
  secondarySiteName?: string(name='SecondarySiteName'),
  secondarySiteRegionId?: string(name='SecondarySiteRegionId'),
  secondarySiteType?: string(name='SecondarySiteType'),
  secondarySiteVpcId?: string(name='SecondarySiteVpcId'),
  secondarySiteZoneId?: string(name='SecondarySiteZoneId'),
  securityToken?: string(name='SecurityToken'),
  sitePairType?: string(name='SitePairType'),
}

model CreateSitePairResponseBody = {
  bucketName?: string(name='BucketName'),
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  message?: string(name='Message'),
  primarySiteId?: string(name='PrimarySiteId'),
  requestId?: string(name='RequestId'),
  secondarySiteId?: string(name='SecondarySiteId'),
  sitePairId?: string(name='SitePairId'),
  success?: boolean(name='Success'),
  uid?: long(name='Uid'),
}

model CreateSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSitePairResponseBody(name='body'),
}

async function createSitePairWithOptions(request: CreateSitePairRequest, runtime: Util.RuntimeOptions): CreateSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cloudSiteName)) {
    query['CloudSiteName'] = request.cloudSiteName;
  }
  if (!Util.isUnset(request.localGatewayName)) {
    query['LocalGatewayName'] = request.localGatewayName;
  }
  if (!Util.isUnset(request.localSiteName)) {
    query['LocalSiteName'] = request.localSiteName;
  }
  if (!Util.isUnset(request.primarySiteName)) {
    query['PrimarySiteName'] = request.primarySiteName;
  }
  if (!Util.isUnset(request.primarySiteRegionId)) {
    query['PrimarySiteRegionId'] = request.primarySiteRegionId;
  }
  if (!Util.isUnset(request.primarySiteType)) {
    query['PrimarySiteType'] = request.primarySiteType;
  }
  if (!Util.isUnset(request.primarySiteVpcId)) {
    query['PrimarySiteVpcId'] = request.primarySiteVpcId;
  }
  if (!Util.isUnset(request.primarySiteZoneId)) {
    query['PrimarySiteZoneId'] = request.primarySiteZoneId;
  }
  if (!Util.isUnset(request.secondarySiteName)) {
    query['SecondarySiteName'] = request.secondarySiteName;
  }
  if (!Util.isUnset(request.secondarySiteRegionId)) {
    query['SecondarySiteRegionId'] = request.secondarySiteRegionId;
  }
  if (!Util.isUnset(request.secondarySiteType)) {
    query['SecondarySiteType'] = request.secondarySiteType;
  }
  if (!Util.isUnset(request.secondarySiteVpcId)) {
    query['SecondarySiteVpcId'] = request.secondarySiteVpcId;
  }
  if (!Util.isUnset(request.secondarySiteZoneId)) {
    query['SecondarySiteZoneId'] = request.secondarySiteZoneId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairType)) {
    query['SitePairType'] = request.sitePairType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSitePair(request: CreateSitePairRequest): CreateSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSitePairWithOptions(request, runtime);
}

model DeleteInfrastructureRequest {
  infrastructureId?: string(name='InfrastructureId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteInfrastructureResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteInfrastructureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInfrastructureResponseBody(name='body'),
}

async function deleteInfrastructureWithOptions(request: DeleteInfrastructureRequest, runtime: Util.RuntimeOptions): DeleteInfrastructureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.infrastructureId)) {
    query['InfrastructureId'] = request.infrastructureId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInfrastructure',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteInfrastructure(request: DeleteInfrastructureRequest): DeleteInfrastructureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInfrastructureWithOptions(request, runtime);
}

model DeleteRecoveryPlanRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteRecoveryPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeleteRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRecoveryPlanResponseBody(name='body'),
}

async function deleteRecoveryPlanWithOptions(request: DeleteRecoveryPlanRequest, runtime: Util.RuntimeOptions): DeleteRecoveryPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRecoveryPlan',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRecoveryPlan(request: DeleteRecoveryPlanRequest): DeleteRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecoveryPlanWithOptions(request, runtime);
}

model DeleteSitePairRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DeleteSitePairResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSitePairResponseBody(name='body'),
}

async function deleteSitePairWithOptions(request: DeleteSitePairRequest, runtime: Util.RuntimeOptions): DeleteSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSitePair(request: DeleteSitePairRequest): DeleteSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSitePairWithOptions(request, runtime);
}

model DeployDrGatewayRequest {
  description?: string(name='Description'),
  drGatewayClass?: string(name='DrGatewayClass'),
  gatewayImageName?: string(name='GatewayImageName'),
  linuxShadowVmImageName?: string(name='LinuxShadowVmImageName'),
  name?: string(name='Name'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
  sitePairId?: string(name='SitePairId'),
  userVSwitchId?: string(name='UserVSwitchId'),
  windowsShadowVmImageName?: string(name='WindowsShadowVmImageName'),
}

model DeployDrGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeployDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeployDrGatewayResponseBody(name='body'),
}

async function deployDrGatewayWithOptions(request: DeployDrGatewayRequest, runtime: Util.RuntimeOptions): DeployDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.drGatewayClass)) {
    query['DrGatewayClass'] = request.drGatewayClass;
  }
  if (!Util.isUnset(request.gatewayImageName)) {
    query['GatewayImageName'] = request.gatewayImageName;
  }
  if (!Util.isUnset(request.linuxShadowVmImageName)) {
    query['LinuxShadowVmImageName'] = request.linuxShadowVmImageName;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  if (!Util.isUnset(request.userVSwitchId)) {
    query['UserVSwitchId'] = request.userVSwitchId;
  }
  if (!Util.isUnset(request.windowsShadowVmImageName)) {
    query['WindowsShadowVmImageName'] = request.windowsShadowVmImageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployDrGateway(request: DeployDrGatewayRequest): DeployDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployDrGatewayWithOptions(request, runtime);
}

model DeployGatewayRequest {
  description?: string(name='Description'),
  gatewayClass?: string(name='GatewayClass'),
  name?: string(name='Name'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
  vSwitchId?: string(name='VSwitchId'),
}

model DeployGatewayResponseBody = {
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DeployGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeployGatewayResponseBody(name='body'),
}

async function deployGatewayWithOptions(request: DeployGatewayRequest, runtime: Util.RuntimeOptions): DeployGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.gatewayClass)) {
    query['GatewayClass'] = request.gatewayClass;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployGateway(request: DeployGatewayRequest): DeployGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployGatewayWithOptions(request, runtime);
}

model DescribeAgentImageUrlRequest {
  platformType?: string(name='PlatformType'),
}

model DescribeAgentImageUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeAgentImageUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAgentImageUrlResponseBody(name='body'),
}

async function describeAgentImageUrlWithOptions(request: DescribeAgentImageUrlRequest, runtime: Util.RuntimeOptions): DescribeAgentImageUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.platformType)) {
    query['PlatformType'] = request.platformType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAgentImageUrl',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAgentImageUrl(request: DescribeAgentImageUrlRequest): DescribeAgentImageUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAgentImageUrlWithOptions(request, runtime);
}

model DescribeAppConsistentPointsRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  startTime?: long(name='StartTime'),
}

model DescribeAppConsistentPointsResponseBody = {
  appConsistentPoints?: {
    appConsistentPoint?: [ 
    {
      snapshotId?: string(name='SnapshotId'),
      snapshotTime?: long(name='SnapshotTime'),
    }
  ](name='appConsistentPoint')
  }(name='AppConsistentPoints'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppConsistentPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppConsistentPointsResponseBody(name='body'),
}

async function describeAppConsistentPointsWithOptions(request: DescribeAppConsistentPointsRequest, runtime: Util.RuntimeOptions): DescribeAppConsistentPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppConsistentPoints',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppConsistentPoints(request: DescribeAppConsistentPointsRequest): DescribeAppConsistentPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppConsistentPointsWithOptions(request, runtime);
}

model DescribeAvailableInstanceTypesRequest {
  chargeType?: string(name='ChargeType'),
  diskType?: string(name='DiskType'),
  filter?: string(name='Filter'),
  ioOptimized?: boolean(name='IoOptimized'),
  network?: string(name='Network'),
  order?: string(name='Order'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  region?: string(name='Region'),
  securityToken?: string(name='SecurityToken'),
  sortBy?: string(name='SortBy'),
  userClient?: boolean(name='UserClient'),
  userUid?: long(name='UserUid'),
  zoneId?: string(name='ZoneId'),
}

model DescribeAvailableInstanceTypesResponseBody = {
  code?: string(name='Code'),
  instanceTypes?: {
    instanceType?: [ string ](name='instanceType')
  }(name='InstanceTypes'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAvailableInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableInstanceTypesResponseBody(name='body'),
}

async function describeAvailableInstanceTypesWithOptions(request: DescribeAvailableInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeAvailableInstanceTypesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.filter)) {
    query['Filter'] = request.filter;
  }
  if (!Util.isUnset(request.ioOptimized)) {
    query['IoOptimized'] = request.ioOptimized;
  }
  if (!Util.isUnset(request.network)) {
    query['Network'] = request.network;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  if (!Util.isUnset(request.userClient)) {
    query['UserClient'] = request.userClient;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableInstanceTypes',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableInstanceTypes(request: DescribeAvailableInstanceTypesRequest): DescribeAvailableInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableInstanceTypesWithOptions(request, runtime);
}

model DescribeAvailableInstanceTypesForSERequest {
  chargeType?: string(name='ChargeType'),
  diskType?: string(name='DiskType'),
  mode?: string(name='Mode'),
  region?: string(name='Region'),
  securityToken?: string(name='SecurityToken'),
  zoneId?: string(name='ZoneId'),
}

model DescribeAvailableInstanceTypesForSEResponseBody = {
  code?: string(name='Code'),
  instanceTypes?: {
    instanceType?: [ string ](name='instanceType')
  }(name='InstanceTypes'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeAvailableInstanceTypesForSEResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableInstanceTypesForSEResponseBody(name='body'),
}

async function describeAvailableInstanceTypesForSEWithOptions(request: DescribeAvailableInstanceTypesForSERequest, runtime: Util.RuntimeOptions): DescribeAvailableInstanceTypesForSEResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.chargeType)) {
    query['ChargeType'] = request.chargeType;
  }
  if (!Util.isUnset(request.diskType)) {
    query['DiskType'] = request.diskType;
  }
  if (!Util.isUnset(request.mode)) {
    query['Mode'] = request.mode;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableInstanceTypesForSE',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableInstanceTypesForSE(request: DescribeAvailableInstanceTypesForSERequest): DescribeAvailableInstanceTypesForSEResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableInstanceTypesForSEWithOptions(request, runtime);
}

model DescribeBmrShadowVmImageUrlRequest {
  imageType?: string(name='ImageType'),
  imageVersion?: string(name='ImageVersion'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBmrShadowVmImageUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeBmrShadowVmImageUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBmrShadowVmImageUrlResponseBody(name='body'),
}

async function describeBmrShadowVmImageUrlWithOptions(request: DescribeBmrShadowVmImageUrlRequest, runtime: Util.RuntimeOptions): DescribeBmrShadowVmImageUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageType)) {
    query['ImageType'] = request.imageType;
  }
  if (!Util.isUnset(request.imageVersion)) {
    query['ImageVersion'] = request.imageVersion;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBmrShadowVmImageUrl',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBmrShadowVmImageUrl(request: DescribeBmrShadowVmImageUrlRequest): DescribeBmrShadowVmImageUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBmrShadowVmImageUrlWithOptions(request, runtime);
}

model DescribeDRApplianceUrlRequest {
  imageName?: string(name='ImageName'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDRApplianceUrlResponseBody = {
  code?: string(name='Code'),
  downloadUrl?: string(name='DownloadUrl'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDRApplianceUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDRApplianceUrlResponseBody(name='body'),
}

async function describeDRApplianceUrlWithOptions(request: DescribeDRApplianceUrlRequest, runtime: Util.RuntimeOptions): DescribeDRApplianceUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDRApplianceUrl',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDRApplianceUrl(request: DescribeDRApplianceUrlRequest): DescribeDRApplianceUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDRApplianceUrlWithOptions(request, runtime);
}

model DescribeDRAppliancesRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeDRAppliancesResponseBody = {
  code?: string(name='Code'),
  images?: {
    image?: [ 
    {
      description?: string(name='Description'),
      md5?: string(name='Md5'),
      modifiedDate?: string(name='ModifiedDate'),
      name?: string(name='Name'),
      size?: long(name='Size'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      version?: string(name='Version'),
    }
  ](name='Image')
  }(name='Images'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDRAppliancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDRAppliancesResponseBody(name='body'),
}

async function describeDRAppliancesWithOptions(request: DescribeDRAppliancesRequest, runtime: Util.RuntimeOptions): DescribeDRAppliancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDRAppliances',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDRAppliances(request: DescribeDRAppliancesRequest): DescribeDRAppliancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDRAppliancesWithOptions(request, runtime);
}

model DescribeDiskGroupRequest {
  diskGroupId?: string(name='DiskGroupId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DescribeDiskGroupResponseBody = {
  code?: string(name='Code'),
  diskGroupId?: string(name='DiskGroupId'),
  disks?: [ 
    {
      sourceDiskId?: string(name='SourceDiskId'),
      sourceDiskSize?: long(name='SourceDiskSize'),
      targetDiskId?: string(name='TargetDiskId'),
      targetDiskSize?: long(name='TargetDiskSize'),
    }
  ](name='Disks'),
  errno?: string(name='Errno'),
  fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
  fullSyncProgress?: int32(name='FullSyncProgress'),
  fullSyncStartTime?: long(name='FullSyncStartTime'),
  fullSyncTotalSize?: long(name='FullSyncTotalSize'),
  incrementalSyncStartTime?: long(name='IncrementalSyncStartTime'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rpo?: int32(name='Rpo'),
  sourceGatewayId?: string(name='SourceGatewayId'),
  sourceHostIpAddress?: string(name='SourceHostIpAddress'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  targetGatewayId?: string(name='TargetGatewayId'),
  targetHostIpAddress?: string(name='TargetHostIpAddress'),
  taskExecutionEnv?: string(name='TaskExecutionEnv'),
  taskId?: string(name='TaskId'),
}

model DescribeDiskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiskGroupResponseBody(name='body'),
}

async function describeDiskGroupWithOptions(request: DescribeDiskGroupRequest, runtime: Util.RuntimeOptions): DescribeDiskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDiskGroup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDiskGroup(request: DescribeDiskGroupRequest): DescribeDiskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDiskGroupWithOptions(request, runtime);
}

model DescribeDrGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDrGatewayResponseBody = {
  code?: string(name='Code'),
  createdTime?: long(name='CreatedTime'),
  description?: string(name='Description'),
  downstreamSpeed?: long(name='DownstreamSpeed'),
  gatewayClass?: string(name='GatewayClass'),
  gatewayId?: string(name='GatewayId'),
  imageType?: string(name='ImageType'),
  ipAddress?: string(name='IpAddress'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  operations?: string(name='Operations'),
  requestId?: string(name='RequestId'),
  siteId?: string(name='SiteId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  upstreamSpeed?: long(name='UpstreamSpeed'),
  version?: string(name='Version'),
}

model DescribeDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewayResponseBody(name='body'),
}

async function describeDrGatewayWithOptions(request: DescribeDrGatewayRequest, runtime: Util.RuntimeOptions): DescribeDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGateway(request: DescribeDrGatewayRequest): DescribeDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewayWithOptions(request, runtime);
}

model DescribeDrGatewayFlowControlPolicyRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDrGatewayFlowControlPolicyResponseBody = {
  code?: string(name='Code'),
  flowControlPolicy?: string(name='FlowControlPolicy'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrGatewayFlowControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewayFlowControlPolicyResponseBody(name='body'),
}

async function describeDrGatewayFlowControlPolicyWithOptions(request: DescribeDrGatewayFlowControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeDrGatewayFlowControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGatewayFlowControlPolicy',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGatewayFlowControlPolicy(request: DescribeDrGatewayFlowControlPolicyRequest): DescribeDrGatewayFlowControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewayFlowControlPolicyWithOptions(request, runtime);
}

model DescribeDrGatewayImageUrlRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDrGatewayImageUrlResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model DescribeDrGatewayImageUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewayImageUrlResponseBody(name='body'),
}

async function describeDrGatewayImageUrlWithOptions(request: DescribeDrGatewayImageUrlRequest, runtime: Util.RuntimeOptions): DescribeDrGatewayImageUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGatewayImageUrl',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGatewayImageUrl(request: DescribeDrGatewayImageUrlRequest): DescribeDrGatewayImageUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewayImageUrlWithOptions(request, runtime);
}

model DescribeDrGatewayMetricsRequest {
  gatewayId?: string(name='GatewayId'),
  query?: string(name='Query'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeDrGatewayMetricsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DescribeDrGatewayMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewayMetricsResponseBody(name='body'),
}

async function describeDrGatewayMetricsWithOptions(request: DescribeDrGatewayMetricsRequest, runtime: Util.RuntimeOptions): DescribeDrGatewayMetricsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGatewayMetrics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGatewayMetrics(request: DescribeDrGatewayMetricsRequest): DescribeDrGatewayMetricsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewayMetricsWithOptions(request, runtime);
}

model DescribeDrGatewaysRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
  userUid?: long(name='UserUid'),
}

model DescribeDrGatewaysResponseBody = {
  code?: string(name='Code'),
  drGateways?: {
    gateway?: [ 
    {
      createdTime?: long(name='CreatedTime'),
      description?: string(name='Description'),
      downstreamSpeed?: long(name='DownstreamSpeed'),
      gatewayClass?: string(name='GatewayClass'),
      gatewayId?: string(name='GatewayId'),
      imageType?: string(name='ImageType'),
      ipAddress?: string(name='IpAddress'),
      name?: string(name='Name'),
      operations?: string(name='Operations'),
      siteId?: string(name='SiteId'),
      status?: string(name='Status'),
      upstreamSpeed?: long(name='UpstreamSpeed'),
      version?: string(name='Version'),
    }
  ](name='gateway')
  }(name='DrGateways'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDrGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewaysResponseBody(name='body'),
}

async function describeDrGatewaysWithOptions(request: DescribeDrGatewaysRequest, runtime: Util.RuntimeOptions): DescribeDrGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGateways',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGateways(request: DescribeDrGatewaysRequest): DescribeDrGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewaysWithOptions(request, runtime);
}

model DescribeDrGatewaysForCmsRequest {
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DescribeDrGatewaysForCmsResponseBody = {
  code?: string(name='Code'),
  drGateways?: {
    gateway?: [ 
    {
      description?: string(name='Description'),
      gatewayId?: string(name='GatewayId'),
      name?: string(name='Name'),
      sitePairName?: string(name='SitePairName'),
    }
  ](name='gateway')
  }(name='DrGateways'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeDrGatewaysForCmsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDrGatewaysForCmsResponseBody(name='body'),
}

async function describeDrGatewaysForCmsWithOptions(request: DescribeDrGatewaysForCmsRequest, runtime: Util.RuntimeOptions): DescribeDrGatewaysForCmsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDrGatewaysForCms',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDrGatewaysForCms(request: DescribeDrGatewaysForCmsRequest): DescribeDrGatewaysForCmsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDrGatewaysForCmsWithOptions(request, runtime);
}

model DescribeGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeGatewayResponseBody = {
  backupWorkload?: int32(name='BackupWorkload'),
  code?: string(name='Code'),
  createdTime?: long(name='CreatedTime'),
  gatewayClass?: string(name='GatewayClass'),
  gatewayDescription?: string(name='GatewayDescription'),
  gatewayId?: string(name='GatewayId'),
  gatewayIp?: string(name='GatewayIp'),
  gatewayName?: string(name='GatewayName'),
  MCInstanceId?: string(name='MCInstanceId'),
  mcPassword?: string(name='McPassword'),
  mcUsername?: string(name='McUsername'),
  message?: string(name='Message'),
  recoveryWorkload?: int32(name='RecoveryWorkload'),
  requestId?: string(name='RequestId'),
  siteName?: string(name='SiteName'),
  sitePairId?: string(name='SitePairId'),
  status?: string(name='Status'),
  storeInstanceId?: string(name='StoreInstanceId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribeGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatewayResponseBody(name='body'),
}

async function describeGatewayWithOptions(request: DescribeGatewayRequest, runtime: Util.RuntimeOptions): DescribeGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGateway(request: DescribeGatewayRequest): DescribeGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGatewayWithOptions(request, runtime);
}

model DescribeGatewaysRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  siteName?: string(name='SiteName'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeGatewaysResponseBody = {
  code?: string(name='Code'),
  gateways?: {
    gateway?: [ 
    {
      backupWorkload?: int32(name='BackupWorkload'),
      createdTime?: long(name='CreatedTime'),
      gatewayClass?: string(name='GatewayClass'),
      gatewayDescription?: string(name='GatewayDescription'),
      gatewayId?: string(name='GatewayId'),
      gatewayIp?: string(name='GatewayIp'),
      gatewayName?: string(name='GatewayName'),
      MCInstanceId?: string(name='MCInstanceId'),
      mcPassword?: string(name='McPassword'),
      mcUsername?: string(name='McUsername'),
      recoveryWorkload?: int32(name='RecoveryWorkload'),
      siteName?: string(name='SiteName'),
      sitePairId?: string(name='SitePairId'),
      status?: string(name='Status'),
      storeInstanceId?: string(name='StoreInstanceId'),
      taskId?: string(name='TaskId'),
    }
  ](name='gateway')
  }(name='Gateways'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatewaysResponseBody(name='body'),
}

async function describeGatewaysWithOptions(request: DescribeGatewaysRequest, runtime: Util.RuntimeOptions): DescribeGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteName)) {
    query['SiteName'] = request.siteName;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGateways',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGateways(request: DescribeGatewaysRequest): DescribeGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGatewaysWithOptions(request, runtime);
}

model DescribeInfrastructuresRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
}

model DescribeInfrastructuresResponseBody = {
  code?: string(name='Code'),
  infrastructures?: {
    infrastructure?: [ 
    {
      errno?: string(name='Errno'),
      infrastructureId?: string(name='InfrastructureId'),
      ipAddress?: string(name='IpAddress'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='infrastructure')
  }(name='Infrastructures'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeInfrastructuresResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInfrastructuresResponseBody(name='body'),
}

async function describeInfrastructuresWithOptions(request: DescribeInfrastructuresRequest, runtime: Util.RuntimeOptions): DescribeInfrastructuresResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInfrastructures',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInfrastructures(request: DescribeInfrastructuresRequest): DescribeInfrastructuresResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInfrastructuresWithOptions(request, runtime);
}

model DescribeKmsServerRequest {
  hardwareId?: string(name='HardwareId'),
}

model DescribeKmsServerResponseBody = {
  code?: string(name='Code'),
  ipAddress?: string(name='IpAddress'),
  message?: string(name='Message'),
  port?: int32(name='Port'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeKmsServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKmsServerResponseBody(name='body'),
}

async function describeKmsServerWithOptions(request: DescribeKmsServerRequest, runtime: Util.RuntimeOptions): DescribeKmsServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hardwareId)) {
    query['HardwareId'] = request.hardwareId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKmsServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKmsServer(request: DescribeKmsServerRequest): DescribeKmsServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKmsServerWithOptions(request, runtime);
}

model DescribeNetworksRequest {
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
}

model DescribeNetworksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  networks?: {
    network?: [ 
    {
      networkInfo?: string(name='networkInfo'),
    }
  ](name='network')
  }(name='Networks'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNetworksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworksResponseBody(name='body'),
}

async function describeNetworksWithOptions(request: DescribeNetworksRequest, runtime: Util.RuntimeOptions): DescribeNetworksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworks',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworks(request: DescribeNetworksRequest): DescribeNetworksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworksWithOptions(request, runtime);
}

model DescribeRecoveryPlanRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DescribeRecoveryPlanResponseBody = {
  code?: string(name='Code'),
  content?: string(name='Content'),
  direction?: string(name='Direction'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  recoveryPlanId?: string(name='RecoveryPlanId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPlanResponseBody(name='body'),
}

async function describeRecoveryPlanWithOptions(request: DescribeRecoveryPlanRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPlan',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPlan(request: DescribeRecoveryPlanRequest): DescribeRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPlanWithOptions(request, runtime);
}

model DescribeRecoveryPlanExecutionRequest {
  executionId?: string(name='ExecutionId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DescribeRecoveryPlanExecutionResponseBody = {
  code?: string(name='Code'),
  executionId?: string(name='ExecutionId'),
  message?: string(name='Message'),
  operation?: string(name='Operation'),
  requestId?: string(name='RequestId'),
  stateGraph?: string(name='StateGraph'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  updatedTime?: long(name='UpdatedTime'),
}

model DescribeRecoveryPlanExecutionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPlanExecutionResponseBody(name='body'),
}

async function describeRecoveryPlanExecutionWithOptions(request: DescribeRecoveryPlanExecutionRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPlanExecutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.executionId)) {
    query['ExecutionId'] = request.executionId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPlanExecution',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPlanExecution(request: DescribeRecoveryPlanExecutionRequest): DescribeRecoveryPlanExecutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPlanExecutionWithOptions(request, runtime);
}

model DescribeRecoveryPlanExecutionsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRecoveryPlanExecutionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  recoveryPlanExecutions?: {
    recoveryPlanExecution?: [ 
    {
      executionId?: string(name='ExecutionId'),
      operation?: string(name='Operation'),
      status?: string(name='Status'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='recoveryPlanExecution')
  }(name='RecoveryPlanExecutions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRecoveryPlanExecutionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPlanExecutionsResponseBody(name='body'),
}

async function describeRecoveryPlanExecutionsWithOptions(request: DescribeRecoveryPlanExecutionsRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPlanExecutionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPlanExecutions',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPlanExecutions(request: DescribeRecoveryPlanExecutionsRequest): DescribeRecoveryPlanExecutionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPlanExecutionsWithOptions(request, runtime);
}

model DescribeRecoveryPlansRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeRecoveryPlansResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  recoveryPlans?: {
    recoveryPlan?: [ 
    {
      direction?: string(name='Direction'),
      name?: string(name='Name'),
      recoveryPlanId?: string(name='RecoveryPlanId'),
      status?: string(name='Status'),
    }
  ](name='recoveryPlan')
  }(name='RecoveryPlans'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRecoveryPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPlansResponseBody(name='body'),
}

async function describeRecoveryPlansWithOptions(request: DescribeRecoveryPlansRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPlansResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPlans',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPlans(request: DescribeRecoveryPlansRequest): DescribeRecoveryPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPlansWithOptions(request, runtime);
}

model DescribeRecoveryPointsRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  startTime?: long(name='StartTime'),
}

model DescribeRecoveryPointsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  recoveryPoints?: {
    recoveryPoint?: [ 
    {
      applicationConsistent?: boolean(name='ApplicationConsistent'),
      disableReason?: string(name='DisableReason'),
      disabled?: boolean(name='Disabled'),
      recoveryPointId?: string(name='RecoveryPointId'),
      recoveryPointTime?: long(name='RecoveryPointTime'),
      used?: boolean(name='Used'),
    }
  ](name='recoveryPoint')
  }(name='RecoveryPoints'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRecoveryPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPointsResponseBody(name='body'),
}

async function describeRecoveryPointsWithOptions(request: DescribeRecoveryPointsRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPointsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPoints',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPoints(request: DescribeRecoveryPointsRequest): DescribeRecoveryPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPointsWithOptions(request, runtime);
}

model DescribeRecoveryPointsForRPRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRecoveryPointsForRPResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  recoveryPoints?: {
    recoveryPoint?: [ 
    {
      recoveryPointTime?: long(name='RecoveryPointTime'),
      used?: boolean(name='Used'),
    }
  ](name='recoveryPoint')
  }(name='RecoveryPoints'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRecoveryPointsForRPResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRecoveryPointsForRPResponseBody(name='body'),
}

async function describeRecoveryPointsForRPWithOptions(request: DescribeRecoveryPointsForRPRequest, runtime: Util.RuntimeOptions): DescribeRecoveryPointsForRPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRecoveryPointsForRP',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRecoveryPointsForRP(request: DescribeRecoveryPointsForRPRequest): DescribeRecoveryPointsForRPResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecoveryPointsForRPWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  regions?: {
    region?: [ 
    {
      cnName?: string(name='CnName'),
      enName?: string(name='EnName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeReplicationRequest {
  replicationId?: string(name='ReplicationId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeReplicationResponseBody = {
  applications?: string(name='Applications'),
  backupType?: string(name='BackupType'),
  code?: string(name='Code'),
  gatewayId?: string(name='GatewayId'),
  gatewayName?: string(name='GatewayName'),
  instanceIp?: string(name='InstanceIp'),
  instanceName?: string(name='InstanceName'),
  message?: string(name='Message'),
  osType?: string(name='OsType'),
  protectedTime?: long(name='ProtectedTime'),
  replicationId?: string(name='ReplicationId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicationResponseBody(name='body'),
}

async function describeReplicationWithOptions(request: DescribeReplicationRequest, runtime: Util.RuntimeOptions): DescribeReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.replicationId)) {
    query['ReplicationId'] = request.replicationId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReplication(request: DescribeReplicationRequest): DescribeReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReplicationWithOptions(request, runtime);
}

model DescribeReplicationStatisticsRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeReplicationStatisticsResponseBody = {
  code?: string(name='Code'),
  critical?: int32(name='Critical'),
  healthy?: int32(name='Healthy'),
  message?: string(name='Message'),
  notApplicable?: int32(name='NotApplicable'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  warning?: int32(name='Warning'),
}

model DescribeReplicationStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicationStatisticsResponseBody(name='body'),
}

async function describeReplicationStatisticsWithOptions(request: DescribeReplicationStatisticsRequest, runtime: Util.RuntimeOptions): DescribeReplicationStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReplicationStatistics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReplicationStatistics(request: DescribeReplicationStatisticsRequest): DescribeReplicationStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReplicationStatisticsWithOptions(request, runtime);
}

model DescribeReplicationsRequest {
  gatewayId?: string(name='GatewayId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeReplicationsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  replications?: {
    replication?: [ 
    {
      applications?: string(name='Applications'),
      backupType?: string(name='BackupType'),
      gatewayId?: string(name='GatewayId'),
      gatewayName?: string(name='GatewayName'),
      instanceIp?: string(name='InstanceIp'),
      instanceName?: string(name='InstanceName'),
      osType?: string(name='OsType'),
      protectedTime?: long(name='ProtectedTime'),
      replicationId?: string(name='ReplicationId'),
      status?: string(name='Status'),
    }
  ](name='replication')
  }(name='Replications'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeReplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeReplicationsResponseBody(name='body'),
}

async function describeReplicationsWithOptions(request: DescribeReplicationsRequest, runtime: Util.RuntimeOptions): DescribeReplicationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeReplications',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeReplications(request: DescribeReplicationsRequest): DescribeReplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeReplicationsWithOptions(request, runtime);
}

model DescribeServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model DescribeServerResponseBody = {
  agentPort?: int32(name='AgentPort'),
  agentVersion?: string(name='AgentVersion'),
  alias?: string(name='Alias'),
  appConsistentPointPolicy?: string(name='AppConsistentPointPolicy'),
  code?: string(name='Code'),
  connectionStatus?: string(name='ConnectionStatus'),
  consistent?: boolean(name='Consistent'),
  cpu?: int32(name='Cpu'),
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
  errno?: string(name='Errno'),
  fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
  fullSyncProgress?: int32(name='FullSyncProgress'),
  fullSyncStartTime?: long(name='FullSyncStartTime'),
  fullSyncTotalSize?: long(name='FullSyncTotalSize'),
  hostname?: string(name='Hostname'),
  incrementalSyncStartTime?: long(name='IncrementalSyncStartTime'),
  ipAddress?: string(name='IpAddress'),
  memory?: long(name='Memory'),
  message?: string(name='Message'),
  operations?: string(name='Operations'),
  originalInstanceId?: string(name='OriginalInstanceId'),
  osDetail?: string(name='OsDetail'),
  osType?: string(name='OsType'),
  primarySiteId?: string(name='PrimarySiteId'),
  recoveredInstanceId?: string(name='RecoveredInstanceId'),
  recoveredInstanceName?: string(name='RecoveredInstanceName'),
  recoveredIpAddress?: string(name='RecoveredIpAddress'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInfrastructureId?: string(name='RecoveryInfrastructureId'),
  recoveryInfrastructureType?: string(name='RecoveryInfrastructureType'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  replicationComputeResource?: string(name='ReplicationComputeResource'),
  replicationDatastore?: string(name='ReplicationDatastore'),
  replicationDns?: string(name='ReplicationDns'),
  replicationGateway?: string(name='ReplicationGateway'),
  replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
  replicationInfrastructureType?: string(name='ReplicationInfrastructureType'),
  replicationIpAddress?: string(name='ReplicationIpAddress'),
  replicationLocation?: string(name='ReplicationLocation'),
  replicationNetMask?: string(name='ReplicationNetMask'),
  replicationNetwork?: string(name='ReplicationNetwork'),
  replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
  replicationUseEssd?: boolean(name='ReplicationUseEssd'),
  replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
  replicationUseSsd?: boolean(name='ReplicationUseSsd'),
  requestId?: string(name='RequestId'),
  rpo?: int32(name='Rpo'),
  secondarySiteId?: string(name='SecondarySiteId'),
  serverId?: string(name='ServerId'),
  sourceGatewayVersion?: string(name='SourceGatewayVersion'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
  targetGatewayVersion?: string(name='TargetGatewayVersion'),
  taskId?: string(name='TaskId'),
  testFailoverStatus?: string(name='TestFailoverStatus'),
  testRecoveredInstanceId?: string(name='TestRecoveredInstanceId'),
  testRecoveredInstanceName?: string(name='TestRecoveredInstanceName'),
  testRecoveredIpAddress?: string(name='TestRecoveredIpAddress'),
  upgradeStatus?: string(name='UpgradeStatus'),
}

model DescribeServerResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServerResponseBody(name='body'),
}

async function describeServerWithOptions(request: DescribeServerRequest, runtime: Util.RuntimeOptions): DescribeServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServer(request: DescribeServerRequest): DescribeServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerWithOptions(request, runtime);
}

model DescribeServerInstancesRequest {
  eipAddresses?: string(name='EipAddresses'),
  innerIpAddresses?: string(name='InnerIpAddresses'),
  instanceName?: string(name='InstanceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  privateIpAddresses?: string(name='PrivateIpAddresses'),
  publicIpAddresses?: string(name='PublicIpAddresses'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeServerInstancesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  serverInstances?: {
    serverInstance?: [ 
    {
      cloudAssistantInstalled?: boolean(name='CloudAssistantInstalled'),
      cpu?: int32(name='Cpu'),
      hostName?: string(name='HostName'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      memory?: long(name='Memory'),
      osName?: string(name='OsName'),
      osType?: string(name='OsType'),
      privateIpAddress?: string(name='PrivateIpAddress'),
      publicIpAddress?: string(name='PublicIpAddress'),
      regionId?: string(name='RegionId'),
      registered?: boolean(name='Registered'),
      status?: string(name='Status'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='serverInstance')
  }(name='ServerInstances'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeServerInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServerInstancesResponseBody(name='body'),
}

async function describeServerInstancesWithOptions(request: DescribeServerInstancesRequest, runtime: Util.RuntimeOptions): DescribeServerInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddresses)) {
    query['EipAddresses'] = request.eipAddresses;
  }
  if (!Util.isUnset(request.innerIpAddresses)) {
    query['InnerIpAddresses'] = request.innerIpAddresses;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIpAddresses)) {
    query['PrivateIpAddresses'] = request.privateIpAddresses;
  }
  if (!Util.isUnset(request.publicIpAddresses)) {
    query['PublicIpAddresses'] = request.publicIpAddresses;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServerInstances',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServerInstances(request: DescribeServerInstancesRequest): DescribeServerInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServerInstancesWithOptions(request, runtime);
}

model DescribeServersRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  serverIds?: string(name='ServerIds'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeServersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  servers?: {
    server?: [ 
    {
      agentPort?: int32(name='AgentPort'),
      agentVersion?: string(name='AgentVersion'),
      alias?: string(name='Alias'),
      appConsistentPointPolicy?: string(name='AppConsistentPointPolicy'),
      connectionStatus?: string(name='ConnectionStatus'),
      consistent?: boolean(name='Consistent'),
      cpu?: int32(name='Cpu'),
      crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
      errno?: string(name='Errno'),
      fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
      fullSyncProgress?: int32(name='FullSyncProgress'),
      fullSyncStartTime?: long(name='FullSyncStartTime'),
      fullSyncTotalSize?: long(name='FullSyncTotalSize'),
      hostname?: string(name='Hostname'),
      incrementalSyncStartTime?: long(name='IncrementalSyncStartTime'),
      instanceId?: string(name='InstanceId'),
      ipAddress?: string(name='IpAddress'),
      memory?: long(name='Memory'),
      operations?: string(name='Operations'),
      originalInstanceId?: string(name='OriginalInstanceId'),
      osDetail?: string(name='OsDetail'),
      osType?: string(name='OsType'),
      primarySiteId?: string(name='PrimarySiteId'),
      recoveredInstanceId?: string(name='RecoveredInstanceId'),
      recoveredInstanceName?: string(name='RecoveredInstanceName'),
      recoveredIpAddress?: string(name='RecoveredIpAddress'),
      recoveryCpu?: int32(name='RecoveryCpu'),
      recoveryInfrastructureId?: string(name='RecoveryInfrastructureId'),
      recoveryInfrastructureType?: string(name='RecoveryInfrastructureType'),
      recoveryInstanceName?: string(name='RecoveryInstanceName'),
      recoveryInstanceType?: string(name='RecoveryInstanceType'),
      recoveryIpAddress?: string(name='RecoveryIpAddress'),
      recoveryMemory?: long(name='RecoveryMemory'),
      recoveryNetwork?: string(name='RecoveryNetwork'),
      recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
      recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
      recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
      recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
      recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
      recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
      replicationComputeResource?: string(name='ReplicationComputeResource'),
      replicationDatastore?: string(name='ReplicationDatastore'),
      replicationDns?: string(name='ReplicationDns'),
      replicationGateway?: string(name='ReplicationGateway'),
      replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
      replicationInfrastructureType?: string(name='ReplicationInfrastructureType'),
      replicationIpAddress?: string(name='ReplicationIpAddress'),
      replicationLocation?: string(name='ReplicationLocation'),
      replicationNetMask?: string(name='ReplicationNetMask'),
      replicationNetwork?: string(name='ReplicationNetwork'),
      replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
      replicationUseEssd?: boolean(name='ReplicationUseEssd'),
      replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
      replicationUseSsd?: boolean(name='ReplicationUseSsd'),
      rpo?: int32(name='Rpo'),
      secondarySiteId?: string(name='SecondarySiteId'),
      serverId?: string(name='ServerId'),
      sourceGatewayVersion?: string(name='SourceGatewayVersion'),
      status?: string(name='Status'),
      targetGatewayVersion?: string(name='TargetGatewayVersion'),
      taskId?: string(name='TaskId'),
      testFailoverStatus?: string(name='TestFailoverStatus'),
      testRecoveredInstanceId?: string(name='TestRecoveredInstanceId'),
      testRecoveredInstanceName?: string(name='TestRecoveredInstanceName'),
      testRecoveredIpAddress?: string(name='TestRecoveredIpAddress'),
      upgradeStatus?: string(name='UpgradeStatus'),
    }
  ](name='server')
  }(name='Servers'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeServersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServersResponseBody(name='body'),
}

async function describeServersWithOptions(request: DescribeServersRequest, runtime: Util.RuntimeOptions): DescribeServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverIds)) {
    query['ServerIds'] = request.serverIds;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServers',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServers(request: DescribeServersRequest): DescribeServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServersWithOptions(request, runtime);
}

model DescribeServiceDependencyStatusRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeServiceDependencyStatusResponseBody = {
  code?: string(name='Code'),
  entries?: {
    entry?: [ 
    {
      checkItem?: string(name='CheckItem'),
      description?: boolean(name='Description'),
      internal?: boolean(name='Internal'),
    }
  ](name='entry')
  }(name='Entries'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model DescribeServiceDependencyStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceDependencyStatusResponseBody(name='body'),
}

async function describeServiceDependencyStatusWithOptions(request: DescribeServiceDependencyStatusRequest, runtime: Util.RuntimeOptions): DescribeServiceDependencyStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServiceDependencyStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServiceDependencyStatus(request: DescribeServiceDependencyStatusRequest): DescribeServiceDependencyStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceDependencyStatusWithOptions(request, runtime);
}

model DescribeServiceStatusRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeServiceStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  serviceStatus?: string(name='ServiceStatus'),
  success?: boolean(name='Success'),
}

model DescribeServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServiceStatusResponseBody(name='body'),
}

async function describeServiceStatusWithOptions(request: DescribeServiceStatusRequest, runtime: Util.RuntimeOptions): DescribeServiceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeServiceStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeServiceStatus(request: DescribeServiceStatusRequest): DescribeServiceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceStatusWithOptions(request, runtime);
}

model DescribeShadowVmImageRequest {
  deploymentRegionId?: string(name='DeploymentRegionId'),
  osType?: string(name='OsType'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DescribeShadowVmImageResponseBody = {
  code?: string(name='Code'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeShadowVmImageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeShadowVmImageResponseBody(name='body'),
}

async function describeShadowVmImageWithOptions(request: DescribeShadowVmImageRequest, runtime: Util.RuntimeOptions): DescribeShadowVmImageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deploymentRegionId)) {
    query['DeploymentRegionId'] = request.deploymentRegionId;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeShadowVmImage',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeShadowVmImage(request: DescribeShadowVmImageRequest): DescribeShadowVmImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeShadowVmImageWithOptions(request, runtime);
}

model DescribeSiteRequest {
  securityToken?: string(name='SecurityToken'),
  siteId?: string(name='SiteId'),
  userUid?: long(name='UserUid'),
}

model DescribeSiteResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  siteId?: string(name='SiteId'),
  success?: boolean(name='Success'),
  type?: string(name='Type'),
  userSecurityGroupId?: string(name='UserSecurityGroupId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeSiteResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteResponseBody(name='body'),
}

async function describeSiteWithOptions(request: DescribeSiteRequest, runtime: Util.RuntimeOptions): DescribeSiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSite',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSite(request: DescribeSiteRequest): DescribeSiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSiteWithOptions(request, runtime);
}

model DescribeSitePairRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeSitePairResponseBody = {
  bucketName?: string(name='BucketName'),
  cloudSiteName?: string(name='CloudSiteName'),
  code?: string(name='Code'),
  createdTime?: long(name='CreatedTime'),
  localSiteName?: string(name='LocalSiteName'),
  message?: string(name='Message'),
  primarySiteId?: string(name='PrimarySiteId'),
  primarySiteName?: string(name='PrimarySiteName'),
  requestId?: string(name='RequestId'),
  secondarySiteId?: string(name='SecondarySiteId'),
  secondarySiteName?: string(name='SecondarySiteName'),
  sitePairId?: string(name='SitePairId'),
  sitePairType?: string(name='SitePairType'),
  success?: boolean(name='Success'),
  version?: string(name='Version'),
}

model DescribeSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairResponseBody(name='body'),
}

async function describeSitePairWithOptions(request: DescribeSitePairRequest, runtime: Util.RuntimeOptions): DescribeSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePair(request: DescribeSitePairRequest): DescribeSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairWithOptions(request, runtime);
}

model DescribeSitePairInfoRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeSitePairInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  primarySiteInfo?: {
    diskSizeOfProtectedServers?: long(name='DiskSizeOfProtectedServers'),
    diskSizeOfShadowServers?: long(name='DiskSizeOfShadowServers'),
    numberOfProtectedServers?: int32(name='NumberOfProtectedServers'),
    numberOfRecoveryPoints?: int32(name='NumberOfRecoveryPoints'),
    numberOfShadowServers?: int32(name='NumberOfShadowServers'),
    numberOfUnProtectedServers?: int32(name='NumberOfUnProtectedServers'),
  }(name='PrimarySiteInfo'),
  requestId?: string(name='RequestId'),
  secondarySiteInfo?: {
    diskSizeOfProtectedServers?: long(name='DiskSizeOfProtectedServers'),
    diskSizeOfShadowServers?: long(name='DiskSizeOfShadowServers'),
    numberOfProtectedServers?: int32(name='NumberOfProtectedServers'),
    numberOfRecoveryPoints?: int32(name='NumberOfRecoveryPoints'),
    numberOfShadowServers?: int32(name='NumberOfShadowServers'),
    numberOfUnProtectedServers?: int32(name='NumberOfUnProtectedServers'),
  }(name='SecondarySiteInfo'),
  success?: boolean(name='Success'),
}

model DescribeSitePairInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairInfoResponseBody(name='body'),
}

async function describeSitePairInfoWithOptions(request: DescribeSitePairInfoRequest, runtime: Util.RuntimeOptions): DescribeSitePairInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePairInfo',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePairInfo(request: DescribeSitePairInfoRequest): DescribeSitePairInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairInfoWithOptions(request, runtime);
}

model DescribeSitePairStatisticsRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeSitePairStatisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  primarySiteGatewayInfo?: {
    gatewayId?: string(name='GatewayId'),
    heartbeatedTime?: long(name='HeartbeatedTime'),
    status?: string(name='Status'),
    version?: string(name='Version'),
  }(name='PrimarySiteGatewayInfo'),
  primarySiteServers?: {
    server?: [ 
    {
      agentVersion?: string(name='AgentVersion'),
      connectionStatus?: string(name='ConnectionStatus'),
      ipAddress?: string(name='IpAddress'),
      serverId?: string(name='ServerId'),
    }
  ](name='server')
  }(name='PrimarySiteServers'),
  requestId?: string(name='RequestId'),
  secondarySiteGatewayInfo?: {
    gatewayId?: string(name='GatewayId'),
    heartbeatedTime?: long(name='HeartbeatedTime'),
    status?: string(name='Status'),
    version?: string(name='Version'),
  }(name='SecondarySiteGatewayInfo'),
  secondarySiteServers?: {
    server?: [ 
    {
      agentVersion?: string(name='AgentVersion'),
      connectionStatus?: string(name='ConnectionStatus'),
      ipAddress?: string(name='IpAddress'),
      serverId?: string(name='ServerId'),
    }
  ](name='server')
  }(name='SecondarySiteServers'),
  success?: boolean(name='Success'),
}

model DescribeSitePairStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairStatisticsResponseBody(name='body'),
}

async function describeSitePairStatisticsWithOptions(request: DescribeSitePairStatisticsRequest, runtime: Util.RuntimeOptions): DescribeSitePairStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePairStatistics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePairStatistics(request: DescribeSitePairStatisticsRequest): DescribeSitePairStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairStatisticsWithOptions(request, runtime);
}

model DescribeSitePairsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  sitePairType?: string(name='SitePairType'),
  userUid?: long(name='UserUid'),
}

model DescribeSitePairsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  sitePairs?: {
    sitePair?: [ 
    {
      bucketName?: string(name='BucketName'),
      bucketSize?: long(name='BucketSize'),
      cloudSiteName?: string(name='CloudSiteName'),
      createdTime?: long(name='CreatedTime'),
      localSiteName?: string(name='LocalSiteName'),
      primarySiteId?: string(name='PrimarySiteId'),
      primarySiteName?: string(name='PrimarySiteName'),
      replicationStatistics?: {
        critical?: long(name='Critical'),
        healthy?: long(name='Healthy'),
        notApplicable?: long(name='NotApplicable'),
        warning?: long(name='Warning'),
      }(name='ReplicationStatistics'),
      secondarySiteId?: string(name='SecondarySiteId'),
      secondarySiteName?: string(name='SecondarySiteName'),
      serverCount?: int32(name='ServerCount'),
      sitePairId?: string(name='SitePairId'),
      sitePairType?: string(name='SitePairType'),
      upgradeStatus?: string(name='UpgradeStatus'),
      version?: string(name='Version'),
    }
  ](name='sitePair')
  }(name='SitePairs'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSitePairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSitePairsResponseBody(name='body'),
}

async function describeSitePairsWithOptions(request: DescribeSitePairsRequest, runtime: Util.RuntimeOptions): DescribeSitePairsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairType)) {
    query['SitePairType'] = request.sitePairType;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSitePairs',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSitePairs(request: DescribeSitePairsRequest): DescribeSitePairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSitePairsWithOptions(request, runtime);
}

model DescribeSummaryRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSummaryResponseBody = {
  code?: string(name='Code'),
  dbServerCount?: long(name='DbServerCount'),
  message?: string(name='Message'),
  replicationDetails?: {
    criticalServers?: {
      criticalServer?: [ 
      {
        connectionStatus?: string(name='ConnectionStatus'),
        instanceId?: string(name='InstanceId'),
        rpo?: long(name='Rpo'),
        serverId?: string(name='ServerId'),
        sitePairId?: string(name='SitePairId'),
        status?: string(name='Status'),
      }
    ](name='criticalServer')
    }(name='CriticalServers'),
    notApplicableServers?: {
      notApplicableServer?: [ 
      {
        connectionStatus?: string(name='ConnectionStatus'),
        instanceId?: string(name='InstanceId'),
        rpo?: long(name='Rpo'),
        serverId?: string(name='ServerId'),
        sitePairId?: string(name='SitePairId'),
        status?: string(name='Status'),
      }
    ](name='notApplicableServer')
    }(name='NotApplicableServers'),
    warningServers?: {
      warningServer?: [ 
      {
        connectionStatus?: string(name='ConnectionStatus'),
        instanceId?: string(name='InstanceId'),
        rpo?: long(name='Rpo'),
        serverId?: string(name='ServerId'),
        sitePairId?: string(name='SitePairId'),
        status?: string(name='Status'),
      }
    ](name='warningServer')
    }(name='WarningServers'),
  }(name='ReplicationDetails'),
  requestId?: string(name='RequestId'),
  serverCount?: long(name='ServerCount'),
  siteCount?: long(name='SiteCount'),
  success?: boolean(name='Success'),
  totalSize?: long(name='TotalSize'),
}

model DescribeSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSummaryResponseBody(name='body'),
}

async function describeSummaryWithOptions(request: DescribeSummaryRequest, runtime: Util.RuntimeOptions): DescribeSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSummary',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSummary(request: DescribeSummaryRequest): DescribeSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryWithOptions(request, runtime);
}

model DescribeSupportedOperationsRequest {
  serverId?: string(name='ServerId'),
}

model DescribeSupportedOperationsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  operations?: {
    operation?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='operation')
  }(name='Operations'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSupportedOperationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSupportedOperationsResponseBody(name='body'),
}

async function describeSupportedOperationsWithOptions(request: DescribeSupportedOperationsRequest, runtime: Util.RuntimeOptions): DescribeSupportedOperationsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSupportedOperations',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSupportedOperations(request: DescribeSupportedOperationsRequest): DescribeSupportedOperationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportedOperationsWithOptions(request, runtime);
}

model DescribeTaskRequest {
  securityToken?: string(name='SecurityToken'),
  taskId?: string(name='TaskId'),
  userUid?: long(name='UserUid'),
}

model DescribeTaskResponseBody = {
  code?: string(name='Code'),
  content?: string(name='Content'),
  createdTime?: long(name='CreatedTime'),
  message?: string(name='Message'),
  name?: string(name='Name'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  statusCode?: string(name='StatusCode'),
  statusParams?: string(name='StatusParams'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
  updatedTime?: long(name='UpdatedTime'),
}

model DescribeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskResponseBody(name='body'),
}

async function describeTaskWithOptions(request: DescribeTaskRequest, runtime: Util.RuntimeOptions): DescribeTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTask',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTask(request: DescribeTaskRequest): DescribeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskWithOptions(request, runtime);
}

model DescribeTaskStatisticsRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeTaskStatisticsResponseBody = {
  code?: string(name='Code'),
  failed?: int32(name='Failed'),
  inProgress?: int32(name='InProgress'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  successful?: int32(name='Successful'),
}

model DescribeTaskStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTaskStatisticsResponseBody(name='body'),
}

async function describeTaskStatisticsWithOptions(request: DescribeTaskStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTaskStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTaskStatistics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTaskStatistics(request: DescribeTaskStatisticsRequest): DescribeTaskStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTaskStatisticsWithOptions(request, runtime);
}

model DescribeTasksRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
  sortBy?: string(name='SortBy'),
}

model DescribeTasksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tasks?: {
    task?: [ 
    {
      createdTime?: long(name='CreatedTime'),
      name?: string(name='Name'),
      progress?: int32(name='Progress'),
      statusCode?: string(name='StatusCode'),
      statusParams?: string(name='StatusParams'),
      targetName?: string(name='TargetName'),
      taskId?: string(name='TaskId'),
      updatedTime?: long(name='UpdatedTime'),
    }
  ](name='task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTasksResponseBody(name='body'),
}

async function describeTasksWithOptions(request: DescribeTasksRequest, runtime: Util.RuntimeOptions): DescribeTasksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  if (!Util.isUnset(request.sortBy)) {
    query['SortBy'] = request.sortBy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTasks',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTasks(request: DescribeTasksRequest): DescribeTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTasksWithOptions(request, runtime);
}

model DescribeTestFailoverStatisticsRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model DescribeTestFailoverStatisticsResponseBody = {
  code?: string(name='Code'),
  latestSuccessfulCount?: int32(name='LatestSuccessfulCount'),
  latestTotalCount?: int32(name='LatestTotalCount'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  testRecommended?: int32(name='TestRecommended'),
}

model DescribeTestFailoverStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTestFailoverStatisticsResponseBody(name='body'),
}

async function describeTestFailoverStatisticsWithOptions(request: DescribeTestFailoverStatisticsRequest, runtime: Util.RuntimeOptions): DescribeTestFailoverStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTestFailoverStatistics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTestFailoverStatistics(request: DescribeTestFailoverStatisticsRequest): DescribeTestFailoverStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTestFailoverStatisticsWithOptions(request, runtime);
}

model DescribeUserBusinessStatusRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeUserBusinessStatusResponseBody = {
  businessStatus?: string(name='BusinessStatus'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeUserBusinessStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBusinessStatusResponseBody(name='body'),
}

async function describeUserBusinessStatusWithOptions(request: DescribeUserBusinessStatusRequest, runtime: Util.RuntimeOptions): DescribeUserBusinessStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBusinessStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserBusinessStatus(request: DescribeUserBusinessStatusRequest): DescribeUserBusinessStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBusinessStatusWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  siteRegionId?: string(name='SiteRegionId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeVSwitchesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: {
    vSwitch?: [ 
    {
      availableSelectionInfo?: string(name='AvailableSelectionInfo'),
      id?: string(name='Id'),
      isDefault?: boolean(name='IsDefault'),
      name?: string(name='Name'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.siteRegionId)) {
    query['SiteRegionId'] = request.siteRegionId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVSwitches',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model DescribeWhiteListRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeWhiteListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  whiteList?: string(name='WhiteList'),
}

model DescribeWhiteListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWhiteListResponseBody(name='body'),
}

async function describeWhiteListWithOptions(request: DescribeWhiteListRequest, runtime: Util.RuntimeOptions): DescribeWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWhiteList',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWhiteList(request: DescribeWhiteListRequest): DescribeWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWhiteListWithOptions(request, runtime);
}

model DescribevSphereInventoriesRequest {
  infrastructureId?: string(name='InfrastructureId'),
  path?: string(name='Path'),
  securityToken?: string(name='SecurityToken'),
  type?: string(name='Type'),
}

model DescribevSphereInventoriesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model DescribevSphereInventoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribevSphereInventoriesResponseBody(name='body'),
}

async function describevSphereInventoriesWithOptions(request: DescribevSphereInventoriesRequest, runtime: Util.RuntimeOptions): DescribevSphereInventoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.infrastructureId)) {
    query['InfrastructureId'] = request.infrastructureId;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribevSphereInventories',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describevSphereInventories(request: DescribevSphereInventoriesRequest): DescribevSphereInventoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describevSphereInventoriesWithOptions(request, runtime);
}

model DisableDiskGroupReplicationRequest {
  diskGroupId?: string(name='DiskGroupId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model DisableDiskGroupReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableDiskGroupReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDiskGroupReplicationResponseBody(name='body'),
}

async function disableDiskGroupReplicationWithOptions(request: DisableDiskGroupReplicationRequest, runtime: Util.RuntimeOptions): DisableDiskGroupReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDiskGroupReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDiskGroupReplication(request: DisableDiskGroupReplicationRequest): DisableDiskGroupReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDiskGroupReplicationWithOptions(request, runtime);
}

model DisableReplicationRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model DisableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableReplicationResponseBody(name='body'),
}

async function disableReplicationWithOptions(request: DisableReplicationRequest, runtime: Util.RuntimeOptions): DisableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableReplication(request: DisableReplicationRequest): DisableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableReplicationWithOptions(request, runtime);
}

model EnableDiskGroupReplicationRequest {
  diskGroupId?: string(name='DiskGroupId'),
  disks?: [ 
    {
      sourceDiskId?: string(name='SourceDiskId'),
      targetDiskId?: string(name='TargetDiskId'),
    }
  ](name='Disks'),
  securityToken?: string(name='SecurityToken'),
  targetHostInstanceId?: string(name='TargetHostInstanceId'),
  targetHostIpAddress?: string(name='TargetHostIpAddress'),
  userUid?: long(name='UserUid'),
}

model EnableDiskGroupReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableDiskGroupReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableDiskGroupReplicationResponseBody(name='body'),
}

async function enableDiskGroupReplicationWithOptions(request: EnableDiskGroupReplicationRequest, runtime: Util.RuntimeOptions): EnableDiskGroupReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.targetHostInstanceId)) {
    query['TargetHostInstanceId'] = request.targetHostInstanceId;
  }
  if (!Util.isUnset(request.targetHostIpAddress)) {
    query['TargetHostIpAddress'] = request.targetHostIpAddress;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableDiskGroupReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableDiskGroupReplication(request: EnableDiskGroupReplicationRequest): EnableDiskGroupReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableDiskGroupReplicationWithOptions(request, runtime);
}

model EnableReplicationRequest {
  appConsistentPointPolicy?: string(name='AppConsistentPointPolicy'),
  autoResynchronize?: boolean(name='AutoResynchronize'),
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  replicationNetwork?: string(name='ReplicationNetwork'),
  replicationUseEssd?: boolean(name='ReplicationUseEssd'),
  replicationUseSsd?: boolean(name='ReplicationUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  shadowInstanceType?: string(name='ShadowInstanceType'),
}

model EnableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableReplicationResponseBody(name='body'),
}

async function enableReplicationWithOptions(request: EnableReplicationRequest, runtime: Util.RuntimeOptions): EnableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appConsistentPointPolicy)) {
    query['AppConsistentPointPolicy'] = request.appConsistentPointPolicy;
  }
  if (!Util.isUnset(request.autoResynchronize)) {
    query['AutoResynchronize'] = request.autoResynchronize;
  }
  if (!Util.isUnset(request.crashConsistentPointPolicy)) {
    query['CrashConsistentPointPolicy'] = request.crashConsistentPointPolicy;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.replicationNetwork)) {
    query['ReplicationNetwork'] = request.replicationNetwork;
  }
  if (!Util.isUnset(request.replicationUseEssd)) {
    query['ReplicationUseEssd'] = request.replicationUseEssd;
  }
  if (!Util.isUnset(request.replicationUseSsd)) {
    query['ReplicationUseSsd'] = request.replicationUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.shadowInstanceType)) {
    query['ShadowInstanceType'] = request.shadowInstanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableReplication(request: EnableReplicationRequest): EnableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableReplicationWithOptions(request, runtime);
}

model FailbackRequest {
  recoveryComputeResource?: string(name='RecoveryComputeResource'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryDatastore?: string(name='RecoveryDatastore'),
  recoveryDns?: string(name='RecoveryDns'),
  recoveryGateway?: string(name='RecoveryGateway'),
  recoveryInfrastructureId?: string(name='RecoveryInfrastructureId'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryLocation?: string(name='RecoveryLocation'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetMask?: string(name='RecoveryNetMask'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model FailbackResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model FailbackResponse = {
  headers: map[string]string(name='headers'),
  body: FailbackResponseBody(name='body'),
}

async function failbackWithOptions(request: FailbackRequest, runtime: Util.RuntimeOptions): FailbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryComputeResource)) {
    query['RecoveryComputeResource'] = request.recoveryComputeResource;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryDatastore)) {
    query['RecoveryDatastore'] = request.recoveryDatastore;
  }
  if (!Util.isUnset(request.recoveryDns)) {
    query['RecoveryDns'] = request.recoveryDns;
  }
  if (!Util.isUnset(request.recoveryGateway)) {
    query['RecoveryGateway'] = request.recoveryGateway;
  }
  if (!Util.isUnset(request.recoveryInfrastructureId)) {
    query['RecoveryInfrastructureId'] = request.recoveryInfrastructureId;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryLocation)) {
    query['RecoveryLocation'] = request.recoveryLocation;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetMask)) {
    query['RecoveryNetMask'] = request.recoveryNetMask;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Failback',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function failback(request: FailbackRequest): FailbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return failbackWithOptions(request, runtime);
}

model FixServiceDependencyRequest {
  securityToken?: string(name='SecurityToken'),
}

model FixServiceDependencyResponseBody = {
  code?: string(name='Code'),
  entries?: {
    entry?: [ 
    {
      checkItem?: string(name='CheckItem'),
      description?: boolean(name='Description'),
      internal?: boolean(name='Internal'),
    }
  ](name='entry')
  }(name='Entries'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  success?: boolean(name='Success'),
}

model FixServiceDependencyResponse = {
  headers: map[string]string(name='headers'),
  body: FixServiceDependencyResponseBody(name='body'),
}

async function fixServiceDependencyWithOptions(request: FixServiceDependencyRequest, runtime: Util.RuntimeOptions): FixServiceDependencyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FixServiceDependency',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function fixServiceDependency(request: FixServiceDependencyRequest): FixServiceDependencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return fixServiceDependencyWithOptions(request, runtime);
}

model ForcedFailoverRequest {
  eipAddressId?: string(name='EipAddressId'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ForcedFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ForcedFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: ForcedFailoverResponseBody(name='body'),
}

async function forcedFailoverWithOptions(request: ForcedFailoverRequest, runtime: Util.RuntimeOptions): ForcedFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ForcedFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forcedFailover(request: ForcedFailoverRequest): ForcedFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return forcedFailoverWithOptions(request, runtime);
}

model ForcedFailoverForRPRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ForcedFailoverForRPResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ForcedFailoverForRPResponse = {
  headers: map[string]string(name='headers'),
  body: ForcedFailoverForRPResponseBody(name='body'),
}

async function forcedFailoverForRPWithOptions(request: ForcedFailoverForRPRequest, runtime: Util.RuntimeOptions): ForcedFailoverForRPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ForcedFailoverForRP',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function forcedFailoverForRP(request: ForcedFailoverForRPRequest): ForcedFailoverForRPResponse {
  var runtime = new Util.RuntimeOptions{};
  return forcedFailoverForRPWithOptions(request, runtime);
}

model GenerateActivateCodeRequest {
  expireTime?: long(name='ExpireTime'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model GenerateActivateCodeResponseBody = {
  activationCode?: long(name='ActivationCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateActivateCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateActivateCodeResponseBody(name='body'),
}

async function generateActivateCodeWithOptions(request: GenerateActivateCodeRequest, runtime: Util.RuntimeOptions): GenerateActivateCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateActivateCode',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateActivateCode(request: GenerateActivateCodeRequest): GenerateActivateCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateActivateCodeWithOptions(request, runtime);
}

model GenerateInstallScriptRequest {
  osType?: string(name='OsType'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model GenerateInstallScriptResponseBody = {
  code?: string(name='Code'),
  installScript?: string(name='InstallScript'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GenerateInstallScriptResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateInstallScriptResponseBody(name='body'),
}

async function generateInstallScriptWithOptions(request: GenerateInstallScriptRequest, runtime: Util.RuntimeOptions): GenerateInstallScriptResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GenerateInstallScript',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function generateInstallScript(request: GenerateInstallScriptRequest): GenerateInstallScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateInstallScriptWithOptions(request, runtime);
}

model InitializeServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model InitializeServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model InitializeServerResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeServerResponseBody(name='body'),
}

async function initializeServerWithOptions(request: InitializeServerRequest, runtime: Util.RuntimeOptions): InitializeServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InitializeServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function initializeServer(request: InitializeServerRequest): InitializeServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return initializeServerWithOptions(request, runtime);
}

model OpenHdrServiceRequest {
  ownerId?: long(name='OwnerId'),
}

model OpenHdrServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenHdrServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenHdrServiceResponseBody(name='body'),
}

async function openHdrServiceWithOptions(request: OpenHdrServiceRequest, runtime: Util.RuntimeOptions): OpenHdrServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenHdrService',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openHdrService(request: OpenHdrServiceRequest): OpenHdrServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openHdrServiceWithOptions(request, runtime);
}

model RebootGatewayRequest {
  forceStop?: boolean(name='ForceStop'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model RebootGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model RebootGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: RebootGatewayResponseBody(name='body'),
}

async function rebootGatewayWithOptions(request: RebootGatewayRequest, runtime: Util.RuntimeOptions): RebootGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RebootGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rebootGateway(request: RebootGatewayRequest): RebootGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootGatewayWithOptions(request, runtime);
}

model ReclaimRecoveryPointRequest {
  recoveryPointId?: string(name='RecoveryPointId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReclaimRecoveryPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReclaimRecoveryPointResponse = {
  headers: map[string]string(name='headers'),
  body: ReclaimRecoveryPointResponseBody(name='body'),
}

async function reclaimRecoveryPointWithOptions(request: ReclaimRecoveryPointRequest, runtime: Util.RuntimeOptions): ReclaimRecoveryPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReclaimRecoveryPoint',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reclaimRecoveryPoint(request: ReclaimRecoveryPointRequest): ReclaimRecoveryPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return reclaimRecoveryPointWithOptions(request, runtime);
}

model RegisterDiskGroupRequest {
  disks?: [ 
    {
      diskId?: string(name='DiskId'),
      diskSize?: long(name='DiskSize'),
    }
  ](name='Disks'),
  hostInstanceId?: string(name='HostInstanceId'),
  hostIpAddress?: string(name='HostIpAddress'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
  userUid?: long(name='UserUid'),
}

model RegisterDiskGroupResponseBody = {
  code?: string(name='Code'),
  diskGroupId?: string(name='DiskGroupId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RegisterDiskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDiskGroupResponseBody(name='body'),
}

async function registerDiskGroupWithOptions(request: RegisterDiskGroupRequest, runtime: Util.RuntimeOptions): RegisterDiskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.hostInstanceId)) {
    query['HostInstanceId'] = request.hostInstanceId;
  }
  if (!Util.isUnset(request.hostIpAddress)) {
    query['HostIpAddress'] = request.hostIpAddress;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDiskGroup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerDiskGroup(request: RegisterDiskGroupRequest): RegisterDiskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDiskGroupWithOptions(request, runtime);
}

model RegisterServerRequest {
  agentPort?: int32(name='AgentPort'),
  agentVersion?: string(name='AgentVersion'),
  bootMode?: string(name='BootMode'),
  cpu?: int32(name='Cpu'),
  disks?: string(name='Disks'),
  gatewayId?: string(name='GatewayId'),
  hostname?: string(name='Hostname'),
  ipAddress?: string(name='IpAddress'),
  memory?: long(name='Memory'),
  osDetail?: string(name='OsDetail'),
  osType?: string(name='OsType'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  siteId?: string(name='SiteId'),
  userUid?: long(name='UserUid'),
  volumes?: string(name='Volumes'),
}

model RegisterServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  serverId?: string(name='ServerId'),
  success?: boolean(name='Success'),
}

model RegisterServerResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterServerResponseBody(name='body'),
}

async function registerServerWithOptions(request: RegisterServerRequest, runtime: Util.RuntimeOptions): RegisterServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentPort)) {
    query['AgentPort'] = request.agentPort;
  }
  if (!Util.isUnset(request.agentVersion)) {
    query['AgentVersion'] = request.agentVersion;
  }
  if (!Util.isUnset(request.bootMode)) {
    query['BootMode'] = request.bootMode;
  }
  if (!Util.isUnset(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.osDetail)) {
    query['OsDetail'] = request.osDetail;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.siteId)) {
    query['SiteId'] = request.siteId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  if (!Util.isUnset(request.volumes)) {
    query['Volumes'] = request.volumes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerServer(request: RegisterServerRequest): RegisterServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerServerWithOptions(request, runtime);
}

model RegisterServersRequest {
  agentPort?: int32(name='AgentPort'),
  securityToken?: string(name='SecurityToken'),
  serverInstancesInfo?: string(name='ServerInstancesInfo'),
  sitePairId?: string(name='SitePairId'),
}

model RegisterServersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model RegisterServersResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterServersResponseBody(name='body'),
}

async function registerServersWithOptions(request: RegisterServersRequest, runtime: Util.RuntimeOptions): RegisterServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentPort)) {
    query['AgentPort'] = request.agentPort;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverInstancesInfo)) {
    query['ServerInstancesInfo'] = request.serverInstancesInfo;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterServers',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerServers(request: RegisterServersRequest): RegisterServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerServersWithOptions(request, runtime);
}

model RemoveReplicationRequest {
  gatewayId?: string(name='GatewayId'),
  replicationInfo?: string(name='ReplicationInfo'),
  securityToken?: string(name='SecurityToken'),
}

model RemoveReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveReplicationResponseBody(name='body'),
}

async function removeReplicationWithOptions(request: RemoveReplicationRequest, runtime: Util.RuntimeOptions): RemoveReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.replicationInfo)) {
    query['ReplicationInfo'] = request.replicationInfo;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeReplication(request: RemoveReplicationRequest): RemoveReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeReplicationWithOptions(request, runtime);
}

model RenewDrGatewayTokenRequest {
  gatewayId?: string(name='GatewayId'),
  pubToken?: string(name='PubToken'),
  securityToken?: string(name='SecurityToken'),
  subToken?: string(name='SubToken'),
  userUid?: long(name='UserUid'),
}

model RenewDrGatewayTokenResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pubToken?: string(name='PubToken'),
  requestId?: string(name='RequestId'),
  subToken?: string(name='SubToken'),
  success?: boolean(name='Success'),
}

model RenewDrGatewayTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RenewDrGatewayTokenResponseBody(name='body'),
}

async function renewDrGatewayTokenWithOptions(request: RenewDrGatewayTokenRequest, runtime: Util.RuntimeOptions): RenewDrGatewayTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.pubToken)) {
    query['PubToken'] = request.pubToken;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.subToken)) {
    query['SubToken'] = request.subToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewDrGatewayToken',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewDrGatewayToken(request: RenewDrGatewayTokenRequest): RenewDrGatewayTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewDrGatewayTokenWithOptions(request, runtime);
}

model RepairReplicationRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model RepairReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model RepairReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RepairReplicationResponseBody(name='body'),
}

async function repairReplicationWithOptions(request: RepairReplicationRequest, runtime: Util.RuntimeOptions): RepairReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RepairReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function repairReplication(request: RepairReplicationRequest): RepairReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return repairReplicationWithOptions(request, runtime);
}

model ReportAppConsistentPointRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  snapshotId?: string(name='SnapshotId'),
  snapshotTime?: long(name='SnapshotTime'),
}

model ReportAppConsistentPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportAppConsistentPointResponse = {
  headers: map[string]string(name='headers'),
  body: ReportAppConsistentPointResponseBody(name='body'),
}

async function reportAppConsistentPointWithOptions(request: ReportAppConsistentPointRequest, runtime: Util.RuntimeOptions): ReportAppConsistentPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.snapshotId)) {
    query['SnapshotId'] = request.snapshotId;
  }
  if (!Util.isUnset(request.snapshotTime)) {
    query['SnapshotTime'] = request.snapshotTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportAppConsistentPoint',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportAppConsistentPoint(request: ReportAppConsistentPointRequest): ReportAppConsistentPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportAppConsistentPointWithOptions(request, runtime);
}

model ReportDataPruneStatusRequest {
  appliedDatetime?: string(name='AppliedDatetime'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportDataPruneStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDataPruneStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDataPruneStatusResponseBody(name='body'),
}

async function reportDataPruneStatusWithOptions(request: ReportDataPruneStatusRequest, runtime: Util.RuntimeOptions): ReportDataPruneStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appliedDatetime)) {
    query['AppliedDatetime'] = request.appliedDatetime;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDataPruneStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDataPruneStatus(request: ReportDataPruneStatusRequest): ReportDataPruneStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDataPruneStatusWithOptions(request, runtime);
}

model ReportDiskGroupFullSyncDoneRequest {
  diskGroupId?: string(name='DiskGroupId'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupFullSyncDoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupFullSyncDoneResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupFullSyncDoneResponseBody(name='body'),
}

async function reportDiskGroupFullSyncDoneWithOptions(request: ReportDiskGroupFullSyncDoneRequest, runtime: Util.RuntimeOptions): ReportDiskGroupFullSyncDoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupFullSyncDone',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupFullSyncDone(request: ReportDiskGroupFullSyncDoneRequest): ReportDiskGroupFullSyncDoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupFullSyncDoneWithOptions(request, runtime);
}

model ReportDiskGroupFullSyncStatusRequest {
  diskGroupId?: string(name='DiskGroupId'),
  fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
  fullSyncProgress?: int32(name='FullSyncProgress'),
  fullSyncTotalSize?: long(name='FullSyncTotalSize'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupFullSyncStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupFullSyncStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupFullSyncStatusResponseBody(name='body'),
}

async function reportDiskGroupFullSyncStatusWithOptions(request: ReportDiskGroupFullSyncStatusRequest, runtime: Util.RuntimeOptions): ReportDiskGroupFullSyncStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.fullSyncCurrentSize)) {
    query['FullSyncCurrentSize'] = request.fullSyncCurrentSize;
  }
  if (!Util.isUnset(request.fullSyncProgress)) {
    query['FullSyncProgress'] = request.fullSyncProgress;
  }
  if (!Util.isUnset(request.fullSyncTotalSize)) {
    query['FullSyncTotalSize'] = request.fullSyncTotalSize;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupFullSyncStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupFullSyncStatus(request: ReportDiskGroupFullSyncStatusRequest): ReportDiskGroupFullSyncStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupFullSyncStatusWithOptions(request, runtime);
}

model ReportDiskGroupRepairReplicationDoneRequest {
  diskGroupId?: string(name='DiskGroupId'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupRepairReplicationDoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupRepairReplicationDoneResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupRepairReplicationDoneResponseBody(name='body'),
}

async function reportDiskGroupRepairReplicationDoneWithOptions(request: ReportDiskGroupRepairReplicationDoneRequest, runtime: Util.RuntimeOptions): ReportDiskGroupRepairReplicationDoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupRepairReplicationDone',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupRepairReplicationDone(request: ReportDiskGroupRepairReplicationDoneRequest): ReportDiskGroupRepairReplicationDoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupRepairReplicationDoneWithOptions(request, runtime);
}

model ReportDiskGroupRepairReplicationStatusRequest {
  diskGroupId?: string(name='DiskGroupId'),
  gatewayId?: string(name='GatewayId'),
  repairCurrentSize?: long(name='RepairCurrentSize'),
  repairProgress?: int32(name='RepairProgress'),
  repairTotalSize?: long(name='RepairTotalSize'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupRepairReplicationStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupRepairReplicationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupRepairReplicationStatusResponseBody(name='body'),
}

async function reportDiskGroupRepairReplicationStatusWithOptions(request: ReportDiskGroupRepairReplicationStatusRequest, runtime: Util.RuntimeOptions): ReportDiskGroupRepairReplicationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.repairCurrentSize)) {
    query['RepairCurrentSize'] = request.repairCurrentSize;
  }
  if (!Util.isUnset(request.repairProgress)) {
    query['RepairProgress'] = request.repairProgress;
  }
  if (!Util.isUnset(request.repairTotalSize)) {
    query['RepairTotalSize'] = request.repairTotalSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupRepairReplicationStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupRepairReplicationStatus(request: ReportDiskGroupRepairReplicationStatusRequest): ReportDiskGroupRepairReplicationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupRepairReplicationStatusWithOptions(request, runtime);
}

model ReportDiskGroupReplicationErrorRequest {
  diskGroupId?: string(name='DiskGroupId'),
  errmsg?: string(name='Errmsg'),
  errno?: string(name='Errno'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupReplicationErrorResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupReplicationErrorResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupReplicationErrorResponseBody(name='body'),
}

async function reportDiskGroupReplicationErrorWithOptions(request: ReportDiskGroupReplicationErrorRequest, runtime: Util.RuntimeOptions): ReportDiskGroupReplicationErrorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.errmsg)) {
    query['Errmsg'] = request.errmsg;
  }
  if (!Util.isUnset(request.errno)) {
    query['Errno'] = request.errno;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupReplicationError',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupReplicationError(request: ReportDiskGroupReplicationErrorRequest): ReportDiskGroupReplicationErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupReplicationErrorWithOptions(request, runtime);
}

model ReportDiskGroupsStatusRequest {
  diskGroups?: string(name='DiskGroups'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDiskGroupsStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDiskGroupsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDiskGroupsStatusResponseBody(name='body'),
}

async function reportDiskGroupsStatusWithOptions(request: ReportDiskGroupsStatusRequest, runtime: Util.RuntimeOptions): ReportDiskGroupsStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroups)) {
    query['DiskGroups'] = request.diskGroups;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDiskGroupsStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDiskGroupsStatus(request: ReportDiskGroupsStatusRequest): ReportDiskGroupsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDiskGroupsStatusWithOptions(request, runtime);
}

model ReportDrGatewayAlertRequest {
  alertTime?: string(name='AlertTime'),
  alertValue?: string(name='AlertValue'),
  eventId?: string(name='EventId'),
  gatewayId?: string(name='GatewayId'),
  level?: string(name='Level'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model ReportDrGatewayAlertResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDrGatewayAlertResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDrGatewayAlertResponseBody(name='body'),
}

async function reportDrGatewayAlertWithOptions(request: ReportDrGatewayAlertRequest, runtime: Util.RuntimeOptions): ReportDrGatewayAlertResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alertTime)) {
    query['AlertTime'] = request.alertTime;
  }
  if (!Util.isUnset(request.alertValue)) {
    query['AlertValue'] = request.alertValue;
  }
  if (!Util.isUnset(request.eventId)) {
    query['EventId'] = request.eventId;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.level)) {
    query['Level'] = request.level;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDrGatewayAlert',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDrGatewayAlert(request: ReportDrGatewayAlertRequest): ReportDrGatewayAlertResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDrGatewayAlertWithOptions(request, runtime);
}

model ReportDrGatewayStatisticsRequest {
  downstreamTraffic?: long(name='DownstreamTraffic'),
  gatewayId?: string(name='GatewayId'),
  networkType?: string(name='NetworkType'),
  securityToken?: string(name='SecurityToken'),
  upstreamTraffic?: long(name='UpstreamTraffic'),
  userUid?: long(name='UserUid'),
}

model ReportDrGatewayStatisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDrGatewayStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDrGatewayStatisticsResponseBody(name='body'),
}

async function reportDrGatewayStatisticsWithOptions(request: ReportDrGatewayStatisticsRequest, runtime: Util.RuntimeOptions): ReportDrGatewayStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downstreamTraffic)) {
    query['DownstreamTraffic'] = request.downstreamTraffic;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.networkType)) {
    query['NetworkType'] = request.networkType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.upstreamTraffic)) {
    query['UpstreamTraffic'] = request.upstreamTraffic;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDrGatewayStatistics',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDrGatewayStatistics(request: ReportDrGatewayStatisticsRequest): ReportDrGatewayStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDrGatewayStatisticsWithOptions(request, runtime);
}

model ReportDrGatewayStatusRequest {
  downstreamSpeed?: long(name='DownstreamSpeed'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  upstreamSpeed?: long(name='UpstreamSpeed'),
  userUid?: long(name='UserUid'),
}

model ReportDrGatewayStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportDrGatewayStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportDrGatewayStatusResponseBody(name='body'),
}

async function reportDrGatewayStatusWithOptions(request: ReportDrGatewayStatusRequest, runtime: Util.RuntimeOptions): ReportDrGatewayStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.downstreamSpeed)) {
    query['DownstreamSpeed'] = request.downstreamSpeed;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.upstreamSpeed)) {
    query['UpstreamSpeed'] = request.upstreamSpeed;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportDrGatewayStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportDrGatewayStatus(request: ReportDrGatewayStatusRequest): ReportDrGatewayStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportDrGatewayStatusWithOptions(request, runtime);
}

model ReportFullSyncDoneRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportFullSyncDoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportFullSyncDoneResponse = {
  headers: map[string]string(name='headers'),
  body: ReportFullSyncDoneResponseBody(name='body'),
}

async function reportFullSyncDoneWithOptions(request: ReportFullSyncDoneRequest, runtime: Util.RuntimeOptions): ReportFullSyncDoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportFullSyncDone',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportFullSyncDone(request: ReportFullSyncDoneRequest): ReportFullSyncDoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportFullSyncDoneWithOptions(request, runtime);
}

model ReportFullSyncStatusRequest {
  fullSyncCurrentSize?: long(name='FullSyncCurrentSize'),
  fullSyncProgress?: int32(name='FullSyncProgress'),
  fullSyncTotalSize?: long(name='FullSyncTotalSize'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportFullSyncStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportFullSyncStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportFullSyncStatusResponseBody(name='body'),
}

async function reportFullSyncStatusWithOptions(request: ReportFullSyncStatusRequest, runtime: Util.RuntimeOptions): ReportFullSyncStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fullSyncCurrentSize)) {
    query['FullSyncCurrentSize'] = request.fullSyncCurrentSize;
  }
  if (!Util.isUnset(request.fullSyncProgress)) {
    query['FullSyncProgress'] = request.fullSyncProgress;
  }
  if (!Util.isUnset(request.fullSyncTotalSize)) {
    query['FullSyncTotalSize'] = request.fullSyncTotalSize;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportFullSyncStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportFullSyncStatus(request: ReportFullSyncStatusRequest): ReportFullSyncStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportFullSyncStatusWithOptions(request, runtime);
}

model ReportInfrastructureStatusRequest {
  errno?: string(name='Errno'),
  infrastructureId?: string(name='InfrastructureId'),
  securityToken?: string(name='SecurityToken'),
  status?: string(name='Status'),
  userUid?: long(name='UserUid'),
}

model ReportInfrastructureStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportInfrastructureStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportInfrastructureStatusResponseBody(name='body'),
}

async function reportInfrastructureStatusWithOptions(request: ReportInfrastructureStatusRequest, runtime: Util.RuntimeOptions): ReportInfrastructureStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.errno)) {
    query['Errno'] = request.errno;
  }
  if (!Util.isUnset(request.infrastructureId)) {
    query['InfrastructureId'] = request.infrastructureId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportInfrastructureStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportInfrastructureStatus(request: ReportInfrastructureStatusRequest): ReportInfrastructureStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportInfrastructureStatusWithOptions(request, runtime);
}

model ReportKmsStatusRequest {
  hardwareId?: string(name='HardwareId'),
  output?: string(name='Output'),
  succeed?: boolean(name='Succeed'),
}

model ReportKmsStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportKmsStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportKmsStatusResponseBody(name='body'),
}

async function reportKmsStatusWithOptions(request: ReportKmsStatusRequest, runtime: Util.RuntimeOptions): ReportKmsStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.hardwareId)) {
    query['HardwareId'] = request.hardwareId;
  }
  if (!Util.isUnset(request.output)) {
    query['Output'] = request.output;
  }
  if (!Util.isUnset(request.succeed)) {
    query['Succeed'] = request.succeed;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportKmsStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportKmsStatus(request: ReportKmsStatusRequest): ReportKmsStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportKmsStatusWithOptions(request, runtime);
}

model ReportRecoveryPointRequest {
  applicationConsistent?: boolean(name='ApplicationConsistent'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportRecoveryPointResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportRecoveryPointResponse = {
  headers: map[string]string(name='headers'),
  body: ReportRecoveryPointResponseBody(name='body'),
}

async function reportRecoveryPointWithOptions(request: ReportRecoveryPointRequest, runtime: Util.RuntimeOptions): ReportRecoveryPointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationConsistent)) {
    query['ApplicationConsistent'] = request.applicationConsistent;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportRecoveryPoint',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportRecoveryPoint(request: ReportRecoveryPointRequest): ReportRecoveryPointResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportRecoveryPointWithOptions(request, runtime);
}

model ReportRepairReplicationDoneRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportRepairReplicationDoneResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportRepairReplicationDoneResponse = {
  headers: map[string]string(name='headers'),
  body: ReportRepairReplicationDoneResponseBody(name='body'),
}

async function reportRepairReplicationDoneWithOptions(request: ReportRepairReplicationDoneRequest, runtime: Util.RuntimeOptions): ReportRepairReplicationDoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportRepairReplicationDone',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportRepairReplicationDone(request: ReportRepairReplicationDoneRequest): ReportRepairReplicationDoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportRepairReplicationDoneWithOptions(request, runtime);
}

model ReportRepairReplicationStatusRequest {
  gatewayId?: string(name='GatewayId'),
  repairCurrentSize?: long(name='RepairCurrentSize'),
  repairProgress?: int32(name='RepairProgress'),
  repairTotalSize?: long(name='RepairTotalSize'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportRepairReplicationStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportRepairReplicationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportRepairReplicationStatusResponseBody(name='body'),
}

async function reportRepairReplicationStatusWithOptions(request: ReportRepairReplicationStatusRequest, runtime: Util.RuntimeOptions): ReportRepairReplicationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.repairCurrentSize)) {
    query['RepairCurrentSize'] = request.repairCurrentSize;
  }
  if (!Util.isUnset(request.repairProgress)) {
    query['RepairProgress'] = request.repairProgress;
  }
  if (!Util.isUnset(request.repairTotalSize)) {
    query['RepairTotalSize'] = request.repairTotalSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportRepairReplicationStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportRepairReplicationStatus(request: ReportRepairReplicationStatusRequest): ReportRepairReplicationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportRepairReplicationStatusWithOptions(request, runtime);
}

model ReportReplicationErrorRequest {
  errmsg?: string(name='Errmsg'),
  errno?: string(name='Errno'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportReplicationErrorResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportReplicationErrorResponse = {
  headers: map[string]string(name='headers'),
  body: ReportReplicationErrorResponseBody(name='body'),
}

async function reportReplicationErrorWithOptions(request: ReportReplicationErrorRequest, runtime: Util.RuntimeOptions): ReportReplicationErrorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.errmsg)) {
    query['Errmsg'] = request.errmsg;
  }
  if (!Util.isUnset(request.errno)) {
    query['Errno'] = request.errno;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportReplicationError',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportReplicationError(request: ReportReplicationErrorRequest): ReportReplicationErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportReplicationErrorWithOptions(request, runtime);
}

model ReportServersStatusRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  servers?: string(name='Servers'),
  userUid?: long(name='UserUid'),
}

model ReportServersStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportServersStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ReportServersStatusResponseBody(name='body'),
}

async function reportServersStatusWithOptions(request: ReportServersStatusRequest, runtime: Util.RuntimeOptions): ReportServersStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.servers)) {
    query['Servers'] = request.servers;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportServersStatus',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportServersStatus(request: ReportServersStatusRequest): ReportServersStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportServersStatusWithOptions(request, runtime);
}

model ReportShadowConsistenceRequest {
  consistent?: boolean(name='Consistent'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReportShadowConsistenceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportShadowConsistenceResponse = {
  headers: map[string]string(name='headers'),
  body: ReportShadowConsistenceResponseBody(name='body'),
}

async function reportShadowConsistenceWithOptions(request: ReportShadowConsistenceRequest, runtime: Util.RuntimeOptions): ReportShadowConsistenceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.consistent)) {
    query['Consistent'] = request.consistent;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportShadowConsistence',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportShadowConsistence(request: ReportShadowConsistenceRequest): ReportShadowConsistenceResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportShadowConsistenceWithOptions(request, runtime);
}

model ReportWorkloadRequest {
  backupWorkload?: int32(name='BackupWorkload'),
  gatewayId?: string(name='GatewayId'),
  recoveryWorkload?: int32(name='RecoveryWorkload'),
  securityToken?: string(name='SecurityToken'),
}

model ReportWorkloadResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReportWorkloadResponse = {
  headers: map[string]string(name='headers'),
  body: ReportWorkloadResponseBody(name='body'),
}

async function reportWorkloadWithOptions(request: ReportWorkloadRequest, runtime: Util.RuntimeOptions): ReportWorkloadResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backupWorkload)) {
    query['BackupWorkload'] = request.backupWorkload;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.recoveryWorkload)) {
    query['RecoveryWorkload'] = request.recoveryWorkload;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReportWorkload',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reportWorkload(request: ReportWorkloadRequest): ReportWorkloadResponse {
  var runtime = new Util.RuntimeOptions{};
  return reportWorkloadWithOptions(request, runtime);
}

model RequestBdTrialRequest {
  company?: string(name='Company'),
  contact?: string(name='Contact'),
  dataSize?: long(name='DataSize'),
  detail?: string(name='Detail'),
  distribution?: string(name='Distribution'),
  securityToken?: string(name='SecurityToken'),
  telephone?: string(name='Telephone'),
  version?: string(name='Version'),
}

model RequestBdTrialResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RequestBdTrialResponse = {
  headers: map[string]string(name='headers'),
  body: RequestBdTrialResponseBody(name='body'),
}

async function requestBdTrialWithOptions(request: RequestBdTrialRequest, runtime: Util.RuntimeOptions): RequestBdTrialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.company)) {
    query['Company'] = request.company;
  }
  if (!Util.isUnset(request.contact)) {
    query['Contact'] = request.contact;
  }
  if (!Util.isUnset(request.dataSize)) {
    query['DataSize'] = request.dataSize;
  }
  if (!Util.isUnset(request.detail)) {
    query['Detail'] = request.detail;
  }
  if (!Util.isUnset(request.distribution)) {
    query['Distribution'] = request.distribution;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.telephone)) {
    query['Telephone'] = request.telephone;
  }
  if (!Util.isUnset(request.version)) {
    query['Version'] = request.version;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RequestBdTrial',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function requestBdTrial(request: RequestBdTrialRequest): RequestBdTrialResponse {
  var runtime = new Util.RuntimeOptions{};
  return requestBdTrialWithOptions(request, runtime);
}

model RestartServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model RestartServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model RestartServerResponse = {
  headers: map[string]string(name='headers'),
  body: RestartServerResponseBody(name='body'),
}

async function restartServerWithOptions(request: RestartServerRequest, runtime: Util.RuntimeOptions): RestartServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartServer(request: RestartServerRequest): RestartServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartServerWithOptions(request, runtime);
}

model ResynchronizeRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model ResynchronizeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ResynchronizeResponse = {
  headers: map[string]string(name='headers'),
  body: ResynchronizeResponseBody(name='body'),
}

async function resynchronizeWithOptions(request: ResynchronizeRequest, runtime: Util.RuntimeOptions): ResynchronizeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Resynchronize',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resynchronize(request: ResynchronizeRequest): ResynchronizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resynchronizeWithOptions(request, runtime);
}

model ReversedDisableReplicationRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model ReversedDisableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReversedDisableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedDisableReplicationResponseBody(name='body'),
}

async function reversedDisableReplicationWithOptions(request: ReversedDisableReplicationRequest, runtime: Util.RuntimeOptions): ReversedDisableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedDisableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedDisableReplication(request: ReversedDisableReplicationRequest): ReversedDisableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedDisableReplicationWithOptions(request, runtime);
}

model ReversedEnableReplicationRequest {
  appConsistentPointPolicy?: string(name='AppConsistentPointPolicy'),
  crashConsistentPointPolicy?: string(name='CrashConsistentPointPolicy'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  replicationComputeResource?: string(name='ReplicationComputeResource'),
  replicationDatastore?: string(name='ReplicationDatastore'),
  replicationDns?: string(name='ReplicationDns'),
  replicationGateway?: string(name='ReplicationGateway'),
  replicationInfrastructureId?: string(name='ReplicationInfrastructureId'),
  replicationIpAddress?: string(name='ReplicationIpAddress'),
  replicationLocation?: string(name='ReplicationLocation'),
  replicationNetMask?: string(name='ReplicationNetMask'),
  replicationNetwork?: string(name='ReplicationNetwork'),
  replicationUseDhcp?: boolean(name='ReplicationUseDhcp'),
  replicationUseOriginalInstance?: boolean(name='ReplicationUseOriginalInstance'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  shadowInstanceType?: string(name='ShadowInstanceType'),
}

model ReversedEnableReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model ReversedEnableReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedEnableReplicationResponseBody(name='body'),
}

async function reversedEnableReplicationWithOptions(request: ReversedEnableReplicationRequest, runtime: Util.RuntimeOptions): ReversedEnableReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appConsistentPointPolicy)) {
    query['AppConsistentPointPolicy'] = request.appConsistentPointPolicy;
  }
  if (!Util.isUnset(request.crashConsistentPointPolicy)) {
    query['CrashConsistentPointPolicy'] = request.crashConsistentPointPolicy;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.replicationComputeResource)) {
    query['ReplicationComputeResource'] = request.replicationComputeResource;
  }
  if (!Util.isUnset(request.replicationDatastore)) {
    query['ReplicationDatastore'] = request.replicationDatastore;
  }
  if (!Util.isUnset(request.replicationDns)) {
    query['ReplicationDns'] = request.replicationDns;
  }
  if (!Util.isUnset(request.replicationGateway)) {
    query['ReplicationGateway'] = request.replicationGateway;
  }
  if (!Util.isUnset(request.replicationInfrastructureId)) {
    query['ReplicationInfrastructureId'] = request.replicationInfrastructureId;
  }
  if (!Util.isUnset(request.replicationIpAddress)) {
    query['ReplicationIpAddress'] = request.replicationIpAddress;
  }
  if (!Util.isUnset(request.replicationLocation)) {
    query['ReplicationLocation'] = request.replicationLocation;
  }
  if (!Util.isUnset(request.replicationNetMask)) {
    query['ReplicationNetMask'] = request.replicationNetMask;
  }
  if (!Util.isUnset(request.replicationNetwork)) {
    query['ReplicationNetwork'] = request.replicationNetwork;
  }
  if (!Util.isUnset(request.replicationUseDhcp)) {
    query['ReplicationUseDhcp'] = request.replicationUseDhcp;
  }
  if (!Util.isUnset(request.replicationUseOriginalInstance)) {
    query['ReplicationUseOriginalInstance'] = request.replicationUseOriginalInstance;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.shadowInstanceType)) {
    query['ShadowInstanceType'] = request.shadowInstanceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedEnableReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedEnableReplication(request: ReversedEnableReplicationRequest): ReversedEnableReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedEnableReplicationWithOptions(request, runtime);
}

model ReversedInitializeServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model ReversedInitializeServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReversedInitializeServerResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedInitializeServerResponseBody(name='body'),
}

async function reversedInitializeServerWithOptions(request: ReversedInitializeServerRequest, runtime: Util.RuntimeOptions): ReversedInitializeServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedInitializeServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedInitializeServer(request: ReversedInitializeServerRequest): ReversedInitializeServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedInitializeServerWithOptions(request, runtime);
}

model ReversedRegisterServerRequest {
  agentVersion?: string(name='AgentVersion'),
  bootMode?: string(name='BootMode'),
  cpu?: int32(name='Cpu'),
  disks?: string(name='Disks'),
  gatewayId?: string(name='GatewayId'),
  hostname?: string(name='Hostname'),
  ipAddress?: string(name='IpAddress'),
  memory?: long(name='Memory'),
  osDetail?: string(name='OsDetail'),
  osType?: string(name='OsType'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
  volumes?: string(name='Volumes'),
}

model ReversedRegisterServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  serverId?: string(name='ServerId'),
  success?: boolean(name='Success'),
}

model ReversedRegisterServerResponse = {
  headers: map[string]string(name='headers'),
  body: ReversedRegisterServerResponseBody(name='body'),
}

async function reversedRegisterServerWithOptions(request: ReversedRegisterServerRequest, runtime: Util.RuntimeOptions): ReversedRegisterServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentVersion)) {
    query['AgentVersion'] = request.agentVersion;
  }
  if (!Util.isUnset(request.bootMode)) {
    query['BootMode'] = request.bootMode;
  }
  if (!Util.isUnset(request.cpu)) {
    query['Cpu'] = request.cpu;
  }
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.hostname)) {
    query['Hostname'] = request.hostname;
  }
  if (!Util.isUnset(request.ipAddress)) {
    query['IpAddress'] = request.ipAddress;
  }
  if (!Util.isUnset(request.memory)) {
    query['Memory'] = request.memory;
  }
  if (!Util.isUnset(request.osDetail)) {
    query['OsDetail'] = request.osDetail;
  }
  if (!Util.isUnset(request.osType)) {
    query['OsType'] = request.osType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  if (!Util.isUnset(request.volumes)) {
    query['Volumes'] = request.volumes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReversedRegisterServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reversedRegisterServer(request: ReversedRegisterServerRequest): ReversedRegisterServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return reversedRegisterServerWithOptions(request, runtime);
}

model SetupAgentRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model SetupAgentResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model SetupAgentResponse = {
  headers: map[string]string(name='headers'),
  body: SetupAgentResponseBody(name='body'),
}

async function setupAgentWithOptions(request: SetupAgentRequest, runtime: Util.RuntimeOptions): SetupAgentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetupAgent',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setupAgent(request: SetupAgentRequest): SetupAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  return setupAgentWithOptions(request, runtime);
}

model StartGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model StartGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model StartGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: StartGatewayResponseBody(name='body'),
}

async function startGatewayWithOptions(request: StartGatewayRequest, runtime: Util.RuntimeOptions): StartGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StartGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function startGateway(request: StartGatewayRequest): StartGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return startGatewayWithOptions(request, runtime);
}

model StopGatewayRequest {
  forceStop?: boolean(name='ForceStop'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model StopGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model StopGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: StopGatewayResponseBody(name='body'),
}

async function stopGatewayWithOptions(request: StopGatewayRequest, runtime: Util.RuntimeOptions): StopGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'StopGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function stopGateway(request: StopGatewayRequest): StopGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopGatewayWithOptions(request, runtime);
}

model TestCleanupRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model TestCleanupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestCleanupResponse = {
  headers: map[string]string(name='headers'),
  body: TestCleanupResponseBody(name='body'),
}

async function testCleanupWithOptions(request: TestCleanupRequest, runtime: Util.RuntimeOptions): TestCleanupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestCleanup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testCleanup(request: TestCleanupRequest): TestCleanupResponse {
  var runtime = new Util.RuntimeOptions{};
  return testCleanupWithOptions(request, runtime);
}

model TestCleanupForRPRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model TestCleanupForRPResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestCleanupForRPResponse = {
  headers: map[string]string(name='headers'),
  body: TestCleanupForRPResponseBody(name='body'),
}

async function testCleanupForRPWithOptions(request: TestCleanupForRPRequest, runtime: Util.RuntimeOptions): TestCleanupForRPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestCleanupForRP',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testCleanupForRP(request: TestCleanupForRPRequest): TestCleanupForRPResponse {
  var runtime = new Util.RuntimeOptions{};
  return testCleanupForRPWithOptions(request, runtime);
}

model TestFailoverRequest {
  eipAddressId?: string(name='EipAddressId'),
  recoveryCpu?: int32(name='RecoveryCpu'),
  recoveryInstanceName?: string(name='RecoveryInstanceName'),
  recoveryInstanceType?: string(name='RecoveryInstanceType'),
  recoveryIpAddress?: string(name='RecoveryIpAddress'),
  recoveryMemory?: long(name='RecoveryMemory'),
  recoveryNetwork?: string(name='RecoveryNetwork'),
  recoveryPointId?: string(name='RecoveryPointId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  recoveryPostScriptContent?: string(name='RecoveryPostScriptContent'),
  recoveryPostScriptType?: string(name='RecoveryPostScriptType'),
  recoveryReserveIp?: boolean(name='RecoveryReserveIp'),
  recoveryUseDhcp?: boolean(name='RecoveryUseDhcp'),
  recoveryUseEssd?: boolean(name='RecoveryUseEssd'),
  recoveryUseSsd?: boolean(name='RecoveryUseSsd'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model TestFailoverResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestFailoverResponse = {
  headers: map[string]string(name='headers'),
  body: TestFailoverResponseBody(name='body'),
}

async function testFailoverWithOptions(request: TestFailoverRequest, runtime: Util.RuntimeOptions): TestFailoverResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eipAddressId)) {
    query['EipAddressId'] = request.eipAddressId;
  }
  if (!Util.isUnset(request.recoveryCpu)) {
    query['RecoveryCpu'] = request.recoveryCpu;
  }
  if (!Util.isUnset(request.recoveryInstanceName)) {
    query['RecoveryInstanceName'] = request.recoveryInstanceName;
  }
  if (!Util.isUnset(request.recoveryInstanceType)) {
    query['RecoveryInstanceType'] = request.recoveryInstanceType;
  }
  if (!Util.isUnset(request.recoveryIpAddress)) {
    query['RecoveryIpAddress'] = request.recoveryIpAddress;
  }
  if (!Util.isUnset(request.recoveryMemory)) {
    query['RecoveryMemory'] = request.recoveryMemory;
  }
  if (!Util.isUnset(request.recoveryNetwork)) {
    query['RecoveryNetwork'] = request.recoveryNetwork;
  }
  if (!Util.isUnset(request.recoveryPointId)) {
    query['RecoveryPointId'] = request.recoveryPointId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.recoveryPostScriptContent)) {
    query['RecoveryPostScriptContent'] = request.recoveryPostScriptContent;
  }
  if (!Util.isUnset(request.recoveryPostScriptType)) {
    query['RecoveryPostScriptType'] = request.recoveryPostScriptType;
  }
  if (!Util.isUnset(request.recoveryReserveIp)) {
    query['RecoveryReserveIp'] = request.recoveryReserveIp;
  }
  if (!Util.isUnset(request.recoveryUseDhcp)) {
    query['RecoveryUseDhcp'] = request.recoveryUseDhcp;
  }
  if (!Util.isUnset(request.recoveryUseEssd)) {
    query['RecoveryUseEssd'] = request.recoveryUseEssd;
  }
  if (!Util.isUnset(request.recoveryUseSsd)) {
    query['RecoveryUseSsd'] = request.recoveryUseSsd;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestFailover',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testFailover(request: TestFailoverRequest): TestFailoverResponse {
  var runtime = new Util.RuntimeOptions{};
  return testFailoverWithOptions(request, runtime);
}

model TestFailoverForRPRequest {
  recoveryPlanId?: string(name='RecoveryPlanId'),
  recoveryPointTime?: long(name='RecoveryPointTime'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model TestFailoverForRPResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TestFailoverForRPResponse = {
  headers: map[string]string(name='headers'),
  body: TestFailoverForRPResponseBody(name='body'),
}

async function testFailoverForRPWithOptions(request: TestFailoverForRPRequest, runtime: Util.RuntimeOptions): TestFailoverForRPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.recoveryPointTime)) {
    query['RecoveryPointTime'] = request.recoveryPointTime;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestFailoverForRP',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testFailoverForRP(request: TestFailoverForRPRequest): TestFailoverForRPResponse {
  var runtime = new Util.RuntimeOptions{};
  return testFailoverForRPWithOptions(request, runtime);
}

model TriggerRegisterRequest {
  recoveredIpAddress?: string(name='RecoveredIpAddress'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model TriggerRegisterResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TriggerRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerRegisterResponseBody(name='body'),
}

async function triggerRegisterWithOptions(request: TriggerRegisterRequest, runtime: Util.RuntimeOptions): TriggerRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.recoveredIpAddress)) {
    query['RecoveredIpAddress'] = request.recoveredIpAddress;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerRegister',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerRegister(request: TriggerRegisterRequest): TriggerRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerRegisterWithOptions(request, runtime);
}

model TriggerReversedRegisterRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model TriggerReversedRegisterResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model TriggerReversedRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: TriggerReversedRegisterResponseBody(name='body'),
}

async function triggerReversedRegisterWithOptions(request: TriggerReversedRegisterRequest, runtime: Util.RuntimeOptions): TriggerReversedRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerReversedRegister',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function triggerReversedRegister(request: TriggerReversedRegisterRequest): TriggerReversedRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerReversedRegisterWithOptions(request, runtime);
}

model UnregisterDiskGroupRequest {
  diskGroupId?: string(name='DiskGroupId'),
  securityToken?: string(name='SecurityToken'),
  userUid?: long(name='UserUid'),
}

model UnregisterDiskGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnregisterDiskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterDiskGroupResponseBody(name='body'),
}

async function unregisterDiskGroupWithOptions(request: UnregisterDiskGroupRequest, runtime: Util.RuntimeOptions): UnregisterDiskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterDiskGroup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterDiskGroup(request: UnregisterDiskGroupRequest): UnregisterDiskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterDiskGroupWithOptions(request, runtime);
}

model UnregisterDrGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model UnregisterDrGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UnregisterDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterDrGatewayResponseBody(name='body'),
}

async function unregisterDrGatewayWithOptions(request: UnregisterDrGatewayRequest, runtime: Util.RuntimeOptions): UnregisterDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterDrGateway(request: UnregisterDrGatewayRequest): UnregisterDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterDrGatewayWithOptions(request, runtime);
}

model UnregisterGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model UnregisterGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UnregisterGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterGatewayResponseBody(name='body'),
}

async function unregisterGatewayWithOptions(request: UnregisterGatewayRequest, runtime: Util.RuntimeOptions): UnregisterGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterGateway(request: UnregisterGatewayRequest): UnregisterGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterGatewayWithOptions(request, runtime);
}

model UnregisterServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model UnregisterServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnregisterServerResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterServerResponseBody(name='body'),
}

async function unregisterServerWithOptions(request: UnregisterServerRequest, runtime: Util.RuntimeOptions): UnregisterServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnregisterServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unregisterServer(request: UnregisterServerRequest): UnregisterServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return unregisterServerWithOptions(request, runtime);
}

model UpdateDiskGroupRequest {
  diskGroupId?: string(name='DiskGroupId'),
  disks?: [ 
    {
      sourceDiskId?: string(name='SourceDiskId'),
      sourceDiskSize?: long(name='SourceDiskSize'),
      targetDiskId?: string(name='TargetDiskId'),
      targetDiskSize?: long(name='TargetDiskSize'),
    }
  ](name='Disks'),
  securityToken?: string(name='SecurityToken'),
  sourceHostIpAddress?: string(name='SourceHostIpAddress'),
  targetHostIpAddress?: string(name='TargetHostIpAddress'),
  userUid?: long(name='UserUid'),
}

model UpdateDiskGroupResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDiskGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDiskGroupResponseBody(name='body'),
}

async function updateDiskGroupWithOptions(request: UpdateDiskGroupRequest, runtime: Util.RuntimeOptions): UpdateDiskGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.diskGroupId)) {
    query['DiskGroupId'] = request.diskGroupId;
  }
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sourceHostIpAddress)) {
    query['SourceHostIpAddress'] = request.sourceHostIpAddress;
  }
  if (!Util.isUnset(request.targetHostIpAddress)) {
    query['TargetHostIpAddress'] = request.targetHostIpAddress;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDiskGroup',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDiskGroup(request: UpdateDiskGroupRequest): UpdateDiskGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDiskGroupWithOptions(request, runtime);
}

model UpdateDrGatewayRequest {
  gatewayId?: string(name='GatewayId'),
  password?: string(name='Password'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateDrGatewayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDrGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDrGatewayResponseBody(name='body'),
}

async function updateDrGatewayWithOptions(request: UpdateDrGatewayRequest, runtime: Util.RuntimeOptions): UpdateDrGatewayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.password)) {
    query['Password'] = request.password;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDrGateway',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDrGateway(request: UpdateDrGatewayRequest): UpdateDrGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDrGatewayWithOptions(request, runtime);
}

model UpdateDrGatewayFlowControlPolicyRequest {
  flowControlPolicy?: string(name='FlowControlPolicy'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateDrGatewayFlowControlPolicyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDrGatewayFlowControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDrGatewayFlowControlPolicyResponseBody(name='body'),
}

async function updateDrGatewayFlowControlPolicyWithOptions(request: UpdateDrGatewayFlowControlPolicyRequest, runtime: Util.RuntimeOptions): UpdateDrGatewayFlowControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowControlPolicy)) {
    query['FlowControlPolicy'] = request.flowControlPolicy;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDrGatewayFlowControlPolicy',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDrGatewayFlowControlPolicy(request: UpdateDrGatewayFlowControlPolicyRequest): UpdateDrGatewayFlowControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDrGatewayFlowControlPolicyWithOptions(request, runtime);
}

model UpdateImageInfoRequest {
  imageName?: string(name='ImageName'),
  resourceRegionId?: string(name='ResourceRegionId'),
  vmType?: string(name='VmType'),
}

model UpdateImageInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateImageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateImageInfoResponseBody(name='body'),
}

async function updateImageInfoWithOptions(request: UpdateImageInfoRequest, runtime: Util.RuntimeOptions): UpdateImageInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.imageName)) {
    query['ImageName'] = request.imageName;
  }
  if (!Util.isUnset(request.resourceRegionId)) {
    query['ResourceRegionId'] = request.resourceRegionId;
  }
  if (!Util.isUnset(request.vmType)) {
    query['VmType'] = request.vmType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateImageInfo',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateImageInfo(request: UpdateImageInfoRequest): UpdateImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageInfoWithOptions(request, runtime);
}

model UpdateInfrastructureRequest {
  credential?: string(name='Credential'),
  infrastructureId?: string(name='InfrastructureId'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateInfrastructureResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UpdateInfrastructureResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateInfrastructureResponseBody(name='body'),
}

async function updateInfrastructureWithOptions(request: UpdateInfrastructureRequest, runtime: Util.RuntimeOptions): UpdateInfrastructureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.credential)) {
    query['Credential'] = request.credential;
  }
  if (!Util.isUnset(request.infrastructureId)) {
    query['InfrastructureId'] = request.infrastructureId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInfrastructure',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateInfrastructure(request: UpdateInfrastructureRequest): UpdateInfrastructureResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateInfrastructureWithOptions(request, runtime);
}

model UpdateRecoveryPlanRequest {
  content?: string(name='Content'),
  name?: string(name='Name'),
  recoveryPlanId?: string(name='RecoveryPlanId'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateRecoveryPlanResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UpdateRecoveryPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRecoveryPlanResponseBody(name='body'),
}

async function updateRecoveryPlanWithOptions(request: UpdateRecoveryPlanRequest, runtime: Util.RuntimeOptions): UpdateRecoveryPlanResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.recoveryPlanId)) {
    query['RecoveryPlanId'] = request.recoveryPlanId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRecoveryPlan',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRecoveryPlan(request: UpdateRecoveryPlanRequest): UpdateRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecoveryPlanWithOptions(request, runtime);
}

model UpdateReplicationRequest {
  gatewayId?: string(name='GatewayId'),
  replicationList?: string(name='ReplicationList'),
  securityToken?: string(name='SecurityToken'),
}

model UpdateReplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateReplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateReplicationResponseBody(name='body'),
}

async function updateReplicationWithOptions(request: UpdateReplicationRequest, runtime: Util.RuntimeOptions): UpdateReplicationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.replicationList)) {
    query['ReplicationList'] = request.replicationList;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateReplication',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateReplication(request: UpdateReplicationRequest): UpdateReplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateReplicationWithOptions(request, runtime);
}

model UpdateServerRequest {
  alias?: string(name='Alias'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model UpdateServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateServerResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerResponseBody(name='body'),
}

async function updateServerWithOptions(request: UpdateServerRequest, runtime: Util.RuntimeOptions): UpdateServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alias)) {
    query['Alias'] = request.alias;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServer(request: UpdateServerRequest): UpdateServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerWithOptions(request, runtime);
}

model UpdateServerDiskInfoRequest {
  disks?: string(name='Disks'),
  gatewayId?: string(name='GatewayId'),
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
  userUid?: long(name='UserUid'),
}

model UpdateServerDiskInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateServerDiskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateServerDiskInfoResponseBody(name='body'),
}

async function updateServerDiskInfoWithOptions(request: UpdateServerDiskInfoRequest, runtime: Util.RuntimeOptions): UpdateServerDiskInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.disks)) {
    query['Disks'] = request.disks;
  }
  if (!Util.isUnset(request.gatewayId)) {
    query['GatewayId'] = request.gatewayId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  if (!Util.isUnset(request.userUid)) {
    query['UserUid'] = request.userUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServerDiskInfo',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServerDiskInfo(request: UpdateServerDiskInfoRequest): UpdateServerDiskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateServerDiskInfoWithOptions(request, runtime);
}

model UpdateSitePairNameRequest {
  primarySiteName?: string(name='PrimarySiteName'),
  secondarySiteName?: string(name='SecondarySiteName'),
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model UpdateSitePairNameResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSitePairNameResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateSitePairNameResponseBody(name='body'),
}

async function updateSitePairNameWithOptions(request: UpdateSitePairNameRequest, runtime: Util.RuntimeOptions): UpdateSitePairNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.primarySiteName)) {
    query['PrimarySiteName'] = request.primarySiteName;
  }
  if (!Util.isUnset(request.secondarySiteName)) {
    query['SecondarySiteName'] = request.secondarySiteName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSitePairName',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateSitePairName(request: UpdateSitePairNameRequest): UpdateSitePairNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSitePairNameWithOptions(request, runtime);
}

model UpgradeServerRequest {
  securityToken?: string(name='SecurityToken'),
  serverId?: string(name='ServerId'),
}

model UpgradeServerResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: string(name='TaskId'),
}

model UpgradeServerResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeServerResponseBody(name='body'),
}

async function upgradeServerWithOptions(request: UpgradeServerRequest, runtime: Util.RuntimeOptions): UpgradeServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.serverId)) {
    query['ServerId'] = request.serverId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeServer',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeServer(request: UpgradeServerRequest): UpgradeServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeServerWithOptions(request, runtime);
}

model UpgradeSitePairRequest {
  securityToken?: string(name='SecurityToken'),
  sitePairId?: string(name='SitePairId'),
}

model UpgradeSitePairResponseBody = {
  code?: string(name='Code'),
  gateways?: {
    gateway?: [ 
    {
      errno?: string(name='Errno'),
      gatewayId?: string(name='GatewayId'),
    }
  ](name='gateway')
  }(name='Gateways'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  servers?: {
    server?: [ 
    {
      errno?: string(name='Errno'),
      serverId?: string(name='ServerId'),
    }
  ](name='server')
  }(name='Servers'),
  success?: boolean(name='Success'),
}

model UpgradeSitePairResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeSitePairResponseBody(name='body'),
}

async function upgradeSitePairWithOptions(request: UpgradeSitePairRequest, runtime: Util.RuntimeOptions): UpgradeSitePairResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.sitePairId)) {
    query['SitePairId'] = request.sitePairId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeSitePair',
    version = '2017-09-25',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeSitePair(request: UpgradeSitePairRequest): UpgradeSitePairResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeSitePairWithOptions(request, runtime);
}

