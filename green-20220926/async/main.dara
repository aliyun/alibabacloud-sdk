/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Green';
  @version = '2022-09-26';
  @endpointRule = 'regional';
  @endpointMap = {
    'ap-northeast-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-south-1' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-3' = 'green.ap-southeast-1.aliyuncs.com',
    'ap-southeast-5' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-chengdu' = 'green.aliyuncs.com',
    'cn-hongkong' = 'green.aliyuncs.com',
    'cn-huhehaote' = 'green.aliyuncs.com',
    'cn-qingdao' = 'green.aliyuncs.com',
    'cn-zhangjiakou' = 'green.aliyuncs.com',
    'eu-central-1' = 'green.ap-southeast-1.aliyuncs.com',
    'eu-west-1' = 'green.ap-southeast-1.aliyuncs.com',
    'me-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'us-east-1' = 'green.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'green.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'green.aliyuncs.com',
    'cn-shanghai-finance-1' = 'green.aliyuncs.com',
    'cn-north-2-gov-1' = 'green.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddAnswerSampleRequest {
  libId?: string(name='LibId', example='alxxxx', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sampleObject?: string(name='SampleObject', example='data/xxx.xlsx', position='Query'),
  samples?: string(name='Samples', position='Query'),
}

model AddAnswerSampleResponseBody = {
  libId?: string(name='LibId', example='alxxxx'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  result?: {
    i18nKey?: string(name='I18nKey', example='xxx'),
    illegalLengthSamples?: [ string ](name='IllegalLengthSamples'),
    invalidCount?: int32(name='InvalidCount', example='118'),
    libId?: string(name='LibId', example='alxxxx'),
    progress?: int32(name='Progress', example='100'),
    repeatCount?: int32(name='RepeatCount', example='98'),
    repeatSamples?: [ string ](name='RepeatSamples'),
    successCount?: int32(name='SuccessCount', example='318'),
    taskId?: string(name='TaskId', example='alAxbbxxxx-xxx'),
    totalCount?: int32(name='TotalCount', example='534'),
  }(name='Result'),
  taskId?: string(name='TaskId', example='alAxbbxxxx-xxx'),
}

model AddAnswerSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAnswerSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddAnswerSample  AddAnswerSampleRequest
  * @return AddAnswerSampleResponse
 */
async function addAnswerSample(request: AddAnswerSampleRequest): AddAnswerSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAnswerSample', 'POST', '/', 'json', false, 'json', request);
}

model AddImageLibRequest {
  comment?: string(name='Comment', position='Body'),
  libName?: string(name='LibName', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model AddImageLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model AddImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImageLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImageLib  AddImageLibRequest
  * @return AddImageLibResponse
 */
async function addImageLib(request: AddImageLibRequest): AddImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImageLib', 'POST', '/', 'json', true, 'form', request);
}

model AddImages2LibRequest {
  imgUrl?: string(name='ImgUrl', example='upload/ea7a98f9-f8bd-4905-a79b-963c9da419c5.jpg', position='Body'),
  libId?: string(name='LibId', example='xxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model AddImages2LibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    imgId?: string(name='ImgId', example='100001'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model AddImages2LibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddImages2LibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddImages2Lib  AddImages2LibRequest
  * @return AddImages2LibResponse
 */
async function addImages2Lib(request: AddImages2LibRequest): AddImages2LibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddImages2Lib', 'POST', '/', 'json', true, 'form', request);
}

model AddKeywordLibRequest {
  keywords?: string(name='Keywords', position='Body'),
  keywordsObject?: string(name='KeywordsObject', example='upload/1e5353c0-0d91-40ba-9d41-ae7abd3fe561.txt', position='Body'),
  libName?: string(name='LibName', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model AddKeywordLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    keywordsResult?: {
      i18nKey?: string(name='I18nKey', example='xxx'),
      illegalLengthKeywords?: [ string ](name='IllegalLengthKeywords'),
      invalidCount?: int32(name='InvalidCount', example='133'),
      invalidKeywords?: [ string ](name='InvalidKeywords'),
      libId?: string(name='LibId', example='customxx_xxxx'),
      repeatCount?: int32(name='RepeatCount', example='118'),
      repeatKeywords?: [ string ](name='RepeatKeywords'),
      successCount?: int32(name='SuccessCount', example='278'),
      tips?: string(name='Tips', example='xxx'),
      totalCount?: int32(name='TotalCount', example='529'),
    }(name='KeywordsResult'),
    libId?: string(name='LibId', example='customxx_xxxx'),
    taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model AddKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddKeywordLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddKeywordLib  AddKeywordLibRequest
  * @return AddKeywordLibResponse
 */
async function addKeywordLib(request: AddKeywordLibRequest): AddKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddKeywordLib', 'POST', '/', 'json', true, 'form', request);
}

model AddKeywordsRequest {
  keywords?: string(name='Keywords', position='Body'),
  keywordsObject?: string(name='KeywordsObject', example='upload/1e5353c0-0d91-40ba-9d41-ae7abd3fe561.txt', position='Body'),
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model AddKeywordsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    keywordsResult?: {
      i18nKey?: string(name='I18nKey', example='xxx'),
      illegalLengthKeywords?: [ string ](name='IllegalLengthKeywords'),
      invalidCount?: int32(name='InvalidCount', example='1'),
      invalidKeywords?: [ string ](name='InvalidKeywords'),
      libId?: string(name='LibId', example='customxx_xxxx'),
      progress?: int32(name='Progress', example='100'),
      repeatCount?: int32(name='RepeatCount', example='1'),
      repeatKeywords?: [ string ](name='RepeatKeywords'),
      successCount?: int32(name='SuccessCount', example='6'),
      tips?: string(name='Tips', example='xxxxx'),
      totalCount?: int32(name='TotalCount', example='8'),
    }(name='KeywordsResult'),
    libId?: string(name='LibId', example='customxx_xxxx'),
    taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model AddKeywordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddKeywordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddKeywords  AddKeywordsRequest
  * @return AddKeywordsResponse
 */
async function addKeywords(request: AddKeywordsRequest): AddKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddKeywords', 'POST', '/', 'json', true, 'form', request);
}

model AddKeywordsToLibRequest {
  keywords?: string(name='Keywords', position='Body'),
  keywordsObject?: string(name='KeywordsObject', example='upload/1e5353c0-0d91-40ba-9d41-ae7abd3fe561.txt', position='Body'),
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model AddKeywordsToLibResponseBody = {
  data?: {
    keywordsResult?: {
      i18nKey?: string(name='I18nKey', example='xxx'),
      illegalLengthKeywords?: [ string ](name='IllegalLengthKeywords'),
      invalidCount?: int32(name='InvalidCount', example='1'),
      invalidKeywords?: [ string ](name='InvalidKeywords'),
      libId?: string(name='LibId', example='customxx_xxxx'),
      progress?: int32(name='Progress', example='100'),
      repeatCount?: int32(name='RepeatCount', example='1'),
      repeatKeywords?: [ string ](name='RepeatKeywords'),
      successCount?: int32(name='SuccessCount', example='8'),
      totalCount?: int32(name='TotalCount', example='10'),
    }(name='KeywordsResult'),
    libId?: string(name='LibId', example='customxx_xxxx'),
    taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model AddKeywordsToLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddKeywordsToLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddKeywordsToLib  AddKeywordsToLibRequest
  * @return AddKeywordsToLibResponse
 */
async function addKeywordsToLib(request: AddKeywordsToLibRequest): AddKeywordsToLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddKeywordsToLib', 'POST', '/', 'json', true, 'form', request);
}

model CancelStockOssCheckTaskRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', example='P_UNYVB', position='Query'),
}

model CancelStockOssCheckTaskResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model CancelStockOssCheckTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelStockOssCheckTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelStockOssCheckTask  CancelStockOssCheckTaskRequest
  * @return CancelStockOssCheckTaskResponse
 */
async function cancelStockOssCheckTask(request: CancelStockOssCheckTaskRequest): CancelStockOssCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelStockOssCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model CopyServiceConfigRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', example='nickname_detection', position='Body'),
  serviceDesc?: string(name='ServiceDesc', position='Body'),
  serviceName?: string(name='ServiceName', position='Body'),
}

model CopyServiceConfigResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model CopyServiceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyServiceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CopyServiceConfig  CopyServiceConfigRequest
  * @return CopyServiceConfigResponse
 */
async function copyServiceConfig(request: CopyServiceConfigRequest): CopyServiceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyServiceConfig', 'POST', '/', 'json', true, 'form', request);
}

model CreatStockOssCheckTaskRequest {
  buckets?: string(name='Buckets', example='[{\\"Bucket\\":\\"bucket01-test\\",\\"Region\\":\\"cn-beijing\\"}]', position='Query'),
  callbackId?: string(name='CallbackId', example='1751', position='Query'),
  distinctHistoryTasks?: boolean(name='DistinctHistoryTasks', example='true', position='Query'),
  endTime?: string(name='EndTime', example='2023-12-18 10:08:00', position='Query'),
  executeDate?: int32(name='ExecuteDate', example='1', position='Query'),
  executeTime?: string(name='ExecuteTime', example='01:09:30-01:19:30', position='Query'),
  freeze?: boolean(name='Freeze', position='Query'),
  freezeHighRisk1?: boolean(name='FreezeHighRisk1', position='Query'),
  freezeHighRisk2?: boolean(name='FreezeHighRisk2', position='Query'),
  freezeMediumRisk1?: boolean(name='FreezeMediumRisk1', position='Query'),
  freezeMediumRisk2?: boolean(name='FreezeMediumRisk2', position='Query'),
  freezeRestorePath?: string(name='FreezeRestorePath', position='Query'),
  freezeType?: string(name='FreezeType', position='Query'),
  isInc?: boolean(name='IsInc', example='false', position='Query'),
  mediaType?: int32(name='MediaType', example='1', position='Query'),
  prefixFilterType?: string(name='PrefixFilterType', example='all', position='Query'),
  prefixFilters?: string(name='PrefixFilters', example='dir1,dir2', position='Query'),
  priority?: int32(name='Priority', example='0', position='Query'),
  referer?: string(name='Referer', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  scanLimit?: long(name='ScanLimit', example='10', position='Query'),
  scanNoFileType?: boolean(name='ScanNoFileType', example='true', position='Query'),
  scanResourceType?: string(name='ScanResourceType', example='0', position='Query'),
  scanService?: string(name='ScanService', example='baselineCheck', position='Query'),
  startTime?: string(name='StartTime', example='2023-12-17 10:08:00', position='Query'),
  taskCycle?: int32(name='TaskCycle', example='0', position='Query'),
  taskName?: string(name='TaskName', position='Query'),
  taskType?: string(name='TaskType', example='batch', position='Query'),
}

model CreatStockOssCheckTaskResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model CreatStockOssCheckTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatStockOssCheckTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatStockOssCheckTask  CreatStockOssCheckTaskRequest
  * @return CreatStockOssCheckTaskResponse
 */
async function creatStockOssCheckTask(request: CreatStockOssCheckTaskRequest): CreatStockOssCheckTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatStockOssCheckTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateAnswerLibRequest {
  libName?: string(name='LibName', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sampleBucket?: string(name='SampleBucket', example='oss-cip-shanghai', position='Body'),
  sampleObject?: string(name='SampleObject', example='data/xxx.xlsx', position='Body'),
  samples?: string(name='Samples', position='Body'),
}

model CreateAnswerLibResponseBody = {
  libId?: string(name='LibId', example='alxxxx'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  result?: {
    i18nKey?: string(name='I18nKey', example='xxx'),
    illegalLengthSamples?: [ string ](name='IllegalLengthSamples'),
    invalidCount?: int32(name='InvalidCount', example='1'),
    libId?: string(name='LibId', example='alxxxx'),
    progress?: int32(name='Progress', example='100'),
    repeatCount?: int32(name='RepeatCount', example='1'),
    repeatSamples?: [ string ](name='RepeatSamples'),
    successCount?: int32(name='SuccessCount', example='8'),
    taskId?: string(name='TaskId', example='alAaaaxxx-xxx'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Result'),
  taskId?: string(name='TaskId', example='alAxbbxxxx-xxx'),
}

model CreateAnswerLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAnswerLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateAnswerLib  CreateAnswerLibRequest
  * @return CreateAnswerLibResponse
 */
async function createAnswerLib(request: CreateAnswerLibRequest): CreateAnswerLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAnswerLib', 'POST', '/', 'json', true, 'form', request);
}

model CreateCallbackRequest {
  cryptType?: string(name='CryptType', example='SHA256', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  scope?: string(name='Scope', example='all', position='Body'),
  url?: string(name='Url', example='https://console.aliyun.com', position='Body'),
}

model CreateCallbackResponseBody = {
  data?: long(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model CreateCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateCallback  CreateCallbackRequest
  * @return CreateCallbackResponse
 */
async function createCallback(request: CreateCallbackRequest): CreateCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCallback', 'POST', '/', 'json', true, 'form', request);
}

model CreateOnlineTestRequest {
  dataId?: string(name='DataId', example='xxxxxxx', position='Query'),
  resourceType?: string(name='ResourceType', example='video', position='Query'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration', position='Query'),
  url?: string(name='Url', example='https://xxxxxxxxxx.com/data/data.png', position='Query'),
}

model CreateOnlineTestResponseBody = {
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration'),
  taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  taskStatus?: string(name='TaskStatus', example='SUCCESS'),
  url?: string(name='Url', example='https://xxxxxxxxxx.com/data/data.png'),
}

model CreateOnlineTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOnlineTestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOnlineTest  CreateOnlineTestRequest
  * @return CreateOnlineTestResponse
 */
async function createOnlineTest(request: CreateOnlineTestRequest): CreateOnlineTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOnlineTest', 'POST', '/', 'json', false, 'json', request);
}

model CreatePreCheckRequest {
  buckets?: string(name='Buckets', example='[{\\"Bucket\\":\\"bucket01-test\\",\\"Region\\":\\"cn-beijing\\"}]', position='Body'),
  distinctHistoryTasks?: boolean(name='DistinctHistoryTasks', example='true', position='Body'),
  endTime?: string(name='EndTime', example='2023-12-18 10:08:00', position='Body'),
  isInc?: boolean(name='IsInc', example='false', position='Body'),
  mediaType?: int32(name='MediaType', example='1', position='Body'),
  prefixFilterType?: string(name='PrefixFilterType', example='all', position='Body'),
  prefixFilters?: string(name='PrefixFilters', example='dir1,dir2', position='Body'),
  priority?: int32(name='Priority', example='0', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  scanLimit?: long(name='ScanLimit', example='10', position='Body'),
  scanNoFileType?: boolean(name='ScanNoFileType', example='true', position='Body'),
  scanService?: string(name='ScanService', example='baselineCheck', position='Body'),
  startTime?: string(name='StartTime', example='2023-12-17 10:08:00', position='Body'),
  taskName?: string(name='TaskName', position='Body'),
}

model CreatePreCheckResponseBody = {
  data?: map[string]boolean(name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model CreatePreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePreCheck  CreatePreCheckRequest
  * @return CreatePreCheckResponse
 */
async function createPreCheck(request: CreatePreCheckRequest): CreatePreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePreCheck', 'POST', '/', 'json', true, 'form', request);
}

model DeleteAnswerLibRequest {
  libId?: string(name='LibId', example='alxxx', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteAnswerLibResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model DeleteAnswerLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAnswerLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAnswerLib  DeleteAnswerLibRequest
  * @return DeleteAnswerLibResponse
 */
async function deleteAnswerLib(request: DeleteAnswerLibRequest): DeleteAnswerLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAnswerLib', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAnswerSampleRequest {
  ids?: string(name='Ids', example='[15463605]', position='Body'),
  libId?: string(name='LibId', example='alxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteAnswerSampleResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model DeleteAnswerSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAnswerSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteAnswerSample  DeleteAnswerSampleRequest
  * @return DeleteAnswerSampleResponse
 */
async function deleteAnswerSample(request: DeleteAnswerSampleRequest): DeleteAnswerSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAnswerSample', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCallbackRequest {
  id: long(name='Id', description='This parameter is required.', example='1480', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteCallbackResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model DeleteCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCallback  DeleteCallbackRequest
  * @return DeleteCallbackResponse
 */
async function deleteCallback(request: DeleteCallbackRequest): DeleteCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCallback', 'POST', '/', 'json', true, 'form', request);
}

model DeleteFeatureConfigRequest {
  field?: string(name='Field', description='Label value, customer-defined', example='__config__', position='Body'),
  regionId?: string(name='RegionId', description='Region', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', description='Resource type.', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', description='Service code.', example='llm_query_moderation', position='Body'),
  type?: string(name='Type', description='Type', example='custom_llm_template', position='Body'),
}

model DeleteFeatureConfigResponseBody = {
  code?: int32(name='Code', description='Status code.', example='200'),
  data?: boolean(name='Data', description='Return result.', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  msg?: string(name='Msg', description='Response message of this request.', example='success'),
  requestId?: string(name='RequestId', description='ID assigned by the backend, used to uniquely identify a request. Can be used for troubleshooting.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Success indicator.', example='True'),
}

model DeleteFeatureConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFeatureConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFeatureConfig  DeleteFeatureConfigRequest
  * @return DeleteFeatureConfigResponse
 */
async function deleteFeatureConfig(request: DeleteFeatureConfigRequest): DeleteFeatureConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFeatureConfig', 'POST', '/', 'json', true, 'form', request);
}

model DeleteImagesFromLibRequest {
  imageIds?: string(name='ImageIds', example='[158794]', position='Body'),
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteImagesFromLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteImagesFromLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteImagesFromLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteImagesFromLib  DeleteImagesFromLibRequest
  * @return DeleteImagesFromLibResponse
 */
async function deleteImagesFromLib(request: DeleteImagesFromLibRequest): DeleteImagesFromLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImagesFromLib', 'POST', '/', 'json', true, 'form', request);
}

model DeleteKeywordRequest {
  keywordIdList?: string(name='KeywordIdList', position='Body'),
  keywordIds?: string(name='KeywordIds', example='[16754493]', position='Body'),
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteKeywordResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeywordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteKeyword  DeleteKeywordRequest
  * @return DeleteKeywordResponse
 */
async function deleteKeyword(request: DeleteKeywordRequest): DeleteKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeyword', 'POST', '/', 'json', true, 'form', request);
}

model DeleteKeywordLibRequest {
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model DeleteKeywordLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model DeleteKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteKeywordLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteKeywordLib  DeleteKeywordLibRequest
  * @return DeleteKeywordLibResponse
 */
async function deleteKeywordLib(request: DeleteKeywordLibRequest): DeleteKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKeywordLib', 'POST', '/', 'json', true, 'form', request);
}

model DeleteOnlineTestRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Query'),
}

model DeleteOnlineTestResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model DeleteOnlineTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOnlineTestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOnlineTest  DeleteOnlineTestRequest
  * @return DeleteOnlineTestResponse
 */
async function deleteOnlineTest(request: DeleteOnlineTestRequest): DeleteOnlineTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOnlineTest', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOnlineTestResultRequest {
  resourceType?: string(name='ResourceType', example='image', position='Query'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration', position='Query'),
  taskId?: string(name='TaskId', example='xxxxx-xxxxx', position='Query'),
}

model DescribeOnlineTestResultResponseBody = {
  audioData?: {
    timeStamp?: string(name='TimeStamp', example='1724378510396'),
  }(name='AudioData'),
  frameData?: {
    timeStamp?: string(name='TimeStamp', example='1725761005419'),
    url?: string(name='Url', example='https://xxxxxxxxx.com/data/data.mp4'),
  }(name='FrameData'),
  moderationTime?: string(name='ModerationTime', example='1725761005419'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  riskLevel?: string(name='RiskLevel', example='high'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration'),
  summaryList?: [ 
    {
      resourceType?: string(name='ResourceType', example='video'),
      riskLevel?: string(name='RiskLevel', example='high'),
      riskLevelSummary?: map[string]long(name='RiskLevelSummary'),
      sliceCount?: int32(name='SliceCount', example='10'),
    }
  ](name='SummaryList'),
  taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  taskStatus?: string(name='TaskStatus', example='SUCCESS'),
  url?: string(name='Url', example='https://xxxxxxxxx.com/data/data.png'),
}

model DescribeOnlineTestResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOnlineTestResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeOnlineTestResult  DescribeOnlineTestResultRequest
  * @return DescribeOnlineTestResultResponse
 */
async function describeOnlineTestResult(request: DescribeOnlineTestResultRequest): DescribeOnlineTestResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOnlineTestResult', 'POST', '/', 'json', false, 'json', request);
}

model ExportAnswerSampleRequest {
  libId?: string(name='LibId', example='alxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ExportAnswerSampleResponseBody = {
  data?: string(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ExportAnswerSampleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportAnswerSampleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportAnswerSample  ExportAnswerSampleRequest
  * @return ExportAnswerSampleResponse
 */
async function exportAnswerSample(request: ExportAnswerSampleRequest): ExportAnswerSampleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportAnswerSample', 'POST', '/', 'json', true, 'form', request);
}

model ExportCipStatsRequest {
  byMonth?: boolean(name='ByMonth', example='true', position='Body'),
  endDate?: string(name='EndDate', example='2024-04-16 09:00:00', position='Body'),
  exportType?: string(name='ExportType', position='Body'),
  label?: string(name='Label', example='xx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', position='Body'),
  startDate?: string(name='StartDate', example='2024-04-15 09:00:00', position='Body'),
  subUid?: string(name='SubUid', example='268220485413130979', position='Body'),
  type?: string(name='Type', position='Body'),
}

model ExportCipStatsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/portal_data/production/cipStat/text/statistics1720597246783.xlsx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ExportCipStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportCipStatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportCipStats  ExportCipStatsRequest
  * @return ExportCipStatsResponse
 */
async function exportCipStats(request: ExportCipStatsRequest): ExportCipStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportCipStats', 'POST', '/', 'json', true, 'form', request);
}

model ExportKeywordRequest {
  libId?: string(name='LibId', example='customxx_xxxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ExportKeywordResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/console_data/export/production/keyword/export_keywordO4ee1Bok1R8IIDVpcT9viU-1xxWr'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ExportKeywordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportKeywordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportKeyword  ExportKeywordRequest
  * @return ExportKeywordResponse
 */
async function exportKeyword(request: ExportKeywordRequest): ExportKeywordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportKeyword', 'POST', '/', 'json', true, 'form', request);
}

model ExportOssCheckStatRequest {
  byMonth?: boolean(name='ByMonth', example='true', position='Body'),
  endDate?: string(name='EndDate', example='2024-03-11 10:00:00', position='Body'),
  parentTaskId?: string(name='ParentTaskId', example='P_UX0K5X', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startDate?: string(name='StartDate', example='2024-03-10 10:00:00', position='Body'),
}

model ExportOssCheckStatResponseBody = {
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/console_data/production/scanResult/osscheck/ossCheckStat_aliUf5B3lJfOkLpqozLIn94Uy-1XxKyX.xlsx'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ExportOssCheckStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportOssCheckStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportOssCheckStat  ExportOssCheckStatRequest
  * @return ExportOssCheckStatResponse
 */
async function exportOssCheckStat(request: ExportOssCheckStatRequest): ExportOssCheckStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportOssCheckStat', 'POST', '/', 'json', true, 'form', request);
}

model ExportResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  query?: string(name='Query', example='{"TaskId":"P_11TL5T"}', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  source?: string(name='Source', position='Body'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Body'),
}

model ExportResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/console_data/production/scanResult/osscheck/ossCheckResult_aliiGGXhSMvmIvsS7Lrl3LaUZ-1A9%24oZ.xlsx'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ExportResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportResult  ExportResultRequest
  * @return ExportResultResponse
 */
async function exportResult(request: ExportResultRequest): ExportResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportResult', 'POST', '/', 'json', true, 'form', request);
}

model ExportScanResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endDate?: string(name='EndDate', example='2024-03-11 10:00:00', position='Body'),
  pageSize?: int32(name='PageSize', example='20', position='Body'),
  query?: map[string]string(name='Query', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  startDate?: string(name='StartDate', example='2024-03-10 10:00:00', position='Body'),
}

model ExportScanResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/portal_data/production/scanResult/text/textScanResult_aliow2MAdWXCakCxlitVY8Lnn-1A9KEw.xlsx'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ExportScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportScanResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportScanResult  ExportScanResultRequest
  * @return ExportScanResultResponse
 */
async function exportScanResult(request: ExportScanResultRequest): ExportScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportScanResult', 'POST', '/', 'json', true, 'form', request);
}

model ExportTextScanResultRequest {
  endDate?: string(name='EndDate', example='2024-03-11 10:00:00', position='Body'),
  query?: map[string]string(name='Query', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startDate?: string(name='StartDate', example='2024-03-10 10:00:00', position='Body'),
}

model ExportTextScanResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: string(name='Data', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/portal_data/production/scanResult/text/textScanResult_aliow2MAdWXCakCxlitVY8Lnn-1A9KEw.xlsx'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ExportTextScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExportTextScanResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExportTextScanResult  ExportTextScanResultRequest
  * @return ExportTextScanResultResponse
 */
async function exportTextScanResult(request: ExportTextScanResultRequest): ExportTextScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExportTextScanResult', 'POST', '/', 'json', true, 'form', request);
}

model GetAnswerImportProgressRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', example='alAxbbxxxx-xxx', position='Query'),
}

model GetAnswerImportProgressResponseBody = {
  i18nKey?: string(name='I18nKey', example='xxx'),
  illegalLengthSamples?: [ string ](name='IllegalLengthSamples'),
  invalidCount?: int32(name='InvalidCount', example='1'),
  libId?: string(name='LibId', example='alxxxx'),
  progress?: int32(name='Progress', example='100'),
  repeatCount?: int32(name='RepeatCount', example='1'),
  repeatSamples?: [ string ](name='RepeatSamples'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  successCount?: int32(name='SuccessCount', example='8'),
  taskId?: string(name='TaskId', example='alAxbbxxxx-xxx'),
  tips?: string(name='Tips', example='xxxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model GetAnswerImportProgressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAnswerImportProgressResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAnswerImportProgress  GetAnswerImportProgressRequest
  * @return GetAnswerImportProgressResponse
 */
async function getAnswerImportProgress(request: GetAnswerImportProgressRequest): GetAnswerImportProgressResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAnswerImportProgress', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupBucketsListRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetBackupBucketsListResponseBody = {
  data?: [ 
    {
      bucket?: string(name='Bucket', example='gj-bucket1'),
      region?: string(name='Region', example='cn-shanghai'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetBackupBucketsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupBucketsListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBackupBucketsList  GetBackupBucketsListRequest
  * @return GetBackupBucketsListResponse
 */
async function getBackupBucketsList(request: GetBackupBucketsListRequest): GetBackupBucketsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackupBucketsList', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupConfigRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Query'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck', position='Query'),
}

model GetBackupConfigResponseBody = {
  backupMode?: int32(name='BackupMode', example='0'),
  bucket?: string(name='Bucket', example='buckect_test'),
  enable?: boolean(name='Enable', example='true'),
  enableBackup?: boolean(name='EnableBackup'),
  enableBackupVoice?: boolean(name='EnableBackupVoice'),
  expireSeconds?: int32(name='ExpireSeconds', example='300'),
  gmtModified?: string(name='GmtModified', example='2023-01-17 12:29:56'),
  path?: string(name='Path', example='aliyun/template/'),
  pathVoice?: string(name='PathVoice'),
  region?: string(name='Region', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  resourceType?: string(name='ResourceType', example='image'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck'),
  uid?: string(name='Uid', description='UID。', example='1772612608370735'),
}

model GetBackupConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBackupConfig  GetBackupConfigRequest
  * @return GetBackupConfigResponse
 */
async function getBackupConfig(request: GetBackupConfigRequest): GetBackupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackupConfig', 'POST', '/', 'json', false, 'json', request);
}

model GetBackupStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetBackupStatusResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetBackupStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBackupStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBackupStatus  GetBackupStatusRequest
  * @return GetBackupStatusResponse
 */
async function getBackupStatus(request: GetBackupStatusRequest): GetBackupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBackupStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetBucketsListRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetBucketsListResponseBody = {
  data?: [ 
    {
      bucket?: string(name='Bucket', example='bucket_test'),
      region?: string(name='Region', example='cn-hangzhou'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetBucketsListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBucketsListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBucketsList  GetBucketsListRequest
  * @return GetBucketsListResponse
 */
async function getBucketsList(request: GetBucketsListRequest): GetBucketsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBucketsList', 'POST', '/', 'json', false, 'json', request);
}

model GetCipStatsRequest {
  byMonth?: boolean(name='ByMonth', example='true', position='Body'),
  endDate?: string(name='EndDate', example='2024-03-11 10:00:00', position='Body'),
  label?: string(name='Label', example='xx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', position='Query'),
  startDate?: string(name='StartDate', example='2024-03-10 10:00:00', position='Body'),
  subUid?: string(name='SubUid', example='253552244990701265', position='Body'),
  type?: string(name='Type', position='Query'),
}

model GetCipStatsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    labelStatChart?: [ 
      {
        imageTreeChar?: [ 
          {
            description?: string(name='Description'),
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='ImageTreeChar'),
        serviceCode?: string(name='ServiceCode', example='nickNameDetection'),
        textTreeChart?: [ 
          {
            description?: string(name='Description'),
            name?: string(name='Name'),
            value?: string(name='Value'),
          }
        ](name='TextTreeChart'),
        totalCount?: long(name='TotalCount', example='117'),
        treeChart?: [ 
          {
            description?: string(name='Description'),
            name?: string(name='Name', example='nickNameDetection'),
            value?: string(name='Value', example='99.91'),
          }
        ](name='TreeChart'),
        voiceTreeChart?: [ 
          {
            description?: string(name='Description'),
            name?: string(name='Name', example='nickNameDetection'),
            value?: string(name='Value', example='99.91'),
          }
        ](name='VoiceTreeChart'),
        x?: [ string ](name='X'),
        y?: [ 
          {
            data?: [ long ](name='Data'),
            name?: string(name='Name', example='nickNameDetection'),
          }
        ](name='Y'),
      }
    ](name='LabelStatChart'),
    totalStat?: map[string]map[string]any(name='TotalStat'),
    uids?: [ string ](name='Uids'),
    x?: [ string ](name='X'),
    y?: [ 
      {
        data?: [ long ](name='Data'),
        name?: string(name='Name', example='nickNameDetection'),
      }
    ](name='Y'),
    z?: [ 
      {
        data?: [ long ](name='Data'),
        name?: string(name='Name', example='nickNameDetection'),
      }
    ](name='Z'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetCipStatsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCipStatsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCipStats  GetCipStatsRequest
  * @return GetCipStatsResponse
 */
async function getCipStats(request: GetCipStatsRequest): GetCipStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCipStats', 'POST', '/', 'json', true, 'form', request);
}

model GetExecuteTimeRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetExecuteTimeResponseBody = {
  data?: string(name='Data', example='02:24:30'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetExecuteTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExecuteTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExecuteTime  GetExecuteTimeRequest
  * @return GetExecuteTimeResponse
 */
async function getExecuteTime(request: GetExecuteTimeRequest): GetExecuteTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecuteTime', 'POST', '/', 'json', false, 'json', request);
}

model GetFeatureConfigRequest {
  query?: string(name='Query', position='Body'),
  regionId?: string(name='RegionId', description='Region ID', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', description='Resource type.', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', description='Service code.', example='llm_query_moderation', position='Body'),
  type?: string(name='Type', description='Type', example='custom_llm_template', position='Body'),
}

model GetFeatureConfigResponseBody = {
  code?: int32(name='Code', description='Status code', example='200'),
  data?: {
    featureConf?: [  map[string]any ](name='FeatureConf', description='List of feature configurations'),
    resourceType?: string(name='ResourceType', description='Resource type.', example='text'),
    serviceCode?: string(name='ServiceCode', description='Service code.', example='llm_query_moderation'),
    type?: string(name='Type', description='Type', example='custom_llm_template'),
    uid?: string(name='Uid', description='UID.', example='1643953****74290'),
  }(name='Data', description='Returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  msg?: string(name='Msg', description='Response message for this request.', example='success'),
  requestId?: string(name='RequestId', description='ID assigned by the backend, used to uniquely identify a request. Can be used for troubleshooting.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Success indicator', example='true'),
}

model GetFeatureConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFeatureConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFeatureConfig  GetFeatureConfigRequest
  * @return GetFeatureConfigResponse
 */
async function getFeatureConfig(request: GetFeatureConfigRequest): GetFeatureConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFeatureConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetImageSceneLabelConfRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetImageSceneLabelConfResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [  map[string]any ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetImageSceneLabelConfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageSceneLabelConfResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImageSceneLabelConf  GetImageSceneLabelConfRequest
  * @return GetImageSceneLabelConfResponse
 */
async function getImageSceneLabelConf(request: GetImageSceneLabelConfRequest): GetImageSceneLabelConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageSceneLabelConf', 'POST', '/', 'json', false, 'json', request);
}

model GetImageSceneLabelListConfRequest {
  imageServiceCode?: string(name='ImageServiceCode', example='baselineCheck', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetImageSceneLabelListConfResponseBody = {
  data?: [ any ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetImageSceneLabelListConfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetImageSceneLabelListConfResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetImageSceneLabelListConf  GetImageSceneLabelListConfRequest
  * @return GetImageSceneLabelListConfResponse
 */
async function getImageSceneLabelListConf(request: GetImageSceneLabelListConfRequest): GetImageSceneLabelListConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetImageSceneLabelListConf', 'POST', '/', 'json', false, 'json', request);
}

model GetJobNameListRequest {
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Query'),
  query?: string(name='Query', example='{"TaskId":"P_11TL5T"}', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Query'),
}

model GetJobNameListResponseBody = {
  data?: [ string ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetJobNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobNameListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJobNameList  GetJobNameListRequest
  * @return GetJobNameListResponse
 */
async function getJobNameList(request: GetJobNameListRequest): GetJobNameListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobNameList', 'POST', '/', 'json', false, 'json', request);
}

model GetKeywordImportResultRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  taskId?: string(name='TaskId', example='xxx-xxx', position='Body'),
}

model GetKeywordImportResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    i18nKey?: string(name='I18nKey', example='xxx'),
    illegalLengthKeywords?: [ string ](name='IllegalLengthKeywords'),
    invalidCount?: int32(name='InvalidCount', example='1'),
    invalidKeywords?: [ string ](name='InvalidKeywords'),
    libId?: string(name='LibId', example='customxx_xxx'),
    progress?: int32(name='Progress', example='100'),
    repeatCount?: int32(name='RepeatCount', example='1'),
    repeatKeywords?: [ string ](name='RepeatKeywords'),
    successCount?: int32(name='SuccessCount', example='8'),
    tips?: string(name='Tips', example='xxx'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetKeywordImportResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKeywordImportResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKeywordImportResult  GetKeywordImportResultRequest
  * @return GetKeywordImportResultResponse
 */
async function getKeywordImportResult(request: GetKeywordImportResultRequest): GetKeywordImportResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKeywordImportResult', 'POST', '/', 'json', true, 'form', request);
}

model GetKeywordLibRequest {
  libId?: string(name='LibId', example='customxx_xxx', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetKeywordLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    gmtModified?: string(name='GmtModified', example='2024-01-29 10:26:00'),
    keywordCount?: string(name='KeywordCount', example='100'),
    libId?: string(name='LibId', example='customxx_xxx'),
    libName?: string(name='LibName'),
    uid?: string(name='Uid', example='1825457112123838'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetKeywordLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetKeywordLib  GetKeywordLibRequest
  * @return GetKeywordLibResponse
 */
async function getKeywordLib(request: GetKeywordLibRequest): GetKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetKeywordLib', 'POST', '/', 'json', true, 'form', request);
}

model GetOssCheckFreezeResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endDate?: string(name='EndDate', example='2025-05-19 10:05:11', position='Query'),
  finishNum?: long(name='FinishNum', example='0', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  query?: string(name='Query', example='{\\"TaskId\\":\\"P_O3SI0I\\"}', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Query'),
  startDate?: string(name='StartDate', example='2025-01-09 10:28:54', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
}

model GetOssCheckFreezeResultResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      bucket?: string(name='Bucket', example='tmp'),
      code?: string(name='Code', example='200'),
      contentType?: string(name='ContentType', example='audio'),
      copyFrom?: string(name='CopyFrom', example='audio_media_detection'),
      feedback?: string(name='Feedback'),
      freeze?: boolean(name='Freeze'),
      freezeStatus?: string(name='FreezeStatus', example='FREEZED'),
      freezeType?: string(name='FreezeType', example='ACL'),
      imageUrl?: string(name='ImageUrl', example='http://www.aliyuncs.com/test.jpg'),
      isCopy?: boolean(name='IsCopy', example='true'),
      jobName?: string(name='JobName', example='dhT20X2310'),
      labelDetails?: [ 
        {
          confidence?: float(name='Confidence'),
          description?: string(name='Description'),
          label?: string(name='Label'),
        }
      ](name='LabelDetails'),
      labels?: [ string ](name='Labels'),
      labels2?: [ string ](name='Labels2'),
      manualFreezeAction?: string(name='ManualFreezeAction'),
      manualOperateTime?: string(name='ManualOperateTime'),
      manualOperator?: string(name='ManualOperator'),
      md5?: string(name='Md5', example='54416c9b159df4a60ae03c04ccb94cb5'),
      msg?: string(name='Msg', example='success'),
      object?: string(name='Object', example='1713014531569_958.png.jpeg'),
      requestId?: string(name='RequestId', example='F0A594BB-FA7A-580F-AE9E-A4188E092823'),
      riskLevel?: string(name='RiskLevel', example='high'),
      riskLevel0?: string(name='RiskLevel0', example='low'),
      riskLevel2?: string(name='RiskLevel2', example='none'),
      scanResult?: string(name='ScanResult', example='{}'),
      serviceCode?: string(name='ServiceCode', example='audio_media_detection_01'),
      serviceName?: string(name='ServiceName'),
      sysDisposalStatus?: string(name='SysDisposalStatus'),
      taskId?: string(name='TaskId', example='P_BT3FHS'),
      url?: string(name='Url', example='http://www.aliyuncs.com/test.mp3'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='F0A594BB-FA7A-580F-AE9E-A4188E092823'),
  totalCount?: long(name='TotalCount', example='29'),
}

model GetOssCheckFreezeResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssCheckFreezeResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssCheckFreezeResult  GetOssCheckFreezeResultRequest
  * @return GetOssCheckFreezeResultResponse
 */
async function getOssCheckFreezeResult(request: GetOssCheckFreezeResultRequest): GetOssCheckFreezeResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssCheckFreezeResult', 'POST', '/', 'json', false, 'json', request);
}

model GetOssCheckResultDetailRequest {
  bucket?: string(name='Bucket', example='oss-tmp', position='Query'),
  mediaType?: int32(name='MediaType', example='1', position='Query'),
  object?: string(name='Object', example='1748396909030.jpg', position='Query'),
  parentTaskId?: string(name='ParentTaskId', position='Query'),
  queryRequestId?: string(name='QueryRequestId', example='62E97001-1255-50A9-8E1E-4FD05473D952', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  serviceCode?: string(name='ServiceCode', example='audio_media_detection_01', position='Query'),
}

model GetOssCheckResultDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bucket?: string(name='Bucket', example='oss-tmp'),
    code?: string(name='Code', example='200'),
    contentType?: string(name='ContentType', example='audio'),
    copyFrom?: string(name='CopyFrom', example='audio_media_detection'),
    freezeStatus?: string(name='FreezeStatus', example='UNFREEZED'),
    freezeType?: string(name='FreezeType', example='COPY'),
    imageUrl?: string(name='ImageUrl', example='http://www.aliyuncs.com/test.jpg'),
    isCopy?: boolean(name='IsCopy', example='true'),
    jobName?: string(name='JobName', example='dhT20X2310'),
    labelDetails?: [ 
      {
        confidence?: float(name='Confidence'),
        description?: string(name='Description'),
        label?: string(name='Label'),
      }
    ](name='LabelDetails'),
    labelDetails2?: [ 
      {
        confidence?: float(name='Confidence'),
        description?: string(name='Description'),
        label?: string(name='Label'),
      }
    ](name='LabelDetails2'),
    labels?: [ string ](name='Labels'),
    labels2?: [ string ](name='Labels2'),
    manualFreezeAction?: string(name='ManualFreezeAction'),
    manualOperateTime?: string(name='ManualOperateTime'),
    manualOperator?: string(name='ManualOperator'),
    md5?: string(name='Md5', example='f6e2e1946f06310c8a0cc443a05819f3'),
    msg?: string(name='Msg', example='success'),
    object?: string(name='Object', example='1748396909030.jpg'),
    riskLevel?: string(name='RiskLevel', example='high'),
    riskLevel0?: string(name='RiskLevel0', example='low'),
    riskLevel2?: string(name='RiskLevel2', example='medium'),
    scanResult?: string(name='ScanResult', example='{}'),
    scanServiceInfos?: [ 
      {
        copyFrom?: string(name='CopyFrom', example='audio_media_detection'),
        isCopy?: boolean(name='IsCopy', example='true'),
        serviceCode?: string(name='ServiceCode', example='audio_media_detection_01'),
        serviceName?: string(name='ServiceName'),
      }
    ](name='ScanServiceInfos'),
    serviceCode?: string(name='ServiceCode', example='audio_media_detection_01'),
    serviceName?: string(name='ServiceName'),
    taskId?: string(name='TaskId', example='P_Z7OLMN'),
    url?: string(name='Url', example='http://www.aliyuncs.com/test.mp3'),
  }(name='Data'),
  msg?: string(name='Msg', example='success'),
  requestId?: string(name='RequestId', example='62E97001-1255-50A9-8E1E-4FD05473D952'),
  success?: boolean(name='Success', example='true'),
}

model GetOssCheckResultDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssCheckResultDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssCheckResultDetail  GetOssCheckResultDetailRequest
  * @return GetOssCheckResultDetailResponse
 */
async function getOssCheckResultDetail(request: GetOssCheckResultDetailRequest): GetOssCheckResultDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssCheckResultDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetOssCheckStatRequest {
  byMonth?: boolean(name='ByMonth', example='true', position='Body'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Body'),
  parentTaskId?: string(name='ParentTaskId', example='P_UNHBH', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Body'),
}

model GetOssCheckStatResponseBody = {
  barChart?: {
    x?: [ string ](name='X'),
    y?: [ 
      {
        data?: [ long ](name='Data'),
        name?: string(name='Name', example='document_detection'),
      }
    ](name='Y'),
  }(name='BarChart'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetOssCheckStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssCheckStatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssCheckStat  GetOssCheckStatRequest
  * @return GetOssCheckStatResponse
 */
async function getOssCheckStat(request: GetOssCheckStatRequest): GetOssCheckStatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssCheckStat', 'POST', '/', 'json', true, 'form', request);
}

model GetOssCheckStatusRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetOssCheckStatusResponseBody = {
  bid?: string(name='Bid', description='Bid。', example='26842'),
  buy?: boolean(name='Buy', example='True'),
  commodityCode?: string(name='CommodityCode', example='xxx'),
  indebt?: boolean(name='Indebt', example='False'),
  ramStatus?: string(name='RamStatus', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  slsStatus?: string(name='SlsStatus', example='True'),
}

model GetOssCheckStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssCheckStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssCheckStatus  GetOssCheckStatusRequest
  * @return GetOssCheckStatusResponse
 */
async function getOssCheckStatus(request: GetOssCheckStatusRequest): GetOssCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetOssCheckTaskInfoRequest {
  parentTaskId?: string(name='ParentTaskId', example='P_AAA**', position='Query'),
}

model GetOssCheckTaskInfoResponseBody = {
  buckets?: string(name='Buckets', example='[{\\"Bucket\\":\\"aileshijie\\",\\"Region\\":\\"cn-hangzhou\\"}]'),
  config?: {
    callbackId?: long(name='CallbackId', example='188'),
    distinctHistoryTasks?: boolean(name='DistinctHistoryTasks', example='true'),
    endTime?: string(name='EndTime', example='2025-07-09 10:30:00'),
    executeDate?: int32(name='ExecuteDate', example='1'),
    executeTime?: string(name='ExecuteTime', example='2025-07-09 10:30:00'),
    freeze?: boolean(name='Freeze', example='true'),
    freezeHighRisk1?: boolean(name='FreezeHighRisk1', example='true'),
    freezeHighRisk2?: boolean(name='FreezeHighRisk2', example='true'),
    freezeMediumRisk1?: boolean(name='FreezeMediumRisk1', example='true'),
    freezeMediumRisk2?: boolean(name='FreezeMediumRisk2', example='false'),
    freezeRestorePath?: string(name='FreezeRestorePath', example='test'),
    freezeType?: string(name='FreezeType', example='ACL'),
    prefixFilterType?: string(name='PrefixFilterType', example='all'),
    prefixFilters?: [ string ](name='PrefixFilters'),
    priority?: int32(name='Priority', example='1'),
    referer?: string(name='Referer', description='Referer。', example='https://www.aliyun.com/'),
    scanLimit?: long(name='ScanLimit', example='100'),
    scanNoFileType?: boolean(name='ScanNoFileType', example='true'),
    scanResourceType?: int32(name='ScanResourceType', example='0'),
    scanService?: [ string ](name='ScanService'),
    scanServiceInfos?: [ 
      {
        copyFrom?: string(name='CopyFrom', example='oss_baselineCheck'),
        isCopy?: boolean(name='IsCopy', example='false'),
        serviceCode?: string(name='ServiceCode', example='oss_baselineCheck'),
        serviceName?: string(name='ServiceName'),
      }
    ](name='ScanServiceInfos'),
    startTime?: string(name='StartTime', example='2023-08-21 16:08:38'),
    taskCycle?: int32(name='TaskCycle', example='1'),
    userFreezeConfig?: {
      freezeRestorePath?: string(name='FreezeRestorePath', example='test'),
      freezeType?: string(name='FreezeType', example='ACL'),
    }(name='UserFreezeConfig'),
  }(name='Config'),
  endTime?: string(name='EndTime', example='2025-07-09 10:30:00'),
  finishNum?: long(name='FinishNum', example='56'),
  isInc?: boolean(name='IsInc', example='false'),
  lastExecuteDate?: string(name='LastExecuteDate', example='2025-07-09 10:30:00'),
  mediaType?: int32(name='MediaType', example='1'),
  nextExecuteDate?: string(name='NextExecuteDate', example='2025-07-08 10:30:00'),
  objectNum?: long(name='ObjectNum', example='100'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  searchNum?: long(name='SearchNum', example='100'),
  startTime?: string(name='StartTime', example='2023-08-21 16:08:38'),
  status?: int32(name='Status', example='Success'),
  taskId?: string(name='TaskId', example='xxxx-xxx'),
  taskName?: string(name='TaskName'),
  taskType?: string(name='TaskType', example='increment'),
}

model GetOssCheckTaskInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOssCheckTaskInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOssCheckTaskInfo  GetOssCheckTaskInfoRequest
  * @return GetOssCheckTaskInfoResponse
 */
async function getOssCheckTaskInfo(request: GetOssCheckTaskInfoRequest): GetOssCheckTaskInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOssCheckTaskInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetScanNumRequest {
  buckets?: string(name='Buckets', example='tmpsample', position='Query'),
  mediaType?: int32(name='MediaType', example='image', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetScanNumResponseBody = {
  limitNumber?: long(name='LimitNumber', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  scanNumber?: long(name='ScanNumber', example='10'),
  sumNumber?: long(name='SumNumber', example='10'),
  tag?: boolean(name='Tag', example='True'),
}

model GetScanNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScanNumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScanNum  GetScanNumRequest
  * @return GetScanNumResponse
 */
async function getScanNum(request: GetScanNumRequest): GetScanNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScanNum', 'POST', '/', 'json', false, 'json', request);
}

model GetScanResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  query?: map[string]string(name='Query', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Body'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Body'),
}

model GetScanResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    items?: [ 
      {
        apiLabels?: string(name='ApiLabels'),
        apiRequestTime?: string(name='ApiRequestTime'),
        apiRiskLevel?: string(name='ApiRiskLevel'),
        apiService?: string(name='ApiService'),
        apiTaskId?: string(name='ApiTaskId'),
        attackLevel?: string(name='AttackLevel'),
        content?: string(name='Content', example='xxx'),
        dataId?: string(name='DataId', description='dataId', example='4f27b8cc7c4544cb90b41882a5b36326'),
        endTime?: string(name='EndTime', example='22'),
        extFeedback?: string(name='ExtFeedback', example='xxx'),
        extra?: map[string]any(name='Extra', example='{}'),
        frameCount?: long(name='FrameCount', example='20'),
        gmtCreate?: string(name='GmtCreate', example='2023-08-11 09:00:19'),
        guardFileUrls?: [ string ](name='GuardFileUrls'),
        guardImageUrls?: [ string ](name='GuardImageUrls'),
        imageLabels?: [  map[string]any ](name='ImageLabels'),
        imageService?: string(name='ImageService', example='baselineCheck'),
        imageUrl?: string(name='ImageUrl', description='url', example='https://www.aliyuncs.com/xxx.png'),
        labels?: string(name='Labels', example='nonLabel'),
        maliciousFileLevel?: string(name='MaliciousFileLevel'),
        maliciousUrlLevel?: string(name='MaliciousUrlLevel'),
        manualOnly?: boolean(name='ManualOnly'),
        noLabels?: [ string ](name='NoLabels'),
        offset?: long(name='Offset', example='1'),
        pageNum?: long(name='PageNum', example='1'),
        requestFrom?: string(name='RequestFrom'),
        requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
        requestTime?: string(name='RequestTime', example='2023-08-11 09:00:19'),
        resourceType?: string(name='ResourceType'),
        result?: [ 
          {
            confidence?: string(name='Confidence', example='50.0'),
            description?: string(name='Description'),
            label?: string(name='Label', example='politics'),
          }
        ](name='Result'),
        reviewLabels?: string(name='ReviewLabels'),
        reviewRiskLevel?: string(name='ReviewRiskLevel'),
        reviewTime?: string(name='ReviewTime'),
        reviewUid?: string(name='ReviewUid'),
        reviewed?: boolean(name='Reviewed'),
        riskLevel?: string(name='RiskLevel'),
        riskTips?: string(name='RiskTips'),
        riskWords?: string(name='RiskWords'),
        scanResult?: string(name='ScanResult', example='{}'),
        score?: float(name='Score', example='25'),
        sensitiveLevel?: string(name='SensitiveLevel'),
        serviceCode?: string(name='ServiceCode', example='baselineCheck'),
        startTime?: string(name='StartTime', example='11'),
        suggestion?: string(name='Suggestion', example='review'),
        taskId?: string(name='TaskId', example='vi_s_EbrXb716LyBpkfwxyX5xyh-1A6RY9'),
        textLabels?: [  map[string]any ](name='TextLabels'),
        thumbnail?: string(name='Thumbnail', example='https://www.aliyuncs.com/xxx.png'),
        timeStamp?: string(name='TimeStamp', example='00:00:40-00:00:42'),
        url?: string(name='Url', example='https://www.aliyuncs.com/xxx.png'),
        voiceLabels?: [  map[string]any ](name='VoiceLabels'),
        voiceScanOpened?: boolean(name='VoiceScanOpened', example='True'),
        voiceService?: string(name='VoiceService', example='live_stream_detection'),
      }
    ](name='Items'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetScanResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetScanResult  GetScanResultRequest
  * @return GetScanResultResponse
 */
async function getScanResult(request: GetScanResultRequest): GetScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetScanResult', 'POST', '/', 'json', true, 'form', request);
}

model GetServiceConfRequest {
  byDefault?: boolean(name='ByDefault', example='False', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Body'),
  scene?: string(name='Scene', example='pornographic', position='Body'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck', position='Body'),
}

model GetServiceConfResponseBody = {
  classify?: string(name='Classify'),
  code?: int32(name='Code', example='200'),
  customServiceConf?: map[string]any(name='CustomServiceConf', example='{}'),
  gmtModified?: string(name='GmtModified', example='2023-01-17 12:29:56'),
  msg?: string(name='Msg', example='OK'),
  option?: map[string]any(name='Option', example='{}'),
  requestId?: string(name='RequestId', example='6CF2815C-****-****-B52E-FF6E2****492'),
  resourceType?: string(name='ResourceType', example='image'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck'),
  serviceType?: string(name='ServiceType'),
  success?: boolean(name='Success', example='True'),
  uid?: string(name='Uid', description='UID。', example='17726*****370735'),
}

model GetServiceConfResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceConfResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceConf  GetServiceConfRequest
  * @return GetServiceConfResponse
 */
async function getServiceConf(request: GetServiceConfRequest): GetServiceConfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceConf', 'POST', '/', 'json', true, 'form', request);
}

model GetServiceConfigRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', example='nickname_detection', position='Body'),
}

model GetServiceConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    customServiceConf?: {
      keywordFilterLibs?: [ string ](name='KeywordFilterLibs'),
      keywordHitLibs?: [ string ](name='KeywordHitLibs'),
      manualMachineConfig?: {
        auditRiskLevels?: [ string ](name='AuditRiskLevels'),
        callbackId?: long(name='CallbackId'),
        enable?: boolean(name='Enable'),
        manualService?: string(name='ManualService'),
      }(name='ManualMachineConfig'),
      similarTextHitLibs?: [ string ](name='SimilarTextHitLibs'),
    }(name='CustomServiceConf'),
    gmtModified?: string(name='GmtModified', example='2024-05-06 03:07:44'),
    resourceType?: string(name='ResourceType', example='text'),
    serviceCode?: string(name='ServiceCode', example='nickname_detection'),
    uid?: string(name='Uid', description='UID。', example='165379****31937'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetServiceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceConfig  GetServiceConfigRequest
  * @return GetServiceConfigResponse
 */
async function getServiceConfig(request: GetServiceConfigRequest): GetServiceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetServiceLabelConfigRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', example='nickname_detection', position='Body'),
}

model GetServiceLabelConfigResponseBody = {
  data?: [ any ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model GetServiceLabelConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceLabelConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceLabelConfig  GetServiceLabelConfigRequest
  * @return GetServiceLabelConfigResponse
 */
async function getServiceLabelConfig(request: GetServiceLabelConfigRequest): GetServiceLabelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceLabelConfig', 'POST', '/', 'json', true, 'form', request);
}

model GetStockOssCheckTasksListRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endTime?: string(name='EndTime', example='2023-06-18 02:08:00', position='Body'),
  isInc?: boolean(name='IsInc', example='false', position='Query'),
  mediaType?: int32(name='MediaType', example='image', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  startTime?: string(name='StartTime', example='2023-06-17 02:08:00', position='Body'),
  taskType?: string(name='TaskType', example='batch', position='Query'),
}

model GetStockOssCheckTasksListResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      buckets?: string(name='Buckets', example='tmp'),
      config?: {
        callbackId?: long(name='CallbackId'),
        distinctHistoryTasks?: boolean(name='DistinctHistoryTasks', example='false'),
        endTime?: string(name='EndTime', example='2024-01-10 11:42:31'),
        executeDate?: int32(name='ExecuteDate', example='1'),
        executeTime?: string(name='ExecuteTime', example='02:00:00'),
        freeze?: boolean(name='Freeze'),
        freezeHighRisk1?: boolean(name='FreezeHighRisk1'),
        freezeHighRisk2?: boolean(name='FreezeHighRisk2'),
        freezeMediumRisk1?: boolean(name='FreezeMediumRisk1'),
        freezeMediumRisk2?: boolean(name='FreezeMediumRisk2'),
        freezeRestorePath?: string(name='FreezeRestorePath'),
        freezeType?: string(name='FreezeType'),
        prefixFilterType?: string(name='PrefixFilterType', example='all'),
        prefixFilters?: [ string ](name='PrefixFilters'),
        priority?: int32(name='Priority', example='1'),
        referer?: string(name='Referer'),
        scanLimit?: long(name='ScanLimit', example='10'),
        scanNoFileType?: boolean(name='ScanNoFileType', example='true'),
        scanResourceType?: int32(name='ScanResourceType', example='0'),
        scanService?: [ string ](name='ScanService'),
        scanServiceInfos?: [ 
          {
            copyFrom?: string(name='CopyFrom', example='baselineCheck'),
            isCopy?: boolean(name='IsCopy', example='false'),
            serviceCode?: string(name='ServiceCode', example='baselineCheck_01'),
            serviceName?: string(name='ServiceName'),
          }
        ](name='ScanServiceInfos'),
        startTime?: string(name='StartTime', example='2023-12-21 15:30:19'),
        taskCycle?: int32(name='TaskCycle', example='0'),
        userFreezeConfig?: {
          freezeRestorePath?: string(name='FreezeRestorePath'),
          freezeType?: string(name='FreezeType'),
        }(name='UserFreezeConfig'),
      }(name='Config'),
      endTime?: string(name='EndTime', example='2024-01-10 11:42:31'),
      finishNum?: long(name='FinishNum', example='2'),
      isInc?: boolean(name='IsInc', example='false'),
      lastExecuteDate?: string(name='LastExecuteDate', example='02:00:00'),
      mediaType?: int32(name='MediaType', example='video'),
      nextExecuteDate?: string(name='NextExecuteDate', example='02:00:00'),
      objectNum?: long(name='ObjectNum', example='10'),
      searchNum?: long(name='SearchNum', example='10'),
      startTime?: string(name='StartTime', example='2023-12-21 15:30:19'),
      status?: int32(name='Status', example='4'),
      taskId?: string(name='TaskId', example='P_XHDUS'),
      taskName?: string(name='TaskName'),
      taskType?: string(name='TaskType', example='batch'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  totalCount?: long(name='TotalCount', example='10'),
}

model GetStockOssCheckTasksListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetStockOssCheckTasksListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetStockOssCheckTasksList  GetStockOssCheckTasksListRequest
  * @return GetStockOssCheckTasksListResponse
 */
async function getStockOssCheckTasksList(request: GetStockOssCheckTasksListRequest): GetStockOssCheckTasksListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetStockOssCheckTasksList', 'POST', '/', 'json', true, 'form', request);
}

model GetTextScanResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  query?: map[string]string(name='Query', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Body'),
}

model GetTextScanResultResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    items?: [ 
      {
        bailianRequestId?: string(name='BailianRequestId'),
        content?: string(name='Content'),
        extFeedback?: string(name='ExtFeedback', example='miss'),
        extra?: map[string]any(name='Extra', example='{}'),
        gmtCreate?: string(name='GmtCreate', example='2023-07-11 14:21:36'),
        labels?: string(name='Labels', example='nonLabel'),
        requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
        requestTime?: string(name='RequestTime', example='2023-07-11 14:21:36'),
        result?: [ 
          {
            confidence?: float(name='Confidence', example='25.0'),
            description?: string(name='Description'),
            label?: string(name='Label', example='political_n'),
          }
        ](name='Result'),
        riskLevel?: string(name='RiskLevel'),
        scanResult?: string(name='ScanResult', example='{}'),
        score?: float(name='Score', example='20'),
        serviceCode?: string(name='ServiceCode', example='nickname_detection'),
        suggestion?: string(name='Suggestion', example='review'),
        taskId?: string(name='TaskId', example='txtwkgb******AsYNXoJswy-1Aa1Qk'),
      }
    ](name='Items'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='5'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetTextScanResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTextScanResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTextScanResult  GetTextScanResultRequest
  * @return GetTextScanResultResponse
 */
async function getTextScanResult(request: GetTextScanResultRequest): GetTextScanResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTextScanResult', 'POST', '/', 'json', true, 'form', request);
}

model GetUploadInfoRequest {
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Body'),
}

model GetUploadInfoResponseBody = {
  accessId?: string(name='AccessId', example='LTAI5t9HM*****EXQmw3DVH'),
  code?: int32(name='Code', example='200'),
  expire?: long(name='Expire', example='900'),
  folder?: string(name='Folder', example='image/upload/xxx'),
  host?: string(name='Host', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  key?: string(name='Key', example='image/upload/xxx'),
  msg?: string(name='Msg', example='OK'),
  name?: string(name='Name'),
  policy?: string(name='Policy', example='xxxx'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  signature?: string(name='Signature', example='iyu7VHblYj+mEF9p46cdGOlNPAw='),
  success?: boolean(name='Success', example='True'),
}

model GetUploadInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUploadInfo  GetUploadInfoRequest
  * @return GetUploadInfoResponse
 */
async function getUploadInfo(request: GetUploadInfoRequest): GetUploadInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadInfo', 'POST', '/', 'json', true, 'form', request);
}

model GetUploadLinkRequest {
  uploadUrl?: string(name='UploadUrl', example='http://www.aliyuncs.com/test.mp3', position='Query'),
}

model GetUploadLinkResponseBody = {
  data?: string(name='Data', example='http://www.aliyuncs.com/test.mp3'),
  requestId?: string(name='RequestId', example='E37E2B77-A664-5278-8219-23BBC0EB2A35'),
}

model GetUploadLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUploadLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUploadLink  GetUploadLinkRequest
  * @return GetUploadLinkResponse
 */
async function getUploadLink(request: GetUploadLinkRequest): GetUploadLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUploadLink', 'POST', '/', 'json', false, 'json', request);
}

model GetUserBuyStatusRequest {
  commodityCode?: string(name='CommodityCode', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetUserBuyStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    bid?: long(name='Bid', description='Bid。', example='26842'),
    buy?: boolean(name='Buy', example='True'),
    indebt?: boolean(name='Indebt', example='False'),
    tag?: string(name='Tag'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model GetUserBuyStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserBuyStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserBuyStatus  GetUserBuyStatusRequest
  * @return GetUserBuyStatusResponse
 */
async function getUserBuyStatus(request: GetUserBuyStatusRequest): GetUserBuyStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserBuyStatus', 'POST', '/', 'json', true, 'form', request);
}

model ListAnswerLibRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListAnswerLibResponseBody = {
  data?: [ 
    {
      answerCount?: int32(name='AnswerCount', example='100'),
      gmtModified?: string(name='GmtModified', example='2024-06-03 18:15:01'),
      libId?: string(name='LibId', example='alxxx'),
      libName?: string(name='LibName'),
      uid?: string(name='Uid', description='UID。', example='1643953****74290'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ListAnswerLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAnswerLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAnswerLib  ListAnswerLibRequest
  * @return ListAnswerLibResponse
 */
async function listAnswerLib(request: ListAnswerLibRequest): ListAnswerLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAnswerLib', 'POST', '/', 'json', false, 'json', request);
}

model ListCallbackRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListCallbackResponseBody = {
  data?: [ 
    {
      cryptType?: string(name='CryptType', example='SHA256'),
      gmtCreate?: string(name='GmtCreate', example='2024-06-03 15:20:14'),
      gmtModified?: string(name='GmtModified', example='2024-06-03 15:20:14'),
      id?: long(name='Id', example='11234'),
      name?: string(name='Name'),
      scope?: string(name='Scope', example='all'),
      seed?: string(name='Seed', description='Seed。', example='cbupVnpBjkgjFxfINMHKkrHS-1zZPUm'),
      uid?: string(name='Uid', description='UID。', example='16537*****831937'),
      url?: string(name='Url', example='https://console.aliyun.com/'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ListCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCallback  ListCallbackRequest
  * @return ListCallbackResponse
 */
async function listCallback(request: ListCallbackRequest): ListCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCallback', 'POST', '/', 'json', false, 'json', request);
}

model ListImageLibRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListImageLibResponseBody = {
  code?: int32(name='Code', example='200'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  libList?: [ 
    {
      comment?: string(name='Comment'),
      freeInspection?: int32(name='FreeInspection', example='1'),
      gmtCreate?: string(name='GmtCreate', example='2024-06-03 15:20:14'),
      gmtModified?: string(name='GmtModified', example='2024-06-03 15:20:14'),
      imageNum?: long(name='ImageNum', example='1'),
      libId?: string(name='LibId', example='custom_xxxx'),
      libName?: string(name='LibName'),
    }
  ](name='LibList'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImageLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImageLib  ListImageLibRequest
  * @return ListImageLibResponse
 */
async function listImageLib(request: ListImageLibRequest): ListImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImageLib', 'POST', '/', 'json', false, 'json', request);
}

model ListImagesFromLibRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Body'),
  imgId?: string(name='ImgId', example='112', position='Body'),
  libId?: string(name='LibId', example='custom_xxxx', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Body'),
}

model ListImagesFromLibResponseBody = {
  code?: int32(name='Code', example='200'),
  currentPage?: int32(name='CurrentPage', example='1'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  items?: [ 
    {
      gmtCreate?: string(name='GmtCreate', example='2022-11-30 16:30:29'),
      imageId?: string(name='ImageId', example='112'),
      imageUrl?: string(name='ImageUrl', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/image/upload/IMG_2123.jpg'),
      thumbnailUrl?: string(name='ThumbnailUrl', example='https://oss-cip-shanghai.oss-cn-shanghai.aliyuncs.com/image/upload/IMG_2123.jpg'),
    }
  ](name='Items'),
  msg?: string(name='Msg', example='OK'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListImagesFromLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListImagesFromLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListImagesFromLib  ListImagesFromLibRequest
  * @return ListImagesFromLibResponse
 */
async function listImagesFromLib(request: ListImagesFromLibRequest): ListImagesFromLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImagesFromLib', 'POST', '/', 'json', true, 'form', request);
}

model ListKeywordLibsRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ListKeywordLibsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: [ 
    {
      gmtModified?: string(name='GmtModified', example='2022-11-30 16:30:29'),
      keywordCount?: string(name='KeywordCount', example='10'),
      libId?: string(name='LibId', example='custom_xxxxx'),
      libName?: string(name='LibName'),
      serviceCodes?: string(name='ServiceCodes'),
      uid?: string(name='Uid', description='UID。', example='19964*****086772'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListKeywordLibsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKeywordLibsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListKeywordLibs  ListKeywordLibsRequest
  * @return ListKeywordLibsResponse
 */
async function listKeywordLibs(request: ListKeywordLibsRequest): ListKeywordLibsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListKeywordLibs', 'POST', '/', 'json', false, 'json', request);
}

model ListKeywordsRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  libId?: string(name='LibId', example='custom_xxxx', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Body'),
  word?: string(name='Word', position='Body'),
}

model ListKeywordsResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    items?: [ 
      {
        gmtCreate?: string(name='GmtCreate', example='2023-06-03 14:43:03'),
        gmtModified?: string(name='GmtModified', example='2023-06-03 14:43:03'),
        id?: long(name='Id', example='112'),
        keywordLibId?: string(name='KeywordLibId', example='custom_xxxx'),
        keywordMd5Id?: long(name='KeywordMd5Id', example='4205334'),
        word?: string(name='Word'),
      }
    ](name='Items'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='23'),
  }(name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListKeywordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListKeywordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListKeywords  ListKeywordsRequest
  * @return ListKeywordsResponse
 */
async function listKeywords(request: ListKeywordsRequest): ListKeywordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListKeywords', 'POST', '/', 'json', true, 'form', request);
}

model ListOssCheckResultRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endDate?: string(name='EndDate', example='2023-08-24 10:01:55', position='Query'),
  finishNum?: long(name='FinishNum', example='2', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  query?: string(name='Query', example='{"TaskId":"P_11TL5T"}', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-11 09:00:19', position='Query'),
  status?: int32(name='Status', example='4', position='Query'),
}

model ListOssCheckResultResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      bucket?: string(name='Bucket', example='tmp'),
      code?: string(name='Code', example='200'),
      contentType?: string(name='ContentType', example='audio'),
      copyFrom?: string(name='CopyFrom', example='audio_media_detection'),
      freezeStatus?: string(name='FreezeStatus'),
      freezeType?: string(name='FreezeType'),
      imageUrl?: string(name='ImageUrl', example='http://www.aliyuncs.com/test.jpg'),
      isCopy?: boolean(name='IsCopy', example='true'),
      jobName?: string(name='JobName', example='dhT20X2310'),
      labels?: [ string ](name='Labels'),
      labels2?: [ string ](name='Labels2'),
      md5?: string(name='Md5', example='54416c9b159df4a60ae03c04ccb94cb5'),
      msg?: string(name='Msg', example='OK'),
      object?: string(name='Object', example='1713014531569_958.png.jpeg'),
      riskLevel?: string(name='RiskLevel'),
      riskLevel0?: string(name='RiskLevel0'),
      riskLevel2?: string(name='RiskLevel2'),
      scanResult?: string(name='ScanResult', example='{}'),
      serviceCode?: string(name='ServiceCode', example='audio_media_detection_01'),
      serviceName?: string(name='ServiceName'),
      taskId?: string(name='TaskId', example='EP6TI7_au_Zo25ITvCbkocNuF801QOQX'),
      url?: string(name='Url', example='http://www.aliyuncs.com/test.mp3'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  totalCount?: long(name='TotalCount', example='13'),
}

model ListOssCheckResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOssCheckResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOssCheckResult  ListOssCheckResultRequest
  * @return ListOssCheckResultResponse
 */
async function listOssCheckResult(request: ListOssCheckResultRequest): ListOssCheckResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOssCheckResult', 'POST', '/', 'json', false, 'json', request);
}

model ListServiceConfigsRequest {
  classify?: string(name='Classify', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  useStatus?: string(name='UseStatus', position='Query'),
}

model ListServiceConfigsResponseBody = {
  code?: int32(name='Code', example='400'),
  data?: [ 
    {
      classify?: string(name='Classify'),
      copyFrom?: string(name='CopyFrom', example='nickname_detection'),
      customServiceConf?: {
        audioService?: string(name='AudioService', example='audio_media_detection'),
        imageService?: [ string ](name='ImageService'),
        keywordFilterLibs?: [ string ](name='KeywordFilterLibs'),
        keywordHitLibs?: [ string ](name='KeywordHitLibs'),
        rules?: [ 
          {
            imageScanRule?: {
              services?: [ string ](name='Services'),
            }(name='ImageScanRule'),
            index?: int32(name='Index', example='1'),
            textScanRule?: {
              services?: [ string ](name='Services'),
            }(name='TextScanRule'),
          }
        ](name='Rules'),
        similarTextHitLibs?: [ string ](name='SimilarTextHitLibs'),
      }(name='CustomServiceConf'),
      gmtModified?: string(name='GmtModified', example='2023-07-11 15:40:04'),
      option?: map[string]any(name='Option', example='{}'),
      resourceType?: string(name='ResourceType', example='text'),
      serviceCode?: string(name='ServiceCode', example='nickname_detection'),
      serviceDesc?: string(name='ServiceDesc'),
      serviceName?: string(name='ServiceName'),
      serviceType?: string(name='ServiceType', example='plus'),
      uid?: string(name='Uid', description='UID。', example='1674*****0071291'),
      useStatus?: string(name='UseStatus'),
    }
  ](name='Data'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model ListServiceConfigsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceConfigsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServiceConfigs  ListServiceConfigsRequest
  * @return ListServiceConfigsResponse
 */
async function listServiceConfigs(request: ListServiceConfigsRequest): ListServiceConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListServiceConfigs', 'POST', '/', 'json', true, 'form', request);
}

model LlmStreamChatRequest {
  messages?: any(name='Messages', position='Body'),
  temperature?: float(name='Temperature', example='0.5', position='Body'),
  topP?: float(name='TopP', example='0.5', position='Body'),
  type?: string(name='Type', position='Body'),
}

model LlmStreamChatResponseBody = {
  choices?: [ 
    {
      delta?: {
        content?: string(name='Content'),
        role?: string(name='Role', example='assistant'),
      }(name='Delta'),
      finishReason?: string(name='FinishReason', example='stop'),
      index?: long(name='Index', example='0'),
      logprobs?: string(name='Logprobs', example='null'),
    }
  ](name='Choices'),
  created?: long(name='Created', example='1750990728'),
  error?: {
    code?: string(name='Code', example='data_inspection_failed'),
    message?: string(name='Message', example='Input data may contain inappropriate content.'),
    param?: string(name='Param', example='null'),
    type?: string(name='Type', example='data_inspection_failed'),
  }(name='Error'),
  id?: string(name='Id', example='chatcmpl-777bce52-93d3-9f8c-89c3-e99884f4f57f'),
  model?: string(name='Model', example='deepseek-v3'),
  object?: string(name='Object', example='chat.completion.chunk'),
  requestId?: string(name='RequestId', example='21d296d6-594e-97de-812f-925ec6e05673'),
  systemFingerprint?: string(name='SystemFingerprint', example='null'),
  usage?: string(name='Usage', example='null'),
}

model LlmStreamChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: LlmStreamChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of LlmStreamChat  LlmStreamChatRequest
  * @return LlmStreamChatResponse
 */
async function llmStreamChat(request: LlmStreamChatRequest): LlmStreamChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'LlmStreamChat', 'POST', '/portal/llm/streamChat', 'json', true, 'form', request);
}

function llmStreamChatWithResponseIterable(request: LlmStreamChatRequest): iterator[LlmStreamChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'LlmStreamChat', 'POST', '/portal/llm/streamChat', 'json', true, 'form', request);
}

model ModifyAnswerLibRequest {
  libId?: string(name='LibId', example='custom_xxxx', position='Query'),
  libName?: string(name='LibName', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model ModifyAnswerLibResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ModifyAnswerLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAnswerLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyAnswerLib  ModifyAnswerLibRequest
  * @return ModifyAnswerLibResponse
 */
async function modifyAnswerLib(request: ModifyAnswerLibRequest): ModifyAnswerLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAnswerLib', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCallbackRequest {
  cryptType?: string(name='CryptType', example='SHA256', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='112', position='Body'),
  name?: string(name='Name', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  scope?: string(name='Scope', example='all', position='Body'),
  url?: string(name='Url', example='https://www.aliyuncs.com', position='Body'),
}

model ModifyCallbackResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ModifyCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCallback  ModifyCallbackRequest
  * @return ModifyCallbackResponse
 */
async function modifyCallback(request: ModifyCallbackRequest): ModifyCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCallback', 'POST', '/', 'json', true, 'form', request);
}

model ModifyFeatureConfigRequest {
  config?: string(name='Config', description='Configuration, in JSON format', example='{}', position='Body'),
  description?: string(name='Description', description='Label meaning', example='标签2', position='Body'),
  field?: string(name='Field', description='Label value, customer-defined', example='__config__', position='Body'),
  regionId?: string(name='RegionId', description='Region', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', description='Resource type.', example='text', position='Body'),
  serviceCode?: string(name='ServiceCode', description='Service code.', example='llm_query_moderation', position='Body'),
  type?: string(name='Type', description='Type', example='custom_llm_template', position='Body'),
}

model ModifyFeatureConfigResponseBody = {
  code?: int32(name='Code', description='Status code.', example='200'),
  data?: boolean(name='Data', description='Returned data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', description='HTTP status code.', example='200'),
  msg?: string(name='Msg', description='Response message of this request.', example='success'),
  requestId?: string(name='RequestId', description='ID assigned by the backend to uniquely identify a request. Can be used for troubleshooting.', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', description='Success indicator.', example='True'),
}

model ModifyFeatureConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFeatureConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyFeatureConfig  ModifyFeatureConfigRequest
  * @return ModifyFeatureConfigResponse
 */
async function modifyFeatureConfig(request: ModifyFeatureConfigRequest): ModifyFeatureConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFeatureConfig', 'POST', '/', 'json', true, 'form', request);
}

model ModifyServiceInfoRequest {
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Body'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck', position='Body'),
  serviceDesc?: string(name='ServiceDesc', position='Body'),
  serviceName?: string(name='ServiceName', position='Body'),
}

model ModifyServiceInfoResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model ModifyServiceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyServiceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyServiceInfo  ModifyServiceInfoRequest
  * @return ModifyServiceInfoResponse
 */
async function modifyServiceInfo(request: ModifyServiceInfoRequest): ModifyServiceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyServiceInfo', 'POST', '/', 'json', true, 'form', request);
}

model OssCheckResultListRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  endDate?: string(name='EndDate', example='2023-10-21 16:08:38', position='Query'),
  finishNum?: long(name='FinishNum', example='55', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  query?: string(name='Query', example='{}', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-21 16:08:38', position='Query'),
  status?: int32(name='Status', example='1', position='Query'),
}

model OssCheckResultListResponseBody = {
  authStatus?: string(name='AuthStatus', example='OK'),
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      bucket?: string(name='Bucket', example='tmp'),
      code?: string(name='Code', example='200'),
      contentType?: string(name='ContentType', example='audio'),
      copyFrom?: string(name='CopyFrom', example='audio_media_detection'),
      imageUrl?: string(name='ImageUrl', example='http://www.aliyuncs.com/test.jpg'),
      isCopy?: boolean(name='IsCopy', example='true'),
      jobName?: string(name='JobName', example='dhT20X2310'),
      labels?: [ string ](name='Labels'),
      labels2?: [ string ](name='Labels2'),
      md5?: string(name='Md5', example='54416c9b159df4a60ae03c04ccb94cb5'),
      msg?: string(name='Msg', example='success'),
      object?: string(name='Object', example='1713014531569_958.png.jpeg'),
      scanResult?: string(name='ScanResult', example='{}'),
      serviceCode?: string(name='ServiceCode', example='audio_media_detection_01'),
      serviceName?: string(name='ServiceName'),
      taskId?: string(name='TaskId', example='P_XHDUS'),
      url?: string(name='Url', example='http://www.aliyuncs.com/test.mp3'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model OssCheckResultListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OssCheckResultListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OssCheckResultList  OssCheckResultListRequest
  * @return OssCheckResultListResponse
 */
async function ossCheckResultList(request: OssCheckResultListRequest): OssCheckResultListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OssCheckResultList', 'POST', '/', 'json', false, 'json', request);
}

model QueryAnswerSampleByPageRequest {
  answer?: string(name='Answer', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  libId?: string(name='LibId', example='custom_xxxx', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  sort?: map[string]string(name='Sort', shrink='json', position='Query'),
}

model QueryAnswerSampleByPageResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      answer?: string(name='Answer'),
      gmtCreate?: string(name='GmtCreate', example='2023-07-31 06:16:06'),
      id?: long(name='Id', example='1666'),
      libId?: string(name='LibId', example='custom_xxxx'),
      uid?: string(name='Uid', description='UID。', example='104813*****2399'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  totalCount?: long(name='TotalCount', example='58'),
}

model QueryAnswerSampleByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAnswerSampleByPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAnswerSampleByPage  QueryAnswerSampleByPageRequest
  * @return QueryAnswerSampleByPageResponse
 */
async function queryAnswerSampleByPage(request: QueryAnswerSampleByPageRequest): QueryAnswerSampleByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAnswerSampleByPage', 'POST', '/', 'json', false, 'json', request);
}

model QueryCallbackRequest {
  checkForOss?: boolean(name='CheckForOss', example='true', position='Body'),
  id: long(name='Id', description='This parameter is required.', example='11234', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model QueryCallbackResponseBody = {
  cryptType?: string(name='CryptType', example='SHA256'),
  existsOssCheckTask?: boolean(name='ExistsOssCheckTask', example='false'),
  gmtCreate?: string(name='GmtCreate', example='2022-11-30 16:30:29'),
  gmtModified?: string(name='GmtModified', example='2024-06-03 15:20:14'),
  id?: long(name='Id', example='11234'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  scope?: string(name='Scope', example='all'),
  seed?: string(name='Seed', description='Seed。', example='cb2MysbJTAAIf6gB3u4vpIEU-1ySnnf'),
  uid?: string(name='Uid', description='UID。', example='19964*****086772'),
  url?: string(name='Url', example='https://www.aliyuncs.com'),
}

model QueryCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCallback  QueryCallbackRequest
  * @return QueryCallbackResponse
 */
async function queryCallback(request: QueryCallbackRequest): QueryCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallback', 'POST', '/', 'json', true, 'form', request);
}

model QueryCallbackByPageRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model QueryCallbackByPageResponseBody = {
  currentPage?: int32(name='CurrentPage', example='1'),
  items?: [ 
    {
      cryptType?: string(name='CryptType', example='SHA256'),
      gmtCreate?: string(name='GmtCreate', example='2024-06-03 15:20:14'),
      gmtModified?: string(name='GmtModified', example='2024-06-03 15:20:14'),
      id?: long(name='Id', example='1697'),
      name?: string(name='Name'),
      scope?: string(name='Scope', example='all'),
      seed?: string(name='Seed', description='Seed。', example='cb6gYS8GXj4Vn4Y4FN0Y8R5M-1x46Mq'),
      uid?: string(name='Uid', description='UID。', example='12161*****398900'),
      url?: string(name='Url', example='https://console.aliyun.com/'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  totalCount?: long(name='TotalCount', example='10'),
}

model QueryCallbackByPageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCallbackByPageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCallbackByPage  QueryCallbackByPageRequest
  * @return QueryCallbackByPageResponse
 */
async function queryCallbackByPage(request: QueryCallbackByPageRequest): QueryCallbackByPageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCallbackByPage', 'POST', '/', 'json', true, 'form', request);
}

model StopOnlineTestRequest {
  resourceType?: string(name='ResourceType', example='image', position='Query'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration', position='Query'),
  taskId?: string(name='TaskId', example='xxxxx-xxxxx', position='Query'),
}

model StopOnlineTestResponseBody = {
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  serviceCode?: string(name='ServiceCode', example='VideoModeration'),
  taskId?: string(name='TaskId', example='xxxxx-xxxxx'),
  taskStatus?: string(name='TaskStatus', example='SUCCESS'),
  url?: string(name='Url', example='https://xxxxxxxx.com/data/data.png'),
}

model StopOnlineTestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopOnlineTestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopOnlineTest  StopOnlineTestRequest
  * @return StopOnlineTestResponse
 */
async function stopOnlineTest(request: StopOnlineTestRequest): StopOnlineTestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopOnlineTest', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBackupConfigRequest {
  backupConfig?: string(name='BackupConfig', example='{}', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='video', position='Query'),
  serviceCode?: string(name='ServiceCode', example='videoDetection', position='Query'),
}

model UpdateBackupConfigResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model UpdateBackupConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBackupConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateBackupConfig  UpdateBackupConfigRequest
  * @return UpdateBackupConfigResponse
 */
async function updateBackupConfig(request: UpdateBackupConfigRequest): UpdateBackupConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBackupConfig', 'POST', '/', 'json', false, 'json', request);
}

model UpdateImageLibRequest {
  comment?: string(name='Comment', position='Body'),
  freeInspection?: int32(name='FreeInspection', example='0', position='Body'),
  libId?: string(name='LibId', example='custom_xxxx', position='Body'),
  libName?: string(name='LibName', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model UpdateImageLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model UpdateImageLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateImageLib  UpdateImageLibRequest
  * @return UpdateImageLibResponse
 */
async function updateImageLib(request: UpdateImageLibRequest): UpdateImageLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImageLib', 'POST', '/', 'json', true, 'form', request);
}

model UpdateImageLibFreeInspectionRequest {
  config?: map[string]int32(name='Config', shrink='json', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model UpdateImageLibFreeInspectionResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model UpdateImageLibFreeInspectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateImageLibFreeInspectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateImageLibFreeInspection  UpdateImageLibFreeInspectionRequest
  * @return UpdateImageLibFreeInspectionResponse
 */
async function updateImageLibFreeInspection(request: UpdateImageLibFreeInspectionRequest): UpdateImageLibFreeInspectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateImageLibFreeInspection', 'POST', '/', 'json', true, 'form', request);
}

model UpdateKeywordLibRequest {
  libId?: string(name='LibId', example='custom_xxxx', position='Body'),
  libName?: string(name='LibName', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model UpdateKeywordLibResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model UpdateKeywordLibResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateKeywordLibResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateKeywordLib  UpdateKeywordLibRequest
  * @return UpdateKeywordLibResponse
 */
async function updateKeywordLib(request: UpdateKeywordLibRequest): UpdateKeywordLibResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateKeywordLib', 'POST', '/', 'json', true, 'form', request);
}

model UpdateOssCheckResultsBatchFeedbackRequest {
  feedback?: string(name='Feedback', example='misreport', position='Query'),
  items?: string(name='Items', example='[]', position='Query'),
  parentTaskId?: string(name='ParentTaskId', example='P_XHDUS', position='Query'),
}

model UpdateOssCheckResultsBatchFeedbackResponseBody = {
  invalidCount?: int32(name='InvalidCount', example='1'),
  repeatCount?: int32(name='RepeatCount', example='1'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  successCount?: int32(name='SuccessCount', example='8'),
  tips?: string(name='Tips', example='xxxxx'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model UpdateOssCheckResultsBatchFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssCheckResultsBatchFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOssCheckResultsBatchFeedback  UpdateOssCheckResultsBatchFeedbackRequest
  * @return UpdateOssCheckResultsBatchFeedbackResponse
 */
async function updateOssCheckResultsBatchFeedback(request: UpdateOssCheckResultsBatchFeedbackRequest): UpdateOssCheckResultsBatchFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssCheckResultsBatchFeedback', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssCheckResultsFeedBackRequest {
  feedback?: string(name='Feedback', example='misreport', position='Query'),
  queryRequestId?: string(name='QueryRequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck', position='Query'),
  taskId?: string(name='TaskId', example='P_7SCUK8', position='Query'),
}

model UpdateOssCheckResultsFeedBackResponseBody = {
  data?: boolean(name='Data', example='true'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model UpdateOssCheckResultsFeedBackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssCheckResultsFeedBackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOssCheckResultsFeedBack  UpdateOssCheckResultsFeedBackRequest
  * @return UpdateOssCheckResultsFeedBackResponse
 */
async function updateOssCheckResultsFeedBack(request: UpdateOssCheckResultsFeedBackRequest): UpdateOssCheckResultsFeedBackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssCheckResultsFeedBack', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssCheckResultsFreezeRequest {
  endDate?: string(name='EndDate', example='2023-10-21 16:08:38', position='Query'),
  freezeItems?: string(name='FreezeItems', example='[]', position='Query'),
  freezeRestorePath?: string(name='FreezeRestorePath', position='Query'),
  freezeType?: string(name='FreezeType', example='ACL', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-21 16:08:38', position='Query'),
  taskId?: string(name='TaskId', example='P_15BU42', position='Query'),
}

model UpdateOssCheckResultsFreezeResponseBody = {
  data?: {
    invalidCount?: int32(name='InvalidCount', example='1'),
    repeatCount?: int32(name='RepeatCount', example='1'),
    successCount?: int32(name='SuccessCount', example='5'),
    totalCount?: int32(name='TotalCount', example='5'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model UpdateOssCheckResultsFreezeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssCheckResultsFreezeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOssCheckResultsFreeze  UpdateOssCheckResultsFreezeRequest
  * @return UpdateOssCheckResultsFreezeResponse
 */
async function updateOssCheckResultsFreeze(request: UpdateOssCheckResultsFreezeRequest): UpdateOssCheckResultsFreezeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssCheckResultsFreeze', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOssCheckResultsUnfreezeRequest {
  endDate?: string(name='EndDate', example='2023-10-21 16:08:38', position='Query'),
  freezeItems?: string(name='FreezeItems', example='[]', position='Query'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  startDate?: string(name='StartDate', example='2023-08-21 16:08:38', position='Query'),
  taskId?: string(name='TaskId', example='P_B6YRVD', position='Query'),
}

model UpdateOssCheckResultsUnfreezeResponseBody = {
  data?: {
    invalidCount?: int32(name='InvalidCount', example='1'),
    repeatCount?: int32(name='RepeatCount', example='1'),
    successCount?: int32(name='SuccessCount', example='8'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model UpdateOssCheckResultsUnfreezeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOssCheckResultsUnfreezeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOssCheckResultsUnfreeze  UpdateOssCheckResultsUnfreezeRequest
  * @return UpdateOssCheckResultsUnfreezeResponse
 */
async function updateOssCheckResultsUnfreeze(request: UpdateOssCheckResultsUnfreezeRequest): UpdateOssCheckResultsUnfreezeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOssCheckResultsUnfreeze', 'POST', '/', 'json', false, 'json', request);
}

model UpdateScanResultFeedbackRequest {
  feedback?: string(name='Feedback', example='missOut', position='Body'),
  labels?: string(name='Labels', position='Body'),
  queryRequestId?: string(name='QueryRequestId', example='46232656-984E-****-A648-B1D0667B6C3E', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='text', position='Body'),
  riskLevel?: string(name='RiskLevel', position='Body'),
}

model UpdateScanResultFeedbackResponseBody = {
  data?: boolean(name='Data', example='True'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
}

model UpdateScanResultFeedbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateScanResultFeedbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateScanResultFeedback  UpdateScanResultFeedbackRequest
  * @return UpdateScanResultFeedbackResponse
 */
async function updateScanResultFeedback(request: UpdateScanResultFeedbackRequest): UpdateScanResultFeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateScanResultFeedback', 'POST', '/', 'json', true, 'form', request);
}

model UpdateServiceConfigRequest {
  fileConfig?: string(name='FileConfig', example='{}', position='Body'),
  keywordFilterLibs?: string(name='KeywordFilterLibs', example='[]', position='Body'),
  keywordHitLibs?: string(name='KeywordHitLibs', example='[]', position='Body'),
  manualMachineConfig?: string(name='ManualMachineConfig', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Query'),
  resourceType?: string(name='ResourceType', example='image', position='Body'),
  scene?: string(name='Scene', example='pornographic', position='Body'),
  sceneConfig?: string(name='SceneConfig', example='{}', position='Body'),
  serviceCode?: string(name='ServiceCode', example='baselineCheck', position='Body'),
  serviceConfig?: string(name='ServiceConfig', position='Body'),
  videoConfig?: string(name='VideoConfig', example='{}', position='Body'),
}

model UpdateServiceConfigResponseBody = {
  code?: int32(name='Code', example='200'),
  data?: boolean(name='Data', example='True'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  msg?: string(name='Msg', example='OK'),
  requestId?: string(name='RequestId', example='AAAAAA-BBBB-CCCCC-DDDD-EEEEEEEE****'),
  success?: boolean(name='Success', example='True'),
}

model UpdateServiceConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateServiceConfig  UpdateServiceConfigRequest
  * @return UpdateServiceConfigResponse
 */
async function updateServiceConfig(request: UpdateServiceConfigRequest): UpdateServiceConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateServiceConfig', 'POST', '/', 'json', true, 'form', request);
}

