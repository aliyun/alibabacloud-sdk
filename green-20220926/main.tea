/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'green.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'green.ap-southeast-1.aliyuncs.com',
    cn-chengdu = 'green.aliyuncs.com',
    cn-hongkong = 'green.aliyuncs.com',
    cn-huhehaote = 'green.aliyuncs.com',
    cn-qingdao = 'green.aliyuncs.com',
    cn-zhangjiakou = 'green.aliyuncs.com',
    eu-central-1 = 'green.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'green.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'green.ap-southeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'green.aliyuncs.com',
    cn-shenzhen-finance-1 = 'green.aliyuncs.com',
    cn-shanghai-finance-1 = 'green.aliyuncs.com',
    cn-north-2-gov-1 = 'green.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('green', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddImages2LibRequest {
  imgUrl?: string(name='ImgUrl'),
  libId?: string(name='LibId'),
  regionId?: string(name='RegionId'),
}

model AddImages2LibResponseBody = {
  code?: int32(name='Code'),
  data?: {
    imgId?: string(name='ImgId'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddImages2LibResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddImages2LibResponseBody(name='body'),
}

async function addImages2LibWithOptions(request: AddImages2LibRequest, runtime: Util.RuntimeOptions): AddImages2LibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.imgUrl)) {
    body['ImgUrl'] = request.imgUrl;
  }
  if (!Util.isUnset(request.libId)) {
    body['LibId'] = request.libId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddImages2Lib',
    version = '2022-09-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addImages2Lib(request: AddImages2LibRequest): AddImages2LibResponse {
  var runtime = new Util.RuntimeOptions{};
  return addImages2LibWithOptions(request, runtime);
}

model DeleteImagesFromLibRequest {
  imageIds?: string(name='ImageIds'),
  libId?: string(name='LibId'),
  regionId?: string(name='RegionId'),
}

model DeleteImagesFromLibResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteImagesFromLibResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteImagesFromLibResponseBody(name='body'),
}

async function deleteImagesFromLibWithOptions(request: DeleteImagesFromLibRequest, runtime: Util.RuntimeOptions): DeleteImagesFromLibResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageIds)) {
    body['ImageIds'] = request.imageIds;
  }
  if (!Util.isUnset(request.libId)) {
    body['LibId'] = request.libId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteImagesFromLib',
    version = '2022-09-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteImagesFromLib(request: DeleteImagesFromLibRequest): DeleteImagesFromLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImagesFromLibWithOptions(request, runtime);
}

model GetUploadInfoRequest {
  name?: string(name='Name'),
  regionId?: string(name='RegionId'),
  resourceType?: string(name='ResourceType'),
}

model GetUploadInfoResponseBody = {
  accessId?: string(name='AccessId'),
  code?: int32(name='Code'),
  expire?: long(name='Expire'),
  folder?: string(name='Folder'),
  host?: string(name='Host'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  key?: string(name='Key'),
  msg?: string(name='Msg'),
  name?: string(name='Name'),
  policy?: string(name='Policy'),
  requestId?: string(name='RequestId'),
  signature?: string(name='Signature'),
  success?: boolean(name='Success'),
}

model GetUploadInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUploadInfoResponseBody(name='body'),
}

async function getUploadInfoWithOptions(request: GetUploadInfoRequest, runtime: Util.RuntimeOptions): GetUploadInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.resourceType)) {
    body['ResourceType'] = request.resourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUploadInfo',
    version = '2022-09-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUploadInfo(request: GetUploadInfoRequest): GetUploadInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadInfoWithOptions(request, runtime);
}

model ListImagesFromLibRequest {
  currentPage?: int32(name='CurrentPage'),
  endDate?: string(name='EndDate'),
  imgId?: string(name='ImgId'),
  libId?: string(name='LibId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  sort?: map[string]string(name='Sort'),
  startDate?: string(name='StartDate'),
}

model ListImagesFromLibShrinkRequest {
  currentPage?: int32(name='CurrentPage'),
  endDate?: string(name='EndDate'),
  imgId?: string(name='ImgId'),
  libId?: string(name='LibId'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  sortShrink?: string(name='Sort'),
  startDate?: string(name='StartDate'),
}

model ListImagesFromLibResponseBody = {
  code?: int32(name='Code'),
  currentPage?: int32(name='CurrentPage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      imageId?: string(name='ImageId'),
      imageUrl?: string(name='ImageUrl'),
      thumbnailUrl?: string(name='ThumbnailUrl'),
    }
  ](name='Items'),
  msg?: string(name='Msg'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model ListImagesFromLibResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListImagesFromLibResponseBody(name='body'),
}

async function listImagesFromLibWithOptions(tmpReq: ListImagesFromLibRequest, runtime: Util.RuntimeOptions): ListImagesFromLibResponse {
  Util.validateModel(tmpReq);
  var request = new ListImagesFromLibShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sort)) {
    request.sortShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sort, 'Sort', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.currentPage)) {
    body['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endDate)) {
    body['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.imgId)) {
    body['ImgId'] = request.imgId;
  }
  if (!Util.isUnset(request.libId)) {
    body['LibId'] = request.libId;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortShrink)) {
    body['Sort'] = request.sortShrink;
  }
  if (!Util.isUnset(request.startDate)) {
    body['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListImagesFromLib',
    version = '2022-09-26',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listImagesFromLib(request: ListImagesFromLibRequest): ListImagesFromLibResponse {
  var runtime = new Util.RuntimeOptions{};
  return listImagesFromLibWithOptions(request, runtime);
}

