/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('linkwan', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AcceptJoinPermissionAuthOrderRequest {
  orderId?: string(name='OrderId'),
}

model AcceptJoinPermissionAuthOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AcceptJoinPermissionAuthOrderResponse = {
  headers: map[string]string(name='headers'),
  body: AcceptJoinPermissionAuthOrderResponseBody(name='body'),
}

async function acceptJoinPermissionAuthOrderWithOptions(request: AcceptJoinPermissionAuthOrderRequest, runtime: Util.RuntimeOptions): AcceptJoinPermissionAuthOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AcceptJoinPermissionAuthOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function acceptJoinPermissionAuthOrder(request: AcceptJoinPermissionAuthOrderRequest): AcceptJoinPermissionAuthOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return acceptJoinPermissionAuthOrderWithOptions(request, runtime);
}

model AddNodeToGroupRequest {
  devEui?: string(name='DevEui'),
  pinCode?: string(name='PinCode'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model AddNodeToGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddNodeToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddNodeToGroupResponseBody(name='body'),
}

async function addNodeToGroupWithOptions(request: AddNodeToGroupRequest, runtime: Util.RuntimeOptions): AddNodeToGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  query["PinCode"] = request.pinCode;
  query["NodeGroupId"] = request.nodeGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddNodeToGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addNodeToGroup(request: AddNodeToGroupRequest): AddNodeToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNodeToGroupWithOptions(request, runtime);
}

model ApplyRoamingJoinPermissionRequest {
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  classMode?: string(name='ClassMode'),
  joinPermissionName?: string(name='JoinPermissionName'),
  rxDelay?: long(name='RxDelay'),
  dataRate?: long(name='DataRate'),
}

model ApplyRoamingJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model ApplyRoamingJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyRoamingJoinPermissionResponseBody(name='body'),
}

async function applyRoamingJoinPermissionWithOptions(request: ApplyRoamingJoinPermissionRequest, runtime: Util.RuntimeOptions): ApplyRoamingJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["ClassMode"] = request.classMode;
  query["JoinPermissionName"] = request.joinPermissionName;
  query["RxDelay"] = request.rxDelay;
  query["DataRate"] = request.dataRate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ApplyRoamingJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyRoamingJoinPermission(request: ApplyRoamingJoinPermissionRequest): ApplyRoamingJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyRoamingJoinPermissionWithOptions(request, runtime);
}

model BindJoinPermissionToNodeGroupRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  joinPermissionId?: string(name='JoinPermissionId'),
}

model BindJoinPermissionToNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BindJoinPermissionToNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: BindJoinPermissionToNodeGroupResponseBody(name='body'),
}

async function bindJoinPermissionToNodeGroupWithOptions(request: BindJoinPermissionToNodeGroupRequest, runtime: Util.RuntimeOptions): BindJoinPermissionToNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'BindJoinPermissionToNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function bindJoinPermissionToNodeGroup(request: BindJoinPermissionToNodeGroupRequest): BindJoinPermissionToNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindJoinPermissionToNodeGroupWithOptions(request, runtime);
}

model CancelJoinPermissionAuthOrderRequest {
  orderId?: string(name='OrderId'),
}

model CancelJoinPermissionAuthOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelJoinPermissionAuthOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelJoinPermissionAuthOrderResponseBody(name='body'),
}

async function cancelJoinPermissionAuthOrderWithOptions(request: CancelJoinPermissionAuthOrderRequest, runtime: Util.RuntimeOptions): CancelJoinPermissionAuthOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CancelJoinPermissionAuthOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelJoinPermissionAuthOrder(request: CancelJoinPermissionAuthOrderRequest): CancelJoinPermissionAuthOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelJoinPermissionAuthOrderWithOptions(request, runtime);
}

model CheckCloudProductOpenStatusRequest {
  serviceCode?: string(name='ServiceCode'),
}

model CheckCloudProductOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: boolean(name='Data'),
  success?: boolean(name='Success'),
}

model CheckCloudProductOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckCloudProductOpenStatusResponseBody(name='body'),
}

async function checkCloudProductOpenStatusWithOptions(request: CheckCloudProductOpenStatusRequest, runtime: Util.RuntimeOptions): CheckCloudProductOpenStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ServiceCode"] = request.serviceCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CheckCloudProductOpenStatus',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkCloudProductOpenStatus(request: CheckCloudProductOpenStatusRequest): CheckCloudProductOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkCloudProductOpenStatusWithOptions(request, runtime);
}

model CheckUserChargeStatusResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model CheckUserChargeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUserChargeStatusResponseBody(name='body'),
}

async function checkUserChargeStatusWithOptions(runtime: Util.RuntimeOptions): CheckUserChargeStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'CheckUserChargeStatus',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkUserChargeStatus(): CheckUserChargeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserChargeStatusWithOptions(runtime);
}

model CountGatewaysRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  onlineState?: string(name='OnlineState'),
  fuzzyGwEui?: string(name='FuzzyGwEui'),
  fuzzyCity?: string(name='FuzzyCity'),
  fuzzyName?: string(name='FuzzyName'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  isEnabled?: boolean(name='IsEnabled'),
}

model CountGatewaysResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: CountGatewaysResponseBody(name='body'),
}

async function countGatewaysWithOptions(request: CountGatewaysRequest, runtime: Util.RuntimeOptions): CountGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["OnlineState"] = request.onlineState;
  query["FuzzyGwEui"] = request.fuzzyGwEui;
  query["FuzzyCity"] = request.fuzzyCity;
  query["FuzzyName"] = request.fuzzyName;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["IsEnabled"] = request.isEnabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountGateways',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countGateways(request: CountGatewaysRequest): CountGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return countGatewaysWithOptions(request, runtime);
}

model CountGatewayTupleOrdersRequest {
  states?: [ string ](name='States'),
}

model CountGatewayTupleOrdersResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountGatewayTupleOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: CountGatewayTupleOrdersResponseBody(name='body'),
}

async function countGatewayTupleOrdersWithOptions(request: CountGatewayTupleOrdersRequest, runtime: Util.RuntimeOptions): CountGatewayTupleOrdersResponse {
  Util.validateModel(request);
  var query = {};
  query["States"] = request.states;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountGatewayTupleOrders',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countGatewayTupleOrders(request: CountGatewayTupleOrdersRequest): CountGatewayTupleOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return countGatewayTupleOrdersWithOptions(request, runtime);
}

model CountNodeGroupsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  fuzzyName?: string(name='FuzzyName'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
}

model CountNodeGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountNodeGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: CountNodeGroupsResponseBody(name='body'),
}

async function countNodeGroupsWithOptions(request: CountNodeGroupsRequest, runtime: Util.RuntimeOptions): CountNodeGroupsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["FuzzyName"] = request.fuzzyName;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountNodeGroups',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countNodeGroups(request: CountNodeGroupsRequest): CountNodeGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countNodeGroupsWithOptions(request, runtime);
}

model CountNodesByNodeGroupIdRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
}

model CountNodesByNodeGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountNodesByNodeGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: CountNodesByNodeGroupIdResponseBody(name='body'),
}

async function countNodesByNodeGroupIdWithOptions(request: CountNodesByNodeGroupIdRequest, runtime: Util.RuntimeOptions): CountNodesByNodeGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountNodesByNodeGroupId',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countNodesByNodeGroupId(request: CountNodesByNodeGroupIdRequest): CountNodesByNodeGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return countNodesByNodeGroupIdWithOptions(request, runtime);
}

model CountNodesByOwnedJoinPermissionIdRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
}

model CountNodesByOwnedJoinPermissionIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountNodesByOwnedJoinPermissionIdResponse = {
  headers: map[string]string(name='headers'),
  body: CountNodesByOwnedJoinPermissionIdResponseBody(name='body'),
}

async function countNodesByOwnedJoinPermissionIdWithOptions(request: CountNodesByOwnedJoinPermissionIdRequest, runtime: Util.RuntimeOptions): CountNodesByOwnedJoinPermissionIdResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountNodesByOwnedJoinPermissionId',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countNodesByOwnedJoinPermissionId(request: CountNodesByOwnedJoinPermissionIdRequest): CountNodesByOwnedJoinPermissionIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return countNodesByOwnedJoinPermissionIdWithOptions(request, runtime);
}

model CountNodeTupleOrdersRequest {
  isKpm?: boolean(name='IsKpm'),
  states?: [ string ](name='States'),
}

model CountNodeTupleOrdersResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountNodeTupleOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: CountNodeTupleOrdersResponseBody(name='body'),
}

async function countNodeTupleOrdersWithOptions(request: CountNodeTupleOrdersRequest, runtime: Util.RuntimeOptions): CountNodeTupleOrdersResponse {
  Util.validateModel(request);
  var query = {};
  query["IsKpm"] = request.isKpm;
  query["States"] = request.states;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountNodeTupleOrders',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countNodeTupleOrders(request: CountNodeTupleOrdersRequest): CountNodeTupleOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return countNodeTupleOrdersWithOptions(request, runtime);
}

model CountNotificationsRequest {
  handleState?: string(name='HandleState'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  category?: [ string ](name='Category'),
}

model CountNotificationsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountNotificationsResponse = {
  headers: map[string]string(name='headers'),
  body: CountNotificationsResponseBody(name='body'),
}

async function countNotificationsWithOptions(request: CountNotificationsRequest, runtime: Util.RuntimeOptions): CountNotificationsResponse {
  Util.validateModel(request);
  var query = {};
  query["HandleState"] = request.handleState;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["Category"] = request.category;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountNotifications',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countNotifications(request: CountNotificationsRequest): CountNotificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countNotificationsWithOptions(request, runtime);
}

model CountOwnedJoinPermissionsRequest {
  fuzzyRenterAliyunId?: string(name='FuzzyRenterAliyunId'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  enabled?: boolean(name='Enabled'),
  fuzzyJoinPermissionName?: string(name='FuzzyJoinPermissionName'),
}

model CountOwnedJoinPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountOwnedJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: CountOwnedJoinPermissionsResponseBody(name='body'),
}

async function countOwnedJoinPermissionsWithOptions(request: CountOwnedJoinPermissionsRequest, runtime: Util.RuntimeOptions): CountOwnedJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  query["FuzzyRenterAliyunId"] = request.fuzzyRenterAliyunId;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["Enabled"] = request.enabled;
  query["FuzzyJoinPermissionName"] = request.fuzzyJoinPermissionName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountOwnedJoinPermissions',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countOwnedJoinPermissions(request: CountOwnedJoinPermissionsRequest): CountOwnedJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countOwnedJoinPermissionsWithOptions(request, runtime);
}

model CountRentedJoinPermissionsRequest {
  fuzzyOwnerAliyunId?: string(name='FuzzyOwnerAliyunId'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  enabled?: boolean(name='Enabled'),
  boundNodeGroup?: boolean(name='BoundNodeGroup'),
  type?: string(name='Type'),
  fuzzyJoinPermissionName?: string(name='FuzzyJoinPermissionName'),
}

model CountRentedJoinPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model CountRentedJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: CountRentedJoinPermissionsResponseBody(name='body'),
}

async function countRentedJoinPermissionsWithOptions(request: CountRentedJoinPermissionsRequest, runtime: Util.RuntimeOptions): CountRentedJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  query["FuzzyOwnerAliyunId"] = request.fuzzyOwnerAliyunId;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["Enabled"] = request.enabled;
  query["BoundNodeGroup"] = request.boundNodeGroup;
  query["Type"] = request.type;
  query["FuzzyJoinPermissionName"] = request.fuzzyJoinPermissionName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CountRentedJoinPermissions',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function countRentedJoinPermissions(request: CountRentedJoinPermissionsRequest): CountRentedJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return countRentedJoinPermissionsWithOptions(request, runtime);
}

model CreateCustomLocalJoinPermissionRequest {
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  classMode?: string(name='ClassMode'),
  joinEui?: string(name='JoinEui'),
  joinPermissionName?: string(name='JoinPermissionName'),
}

model CreateCustomLocalJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model CreateCustomLocalJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCustomLocalJoinPermissionResponseBody(name='body'),
}

async function createCustomLocalJoinPermissionWithOptions(request: CreateCustomLocalJoinPermissionRequest, runtime: Util.RuntimeOptions): CreateCustomLocalJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["ClassMode"] = request.classMode;
  query["JoinEui"] = request.joinEui;
  query["JoinPermissionName"] = request.joinPermissionName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomLocalJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCustomLocalJoinPermission(request: CreateCustomLocalJoinPermissionRequest): CreateCustomLocalJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomLocalJoinPermissionWithOptions(request, runtime);
}

model CreateGatewayRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  pinCode?: string(name='PinCode'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  communicationMode?: string(name='CommunicationMode'),
  city?: string(name='City'),
  district?: string(name='District'),
  address?: string(name='Address'),
  gisCoordinateSystem?: string(name='GisCoordinateSystem'),
  longitude?: float(name='Longitude'),
  latitude?: float(name='Latitude'),
  addressCode?: long(name='AddressCode'),
}

model CreateGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGatewayResponseBody(name='body'),
}

async function createGatewayWithOptions(request: CreateGatewayRequest, runtime: Util.RuntimeOptions): CreateGatewayResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["PinCode"] = request.pinCode;
  query["Name"] = request.name;
  query["Description"] = request.description;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["CommunicationMode"] = request.communicationMode;
  query["City"] = request.city;
  query["District"] = request.district;
  query["Address"] = request.address;
  query["GisCoordinateSystem"] = request.gisCoordinateSystem;
  query["Longitude"] = request.longitude;
  query["Latitude"] = request.latitude;
  query["AddressCode"] = request.addressCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateGateway',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createGateway(request: CreateGatewayRequest): CreateGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGatewayWithOptions(request, runtime);
}

model CreateLocalJoinPermissionRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  classMode?: string(name='ClassMode'),
  useDefaultJoinEui?: boolean(name='UseDefaultJoinEui'),
  joinPermissionName?: string(name='JoinPermissionName'),
  rxDelay?: long(name='RxDelay'),
  dataRate?: long(name='DataRate'),
  joinEui?: string(name='JoinEui'),
}

model CreateLocalJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model CreateLocalJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateLocalJoinPermissionResponseBody(name='body'),
}

async function createLocalJoinPermissionWithOptions(request: CreateLocalJoinPermissionRequest, runtime: Util.RuntimeOptions): CreateLocalJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["ClassMode"] = request.classMode;
  query["UseDefaultJoinEui"] = request.useDefaultJoinEui;
  query["JoinPermissionName"] = request.joinPermissionName;
  query["RxDelay"] = request.rxDelay;
  query["DataRate"] = request.dataRate;
  query["JoinEui"] = request.joinEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateLocalJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createLocalJoinPermission(request: CreateLocalJoinPermissionRequest): CreateLocalJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLocalJoinPermissionWithOptions(request, runtime);
}

model CreateNodeGroupRequest {
  nodeGroupName?: string(name='NodeGroupName'),
  joinPermissionId?: string(name='JoinPermissionId'),
}

model CreateNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model CreateNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNodeGroupResponseBody(name='body'),
}

async function createNodeGroupWithOptions(request: CreateNodeGroupRequest, runtime: Util.RuntimeOptions): CreateNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupName"] = request.nodeGroupName;
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNodeGroup(request: CreateNodeGroupRequest): CreateNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNodeGroupWithOptions(request, runtime);
}

model DeleteGatewayRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
}

model DeleteGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGatewayResponseBody(name='body'),
}

async function deleteGatewayWithOptions(request: DeleteGatewayRequest, runtime: Util.RuntimeOptions): DeleteGatewayResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGateway',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteGateway(request: DeleteGatewayRequest): DeleteGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGatewayWithOptions(request, runtime);
}

model DeleteLocalJoinPermissionRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  joinPermissionId?: string(name='JoinPermissionId'),
}

model DeleteLocalJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteLocalJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLocalJoinPermissionResponseBody(name='body'),
}

async function deleteLocalJoinPermissionWithOptions(request: DeleteLocalJoinPermissionRequest, runtime: Util.RuntimeOptions): DeleteLocalJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteLocalJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteLocalJoinPermission(request: DeleteLocalJoinPermissionRequest): DeleteLocalJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLocalJoinPermissionWithOptions(request, runtime);
}

model DeleteNodeGroupRequest {
  nodeGroupId?: string(name='NodeGroupId'),
}

model DeleteNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodeGroupResponseBody(name='body'),
}

async function deleteNodeGroupWithOptions(request: DeleteNodeGroupRequest, runtime: Util.RuntimeOptions): DeleteNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNodeGroup(request: DeleteNodeGroupRequest): DeleteNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodeGroupWithOptions(request, runtime);
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(runtime);
}

model GetFreqBandPlanGroupRequest {
  groupId?: long(name='GroupId'),
}

model GetFreqBandPlanGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    endFrequency?: long(name='EndFrequency'),
    groupId?: long(name='GroupId'),
    beginFrequency?: long(name='BeginFrequency'),
    frequencyType?: string(name='FrequencyType'),
    frequencyRegionId?: string(name='FrequencyRegionId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetFreqBandPlanGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetFreqBandPlanGroupResponseBody(name='body'),
}

async function getFreqBandPlanGroupWithOptions(request: GetFreqBandPlanGroupRequest, runtime: Util.RuntimeOptions): GetFreqBandPlanGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["GroupId"] = request.groupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetFreqBandPlanGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getFreqBandPlanGroup(request: GetFreqBandPlanGroupRequest): GetFreqBandPlanGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFreqBandPlanGroupWithOptions(request, runtime);
}

model GetGatewayRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
}

model GetGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    chargeStatus?: string(name='ChargeStatus'),
    classBSupported?: boolean(name='ClassBSupported'),
    district?: string(name='District'),
    freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
    gisCoordinateSystem?: string(name='GisCoordinateSystem'),
    city?: string(name='City'),
    onlineState?: string(name='OnlineState'),
    timeCorrectable?: boolean(name='TimeCorrectable'),
    authTypes?: string(name='AuthTypes'),
    onlineStateChangedMillis?: long(name='OnlineStateChangedMillis'),
    communicationMode?: string(name='CommunicationMode'),
    description?: string(name='Description'),
    enabled?: boolean(name='Enabled'),
    classBWorking?: boolean(name='ClassBWorking'),
    address?: string(name='Address'),
    longitude?: float(name='Longitude'),
    embeddedNsId?: string(name='EmbeddedNsId'),
    latitude?: float(name='Latitude'),
    name?: string(name='Name'),
    gwEui?: string(name='GwEui'),
    addressCode?: long(name='AddressCode'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayResponseBody(name='body'),
}

async function getGatewayWithOptions(request: GetGatewayRequest, runtime: Util.RuntimeOptions): GetGatewayResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGateway',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGateway(request: GetGatewayRequest): GetGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayWithOptions(request, runtime);
}

model GetGatewayPacketStatRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
}

model GetGatewayPacketStatResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    downlinkValid?: int32(name='DownlinkValid'),
    downlinkInvalid?: int32(name='DownlinkInvalid'),
    uplinkInvalid?: int32(name='UplinkInvalid'),
    uplinkValid?: int32(name='UplinkValid'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayPacketStatResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayPacketStatResponseBody(name='body'),
}

async function getGatewayPacketStatWithOptions(request: GetGatewayPacketStatRequest, runtime: Util.RuntimeOptions): GetGatewayPacketStatResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayPacketStat',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayPacketStat(request: GetGatewayPacketStatRequest): GetGatewayPacketStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayPacketStatWithOptions(request, runtime);
}

model GetGatewayStatusStatRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
}

model GetGatewayStatusStatResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    memoryRadio?: float(name='MemoryRadio'),
    onlineHour?: long(name='OnlineHour'),
    enabled?: boolean(name='Enabled'),
    txCount?: long(name='TxCount'),
    rxCount?: long(name='RxCount'),
    gwEui?: string(name='GwEui'),
    onlineState?: string(name='OnlineState'),
    cpuRadio?: float(name='CpuRadio'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayStatusStatResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayStatusStatResponseBody(name='body'),
}

async function getGatewayStatusStatWithOptions(request: GetGatewayStatusStatRequest, runtime: Util.RuntimeOptions): GetGatewayStatusStatResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayStatusStat',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayStatusStat(request: GetGatewayStatusStatRequest): GetGatewayStatusStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayStatusStatWithOptions(request, runtime);
}

model GetGatewayTransferPacketsDownloadUrlRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model GetGatewayTransferPacketsDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayTransferPacketsDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayTransferPacketsDownloadUrlResponseBody(name='body'),
}

async function getGatewayTransferPacketsDownloadUrlWithOptions(request: GetGatewayTransferPacketsDownloadUrlRequest, runtime: Util.RuntimeOptions): GetGatewayTransferPacketsDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayTransferPacketsDownloadUrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayTransferPacketsDownloadUrl(request: GetGatewayTransferPacketsDownloadUrlRequest): GetGatewayTransferPacketsDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayTransferPacketsDownloadUrlWithOptions(request, runtime);
}

model GetGatewayTupleOrderRequest {
  orderId?: string(name='OrderId'),
}

model GetGatewayTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    requiredCount?: long(name='RequiredCount'),
    createdMillis?: long(name='CreatedMillis'),
    acceptedMillis?: long(name='AcceptedMillis'),
    orderState?: string(name='OrderState'),
    orderId?: string(name='OrderId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayTupleOrderResponseBody(name='body'),
}

async function getGatewayTupleOrderWithOptions(request: GetGatewayTupleOrderRequest, runtime: Util.RuntimeOptions): GetGatewayTupleOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayTupleOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayTupleOrder(request: GetGatewayTupleOrderRequest): GetGatewayTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayTupleOrderWithOptions(request, runtime);
}

model GetGatewayTuplesDownloadUrlRequest {
  orderId?: string(name='OrderId'),
}

model GetGatewayTuplesDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model GetGatewayTuplesDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetGatewayTuplesDownloadUrlResponseBody(name='body'),
}

async function getGatewayTuplesDownloadUrlWithOptions(request: GetGatewayTuplesDownloadUrlRequest, runtime: Util.RuntimeOptions): GetGatewayTuplesDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetGatewayTuplesDownloadUrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getGatewayTuplesDownloadUrl(request: GetGatewayTuplesDownloadUrlRequest): GetGatewayTuplesDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGatewayTuplesDownloadUrlWithOptions(request, runtime);
}

model GetJoinPermissionAuthOrderRequest {
  orderId?: string(name='OrderId'),
}

model GetJoinPermissionAuthOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    canceledMillis?: long(name='CanceledMillis'),
    applyingMillis?: long(name='ApplyingMillis'),
    renterAliyunId?: string(name='RenterAliyunId'),
    acceptedMillis?: long(name='AcceptedMillis'),
    ownerAliyunId?: string(name='OwnerAliyunId'),
    rejectedMillis?: long(name='RejectedMillis'),
    joinPermissionId?: string(name='JoinPermissionId'),
    orderState?: string(name='OrderState'),
    orderId?: string(name='OrderId'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetJoinPermissionAuthOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetJoinPermissionAuthOrderResponseBody(name='body'),
}

async function getJoinPermissionAuthOrderWithOptions(request: GetJoinPermissionAuthOrderRequest, runtime: Util.RuntimeOptions): GetJoinPermissionAuthOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetJoinPermissionAuthOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getJoinPermissionAuthOrder(request: GetJoinPermissionAuthOrderRequest): GetJoinPermissionAuthOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getJoinPermissionAuthOrderWithOptions(request, runtime);
}

model GetLocalConfigSyncTaskRequest {
  taskId?: long(name='TaskId'),
}

model GetLocalConfigSyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    d2dAddr?: string(name='D2dAddr'),
    state?: string(name='State'),
    processingMillis?: long(name='ProcessingMillis'),
    d2dKey?: string(name='D2dKey'),
    taskTYpe?: string(name='TaskTYpe'),
    eui?: string(name='Eui'),
    datr?: int32(name='Datr'),
    modifiedMillis?: long(name='ModifiedMillis'),
    createMillis?: long(name='CreateMillis'),
    id?: long(name='Id'),
    freq?: int32(name='Freq'),
    devType?: string(name='DevType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetLocalConfigSyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetLocalConfigSyncTaskResponseBody(name='body'),
}

async function getLocalConfigSyncTaskWithOptions(request: GetLocalConfigSyncTaskRequest, runtime: Util.RuntimeOptions): GetLocalConfigSyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["TaskId"] = request.taskId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetLocalConfigSyncTask',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getLocalConfigSyncTask(request: GetLocalConfigSyncTaskRequest): GetLocalConfigSyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getLocalConfigSyncTaskWithOptions(request, runtime);
}

model GetNodeRequest {
  devEui?: string(name='DevEui'),
}

model GetNodeResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    devAddr?: string(name='DevAddr'),
    lastJoinMillis?: long(name='LastJoinMillis'),
    devEui?: string(name='DevEui'),
    boundMillis?: long(name='BoundMillis'),
    classMode?: string(name='ClassMode'),
    authTypes?: string(name='AuthTypes'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeResponseBody(name='body'),
}

async function getNodeWithOptions(request: GetNodeRequest, runtime: Util.RuntimeOptions): GetNodeResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNode',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNode(request: GetNodeRequest): GetNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeWithOptions(request, runtime);
}

model GetNodeGroupRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model GetNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    rxMonthSum?: long(name='RxMonthSum'),
    dataDispatchConfig?: {
      iotProduct?: {
        productKey?: string(name='ProductKey'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        debugSwitch?: boolean(name='DebugSwitch'),
      }(name='IotProduct'),
      destination?: string(name='Destination'),
      onsTopics?: {
        uplinkTopic?: string(name='UplinkTopic'),
        downlinkTopic?: string(name='DownlinkTopic'),
        uplinkRegionName?: string(name='UplinkRegionName'),
        downlinkRegionName?: string(name='DownlinkRegionName'),
      }(name='OnsTopics'),
    }(name='DataDispatchConfig'),
    nodeGroupName?: string(name='NodeGroupName'),
    joinPermissionOwnerAliyunId?: string(name='JoinPermissionOwnerAliyunId'),
    multicastNodeCapacity?: int32(name='MulticastNodeCapacity'),
    txMonthSum?: long(name='TxMonthSum'),
    multicastEnabled?: boolean(name='MulticastEnabled'),
    freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
    txDailySum?: long(name='TxDailySum'),
    joinPermissionEnabled?: boolean(name='JoinPermissionEnabled'),
    joinPermissionId?: string(name='JoinPermissionId'),
    classMode?: string(name='ClassMode'),
    nodeGroupId?: string(name='NodeGroupId'),
    multicastNodeCount?: int32(name='MulticastNodeCount'),
    dataDispatchEnabled?: boolean(name='DataDispatchEnabled'),
    locks?: [ 
      {
        lockId?: string(name='LockId'),
        lockType?: string(name='LockType'),
        createMillis?: long(name='CreateMillis'),
        enabled?: boolean(name='Enabled'),
      }
    ](name='Locks'),
    multicastGroupId?: string(name='MulticastGroupId'),
    rxDailySum?: string(name='RxDailySum'),
    joinEui?: string(name='JoinEui'),
    createMillis?: long(name='CreateMillis'),
    joinPermissionType?: string(name='JoinPermissionType'),
    nodesCnt?: long(name='NodesCnt'),
    joinPermissionName?: string(name='JoinPermissionName'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeGroupResponseBody(name='body'),
}

async function getNodeGroupWithOptions(request: GetNodeGroupRequest, runtime: Util.RuntimeOptions): GetNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["NodeGroupId"] = request.nodeGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeGroup(request: GetNodeGroupRequest): GetNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeGroupWithOptions(request, runtime);
}

model GetNodeGroupTransferPacketsDownloadUrlRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  nodeGroupId?: string(name='NodeGroupId'),
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model GetNodeGroupTransferPacketsDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeGroupTransferPacketsDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeGroupTransferPacketsDownloadUrlResponseBody(name='body'),
}

async function getNodeGroupTransferPacketsDownloadUrlWithOptions(request: GetNodeGroupTransferPacketsDownloadUrlRequest, runtime: Util.RuntimeOptions): GetNodeGroupTransferPacketsDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["NodeGroupId"] = request.nodeGroupId;
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeGroupTransferPacketsDownloadUrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeGroupTransferPacketsDownloadUrl(request: GetNodeGroupTransferPacketsDownloadUrlRequest): GetNodeGroupTransferPacketsDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeGroupTransferPacketsDownloadUrlWithOptions(request, runtime);
}

model GetNodeLocalConfigRequest {
  devEui?: string(name='DevEui'),
}

model GetNodeLocalConfigResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    datr?: int32(name='Datr'),
    d2dAddr?: string(name='D2dAddr'),
    modifiedMillis?: long(name='ModifiedMillis'),
    createMillis?: long(name='CreateMillis'),
    d2dKey?: string(name='D2dKey'),
    taskId?: long(name='TaskId'),
    eui?: string(name='Eui'),
    freq?: int32(name='Freq'),
    devType?: string(name='DevType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetNodeLocalConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeLocalConfigResponseBody(name='body'),
}

async function getNodeLocalConfigWithOptions(request: GetNodeLocalConfigRequest, runtime: Util.RuntimeOptions): GetNodeLocalConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeLocalConfig',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeLocalConfig(request: GetNodeLocalConfigRequest): GetNodeLocalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeLocalConfigWithOptions(request, runtime);
}

model GetNodeTransferPacketRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  devEui?: string(name='DevEui'),
  base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
  logMillis?: long(name='LogMillis'),
}

model GetNodeTransferPacketResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    logMillis?: long(name='LogMillis'),
    gwOwnerAliyunId?: string(name='GwOwnerAliyunId'),
    base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
    processEvent?: string(name='ProcessEvent'),
    FPort?: int32(name='FPort'),
    lsnr?: float(name='Lsnr'),
    freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
    hasData?: boolean(name='HasData'),
    classMode?: string(name='ClassMode'),
    macPayloadSize?: int32(name='MacPayloadSize'),
    datr?: string(name='Datr'),
    messageType?: string(name='MessageType'),
    devAddr?: string(name='DevAddr'),
    devEui?: string(name='DevEui'),
    macCommandCIDs?: [  map[string]any ](name='MacCommandCIDs'),
    gwEui?: string(name='GwEui'),
    rssi?: int32(name='Rssi'),
    hasMacCommand?: boolean(name='HasMacCommand'),
    freq?: float(name='Freq'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeTransferPacketResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeTransferPacketResponseBody(name='body'),
}

async function getNodeTransferPacketWithOptions(request: GetNodeTransferPacketRequest, runtime: Util.RuntimeOptions): GetNodeTransferPacketResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["DevEui"] = request.devEui;
  query["Base64EncodedMacPayload"] = request.base64EncodedMacPayload;
  query["LogMillis"] = request.logMillis;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTransferPacket',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeTransferPacket(request: GetNodeTransferPacketRequest): GetNodeTransferPacketResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTransferPacketWithOptions(request, runtime);
}

model GetNodeTransferPacketsDownloadUrlRequest {
  gwEui?: string(name='GwEui'),
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model GetNodeTransferPacketsDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeTransferPacketsDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeTransferPacketsDownloadUrlResponseBody(name='body'),
}

async function getNodeTransferPacketsDownloadUrlWithOptions(request: GetNodeTransferPacketsDownloadUrlRequest, runtime: Util.RuntimeOptions): GetNodeTransferPacketsDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["GwEui"] = request.gwEui;
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTransferPacketsDownloadUrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeTransferPacketsDownloadUrl(request: GetNodeTransferPacketsDownloadUrlRequest): GetNodeTransferPacketsDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTransferPacketsDownloadUrlWithOptions(request, runtime);
}

model GetNodeTupleOrderRequest {
  orderId?: string(name='OrderId'),
}

model GetNodeTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    requiredCount?: long(name='RequiredCount'),
    createdMillis?: long(name='CreatedMillis'),
    isKpm?: boolean(name='IsKpm'),
    acceptedMillis?: long(name='AcceptedMillis'),
    orderId?: string(name='OrderId'),
    orderState?: string(name='OrderState'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeTupleOrderResponseBody(name='body'),
}

async function getNodeTupleOrderWithOptions(request: GetNodeTupleOrderRequest, runtime: Util.RuntimeOptions): GetNodeTupleOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTupleOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeTupleOrder(request: GetNodeTupleOrderRequest): GetNodeTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTupleOrderWithOptions(request, runtime);
}

model GetNodeTuplesDownloadUrlRequest {
  orderId?: string(name='OrderId'),
}

model GetNodeTuplesDownloadUrlResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model GetNodeTuplesDownloadUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetNodeTuplesDownloadUrlResponseBody(name='body'),
}

async function getNodeTuplesDownloadUrlWithOptions(request: GetNodeTuplesDownloadUrlRequest, runtime: Util.RuntimeOptions): GetNodeTuplesDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNodeTuplesDownloadUrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNodeTuplesDownloadUrl(request: GetNodeTuplesDownloadUrlRequest): GetNodeTuplesDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNodeTuplesDownloadUrlWithOptions(request, runtime);
}

model GetNotificationRequest {
  notificationId?: string(name='NotificationId'),
}

model GetNotificationResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    noticeMillis?: long(name='NoticeMillis'),
    handleState?: string(name='HandleState'),
    notificationId?: string(name='NotificationId'),
    joinPermissionAuthInfo?: {
      canceledMillis?: long(name='CanceledMillis'),
      applyingMillis?: long(name='ApplyingMillis'),
      joinEui?: string(name='JoinEui'),
      renterAliyunId?: string(name='RenterAliyunId'),
      acceptedMillis?: long(name='AcceptedMillis'),
      ownerAliyunId?: string(name='OwnerAliyunId'),
      rejectedMillis?: long(name='RejectedMillis'),
      joinPermissionId?: string(name='JoinPermissionId'),
      joinPermissionName?: string(name='JoinPermissionName'),
      orderState?: string(name='OrderState'),
      orderId?: string(name='OrderId'),
    }(name='JoinPermissionAuthInfo'),
    gatewayOfflineInfo?: {
      offlineMillis?: long(name='OfflineMillis'),
      gwEui?: string(name='GwEui'),
    }(name='GatewayOfflineInfo'),
    category?: string(name='Category'),
    handledMillis?: long(name='HandledMillis'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: GetNotificationResponseBody(name='body'),
}

async function getNotificationWithOptions(request: GetNotificationRequest, runtime: Util.RuntimeOptions): GetNotificationResponse {
  Util.validateModel(request);
  var query = {};
  query["NotificationId"] = request.notificationId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetNotification',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getNotification(request: GetNotificationRequest): GetNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNotificationWithOptions(request, runtime);
}

model GetOwnedJoinPermissionRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  joinPermissionId?: string(name='JoinPermissionId'),
}

model GetOwnedJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    rxMonthSum?: long(name='RxMonthSum'),
    multicastNodeCapacity?: int32(name='MulticastNodeCapacity'),
    txMonthSum?: long(name='TxMonthSum'),
    multicastEnabled?: boolean(name='MulticastEnabled'),
    freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
    txDailySum?: long(name='TxDailySum'),
    boundProductName?: string(name='BoundProductName'),
    dataRate?: long(name='DataRate'),
    joinPermissionId?: string(name='JoinPermissionId'),
    classMode?: string(name='ClassMode'),
    dataDispatchDestination?: string(name='DataDispatchDestination'),
    multicastNodeCount?: int32(name='MulticastNodeCount'),
    rxDailySum?: long(name='RxDailySum'),
    joinEui?: string(name='JoinEui'),
    createMillis?: long(name='CreateMillis'),
    enabled?: boolean(name='Enabled'),
    rxDelay?: long(name='RxDelay'),
    renterAliyunId?: string(name='RenterAliyunId'),
    nodesCnt?: long(name='NodesCnt'),
    joinPermissionName?: string(name='JoinPermissionName'),
    authState?: string(name='AuthState'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetOwnedJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GetOwnedJoinPermissionResponseBody(name='body'),
}

async function getOwnedJoinPermissionWithOptions(request: GetOwnedJoinPermissionRequest, runtime: Util.RuntimeOptions): GetOwnedJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetOwnedJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOwnedJoinPermission(request: GetOwnedJoinPermissionRequest): GetOwnedJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOwnedJoinPermissionWithOptions(request, runtime);
}

model GetRentedJoinPermissionRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
}

model GetRentedJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    type?: string(name='Type'),
    rxMonthSum?: long(name='RxMonthSum'),
    boundNodeGroupName?: string(name='BoundNodeGroupName'),
    txMonthSum?: long(name='TxMonthSum'),
    freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
    txDailySum?: long(name='TxDailySum'),
    dataRate?: long(name='DataRate'),
    joinPermissionId?: string(name='JoinPermissionId'),
    classMode?: string(name='ClassMode'),
    rxDailySum?: long(name='RxDailySum'),
    joinEui?: string(name='JoinEui'),
    createMillis?: long(name='CreateMillis'),
    enabled?: boolean(name='Enabled'),
    rxDelay?: long(name='RxDelay'),
    boundNodeGroupId?: string(name='BoundNodeGroupId'),
    nodesCnt?: long(name='NodesCnt'),
    joinPermissionName?: string(name='JoinPermissionName'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetRentedJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: GetRentedJoinPermissionResponseBody(name='body'),
}

async function getRentedJoinPermissionWithOptions(request: GetRentedJoinPermissionRequest, runtime: Util.RuntimeOptions): GetRentedJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetRentedJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRentedJoinPermission(request: GetRentedJoinPermissionRequest): GetRentedJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRentedJoinPermissionWithOptions(request, runtime);
}

model GetUserLicenseResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    roamingJoinPermissionCount?: long(name='RoamingJoinPermissionCount'),
    gatewayTupleCount?: long(name='GatewayTupleCount'),
    gatewayTupleSingleChannelCount?: long(name='GatewayTupleSingleChannelCount'),
    gatewayFreeLimit?: long(name='GatewayFreeLimit'),
    nodeTupleFreeLimit?: long(name='NodeTupleFreeLimit'),
    nodeFreeLimit?: long(name='NodeFreeLimit'),
    gatewayTupleHybridLimit?: long(name='GatewayTupleHybridLimit'),
    gatewayTupleStandardCount?: long(name='GatewayTupleStandardCount'),
    gatewayTupleFreeLimit?: long(name='GatewayTupleFreeLimit'),
    gatewayCount?: long(name='GatewayCount'),
    nodeTupleRelayLimit?: long(name='NodeTupleRelayLimit'),
    gatewayTupleLimit?: long(name='GatewayTupleLimit'),
    gatewayLimit?: long(name='GatewayLimit'),
    nodeLimit?: long(name='NodeLimit'),
    localJoinPermissionFreeLimit?: long(name='LocalJoinPermissionFreeLimit'),
    roamingJoinPermissionLimit?: long(name='RoamingJoinPermissionLimit'),
    gatewayTupleSingleChannelLimit?: long(name='GatewayTupleSingleChannelLimit'),
    oui?: string(name='Oui'),
    localJoinPermissionLimit?: long(name='LocalJoinPermissionLimit'),
    relayLimit?: long(name='RelayLimit'),
    gatewayTupleHybridCount?: long(name='GatewayTupleHybridCount'),
    localJoinPermissionCount?: long(name='LocalJoinPermissionCount'),
    nodeTupleStandardCount?: long(name='NodeTupleStandardCount'),
    nodeTupleCount?: long(name='NodeTupleCount'),
    gatewayDingTalkLimit?: long(name='GatewayDingTalkLimit'),
    gatewayProfessionalLimit?: long(name='GatewayProfessionalLimit'),
    gatewayProfessionalCount?: long(name='GatewayProfessionalCount'),
    relayCount?: long(name='RelayCount'),
    nodeTupleStandardLimit?: long(name='NodeTupleStandardLimit'),
    roamingJoinPermissionFreeLimit?: long(name='RoamingJoinPermissionFreeLimit'),
    nodeTupleLimit?: long(name='NodeTupleLimit'),
    nodeCount?: long(name='NodeCount'),
    gatewayDingTalkCount?: long(name='GatewayDingTalkCount'),
    gatewayTupleStandardLimit?: long(name='GatewayTupleStandardLimit'),
    gatewayPrePayCount?: long(name='GatewayPrePayCount'),
    nodeTupleRelayCount?: long(name='NodeTupleRelayCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model GetUserLicenseResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserLicenseResponseBody(name='body'),
}

async function getUserLicenseWithOptions(runtime: Util.RuntimeOptions): GetUserLicenseResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetUserLicense',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserLicense(): GetUserLicenseResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserLicenseWithOptions(runtime);
}

model GetUserNetProfileDescriptionResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    isolated?: boolean(name='Isolated'),
    isoUpdatedRemainingSec?: long(name='IsoUpdatedRemainingSec'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model GetUserNetProfileDescriptionResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserNetProfileDescriptionResponseBody(name='body'),
}

async function getUserNetProfileDescriptionWithOptions(runtime: Util.RuntimeOptions): GetUserNetProfileDescriptionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetUserNetProfileDescription',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUserNetProfileDescription(): GetUserNetProfileDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUserNetProfileDescriptionWithOptions(runtime);
}

model ListActivatedFeaturesRequest {
  environment?: string(name='Environment'),
}

model ListActivatedFeaturesResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ string ](name='Data'),
  success?: boolean(name='Success'),
}

model ListActivatedFeaturesResponse = {
  headers: map[string]string(name='headers'),
  body: ListActivatedFeaturesResponseBody(name='body'),
}

async function listActivatedFeaturesWithOptions(request: ListActivatedFeaturesRequest, runtime: Util.RuntimeOptions): ListActivatedFeaturesResponse {
  Util.validateModel(request);
  var query = {};
  query["Environment"] = request.environment;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListActivatedFeatures',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listActivatedFeatures(request: ListActivatedFeaturesRequest): ListActivatedFeaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listActivatedFeaturesWithOptions(request, runtime);
}

model ListActiveGatewaysResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      chargeStatus?: string(name='ChargeStatus'),
      freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
      district?: string(name='District'),
      gisCoordinateSystem?: string(name='GisCoordinateSystem'),
      city?: string(name='City'),
      onlineState?: string(name='OnlineState'),
      communicationMode?: string(name='CommunicationMode'),
      description?: string(name='Description'),
      address?: string(name='Address'),
      longitude?: float(name='Longitude'),
      latitude?: float(name='Latitude'),
      gwEui?: string(name='GwEui'),
      name?: string(name='Name'),
      addressCode?: long(name='AddressCode'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListActiveGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: ListActiveGatewaysResponseBody(name='body'),
}

async function listActiveGatewaysWithOptions(runtime: Util.RuntimeOptions): ListActiveGatewaysResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListActiveGateways',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listActiveGateways(): ListActiveGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listActiveGatewaysWithOptions(runtime);
}

model ListFreqBandPlanGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      endFrequency?: long(name='EndFrequency'),
      groupId?: long(name='GroupId'),
      beginFrequency?: long(name='BeginFrequency'),
      frequencyType?: string(name='FrequencyType'),
      frequencyRegionId?: string(name='FrequencyRegionId'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListFreqBandPlanGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFreqBandPlanGroupsResponseBody(name='body'),
}

async function listFreqBandPlanGroupsWithOptions(runtime: Util.RuntimeOptions): ListFreqBandPlanGroupsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'ListFreqBandPlanGroups',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listFreqBandPlanGroups(): ListFreqBandPlanGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFreqBandPlanGroupsWithOptions(runtime);
}

model ListGatewayLocalConfigsRequest {
  gwEui?: string(name='GwEui'),
}

model ListGatewayLocalConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      datr?: int32(name='Datr'),
      d2dAddr?: string(name='D2dAddr'),
      modifiedMillis?: long(name='ModifiedMillis'),
      createMillis?: long(name='CreateMillis'),
      d2dKey?: string(name='D2dKey'),
      taskId?: long(name='TaskId'),
      eui?: string(name='Eui'),
      freq?: int32(name='Freq'),
      devType?: string(name='DevType'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListGatewayLocalConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayLocalConfigsResponseBody(name='body'),
}

async function listGatewayLocalConfigsWithOptions(request: ListGatewayLocalConfigsRequest, runtime: Util.RuntimeOptions): ListGatewayLocalConfigsResponse {
  Util.validateModel(request);
  var query = {};
  query["GwEui"] = request.gwEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayLocalConfigs',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayLocalConfigs(request: ListGatewayLocalConfigsRequest): ListGatewayLocalConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayLocalConfigsWithOptions(request, runtime);
}

model ListGatewayOnlineRecordsRequest {
  gwEui?: string(name='GwEui'),
  offSet?: long(name='OffSet'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListGatewayOnlineRecordsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        stateChangedMillis?: long(name='StateChangedMillis'),
        onlineState?: string(name='OnlineState'),
        gwEui?: string(name='GwEui'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewayOnlineRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayOnlineRecordsResponseBody(name='body'),
}

async function listGatewayOnlineRecordsWithOptions(request: ListGatewayOnlineRecordsRequest, runtime: Util.RuntimeOptions): ListGatewayOnlineRecordsResponse {
  Util.validateModel(request);
  var query = {};
  query["GwEui"] = request.gwEui;
  query["OffSet"] = request.offSet;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayOnlineRecords',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayOnlineRecords(request: ListGatewayOnlineRecordsRequest): ListGatewayOnlineRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayOnlineRecordsWithOptions(request, runtime);
}

model ListGatewaysRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  onlineState?: string(name='OnlineState'),
  fuzzyGwEui?: string(name='FuzzyGwEui'),
  fuzzyCity?: string(name='FuzzyCity'),
  fuzzyName?: string(name='FuzzyName'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  isEnabled?: boolean(name='IsEnabled'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListGatewaysResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        chargeStatus?: string(name='ChargeStatus'),
        classBSupported?: boolean(name='ClassBSupported'),
        district?: string(name='District'),
        freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
        gisCoordinateSystem?: string(name='GisCoordinateSystem'),
        city?: string(name='City'),
        onlineState?: string(name='OnlineState'),
        timeCorrectable?: boolean(name='TimeCorrectable'),
        authTypes?: string(name='AuthTypes'),
        onlineStateChangedMillis?: long(name='OnlineStateChangedMillis'),
        communicationMode?: string(name='CommunicationMode'),
        description?: string(name='Description'),
        enabled?: boolean(name='Enabled'),
        classBWorking?: boolean(name='ClassBWorking'),
        address?: string(name='Address'),
        longitude?: float(name='Longitude'),
        embeddedNsId?: string(name='EmbeddedNsId'),
        latitude?: float(name='Latitude'),
        name?: string(name='Name'),
        gwEui?: string(name='GwEui'),
        addressCode?: long(name='AddressCode'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewaysResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewaysResponseBody(name='body'),
}

async function listGatewaysWithOptions(request: ListGatewaysRequest, runtime: Util.RuntimeOptions): ListGatewaysResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["OnlineState"] = request.onlineState;
  query["FuzzyGwEui"] = request.fuzzyGwEui;
  query["FuzzyCity"] = request.fuzzyCity;
  query["FuzzyName"] = request.fuzzyName;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["IsEnabled"] = request.isEnabled;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGateways',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGateways(request: ListGatewaysRequest): ListGatewaysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewaysWithOptions(request, runtime);
}

model ListGatewaysGisInfoRequest {
  iotInstanceId?: string(name='IotInstanceId'),
}

model ListGatewaysGisInfoResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      chargeStatus?: string(name='ChargeStatus'),
      gisSourceType?: string(name='GisSourceType'),
      freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
      enabled?: boolean(name='Enabled'),
      gisCoordinateSystem?: string(name='GisCoordinateSystem'),
      longitude?: float(name='Longitude'),
      latitude?: float(name='Latitude'),
      onlineState?: string(name='OnlineState'),
      name?: string(name='Name'),
      gwEui?: string(name='GwEui'),
      authTypes?: string(name='AuthTypes'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewaysGisInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewaysGisInfoResponseBody(name='body'),
}

async function listGatewaysGisInfoWithOptions(request: ListGatewaysGisInfoRequest, runtime: Util.RuntimeOptions): ListGatewaysGisInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewaysGisInfo',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewaysGisInfo(request: ListGatewaysGisInfoRequest): ListGatewaysGisInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewaysGisInfoWithOptions(request, runtime);
}

model ListGatewaysPacketStatRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  gwEuiList?: [ string ](name='GwEuiList'),
}

model ListGatewaysPacketStatResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      downlinkCount?: int32(name='DownlinkCount'),
      uplinkCount?: int32(name='UplinkCount'),
      gwEui?: string(name='GwEui'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewaysPacketStatResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewaysPacketStatResponseBody(name='body'),
}

async function listGatewaysPacketStatWithOptions(request: ListGatewaysPacketStatRequest, runtime: Util.RuntimeOptions): ListGatewaysPacketStatResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["GwEuiList"] = request.gwEuiList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewaysPacketStat',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewaysPacketStat(request: ListGatewaysPacketStatRequest): ListGatewaysPacketStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewaysPacketStatWithOptions(request, runtime);
}

model ListGatewayTransferFlowStatsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  timeIntervalUnit?: string(name='TimeIntervalUnit'),
}

model ListGatewayTransferFlowStatsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      downlinkCount?: long(name='DownlinkCount'),
      uplinkCount?: long(name='UplinkCount'),
      statMillis?: string(name='StatMillis'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewayTransferFlowStatsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayTransferFlowStatsResponseBody(name='body'),
}

async function listGatewayTransferFlowStatsWithOptions(request: ListGatewayTransferFlowStatsRequest, runtime: Util.RuntimeOptions): ListGatewayTransferFlowStatsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["TimeIntervalUnit"] = request.timeIntervalUnit;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayTransferFlowStats',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayTransferFlowStats(request: ListGatewayTransferFlowStatsRequest): ListGatewayTransferFlowStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayTransferFlowStatsWithOptions(request, runtime);
}

model ListGatewayTransferPacketsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListGatewayTransferPacketsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        logMillis?: string(name='LogMillis'),
        base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
        processEvent?: string(name='ProcessEvent'),
        FPort?: int32(name='FPort'),
        lsnr?: float(name='Lsnr'),
        hasData?: boolean(name='HasData'),
        classMode?: string(name='ClassMode'),
        macPayloadSize?: long(name='MacPayloadSize'),
        datr?: string(name='Datr'),
        messageType?: string(name='MessageType'),
        devAddr?: string(name='DevAddr'),
        devEui?: string(name='DevEui'),
        nodeOwnerAliyunId?: string(name='NodeOwnerAliyunId'),
        macCommandCIDs?: [  map[string]any ](name='MacCommandCIDs'),
        gwEui?: string(name='GwEui'),
        rssi?: int32(name='Rssi'),
        hasMacCommand?: boolean(name='HasMacCommand'),
        freq?: string(name='Freq'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewayTransferPacketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayTransferPacketsResponseBody(name='body'),
}

async function listGatewayTransferPacketsWithOptions(request: ListGatewayTransferPacketsRequest, runtime: Util.RuntimeOptions): ListGatewayTransferPacketsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayTransferPackets',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayTransferPackets(request: ListGatewayTransferPacketsRequest): ListGatewayTransferPacketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayTransferPacketsWithOptions(request, runtime);
}

model ListGatewayTupleOrdersRequest {
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
  state?: [ string ](name='State'),
}

model ListGatewayTupleOrdersResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        requiredCount?: long(name='RequiredCount'),
        createdMillis?: long(name='CreatedMillis'),
        tupleType?: string(name='TupleType'),
        acceptedMillis?: long(name='AcceptedMillis'),
        orderId?: string(name='OrderId'),
        orderState?: string(name='OrderState'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListGatewayTupleOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListGatewayTupleOrdersResponseBody(name='body'),
}

async function listGatewayTupleOrdersWithOptions(request: ListGatewayTupleOrdersRequest, runtime: Util.RuntimeOptions): ListGatewayTupleOrdersResponse {
  Util.validateModel(request);
  var query = {};
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  query["State"] = request.state;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListGatewayTupleOrders',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGatewayTupleOrders(request: ListGatewayTupleOrdersRequest): ListGatewayTupleOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGatewayTupleOrdersWithOptions(request, runtime);
}

model ListNodeGroupsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  fuzzyName?: string(name='FuzzyName'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListNodeGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        rxMonthSum?: long(name='RxMonthSum'),
        dataDispatchConfig?: {
          iotProduct?: {
            productKey?: string(name='ProductKey'),
            productName?: string(name='ProductName'),
            productType?: string(name='ProductType'),
            debugSwitch?: boolean(name='DebugSwitch'),
          }(name='IotProduct'),
          destination?: string(name='Destination'),
          onsTopics?: {
            uplinkTopic?: string(name='UplinkTopic'),
            downlinkTopic?: string(name='DownlinkTopic'),
            uplinkRegionName?: string(name='UplinkRegionName'),
            downlinkRegionName?: string(name='DownlinkRegionName'),
          }(name='OnsTopics'),
        }(name='DataDispatchConfig'),
        nodeGroupName?: string(name='NodeGroupName'),
        joinPermissionOwnerAliyunId?: string(name='JoinPermissionOwnerAliyunId'),
        txMonthSum?: long(name='TxMonthSum'),
        freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
        txDailySum?: long(name='TxDailySum'),
        joinPermissionEnabled?: boolean(name='JoinPermissionEnabled'),
        joinPermissionId?: string(name='JoinPermissionId'),
        classMode?: string(name='ClassMode'),
        nodeGroupId?: string(name='NodeGroupId'),
        dataDispatchEnabled?: boolean(name='DataDispatchEnabled'),
        locks?: [ 
          {
            lockId?: string(name='LockId'),
            lockType?: string(name='LockType'),
            createMillis?: long(name='CreateMillis'),
            enabled?: boolean(name='Enabled'),
          }
        ](name='Locks'),
        rxDailySum?: long(name='RxDailySum'),
        joinEui?: string(name='JoinEui'),
        createMillis?: long(name='CreateMillis'),
        joinPermissionType?: string(name='JoinPermissionType'),
        nodesCnt?: long(name='NodesCnt'),
        joinPermissionName?: string(name='JoinPermissionName'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeGroupsResponseBody(name='body'),
}

async function listNodeGroupsWithOptions(request: ListNodeGroupsRequest, runtime: Util.RuntimeOptions): ListNodeGroupsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["FuzzyName"] = request.fuzzyName;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeGroups',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeGroups(request: ListNodeGroupsRequest): ListNodeGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeGroupsWithOptions(request, runtime);
}

model ListNodeGroupsPacketStatRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  nodeGroupIdList?: [ string ](name='NodeGroupIdList'),
}

model ListNodeGroupsPacketStatResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      downlinkCount?: int32(name='DownlinkCount'),
      uplinkCount?: int32(name='UplinkCount'),
      nodeGroupId?: string(name='NodeGroupId'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeGroupsPacketStatResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeGroupsPacketStatResponseBody(name='body'),
}

async function listNodeGroupsPacketStatWithOptions(request: ListNodeGroupsPacketStatRequest, runtime: Util.RuntimeOptions): ListNodeGroupsPacketStatResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["NodeGroupIdList"] = request.nodeGroupIdList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeGroupsPacketStat',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeGroupsPacketStat(request: ListNodeGroupsPacketStatRequest): ListNodeGroupsPacketStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeGroupsPacketStatWithOptions(request, runtime);
}

model ListNodeGroupTransferFlowStatsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  nodeGroupId?: string(name='NodeGroupId'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  timeIntervalUnit?: string(name='TimeIntervalUnit'),
}

model ListNodeGroupTransferFlowStatsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: [ 
    {
      downlinkCount?: long(name='DownlinkCount'),
      uplinkCount?: long(name='UplinkCount'),
      statMillis?: long(name='StatMillis'),
    }
  ](name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeGroupTransferFlowStatsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeGroupTransferFlowStatsResponseBody(name='body'),
}

async function listNodeGroupTransferFlowStatsWithOptions(request: ListNodeGroupTransferFlowStatsRequest, runtime: Util.RuntimeOptions): ListNodeGroupTransferFlowStatsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["NodeGroupId"] = request.nodeGroupId;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["TimeIntervalUnit"] = request.timeIntervalUnit;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeGroupTransferFlowStats',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeGroupTransferFlowStats(request: ListNodeGroupTransferFlowStatsRequest): ListNodeGroupTransferFlowStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeGroupTransferFlowStatsWithOptions(request, runtime);
}

model ListNodeGroupTransferPacketsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  nodeGroupId?: string(name='NodeGroupId'),
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListNodeGroupTransferPacketsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        gwOwnerAliyunId?: string(name='GwOwnerAliyunId'),
        logMillis?: long(name='LogMillis'),
        base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
        processEvent?: string(name='ProcessEvent'),
        FPort?: int32(name='FPort'),
        lsnr?: float(name='Lsnr'),
        freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
        hasData?: boolean(name='HasData'),
        fcntUp?: long(name='FcntUp'),
        classMode?: string(name='ClassMode'),
        macPayloadSize?: long(name='MacPayloadSize'),
        messageType?: string(name='MessageType'),
        datr?: string(name='Datr'),
        devAddr?: string(name='DevAddr'),
        devEui?: string(name='DevEui'),
        fcntDown?: long(name='FcntDown'),
        macCommandCIDs?: string(name='MacCommandCIDs'),
        gwEui?: string(name='GwEui'),
        rssi?: int32(name='Rssi'),
        hasMacCommand?: boolean(name='HasMacCommand'),
        freq?: float(name='Freq'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeGroupTransferPacketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeGroupTransferPacketsResponseBody(name='body'),
}

async function listNodeGroupTransferPacketsWithOptions(request: ListNodeGroupTransferPacketsRequest, runtime: Util.RuntimeOptions): ListNodeGroupTransferPacketsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["NodeGroupId"] = request.nodeGroupId;
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeGroupTransferPackets',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeGroupTransferPackets(request: ListNodeGroupTransferPacketsRequest): ListNodeGroupTransferPacketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeGroupTransferPacketsWithOptions(request, runtime);
}

model ListNodesByNodeGroupIdRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  nodeGroupId?: string(name='NodeGroupId'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListNodesByNodeGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        lastJoinMillis?: long(name='LastJoinMillis'),
        devAddr?: string(name='DevAddr'),
        multicastGroupId?: string(name='MulticastGroupId'),
        devEui?: string(name='DevEui'),
        nodeType?: string(name='NodeType'),
        joinEui?: string(name='JoinEui'),
        boundMillis?: long(name='BoundMillis'),
        classMode?: string(name='ClassMode'),
        authTypes?: string(name='AuthTypes'),
        appkey?: string(name='Appkey'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodesByNodeGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesByNodeGroupIdResponseBody(name='body'),
}

async function listNodesByNodeGroupIdWithOptions(request: ListNodesByNodeGroupIdRequest, runtime: Util.RuntimeOptions): ListNodesByNodeGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["NodeGroupId"] = request.nodeGroupId;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByNodeGroupId',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByNodeGroupId(request: ListNodesByNodeGroupIdRequest): ListNodesByNodeGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByNodeGroupIdWithOptions(request, runtime);
}

model ListNodesByOwnedJoinPermissionIdRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  joinPermissionId?: string(name='JoinPermissionId'),
  fuzzyDevEui?: string(name='FuzzyDevEui'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListNodesByOwnedJoinPermissionIdResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        lastJoinMillis?: long(name='LastJoinMillis'),
        devAddr?: string(name='DevAddr'),
        devEui?: string(name='DevEui'),
        boundMillis?: long(name='BoundMillis'),
        classMode?: string(name='ClassMode'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodesByOwnedJoinPermissionIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesByOwnedJoinPermissionIdResponseBody(name='body'),
}

async function listNodesByOwnedJoinPermissionIdWithOptions(request: ListNodesByOwnedJoinPermissionIdRequest, runtime: Util.RuntimeOptions): ListNodesByOwnedJoinPermissionIdResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["JoinPermissionId"] = request.joinPermissionId;
  query["FuzzyDevEui"] = request.fuzzyDevEui;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodesByOwnedJoinPermissionId',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodesByOwnedJoinPermissionId(request: ListNodesByOwnedJoinPermissionIdRequest): ListNodesByOwnedJoinPermissionIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodesByOwnedJoinPermissionIdWithOptions(request, runtime);
}

model ListNodeTransferPacketPathsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  devEui?: string(name='DevEui'),
  base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
  logMillis?: long(name='LogMillis'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListNodeTransferPacketPathsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        bestPath?: boolean(name='BestPath'),
        devEui?: string(name='DevEui'),
        lsnr?: float(name='Lsnr'),
        gwEui?: string(name='GwEui'),
        rssi?: int32(name='Rssi'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeTransferPacketPathsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeTransferPacketPathsResponseBody(name='body'),
}

async function listNodeTransferPacketPathsWithOptions(request: ListNodeTransferPacketPathsRequest, runtime: Util.RuntimeOptions): ListNodeTransferPacketPathsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["DevEui"] = request.devEui;
  query["Base64EncodedMacPayload"] = request.base64EncodedMacPayload;
  query["LogMillis"] = request.logMillis;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeTransferPacketPaths',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeTransferPacketPaths(request: ListNodeTransferPacketPathsRequest): ListNodeTransferPacketPathsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeTransferPacketPathsWithOptions(request, runtime);
}

model ListNodeTransferPacketsRequest {
  devEui?: string(name='DevEui'),
  category?: string(name='Category'),
  gwEui?: string(name='GwEui'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListNodeTransferPacketsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        logMillis?: long(name='LogMillis'),
        datr?: string(name='Datr'),
        snr?: float(name='Snr'),
        devEui?: string(name='DevEui'),
        gwEui?: string(name='GwEui'),
        classMode?: string(name='ClassMode'),
        rssi?: int32(name='Rssi'),
        freq?: float(name='Freq'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeTransferPacketsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeTransferPacketsResponseBody(name='body'),
}

async function listNodeTransferPacketsWithOptions(request: ListNodeTransferPacketsRequest, runtime: Util.RuntimeOptions): ListNodeTransferPacketsResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  query["Category"] = request.category;
  query["GwEui"] = request.gwEui;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeTransferPackets',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeTransferPackets(request: ListNodeTransferPacketsRequest): ListNodeTransferPacketsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeTransferPacketsWithOptions(request, runtime);
}

model ListNodeTupleOrdersRequest {
  isKpm?: boolean(name='IsKpm'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
  state?: [ string ](name='State'),
}

model ListNodeTupleOrdersResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        failedCount?: long(name='FailedCount'),
        requiredCount?: long(name='RequiredCount'),
        createdMillis?: long(name='CreatedMillis'),
        isKpm?: boolean(name='IsKpm'),
        tupleType?: string(name='TupleType'),
        acceptedMillis?: long(name='AcceptedMillis'),
        successCount?: long(name='SuccessCount'),
        loraVersion?: string(name='LoraVersion'),
        orderState?: string(name='OrderState'),
        orderId?: string(name='OrderId'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNodeTupleOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodeTupleOrdersResponseBody(name='body'),
}

async function listNodeTupleOrdersWithOptions(request: ListNodeTupleOrdersRequest, runtime: Util.RuntimeOptions): ListNodeTupleOrdersResponse {
  Util.validateModel(request);
  var query = {};
  query["IsKpm"] = request.isKpm;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  query["State"] = request.state;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNodeTupleOrders',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNodeTupleOrders(request: ListNodeTupleOrdersRequest): ListNodeTupleOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNodeTupleOrdersWithOptions(request, runtime);
}

model ListNotificationsRequest {
  handleState?: string(name='HandleState'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
  category?: [ string ](name='Category'),
}

model ListNotificationsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        noticeMillis?: long(name='NoticeMillis'),
        handleState?: string(name='HandleState'),
        notificationId?: string(name='NotificationId'),
        gatewayDataflowLimit?: {
          alarmDetail?: string(name='AlarmDetail'),
          dataflowLimitMillis?: long(name='DataflowLimitMillis'),
          gwEui?: string(name='GwEui'),
        }(name='GatewayDataflowLimit'),
        joinPermissionAuthInfo?: {
          canceledMillis?: long(name='CanceledMillis'),
          applyingMillis?: long(name='ApplyingMillis'),
          joinEui?: string(name='JoinEui'),
          renterAliyunId?: string(name='RenterAliyunId'),
          acceptedMillis?: long(name='AcceptedMillis'),
          ownerAliyunId?: string(name='OwnerAliyunId'),
          rejectedMillis?: long(name='RejectedMillis'),
          joinPermissionId?: string(name='JoinPermissionId'),
          joinPermissionName?: string(name='JoinPermissionName'),
          orderState?: string(name='OrderState'),
          orderId?: string(name='OrderId'),
        }(name='JoinPermissionAuthInfo'),
        gatewayOfflineInfo?: {
          offlineMillis?: long(name='OfflineMillis'),
          gwEui?: string(name='GwEui'),
        }(name='GatewayOfflineInfo'),
        category?: string(name='Category'),
        handledMillis?: long(name='HandledMillis'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListNotificationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListNotificationsResponseBody(name='body'),
}

async function listNotificationsWithOptions(request: ListNotificationsRequest, runtime: Util.RuntimeOptions): ListNotificationsResponse {
  Util.validateModel(request);
  var query = {};
  query["HandleState"] = request.handleState;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  query["Category"] = request.category;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListNotifications',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listNotifications(request: ListNotificationsRequest): ListNotificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listNotificationsWithOptions(request, runtime);
}

model ListOwnedJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  fuzzyRenterAliyunId?: string(name='FuzzyRenterAliyunId'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  enabled?: boolean(name='Enabled'),
  fuzzyJoinPermissionName?: string(name='FuzzyJoinPermissionName'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListOwnedJoinPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        joinEui?: string(name='JoinEui'),
        freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
        enabled?: boolean(name='Enabled'),
        rxDelay?: long(name='RxDelay'),
        renterAliyunId?: string(name='RenterAliyunId'),
        dataRate?: long(name='DataRate'),
        joinPermissionId?: string(name='JoinPermissionId'),
        joinPermissionName?: string(name='JoinPermissionName'),
        classMode?: string(name='ClassMode'),
        authState?: string(name='AuthState'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListOwnedJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListOwnedJoinPermissionsResponseBody(name='body'),
}

async function listOwnedJoinPermissionsWithOptions(request: ListOwnedJoinPermissionsRequest, runtime: Util.RuntimeOptions): ListOwnedJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["FuzzyRenterAliyunId"] = request.fuzzyRenterAliyunId;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["Enabled"] = request.enabled;
  query["FuzzyJoinPermissionName"] = request.fuzzyJoinPermissionName;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListOwnedJoinPermissions',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listOwnedJoinPermissions(request: ListOwnedJoinPermissionsRequest): ListOwnedJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listOwnedJoinPermissionsWithOptions(request, runtime);
}

model ListRentedJoinPermissionsRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  fuzzyOwnerAliyunId?: string(name='FuzzyOwnerAliyunId'),
  fuzzyJoinEui?: string(name='FuzzyJoinEui'),
  enabled?: boolean(name='Enabled'),
  boundNodeGroup?: boolean(name='BoundNodeGroup'),
  type?: string(name='Type'),
  fuzzyJoinPermissionName?: string(name='FuzzyJoinPermissionName'),
  offset?: long(name='Offset'),
  limit?: long(name='Limit'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListRentedJoinPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: [ 
      {
        type?: string(name='Type'),
        dataDispatchConfig?: {
          iotProduct?: {
            productKey?: string(name='ProductKey'),
            productName?: string(name='ProductName'),
            productType?: string(name='ProductType'),
            debugSwitch?: boolean(name='DebugSwitch'),
          }(name='IotProduct'),
          destination?: string(name='Destination'),
          onsTopics?: {
            uplinkTopic?: string(name='UplinkTopic'),
            downlinkTopic?: string(name='DownlinkTopic'),
            uplinkRegionName?: string(name='UplinkRegionName'),
            downlinkRegionName?: string(name='DownlinkRegionName'),
          }(name='OnsTopics'),
        }(name='DataDispatchConfig'),
        boundNodeGroupName?: string(name='BoundNodeGroupName'),
        freqBandPlanGroupId?: string(name='FreqBandPlanGroupId'),
        dataRate?: string(name='DataRate'),
        joinPermissionId?: string(name='JoinPermissionId'),
        classMode?: string(name='ClassMode'),
        joinEui?: string(name='JoinEui'),
        boundNodeGroup?: boolean(name='BoundNodeGroup'),
        enabled?: boolean(name='Enabled'),
        rxDelay?: string(name='RxDelay'),
        boundNodeGroupId?: string(name='BoundNodeGroupId'),
        ownerAliyunId?: string(name='OwnerAliyunId'),
        joinPermissionName?: string(name='JoinPermissionName'),
      }
    ](name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  success?: boolean(name='Success'),
}

model ListRentedJoinPermissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRentedJoinPermissionsResponseBody(name='body'),
}

async function listRentedJoinPermissionsWithOptions(request: ListRentedJoinPermissionsRequest, runtime: Util.RuntimeOptions): ListRentedJoinPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["FuzzyOwnerAliyunId"] = request.fuzzyOwnerAliyunId;
  query["FuzzyJoinEui"] = request.fuzzyJoinEui;
  query["Enabled"] = request.enabled;
  query["BoundNodeGroup"] = request.boundNodeGroup;
  query["Type"] = request.type;
  query["FuzzyJoinPermissionName"] = request.fuzzyJoinPermissionName;
  query["Offset"] = request.offset;
  query["Limit"] = request.limit;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListRentedJoinPermissions',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRentedJoinPermissions(request: ListRentedJoinPermissionsRequest): ListRentedJoinPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRentedJoinPermissionsWithOptions(request, runtime);
}

model ListTransferPacketRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  beginMillis?: long(name='BeginMillis'),
  endMillis?: long(name='EndMillis'),
  sortingField?: string(name='SortingField'),
  ascending?: boolean(name='Ascending'),
}

model ListTransferPacketResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    list?: {
      packet?: [ 
      {
        logMillis?: long(name='LogMillis'),
        base64EncodedMacPayload?: string(name='Base64EncodedMacPayload'),
        processEvent?: string(name='ProcessEvent'),
        FPort?: int32(name='FPort'),
        lsnr?: float(name='Lsnr'),
        freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
        hasData?: boolean(name='HasData'),
        fcntUp?: long(name='FcntUp'),
        classMode?: string(name='ClassMode'),
        macPayloadSize?: long(name='MacPayloadSize'),
        datr?: string(name='Datr'),
        messageType?: string(name='MessageType'),
        devAddr?: string(name='DevAddr'),
        devEui?: string(name='DevEui'),
        fcntDown?: long(name='FcntDown'),
        gwEui?: string(name='GwEui'),
        rssi?: int32(name='Rssi'),
        hasMacCommand?: boolean(name='HasMacCommand'),
        freq?: float(name='Freq'),
      }
    ](name='Packet')
    }(name='List'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model ListTransferPacketResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransferPacketResponseBody(name='body'),
}

async function listTransferPacketWithOptions(request: ListTransferPacketRequest, runtime: Util.RuntimeOptions): ListTransferPacketResponse {
  Util.validateModel(request);
  var query = {};
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["BeginMillis"] = request.beginMillis;
  query["EndMillis"] = request.endMillis;
  query["SortingField"] = request.sortingField;
  query["Ascending"] = request.ascending;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListTransferPacket',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransferPacket(request: ListTransferPacketRequest): ListTransferPacketResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransferPacketWithOptions(request, runtime);
}

model RejectJoinPermissionAuthOrderRequest {
  orderId?: string(name='OrderId'),
}

model RejectJoinPermissionAuthOrderResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RejectJoinPermissionAuthOrderResponse = {
  headers: map[string]string(name='headers'),
  body: RejectJoinPermissionAuthOrderResponseBody(name='body'),
}

async function rejectJoinPermissionAuthOrderWithOptions(request: RejectJoinPermissionAuthOrderRequest, runtime: Util.RuntimeOptions): RejectJoinPermissionAuthOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["OrderId"] = request.orderId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RejectJoinPermissionAuthOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function rejectJoinPermissionAuthOrder(request: RejectJoinPermissionAuthOrderRequest): RejectJoinPermissionAuthOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return rejectJoinPermissionAuthOrderWithOptions(request, runtime);
}

model RemoveNodeFromGroupRequest {
  devEui?: string(name='DevEui'),
  nodeGroupId?: string(name='NodeGroupId'),
}

model RemoveNodeFromGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveNodeFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveNodeFromGroupResponseBody(name='body'),
}

async function removeNodeFromGroupWithOptions(request: RemoveNodeFromGroupRequest, runtime: Util.RuntimeOptions): RemoveNodeFromGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  query["NodeGroupId"] = request.nodeGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'RemoveNodeFromGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeNodeFromGroup(request: RemoveNodeFromGroupRequest): RemoveNodeFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeNodeFromGroupWithOptions(request, runtime);
}

model ReturnJoinPermissionRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
  joinPermissionType?: string(name='JoinPermissionType'),
}

model ReturnJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReturnJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ReturnJoinPermissionResponseBody(name='body'),
}

async function returnJoinPermissionWithOptions(request: ReturnJoinPermissionRequest, runtime: Util.RuntimeOptions): ReturnJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  query["JoinPermissionType"] = request.joinPermissionType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReturnJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function returnJoinPermission(request: ReturnJoinPermissionRequest): ReturnJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return returnJoinPermissionWithOptions(request, runtime);
}

model SendUnicastCommandRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  devEui?: string(name='DevEui'),
  maxRetries?: int32(name='MaxRetries'),
  cleanUp?: boolean(name='CleanUp'),
  FPort?: int32(name='FPort'),
  confirmed?: boolean(name='Confirmed'),
  content?: string(name='Content'),
}

model SendUnicastCommandResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendUnicastCommandResponse = {
  headers: map[string]string(name='headers'),
  body: SendUnicastCommandResponseBody(name='body'),
}

async function sendUnicastCommandWithOptions(request: SendUnicastCommandRequest, runtime: Util.RuntimeOptions): SendUnicastCommandResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["DevEui"] = request.devEui;
  query["MaxRetries"] = request.maxRetries;
  query["CleanUp"] = request.cleanUp;
  query["FPort"] = request.FPort;
  query["Confirmed"] = request.confirmed;
  query["Content"] = request.content;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SendUnicastCommand',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendUnicastCommand(request: SendUnicastCommandRequest): SendUnicastCommandResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendUnicastCommandWithOptions(request, runtime);
}

model SubmitGatewayLocalConfigAddingTaskRequest {
  gwEui?: string(name='GwEui'),
  datr?: int32(name='Datr'),
  d2dAddr?: string(name='D2dAddr'),
  freq?: int32(name='Freq'),
  d2dKey?: string(name='D2dKey'),
}

model SubmitGatewayLocalConfigAddingTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitGatewayLocalConfigAddingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitGatewayLocalConfigAddingTaskResponseBody(name='body'),
}

async function submitGatewayLocalConfigAddingTaskWithOptions(request: SubmitGatewayLocalConfigAddingTaskRequest, runtime: Util.RuntimeOptions): SubmitGatewayLocalConfigAddingTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["GwEui"] = request.gwEui;
  query["Datr"] = request.datr;
  query["D2dAddr"] = request.d2dAddr;
  query["Freq"] = request.freq;
  query["D2dKey"] = request.d2dKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitGatewayLocalConfigAddingTask',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitGatewayLocalConfigAddingTask(request: SubmitGatewayLocalConfigAddingTaskRequest): SubmitGatewayLocalConfigAddingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitGatewayLocalConfigAddingTaskWithOptions(request, runtime);
}

model SubmitGatewayLocalConfigDeletingTaskRequest {
  gwEui?: string(name='GwEui'),
  d2dAddr?: string(name='D2dAddr'),
}

model SubmitGatewayLocalConfigDeletingTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitGatewayLocalConfigDeletingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitGatewayLocalConfigDeletingTaskResponseBody(name='body'),
}

async function submitGatewayLocalConfigDeletingTaskWithOptions(request: SubmitGatewayLocalConfigDeletingTaskRequest, runtime: Util.RuntimeOptions): SubmitGatewayLocalConfigDeletingTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["GwEui"] = request.gwEui;
  query["D2dAddr"] = request.d2dAddr;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitGatewayLocalConfigDeletingTask',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitGatewayLocalConfigDeletingTask(request: SubmitGatewayLocalConfigDeletingTaskRequest): SubmitGatewayLocalConfigDeletingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitGatewayLocalConfigDeletingTaskWithOptions(request, runtime);
}

model SubmitGatewayTupleOrderRequest {
  requiredCount?: long(name='RequiredCount'),
  tupleType?: string(name='TupleType'),
}

model SubmitGatewayTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model SubmitGatewayTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitGatewayTupleOrderResponseBody(name='body'),
}

async function submitGatewayTupleOrderWithOptions(request: SubmitGatewayTupleOrderRequest, runtime: Util.RuntimeOptions): SubmitGatewayTupleOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["RequiredCount"] = request.requiredCount;
  query["TupleType"] = request.tupleType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitGatewayTupleOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitGatewayTupleOrder(request: SubmitGatewayTupleOrderRequest): SubmitGatewayTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitGatewayTupleOrderWithOptions(request, runtime);
}

model SubmitJoinPermissionAuthOrderRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
  renterAliyunId?: string(name='RenterAliyunId'),
}

model SubmitJoinPermissionAuthOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  success?: boolean(name='Success'),
}

model SubmitJoinPermissionAuthOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitJoinPermissionAuthOrderResponseBody(name='body'),
}

async function submitJoinPermissionAuthOrderWithOptions(request: SubmitJoinPermissionAuthOrderRequest, runtime: Util.RuntimeOptions): SubmitJoinPermissionAuthOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  query["RenterAliyunId"] = request.renterAliyunId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitJoinPermissionAuthOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitJoinPermissionAuthOrder(request: SubmitJoinPermissionAuthOrderRequest): SubmitJoinPermissionAuthOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitJoinPermissionAuthOrderWithOptions(request, runtime);
}

model SubmitKpmEncryptedNodeTupleOrderRequest {
  loraVersion?: string(name='LoraVersion'),
  requiredCount?: long(name='RequiredCount'),
  tupleType?: string(name='TupleType'),
}

model SubmitKpmEncryptedNodeTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  orderId?: string(name='OrderId'),
  success?: boolean(name='Success'),
}

model SubmitKpmEncryptedNodeTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitKpmEncryptedNodeTupleOrderResponseBody(name='body'),
}

async function submitKpmEncryptedNodeTupleOrderWithOptions(request: SubmitKpmEncryptedNodeTupleOrderRequest, runtime: Util.RuntimeOptions): SubmitKpmEncryptedNodeTupleOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["LoraVersion"] = request.loraVersion;
  query["RequiredCount"] = request.requiredCount;
  query["TupleType"] = request.tupleType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitKpmEncryptedNodeTupleOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitKpmEncryptedNodeTupleOrder(request: SubmitKpmEncryptedNodeTupleOrderRequest): SubmitKpmEncryptedNodeTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitKpmEncryptedNodeTupleOrderWithOptions(request, runtime);
}

model SubmitNodeLocalConfigAddingTaskRequest {
  devEui?: string(name='DevEui'),
  datr?: int32(name='Datr'),
  d2dAddr?: string(name='D2dAddr'),
  freq?: int32(name='Freq'),
  d2dKey?: string(name='D2dKey'),
}

model SubmitNodeLocalConfigAddingTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitNodeLocalConfigAddingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitNodeLocalConfigAddingTaskResponseBody(name='body'),
}

async function submitNodeLocalConfigAddingTaskWithOptions(request: SubmitNodeLocalConfigAddingTaskRequest, runtime: Util.RuntimeOptions): SubmitNodeLocalConfigAddingTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  query["Datr"] = request.datr;
  query["D2dAddr"] = request.d2dAddr;
  query["Freq"] = request.freq;
  query["D2dKey"] = request.d2dKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitNodeLocalConfigAddingTask',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitNodeLocalConfigAddingTask(request: SubmitNodeLocalConfigAddingTaskRequest): SubmitNodeLocalConfigAddingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitNodeLocalConfigAddingTaskWithOptions(request, runtime);
}

model SubmitNodeLocalConfigDeletingTaskRequest {
  devEui?: string(name='DevEui'),
}

model SubmitNodeLocalConfigDeletingTaskResponseBody = {
  requestId?: string(name='RequestId'),
  data?: long(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model SubmitNodeLocalConfigDeletingTaskResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitNodeLocalConfigDeletingTaskResponseBody(name='body'),
}

async function submitNodeLocalConfigDeletingTaskWithOptions(request: SubmitNodeLocalConfigDeletingTaskRequest, runtime: Util.RuntimeOptions): SubmitNodeLocalConfigDeletingTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitNodeLocalConfigDeletingTask',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitNodeLocalConfigDeletingTask(request: SubmitNodeLocalConfigDeletingTaskRequest): SubmitNodeLocalConfigDeletingTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitNodeLocalConfigDeletingTaskWithOptions(request, runtime);
}

model SubmitNodeTupleOrderRequest {
  loraVersion?: string(name='LoraVersion'),
  requiredCount?: long(name='RequiredCount'),
  tupleType?: string(name='TupleType'),
}

model SubmitNodeTupleOrderResponseBody = {
  requestId?: string(name='RequestId'),
  data?: string(name='Data'),
  success?: boolean(name='Success'),
}

model SubmitNodeTupleOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitNodeTupleOrderResponseBody(name='body'),
}

async function submitNodeTupleOrderWithOptions(request: SubmitNodeTupleOrderRequest, runtime: Util.RuntimeOptions): SubmitNodeTupleOrderResponse {
  Util.validateModel(request);
  var query = {};
  query["LoraVersion"] = request.loraVersion;
  query["RequiredCount"] = request.requiredCount;
  query["TupleType"] = request.tupleType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SubmitNodeTupleOrder',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitNodeTupleOrder(request: SubmitNodeTupleOrderRequest): SubmitNodeTupleOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitNodeTupleOrderWithOptions(request, runtime);
}

model UnbindJoinPermissionFromNodeGroupRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  joinPermissionId?: string(name='JoinPermissionId'),
}

model UnbindJoinPermissionFromNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnbindJoinPermissionFromNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UnbindJoinPermissionFromNodeGroupResponseBody(name='body'),
}

async function unbindJoinPermissionFromNodeGroupWithOptions(request: UnbindJoinPermissionFromNodeGroupRequest, runtime: Util.RuntimeOptions): UnbindJoinPermissionFromNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["JoinPermissionId"] = request.joinPermissionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UnbindJoinPermissionFromNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unbindJoinPermissionFromNodeGroup(request: UnbindJoinPermissionFromNodeGroupRequest): UnbindJoinPermissionFromNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindJoinPermissionFromNodeGroupWithOptions(request, runtime);
}

model UpdateDataDispatchConfigRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  dataDispatchDestination?: string(name='DataDispatchDestination'),
  productType?: string(name='ProductType'),
  productName?: string(name='ProductName'),
  productKey?: string(name='ProductKey'),
  debugSwitch?: boolean(name='DebugSwitch'),
  uplinkRegionName?: string(name='UplinkRegionName'),
  uplinkTopic?: string(name='UplinkTopic'),
}

model UpdateDataDispatchConfigResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDataDispatchConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDataDispatchConfigResponseBody(name='body'),
}

async function updateDataDispatchConfigWithOptions(request: UpdateDataDispatchConfigRequest, runtime: Util.RuntimeOptions): UpdateDataDispatchConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["DataDispatchDestination"] = request.dataDispatchDestination;
  query["ProductType"] = request.productType;
  query["ProductName"] = request.productName;
  query["ProductKey"] = request.productKey;
  query["DebugSwitch"] = request.debugSwitch;
  query["UplinkRegionName"] = request.uplinkRegionName;
  query["UplinkTopic"] = request.uplinkTopic;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataDispatchConfig',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataDispatchConfig(request: UpdateDataDispatchConfigRequest): UpdateDataDispatchConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataDispatchConfigWithOptions(request, runtime);
}

model UpdateDataDispatchEnablingStateRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  dataDispatchEnabled?: boolean(name='DataDispatchEnabled'),
}

model UpdateDataDispatchEnablingStateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateDataDispatchEnablingStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDataDispatchEnablingStateResponseBody(name='body'),
}

async function updateDataDispatchEnablingStateWithOptions(request: UpdateDataDispatchEnablingStateRequest, runtime: Util.RuntimeOptions): UpdateDataDispatchEnablingStateResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["DataDispatchEnabled"] = request.dataDispatchEnabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDataDispatchEnablingState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDataDispatchEnablingState(request: UpdateDataDispatchEnablingStateRequest): UpdateDataDispatchEnablingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDataDispatchEnablingStateWithOptions(request, runtime);
}

model UpdateGatewayRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  communicationMode?: string(name='CommunicationMode'),
  addressCode?: long(name='AddressCode'),
  city?: string(name='City'),
  district?: string(name='District'),
  address?: string(name='Address'),
  gisCoordinateSystem?: string(name='GisCoordinateSystem'),
  longitude?: float(name='Longitude'),
  latitude?: float(name='Latitude'),
}

model UpdateGatewayResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateGatewayResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayResponseBody(name='body'),
}

async function updateGatewayWithOptions(request: UpdateGatewayRequest, runtime: Util.RuntimeOptions): UpdateGatewayResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["Name"] = request.name;
  query["Description"] = request.description;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["CommunicationMode"] = request.communicationMode;
  query["AddressCode"] = request.addressCode;
  query["City"] = request.city;
  query["District"] = request.district;
  query["Address"] = request.address;
  query["GisCoordinateSystem"] = request.gisCoordinateSystem;
  query["Longitude"] = request.longitude;
  query["Latitude"] = request.latitude;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGateway',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGateway(request: UpdateGatewayRequest): UpdateGatewayResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayWithOptions(request, runtime);
}

model UpdateGatewayEnablingStateRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  enabled?: boolean(name='Enabled'),
}

model UpdateGatewayEnablingStateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateGatewayEnablingStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewayEnablingStateResponseBody(name='body'),
}

async function updateGatewayEnablingStateWithOptions(request: UpdateGatewayEnablingStateRequest, runtime: Util.RuntimeOptions): UpdateGatewayEnablingStateResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["Enabled"] = request.enabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewayEnablingState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewayEnablingState(request: UpdateGatewayEnablingStateRequest): UpdateGatewayEnablingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewayEnablingStateWithOptions(request, runtime);
}

model UpdateGatewaySshCtrlRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  gwEui?: string(name='GwEui'),
  enabled?: boolean(name='Enabled'),
}

model UpdateGatewaySshCtrlResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateGatewaySshCtrlResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateGatewaySshCtrlResponseBody(name='body'),
}

async function updateGatewaySshCtrlWithOptions(request: UpdateGatewaySshCtrlRequest, runtime: Util.RuntimeOptions): UpdateGatewaySshCtrlResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["GwEui"] = request.gwEui;
  query["Enabled"] = request.enabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateGatewaySshCtrl',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateGatewaySshCtrl(request: UpdateGatewaySshCtrlRequest): UpdateGatewaySshCtrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGatewaySshCtrlWithOptions(request, runtime);
}

model UpdateNodeEnablingStateRequest {
  devEui?: string(name='DevEui'),
  isEnable?: boolean(name='IsEnable'),
}

model UpdateNodeEnablingStateResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateNodeEnablingStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNodeEnablingStateResponseBody(name='body'),
}

async function updateNodeEnablingStateWithOptions(request: UpdateNodeEnablingStateRequest, runtime: Util.RuntimeOptions): UpdateNodeEnablingStateResponse {
  Util.validateModel(request);
  var query = {};
  query["DevEui"] = request.devEui;
  query["IsEnable"] = request.isEnable;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeEnablingState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeEnablingState(request: UpdateNodeEnablingStateRequest): UpdateNodeEnablingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeEnablingStateWithOptions(request, runtime);
}

model UpdateNodeGroupRequest {
  nodeGroupId?: string(name='NodeGroupId'),
  nodeGroupName?: string(name='NodeGroupName'),
}

model UpdateNodeGroupResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateNodeGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNodeGroupResponseBody(name='body'),
}

async function updateNodeGroupWithOptions(request: UpdateNodeGroupRequest, runtime: Util.RuntimeOptions): UpdateNodeGroupResponse {
  Util.validateModel(request);
  var query = {};
  query["NodeGroupId"] = request.nodeGroupId;
  query["NodeGroupName"] = request.nodeGroupName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNodeGroup',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNodeGroup(request: UpdateNodeGroupRequest): UpdateNodeGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNodeGroupWithOptions(request, runtime);
}

model UpdateNotificationsHandleStateRequest {
  targetHandleState?: string(name='TargetHandleState'),
  notificationId?: [ integer ](name='NotificationId'),
}

model UpdateNotificationsHandleStateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateNotificationsHandleStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateNotificationsHandleStateResponseBody(name='body'),
}

async function updateNotificationsHandleStateWithOptions(request: UpdateNotificationsHandleStateRequest, runtime: Util.RuntimeOptions): UpdateNotificationsHandleStateResponse {
  Util.validateModel(request);
  var query = {};
  query["TargetHandleState"] = request.targetHandleState;
  query["NotificationId"] = request.notificationId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateNotificationsHandleState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateNotificationsHandleState(request: UpdateNotificationsHandleStateRequest): UpdateNotificationsHandleStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNotificationsHandleStateWithOptions(request, runtime);
}

model UpdateOwnedLocalJoinPermissionRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  joinPermissionId?: string(name='JoinPermissionId'),
  freqBandPlanGroupId?: long(name='FreqBandPlanGroupId'),
  classMode?: string(name='ClassMode'),
  joinPermissionName?: string(name='JoinPermissionName'),
  rxDelay?: string(name='RxDelay'),
  dataRate?: string(name='DataRate'),
  joinEui?: string(name='JoinEui'),
}

model UpdateOwnedLocalJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateOwnedLocalJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOwnedLocalJoinPermissionResponseBody(name='body'),
}

async function updateOwnedLocalJoinPermissionWithOptions(request: UpdateOwnedLocalJoinPermissionRequest, runtime: Util.RuntimeOptions): UpdateOwnedLocalJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["JoinPermissionId"] = request.joinPermissionId;
  query["FreqBandPlanGroupId"] = request.freqBandPlanGroupId;
  query["ClassMode"] = request.classMode;
  query["JoinPermissionName"] = request.joinPermissionName;
  query["RxDelay"] = request.rxDelay;
  query["DataRate"] = request.dataRate;
  query["JoinEui"] = request.joinEui;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOwnedLocalJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateOwnedLocalJoinPermission(request: UpdateOwnedLocalJoinPermissionRequest): UpdateOwnedLocalJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOwnedLocalJoinPermissionWithOptions(request, runtime);
}

model UpdateOwnedLocalJoinPermissionEnablingStateRequest {
  iotInstanceId?: string(name='IotInstanceId'),
  joinPermissionId?: string(name='JoinPermissionId'),
  enabled?: boolean(name='Enabled'),
}

model UpdateOwnedLocalJoinPermissionEnablingStateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateOwnedLocalJoinPermissionEnablingStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateOwnedLocalJoinPermissionEnablingStateResponseBody(name='body'),
}

async function updateOwnedLocalJoinPermissionEnablingStateWithOptions(request: UpdateOwnedLocalJoinPermissionEnablingStateRequest, runtime: Util.RuntimeOptions): UpdateOwnedLocalJoinPermissionEnablingStateResponse {
  Util.validateModel(request);
  var query = {};
  query["IotInstanceId"] = request.iotInstanceId;
  query["JoinPermissionId"] = request.joinPermissionId;
  query["Enabled"] = request.enabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateOwnedLocalJoinPermissionEnablingState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateOwnedLocalJoinPermissionEnablingState(request: UpdateOwnedLocalJoinPermissionEnablingStateRequest): UpdateOwnedLocalJoinPermissionEnablingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateOwnedLocalJoinPermissionEnablingStateWithOptions(request, runtime);
}

model UpdateRoamingJoinPermissionRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
  joinPermissionName?: string(name='JoinPermissionName'),
  rxDelay?: string(name='RxDelay'),
  dataRate?: string(name='DataRate'),
}

model UpdateRoamingJoinPermissionResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRoamingJoinPermissionResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoamingJoinPermissionResponseBody(name='body'),
}

async function updateRoamingJoinPermissionWithOptions(request: UpdateRoamingJoinPermissionRequest, runtime: Util.RuntimeOptions): UpdateRoamingJoinPermissionResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  query["JoinPermissionName"] = request.joinPermissionName;
  query["RxDelay"] = request.rxDelay;
  query["DataRate"] = request.dataRate;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRoamingJoinPermission',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRoamingJoinPermission(request: UpdateRoamingJoinPermissionRequest): UpdateRoamingJoinPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoamingJoinPermissionWithOptions(request, runtime);
}

model UpdateRoamingJoinPermissionEnablingStateRequest {
  joinPermissionId?: string(name='JoinPermissionId'),
  enabled?: boolean(name='Enabled'),
}

model UpdateRoamingJoinPermissionEnablingStateResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateRoamingJoinPermissionEnablingStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateRoamingJoinPermissionEnablingStateResponseBody(name='body'),
}

async function updateRoamingJoinPermissionEnablingStateWithOptions(request: UpdateRoamingJoinPermissionEnablingStateRequest, runtime: Util.RuntimeOptions): UpdateRoamingJoinPermissionEnablingStateResponse {
  Util.validateModel(request);
  var query = {};
  query["JoinPermissionId"] = request.joinPermissionId;
  query["Enabled"] = request.enabled;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRoamingJoinPermissionEnablingState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRoamingJoinPermissionEnablingState(request: UpdateRoamingJoinPermissionEnablingStateRequest): UpdateRoamingJoinPermissionEnablingStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRoamingJoinPermissionEnablingStateWithOptions(request, runtime);
}

model UpdateUserIsolationStateRequest {
  isolated?: boolean(name='Isolated'),
}

model UpdateUserIsolationStateResponseBody = {
  requestId?: string(name='RequestId'),
  errorMessage?: string(name='ErrorMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
}

model UpdateUserIsolationStateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserIsolationStateResponseBody(name='body'),
}

async function updateUserIsolationStateWithOptions(request: UpdateUserIsolationStateRequest, runtime: Util.RuntimeOptions): UpdateUserIsolationStateResponse {
  Util.validateModel(request);
  var query = {};
  query["Isolated"] = request.isolated;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateUserIsolationState',
    version = '2019-03-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateUserIsolationState(request: UpdateUserIsolationStateRequest): UpdateUserIsolationStateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserIsolationStateWithOptions(request, runtime);
}

