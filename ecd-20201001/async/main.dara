/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ecd';
  @version = '2020-10-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CalMcpToolRequest {
  args?: string(name='Args', position='Body'),
  authorization?: string(name='Authorization', position='Body'),
  externalUserId?: string(name='ExternalUserId', position='Body'),
  name?: string(name='Name', position='Body'),
  server?: string(name='Server', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
  tool?: string(name='Tool', position='Body'),
}

model CalMcpToolResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CalMcpToolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CalMcpToolResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CalMcpTool  CalMcpToolRequest
  * @return CalMcpToolResponse
 */
async function calMcpTool(request: CalMcpToolRequest): CalMcpToolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CalMcpTool', 'POST', '/', 'json', true, 'form', request);
}

model CreateMcpSessionRequest {
  authorization?: string(name='Authorization', position='Body'),
  externalUserId?: string(name='ExternalUserId', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
}

model CreateMcpSessionResponseBody = {
  code?: string(name='Code'),
  data?: {
    appInstanceId?: string(name='AppInstanceId'),
    errMsg?: string(name='ErrMsg'),
    resourceId?: string(name='ResourceId'),
    resourceUrl?: string(name='ResourceUrl'),
    sessionId?: string(name='SessionId'),
    success?: boolean(name='Success'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMcpSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMcpSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMcpSession  CreateMcpSessionRequest
  * @return CreateMcpSessionResponse
 */
async function createMcpSession(request: CreateMcpSessionRequest): CreateMcpSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMcpSession', 'POST', '/', 'json', true, 'form', request);
}

model DescribeDesktopsRequest {
  desktopId?: [ string ](name='DesktopId', position='Query'),
  desktopName?: string(name='DesktopName', position='Query'),
  desktopStatus?: string(name='DesktopStatus', position='Query'),
  directoryId?: string(name='DirectoryId', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  officeSiteId?: string(name='OfficeSiteId', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model DescribeDesktopsResponseBody = {
  desktops?: [ 
    {
      connectionStatus?: string(name='ConnectionStatus'),
      cpu?: int32(name='Cpu'),
      creationTime?: string(name='CreationTime'),
      dataDiskCategory?: string(name='DataDiskCategory'),
      dataDiskSize?: string(name='DataDiskSize'),
      desktopId?: string(name='DesktopId'),
      desktopName?: string(name='DesktopName'),
      desktopStatus?: string(name='DesktopStatus'),
      desktopType?: string(name='DesktopType'),
      directoryId?: string(name='DirectoryId'),
      disks?: [ 
        {
          diskId?: string(name='DiskId'),
          diskSize?: int32(name='DiskSize'),
          diskType?: string(name='DiskType'),
        }
      ](name='Disks'),
      endUserIds?: [ string ](name='EndUserIds'),
      imageId?: string(name='ImageId'),
      lastStartTime?: string(name='LastStartTime'),
      memory?: long(name='Memory'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      officeSiteId?: string(name='OfficeSiteId'),
      policyGroupId?: string(name='PolicyGroupId'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='Desktops'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDesktops  DescribeDesktopsRequest
  * @return DescribeDesktopsResponse
 */
async function describeDesktops(request: DescribeDesktopsRequest): DescribeDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDesktops', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDirectoriesRequest {
  directoryId?: [ string ](name='DirectoryId', position='Query'),
  directoryType: string(name='DirectoryType', description='This parameter is required.', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
}

model DescribeDirectoriesResponseBody = {
  directories?: [ 
    {
      ADConnectors?: [ 
        {
          ADConnectorAddress?: string(name='ADConnectorAddress'),
          connectorStatus?: string(name='ConnectorStatus'),
          vSwitchId?: string(name='VSwitchId'),
        }
      ](name='ADConnectors'),
      creationTime?: string(name='CreationTime'),
      customSecurityGroupId?: string(name='CustomSecurityGroupId'),
      directoryId?: string(name='DirectoryId'),
      directoryType?: string(name='DirectoryType'),
      dnsAddress?: [ string ](name='DnsAddress'),
      dnsUserName?: string(name='DnsUserName'),
      domainName?: string(name='DomainName'),
      domainPassword?: string(name='DomainPassword'),
      domainUserName?: string(name='DomainUserName'),
      enableInternetAccess?: boolean(name='EnableInternetAccess'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      trustPassword?: string(name='TrustPassword'),
    }
  ](name='Directories'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
}

model DescribeDirectoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDirectoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeDirectories  DescribeDirectoriesRequest
  * @return DescribeDirectoriesResponse
 */
async function describeDirectories(request: DescribeDirectoriesRequest): DescribeDirectoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDirectories', 'POST', '/', 'json', false, 'json', request);
}

model GetConnectionTicketRequest {
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId?: string(name='DesktopId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  password?: string(name='Password', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
  userName?: string(name='UserName', position='Query'),
}

model GetConnectionTicketResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
  taskStatus?: string(name='TaskStatus'),
  ticket?: string(name='Ticket'),
}

model GetConnectionTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConnectionTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetConnectionTicket  GetConnectionTicketRequest
  * @return GetConnectionTicketResponse
 */
async function getConnectionTicket(request: GetConnectionTicketRequest): GetConnectionTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConnectionTicket', 'POST', '/', 'json', false, 'json', request);
}

model GetMcpResourceRequest {
  authorization?: string(name='Authorization', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
}

model GetMcpResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    desktopInfo?: {
      appId?: string(name='AppId'),
      authCode?: string(name='AuthCode'),
      connectionProperties?: string(name='ConnectionProperties'),
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
    }(name='DesktopInfo'),
    resourceUrl?: string(name='ResourceUrl'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMcpResourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMcpResourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMcpResource  GetMcpResourceRequest
  * @return GetMcpResourceResponse
 */
async function getMcpResource(request: GetMcpResourceRequest): GetMcpResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMcpResource', 'POST', '/', 'json', true, 'form', request);
}

model ListMcpToolsRequest {
  authorization?: string(name='Authorization', position='Body'),
}

model ListMcpToolsResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListMcpToolsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMcpToolsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMcpTools  ListMcpToolsRequest
  * @return ListMcpToolsResponse
 */
async function listMcpTools(request: ListMcpToolsRequest): ListMcpToolsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMcpTools', 'POST', '/', 'json', true, 'form', request);
}

model RebootDesktopsRequest {
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId: [ string ](name='DesktopId', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
}

model RebootDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RebootDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RebootDesktops  RebootDesktopsRequest
  * @return RebootDesktopsResponse
 */
async function rebootDesktops(request: RebootDesktopsRequest): RebootDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootDesktops', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseMcpSessionRequest {
  authorization?: string(name='Authorization', position='Body'),
  sessionId?: string(name='SessionId', position='Body'),
}

model ReleaseMcpSessionResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseMcpSessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseMcpSessionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseMcpSession  ReleaseMcpSessionRequest
  * @return ReleaseMcpSessionResponse
 */
async function releaseMcpSession(request: ReleaseMcpSessionRequest): ReleaseMcpSessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseMcpSession', 'POST', '/', 'json', true, 'form', request);
}

model StartDesktopsRequest {
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId: [ string ](name='DesktopId', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
}

model StartDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartDesktops  StartDesktopsRequest
  * @return StartDesktopsResponse
 */
async function startDesktops(request: StartDesktopsRequest): StartDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartDesktops', 'POST', '/', 'json', false, 'json', request);
}

model StopDesktopsRequest {
  clientOS?: string(name='ClientOS', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  desktopId: [ string ](name='DesktopId', description='This parameter is required.', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', position='Query'),
}

model StopDesktopsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopDesktopsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StopDesktopsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StopDesktops  StopDesktopsRequest
  * @return StopDesktopsResponse
 */
async function stopDesktops(request: StopDesktopsRequest): StopDesktopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopDesktops', 'POST', '/', 'json', false, 'json', request);
}

