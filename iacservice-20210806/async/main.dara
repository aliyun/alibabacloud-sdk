/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IaCService';
  @version = '2021-08-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AssociateGroupRequest {
  groupId: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
  clientToken?: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  projectId?: string(name='projectId', example='p-433aead7560571a87349d054b4', position='Body'),
  resourceIds: [ string ](name='resourceIds', position='Body'),
  resourceType?: string(name='resourceType', example='Task', position='Body'),
}

model AssociateGroupResponseBody = {
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model AssociateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateGroupResponseBody(name='body'),
}

async function associateGroup(request: AssociateGroupRequest): AssociateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AssociateGroup', 'POST', '/group/{groupId}/associate', 'json', false, 'json', request);
}

model AssociateParameterSetRequest {
  parameterSetIds: [ string ](name='parameterSetIds', position='Body'),
  resourceId: string(name='resourceId', example='task-433aead756057ffdf5326bf1e12ed', position='Body'),
  resourceType: string(name='resourceType', example='Task', position='Body'),
}

model AssociateParameterSetResponseBody = {
  requestId?: string(name='requestId', example='BF75EF50-955D-5E1F-AB23-A657C2C6D3C7'),
}

model AssociateParameterSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateParameterSetResponseBody(name='body'),
}

async function associateParameterSet(request: AssociateParameterSetRequest): AssociateParameterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AssociateParameterSet', 'POST', '/parameterSets/operations/associate', 'json', false, 'json', request);
}

model AttachRabbitmqPublisherRequest {
  publisherId: string(name='publisherId', example='mqp-3b6cb9fa4751af0de8e3f6312a', position='Path'),
  taskId: string(name='taskId', example='task-518855d9a058cfffcbeafaebe6c89', position='Body'),
}

model AttachRabbitmqPublisherResponseBody = {
  requestId?: string(name='requestId', example='D1DEAA38-D888-5811-A8A6-E1E2FBC0779C'),
}

model AttachRabbitmqPublisherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AttachRabbitmqPublisherResponseBody(name='body'),
}

async function attachRabbitmqPublisher(request: AttachRabbitmqPublisherRequest): AttachRabbitmqPublisherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachRabbitmqPublisher', 'POST', '/publishers/{publisherId}/attach', 'json', false, 'json', request);
}

model CancelProjectBuildRequest {
  projectId: string(name='projectId', example='p-fu1950tjgbvj62p3gqsuq0', position='Path'),
  projectBuildId?: string(name='projectBuildId', example='pb-fu1458tbfql30po3ck1h90', position='Path'),
}

model CancelProjectBuildResponseBody = {
  requestId?: string(name='requestId', example='C7070EC3-DF66-58BA-A1DD-A8574FF53143'),
}

model CancelProjectBuildResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelProjectBuildResponseBody(name='body'),
}

async function cancelProjectBuild(request: CancelProjectBuildRequest): CancelProjectBuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelProjectBuild', 'PUT', '/project/{projectId}/build/{projectBuildId}/cancel', 'json', false, 'json', request);
}

model CancelRamPolicyExportTaskRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-433aead756057ffe0252e48f9286a', position='Path'),
}

model CancelRamPolicyExportTaskResponseBody = {
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model CancelRamPolicyExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelRamPolicyExportTaskResponseBody(name='body'),
}

async function cancelRamPolicyExportTask(request: CancelRamPolicyExportTaskRequest): CancelRamPolicyExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelRamPolicyExportTask', 'PUT', '/ramPolicyExportTasks/{ramPolicyExportTaskId}/cancel', 'json', false, 'json', request);
}

model CancelResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', example='ex-445dcb7d0ac661ff08be459a75f', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
}

model CancelResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e5cdc6460282'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model CancelResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelResourceExportTaskResponseBody(name='body'),
}

async function cancelResourceExportTask(request: CancelResourceExportTaskRequest): CancelResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelResourceExportTask', 'PUT', '/exportTasks/cancel/{exportTaskId}', 'json', false, 'json', request);
}

model CheckResourceNameRequest {
  id?: string(name='id', example='mod-433af53ab7cc71afa', position='Query'),
  name: string(name='name', example='test', position='Query'),
  parentId?: string(name='parentId', example='p-663a72b75245e3', position='Query'),
  resourceType: string(name='resourceType', example='task', position='Query'),
}

model CheckResourceNameResponseBody = {
  requestId?: string(name='requestId', example='24B9B06B-16D8-5558-9FE1-C29757EB1689'),
  result?: boolean(name='result', example='true'),
}

model CheckResourceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckResourceNameResponseBody(name='body'),
}

async function checkResourceName(request: CheckResourceNameRequest): CheckResourceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckResourceName', 'GET', '/check/name', 'json', false, 'json', request);
}

model CloneGroupRequest {
  groupId: string(name='groupId', example='g-433aead756057fff9d63d69ede7ec', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', example='abc', position='Body'),
  projectId?: string(name='projectId', example='p-433aead7560571a87349d054b4', position='Body'),
  resourceTypes?: [ string ](name='resourceTypes', position='Body'),
}

model CloneGroupResponseBody = {
  requestId?: string(name='requestId', example='BF75EF50-955D-5E1F-AB23-A657C2C6D3C7'),
}

model CloneGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneGroupResponseBody(name='body'),
}

async function cloneGroup(request: CloneGroupRequest): CloneGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneGroup', 'POST', '/group/{groupId}/clone', 'json', false, 'json', request);
}

model CloneModuleRequest {
  description: string(name='description', example='ok', position='Body'),
  moduleId: string(name='moduleId', example='mod-148e7853433574fff6b316f4eb737e', position='Body'),
  moduleSource: string(name='moduleSource', example='market', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name: string(name='name', example='abc', position='Body'),
}

model CloneModuleResponseBody = {
  moduleId?: string(name='moduleId', example='mod-71012916a5a376f265ebc3774'),
  requestId?: string(name='requestId', example='78EC2EFB-AED9-5C23-AE98-6DDC6F2F96D6'),
}

model CloneModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloneModuleResponseBody(name='body'),
}

async function cloneModule(request: CloneModuleRequest): CloneModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CloneModule', 'PUT', '/modules/operations/clone', 'json', false, 'json', request);
}

model CreateAuthorizationRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  dueTime?: string(name='dueTime', position='Body'),
  moduleId: string(name='moduleId', example='mod-148e7853433574fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  uid: long(name='uid', example='5a220da4-f594-4776-87ed-f37888ec0473', position='Body'),
}

model CreateAuthorizationResponseBody = {
  authorizationId?: string(name='authorizationId', example='auth-14e80de4866bf7171264a9b40661'),
  requestId?: string(name='requestId', example='5FE84246-BB17-54BF-9F7A-F496270AC6DA'),
}

model CreateAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAuthorizationResponseBody(name='body'),
}

async function createAuthorization(request: CreateAuthorizationRequest): CreateAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAuthorization', 'POST', '/authorizations', 'json', false, 'json', request);
}

model CreateGroupRequest {
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  autoTrigger?: boolean(name='autoTrigger', example='true', position='Body'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  forcedSetting?: boolean(name='forcedSetting', example='true', position='Body'),
  name: string(name='name', example='test', position='Body'),
  notifyConfig?: [ 
    {
      notifyPath?: string(name='notifyPath', example='/'),
      notifyType?: string(name='notifyType', example='DingDing'),
    }
  ](name='notifyConfig', position='Body'),
  notifyOperationTypes?: [ string ](name='notifyOperationTypes', position='Body'),
  projectId: string(name='projectId', example='p-433aead7560571a87349d054b4', position='Body'),
  ramRole?: string(name='ramRole', example='ramName', position='Body'),
  reportExportField?: [ string ](name='reportExportField', position='Body'),
  reportExportPath?: string(name='reportExportPath', example='https://test.oss-cn-hangzhou.aliyuncs.com/test/test', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.189.0', position='Body'),
  triggerConfig?: [ 
    {
      triggerStrategy?: string(name='triggerStrategy', example='Cron'),
      triggerValue?: string(name='triggerValue', example='0 0 19 * * ？'),
    }
  ](name='triggerConfig', position='Body'),
  triggerResourceType?: [ string ](name='triggerResourceType', position='Body'),
}

model CreateGroupResponseBody = {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f'),
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGroup', 'POST', '/group', 'json', false, 'json', request);
}

model CreateJobRequest {
  taskId: string(name='taskId', example='task-433aead756057fffeaba4828f5195', position='Path'),
  clientToken: string(name='clientToken', example='2daf4227f747cbf11a5501f18cc5e004', position='Body'),
  description: string(name='description', example='test', position='Body'),
  executeType?: string(name='executeType', position='Body'),
  subCommand?: string(name='subCommand', example='null', position='Body'),
}

model CreateJobResponseBody = {
  jobId?: string(name='jobId', example='job-518855d9a058c32798c319561f'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateJob', 'POST', '/tasks/{taskId}/jobs', 'json', false, 'json', request);
}

model CreateModuleRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-5fd38c9b92d541a7083a86432e2'),
    projectId?: string(name='projectId', example='p-433aead75605713865c386cb9d'),
  }(name='groupInfo', position='Body'),
  name: string(name='name', example='test', position='Body'),
  source?: string(name='source', example='OSS', position='Body'),
  sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"', position='Body'),
  statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate', position='Body'),
  versionStrategy?: string(name='versionStrategy', example='Manual', position='Body'),
}

model CreateModuleResponseBody = {
  moduleId?: string(name='moduleId', example='mod-518855d9a058cfffcc446d8fe3c99'),
  requestId?: string(name='requestId', example='0D797DC3-FF04-5C21-81EB-92C7799512E3'),
}

model CreateModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModuleResponseBody(name='body'),
}

async function createModule(request: CreateModuleRequest): CreateModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModule', 'POST', '/modules', 'json', false, 'json', request);
}

model CreateModuleVersionRequest {
  moduleId: string(name='moduleId', example='mod-433aead756057143bd9145a5258', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', example='test', position='Body'),
}

model CreateModuleVersionResponseBody = {
  moduleVersion?: string(name='moduleVersion', example='v1'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model CreateModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModuleVersionResponseBody(name='body'),
}

async function createModuleVersion(request: CreateModuleVersionRequest): CreateModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModuleVersion', 'POST', '/modules/{moduleId}/versions', 'json', false, 'json', request);
}

model CreateParameterSetRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', example='test', position='Body'),
  parameters?: [ 
    {
      name?: string(name='name', example='test1121'),
      type?: string(name='type', example='string'),
      value?: string(name='value', example='test'),
    }
  ](name='parameters', position='Body'),
}

model CreateParameterSetResponseBody = {
  parameterSetId?: string(name='parameterSetId', example='pts-3b6cb9fa4751afff89a4b73779e0d'),
  requestId?: string(name='requestId', example='7FA0FF4A-ABD4-54F6-BEAC-B4273EBA10A2'),
}

model CreateParameterSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateParameterSetResponseBody(name='body'),
}

async function createParameterSet(request: CreateParameterSetRequest): CreateParameterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateParameterSet', 'POST', '/parameterSets', 'json', false, 'json', request);
}

model CreateProjectRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', example='test', position='Body'),
}

model CreateProjectResponseBody = {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c'),
  requestId?: string(name='requestId', example='3E49127A-BB65-5CCD-AB93-0EC0A43E5446'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/project', 'json', false, 'json', request);
}

model CreateProjectBuildRequest {
  projectId: string(name='projectId', example='p-433aead7560571e66e31274ffd2', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  groupId?: string(name='groupId', position='Body'),
  projectBuildAction: string(name='projectBuildAction', example='refresh', position='Body'),
  taskIds?: [ string ](name='taskIds', position='Body'),
  taskPolicies?: [ 
    {
      destroyAfterExecution?: boolean(name='destroyAfterExecution', example='destroyAfterExecution'),
      priority?: long(name='priority', example='30'),
      taskId?: string(name='taskId', example='task-60f24b4eb47f1135b7b14ddbdfd'),
    }
  ](name='taskPolicies', position='Body'),
}

model CreateProjectBuildResponseBody = {
  id?: string(name='id', example='pb-433aead756057193ba8bb410945'),
  requestId?: string(name='requestId', example='EE295EEC-EA85-5899-B2D5-5FCA788AC3C6'),
}

model CreateProjectBuildResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectBuildResponseBody(name='body'),
}

async function createProjectBuild(request: CreateProjectBuildRequest): CreateProjectBuildResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProjectBuild', 'POST', '/project/{projectId}/build', 'json', false, 'json', request);
}

model CreateRabbitmqPublisherRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='ok', position='Body'),
  exchangeName: string(name='exchangeName', example='ExchangeTest', position='Body'),
  exchangeType?: string(name='exchangeType', example='TOPIC', position='Body'),
  hostName: string(name='hostName', position='Body'),
  name: string(name='name', example='MQ', position='Body'),
  password: string(name='password', example='NDAxREVDQzI2MjA0OT****', position='Body'),
  port: long(name='port', example='5672', position='Body'),
  userName: string(name='userName', example='MjoxODgwNzcwODY5MD****', position='Body'),
  virtualHost: string(name='virtualHost', example='Test', position='Body'),
}

model CreateRabbitmqPublisherResponseBody = {
  publisherId?: string(name='publisherId', example='mqp-3b6cb9fa4751afffb0af06b9ba504'),
  requestId?: string(name='requestId', example='C3DA172D-DDCF-5268-BB0F-060C3A9D2623'),
}

model CreateRabbitmqPublisherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRabbitmqPublisherResponseBody(name='body'),
}

async function createRabbitmqPublisher(request: CreateRabbitmqPublisherRequest): CreateRabbitmqPublisherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRabbitmqPublisher', 'POST', '/publishers', 'json', false, 'json', request);
}

model CreateRamPolicyExportTaskRequest {
  authorizationAccountIds?: [ long ](name='authorizationAccountIds', position='Body'),
  authorizationActions?: [ string ](name='authorizationActions', position='Body'),
  authorizationRegionIds?: [ string ](name='authorizationRegionIds', position='Body'),
  clientToken: string(name='clientToken', example='2da11a5501f18cc5e004', position='Body'),
  moduleId: string(name='moduleId', example='mod-148e785fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name: string(name='name', example='test', position='Body'),
  ramRole?: string(name='ramRole', example='ramName', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Manual', position='Body'),
}

model CreateRamPolicyExportTaskResponseBody = {
  id?: string(name='id', example='rpe-436057ffe0252e48f9286a'),
  requestId?: string(name='requestId', example='9AC66641-C0F1-533B-AB58-982FC7B1C32A'),
}

model CreateRamPolicyExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRamPolicyExportTaskResponseBody(name='body'),
}

async function createRamPolicyExportTask(request: CreateRamPolicyExportTaskRequest): CreateRamPolicyExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRamPolicyExportTask', 'POST', '/ramPolicyExportTasks', 'json', false, 'json', request);
}

model CreateResourceExportTaskRequest {
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  configPath?: string(name='configPath', position='Body'),
  description?: string(name='description', example='OK', position='Body'),
  excludeRules?: [ 
    {
      key?: string(name='key', example='VPC'),
      values?: [ string ](name='values'),
    }
  ](name='excludeRules', position='Body'),
  exportToModule?: {
    source?: string(name='source', example='Registry'),
    sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
    statePath?: string(name='statePath', example='/'),
  }(name='exportToModule', position='Body'),
  includeRules?: [ 
    {
      key?: string(name='key', example='ZoneId'),
      values?: [ string ](name='values'),
    }
  ](name='includeRules', position='Body'),
  name: string(name='name', example='abc', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Auto', position='Body'),
  variables?: [ 
    {
      properties?: [ string ](name='properties'),
      resourceType?: string(name='resourceType', example='AliCloud::VPC::VPC'),
    }
  ](name='variables', position='Body'),
}

model CreateResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-4a1ec8b7003d24528326821be'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='CFD8C2A8-5BE7-56D2-916D-64039B8E06E3'),
}

model CreateResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceExportTaskResponseBody(name='body'),
}

async function createResourceExportTask(request: CreateResourceExportTaskRequest): CreateResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceExportTask', 'POST', '/exportTasks', 'json', false, 'json', request);
}

model CreateTaskRequest {
  autoApply: boolean(name='autoApply', example='true', position='Body'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='demo', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-5fd38c9b92d541a7083a86432e2'),
    projectId?: string(name='projectId', example='project-433aead7560572057e5d9167608'),
  }(name='groupInfo', position='Body'),
  initModuleState?: boolean(name='initModuleState', position='Body'),
  moduleId: string(name='moduleId', example='mod-148e7853433574fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name: string(name='name', example='test', position='Body'),
  parameters?: map[string]string(name='parameters', position='Body'),
  protectionStrategy?: [ string ](name='protectionStrategy', position='Body'),
  ramRole: string(name='ramRole', example='{}', position='Body'),
  skipPropertyValidation?: boolean(name='skipPropertyValidation', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy: string(name='triggerStrategy', example='Always', position='Body'),
  triggerValue?: string(name='triggerValue', example='******', position='Body'),
}

model CreateTaskResponseBody = {
  requestId?: string(name='requestId', example='CD478792-6952-5A1C-9F57-78932BF0FAC6'),
  taskId?: string(name='taskId', example='task-433aead756057fffeaba4828f5195'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/tasks', 'json', false, 'json', request);
}

model DeleteAuthorizationRequest {
  authorizationId: string(name='authorizationId', example='auth-433aead756057be3f6de6c17a7', position='Path'),
}

model DeleteAuthorizationResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model DeleteAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAuthorizationResponseBody(name='body'),
}

async function deleteAuthorization(request: DeleteAuthorizationRequest): DeleteAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAuthorization', 'DELETE', '/authorizations/{authorizationId}', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='requestId', example='1E7BA3EB-B0EF-53F5-9999-07CAD6D9F8A3'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupResponseBody(name='body'),
}

async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroup', 'DELETE', '/group/{groupId}', 'json', false, 'json', request);
}

model DeleteModuleRequest {
  moduleId: string(name='moduleId', example='mod-14e80de4866bf71ef354cc82d17f', position='Path'),
}

model DeleteModuleResponseBody = {
  requestId?: string(name='requestId', example='49DA6457-E545-5095-A930-EB8F0BCD4DAA'),
}

model DeleteModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModuleResponseBody(name='body'),
}

async function deleteModule(request: DeleteModuleRequest): DeleteModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModule', 'DELETE', '/modules/{moduleId}', 'json', false, 'json', request);
}

model DeleteParameterSetRequest {
  parameterSetId: string(name='parameterSetId', example='pts-4c44f5be946dc446a326821b8', position='Path'),
}

model DeleteParameterSetResponseBody = {
  requestId?: string(name='requestId', example='708D670B-67C4-5653-9F88-8F7800429EE1'),
}

model DeleteParameterSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteParameterSetResponseBody(name='body'),
}

async function deleteParameterSet(request: DeleteParameterSetRequest): DeleteParameterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteParameterSet', 'DELETE', '/parameterSets/{parameterSetId}', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  projectId?: string(name='projectId', example='p-148e7853433574fffe9fec72ed9b72', position='Path'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/project/{projectId}', 'json', false, 'json', request);
}

model DeleteRabbitmqPublisherRequest {
  publisherId: string(name='publisherId', example='mqp-3b6cb9fa4751afff780436bcefbf1', position='Path'),
}

model DeleteRabbitmqPublisherResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model DeleteRabbitmqPublisherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRabbitmqPublisherResponseBody(name='body'),
}

async function deleteRabbitmqPublisher(request: DeleteRabbitmqPublisherRequest): DeleteRabbitmqPublisherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRabbitmqPublisher', 'DELETE', '/publishers/{publisherId}', 'json', false, 'json', request);
}

model DeleteRamPolicyExportTaskRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-47ffe0252e48f9286a', position='Path'),
}

model DeleteRamPolicyExportTaskResponseBody = {
  requestId?: string(name='requestId', example='3E49127A-BB65-5CCD-AB93-0EC0A43E5446'),
}

model DeleteRamPolicyExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRamPolicyExportTaskResponseBody(name='body'),
}

async function deleteRamPolicyExportTask(request: DeleteRamPolicyExportTaskRequest): DeleteRamPolicyExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRamPolicyExportTask', 'DELETE', '/ramPolicyExportTasks/{ramPolicyExportTaskId}', 'json', false, 'json', request);
}

model DeleteRamPolicyExportTaskVersionRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-43fe0252e48f9286a', position='Path'),
  exportVersion: string(name='exportVersion', example='v1', position='Path'),
}

model DeleteRamPolicyExportTaskVersionResponseBody = {
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model DeleteRamPolicyExportTaskVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRamPolicyExportTaskVersionResponseBody(name='body'),
}

async function deleteRamPolicyExportTaskVersion(request: DeleteRamPolicyExportTaskVersionRequest): DeleteRamPolicyExportTaskVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRamPolicyExportTaskVersion', 'DELETE', '/ramPolicyExportTasks/{ramPolicyExportTaskId}/versions/{exportVersion}', 'json', false, 'json', request);
}

model DeleteResourceExportTaskRequest {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a16b006b03333a', position='Path'),
}

model DeleteResourceExportTaskResponseBody = {
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model DeleteResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceExportTaskResponseBody(name='body'),
}

async function deleteResourceExportTask(request: DeleteResourceExportTaskRequest): DeleteResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceExportTask', 'DELETE', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model DeleteSceneTestingTaskRequest {
  taskId?: string(name='taskId', example='stt-al1458tbm938k1q15kudru', position='Path'),
}

model DeleteSceneTestingTaskResponseBody = {
  requestId?: string(name='requestId', example='17793D91-A26F-520D-A948-3452A45D15B1'),
}

model DeleteSceneTestingTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSceneTestingTaskResponseBody(name='body'),
}

async function deleteSceneTestingTask(request: DeleteSceneTestingTaskRequest): DeleteSceneTestingTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSceneTestingTask', 'DELETE', '/sceneTestingTask/{taskId}', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  taskId?: string(name='taskId', example='task-123456', position='Path'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='requestId', example='73B38F77-62BA-5878-8952-530DFE21C93B'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTask', 'DELETE', '/tasks/{taskId}', 'json', false, 'json', request);
}

model DetachRabbitmqPublisherRequest {
  publisherId: string(name='publisherId', example='mqp-518855d9a058cea8348cd901d0', position='Path'),
  taskId: string(name='taskId', example='task-518855d9a058cf1127d082bec5', position='Body'),
}

model DetachRabbitmqPublisherResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model DetachRabbitmqPublisherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DetachRabbitmqPublisherResponseBody(name='body'),
}

async function detachRabbitmqPublisher(request: DetachRabbitmqPublisherRequest): DetachRabbitmqPublisherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DetachRabbitmqPublisher', 'POST', '/publishers/{publisherId}/detach', 'json', false, 'json', request);
}

model DissociateGroupRequest {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Path'),
  groupId: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727', position='Path'),
  clientToken?: string(name='clientToken', example='2daf4227f747cbf11a5501f18cc5e004', position='Body'),
  resourceIds: [ string ](name='resourceIds', position='Body'),
  resourceType?: string(name='resourceType', example='Task', position='Body'),
}

model DissociateGroupResponseBody = {
  requestId?: string(name='requestId', example='17793D91-A26F-520D-A948-3452A45D15B1'),
}

model DissociateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateGroupResponseBody(name='body'),
}

async function dissociateGroup(request: DissociateGroupRequest): DissociateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DissociateGroup', 'POST', '/group/{groupId}/dissociate', 'json', false, 'json', request);
}

model DissociateParameterSetRequest {
  parameterSetIds: [ string ](name='parameterSetIds', position='Body'),
  resourceId: string(name='resourceId', example='mod-39cd1e5e58c50e79dd8cd901cd', position='Body'),
  resourceType: string(name='resourceType', example='Module', position='Body'),
}

model DissociateParameterSetResponseBody = {
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model DissociateParameterSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateParameterSetResponseBody(name='body'),
}

async function dissociateParameterSet(request: DissociateParameterSetRequest): DissociateParameterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DissociateParameterSet', 'POST', '/parameterSets/operations/dissociate', 'json', false, 'json', request);
}

model ExecuteRamPolicyExportTaskRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-43ffe1402e77e95092', position='Path'),
}

model ExecuteRamPolicyExportTaskResponseBody = {
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='7FA0FF4A-ABD4-54F6-BEAC-B4273EBA10A2'),
}

model ExecuteRamPolicyExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteRamPolicyExportTaskResponseBody(name='body'),
}

async function executeRamPolicyExportTask(request: ExecuteRamPolicyExportTaskRequest): ExecuteRamPolicyExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteRamPolicyExportTask', 'PUT', '/ramPolicyExportTasks/{ramPolicyExportTaskId}/execute', 'json', false, 'json', request);
}

model ExecuteResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e645ad8365e6', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
}

model ExecuteResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e645ad8365e6'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='0B0A7C19-9077-5975-ACBD-DEE718787992'),
}

model ExecuteResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteResourceExportTaskResponseBody(name='body'),
}

async function executeResourceExportTask(request: ExecuteResourceExportTaskRequest): ExecuteResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteResourceExportTask', 'PUT', '/exportTasks/execute/{exportTaskId}', 'json', false, 'json', request);
}

model GetGroupRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
}

model GetGroupResponseBody = {
  group?: {
    autoDestroy?: boolean(name='autoDestroy', example='true'),
    autoTrigger?: boolean(name='autoTrigger', example='true'),
    createTime?: string(name='createTime', example='2022-08-21T10:57:11Z'),
    description?: string(name='description', example='OK'),
    forcedSetting?: boolean(name='forcedSetting', example='true'),
    groupId?: string(name='groupId', example='g-14e80de4866bf7ffed0bab6154d738'),
    name?: string(name='name', example='abc'),
    notifyConfig?: [ 
      {
        notifyPath?: string(name='notifyPath', example='/'),
        notifyType?: string(name='notifyType', example='DingDing'),
      }
    ](name='notifyConfig'),
    notifyOperationTypes?: [ string ](name='notifyOperationTypes'),
    projectId?: string(name='projectId', example='p-4267dcfbf1b6d126edcadf0e949'),
    ramRole?: string(name='ramRole', example='ramRoleName'),
    reportExportField?: [ string ](name='reportExportField'),
    reportExportPath?: string(name='reportExportPath', example='/'),
    taskCnt?: long(name='taskCnt', example='3'),
    terraformProviderVersion?: string(name='terraformProviderVersion', example='1.191.0'),
    triggerConfig?: [ 
      {
        triggerStrategy?: string(name='triggerStrategy', example='Cron'),
        triggerValue?: string(name='triggerValue', example='0 0 8 * * ?'),
      }
    ](name='triggerConfig'),
    triggerResourceType?: [ string ](name='triggerResourceType'),
  }(name='group'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model GetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResponseBody(name='body'),
}

async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroup', 'GET', '/group/{groupId}', 'json', false, 'json', request);
}

model GetJobRequest {
  taskId: string(name='taskId', example='task-55f1739d9050fffee8fe2a2c4a605', position='Path'),
  jobId: string(name='jobId', example='job-433aead756057ffef0028917e6f26', position='Path'),
}

model GetJobResponseBody = {
  job?: {
    assertCheckDetail?: [ 
      {
        comparison?: string(name='comparison', example='eq'),
        expectedValue?: string(name='expectedValue'),
        isPass?: boolean(name='isPass', example='true'),
        type?: string(name='type', example='result'),
      }
    ](name='assertCheckDetail'),
    config?: {
      autoApply?: boolean(name='autoApply', example='true'),
      isDestroy?: boolean(name='isDestroy', example='fales'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      resourcesChanged?: string(name='resourcesChanged', example='{}'),
      subCommand?: string(name='subCommand'),
    }(name='config'),
    createTime?: string(name='createTime', example='2022-08-31T03:38:40Z'),
    description?: string(name='description', example='test1'),
    downloadUrl?: map[string]any(name='downloadUrl'),
    elapsedTime?: long(name='elapsedTime'),
    isPassAssertCheck?: boolean(name='isPassAssertCheck', example='true'),
    jobId?: string(name='jobId', example='job-518855d9a058cfff0dc933e6b5767'),
    output?: string(name='output', example='/'),
    parameters?: map[string]string(name='parameters'),
    runtimeType?: string(name='runtimeType'),
    status?: string(name='status', example='Errored'),
    statusDetail?: map[string]JobStatusDetailValue(name='statusDetail'),
    taskId?: string(name='taskId', example='task-3b6cb9fa4751a1b9b5f22cbcf4e'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
  }(name='job'),
  requestId?: string(name='requestId', example='1435C78A-AED9-53D6-B7A6-E2661D29B1FA'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/tasks/{taskId}/jobs/{jobId}', 'json', false, 'json', request);
}

model GetModuleRequest {
  moduleId: string(name='moduleId', example='mod-148e7853433574fffe9ca86154d77a', position='Path'),
}

model GetModuleResponseBody = {
  module?: {
    createTime?: string(name='createTime', example='2022-09-06T06:11:27Z'),
    description?: string(name='description', example='test1'),
    latestVersion?: string(name='latestVersion', example='v1'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6d14625614ddbe15'),
    name?: string(name='name', example='abc'),
    outputPath?: string(name='outputPath', example='/'),
    source?: string(name='source', example='OSS'),
    sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"'),
    statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate'),
    status?: string(name='status', example='Created'),
    versionStrategy?: string(name='versionStrategy', example='Manual'),
  }(name='module'),
  requestId?: string(name='requestId', description='Id of the request', example='1E7BA3EB-B0EF-53F5-9999-07CAD6D9F8A3'),
}

model GetModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModuleResponseBody(name='body'),
}

async function getModule(request: GetModuleRequest): GetModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModule', 'GET', '/modules/{moduleId}', 'json', false, 'json', request);
}

model GetModuleVersionRequest {
  moduleId?: string(name='moduleId', example='mod-14e80de4866bf71c92a04fe353b1', position='Path'),
  moduleVersion?: string(name='moduleVersion', example='v1', position='Path'),
}

model GetModuleVersionResponseBody = {
  requestId?: string(name='requestId', example='0D298375-F92F-5B65-82E4-EA68F02521F1'),
  version?: {
    createTime?: string(name='createTime', example='2022-09-08T18:07:40Z'),
    description?: string(name='description', example='description'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6dfffbc27e218d1b66'),
    moduleVersion?: string(name='moduleVersion', example='v1'),
    name?: string(name='name'),
    source?: string(name='source', example='OSS'),
    sourcePath?: string(name='sourcePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip'),
    statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate'),
    terraformContext?: map[string]any(name='terraformContext'),
    versionStrategy?: string(name='versionStrategy', example='Manual'),
  }(name='version'),
}

model GetModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModuleVersionResponseBody(name='body'),
}

async function getModuleVersion(request: GetModuleVersionRequest): GetModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModuleVersion', 'GET', '/modules/{moduleId}/versions/{moduleVersion}', 'json', false, 'json', request);
}

model GetParameterSetRequest {
  parameterSetId: string(name='parameterSetId', example='pts-433aead7560571fc2556dc33a4a', position='Path'),
}

model GetParameterSetResponseBody = {
  parameterSet?: {
    createTime?: string(name='createTime', example='2022-01-30T02:14:16Z'),
    description?: string(name='description', example='OK'),
    name?: string(name='name', example='abc'),
    parameterSetId?: string(name='parameterSetId', example='pts-3b6cb9fa4751afff9c5e4e01624b9'),
    parameters?: [ 
      {
        name?: string(name='name', example='test1121'),
        type?: string(name='type', example='string'),
        value?: any(name='value', example='vpc-2ze83xrka9ktxy0pnaxn5'),
      }
    ](name='parameters'),
    relationList?: [ 
      {
        createTime?: string(name='createTime', example='2022-04-24T22:58:50Z'),
        resourceId?: string(name='resourceId', example='mod-433aead756057101546eb5d50c1'),
        resourceType?: string(name='resourceType', example='Module'),
      }
    ](name='relationList'),
  }(name='parameterSet'),
  requestId?: string(name='requestId', example='99905C7C-1320-5E7F-A798-3071482EB08E'),
}

model GetParameterSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetParameterSetResponseBody(name='body'),
}

async function getParameterSet(request: GetParameterSetRequest): GetParameterSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetParameterSet', 'GET', '/parameterSets/{parameterSetId}', 'json', false, 'json', request);
}

model GetProjectRequest {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Path'),
}

model GetProjectResponseBody = {
  project?: {
    createTime?: string(name='createTime', example='2022-09-06T06:11:27Z'),
    description?: string(name='description', example='abc'),
    name?: string(name='name', example='abc'),
    projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c'),
    taskCnt?: long(name='taskCnt', example='2'),
  }(name='project'),
  requestId?: string(name='requestId', example='7FA0FF4A-ABD4-54F6-BEAC-B4273EBA10A2'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/project/{projectId}', 'json', false, 'json', request);
}

model GetProjectBuildContextRequest {
  projectId: string(name='projectId', example='p-5fd38c9b92d541a6521a86432e0', position='Path'),
  projectBuildId: string(name='projectBuildId', example='pb-433aead75605718f20ba0375f99', position='Path'),
  isPassAssertCheck?: boolean(name='isPassAssertCheck', position='Query'),
  status?: string(name='status', position='Query'),
}

model GetProjectBuildContextResponseBody = {
  projectBuild?: {
    endTime?: string(name='endTime', example='1646719546155'),
    failCnt?: long(name='failCnt', example='2'),
    jobList?: [ 
      {
        elapsedTime?: long(name='elapsedTime'),
        isDeleted?: long(name='isDeleted', example='0'),
        isPassAssertCheck?: boolean(name='isPassAssertCheck'),
        jobId?: string(name='jobId', example='job-518855d9a058cfff262b993646d12'),
        moduleId?: string(name='moduleId', example='mod-3b6cb9fa4751a107afd6c2c3eb9'),
        moduleName?: string(name='moduleName'),
        moduleVersion?: string(name='moduleVersion', example='v1'),
        name?: string(name='name', example='test7'),
        status?: string(name='status', example='Pending'),
        taskId?: string(name='taskId', example='task-433aead756057ffe67aefed4aa75d'),
        terraformProviderVersion?: string(name='terraformProviderVersion'),
        type?: string(name='type'),
      }
    ](name='jobList'),
    jobTotalCnt?: long(name='jobTotalCnt', example='3'),
    projectBuildId?: string(name='projectBuildId', example='pb-4267dcfbf1b6d13c7d2386cba7'),
    projectId?: string(name='projectId', example='p-4267dcfbf1b6d1e0652bfbbe994'),
    resourceCnt?: long(name='resourceCnt', example='0'),
    resourceList?: [ 
      {
        info?: map[string]string(name='info'),
        resourceCnt?: long(name='resourceCnt', example='1'),
        resourceType?: string(name='resourceType', example='Module'),
      }
    ](name='resourceList'),
    resourceTypeCnt?: long(name='resourceTypeCnt', example='0'),
    status?: string(name='status', example='Pending'),
    successCnt?: long(name='successCnt', example='1'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
    triggerStrategy?: string(name='triggerStrategy'),
  }(name='ProjectBuild'),
  requestId?: string(name='requestId', description='Id of the request', example='C54F3939-9112-5795-A5A7-5322E2FB2257'),
}

model GetProjectBuildContextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectBuildContextResponseBody(name='body'),
}

async function getProjectBuildContext(request: GetProjectBuildContextRequest): GetProjectBuildContextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProjectBuildContext', 'GET', '/project/{projectId}/build/{projectBuildId}', 'json', false, 'json', request);
}

model GetRabbitmqPublisherRequest {
  publisherId: string(name='publisherId', example='mqp-3b6cb9fa4751afff780436bcefbf1', position='Path'),
}

model GetRabbitmqPublisherResponseBody = {
  publisher?: {
    createTime?: string(name='createTime', example='2022-10-05T06:07:48Z'),
    description?: string(name='description', example='description'),
    exchangeName?: string(name='exchangeName', example='ExchangeTest'),
    exchangeType?: string(name='exchangeType', example='TOPIC'),
    hostName?: string(name='hostName', example='1880770****.mq-amqp.cn-hangzhou-a.aliyuncs.com'),
    name?: string(name='name', example='test123'),
    port?: long(name='port', example='5671'),
    publisherId?: string(name='publisherId', example='mqp-3b6cb9fa4751a6fa1b69b8dca1'),
    taskIds?: [ string ](name='taskIds'),
    userName?: string(name='userName', example='MjoxODgwNzcwODY5MD****'),
    virtualHost?: string(name='virtualHost', example='MjoxODgwNzcwODY5MD****'),
  }(name='publisher'),
  requestId?: string(name='requestId', example='1E7BA3EB-B0EF-53F5-9999-07CAD6D9F8A3'),
}

model GetRabbitmqPublisherResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRabbitmqPublisherResponseBody(name='body'),
}

async function getRabbitmqPublisher(request: GetRabbitmqPublisherRequest): GetRabbitmqPublisherResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRabbitmqPublisher', 'GET', '/publishers/{publisherId}', 'json', false, 'json', request);
}

model GetRamPolicyExportTaskRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-47ffe0252e48f9286a', position='Path'),
}

model GetRamPolicyExportTaskResponseBody = {
  ramPolicyExportTask?: {
    authorizationAccountIds?: [ long ](name='authorizationAccountIds'),
    authorizationActions?: [ string ](name='authorizationActions'),
    authorizationRegionIds?: [ string ](name='authorizationRegionIds'),
    createTime?: string(name='createTime', example='2022-06-16T10:03:39Z'),
    moduleId?: string(name='moduleId', example='mod-66c23a9cc0cacddf'),
    moduleVersion?: string(name='moduleVersion', example='v1'),
    name?: string(name='name', example='test'),
    ramPolicyExportTaskId?: string(name='ramPolicyExportTaskId', example='rpe-40252e48f9286a'),
    ramRole?: string(name='ramRole', example='ramName'),
    status?: string(name='status', example='Available'),
    taskOutputPath?: string(name='taskOutputPath', example='12345678/default/rampolicytask/rpe-4399111870d7e6b0f11a'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
    triggerStrategy?: string(name='triggerStrategy', example='Manual'),
  }(name='ramPolicyExportTask'),
  requestId?: string(name='requestId', example='3E49127A-BB65-5CCD-AB93-0EC0A43E5446'),
}

model GetRamPolicyExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRamPolicyExportTaskResponseBody(name='body'),
}

async function getRamPolicyExportTask(request: GetRamPolicyExportTaskRequest): GetRamPolicyExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRamPolicyExportTask', 'GET', '/ramPolicyExportTasks/{ramPolicyExportTaskId}', 'json', false, 'json', request);
}

model GetRamPolicyExportTaskVersionRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-433affe0252e48f9286a', position='Path'),
  exportVersion: string(name='exportVersion', example='v1', position='Path'),
}

model GetRamPolicyExportTaskVersionResponseBody = {
  ramPolicyExportTaskVersion?: {
    authorizationAccountIds?: [ long ](name='authorizationAccountIds'),
    authorizationActions?: [ string ](name='authorizationActions'),
    authorizationRegionIds?: [ string ](name='authorizationRegionIds'),
    createTime?: string(name='createTime', example='2022-07-18T06:32:06Z'),
    elapsedTime?: long(name='elapsedTime'),
    exportVersion?: string(name='exportVersion', example='v1'),
    failedReason?: string(name='failedReason', example='the ram policy export task has time out, The maximum running time is 1 hour'),
    missingActions?: [ string ](name='missingActions'),
    moduleId?: string(name='moduleId', example='mod-4357ffeebf6b577c4afa'),
    moduleVersion?: string(name='moduleVersion', example='v1'),
    noSupportResourceTypes?: [ string ](name='noSupportResourceTypes'),
    policyDocument?: string(name='policyDocument', example='"{
    "version": "1",
    "statement": [
      {
        "effect": "Allow",
        "action": [
          "ecs:*"
        ],
        "resource": [
          "*"
        ],
        "condition": null,
        "supportVariables": []
      }
    ]
  }"'),
    ramPolicyExportTaskId?: string(name='ramPolicyExportTaskId', example='rpe-43ffe0252e48f9286a'),
    status?: string(name='status', example='Success'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
    unauthorizedActions?: [ string ](name='unauthorizedActions'),
    warnMessage?: string(name='warnMessage'),
  }(name='ramPolicyExportTaskVersion'),
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model GetRamPolicyExportTaskVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRamPolicyExportTaskVersionResponseBody(name='body'),
}

async function getRamPolicyExportTaskVersion(request: GetRamPolicyExportTaskVersionRequest): GetRamPolicyExportTaskVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRamPolicyExportTaskVersion', 'GET', '/ramPolicyExportTasks/{ramPolicyExportTaskId}/versions/{exportVersion}', 'json', false, 'json', request);
}

model GetResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', position='Path'),
  exportVersion?: string(name='exportVersion', position='Query'),
}

model GetResourceExportTaskResponseBody = {
  requestId?: string(name='requestId'),
  task?: {
    configPath?: string(name='configPath'),
    createTime?: string(name='createTime'),
    description?: string(name='description'),
    elapsedTime?: long(name='elapsedTime'),
    excludeRules?: [ 
      {
        key?: string(name='key'),
        values?: [ string ](name='values'),
      }
    ](name='excludeRules'),
    exportTaskId?: string(name='exportTaskId'),
    exportToModule?: {
      source?: string(name='source'),
      sourcePath?: string(name='sourcePath'),
      statePath?: string(name='statePath'),
    }(name='exportToModule'),
    exportVersion?: string(name='exportVersion'),
    failedReason?: string(name='failedReason'),
    includeRules?: [ 
      {
        key?: string(name='key'),
        values?: [ string ](name='values'),
      }
    ](name='includeRules'),
    modules?: [ 
      {
        source?: string(name='source'),
        sourcePath?: string(name='sourcePath'),
        version?: string(name='version'),
      }
    ](name='modules'),
    name?: string(name='name'),
    ramRole?: string(name='ramRole'),
    status?: string(name='status'),
    taskOutputPath?: string(name='taskOutputPath'),
    terraformContext?: map[string]any(name='terraformContext'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
    terraformVersion?: string(name='terraformVersion'),
    triggerStrategy?: string(name='triggerStrategy'),
    variables?: [ 
      {
        properties?: [ string ](name='properties'),
        resourceType?: string(name='resourceType'),
      }
    ](name='variables'),
  }(name='task'),
}

model GetResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceExportTaskResponseBody(name='body'),
}

async function getResourceExportTask(request: GetResourceExportTaskRequest): GetResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceExportTask', 'GET', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model GetTaskRequest {
  taskId: string(name='taskId', example='task-433aead7560571f8c2e176e7325', position='Path'),
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C24C498A-09CF-54D3-8972-8DC074CF8614'),
  task?: {
    autoApply?: boolean(name='autoApply', example='true'),
    autoDestroy?: boolean(name='autoDestroy', example='false'),
    createTime?: string(name='createTime', example='2022-06-15T02:44:37Z'),
    currentJobId?: string(name='currentJobId', example='job-absdf'),
    description?: string(name='description', example='demo'),
    groupInfo?: {
      groupId?: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727'),
      groupName?: string(name='groupName', example='abc'),
      projectId?: string(name='projectId', example='p-433aead756057fff47ecbfd94d76'),
      projectName?: string(name='projectName', example='abc'),
    }(name='groupInfo'),
    initModuleState?: boolean(name='initModuleState'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6d14625614ddbe15'),
    moduleVersion?: string(name='moduleVersion', example='v2'),
    name?: string(name='name'),
    parameters?: map[string]string(name='parameters'),
    protectionStrategy?: [ string ](name='protectionStrategy'),
    ramRole?: string(name='ramRole', example='{}'),
    skipPropertyValidation?: boolean(name='skipPropertyValidation'),
    status?: string(name='status', example='Running'),
    taskId?: string(name='taskId', example='task-433aead756057154bda7f1c2e98'),
    taskOutputPath?: string(name='taskOutputPath', example='/'),
    terraformVersion?: string(name='terraformVersion', example='1.2.6'),
    triggerStrategy?: string(name='triggerStrategy', example='Manual'),
    triggerValue?: string(name='triggerValue', example='***10*'),
  }(name='task'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/tasks/{taskId}', 'json', false, 'json', request);
}

model GetTaskPolicyRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
  type?: string(name='type', example='SceneTestingTask', position='Query'),
}

model GetTaskPolicyResponseBody = {
  requestId?: string(name='requestId', example='0D797DC3-FF04-5C21-81EB-92C7799512E3'),
  taskPolicy?: {
    groupId?: string(name='groupId', example='g-433aead7560571e66e31274ffd3'),
    taskPolicies?: [ 
      {
        priority?: long(name='priority', example='5'),
        taskId?: string(name='taskId', example='task-433aead7560571d0938bfbbe957'),
        taskName?: string(name='taskName'),
        type?: string(name='type', example='SceneTestingTask'),
      }
    ](name='taskPolicies'),
  }(name='taskPolicy'),
}

model GetTaskPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskPolicyResponseBody(name='body'),
}

async function getTaskPolicy(request: GetTaskPolicyRequest): GetTaskPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskPolicy', 'GET', '/group/task/policy/{groupId}', 'json', false, 'json', request);
}

model ListAuthorizationsRequest {
  authorizationId?: string(name='authorizationId', example='auth-433aead756057ffec22d5b1ef27ac', position='Query'),
  authorizationType: string(name='authorizationType', example='others', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='10', minimum=1, maximum=100, position='Query'),
}

model ListAuthorizationsResponseBody = {
  authorizations?: [ 
    {
      authorizationId?: string(name='authorizationId', example='auth-433aead756057ffee37b763564fdd'),
      createTime?: string(name='createTime', example='2022-06-16T03:41:34Z'),
      dueTime?: string(name='dueTime'),
      moduleId?: string(name='moduleId', example='mod-395f8626622affff71ccbf5b25885'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      name?: string(name='name', example='test'),
      ownerUid?: long(name='ownerUid', example='aadfaf'),
      uid?: long(name='uid', example='asdf123'),
    }
  ](name='authorizations'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  requestId?: string(name='requestId', description='Id of the request', example='C67A913A-2A0F-53F6-A041-56CC4CA1E593'),
  totalCount?: int32(name='totalCount', example='72'),
}

model ListAuthorizationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizationsResponseBody(name='body'),
}

async function listAuthorizations(request: ListAuthorizationsRequest): ListAuthorizationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAuthorizations', 'GET', '/authorizations', 'json', false, 'json', request);
}

model ListAvailableTerraformVersionsRequest {
  keyWord?: string(name='keyWord', example='1.35', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='20', position='Query'),
}

model ListAvailableTerraformVersionsResponseBody = {
  requestId?: string(name='requestId', example='b19952f6-1e03-43e3-ac9b-1be20c9ac1a6'),
  totalCount?: int32(name='totalCount', example='58'),
  verisonList?: [ string ](name='verisonList'),
}

model ListAvailableTerraformVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAvailableTerraformVersionsResponseBody(name='body'),
}

async function listAvailableTerraformVersions(request: ListAvailableTerraformVersionsRequest): ListAvailableTerraformVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAvailableTerraformVersions', 'GET', '/version/terraform', 'json', false, 'json', request);
}

model ListGroupRequest {
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: string(name='pageNumber', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='200', position='Query'),
  projectId?: string(name='projectId', example='p-14e80de4866bf7ffed0c4072ed9b37', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListGroupResponseBody = {
  count?: long(name='count', example='3'),
  groups?: [ 
    {
      createTime?: string(name='createTime', example='2022-09-14T07:19:13Z'),
      description?: string(name='description', example='OK'),
      groupId?: string(name='groupId', example='g-148e7853433574fffe9fec72ed9b73'),
      isDefault?: boolean(name='isDefault', example='true'),
      moduleCnt?: long(name='moduleCnt', example='1'),
      name?: string(name='name', example='1'),
      projectId?: string(name='projectId', example='p-4267dcfbf1b6d126edcadf0e949'),
      sceneTestingTaskCnt?: long(name='sceneTestingTaskCnt', example='1'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskCnt?: long(name='taskCnt', example='3'),
    }
  ](name='groups'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model ListGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupResponseBody(name='body'),
}

async function listGroup(request: ListGroupRequest): ListGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroup', 'GET', '/group', 'json', false, 'json', request);
}

model ListJobsRequest {
  taskId: string(name='taskId', example='task-55f1739d9050fffe7f5a9577c4a84', position='Path'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', example='Errored', position='Query'),
}

model ListJobsResponseBody = {
  jobs?: [ 
    {
      config?: {
        moduleVersion?: string(name='moduleVersion', example='v4'),
        resourcesChanged?: string(name='resourcesChanged', example='{}'),
      }(name='config'),
      createTime?: string(name='createTime', example='2022-07-05T02:13:43Z'),
      description?: string(name='description', example='OK'),
      elapsedTime?: long(name='elapsedTime'),
      isPassAssertCheck?: boolean(name='isPassAssertCheck', example='true'),
      jobId?: string(name='jobId', example='job-433aead756057fff9e4dca57b147c'),
      status?: string(name='status', example='Errored'),
      statusDetail?: map[string]JobsStatusDetailValue(name='statusDetail'),
      taskId?: string(name='taskId', example='task-518855d9a058c1176866c2c3efb'),
      terraformProviderVersion?: string(name='terraformProviderVersion'),
    }
  ](name='jobs'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='882304F9-6DB1-5593-A719-33473D082B9C'),
  totalCount?: int32(name='totalCount', example='11'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/tasks/{taskId}/jobs', 'json', false, 'json', request);
}

model ListModuleVersionRequest {
  moduleId: string(name='moduleId', example='mod-433aead756057fff39b2f7ac8b798', position='Path'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='20', position='Query'),
}

model ListModuleVersionResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='792171BB-1A68-5148-8B9B-C7C728E1E98B'),
  totalCount?: int32(name='totalCount', example='6'),
  versions?: [ 
    {
      createTime?: string(name='createTime', example='2022-05-13T02:21:49Z'),
      description?: string(name='description', example='description'),
      moduleId?: string(name='moduleId', example='mod-55f1739d9050fffed3ec3a2c4a5e5'),
      moduleVersion?: string(name='moduleVersion', example='v3'),
      name?: string(name='name', example='name'),
      sourcePath?: string(name='sourcePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip'),
    }
  ](name='versions'),
}

model ListModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModuleVersionResponseBody(name='body'),
}

async function listModuleVersion(request: ListModuleVersionRequest): ListModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModuleVersion', 'GET', '/modules/{moduleId}/versions', 'json', false, 'json', request);
}

model ListModulesRequest {
  excludeModuleIds?: [ string ](name='excludeModuleIds', shrink='simple', position='Query'),
  groupId?: string(name='groupId', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  projectId?: string(name='projectId', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListModulesResponseBody = {
  modules?: [ 
    {
      createTime?: string(name='createTime', example='2022-01-30T02:14:16Z'),
      deletionProtection?: boolean(name='deletionProtection', example='false'),
      description?: string(name='description', example='description'),
      groupInfo?: {
        groupId?: string(name='groupId'),
        groupName?: string(name='groupName'),
        projectId?: string(name='projectId'),
        projectName?: string(name='projectName'),
      }(name='groupInfo'),
      latestVersion?: string(name='latestVersion', example='v1'),
      meta?: map[string]any(name='meta'),
      moduleId?: string(name='moduleId', example='mod-518855d9a058cdbd3fd6951d59'),
      name?: string(name='name'),
      source?: string(name='source', example='OSS'),
      sourceConfig?: map[string]any(name='sourceConfig'),
      status?: string(name='status', example='Created'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
    }
  ](name='modules'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='C617E03B-3DD2-5F0C-A6CF-3028B499A2D5'),
  totalCount?: int32(name='totalCount', example='2790'),
}

model ListModulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModulesResponseBody(name='body'),
}

async function listModules(request: ListModulesRequest): ListModulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModules', 'GET', '/modules', 'json', false, 'json', request);
}

model ListParameterSetRelationRequest {
  resourceId: string(name='resourceId', position='Query'),
  resourceType: string(name='resourceType', position='Query'),
}

model ListParameterSetRelationResponseBody = {
  parameterSets?: [ 
    {
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      name?: string(name='name'),
      parameterSetId?: string(name='parameterSetId'),
      parameters?: map[string]string(name='parameters'),
    }
  ](name='parameterSets'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListParameterSetRelationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListParameterSetRelationResponseBody(name='body'),
}

async function listParameterSetRelation(request: ListParameterSetRelationRequest): ListParameterSetRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListParameterSetRelation', 'GET', '/parameterSets/operations/relation', 'json', false, 'json', request);
}

model ListParameterSetsRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
}

model ListParameterSetsResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  parameterSets?: [ 
    {
      createTime?: string(name='createTime', example='2022-05-14T10:05:19Z'),
      deletionProtection?: boolean(name='deletionProtection'),
      description?: string(name='description', example='OK'),
      name?: string(name='name', example='12'),
      parameterSetId?: string(name='parameterSetId', example='pts-433aead756057ea135b21e89c'),
      parameters?: [ 
        {
          name?: string(name='name'),
          type?: string(name='type', example='string'),
          value?: any(name='value', example='111'),
        }
      ](name='parameters'),
      relationList?: [ 
        {
          createTime?: string(name='createTime', example='2022-06-09T03:46:18Z'),
          resourceId?: string(name='resourceId', example='task-433aead756057ffdf5326bf1e12ed'),
          resourceType?: string(name='resourceType', example='Module'),
        }
      ](name='relationList'),
    }
  ](name='parameterSets'),
  requestId?: string(name='requestId', example='4E188A8C-D77A-53F2-9578-E9AD8ABF2FA9'),
  totalCount?: int32(name='totalCount', example='50'),
}

model ListParameterSetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListParameterSetsResponseBody(name='body'),
}

async function listParameterSets(request: ListParameterSetsRequest): ListParameterSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListParameterSets', 'GET', '/parameterSets', 'json', false, 'json', request);
}

model ListProjectRequest {
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: string(name='pageNumber', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', example='3'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  projects?: [ 
    {
      createTime?: string(name='createTime', example='2022-05-10T10:08:34Z'),
      description?: string(name='description', example='abc'),
      name?: string(name='name', example='1234'),
      projectId?: string(name='projectId', example='p-148e7853433574fffe9fec72ed9b72'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskCnt?: long(name='taskCnt', example='2'),
    }
  ](name='projects'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model ListProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectResponseBody(name='body'),
}

async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/project', 'json', false, 'json', request);
}

model ListProjectBuildsRequest {
  projectId: string(name='projectId', example='p-3c1cc04a66dbeffe6810772ed9b2a', position='Path'),
  groupId?: string(name='groupId', position='Query'),
  pageNumber?: string(name='pageNumber', position='Query'),
  pageSize?: string(name='pageSize', position='Query'),
  projectBuildAction?: string(name='projectBuildAction', position='Query'),
}

model ListProjectBuildsResponseBody = {
  projectBuilds?: [ 
    {
      createTime?: string(name='createTime', example='2022-08-26T02:10:48Z'),
      endTime?: string(name='endTime'),
      projectBuildAction?: string(name='projectBuildAction', example='apply'),
      projectBuildId?: string(name='projectBuildId', example='pb-433aead75605717728b6a27615f'),
      projectBuildIndex?: long(name='projectBuildIndex', example='1661221432088'),
      projectId?: string(name='projectId', example='p-14e80de4866bf7ffed0bab6154d737'),
      status?: string(name='status', example='Pending'),
      terraformProviderVersion?: string(name='terraformProviderVersion'),
      timestamp?: long(name='timestamp', example='1661221432088'),
      triggerStrategy?: string(name='triggerStrategy'),
    }
  ](name='ProjectBuilds'),
  pageNumber?: long(name='pageNumber'),
  pageSize?: long(name='pageSize'),
  requestId?: string(name='requestId', description='Id of the request', example='89154E16-FB0A-573D-8AF5-CF3F2FE28913'),
  totalCount?: int32(name='totalCount', example='15'),
}

model ListProjectBuildsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectBuildsResponseBody(name='body'),
}

async function listProjectBuilds(request: ListProjectBuildsRequest): ListProjectBuildsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjectBuilds', 'GET', '/project/{projectId}/build', 'json', false, 'json', request);
}

model ListRabbitmqPublishersRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
}

model ListRabbitmqPublishersResponseBody = {
  authorizations?: [ 
    {
      createTime?: string(name='createTime', example='2022-06-16T03:41:34Z'),
      description?: string(name='description', example='description'),
      exchangeName?: string(name='exchangeName', example='exchangeName'),
      exchangeType?: string(name='exchangeType', example='TOPIC'),
      hostName?: string(name='hostName'),
      name?: string(name='name', example='MQ'),
      port?: long(name='port', example='5671'),
      publisherId?: string(name='publisherId', example='mqp-3b6cb9fa4751a6e5cd2682246'),
      userName?: string(name='userName', example='MjoxODgwNzcwODY5MD***'),
      virtualHost?: string(name='virtualHost', example='virtualHost'),
    }
  ](name='authorizations'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='6599600A-20F6-556D-A15C-55EB9243BB24'),
  totalCount?: int32(name='totalCount', example='72'),
}

model ListRabbitmqPublishersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRabbitmqPublishersResponseBody(name='body'),
}

async function listRabbitmqPublishers(request: ListRabbitmqPublishersRequest): ListRabbitmqPublishersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRabbitmqPublishers', 'GET', '/publishers', 'json', false, 'json', request);
}

model ListRamPolicyExportTaskVersionsRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-4356057ffe0252e48f9286a', position='Path'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', example='Success', position='Query'),
}

model ListRamPolicyExportTaskVersionsResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  ramPolicyExportTaskVersions?: [ 
    {
      createTime?: string(name='createTime', example='2022-07-04T02:11:29Z'),
      elapsedTime?: long(name='elapsedTime'),
      exportVersion?: string(name='exportVersion', example='v1'),
      moduleId?: string(name='moduleId', example='mod-51da8a8a36c166'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      ramPolicyExportTaskId?: string(name='ramPolicyExportTaskId', example='rpe-437ffe0252e48f9286a'),
      status?: string(name='status', example='Success'),
    }
  ](name='ramPolicyExportTaskVersions'),
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
  totalCount?: int32(name='totalCount', example='50'),
}

model ListRamPolicyExportTaskVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRamPolicyExportTaskVersionsResponseBody(name='body'),
}

async function listRamPolicyExportTaskVersions(request: ListRamPolicyExportTaskVersionsRequest): ListRamPolicyExportTaskVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRamPolicyExportTaskVersions', 'GET', '/ramPolicyExportTasks/{ramPolicyExportTaskId}/versions', 'json', false, 'json', request);
}

model ListRamPolicyExportTasksRequest {
  keyword?: string(name='keyword', example='vpc', position='Query'),
  moduleId?: string(name='moduleId', example='mod-43143bd9145a5258', position='Query'),
  moduleVersion?: string(name='moduleVersion', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
}

model ListRamPolicyExportTasksResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  ramPolicyExportTasks?: [ 
    {
      createTime?: string(name='createTime', example='2022-09-16T03:59:27Z'),
      currentPolicyStatus?: string(name='currentPolicyStatus'),
      currentPolicyVersion?: string(name='currentPolicyVersion'),
      elapsedTime?: long(name='elapsedTime'),
      exportTime?: string(name='exportTime'),
      moduleId?: string(name='moduleId', example='mod-51fdfefa8788e82c9'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      name?: string(name='name', example='test'),
      ramPolicyExportTaskId?: string(name='ramPolicyExportTaskId', example='rpe-457ffe0252e48f9286a'),
      status?: string(name='status', example='Available'),
      taskOutputPath?: string(name='taskOutputPath', example='12345678/default/rampolicytask/rpe-4399111870d7e6b0f11a'),
    }
  ](name='ramPolicyExportTasks'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
  totalCount?: int32(name='totalCount', example='43'),
}

model ListRamPolicyExportTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRamPolicyExportTasksResponseBody(name='body'),
}

async function listRamPolicyExportTasks(request: ListRamPolicyExportTasksRequest): ListRamPolicyExportTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRamPolicyExportTasks', 'GET', '/ramPolicyExportTasks', 'json', false, 'json', request);
}

model ListResourceExportTaskVersionsRequest {
  exportTaskId: string(name='exportTaskId', position='Path'),
  exportVersion?: string(name='exportVersion', position='Query'),
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: int32(name='pageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', position='Query'),
}

model ListResourceExportTaskVersionsResponseBody = {
  exportTasks?: [ 
    {
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      elapsedTime?: long(name='elapsedTime'),
      excludeRules?: [ 
        {
          key?: string(name='key'),
          values?: [ string ](name='values'),
        }
      ](name='excludeRules'),
      exportTaskId?: string(name='exportTaskId'),
      exportToModule?: {
        source?: string(name='source'),
        sourcePath?: string(name='sourcePath'),
        statePath?: string(name='statePath'),
      }(name='exportToModule'),
      exportVersion?: string(name='exportVersion'),
      failedReason?: string(name='failedReason'),
      hasDestroy?: boolean(name='hasDestroy'),
      includeRules?: [ 
        {
          key?: string(name='key'),
          values?: [ string ](name='values'),
        }
      ](name='includeRules'),
      modules?: [ 
        {
          source?: string(name='source'),
          sourcePath?: string(name='sourcePath'),
          version?: string(name='version'),
        }
      ](name='modules'),
      name?: string(name='name'),
      status?: string(name='status'),
      variables?: [ 
        {
          properties?: [ string ](name='properties'),
          resourceType?: string(name='resourceType'),
        }
      ](name='variables'),
    }
  ](name='exportTasks'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListResourceExportTaskVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceExportTaskVersionsResponseBody(name='body'),
}

async function listResourceExportTaskVersions(request: ListResourceExportTaskVersionsRequest): ListResourceExportTaskVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceExportTaskVersions', 'GET', '/exportTasks/{exportTaskId}/exportVersions', 'json', false, 'json', request);
}

model ListResourceExportTasksRequest {
  exportTaskId?: string(name='exportTaskId', position='Query'),
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: int32(name='pageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', minimum=1, maximum=100, position='Query'),
}

model ListResourceExportTasksResponseBody = {
  exportTasks?: [ 
    {
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      elapsedTime?: long(name='elapsedTime'),
      excludeRules?: [ 
        {
          key?: string(name='key'),
          values?: [ string ](name='values'),
        }
      ](name='excludeRules'),
      exportStatus?: string(name='exportStatus'),
      exportTaskId?: string(name='exportTaskId'),
      exportToModule?: {
        source?: string(name='source'),
        sourcePath?: string(name='sourcePath'),
        statePath?: string(name='statePath'),
      }(name='exportToModule'),
      exportVersion?: string(name='exportVersion'),
      hasDestroy?: boolean(name='hasDestroy'),
      includeRules?: [ 
        {
          key?: string(name='key'),
          values?: [ string ](name='values'),
        }
      ](name='includeRules'),
      modules?: [ 
        {
          source?: string(name='source'),
          sourcePath?: string(name='sourcePath'),
          version?: string(name='version'),
        }
      ](name='modules'),
      name?: string(name='name'),
      status?: string(name='status'),
      variables?: [ 
        {
          properties?: [ string ](name='properties'),
          resourceType?: string(name='resourceType'),
        }
      ](name='variables'),
    }
  ](name='exportTasks'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListResourceExportTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceExportTasksResponseBody(name='body'),
}

async function listResourceExportTasks(request: ListResourceExportTasksRequest): ListResourceExportTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceExportTasks', 'GET', '/exportTasks', 'json', false, 'json', request);
}

model ListResourcesRequest {
  pageNumber?: int32(name='pageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', minimum=1, maximum=100, position='Query'),
  sourceType: string(name='sourceType', position='Query'),
  sourceValue: string(name='sourceValue', position='Query'),
  specType: string(name='specType', position='Query'),
}

model ListResourcesResponseBody = {
  resources?: [ 
    {
      accountId?: string(name='accountId'),
      createTime?: string(name='createTime'),
      dependsOnResourceIds?: [ string ](name='dependsOnResourceIds'),
      productCode?: string(name='productCode'),
      properties?: map[string]any(name='properties'),
      propertyVariables?: map[string]any(name='propertyVariables'),
      regionId?: string(name='regionId'),
      resourceArn?: string(name='resourceArn'),
      resourceGroupId?: string(name='resourceGroupId'),
      resourceId?: string(name='resourceId'),
      resourceName?: string(name='resourceName'),
      resourceType?: string(name='resourceType'),
      status?: string(name='status'),
      tags?: [ 
        {
          tagKey?: string(name='tagKey'),
          tagValue?: string(name='tagValue'),
        }
      ](name='tags'),
      terraformArn?: string(name='terraformArn'),
      terraformCode?: string(name='terraformCode'),
      zoneId?: string(name='zoneId'),
    }
  ](name='Resources'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId'),
  totalCount?: int32(name='totalCount'),
}

model ListResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourcesResponseBody(name='body'),
}

async function listResources(request: ListResourcesRequest): ListResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResources', 'GET', '/resources/stateparser', 'json', false, 'json', request);
}

model ListTasksRequest {
  excludeTaskIds?: [ string ](name='excludeTaskIds', shrink='simple', position='Query'),
  groupId?: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  moduleId?: string(name='moduleId', example='mod-1525e992f1b62139d1c437d64ae', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Query'),
  status?: string(name='status', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
  taskId?: string(name='taskId', example='task-433aead756057fffeaba4828f5195', position='Query'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='98610149-488B-5E48-B981-8D4CE1AF77CD'),
  tasks?: [ 
    {
      autoApply?: boolean(name='autoApply'),
      createTime?: string(name='createTime', example='2022-07-11T15:09:53Z'),
      currentJobId?: string(name='currentJobId', example='job-123asd'),
      currentJobStatus?: string(name='currentJobStatus', example='Pending'),
      deletionProtection?: boolean(name='deletionProtection'),
      groupInfo?: {
        groupId?: string(name='groupId', example='g-4267dcfbf1b6d1e0652bfbbe995'),
        groupName?: string(name='groupName', example='abc'),
        projectId?: string(name='projectId', example='p-433aead7560571cf1b2bfbbe92b'),
        projectName?: string(name='projectName', example='abc'),
      }(name='groupInfo'),
      moduleId?: string(name='moduleId', example='mod-518855d9a058c331e9c60bc0ce'),
      moduleName?: string(name='moduleName'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      name?: string(name='name', example='abc'),
      status?: string(name='status', example='Running'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskId?: string(name='taskId', example='task-1525e992f1b621b0ca51647876e'),
    }
  ](name='tasks'),
  totalCount?: int32(name='totalCount', example='5'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/tasks', 'json', false, 'json', request);
}

model ListTerraformProviderVersionsRequest {
  keyWord?: string(name='keyWord', example='1.35', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='20', position='Query'),
}

model ListTerraformProviderVersionsResponseBody = {
  requestId?: string(name='requestId', example='73588ebb-9d40-4660-a59f-764636ae6034'),
  totalCount?: int32(name='totalCount', example='50'),
  verisonList?: [ string ](name='verisonList'),
}

model ListTerraformProviderVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTerraformProviderVersionsResponseBody(name='body'),
}

async function listTerraformProviderVersions(request: ListTerraformProviderVersionsRequest): ListTerraformProviderVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTerraformProviderVersions', 'GET', '/version/terraform/provider', 'json', false, 'json', request);
}

model OperateJobRequest {
  taskId: string(name='taskId', example='task-518855d9a058cfffe0e0a92745bbc', position='Path'),
  jobId: string(name='jobId', example='job-5fd38c9b92d54fff865d936f22a39', position='Path'),
  operationType: string(name='operationType', example='execute', position='Path'),
  comment: string(name='comment', example='dasd', maxLength=128, position='Query'),
}

model OperateJobResponseBody = {
  requestId?: string(name='requestId', example='E602681C-A811-5787-9DC3-48BED7537071'),
}

model OperateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateJobResponseBody(name='body'),
}

async function operateJob(request: OperateJobRequest): OperateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OperateJob', 'POST', '/tasks/{taskId}/jobs/{jobId}/operation/{operationType}', 'json', false, 'json', request);
}

model RemoveResourceExportTaskVersionRequest {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e645ad8365e6', position='Path'),
  exportVersion?: string(name='exportVersion', example='v1', position='Path'),
}

model RemoveResourceExportTaskVersionResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model RemoveResourceExportTaskVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveResourceExportTaskVersionResponseBody(name='body'),
}

async function removeResourceExportTaskVersion(request: RemoveResourceExportTaskVersionRequest): RemoveResourceExportTaskVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveResourceExportTaskVersion', 'DELETE', '/exportTasks/{exportTaskId}/{exportVersion}', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='regionId', position='Body'),
  resourceIds: [ string ](name='resourceIds', position='Body'),
  resourceType: string(name='resourceType', position='Body'),
  tags: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/tags', 'json', false, 'json', request);
}

model UpdateAuthorizationAttributeRequest {
  authorizationId: string(name='authorizationId', example='auth-1525e992f1b621ba86575aa4d32', position='Path'),
  dueTime: string(name='dueTime', position='Body'),
  name: string(name='name', example='test', position='Body'),
}

model UpdateAuthorizationAttributeResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='712C87FE-7C24-5298-B3E3-2BCB7AB9ED01'),
}

model UpdateAuthorizationAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAuthorizationAttributeResponseBody(name='body'),
}

async function updateAuthorizationAttribute(request: UpdateAuthorizationAttributeRequest): UpdateAuthorizationAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAuthorizationAttribute', 'PUT', '/authorizations/{authorizationId}', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  groupId: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727', position='Path'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  autoTrigger?: boolean(name='autoTrigger', example='true', position='Body'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  forcedSetting?: boolean(name='forcedSetting', example='true', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  notifyConfig?: [ 
    {
      notifyPath?: string(name='notifyPath', example='/'),
      notifyType?: string(name='notifyType', example='DingDing'),
    }
  ](name='notifyConfig', position='Body'),
  notifyOperationTypes?: [ string ](name='notifyOperationTypes', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  reportExportField?: [ string ](name='reportExportField', position='Body'),
  reportExportPath?: string(name='reportExportPath', example='/', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.183.0', position='Body'),
  triggerConfig?: [ 
    {
      triggerStrategy?: string(name='triggerStrategy', example='Cron'),
      triggerValue?: string(name='triggerValue', example='0 0 * * * ？'),
    }
  ](name='triggerConfig', position='Body'),
  triggerResourceType?: [ string ](name='triggerResourceType', position='Body'),
}

model UpdateGroupResponseBody = {
  requestId?: string(name='requestId', example='4EF5E823-AC0D-5CB5-8F18-1352455A488D'),
}

model UpdateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupResponseBody(name='body'),
}

async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGroup', 'POST', '/group/{groupId}', 'json', false, 'json', request);
}

model UpdateModuleAttributeRequest {
  moduleId: string(name='moduleId', example='mod-62ecaa43022ce189d65f8d4a794', position='Path'),
  description?: string(name='description', example='test', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId'),
    projectId?: string(name='projectId'),
  }(name='groupInfo', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  source?: string(name='source', example='OSS', position='Body'),
  sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"', position='Body'),
  statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate', position='Body'),
  versionStrategy?: string(name='versionStrategy', example='Manual', position='Body'),
}

model UpdateModuleAttributeResponseBody = {
  requestId?: string(name='requestId', example='CA05185E-6B90-5941-98D4-7212688AECC8'),
}

model UpdateModuleAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModuleAttributeResponseBody(name='body'),
}

async function updateModuleAttribute(request: UpdateModuleAttributeRequest): UpdateModuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModuleAttribute', 'PUT', '/modules/{moduleId}', 'json', false, 'json', request);
}

model UpdateParameterSetAttributeRequest {
  parameterSetId: string(name='parameterSetId', example='pts-433aead7560571fc2556dc33a4a', position='Path'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', example='test', position='Body'),
  parameters?: [ 
    {
      name?: string(name='name', example='t'),
      type?: string(name='type', example='string'),
      value?: string(name='value', example='vpc-bp1mjm9exduos1bipw9x6'),
    }
  ](name='parameters', position='Body'),
}

model UpdateParameterSetAttributeResponseBody = {
  requestId?: string(name='requestId', example='81CF7E18-D318-5670-9A4D-C08476BC4899'),
}

model UpdateParameterSetAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateParameterSetAttributeResponseBody(name='body'),
}

async function updateParameterSetAttribute(request: UpdateParameterSetAttributeRequest): UpdateParameterSetAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateParameterSetAttribute', 'PUT', '/parameterSets/{parameterSetId}', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  projectId: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name?: string(name='name', example='test', position='Body'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='requestId', example='C62888F6-254D-5589-BF05-0D9EE698C187'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'POST', '/project/{projectId}', 'json', false, 'json', request);
}

model UpdateRabbitmqPublisherAttributeRequest {
  publisherId: string(name='publisherId', example='mqp-3b6cb9fa4751afff780436bcefbf1', position='Path'),
  description?: string(name='description', example='test', position='Body'),
  exchangeName?: string(name='exchangeName', example='ExchangeTest', position='Body'),
  exchangeType?: string(name='exchangeType', example='TOPIC', position='Body'),
  name: string(name='name', position='Body'),
}

model UpdateRabbitmqPublisherAttributeResponseBody = {
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model UpdateRabbitmqPublisherAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRabbitmqPublisherAttributeResponseBody(name='body'),
}

async function updateRabbitmqPublisherAttribute(request: UpdateRabbitmqPublisherAttributeRequest): UpdateRabbitmqPublisherAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRabbitmqPublisherAttribute', 'PUT', '/publishers/{publisherId}', 'json', false, 'json', request);
}

model UpdateRamPolicyExportTaskAttributeRequest {
  ramPolicyExportTaskId: string(name='ramPolicyExportTaskId', example='rpe-433aead756057ffe0252e48f9286a', position='Path'),
  authorizationAccountIds?: [ long ](name='authorizationAccountIds', position='Body'),
  authorizationActions?: [ string ](name='authorizationActions', position='Body'),
  authorizationRegionIds?: [ string ](name='authorizationRegionIds', position='Body'),
  moduleId: string(name='moduleId', example='mod-143574fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name: string(name='name', example='test', position='Body'),
  ramRole?: string(name='ramRole', example='ramName', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Auto', position='Body'),
}

model UpdateRamPolicyExportTaskAttributeResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model UpdateRamPolicyExportTaskAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRamPolicyExportTaskAttributeResponseBody(name='body'),
}

async function updateRamPolicyExportTaskAttribute(request: UpdateRamPolicyExportTaskAttributeRequest): UpdateRamPolicyExportTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRamPolicyExportTaskAttribute', 'PUT', '/ramPolicyExportTasks/{ramPolicyExportTaskId}', 'json', false, 'json', request);
}

model UpdateResourceExportTaskAttributeRequest {
  exportTaskId: string(name='exportTaskId', position='Path'),
  clientToken: string(name='clientToken', position='Body'),
  configPath?: string(name='configPath', position='Body'),
  description?: string(name='description', position='Body'),
  excludeRules?: [ 
    {
      key?: string(name='key'),
      values?: [ string ](name='values'),
    }
  ](name='excludeRules', position='Body'),
  exportToModule?: {
    source?: string(name='source'),
    sourcePath?: string(name='sourcePath'),
    statePath?: string(name='statePath'),
  }(name='exportToModule', position='Body'),
  includeRules?: [ 
    {
      key?: string(name='key'),
      values?: [ string ](name='values'),
    }
  ](name='includeRules', position='Body'),
  name: string(name='name', position='Body'),
  ramRole?: string(name='ramRole', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', position='Body'),
  terraformVersion?: string(name='terraformVersion', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', position='Body'),
  variables?: [ 
    {
      properties?: [ string ](name='properties'),
      resourceType?: string(name='resourceType'),
    }
  ](name='variables', position='Body'),
}

model UpdateResourceExportTaskAttributeResponseBody = {
  exportTaskId?: string(name='exportTaskId'),
  exportVersion?: string(name='exportVersion'),
  requestId?: string(name='requestId'),
}

model UpdateResourceExportTaskAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceExportTaskAttributeResponseBody(name='body'),
}

async function updateResourceExportTaskAttribute(request: UpdateResourceExportTaskAttributeRequest): UpdateResourceExportTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceExportTaskAttribute', 'PUT', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model UpdateTaskAttributeRequest {
  taskId: string(name='taskId', example='task-4267dcfbf1b6dfff67fea425525e2', position='Path'),
  autoApply: boolean(name='autoApply', example='true', position='Body'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  description?: string(name='description', example='demo', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-433aead7560571e66e31274ffd3'),
    projectId?: string(name='projectId', example='p-433aead75605713865c386cb9d'),
  }(name='groupInfo', position='Body'),
  initModuleState?: boolean(name='initModuleState', position='Body'),
  moduleId: string(name='moduleId', example='mod-148e7853433574fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', example='v1', position='Body'),
  name: string(name='name', example='test', position='Body'),
  parameters?: map[string]string(name='parameters', position='Body'),
  protectionStrategy?: [ string ](name='protectionStrategy', position='Body'),
  ramRole: string(name='ramRole', example='{}', position='Body'),
  skipPropertyValidation?: boolean(name='skipPropertyValidation', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy: string(name='triggerStrategy', example='Manual', position='Body'),
  triggerValue?: string(name='triggerValue', example='******', position='Body'),
}

model UpdateTaskAttributeResponseBody = {
  requestId?: string(name='requestId', example='17793D91-A26F-520D-A948-3452A45D15B1'),
}

model UpdateTaskAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskAttributeResponseBody(name='body'),
}

async function updateTaskAttribute(request: UpdateTaskAttributeRequest): UpdateTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTaskAttribute', 'PUT', '/tasks/{taskId}', 'json', false, 'json', request);
}

model UpdateTaskPolicyRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
  clientToken: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  taskPolicies?: [ 
    {
      priority?: string(name='priority', example='5'),
      taskId?: string(name='taskId', example='task-60f24b4eb47f1135b7b14ddbdfd'),
      type?: string(name='type', example='SceneTestingTask'),
    }
  ](name='taskPolicies', position='Body'),
}

model UpdateTaskPolicyResponseBody = {
  requestId?: string(name='requestId', example='0D797DC3-FF04-5C21-81EB-92C7799512E3'),
}

model UpdateTaskPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskPolicyResponseBody(name='body'),
}

async function updateTaskPolicy(request: UpdateTaskPolicyRequest): UpdateTaskPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTaskPolicy', 'POST', '/group/task/policy/{groupId}', 'json', false, 'json', request);
}

model JobStatusDetailValue = {
  comment?: string(name='comment'),
  jobResult?: string(name='jobResult', example='{}'),
  timeStamps?: string(name='timeStamps', example='2022-06-13 17:11:34'),
}

model JobsStatusDetailValue = {
  comment?: string(name='comment', example='""'),
  timeStamps?: string(name='timeStamps', example='2022-06-13 17:11:34'),
  jobResult?: string(name='jobResult', example='""'),
}

