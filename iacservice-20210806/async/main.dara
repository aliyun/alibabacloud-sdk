/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'IaCService';
  @version = '2021-08-06';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddSharedAccountsRequest {
  accountIds?: [ long ](name='accountIds', position='Body'),
  resourceId?: string(name='resourceId', example='Public', position='Body'),
  resourceType?: string(name='resourceType', example='RegistryModule', position='Body'),
}

model AddSharedAccountsResponseBody = {
  requestId?: string(name='requestId', example='0D797DC3-FF04-5C21-81EB-XXXXXXXXX'),
}

model AddSharedAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddSharedAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddSharedAccounts  AddSharedAccountsRequest
  * @return AddSharedAccountsResponse
 */
async function addSharedAccounts(request: AddSharedAccountsRequest): AddSharedAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddSharedAccounts', 'PUT', '/sharedAccounts', 'json', false, 'json', request);
}

model AssociateGroupRequest {
  groupId: string(name='groupId', description='This parameter is required.', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
  clientToken?: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  projectId?: string(name='projectId', example='p-433aead7560571a87349d054b4', position='Body'),
  resourceIds: [ string ](name='resourceIds', description='This parameter is required.', position='Body'),
  resourceType?: string(name='resourceType', example='Task', position='Body'),
}

model AssociateGroupResponseBody = {
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model AssociateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AssociateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AssociateGroup  AssociateGroupRequest
  * @return AssociateGroupResponse
 */
async function associateGroup(request: AssociateGroupRequest): AssociateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AssociateGroup', 'POST', '/group/{groupId}/associate', 'json', false, 'json', request);
}

model CancelResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', description='This parameter is required.', example='ex-445dcb7d0ac661ff08be459a75f', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
}

model CancelResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e5cdc6460282'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model CancelResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelResourceExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelResourceExportTask  CancelResourceExportTaskRequest
  * @return CancelResourceExportTaskResponse
 */
async function cancelResourceExportTask(request: CancelResourceExportTaskRequest): CancelResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelResourceExportTask', 'PUT', '/exportTasks/cancel/{exportTaskId}', 'json', false, 'json', request);
}

model CreateGroupRequest {
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  autoTrigger?: boolean(name='autoTrigger', example='true', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  forcedSetting?: boolean(name='forcedSetting', example='true', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  notifyConfig?: [ 
    {
      notifyPath?: string(name='notifyPath', example='/'),
      notifyType?: string(name='notifyType', example='DingDing'),
    }
  ](name='notifyConfig', position='Body'),
  notifyOperationTypes?: [ string ](name='notifyOperationTypes', position='Body'),
  projectId: string(name='projectId', description='This parameter is required.', example='p-433aead7560571a87349d054b4', position='Body'),
  ramRole?: string(name='ramRole', example='ramName', position='Body'),
  reportExportField?: [ string ](name='reportExportField', position='Body'),
  reportExportPath?: string(name='reportExportPath', example='https://test.oss-cn-hangzhou.aliyuncs.com/test/test', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.189.0', position='Body'),
  triggerConfig?: [ 
    {
      triggerStrategy?: string(name='triggerStrategy', example='Cron'),
      triggerValue?: string(name='triggerValue', example='0 0 19 * * ？'),
    }
  ](name='triggerConfig', position='Body'),
  triggerResourceType?: [ string ](name='triggerResourceType', position='Body'),
}

model CreateGroupResponseBody = {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f'),
  requestId?: string(name='requestId', example='E2D0E863-1651-5E58-823F-B451C8C24615'),
}

model CreateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateGroup  CreateGroupRequest
  * @return CreateGroupResponse
 */
async function createGroup(request: CreateGroupRequest): CreateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGroup', 'POST', '/group', 'json', false, 'json', request);
}

model CreateJobRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-433aead756057fffeaba4828f5195', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='2daf4227f747cbf11a5501f18cc5e004', position='Body'),
  description: string(name='description', description='This parameter is required.', example='test', position='Body'),
  subCommand?: string(name='subCommand', example='null', position='Body'),
  taskType?: string(name='taskType', position='Body'),
}

model CreateJobResponseBody = {
  jobId?: string(name='jobId', example='job-518855d9a058c32798c319561f'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateJob  CreateJobRequest
  * @return CreateJobResponse
 */
async function createJob(request: CreateJobRequest): CreateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateJob', 'POST', '/tasks/{taskId}/jobs', 'json', false, 'json', request);
}

model CreateModuleRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-5fd38c9b92d541a7083a86432e2'),
    projectId?: string(name='projectId', example='p-433aead75605713865c386cb9d'),
  }(name='groupInfo', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  source: string(name='source', description='This parameter is required.', example='OSS', position='Body'),
  sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"', position='Body'),
  statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate', position='Body'),
  tags?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tags', position='Body'),
  versionStrategy?: string(name='versionStrategy', example='Manual', position='Body'),
}

model CreateModuleResponseBody = {
  moduleId?: string(name='moduleId', example='mod-518855d9a058cfffcc446d8fe3c99'),
  requestId?: string(name='requestId', example='0D797DC3-FF04-5C21-81EB-92C7799512E3'),
}

model CreateModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModule  CreateModuleRequest
  * @return CreateModuleResponse
 */
async function createModule(request: CreateModuleRequest): CreateModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModule', 'POST', '/modules', 'json', false, 'json', request);
}

model CreateModuleVersionRequest {
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-433aead756057143bd9145a5258', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
}

model CreateModuleVersionResponseBody = {
  moduleVersion?: string(name='moduleVersion', example='v1'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model CreateModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateModuleVersion  CreateModuleVersionRequest
  * @return CreateModuleVersionResponse
 */
async function createModuleVersion(request: CreateModuleVersionRequest): CreateModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateModuleVersion', 'POST', '/modules/{moduleId}/versions', 'json', false, 'json', request);
}

model CreateProjectRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
}

model CreateProjectResponseBody = {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c'),
  requestId?: string(name='requestId', example='3E49127A-BB65-5CCD-AB93-0EC0A43E5446'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/project', 'json', false, 'json', request);
}

model CreateRegistryModuleRequest {
  acl?: string(name='acl', example='private', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='vpc', position='Body'),
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test', position='Body'),
  provider?: string(name='provider', example='alicloud', position='Body'),
  type?: string(name='type', example='self', position='Body'),
}

model CreateRegistryModuleResponseBody = {
  requestId?: string(name='requestId', example='C896FE0A-1BEA-5D01-BFF4-B03B82B9CA3D'),
  source?: string(name='source', example='test_namespace/RegistryModule-test'),
}

model CreateRegistryModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRegistryModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRegistryModule  CreateRegistryModuleRequest
  * @return CreateRegistryModuleResponse
 */
async function createRegistryModule(request: CreateRegistryModuleRequest): CreateRegistryModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRegistryModule', 'POST', '/registryModule', 'json', false, 'json', request);
}

model CreateRegistryNamespaceRequest {
  acl?: string(name='acl', example='private', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  maintainer?: string(name='maintainer', example='admin', position='Body'),
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='iac', position='Body'),
}

model CreateRegistryNamespaceResponseBody = {
  namespaceName?: string(name='namespaceName', example='iac'),
  requestId?: string(name='requestId', example='B4672AE3-C313-5B7A-BB24-45345570D398'),
}

model CreateRegistryNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRegistryNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRegistryNamespace  CreateRegistryNamespaceRequest
  * @return CreateRegistryNamespaceResponse
 */
async function createRegistryNamespace(request: CreateRegistryNamespaceRequest): CreateRegistryNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRegistryNamespace', 'POST', '/registryNamespace', 'json', false, 'json', request);
}

model CreateResourceExportTaskRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='OK', position='Body'),
  exportToModule?: {
    source?: string(name='source', example='Registry'),
    sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
    statePath?: string(name='statePath', example='/'),
  }(name='exportToModule', position='Body'),
  includeRules?: [ 
    {
      key?: string(name='key', example='ZoneId'),
      values?: [ string ](name='values'),
    }
  ](name='includeRules', position='Body'),
  name: string(name='name', description='This parameter is required.', example='abc', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Auto', position='Body'),
  variables?: [ 
    {
      properties?: [ string ](name='properties'),
      resourceType?: string(name='resourceType', example='AliCloud::VPC::VPC'),
    }
  ](name='variables', position='Body'),
}

model CreateResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-4a1ec8b7003d24528326821be'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='CFD8C2A8-5BE7-56D2-916D-64039B8E06E3'),
}

model CreateResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateResourceExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateResourceExportTask  CreateResourceExportTaskRequest
  * @return CreateResourceExportTaskResponse
 */
async function createResourceExportTask(request: CreateResourceExportTaskRequest): CreateResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateResourceExportTask', 'POST', '/exportTasks', 'json', false, 'json', request);
}

model CreateTaskRequest {
  autoApply?: boolean(name='autoApply', example='true', position='Body'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='demo', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-5fd38c9b92d541a7083a86432e2'),
    projectId?: string(name='projectId', example='project-433aead7560572057e5d9167608'),
  }(name='groupInfo', position='Body'),
  initModuleState?: boolean(name='initModuleState', position='Body'),
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-148e7853433574fff6b316f4eb737e', position='Body'),
  moduleVersion: string(name='moduleVersion', description='This parameter is required.', example='v1', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test', position='Body'),
  protectionStrategy?: [ string ](name='protectionStrategy', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  skipPropertyValidation?: boolean(name='skipPropertyValidation', position='Body'),
  tags?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tags', position='Body'),
  taskBackend?: {
    bucketEndpoint?: string(name='bucketEndpoint'),
    bucketName?: string(name='bucketName'),
    objectPath?: string(name='objectPath'),
  }(name='taskBackend', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Always', position='Body'),
}

model CreateTaskResponseBody = {
  requestId?: string(name='requestId', example='CD478792-6952-5A1C-9F57-78932BF0FAC6'),
  taskId?: string(name='taskId', example='task-433aead756057fffeaba4828f5195'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTask  CreateTaskRequest
  * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/tasks', 'json', false, 'json', request);
}

model DeleteGroupRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
}

model DeleteGroupResponseBody = {
  requestId?: string(name='requestId', example='1E7BA3EB-B0EF-53F5-9999-07CAD6D9F8A3'),
}

model DeleteGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteGroup  DeleteGroupRequest
  * @return DeleteGroupResponse
 */
async function deleteGroup(request: DeleteGroupRequest): DeleteGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGroup', 'DELETE', '/group/{groupId}', 'json', false, 'json', request);
}

model DeleteModuleRequest {
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-14e80de4866bf71ef354cc82d17f', position='Path'),
}

model DeleteModuleResponseBody = {
  requestId?: string(name='requestId', example='49DA6457-E545-5095-A930-EB8F0BCD4DAA'),
}

model DeleteModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteModule  DeleteModuleRequest
  * @return DeleteModuleResponse
 */
async function deleteModule(request: DeleteModuleRequest): DeleteModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteModule', 'DELETE', '/modules/{moduleId}', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  projectId?: string(name='projectId', example='p-148e7853433574fffe9fec72ed9b72', position='Path'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProject  DeleteProjectRequest
  * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/project/{projectId}', 'json', false, 'json', request);
}

model DeleteRegistryModuleRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test_namespace', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='ess-scaling-rule', position='Path'),
}

model DeleteRegistryModuleResponseBody = {
  requestId?: string(name='requestId', example='545995A8-243D-5963-A940-B74FAF6009B5'),
}

model DeleteRegistryModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRegistryModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRegistryModule  DeleteRegistryModuleRequest
  * @return DeleteRegistryModuleResponse
 */
async function deleteRegistryModule(request: DeleteRegistryModuleRequest): DeleteRegistryModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRegistryModule', 'DELETE', '/registryModule/{namespaceName}/{moduleName}', 'json', false, 'json', request);
}

model DeleteRegistryModuleVersionRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test_namespace', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='sls', position='Path'),
  version: string(name='version', description='This parameter is required.', example='1.0.0', position='Path'),
}

model DeleteRegistryModuleVersionResponseBody = {
  requestId?: string(name='requestId', example='491A1E2E-EA1E-5F90-958A-A53EB67780FC'),
}

model DeleteRegistryModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRegistryModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRegistryModuleVersion  DeleteRegistryModuleVersionRequest
  * @return DeleteRegistryModuleVersionResponse
 */
async function deleteRegistryModuleVersion(request: DeleteRegistryModuleVersionRequest): DeleteRegistryModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRegistryModuleVersion', 'DELETE', '/registryModuleVersion/{namespaceName}/{moduleName}/{version}', 'json', false, 'json', request);
}

model DeleteRegistryNamespaceRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test', position='Path'),
}

model DeleteRegistryNamespaceResponseBody = {
  requestId?: string(name='requestId', example='1D0CD708-E433-5F13-8A42-823C95FC756C'),
}

model DeleteRegistryNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRegistryNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRegistryNamespace  DeleteRegistryNamespaceRequest
  * @return DeleteRegistryNamespaceResponse
 */
async function deleteRegistryNamespace(request: DeleteRegistryNamespaceRequest): DeleteRegistryNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRegistryNamespace', 'DELETE', '/registryNamespace/{namespaceName}', 'json', false, 'json', request);
}

model DeleteResourceExportTaskRequest {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a16b006b03333a', position='Path'),
}

model DeleteResourceExportTaskResponseBody = {
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model DeleteResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteResourceExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteResourceExportTask  DeleteResourceExportTaskRequest
  * @return DeleteResourceExportTaskResponse
 */
async function deleteResourceExportTask(request: DeleteResourceExportTaskRequest): DeleteResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteResourceExportTask', 'DELETE', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model DeleteTaskRequest {
  taskId?: string(name='taskId', example='task-123456', position='Path'),
}

model DeleteTaskResponseBody = {
  requestId?: string(name='requestId', example='73B38F77-62BA-5878-8952-530DFE21C93B'),
}

model DeleteTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTask  DeleteTaskRequest
  * @return DeleteTaskResponse
 */
async function deleteTask(request: DeleteTaskRequest): DeleteTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTask', 'DELETE', '/tasks/{taskId}', 'json', false, 'json', request);
}

model DissociateGroupRequest {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Path'),
  groupId: string(name='groupId', description='This parameter is required.', example='g-59d8d22e78792ffe3d3eb6154d727', position='Path'),
  clientToken?: string(name='clientToken', example='2daf4227f747cbf11a5501f18cc5e004', position='Body'),
  resourceIds: [ string ](name='resourceIds', description='This parameter is required.', position='Body'),
  resourceType?: string(name='resourceType', example='Task', position='Body'),
}

model DissociateGroupResponseBody = {
  requestId?: string(name='requestId', example='17793D91-A26F-520D-A948-3452A45D15B1'),
}

model DissociateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DissociateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DissociateGroup  DissociateGroupRequest
  * @return DissociateGroupResponse
 */
async function dissociateGroup(request: DissociateGroupRequest): DissociateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DissociateGroup', 'POST', '/group/{groupId}/dissociate', 'json', false, 'json', request);
}

model ExecuteRegistryModuleRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='alibaba', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='vpc', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  parameters?: map[string]any(name='parameters', example='{\\"region\\": \\"cn-hangzhou\\", \\"vpcId\\": \\"vpc-bp145sc90s26q0qbkfb6i\\", \\"functionName\\": \\"filemgr-cn-hangzhou-063fd4aead\\", \\"mountPointsServerAddr\\": \\"063fd4aead-dex50.cn-hangzhou.nas.aliyuncs.com\\"}', position='Body'),
}

model ExecuteRegistryModuleResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='79284133-D4BA-56B3-954C-D538256F7EAA'),
  stateId?: string(name='stateId', example='task-xxxx'),
}

model ExecuteRegistryModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteRegistryModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteRegistryModule  ExecuteRegistryModuleRequest
  * @return ExecuteRegistryModuleResponse
 */
async function executeRegistryModule(request: ExecuteRegistryModuleRequest): ExecuteRegistryModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteRegistryModule', 'PUT', '/registryModule/{namespaceName}/{moduleName}/execution', 'json', false, 'json', request);
}

model ExecuteResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', description='This parameter is required.', example='ex-3b6cb9fa4751a6e645ad8365e6', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
}

model ExecuteResourceExportTaskResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-3b6cb9fa4751a6e645ad8365e6'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='0B0A7C19-9077-5975-ACBD-DEE718787992'),
}

model ExecuteResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteResourceExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteResourceExportTask  ExecuteResourceExportTaskRequest
  * @return ExecuteResourceExportTaskResponse
 */
async function executeResourceExportTask(request: ExecuteResourceExportTaskRequest): ExecuteResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteResourceExportTask', 'PUT', '/exportTasks/execute/{exportTaskId}', 'json', false, 'json', request);
}

model ExecuteTerraformApplyRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  code?: string(name='code', example='terraform {
  required_providers {
    alicloud = {
      source   = "aliyun/alicloud"
      version  = "1.254.0"
    }
  }
}

resource "alicloud_vpc" "default" {
  is_default                                  = false
  enable_ipv6                                 = false
  classic_link_enabled                        = false
  force_delete                                = false
  system_route_table_route_propagation_enable = false
  dry_run                                     = false
}', position='Body'),
  stateId?: string(name='stateId', example='task-xxx', position='Body'),
}

model ExecuteTerraformApplyResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C896FE0A-1BEA-5D01-BFF4-B03B82B9CA3D'),
  stateId?: string(name='stateId', example='task-xxxx'),
}

model ExecuteTerraformApplyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteTerraformApplyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteTerraformApply  ExecuteTerraformApplyRequest
  * @return ExecuteTerraformApplyResponse
 */
async function executeTerraformApply(request: ExecuteTerraformApplyRequest): ExecuteTerraformApplyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteTerraformApply', 'POST', '/terraform/execution/apply', 'json', false, 'json', request);
}

model ExecuteTerraformDestroyRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  stateId: string(name='stateId', description='This parameter is required.', example='task-xxx', position='Body'),
}

model ExecuteTerraformDestroyResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
  stateId?: string(name='stateId', example='task-xxxx'),
}

model ExecuteTerraformDestroyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteTerraformDestroyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteTerraformDestroy  ExecuteTerraformDestroyRequest
  * @return ExecuteTerraformDestroyResponse
 */
async function executeTerraformDestroy(request: ExecuteTerraformDestroyRequest): ExecuteTerraformDestroyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteTerraformDestroy', 'PUT', '/terraform/execution/destroy', 'json', false, 'json', request);
}

model ExecuteTerraformPlanRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  code?: string(name='code', example='terraform {
  required_providers {
    alicloud = {
      source   = "aliyun/alicloud"
      version  = "1.254.0"
    }
  }
}

resource "alicloud_vpc" "default" {
  is_default                                  = false
  enable_ipv6                                 = false
  classic_link_enabled                        = false
  force_delete                                = false
  system_route_table_route_propagation_enable = false
  dry_run                                     = false
}', position='Body'),
  stateId?: string(name='stateId', example='task-xxx', position='Body'),
}

model ExecuteTerraformPlanResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='0D298375-F92F-5B65-82E4-EA68F02521F1'),
  stateId?: string(name='stateId', example='task-xxxx'),
}

model ExecuteTerraformPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteTerraformPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteTerraformPlan  ExecuteTerraformPlanRequest
  * @return ExecuteTerraformPlanResponse
 */
async function executeTerraformPlan(request: ExecuteTerraformPlanRequest): ExecuteTerraformPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteTerraformPlan', 'POST', '/terraform/execution/plan', 'json', false, 'json', request);
}

model GetExecuteStateRequest {
  stateId: string(name='stateId', description='This parameter is required.', example='task-xxxx', position='Path'),
}

model GetExecuteStateResponseBody = {
  errorMessage?: string(name='errorMessage', example='Your account does not have enough balance to order postpaid product.'),
  logFile?: map[string]any(name='logFile', example='{"tf-plan.run.log":"xxx"}'),
  requestId?: string(name='requestId', description='Id of the request', example='B4672AE3-C313-5B7A-BB24-45345570D398'),
  state?: string(name='state', example='{"version": 4, "terraform_version": "1.5.7", "serial": 3, "lineage": "cb71b0b2-1ec2-6483-d409-8cae23186ec6",  "outputs": {}, "resources": [], "check_results": null}'),
  status?: string(name='status', example='Pending'),
}

model GetExecuteStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExecuteStateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExecuteState  GetExecuteStateRequest
  * @return GetExecuteStateResponse
 */
async function getExecuteState(request: GetExecuteStateRequest): GetExecuteStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetExecuteState', 'GET', '/terraform/execution/{stateId}', 'json', false, 'json', request);
}

model GetGroupRequest {
  groupId?: string(name='groupId', example='g-4267dcfbf1b6d128c87adf0e95f', position='Path'),
}

model GetGroupResponseBody = {
  group?: {
    autoDestroy?: boolean(name='autoDestroy', example='true'),
    autoTrigger?: boolean(name='autoTrigger', example='true'),
    createTime?: string(name='createTime', example='2022-08-21T10:57:11Z'),
    description?: string(name='description', example='OK'),
    forcedSetting?: boolean(name='forcedSetting', example='true'),
    groupId?: string(name='groupId', example='g-14e80de4866bf7ffed0bab6154d738'),
    name?: string(name='name', example='abc'),
    notifyConfig?: [ 
      {
        notifyPath?: string(name='notifyPath', example='/'),
        notifyType?: string(name='notifyType', example='DingDing'),
      }
    ](name='notifyConfig'),
    notifyOperationTypes?: [ string ](name='notifyOperationTypes'),
    projectId?: string(name='projectId', example='p-4267dcfbf1b6d126edcadf0e949'),
    ramRole?: string(name='ramRole', example='ramRoleName'),
    reportExportField?: [ string ](name='reportExportField'),
    reportExportPath?: string(name='reportExportPath', example='/'),
    taskCnt?: long(name='taskCnt', example='3'),
    terraformProviderVersion?: string(name='terraformProviderVersion', example='1.191.0'),
    triggerConfig?: [ 
      {
        triggerStrategy?: string(name='triggerStrategy', example='Cron'),
        triggerValue?: string(name='triggerValue', example='0 0 8 * * ?'),
      }
    ](name='triggerConfig'),
    triggerResourceType?: [ string ](name='triggerResourceType'),
  }(name='group'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model GetGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGroup  GetGroupRequest
  * @return GetGroupResponse
 */
async function getGroup(request: GetGroupRequest): GetGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGroup', 'GET', '/group/{groupId}', 'json', false, 'json', request);
}

model GetJobRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-55f1739d9050fffee8fe2a2c4a605', position='Path'),
  jobId: string(name='jobId', description='This parameter is required.', example='job-433aead756057ffef0028917e6f26', position='Path'),
  taskType?: string(name='taskType', position='Query'),
}

model GetJobResponseBody = {
  job?: {
    assertCheckDetail?: [ 
      {
        comparison?: string(name='comparison', example='eq'),
        expectedValue?: string(name='expectedValue'),
        isPass?: boolean(name='isPass', example='true'),
        type?: string(name='type', example='result'),
      }
    ](name='assertCheckDetail'),
    config?: {
      autoApply?: boolean(name='autoApply', example='true'),
      isDestroy?: boolean(name='isDestroy', example='fales'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      resourcesChanged?: string(name='resourcesChanged', example='{}'),
      subCommand?: string(name='subCommand'),
    }(name='config'),
    createTime?: string(name='createTime', example='2022-08-31T03:38:40Z'),
    description?: string(name='description', example='test1'),
    downloadUrl?: map[string]any(name='downloadUrl'),
    elapsedTime?: long(name='elapsedTime'),
    executeType?: string(name='executeType'),
    isPassAssertCheck?: boolean(name='isPassAssertCheck', example='true'),
    jobId?: string(name='jobId', example='job-518855d9a058cfff0dc933e6b5767'),
    logFile?: map[string]any(name='logFile'),
    output?: string(name='output', example='/'),
    outputJsonPlan?: any(name='outputJsonPlan'),
    parameters?: map[string]string(name='parameters'),
    status?: string(name='status', example='Errored'),
    statusDetail?: map[string]JobStatusDetailValue(name='statusDetail'),
    taskId?: string(name='taskId', example='task-3b6cb9fa4751a1b9b5f22cbcf4e'),
    taskType?: string(name='taskType'),
    terraformProviderVersion?: string(name='terraformProviderVersion'),
  }(name='job'),
  requestId?: string(name='requestId', example='1435C78A-AED9-53D6-B7A6-E2661D29B1FA'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetJob  GetJobRequest
  * @return GetJobResponse
 */
async function getJob(request: GetJobRequest): GetJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetJob', 'GET', '/tasks/{taskId}/jobs/{jobId}', 'json', false, 'json', request);
}

model GetModuleRequest {
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-148e7853433574fffe9ca86154d77a', position='Path'),
}

model GetModuleResponseBody = {
  module?: {
    createTime?: string(name='createTime', example='2022-09-06T06:11:27Z'),
    description?: string(name='description', example='test1'),
    groupInfo?: {
      groupId?: string(name='groupId'),
      groupName?: string(name='groupName'),
      projectId?: string(name='projectId'),
      projectName?: string(name='projectName'),
    }(name='groupInfo'),
    latestVersion?: string(name='latestVersion', example='v1'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6d14625614ddbe15'),
    name?: string(name='name', example='abc'),
    outputPath?: string(name='outputPath', example='/'),
    source?: string(name='source', example='OSS'),
    sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"'),
    statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate'),
    status?: string(name='status', example='Created'),
    tags?: [ 
      {
        tagKey?: string(name='tagKey'),
        tagValue?: string(name='tagValue'),
      }
    ](name='tags'),
    versionStrategy?: string(name='versionStrategy', example='Manual'),
  }(name='module'),
  requestId?: string(name='requestId', description='Id of the request', example='1E7BA3EB-B0EF-53F5-9999-07CAD6D9F8A3'),
}

model GetModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModule  GetModuleRequest
  * @return GetModuleResponse
 */
async function getModule(request: GetModuleRequest): GetModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModule', 'GET', '/modules/{moduleId}', 'json', false, 'json', request);
}

model GetModuleVersionRequest {
  moduleId?: string(name='moduleId', example='mod-14e80de4866bf71c92a04fe353b1', position='Path'),
  moduleVersion?: string(name='moduleVersion', example='v1', position='Path'),
}

model GetModuleVersionResponseBody = {
  requestId?: string(name='requestId', example='0D298375-F92F-5B65-82E4-EA68F02521F1'),
  version?: {
    createTime?: string(name='createTime', example='2022-09-08T18:07:40Z'),
    description?: string(name='description', example='description'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6dfffbc27e218d1b66'),
    moduleVersion?: string(name='moduleVersion', example='v1'),
    name?: string(name='name'),
    source?: string(name='source', example='OSS'),
    sourcePath?: string(name='sourcePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip'),
    statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate'),
    terraformContext?: map[string]any(name='terraformContext'),
    versionStrategy?: string(name='versionStrategy', example='Manual'),
  }(name='version'),
}

model GetModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetModuleVersion  GetModuleVersionRequest
  * @return GetModuleVersionResponse
 */
async function getModuleVersion(request: GetModuleVersionRequest): GetModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetModuleVersion', 'GET', '/modules/{moduleId}/versions/{moduleVersion}', 'json', false, 'json', request);
}

model GetProjectRequest {
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Path'),
}

model GetProjectResponseBody = {
  project?: {
    createTime?: string(name='createTime', example='2022-09-06T06:11:27Z'),
    description?: string(name='description', example='abc'),
    name?: string(name='name', example='abc'),
    projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c'),
    taskCnt?: long(name='taskCnt', example='2'),
  }(name='project'),
  requestId?: string(name='requestId', example='7FA0FF4A-ABD4-54F6-BEAC-B4273EBA10A2'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetProject  GetProjectRequest
  * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/project/{projectId}', 'json', false, 'json', request);
}

model GetRegistryModuleRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='terraform-alicloud-modules', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='ecs-rds-redis', position='Path'),
}

model GetRegistryModuleResponseBody = {
  registryModule?: {
    acl?: string(name='acl'),
    createTime?: string(name='createTime'),
    description?: string(name='description'),
    downloads?: int32(name='downloads'),
    moduleName?: string(name='moduleName'),
    namespaceName?: string(name='namespaceName'),
    provider?: string(name='provider'),
    sharedAccounts?: [ long ](name='sharedAccounts'),
    source?: string(name='source'),
    sourceUrl?: string(name='sourceUrl'),
    type?: string(name='type'),
    version?: string(name='version'),
  }(name='registryModule'),
  requestId?: string(name='requestId', example='5B5AD471-5036-581B-AC9B-7D5EECED877A'),
}

model GetRegistryModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegistryModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegistryModule  GetRegistryModuleRequest
  * @return GetRegistryModuleResponse
 */
async function getRegistryModule(request: GetRegistryModuleRequest): GetRegistryModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegistryModule', 'GET', '/registryModule/{namespaceName}/{moduleName}', 'json', false, 'json', request);
}

model GetRegistryModuleVersionRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='alibabacloud', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='ram-user', position='Path'),
  version: string(name='version', description='This parameter is required.', example='1.1.0', position='Path'),
}

model GetRegistryModuleVersionResponseBody = {
  moduleVersion?: {
    createTime?: string(name='createTime'),
    detailUrl?: string(name='detailUrl'),
    downloads?: string(name='downloads'),
    moduleName?: string(name='moduleName'),
    namespaceName?: string(name='namespaceName'),
    provider?: string(name='provider'),
    source?: string(name='source'),
    sourceUrl?: string(name='sourceUrl'),
    version?: string(name='version'),
  }(name='moduleVersion'),
  requestId?: string(name='requestId', example='62DF26B0-53F0-5747-9D7F-FEF444FB4E24'),
}

model GetRegistryModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegistryModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegistryModuleVersion  GetRegistryModuleVersionRequest
  * @return GetRegistryModuleVersionResponse
 */
async function getRegistryModuleVersion(request: GetRegistryModuleVersionRequest): GetRegistryModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegistryModuleVersion', 'GET', '/registryModuleVersion/{namespaceName}/{moduleName}/{version}', 'json', false, 'json', request);
}

model GetRegistryNamespaceRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='terraform-alicloud-modules', position='Path'),
}

model GetRegistryNamespaceResponseBody = {
  namespace?: {
    acl?: string(name='acl', example='private'),
    createTime?: string(name='createTime', example='2025-03-20T02:18:29Z'),
    description?: string(name='description', example='demo'),
    maintainer?: string(name='maintainer', example='admin'),
    modules?: int32(name='modules', example='21'),
    namespaceName?: string(name='namespaceName', example='test_namespace'),
    sharedAccounts?: [ long ](name='sharedAccounts'),
    type?: string(name='type', example='share'),
  }(name='namespace'),
  requestId?: string(name='requestId', example='26684763-5BAB-58C8-BA4F-9D622AB7AD14'),
}

model GetRegistryNamespaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegistryNamespaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRegistryNamespace  GetRegistryNamespaceRequest
  * @return GetRegistryNamespaceResponse
 */
async function getRegistryNamespace(request: GetRegistryNamespaceRequest): GetRegistryNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRegistryNamespace', 'GET', '/registryNamespace/{namespaceName}', 'json', false, 'json', request);
}

model GetResourceExportTaskRequest {
  exportTaskId: string(name='exportTaskId', description='This parameter is required.', example='ex-al171j05rlog5tbri1pmkk', position='Path'),
  exportVersion?: string(name='exportVersion', example='v3', position='Query'),
}

model GetResourceExportTaskResponseBody = {
  requestId?: string(name='requestId', example='FC49AA8C-0A19-5556-8929-E7447F18D529'),
  task?: {
    createTime?: string(name='createTime', example='2022-06-15T02:44:37Z'),
    description?: string(name='description', example='demo'),
    elapsedTime?: long(name='elapsedTime', example='4533'),
    exportTaskId?: string(name='exportTaskId', example='ex-al1111jlfh53i6mo4o94jj'),
    exportToModule?: {
      source?: string(name='source', example='OSS'),
      sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
      statePath?: string(name='statePath', example='/'),
    }(name='exportToModule'),
    exportVersion?: string(name='exportVersion', example='v2'),
    failedReason?: string(name='failedReason', example='Reason'),
    includeRules?: [ 
      {
        key?: string(name='key', example='ZoneId'),
        values?: [ string ](name='values'),
      }
    ](name='includeRules'),
    modules?: [ 
      {
        source?: string(name='source', example='OSS'),
        sourcePath?: string(name='sourcePath', example='oss::https://.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
        version?: string(name='version', example='v3'),
      }
    ](name='modules'),
    name?: string(name='name', example='vpc_all'),
    ramRole?: string(name='ramRole', example='role'),
    status?: string(name='status', example='Running'),
    taskOutputPath?: string(name='taskOutputPath', example='/'),
    terraformContext?: map[string]any(name='terraformContext', example='{}'),
    terraformProviderVersion?: string(name='terraformProviderVersion', example='1.246.0'),
    terraformVersion?: string(name='terraformVersion', example='1.2.6'),
    triggerStrategy?: string(name='triggerStrategy', example='Manual'),
    variables?: [ 
      {
        properties?: [ string ](name='properties'),
        resourceType?: string(name='resourceType', example='ALIYUN::Bastionhost::Instance'),
      }
    ](name='variables'),
  }(name='task'),
}

model GetResourceExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceExportTask  GetResourceExportTaskRequest
  * @return GetResourceExportTaskResponse
 */
async function getResourceExportTask(request: GetResourceExportTaskRequest): GetResourceExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceExportTask', 'GET', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model GetResourceTypeRequest {
  resourceType?: string(name='resourceType', example='alicloud_vpc_vswitch', position='Path'),
  acceptLanguage?: string(name='acceptLanguage', example='zh-CN', position='Query'),
  filterReadOnly?: boolean(name='filterReadOnly', example='false', position='Query'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.227.0', position='Query'),
}

model GetResourceTypeResponseBody = {
  requestId?: string(name='requestId', example='9bcaac3c-420d-4303-87ab-7638c07b0a0b'),
  resourceType?: {
    description?: string(name='description', example='test'),
    operations?: [ 
      {
        apiName?: string(name='apiName', example='CreateVSwitch'),
        apiVersion?: string(name='apiVersion', example='2016-04-28'),
        operationType?: string(name='operationType', example='Write'),
        serviceCode?: string(name='serviceCode', description='serviceCode', example='Vpc'),
      }
    ](name='operations'),
    product?: string(name='product', example='ECS'),
    productName?: string(name='productName'),
    productNameEn?: string(name='productNameEn', example='vpc'),
    properties?: map[string]any(name='properties', example='{}'),
    resourceDetailPageUrl?: string(name='resourceDetailPageUrl', example='https://vpc.console.aliyun.com/vpc/${RegionId}/route-tables/${RouteTableId}'),
    resourceListPageUrl?: string(name='resourceListPageUrl', example='https://vpc.console.aliyun.com/vpc/${RegionId}/route-tables'),
    status?: string(name='status', example='Available'),
    statusStartVersion?: string(name='statusStartVersion', example='1.227.0'),
    subcategory?: string(name='subcategory', example='network'),
    supportExported?: boolean(name='supportExported', example='true'),
    terraformProviderVersion?: string(name='terraformProviderVersion', example='1.227.0'),
    terraformResourceType?: string(name='terraformResourceType', example='alicloud_vpc'),
    title?: string(name='title'),
  }(name='resourceType'),
}

model GetResourceTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetResourceTypeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetResourceType  GetResourceTypeRequest
  * @return GetResourceTypeResponse
 */
async function getResourceType(request: GetResourceTypeRequest): GetResourceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetResourceType', 'GET', '/resourceType/{resourceType}', 'json', false, 'json', request);
}

model GetTaskRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-433aead7560571f8c2e176e7325', position='Path'),
}

model GetTaskResponseBody = {
  requestId?: string(name='requestId', description='Id of the request', example='C24C498A-09CF-54D3-8972-8DC074CF8614'),
  task?: {
    autoApply?: boolean(name='autoApply', example='true'),
    autoDestroy?: boolean(name='autoDestroy', example='false'),
    createTime?: string(name='createTime', example='2022-06-15T02:44:37Z'),
    currentJobId?: string(name='currentJobId', example='job-absdf'),
    currentJobStatus?: string(name='currentJobStatus'),
    deletionProtection?: boolean(name='deletionProtection'),
    description?: string(name='description', example='demo'),
    groupInfo?: {
      groupId?: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727'),
      groupName?: string(name='groupName', example='abc'),
      projectId?: string(name='projectId', example='p-433aead756057fff47ecbfd94d76'),
      projectName?: string(name='projectName', example='abc'),
    }(name='groupInfo'),
    initModuleState?: boolean(name='initModuleState'),
    latestModuleVersion?: string(name='latestModuleVersion'),
    moduleId?: string(name='moduleId', example='mod-4267dcfbf1b6d14625614ddbe15'),
    moduleName?: string(name='moduleName'),
    moduleVersion?: string(name='moduleVersion', example='v2'),
    name?: string(name='name'),
    protectionStrategy?: [ string ](name='protectionStrategy'),
    ramRole?: string(name='ramRole', example='{}'),
    skipPropertyValidation?: boolean(name='skipPropertyValidation'),
    status?: string(name='status', example='Running'),
    tags?: [ 
      {
        tagKey?: string(name='tagKey'),
        tagValue?: string(name='tagValue'),
      }
    ](name='tags'),
    taskBackend?: {
      bucketEndpoint?: string(name='bucketEndpoint'),
      bucketName?: string(name='bucketName'),
      objectPath?: string(name='objectPath'),
    }(name='taskBackend'),
    taskId?: string(name='taskId', example='task-433aead756057154bda7f1c2e98'),
    taskOutputPath?: string(name='taskOutputPath', example='/'),
    terraformVersion?: string(name='terraformVersion', example='1.2.6'),
    triggerStrategy?: string(name='triggerStrategy', example='Manual'),
  }(name='task'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTask  GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/tasks/{taskId}', 'json', false, 'json', request);
}

model ListExplorerRegistryModuleExamplesRequest {
  exampleName?: string(name='exampleName', example='complete', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  moduleName?: string(name='moduleName', example='sls', position='Query'),
  moduleVersion?: string(name='moduleVersion', example='1.11.0', position='Query'),
  namespaceName?: string(name='namespaceName', example='alibaba', position='Query'),
  nextToken?: string(name='nextToken', example='IbuvZbAXFOiB4nKg8iOH447bhHWDavGTOMijI2Jep7c=', position='Query'),
}

model ListExplorerRegistryModuleExamplesResponseBody = {
  explorerRegistryModuleExamples?: [ 
    {
      exampleName?: string(name='exampleName', example='201-use-case-create-actiontrail-trail'),
      examplePath?: string(name='examplePath', example='/'),
      exampleSchema?: map[string]any(name='exampleSchema', example='{}'),
      moduleName?: string(name='moduleName', example='iactestname1'),
      moduleVersion?: string(name='moduleVersion', example='1.11.0'),
      namespaceName?: string(name='namespaceName', example='alibaba'),
      status?: string(name='status', example='Available'),
    }
  ](name='explorerRegistryModuleExamples'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='VSjwD+sJ8OZJ8fNjV89AZs7o2AdSD25ZQLeWZ8REjXA='),
  requestId?: string(name='requestId', example='BA8F6459-EED6-556B-8130-D150A3866E56'),
  totalCount?: long(name='totalCount', example='132'),
}

model ListExplorerRegistryModuleExamplesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExplorerRegistryModuleExamplesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExplorerRegistryModuleExamples  ListExplorerRegistryModuleExamplesRequest
  * @return ListExplorerRegistryModuleExamplesResponse
 */
async function listExplorerRegistryModuleExamples(request: ListExplorerRegistryModuleExamplesRequest): ListExplorerRegistryModuleExamplesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExplorerRegistryModuleExamples', 'GET', '/explorerRegistryModule/example', 'json', false, 'json', request);
}

model ListExplorerRegistryModuleVersionsRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  moduleName?: string(name='moduleName', example='vpc', position='Query'),
  moduleVersion?: string(name='moduleVersion', example='1.11.0', position='Query'),
  namespaceName?: string(name='namespaceName', example='alibaba', position='Query'),
  nextToken?: string(name='nextToken', example='lJTuhMWkNH89zZWyYM9GjpAbgRb+bPPPwN0Q3pclzKI=', position='Query'),
}

model ListExplorerRegistryModuleVersionsResponseBody = {
  explorerRegistryModuleVersions?: [ 
    {
      moduleDetail?: map[string]any(name='moduleDetail', example='{}'),
      moduleFile?: map[string]any(name='moduleFile', example='{}'),
      moduleName?: string(name='moduleName', example='eip-slb-ecs-polardb'),
      namespaceName?: string(name='namespaceName', example='namespace-test'),
      properties?: map[string]any(name='properties', example='{}'),
      source?: string(name='source', example='test_namespace/RegistryModule-test4'),
      version?: string(name='version', example='1.5.0'),
    }
  ](name='explorerRegistryModuleVersions'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='oIM6ssGyh00noi5zoDR1hJ4dD+2BRJj42DLT6GrZysw='),
  requestId?: string(name='requestId', example='F2D40488-3F74-568B-87EC-1C04D098DF8B'),
  totalCount?: long(name='totalCount', example='22'),
}

model ListExplorerRegistryModuleVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExplorerRegistryModuleVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExplorerRegistryModuleVersions  ListExplorerRegistryModuleVersionsRequest
  * @return ListExplorerRegistryModuleVersionsResponse
 */
async function listExplorerRegistryModuleVersions(request: ListExplorerRegistryModuleVersionsRequest): ListExplorerRegistryModuleVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExplorerRegistryModuleVersions', 'GET', '/explorerRegistryModule/version', 'json', false, 'json', request);
}

model ListExplorerRegistryModulesRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  moduleName?: string(name='moduleName', position='Query'),
  nextToken?: string(name='nextToken', example='DxEkv+3w0EDAQgcRFBp8Ep4dD+2BRJj42DLT6GrZysw=', position='Query'),
  sort?: string(name='sort', example='Normal', position='Query'),
}

model ListExplorerRegistryModulesResponseBody = {
  explorerRegistryModules?: [ 
    {
      description?: string(name='description', example='demo'),
      downloads?: long(name='downloads', example='34'),
      latestVersion?: string(name='latestVersion', example='v1'),
      moduleName?: string(name='moduleName', example='terraform-alicloud-modules/mongodb'),
      namespaceName?: string(name='namespaceName', example='test_namespace'),
      source?: string(name='source', example='terraform-alicloud-modules/mongodb/alicloud'),
      status?: string(name='status', example='Default'),
    }
  ](name='explorerRegistryModules'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='DxEkv+3w0EDAQgcRFBp8Ep4dD+2BRJj42DLT6GrZysw='),
  requestId?: string(name='requestId', example='1A662F56-CA76-55F6-869D-7F26293B8E67'),
  totalCount?: long(name='totalCount', example='170'),
}

model ListExplorerRegistryModulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExplorerRegistryModulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExplorerRegistryModules  ListExplorerRegistryModulesRequest
  * @return ListExplorerRegistryModulesResponse
 */
async function listExplorerRegistryModules(request: ListExplorerRegistryModulesRequest): ListExplorerRegistryModulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListExplorerRegistryModules', 'GET', '/explorerRegistryModule', 'json', false, 'json', request);
}

model ListGroupRequest {
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: string(name='pageNumber', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='200', position='Query'),
  projectId?: string(name='projectId', example='p-14e80de4866bf7ffed0c4072ed9b37', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListGroupResponseBody = {
  count?: long(name='count', example='3'),
  groups?: [ 
    {
      createTime?: string(name='createTime', example='2022-09-14T07:19:13Z'),
      description?: string(name='description', example='OK'),
      groupId?: string(name='groupId', example='g-148e7853433574fffe9fec72ed9b73'),
      isDefault?: boolean(name='isDefault', example='true'),
      moduleCnt?: long(name='moduleCnt', example='1'),
      name?: string(name='name', example='1'),
      projectId?: string(name='projectId', example='p-4267dcfbf1b6d126edcadf0e949'),
      sceneTestingTaskCnt?: long(name='sceneTestingTaskCnt', example='1'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskCnt?: long(name='taskCnt', example='3'),
    }
  ](name='groups'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  requestId?: string(name='requestId', example='B6ED9F71-7FA8-598E-B64D-4606FB3FCCC9'),
}

model ListGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGroup  ListGroupRequest
  * @return ListGroupResponse
 */
async function listGroup(request: ListGroupRequest): ListGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGroup', 'GET', '/group', 'json', false, 'json', request);
}

model ListJobsRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-55f1739d9050fffe7f5a9577c4a84', position='Path'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', example='Errored', position='Query'),
  taskType?: string(name='taskType', position='Query'),
}

model ListJobsResponseBody = {
  jobs?: [ 
    {
      config?: {
        isDestroy?: boolean(name='isDestroy'),
        moduleDescription?: string(name='moduleDescription'),
        moduleVersion?: string(name='moduleVersion', example='v4'),
        resourcesChanged?: string(name='resourcesChanged', example='{}'),
        subCommand?: string(name='subCommand'),
      }(name='config'),
      createTime?: string(name='createTime', example='2022-07-05T02:13:43Z'),
      description?: string(name='description', example='OK'),
      elapsedTime?: long(name='elapsedTime'),
      executeType?: string(name='executeType'),
      isPassAssertCheck?: boolean(name='isPassAssertCheck', example='true'),
      jobId?: string(name='jobId', example='job-433aead756057fff9e4dca57b147c'),
      status?: string(name='status', example='Errored'),
      statusDetail?: map[string]JobsStatusDetailValue(name='statusDetail'),
      taskId?: string(name='taskId', example='task-518855d9a058c1176866c2c3efb'),
      terraformProviderVersion?: string(name='terraformProviderVersion'),
    }
  ](name='jobs'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='882304F9-6DB1-5593-A719-33473D082B9C'),
  totalCount?: int32(name='totalCount', example='11'),
}

model ListJobsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListJobs  ListJobsRequest
  * @return ListJobsResponse
 */
async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListJobs', 'GET', '/tasks/{taskId}/jobs', 'json', false, 'json', request);
}

model ListModuleVersionRequest {
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-433aead756057fff39b2f7ac8b798', position='Path'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='20', position='Query'),
}

model ListModuleVersionResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='792171BB-1A68-5148-8B9B-C7C728E1E98B'),
  totalCount?: int32(name='totalCount', example='6'),
  versions?: [ 
    {
      createTime?: string(name='createTime', example='2022-05-13T02:21:49Z'),
      description?: string(name='description', example='description'),
      moduleId?: string(name='moduleId', example='mod-55f1739d9050fffed3ec3a2c4a5e5'),
      moduleVersion?: string(name='moduleVersion', example='v3'),
      name?: string(name='name', example='name'),
      sourcePath?: string(name='sourcePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip'),
    }
  ](name='versions'),
}

model ListModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModuleVersion  ListModuleVersionRequest
  * @return ListModuleVersionResponse
 */
async function listModuleVersion(request: ListModuleVersionRequest): ListModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModuleVersion', 'GET', '/modules/{moduleId}/versions', 'json', false, 'json', request);
}

model ListModulesRequest {
  groupId?: string(name='groupId', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  moduleName?: string(name='moduleName', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  projectId?: string(name='projectId', position='Query'),
  tag?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListModulesResponseBody = {
  modules?: [ 
    {
      createTime?: string(name='createTime', example='2022-01-30T02:14:16Z'),
      deletionProtection?: boolean(name='deletionProtection', example='false'),
      description?: string(name='description', example='description'),
      groupInfo?: {
        groupId?: string(name='groupId'),
        groupName?: string(name='groupName'),
        projectId?: string(name='projectId'),
        projectName?: string(name='projectName'),
      }(name='groupInfo'),
      latestVersion?: string(name='latestVersion', example='v1'),
      moduleId?: string(name='moduleId', example='mod-518855d9a058cdbd3fd6951d59'),
      name?: string(name='name'),
      source?: string(name='source', example='OSS'),
      status?: string(name='status', example='Created'),
      tags?: [ 
        {
          key?: string(name='key'),
          tagKey?: string(name='tagKey'),
          tagValue?: string(name='tagValue'),
          value?: string(name='value'),
        }
      ](name='tags'),
    }
  ](name='modules'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='C617E03B-3DD2-5F0C-A6CF-3028B499A2D5'),
  totalCount?: int32(name='totalCount', example='2790'),
}

model ListModulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListModulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListModules  ListModulesRequest
  * @return ListModulesResponse
 */
async function listModules(request: ListModulesRequest): ListModulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListModules', 'GET', '/modules', 'json', false, 'json', request);
}

model ListProductsRequest {
  keyword?: string(name='keyword', example='ECS', position='Query'),
  maxResults?: int32(name='maxResults', example='100', minimum=0, maximum=200, position='Query'),
  nextToken?: string(name='nextToken', example='eyJ0b2tlbiI6IjEwMjM0NTY3ODkwIn0=', position='Query'),
  sort?: string(name='sort', example='Normal', position='Query'),
  status?: string(name='status', example='Available', position='Query'),
  supportTerraformer?: boolean(name='supportTerraformer', example='true', position='Query'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.227.0', position='Query'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='30BaZ9ekYWXJdqshYecA++coNg7qT1Zbm3RfLyFIZeY='),
  products?: [ 
    {
      firstCategoryName?: string(name='firstCategoryName'),
      firstCategoryNameEn?: string(name='firstCategoryNameEn', example='Enterprise application'),
      product?: string(name='product', example='MSE'),
      productName?: string(name='productName'),
      productNameEn?: string(name='productNameEn', example='Microservices Engine'),
      secondCategoryName?: string(name='secondCategoryName'),
      secondCategoryNameEn?: string(name='secondCategoryNameEn', example='Application service'),
      status?: string(name='status', example='Available'),
      subcategory?: string(name='subcategory', example='Microservice_Engine(MSE)'),
      supportTerraformer?: boolean(name='supportTerraformer', example='true'),
      terraformProviderVersion?: string(name='terraformProviderVersion', example='1.229.0'),
    }
  ](name='products'),
  requestId?: string(name='requestId', example='9bcaac3c-420d-4303-87ab-7638c07b0a0b'),
  totalCount?: int32(name='totalCount', example='134'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProducts', 'GET', '/products', 'json', false, 'json', request);
}

model ListProjectRequest {
  keyword?: string(name='keyword', position='Query'),
  pageNumber?: string(name='pageNumber', example='1', position='Query'),
  pageSize?: string(name='pageSize', example='10', position='Query'),
  tag?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tag', shrink='json', position='Query'),
}

model ListProjectResponseBody = {
  count?: long(name='count', example='3'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  projects?: [ 
    {
      createTime?: string(name='createTime', example='2022-05-10T10:08:34Z'),
      description?: string(name='description', example='abc'),
      name?: string(name='name', example='1234'),
      projectId?: string(name='projectId', example='p-148e7853433574fffe9fec72ed9b72'),
      tags?: [ 
        {
          key?: string(name='key'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskCnt?: long(name='taskCnt', example='2'),
    }
  ](name='projects'),
  requestId?: string(name='requestId', example='136B3926-DD90-5DB2-96EC-8BAD6407D1C9'),
}

model ListProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProject  ListProjectRequest
  * @return ListProjectResponse
 */
async function listProject(request: ListProjectRequest): ListProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProject', 'GET', '/project', 'json', false, 'json', request);
}

model ListRegistryModuleVersionsRequest {
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='ecs-rds', position='Query'),
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='terraform-alicloud-modules', position='Query'),
  nextToken?: string(name='nextToken', example='TRkuCaTw/VsEHrnCZgrBA0ftQSEJU/lzo2ei7MJjplg=', position='Query'),
}

model ListRegistryModuleVersionsResponseBody = {
  count?: long(name='count', example='21'),
  maxResults?: int32(name='maxResults', example='20'),
  moduleVersions?: [ 
    {
      createTime?: string(name='createTime'),
      moduleName?: string(name='moduleName'),
      namespaceName?: string(name='namespaceName'),
      provider?: string(name='provider'),
      source?: string(name='source'),
      sourceUrl?: string(name='sourceUrl'),
      version?: string(name='version'),
    }
  ](name='moduleVersions'),
  nextToken?: string(name='nextToken', example='IbuvZbAXFOiB4nKg8iOH447bhHWDavGTOMijI2Jep7c='),
  requestId?: string(name='requestId', example='8606B880-3485-54E2-89E1-43361C468C85'),
}

model ListRegistryModuleVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegistryModuleVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegistryModuleVersions  ListRegistryModuleVersionsRequest
  * @return ListRegistryModuleVersionsResponse
 */
async function listRegistryModuleVersions(request: ListRegistryModuleVersionsRequest): ListRegistryModuleVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegistryModuleVersions', 'GET', '/registryModuleVersion', 'json', false, 'json', request);
}

model ListRegistryModulesRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  namespaceName?: string(name='namespaceName', example='test_namespace', position='Query'),
  nextToken?: string(name='nextToken', example='NFzbQCa7/yd7rAuSo5xZb54dD+2BRJj42DLT6GrZysw=', position='Query'),
  type?: string(name='type', example='system', position='Query'),
}

model ListRegistryModulesResponseBody = {
  count?: long(name='count', example='173'),
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='LC4NJL3Ru2bIiRdnbADPQp4dD+2BRJj42DLT6GrZysw='),
  registryModules?: [ 
    {
      acl?: string(name='acl'),
      createTime?: string(name='createTime'),
      description?: string(name='description'),
      downloads?: int32(name='downloads'),
      moduleName?: string(name='moduleName'),
      namespaceName?: string(name='namespaceName'),
      provider?: string(name='provider'),
      sharedAccounts?: [ long ](name='sharedAccounts'),
      source?: string(name='source'),
      sourceUrl?: string(name='sourceUrl'),
      type?: string(name='type'),
      version?: string(name='version'),
    }
  ](name='registryModules'),
  requestId?: string(name='requestId', example='D25216A9-C0F7-5A3A-A7E4-2B3D4F3A355D'),
}

model ListRegistryModulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegistryModulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegistryModules  ListRegistryModulesRequest
  * @return ListRegistryModulesResponse
 */
async function listRegistryModules(request: ListRegistryModulesRequest): ListRegistryModulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegistryModules', 'GET', '/registryModules', 'json', false, 'json', request);
}

model ListRegistryNamespacesRequest {
  keyword?: string(name='keyword', example='key', position='Query'),
  maxResults?: int32(name='maxResults', example='20', position='Query'),
  nextToken?: string(name='nextToken', example='hg7nXVngyM6tQlfXYzM1uI/7dKNGp1JMgsKtvCagmtY=', position='Query'),
  type?: string(name='type', example='self', position='Query'),
}

model ListRegistryNamespacesResponseBody = {
  count?: long(name='count', example='53'),
  maxResults?: int32(name='maxResults', example='24'),
  namespaces?: [ 
    {
      acl?: string(name='acl', example='private'),
      createTime?: string(name='createTime', example='2025-01-15T02:16:58Z'),
      description?: string(name='description', example='dd'),
      maintainer?: string(name='maintainer', example='admin'),
      modules?: int32(name='modules', example='21'),
      namespaceName?: string(name='namespaceName', example='test_namespace'),
      sharedAccounts?: [ long ](name='sharedAccounts'),
      type?: string(name='type', example='shared'),
    }
  ](name='namespaces'),
  nextToken?: string(name='nextToken', example='IPTL1Zpr1andEF4lQ3XAYFTgtpI04QQpc5dyKpESXBc='),
  requestId?: string(name='requestId', example='5FFB0033-A016-5A9D-9283-C123AAA7F71D'),
}

model ListRegistryNamespacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegistryNamespacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegistryNamespaces  ListRegistryNamespacesRequest
  * @return ListRegistryNamespacesResponse
 */
async function listRegistryNamespaces(request: ListRegistryNamespacesRequest): ListRegistryNamespacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRegistryNamespaces', 'GET', '/registryNamespace', 'json', false, 'json', request);
}

model ListResourceExportTaskVersionsRequest {
  exportTaskId: string(name='exportTaskId', description='This parameter is required.', example='ex-al1f11jlh9llnk8drc4g1c', position='Path'),
  exportVersion?: string(name='exportVersion', example='v1', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  status?: string(name='status', example='Errored', position='Query'),
}

model ListResourceExportTaskVersionsResponseBody = {
  exportTasks?: [ 
    {
      createTime?: string(name='createTime', example='2025-05-11T02:18:50Z'),
      description?: string(name='description', example='demo'),
      elapsedTime?: long(name='elapsedTime', example='4521'),
      exportTaskId?: string(name='exportTaskId', example='ex-al1711jl6hd8u5crggeq6v'),
      exportToModule?: {
        source?: string(name='source', example='OSS'),
        sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
        statePath?: string(name='statePath', example='/'),
      }(name='exportToModule'),
      exportVersion?: string(name='exportVersion', example='v3'),
      failedReason?: string(name='failedReason', example='Reason'),
      includeRules?: [ 
        {
          key?: string(name='key', example='ZoneId'),
          values?: [ string ](name='values'),
        }
      ](name='includeRules'),
      modules?: [ 
        {
          source?: string(name='source', example='OSS'),
          sourcePath?: string(name='sourcePath', example='oss::https://.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
          version?: string(name='version', example='v1'),
        }
      ](name='modules'),
      name?: string(name='name', example='vpc_all'),
      status?: string(name='status', example='Running'),
      variables?: [ 
        {
          properties?: [ string ](name='properties'),
          resourceType?: string(name='resourceType', example='Vswitch'),
        }
      ](name='variables'),
    }
  ](name='exportTasks'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='860FDEEE-1CA3-55F3-97F6-63FC40B7962D'),
  totalCount?: int32(name='totalCount', example='72'),
}

model ListResourceExportTaskVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceExportTaskVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceExportTaskVersions  ListResourceExportTaskVersionsRequest
  * @return ListResourceExportTaskVersionsResponse
 */
async function listResourceExportTaskVersions(request: ListResourceExportTaskVersionsRequest): ListResourceExportTaskVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceExportTaskVersions', 'GET', '/exportTasks/{exportTaskId}/exportVersions', 'json', false, 'json', request);
}

model ListResourceExportTasksRequest {
  exportTaskId?: string(name='exportTaskId', example='ex-al1c11jl9g2tbte727otp85', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
}

model ListResourceExportTasksResponseBody = {
  exportTasks?: [ 
    {
      createTime?: string(name='createTime', example='2025-02-20T02:10:06Z'),
      description?: string(name='description', example='demo'),
      elapsedTime?: long(name='elapsedTime', example='4243'),
      exportStatus?: string(name='exportStatus', example='Success'),
      exportTaskId?: string(name='exportTaskId', example='ex-kw1a1ol8c0pngjav17q8eri'),
      exportToModule?: {
        source?: string(name='source', example='OSS'),
        sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
        statePath?: string(name='statePath', example='/'),
      }(name='exportToModule'),
      exportVersion?: string(name='exportVersion', example='v2'),
      includeRules?: [ 
        {
          key?: string(name='key', example='ZoneId'),
          values?: [ string ](name='values'),
        }
      ](name='includeRules'),
      modules?: [ 
        {
          source?: string(name='source', example='OSS'),
          sourcePath?: string(name='sourcePath', example='oss::https://.oss-cn-hangzhou.aliyuncs.com/xxx.zip'),
          version?: string(name='version', example='v3'),
        }
      ](name='modules'),
      name?: string(name='name', example='vpc_all'),
      status?: string(name='status', example='Success'),
      variables?: [ 
        {
          properties?: [ string ](name='properties'),
          resourceType?: string(name='resourceType', example='AliCloud::VPC::VPC'),
        }
      ](name='variables'),
    }
  ](name='exportTasks'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='65287CB9-AC46-5FE7-B785-0106C159DA42'),
  totalCount?: int32(name='totalCount', example='330'),
}

model ListResourceExportTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceExportTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceExportTasks  ListResourceExportTasksRequest
  * @return ListResourceExportTasksResponse
 */
async function listResourceExportTasks(request: ListResourceExportTasksRequest): ListResourceExportTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceExportTasks', 'GET', '/exportTasks', 'json', false, 'json', request);
}

model ListResourceTypesRequest {
  acceptLanguage?: string(name='acceptLanguage', example='zh-CN', position='Query'),
  keyword?: string(name='keyword', example='vpc', position='Query'),
  maxResults?: int32(name='maxResults', example='100', minimum=0, maximum=200, position='Query'),
  nextToken?: string(name='nextToken', example='tokenForNextPage', position='Query'),
  product?: string(name='product', example='ECS', position='Query'),
  sort?: string(name='sort', example='Normal', position='Query'),
  status?: string(name='status', example='Available,Deprecated', position='Query'),
  subcategory?: string(name='subcategory', example='compute', position='Query'),
  supportTerraformer?: boolean(name='supportTerraformer', example='true', position='Query'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.227.0', position='Query'),
  terraformResourceTypes?: [ string ](name='terraformResourceTypes', shrink='simple', position='Query'),
}

model ListResourceTypesResponseBody = {
  maxResults?: int32(name='maxResults', example='20'),
  nextToken?: string(name='nextToken', example='LC4NJL3Ru2bIiRdnbADPQp4dD+2BRJj42DLT6GrZysw='),
  requestId?: string(name='requestId', example='9bcaac3c-420d-4303-87ab-7638c07b0a0b'),
  resourceTypes?: [ 
    {
      description?: string(name='description'),
      product?: string(name='product', example='VPC'),
      productName?: string(name='productName'),
      resourceDetailPageUrl?: string(name='resourceDetailPageUrl', example='https://vpc.console.aliyun.com/vpc/${RegionId}/route-tables/${RouteTableId}'),
      resourceListPageUrl?: string(name='resourceListPageUrl', example='https://vpc.console.aliyun.com/vpc/${RegionId}/route-tables'),
      status?: string(name='status', example='Available'),
      statusStartVersion?: string(name='statusStartVersion', example='1.0.0'),
      subcategory?: string(name='subcategory', example='VPC'),
      supportTerraformer?: string(name='supportTerraformer', example='true'),
      terraformProviderVersion?: string(name='terraformProviderVersion', example='1.248.0'),
      terraformResourceType?: string(name='terraformResourceType', example='alicloud_route_table'),
      title?: string(name='title'),
    }
  ](name='resourceTypes'),
  totalCount?: int32(name='totalCount', example='93'),
}

model ListResourceTypesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceTypesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceTypes  ListResourceTypesRequest
  * @return ListResourceTypesResponse
 */
async function listResourceTypes(request: ListResourceTypesRequest): ListResourceTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListResourceTypes', 'GET', '/resourceTypes', 'json', false, 'json', request);
}

model ListTasksRequest {
  groupId?: string(name='groupId', example='g-59d8d22e78792ffe3d3eb6154d727', position='Query'),
  keyword?: string(name='keyword', example='key', position='Query'),
  moduleId?: string(name='moduleId', example='mod-1525e992f1b62139d1c437d64ae', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='pageSize', example='20', minimum=1, maximum=100, position='Query'),
  projectId?: string(name='projectId', example='p-433aead7560572f8d95b25775c', position='Query'),
  status?: string(name='status', position='Query'),
  tag?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tag', shrink='json', position='Query'),
  taskId?: string(name='taskId', example='task-433aead756057fffeaba4828f5195', position='Query'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  requestId?: string(name='requestId', example='98610149-488B-5E48-B981-8D4CE1AF77CD'),
  tasks?: [ 
    {
      autoApply?: boolean(name='autoApply'),
      createTime?: string(name='createTime', example='2022-07-11T15:09:53Z'),
      currentJobId?: string(name='currentJobId', example='job-123asd'),
      currentJobStatus?: string(name='currentJobStatus', example='Pending'),
      deletionProtection?: boolean(name='deletionProtection'),
      groupInfo?: {
        groupId?: string(name='groupId', example='g-4267dcfbf1b6d1e0652bfbbe995'),
        groupName?: string(name='groupName', example='abc'),
        projectId?: string(name='projectId', example='p-433aead7560571cf1b2bfbbe92b'),
        projectName?: string(name='projectName', example='abc'),
      }(name='groupInfo'),
      latestModuleVersion?: string(name='latestModuleVersion'),
      moduleId?: string(name='moduleId', example='mod-518855d9a058c331e9c60bc0ce'),
      moduleName?: string(name='moduleName'),
      moduleVersion?: string(name='moduleVersion', example='v1'),
      name?: string(name='name', example='abc'),
      status?: string(name='status', example='Running'),
      tags?: [ 
        {
          key?: string(name='key'),
          tagKey?: string(name='tagKey'),
          tagValue?: string(name='tagValue'),
          value?: string(name='value'),
        }
      ](name='tags'),
      taskId?: string(name='taskId', example='task-1525e992f1b621b0ca51647876e'),
    }
  ](name='tasks'),
  totalCount?: int32(name='totalCount', example='5'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTasks  ListTasksRequest
  * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/tasks', 'json', false, 'json', request);
}

model ListTerraformProviderVersionsRequest {
  keyword?: string(name='keyword', position='Query'),
  maxResults?: int32(name='maxResults', minimum=0, maximum=200, position='Query'),
  nextToken?: string(name='nextToken', position='Query'),
  usage?: string(name='usage', position='Query'),
}

model ListTerraformProviderVersionsResponseBody = {
  maxResults?: int32(name='maxResults'),
  nextToken?: string(name='nextToken'),
  requestId?: string(name='requestId', example='73588ebb-9d40-4660-a59f-764636ae6034'),
  totalCount?: int32(name='totalCount', example='50'),
  versions?: [ 
    {
      publishedTime?: string(name='publishedTime'),
      status?: string(name='status'),
      version?: string(name='version'),
    }
  ](name='versions'),
}

model ListTerraformProviderVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTerraformProviderVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTerraformProviderVersions  ListTerraformProviderVersionsRequest
  * @return ListTerraformProviderVersionsResponse
 */
async function listTerraformProviderVersions(request: ListTerraformProviderVersionsRequest): ListTerraformProviderVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTerraformProviderVersions', 'GET', '/version/terraform/provider', 'json', false, 'json', request);
}

model OperateJobRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-518855d9a058cfffe0e0a92745bbc', position='Path'),
  jobId: string(name='jobId', description='This parameter is required.', example='job-5fd38c9b92d54fff865d936f22a39', position='Path'),
  operationType?: string(name='operationType', example='execute', position='Path'),
  comment: string(name='comment', description='This parameter is required.', example='dasd', maxLength=128, position='Query'),
  taskType?: string(name='taskType', position='Query'),
}

model OperateJobResponseBody = {
  requestId?: string(name='requestId', example='E602681C-A811-5787-9DC3-48BED7537071'),
}

model OperateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OperateJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OperateJob  OperateJobRequest
  * @return OperateJobResponse
 */
async function operateJob(request: OperateJobRequest): OperateJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'OperateJob', 'POST', '/tasks/{taskId}/jobs/{jobId}/operation/{operationType}', 'json', false, 'json', request);
}

model PublishRegistryModuleVersionRequest {
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='oss-bucket', position='Body'),
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='terraform-alicloud-modules', position='Body'),
  version: string(name='version', description='This parameter is required.', example='1.2.0', position='Body'),
}

model PublishRegistryModuleVersionResponseBody = {
  requestId?: string(name='requestId', example='36E1679B-4D91-5AF6-B505-B5D4ACDF75BD'),
  version?: string(name='version', example='1.1.1'),
}

model PublishRegistryModuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishRegistryModuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PublishRegistryModuleVersion  PublishRegistryModuleVersionRequest
  * @return PublishRegistryModuleVersionResponse
 */
async function publishRegistryModuleVersion(request: PublishRegistryModuleVersionRequest): PublishRegistryModuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishRegistryModuleVersion', 'POST', '/registryModuleVersion', 'json', false, 'json', request);
}

model RemoveSharedAccountsRequest {
  accountIds: [ long ](name='accountIds', description='This parameter is required.', shrink='simple', position='Query'),
  resourceId: string(name='resourceId', description='This parameter is required.', example='test_namespace', position='Query'),
  resourceType: string(name='resourceType', description='This parameter is required.', example='Namespace', position='Query'),
}

model RemoveSharedAccountsResponseBody = {
  requestId?: string(name='requestId', example='8294F4ED-8DBA-5441-B3F2-61C3C5374990'),
}

model RemoveSharedAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveSharedAccountsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveSharedAccounts  RemoveSharedAccountsRequest
  * @return RemoveSharedAccountsResponse
 */
async function removeSharedAccounts(request: RemoveSharedAccountsRequest): RemoveSharedAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveSharedAccounts', 'DELETE', '/sharedAccounts', 'json', false, 'json', request);
}

model UpdateExplorerModuleAttributeRequest {
  explorerModuleId: string(name='explorerModuleId', description='This parameter is required.', example='mod-al1611jl2tce3nlh2uvklh0', position='Path'),
  clientToken?: string(name='clientToken', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name?: string(name='name', example='test', position='Body'),
}

model UpdateExplorerModuleAttributeResponseBody = {
  requestId?: string(name='requestId', example='25B274BA-E672-58C0-8602-541281B6F758'),
}

model UpdateExplorerModuleAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExplorerModuleAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExplorerModuleAttribute  UpdateExplorerModuleAttributeRequest
  * @return UpdateExplorerModuleAttributeResponse
 */
async function updateExplorerModuleAttribute(request: UpdateExplorerModuleAttributeRequest): UpdateExplorerModuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateExplorerModuleAttribute', 'PUT', '/explorerModule/{explorerModuleId}', 'json', false, 'json', request);
}

model UpdateGroupRequest {
  groupId: string(name='groupId', description='This parameter is required.', example='g-59d8d22e78792ffe3d3eb6154d727', position='Path'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  autoTrigger?: boolean(name='autoTrigger', example='true', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  forcedSetting?: boolean(name='forcedSetting', example='true', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  notifyConfig?: [ 
    {
      notifyPath?: string(name='notifyPath', example='/'),
      notifyType?: string(name='notifyType', example='DingDing'),
    }
  ](name='notifyConfig', position='Body'),
  notifyOperationTypes?: [ string ](name='notifyOperationTypes', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  reportExportField?: [ string ](name='reportExportField', position='Body'),
  reportExportPath?: string(name='reportExportPath', example='/', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.183.0', position='Body'),
  triggerConfig?: [ 
    {
      triggerStrategy?: string(name='triggerStrategy', example='Cron'),
      triggerValue?: string(name='triggerValue', example='0 0 * * * ？'),
    }
  ](name='triggerConfig', position='Body'),
  triggerResourceType?: [ string ](name='triggerResourceType', position='Body'),
}

model UpdateGroupResponseBody = {
  requestId?: string(name='requestId', example='4EF5E823-AC0D-5CB5-8F18-1352455A488D'),
}

model UpdateGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateGroup  UpdateGroupRequest
  * @return UpdateGroupResponse
 */
async function updateGroup(request: UpdateGroupRequest): UpdateGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGroup', 'POST', '/group/{groupId}', 'json', false, 'json', request);
}

model UpdateModuleAttributeRequest {
  moduleId: string(name='moduleId', description='This parameter is required.', example='mod-62ecaa43022ce189d65f8d4a794', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId'),
    projectId?: string(name='projectId'),
  }(name='groupInfo', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  sourcePath?: string(name='sourcePath', example='OSS：
"oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/code.zip"
Registry：
"alibaba/security-group/alicloud:2.1.0"', position='Body'),
  statePath?: string(name='statePath', example='oss::https://terraform-pipeline.oss-eu-central-1.aliyuncs.com/terraform.tfstate', position='Body'),
  tags?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tags', position='Body'),
  versionStrategy?: string(name='versionStrategy', example='Manual', position='Body'),
}

model UpdateModuleAttributeResponseBody = {
  requestId?: string(name='requestId', example='CA05185E-6B90-5941-98D4-7212688AECC8'),
}

model UpdateModuleAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateModuleAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateModuleAttribute  UpdateModuleAttributeRequest
  * @return UpdateModuleAttributeResponse
 */
async function updateModuleAttribute(request: UpdateModuleAttributeRequest): UpdateModuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateModuleAttribute', 'PUT', '/modules/{moduleId}', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  projectId: string(name='projectId', description='This parameter is required.', example='p-433aead7560572f8d95b25775c', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  name?: string(name='name', example='test', position='Body'),
}

model UpdateProjectResponseBody = {
  requestId?: string(name='requestId', example='C62888F6-254D-5589-BF05-0D9EE698C187'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProjectResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProject  UpdateProjectRequest
  * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'POST', '/project/{projectId}', 'json', false, 'json', request);
}

model UpdateRegistryModuleAttributeRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test_namespace', position='Path'),
  moduleName: string(name='moduleName', description='This parameter is required.', example='mns-queue', position='Path'),
  acl?: string(name='acl', example='private', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', position='Body'),
  description?: string(name='description', example='test', position='Body'),
}

model UpdateRegistryModuleAttributeResponseBody = {
  requestId?: string(name='requestId', example='127A5B81-D1E7-5E33-8D44-B89507C4B81F'),
}

model UpdateRegistryModuleAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRegistryModuleAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRegistryModuleAttribute  UpdateRegistryModuleAttributeRequest
  * @return UpdateRegistryModuleAttributeResponse
 */
async function updateRegistryModuleAttribute(request: UpdateRegistryModuleAttributeRequest): UpdateRegistryModuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRegistryModuleAttribute', 'PUT', '/registryModule/{namespaceName}/{moduleName}', 'json', false, 'json', request);
}

model UpdateRegistryNamespaceAttributeRequest {
  namespaceName: string(name='namespaceName', description='This parameter is required.', example='test', position='Path'),
  acl?: string(name='acl', example='private', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', position='Body'),
  description?: string(name='description', example='123', position='Body'),
}

model UpdateRegistryNamespaceAttributeResponseBody = {
  namespaceName?: string(name='namespaceName', example='test'),
  requestId?: string(name='requestId', example='CA5C5B39-D1DC-5309-8E97-B9A91DA21094'),
}

model UpdateRegistryNamespaceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRegistryNamespaceAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateRegistryNamespaceAttribute  UpdateRegistryNamespaceAttributeRequest
  * @return UpdateRegistryNamespaceAttributeResponse
 */
async function updateRegistryNamespaceAttribute(request: UpdateRegistryNamespaceAttributeRequest): UpdateRegistryNamespaceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRegistryNamespaceAttribute', 'PUT', '/registryNamespace/{namespaceName}', 'json', false, 'json', request);
}

model UpdateResourceExportTaskAttributeRequest {
  exportTaskId: string(name='exportTaskId', description='This parameter is required.', example='ex-al1811jl980g5ffd115nhgt', position='Path'),
  clientToken: string(name='clientToken', description='This parameter is required.', example='a65451293e64979ba7a4b573950217fe', position='Body'),
  description?: string(name='description', example='test', position='Body'),
  exportToModule?: {
    source?: string(name='source', example='Registry'),
    sourcePath?: string(name='sourcePath', example='alibaba/security-group/alicloud'),
    statePath?: string(name='statePath', example='/'),
  }(name='exportToModule', position='Body'),
  includeRules?: [ 
    {
      key?: string(name='key', example='ZoneId'),
      values?: [ string ](name='values'),
    }
  ](name='includeRules', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  ramRole?: string(name='ramRole', example='ramName', position='Body'),
  terraformProviderVersion?: string(name='terraformProviderVersion', example='1.183.0', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Manual', position='Body'),
  variables?: [ 
    {
      properties?: [ string ](name='properties'),
      resourceType?: string(name='resourceType', example='AliCloud::VPC::VPC'),
    }
  ](name='variables', position='Body'),
}

model UpdateResourceExportTaskAttributeResponseBody = {
  exportTaskId?: string(name='exportTaskId', example='ex-kw161ol8te1n701e1igt8q8'),
  exportVersion?: string(name='exportVersion', example='v1'),
  requestId?: string(name='requestId', example='B43F08A7-F2A3-54D3-BDA4-69C9F32A7B9F'),
}

model UpdateResourceExportTaskAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateResourceExportTaskAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateResourceExportTaskAttribute  UpdateResourceExportTaskAttributeRequest
  * @return UpdateResourceExportTaskAttributeResponse
 */
async function updateResourceExportTaskAttribute(request: UpdateResourceExportTaskAttributeRequest): UpdateResourceExportTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateResourceExportTaskAttribute', 'PUT', '/exportTasks/{exportTaskId}', 'json', false, 'json', request);
}

model UpdateTaskAttributeRequest {
  taskId: string(name='taskId', description='This parameter is required.', example='task-4267dcfbf1b6dfff67fea425525e2', position='Path'),
  autoApply?: boolean(name='autoApply', example='true', position='Body'),
  autoDestroy?: boolean(name='autoDestroy', example='true', position='Body'),
  clientToken: string(name='clientToken', description='This parameter is required.', position='Body'),
  description?: string(name='description', example='demo', position='Body'),
  groupInfo?: {
    groupId?: string(name='groupId', example='g-433aead7560571e66e31274ffd3'),
    projectId?: string(name='projectId', example='p-433aead75605713865c386cb9d'),
  }(name='groupInfo', position='Body'),
  initModuleState?: boolean(name='initModuleState', position='Body'),
  moduleVersion?: string(name='moduleVersion', example='v1', position='Body'),
  name?: string(name='name', example='test', position='Body'),
  protectionStrategy?: [ string ](name='protectionStrategy', position='Body'),
  ramRole?: string(name='ramRole', example='{}', position='Body'),
  skipPropertyValidation?: boolean(name='skipPropertyValidation', position='Body'),
  tags?: [ 
    {
      tagKey?: string(name='tagKey'),
      tagValue?: string(name='tagValue'),
    }
  ](name='tags', position='Body'),
  terraformVersion?: string(name='terraformVersion', example='1.2.6', position='Body'),
  triggerStrategy?: string(name='triggerStrategy', example='Manual', position='Body'),
}

model UpdateTaskAttributeResponseBody = {
  requestId?: string(name='requestId', example='17793D91-A26F-520D-A948-3452A45D15B1'),
}

model UpdateTaskAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTaskAttributeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTaskAttribute  UpdateTaskAttributeRequest
  * @return UpdateTaskAttributeResponse
 */
async function updateTaskAttribute(request: UpdateTaskAttributeRequest): UpdateTaskAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTaskAttribute', 'PUT', '/tasks/{taskId}', 'json', false, 'json', request);
}

model ValidateModuleRequest {
  clientToken?: string(name='clientToken', example='2daf4227f747cbf11a5501f18cc5e004', position='Body'),
  code?: string(name='code', example='code', position='Body'),
  codeMap?: map[string]any(name='codeMap', example='{"main.tf":"xxx"}', position='Body'),
  source?: string(name='source', example='Upload', position='Body'),
  sourcePath?: string(name='sourcePath', example='test', position='Body'),
}

model ValidateModuleResponseBody = {
  message?: string(name='message', example='ok'),
  moduleValidationId?: string(name='moduleValidationId', example='BF72A6FB-B07'),
  requestId?: string(name='requestId', example='BF72A6FB-B071-5F2E-A036-9D62545B962C'),
  status?: string(name='status', example='Validating'),
}

model ValidateModuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateModuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateModule  ValidateModuleRequest
  * @return ValidateModuleResponse
 */
async function validateModule(request: ValidateModuleRequest): ValidateModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateModule', 'POST', '/module/validation', 'json', false, 'json', request);
}

function validateModuleWithResponseIterable(request: ValidateModuleRequest): iterator[ValidateModuleResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'ValidateModule', 'POST', '/module/validation', 'json', false, 'json', request);
}

model JobStatusDetailValue = {
  comment?: string(name='comment'),
  jobResult?: string(name='jobResult', example='{}'),
  timeStamps?: string(name='timeStamps', example='2022-06-13 17:11:34'),
}

model JobsStatusDetailValue = {
  jobResult?: string(name='jobResult', example='""'),
  comment?: string(name='comment', example='""'),
  timeStamps?: string(name='timeStamps', example='2022-06-13 17:11:34'),
}

