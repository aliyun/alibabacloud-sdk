/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Buss';
  @version = '2022-08-22';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BusinessResultServiceRequest {
  actionCode?: string(name='ActionCode', position='Query'),
  bussinessCode?: string(name='BussinessCode', position='Query'),
  errCode?: string(name='ErrCode', position='Query'),
  errMessage?: string(name='ErrMessage', position='Query'),
  requestId?: string(name='RequestId', position='Query'),
  result?: map[string]any(name='Result', shrink='json', position='Query'),
  success?: boolean(name='Success', position='Query'),
}

model BusinessResultServiceResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model BusinessResultServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BusinessResultServiceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BusinessResultService  BusinessResultServiceRequest
  * @return BusinessResultServiceResponse
 */
async function businessResultService(request: BusinessResultServiceRequest): BusinessResultServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BusinessResultService', 'GET', '/', 'json', false, 'json', request);
}

model CreateUserInvestigationInfoQueryTaskRequest {
  dataType: string(name='dataType', description='This parameter is required.', position='Query'),
  employeeId: string(name='employeeId', description='This parameter is required.', position='Query'),
  endTime: long(name='endTime', description='This parameter is required.', position='Query'),
  ossFileName: string(name='ossFileName', description='This parameter is required.', position='Query'),
  startTime: long(name='startTime', description='This parameter is required.', position='Query'),
  userId: string(name='userId', description='This parameter is required.', position='Query'),
}

model CreateUserInvestigationInfoQueryTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskId?: string(name='taskId'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model CreateUserInvestigationInfoQueryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserInvestigationInfoQueryTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserInvestigationInfoQueryTask  CreateUserInvestigationInfoQueryTaskRequest
  * @return CreateUserInvestigationInfoQueryTaskResponse
 */
async function createUserInvestigationInfoQueryTask(request: CreateUserInvestigationInfoQueryTaskRequest): CreateUserInvestigationInfoQueryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserInvestigationInfoQueryTask', 'GET', '/', 'json', false, 'json', request);
}

model FindInstanceInfoRequest {
  businessCodes?: string(name='businessCodes', position='Query'),
  bussinessCode?: string(name='bussinessCode', position='Query'),
  domain?: string(name='domain', position='Query'),
  endTime?: long(name='endTime', position='Query'),
  extras?: map[string]any(name='extras', shrink='json', position='Query'),
  ip?: string(name='ip', position='Query'),
  needDNS?: boolean(name='needDNS', position='Query'),
  startTime?: long(name='startTime', position='Query'),
  url?: string(name='url', position='Query'),
  userId?: string(name='userId', position='Query'),
}

model FindInstanceInfoResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    pegInstanceInfoList?: [ 
      {
        bussinessCode?: string(name='BussinessCode'),
        coordinate?: map[string]any(name='Coordinate'),
        idType?: string(name='IdType'),
        instanceId?: string(name='InstanceId'),
        serviceCreatedTime?: string(name='ServiceCreatedTime'),
        userId?: string(name='UserId'),
        userInfo?: {
          gcLevel?: string(name='GcLevel'),
          hitWhiteReason?: string(name='HitWhiteReason'),
          userId?: string(name='UserId'),
          userSite?: string(name='UserSite'),
          whiteUser?: boolean(name='WhiteUser'),
        }(name='UserInfo'),
      }
    ](name='PegInstanceInfoList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FindInstanceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindInstanceInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindInstanceInfo  FindInstanceInfoRequest
  * @return FindInstanceInfoResponse
 */
async function findInstanceInfo(request: FindInstanceInfoRequest): FindInstanceInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindInstanceInfo', 'GET', '/', 'json', false, 'json', request);
}

model FindUserAvailbleResourcesRequest {
  bussinessCode?: string(name='bussinessCode', position='Query'),
  currPage?: int32(name='currPage', position='Query'),
  pageSize?: int32(name='pageSize', position='Query'),
  resourceType?: string(name='resourceType', position='Query'),
  userId?: string(name='userId', position='Query'),
}

model FindUserAvailbleResourcesResponseBody = {
  code?: string(name='Code'),
  count?: long(name='Count'),
  data?: {
    pegCoordinates?: [ 
      {
        bussinessCode?: string(name='BussinessCode'),
        chargeType?: string(name='ChargeType'),
        coordinate?: map[string]any(name='Coordinate'),
        idType?: string(name='IdType'),
        instanceId?: string(name='InstanceId'),
        region?: string(name='Region'),
        releaseTime?: string(name='ReleaseTime'),
        resCreateTime?: string(name='ResCreateTime'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        serviceCreatedTime?: string(name='ServiceCreatedTime'),
        userId?: string(name='UserId'),
      }
    ](name='PegCoordinates'),
    userInfo?: {
      gcLevel?: string(name='GcLevel'),
      hitWhiteReason?: string(name='HitWhiteReason'),
      userId?: string(name='UserId'),
      userSite?: string(name='UserSite'),
      whiteUser?: boolean(name='WhiteUser'),
    }(name='UserInfo'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken: string(name='NextToken', description='This parameter is required.'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model FindUserAvailbleResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindUserAvailbleResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FindUserAvailbleResources  FindUserAvailbleResourcesRequest
  * @return FindUserAvailbleResourcesResponse
 */
async function findUserAvailbleResources(request: FindUserAvailbleResourcesRequest): FindUserAvailbleResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FindUserAvailbleResources', 'GET', '/', 'json', false, 'json', request);
}

model GetSecurityEventDetailRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId?: string(name='EventId', position='Query'),
  callerParentId?: long(name='callerParentId', position='Query'),
  callerType?: string(name='callerType', position='Query'),
  callerUid?: long(name='callerUid', position='Query'),
}

model GetSecurityEventDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliuid?: string(name='Aliuid'),
    dataSource?: string(name='DataSource'),
    eventCode?: string(name='EventCode'),
    eventId?: string(name='EventId'),
    eventTime?: string(name='EventTime'),
    extra?: string(name='Extra'),
    level?: string(name='Level'),
    principalId?: string(name='PrincipalId'),
    resourceId?: string(name='ResourceId'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSecurityEventDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSecurityEventDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSecurityEventDetail  GetSecurityEventDetailRequest
  * @return GetSecurityEventDetailResponse
 */
async function getSecurityEventDetail(request: GetSecurityEventDetailRequest): GetSecurityEventDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecurityEventDetail', 'GET', '/', 'json', false, 'json', request);
}

model PunishResourceSearchRequest {
  actionCodes?: [ string ](name='ActionCodes', shrink='json', position='Query'),
  bussinessCodes?: [ string ](name='BussinessCodes', shrink='json', position='Query'),
  class?: string(name='Class', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endDate?: long(name='EndDate', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ip?: string(name='Ip', position='Query'),
  page?: long(name='Page', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  sourceCodes?: [ string ](name='SourceCodes', shrink='json', position='Query'),
  startDate?: long(name='StartDate', position='Query'),
  status?: string(name='Status', position='Query'),
  url?: string(name='Url', position='Query'),
  userIds?: [ string ](name='UserIds', shrink='json', position='Query'),
}

model PunishResourceSearchResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      actionCode?: string(name='ActionCode'),
      bussinessCode?: string(name='BussinessCode'),
      class?: string(name='Class'),
      coordinate?: string(name='Coordinate'),
      creator?: string(name='Creator'),
      deleted?: boolean(name='Deleted'),
      domain?: string(name='Domain'),
      extras?: string(name='Extras'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      ip?: string(name='Ip'),
      modifier?: string(name='Modifier'),
      objectId?: string(name='ObjectId'),
      objectType?: string(name='ObjectType'),
      objectValue?: string(name='ObjectValue'),
      punishFrom?: string(name='PunishFrom'),
      reason?: string(name='Reason'),
      requestId?: long(name='RequestId'),
      sourceCode?: string(name='SourceCode'),
      status?: string(name='Status'),
      url?: string(name='Url'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
  viewCount?: int32(name='ViewCount'),
}

model PunishResourceSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PunishResourceSearchResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PunishResourceSearch  PunishResourceSearchRequest
  * @return PunishResourceSearchResponse
 */
async function punishResourceSearch(request: PunishResourceSearchRequest): PunishResourceSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PunishResourceSearch', 'GET', '/', 'json', false, 'json', request);
}

model RecordClickLinkActionRequest {
  tag?: string(name='Tag', position='Body'),
}

model RecordClickLinkActionResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RecordClickLinkActionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecordClickLinkActionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecordClickLinkAction  RecordClickLinkActionRequest
  * @return RecordClickLinkActionResponse
 */
async function recordClickLinkAction(request: RecordClickLinkActionRequest): RecordClickLinkActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecordClickLinkAction', 'POST', '/', 'json', true, 'form', request);
}

model RiskEventSyncRequest {
  deleted?: boolean(name='Deleted', position='Body'),
  discoveryTime: long(name='DiscoveryTime', description='This parameter is required.', position='Body'),
  eventName: string(name='EventName', description='This parameter is required.', position='Body'),
  eventNumber?: string(name='EventNumber', position='Body'),
  relevanceBu?: string(name='RelevanceBu', position='Body'),
  riskDetail: string(name='RiskDetail', description='This parameter is required.', position='Body'),
  riskEffectType: string(name='RiskEffectType', description='This parameter is required.', position='Body'),
  riskLevel?: string(name='RiskLevel', position='Body'),
  riskType: string(name='RiskType', description='This parameter is required.', position='Body'),
  source: string(name='Source', description='This parameter is required.', position='Body'),
  submitter: string(name='Submitter', description='This parameter is required.', position='Body'),
}

model RiskEventSyncResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model RiskEventSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RiskEventSyncResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RiskEventSync  RiskEventSyncRequest
  * @return RiskEventSyncResponse
 */
async function riskEventSync(request: RiskEventSyncRequest): RiskEventSyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RiskEventSync', 'POST', '/', 'json', true, 'form', request);
}

model SearchPunishEventsRequest {
  aliUid: string(name='AliUid', description='This parameter is required.', position='Query'),
  bussinessCodes?: [ string ](name='BussinessCodes', shrink='json', position='Query'),
  caseCodes?: [ string ](name='CaseCodes', shrink='json', position='Query'),
  eventCodes?: [ string ](name='EventCodes', shrink='json', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
}

model SearchPunishEventsResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      recordsCount?: int32(name='RecordsCount'),
      resourceId?: string(name='ResourceId'),
      tipsCode?: string(name='TipsCode'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model SearchPunishEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishEventsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchPunishEvents  SearchPunishEventsRequest
  * @return SearchPunishEventsResponse
 */
async function searchPunishEvents(request: SearchPunishEventsRequest): SearchPunishEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPunishEvents', 'POST', '/', 'json', false, 'json', request);
}

model SearchPunishRecordsRequest {
  actionCodes?: [ string ](name='ActionCodes', shrink='json', position='Query'),
  aliUid: string(name='AliUid', description='This parameter is required.', position='Query'),
  bussinessCodes?: string(name='BussinessCodes', position='Query'),
  caseCodes?: [ string ](name='CaseCodes', shrink='json', position='Query'),
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  eventCodes?: [ string ](name='EventCodes', shrink='json', position='Query'),
  ip?: string(name='Ip', position='Query'),
  page?: string(name='Page', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  punishStatus?: [ string ](name='PunishStatus', shrink='json', position='Query'),
  resourceId?: string(name='ResourceId', position='Query'),
  sourceCodes?: [ string ](name='SourceCodes', shrink='json', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  url?: string(name='Url', position='Query'),
  urlFuzzy?: string(name='UrlFuzzy', position='Query'),
}

model SearchPunishRecordsResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      actionCode?: string(name='ActionCode'),
      antiStatus?: string(name='AntiStatus'),
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      eventCode?: string(name='EventCode'),
      ip?: string(name='Ip'),
      punishStatus?: string(name='PunishStatus'),
      reason?: string(name='Reason'),
      resourceId?: string(name='ResourceId'),
      tipsCode?: string(name='TipsCode'),
      url?: string(name='Url'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model SearchPunishRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchPunishRecords  SearchPunishRecordsRequest
  * @return SearchPunishRecordsResponse
 */
async function searchPunishRecords(request: SearchPunishRecordsRequest): SearchPunishRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPunishRecords', 'POST', '/', 'json', false, 'json', request);
}

model SearchPunishRequestRequest {
  antiStatuses?: [ string ](name='AntiStatuses', shrink='json', position='Query'),
  bussinessCodes?: [ string ](name='BussinessCodes', shrink='json', position='Query'),
  class?: string(name='Class', position='Query'),
  endDate?: long(name='EndDate', position='Query'),
  eventCodes?: [ string ](name='EventCodes', shrink='json', position='Query'),
  extRequestId?: string(name='ExtRequestId', position='Query'),
  id?: long(name='Id', position='Query'),
  idType?: string(name='IdType', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  page?: long(name='Page', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  punishDomain?: string(name='PunishDomain', position='Query'),
  punishIp?: string(name='PunishIp', position='Query'),
  punishStatuses?: [ string ](name='PunishStatuses', shrink='json', position='Query'),
  punishUrl?: string(name='PunishUrl', position='Query'),
  punishUrlFull?: string(name='PunishUrlFull', position='Query'),
  sourceCodes?: [ string ](name='SourceCodes', shrink='json', position='Query'),
  startDate?: long(name='StartDate', position='Query'),
  userIds?: [ string ](name='UserIds', shrink='json', position='Query'),
}

model SearchPunishRequestResponseBody = {
  class?: string(name='Class'),
  code?: string(name='Code'),
  count?: long(name='Count'),
  dataList?: [ 
    {
      antiPunishRespTime?: string(name='AntiPunishRespTime'),
      antiPunishTime?: string(name='AntiPunishTime'),
      antiResult?: string(name='AntiResult'),
      antiStatus?: string(name='AntiStatus'),
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      caseExtendCode?: string(name='CaseExtendCode'),
      caseSubCode?: string(name='CaseSubCode'),
      class?: string(name='Class'),
      creator?: string(name='Creator'),
      deleted?: boolean(name='Deleted'),
      eventCode?: string(name='EventCode'),
      expectedRemoveTime?: string(name='ExpectedRemoveTime'),
      extRequestId?: string(name='ExtRequestId'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      idType?: string(name='IdType'),
      instanceId?: string(name='InstanceId'),
      ipString?: string(name='IpString'),
      modifier?: string(name='Modifier'),
      operator?: string(name='Operator'),
      operatorNum?: string(name='OperatorNum'),
      punishDomain?: string(name='PunishDomain'),
      punishIp?: string(name='PunishIp'),
      punishOfficer?: string(name='PunishOfficer'),
      punishOfficerNum?: string(name='PunishOfficerNum'),
      punishRequest?: string(name='PunishRequest'),
      punishRespTime?: string(name='PunishRespTime'),
      punishResult?: string(name='PunishResult'),
      punishStatus?: string(name='PunishStatus'),
      punishTime?: string(name='PunishTime'),
      punishUrl?: string(name='PunishUrl'),
      reason?: string(name='Reason'),
      sourceCode?: string(name='SourceCode'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  viewCount?: long(name='ViewCount'),
}

model SearchPunishRequestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishRequestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchPunishRequest  SearchPunishRequestRequest
  * @return SearchPunishRequestResponse
 */
async function searchPunishRequest(request: SearchPunishRequestRequest): SearchPunishRequestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchPunishRequest', 'GET', '/', 'json', false, 'json', request);
}

model UpdateSecurityEventStatusRequest {
  aliUid?: string(name='AliUid', position='Query'),
  eventId?: string(name='EventId', position='Query'),
  status?: string(name='Status', position='Query'),
  callerParentId?: long(name='callerParentId', position='Query'),
  callerType?: string(name='callerType', position='Query'),
  callerUid?: long(name='callerUid', position='Query'),
}

model UpdateSecurityEventStatusResponseBody = {
  code?: string(name='Code'),
  data?: any(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateSecurityEventStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSecurityEventStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSecurityEventStatus  UpdateSecurityEventStatusRequest
  * @return UpdateSecurityEventStatusResponse
 */
async function updateSecurityEventStatus(request: UpdateSecurityEventStatusRequest): UpdateSecurityEventStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSecurityEventStatus', 'GET', '/', 'json', false, 'json', request);
}

