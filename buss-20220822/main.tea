/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('buss', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BusinessResultServiceRequest {
  actionCode?: string(name='ActionCode'),
  bussinessCode?: string(name='BussinessCode'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
  success?: boolean(name='Success'),
}

model BusinessResultServiceShrinkRequest {
  actionCode?: string(name='ActionCode'),
  bussinessCode?: string(name='BussinessCode'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  requestId?: string(name='RequestId'),
  resultShrink?: string(name='Result'),
  success?: boolean(name='Success'),
}

model BusinessResultServiceResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model BusinessResultServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BusinessResultServiceResponseBody(name='body'),
}

/**
 * @summary 处罚请求异步接口回调
 *
 * @param tmpReq BusinessResultServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BusinessResultServiceResponse
 */
async function businessResultServiceWithOptions(tmpReq: BusinessResultServiceRequest, runtime: Util.RuntimeOptions): BusinessResultServiceResponse {
  Util.validateModel(tmpReq);
  var request = new BusinessResultServiceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.result)) {
    request.resultShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.result, 'Result', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BusinessResultService',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处罚请求异步接口回调
 *
 * @param request BusinessResultServiceRequest
 * @return BusinessResultServiceResponse
 */
async function businessResultService(request: BusinessResultServiceRequest): BusinessResultServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return businessResultServiceWithOptions(request, runtime);
}

model CreateUserInvestigationInfoQueryTaskRequest {
  dataType?: string(name='dataType', description='This parameter is required.'),
  employeeId?: string(name='employeeId', description='This parameter is required.'),
  endTime?: long(name='endTime', description='This parameter is required.'),
  ossFileName?: string(name='ossFileName', description='This parameter is required.'),
  startTime?: long(name='startTime', description='This parameter is required.'),
  userId?: string(name='userId', description='This parameter is required.'),
}

model CreateUserInvestigationInfoQueryTaskResponseBody = {
  code?: string(name='Code'),
  data?: {
    taskId?: string(name='taskId'),
  }(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model CreateUserInvestigationInfoQueryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserInvestigationInfoQueryTaskResponseBody(name='body'),
}

/**
 * @summary 协查中心查询任务接口
 *
 * @param request CreateUserInvestigationInfoQueryTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateUserInvestigationInfoQueryTaskResponse
 */
async function createUserInvestigationInfoQueryTaskWithOptions(request: CreateUserInvestigationInfoQueryTaskRequest, runtime: Util.RuntimeOptions): CreateUserInvestigationInfoQueryTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserInvestigationInfoQueryTask',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 协查中心查询任务接口
 *
 * @param request CreateUserInvestigationInfoQueryTaskRequest
 * @return CreateUserInvestigationInfoQueryTaskResponse
 */
async function createUserInvestigationInfoQueryTask(request: CreateUserInvestigationInfoQueryTaskRequest): CreateUserInvestigationInfoQueryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserInvestigationInfoQueryTaskWithOptions(request, runtime);
}

model FindInstanceInfoRequest {
  bussinessCode?: string(name='bussinessCode'),
  domain?: string(name='domain'),
  endTime?: long(name='endTime'),
  extras?: map[string]any(name='extras'),
  ip?: string(name='ip'),
  needDNS?: boolean(name='needDNS'),
  startTime?: long(name='startTime'),
  url?: string(name='url'),
  userId?: string(name='userId'),
}

model FindInstanceInfoShrinkRequest {
  bussinessCode?: string(name='bussinessCode'),
  domain?: string(name='domain'),
  endTime?: long(name='endTime'),
  extrasShrink?: string(name='extras'),
  ip?: string(name='ip'),
  needDNS?: boolean(name='needDNS'),
  startTime?: long(name='startTime'),
  url?: string(name='url'),
  userId?: string(name='userId'),
}

model FindInstanceInfoResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: {
    pegInstanceInfoList?: [ 
      {
        bussinessCode?: string(name='BussinessCode'),
        coordinate?: map[string]any(name='Coordinate'),
        idType?: string(name='IdType'),
        instanceId?: string(name='InstanceId'),
        serviceCreatedTime?: string(name='ServiceCreatedTime'),
        userId?: string(name='UserId'),
        userInfo?: {
          gcLevel?: string(name='GcLevel'),
          hitWhiteReason?: string(name='HitWhiteReason'),
          userId?: string(name='UserId'),
          userSite?: string(name='UserSite'),
          whiteUser?: boolean(name='WhiteUser'),
        }(name='UserInfo'),
      }
    ](name='PegInstanceInfoList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FindInstanceInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindInstanceInfoResponseBody(name='body'),
}

/**
 * @summary 反查资源
 *
 * @param tmpReq FindInstanceInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindInstanceInfoResponse
 */
async function findInstanceInfoWithOptions(tmpReq: FindInstanceInfoRequest, runtime: Util.RuntimeOptions): FindInstanceInfoResponse {
  Util.validateModel(tmpReq);
  var request = new FindInstanceInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extras)) {
    request.extrasShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extras, 'extras', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindInstanceInfo',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 反查资源
 *
 * @param request FindInstanceInfoRequest
 * @return FindInstanceInfoResponse
 */
async function findInstanceInfo(request: FindInstanceInfoRequest): FindInstanceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return findInstanceInfoWithOptions(request, runtime);
}

model FindUserAvailbleResourcesRequest {
  bussinessCode?: string(name='bussinessCode'),
  currPage?: int32(name='currPage'),
  pageSize?: int32(name='pageSize'),
  resourceType?: string(name='resourceType'),
  userId?: string(name='userId'),
}

model FindUserAvailbleResourcesResponseBody = {
  code?: string(name='Code'),
  count?: long(name='Count'),
  data?: {
    pegCoordinates?: [ 
      {
        bussinessCode?: string(name='BussinessCode'),
        chargeType?: string(name='ChargeType'),
        coordinate?: map[string]any(name='Coordinate'),
        idType?: string(name='IdType'),
        instanceId?: string(name='InstanceId'),
        region?: string(name='Region'),
        releaseTime?: string(name='ReleaseTime'),
        resCreateTime?: string(name='ResCreateTime'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceType?: string(name='ResourceType'),
        serviceCreatedTime?: string(name='ServiceCreatedTime'),
        userId?: string(name='UserId'),
      }
    ](name='PegCoordinates'),
    userInfo?: {
      gcLevel?: string(name='GcLevel'),
      hitWhiteReason?: string(name='HitWhiteReason'),
      userId?: string(name='UserId'),
      userSite?: string(name='UserSite'),
      whiteUser?: boolean(name='WhiteUser'),
    }(name='UserInfo'),
  }(name='Data'),
  maxResults?: int32(name='MaxResults'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken', description='This parameter is required.'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model FindUserAvailbleResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FindUserAvailbleResourcesResponseBody(name='body'),
}

/**
 * @summary 根据用户id查询对应产品下全部可用资产信息接口
 *
 * @param request FindUserAvailbleResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FindUserAvailbleResourcesResponse
 */
async function findUserAvailbleResourcesWithOptions(request: FindUserAvailbleResourcesRequest, runtime: Util.RuntimeOptions): FindUserAvailbleResourcesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FindUserAvailbleResources',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 根据用户id查询对应产品下全部可用资产信息接口
 *
 * @param request FindUserAvailbleResourcesRequest
 * @return FindUserAvailbleResourcesResponse
 */
async function findUserAvailbleResources(request: FindUserAvailbleResourcesRequest): FindUserAvailbleResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return findUserAvailbleResourcesWithOptions(request, runtime);
}

model PunishResourceSearchRequest {
  actionCodes?: [ string ](name='ActionCodes'),
  bussinessCodes?: [ string ](name='BussinessCodes'),
  class?: string(name='Class'),
  domain?: string(name='Domain'),
  endDate?: long(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  sourceCodes?: [ string ](name='SourceCodes'),
  startDate?: long(name='StartDate'),
  status?: string(name='Status'),
  url?: string(name='Url'),
  userIds?: [ string ](name='UserIds'),
}

model PunishResourceSearchShrinkRequest {
  actionCodesShrink?: string(name='ActionCodes'),
  bussinessCodesShrink?: string(name='BussinessCodes'),
  class?: string(name='Class'),
  domain?: string(name='Domain'),
  endDate?: long(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  ip?: string(name='Ip'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  sourceCodesShrink?: string(name='SourceCodes'),
  startDate?: long(name='StartDate'),
  status?: string(name='Status'),
  url?: string(name='Url'),
  userIdsShrink?: string(name='UserIds'),
}

model PunishResourceSearchResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      actionCode?: string(name='ActionCode'),
      bussinessCode?: string(name='BussinessCode'),
      class?: string(name='Class'),
      coordinate?: string(name='Coordinate'),
      creator?: string(name='Creator'),
      deleted?: boolean(name='Deleted'),
      domain?: string(name='Domain'),
      extras?: string(name='Extras'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      ip?: string(name='Ip'),
      modifier?: string(name='Modifier'),
      objectId?: string(name='ObjectId'),
      objectType?: string(name='ObjectType'),
      objectValue?: string(name='ObjectValue'),
      punishFrom?: string(name='PunishFrom'),
      reason?: string(name='Reason'),
      requestId?: long(name='RequestId'),
      sourceCode?: string(name='SourceCode'),
      status?: string(name='Status'),
      url?: string(name='Url'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  success?: string(name='Success'),
  totalCount?: int32(name='TotalCount'),
  viewCount?: int32(name='ViewCount'),
}

model PunishResourceSearchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PunishResourceSearchResponseBody(name='body'),
}

/**
 * @summary 处罚资源搜索
 *
 * @param tmpReq PunishResourceSearchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PunishResourceSearchResponse
 */
async function punishResourceSearchWithOptions(tmpReq: PunishResourceSearchRequest, runtime: Util.RuntimeOptions): PunishResourceSearchResponse {
  Util.validateModel(tmpReq);
  var request = new PunishResourceSearchShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionCodes)) {
    request.actionCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionCodes, 'ActionCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.bussinessCodes)) {
    request.bussinessCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bussinessCodes, 'BussinessCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceCodes)) {
    request.sourceCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceCodes, 'SourceCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PunishResourceSearch',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处罚资源搜索
 *
 * @param request PunishResourceSearchRequest
 * @return PunishResourceSearchResponse
 */
async function punishResourceSearch(request: PunishResourceSearchRequest): PunishResourceSearchResponse {
  var runtime = new Util.RuntimeOptions{};
  return punishResourceSearchWithOptions(request, runtime);
}

model RiskEventSyncRequest {
  deleted?: boolean(name='Deleted'),
  discoveryTime?: long(name='DiscoveryTime', description='This parameter is required.'),
  eventName?: string(name='EventName', description='This parameter is required.'),
  eventNumber?: string(name='EventNumber'),
  relevanceBu?: string(name='RelevanceBu'),
  riskDetail?: string(name='RiskDetail', description='This parameter is required.'),
  riskEffectType?: string(name='RiskEffectType', description='This parameter is required.'),
  riskLevel?: string(name='RiskLevel'),
  riskType?: string(name='RiskType', description='This parameter is required.'),
  source?: string(name='Source', description='This parameter is required.'),
  submitter?: string(name='Submitter', description='This parameter is required.'),
}

model RiskEventSyncResponseBody = {
  code?: string(name='Code'),
  count?: int32(name='Count'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model RiskEventSyncResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RiskEventSyncResponseBody(name='body'),
}

/**
 * @summary 风险事件同步
 *
 * @param request RiskEventSyncRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RiskEventSyncResponse
 */
async function riskEventSyncWithOptions(request: RiskEventSyncRequest, runtime: Util.RuntimeOptions): RiskEventSyncResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.deleted)) {
    body['Deleted'] = request.deleted;
  }
  if (!Util.isUnset(request.discoveryTime)) {
    body['DiscoveryTime'] = request.discoveryTime;
  }
  if (!Util.isUnset(request.eventName)) {
    body['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.eventNumber)) {
    body['EventNumber'] = request.eventNumber;
  }
  if (!Util.isUnset(request.relevanceBu)) {
    body['RelevanceBu'] = request.relevanceBu;
  }
  if (!Util.isUnset(request.riskDetail)) {
    body['RiskDetail'] = request.riskDetail;
  }
  if (!Util.isUnset(request.riskEffectType)) {
    body['RiskEffectType'] = request.riskEffectType;
  }
  if (!Util.isUnset(request.riskLevel)) {
    body['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.riskType)) {
    body['RiskType'] = request.riskType;
  }
  if (!Util.isUnset(request.source)) {
    body['Source'] = request.source;
  }
  if (!Util.isUnset(request.submitter)) {
    body['Submitter'] = request.submitter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RiskEventSync',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 风险事件同步
 *
 * @param request RiskEventSyncRequest
 * @return RiskEventSyncResponse
 */
async function riskEventSync(request: RiskEventSyncRequest): RiskEventSyncResponse {
  var runtime = new Util.RuntimeOptions{};
  return riskEventSyncWithOptions(request, runtime);
}

model SearchPunishEventsRequest {
  aliUid?: string(name='AliUid', description='This parameter is required.'),
  bussinessCodes?: [ string ](name='BussinessCodes'),
  caseCodes?: [ string ](name='CaseCodes'),
  eventCodes?: [ string ](name='EventCodes'),
  resourceId?: string(name='ResourceId'),
}

model SearchPunishEventsShrinkRequest {
  aliUid?: string(name='AliUid', description='This parameter is required.'),
  bussinessCodesShrink?: string(name='BussinessCodes'),
  caseCodesShrink?: string(name='CaseCodes'),
  eventCodesShrink?: string(name='EventCodes'),
  resourceId?: string(name='ResourceId'),
}

model SearchPunishEventsResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      recordsCount?: int32(name='RecordsCount'),
      resourceId?: string(name='ResourceId'),
      tipsCode?: string(name='TipsCode'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model SearchPunishEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishEventsResponseBody(name='body'),
}

/**
 * @summary 管控事件查询
 *
 * @param tmpReq SearchPunishEventsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchPunishEventsResponse
 */
async function searchPunishEventsWithOptions(tmpReq: SearchPunishEventsRequest, runtime: Util.RuntimeOptions): SearchPunishEventsResponse {
  Util.validateModel(tmpReq);
  var request = new SearchPunishEventsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bussinessCodes)) {
    request.bussinessCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bussinessCodes, 'BussinessCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.caseCodes)) {
    request.caseCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.caseCodes, 'CaseCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.eventCodes)) {
    request.eventCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventCodes, 'EventCodes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.bussinessCodesShrink)) {
    query['BussinessCodes'] = request.bussinessCodesShrink;
  }
  if (!Util.isUnset(request.caseCodesShrink)) {
    query['CaseCodes'] = request.caseCodesShrink;
  }
  if (!Util.isUnset(request.eventCodesShrink)) {
    query['EventCodes'] = request.eventCodesShrink;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchPunishEvents',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 管控事件查询
 *
 * @param request SearchPunishEventsRequest
 * @return SearchPunishEventsResponse
 */
async function searchPunishEvents(request: SearchPunishEventsRequest): SearchPunishEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchPunishEventsWithOptions(request, runtime);
}

model SearchPunishRecordsRequest {
  actionCodes?: [ string ](name='ActionCodes'),
  aliUid?: string(name='AliUid', description='This parameter is required.'),
  bussinessCodes?: string(name='BussinessCodes'),
  caseCodes?: [ string ](name='CaseCodes'),
  domain?: string(name='Domain'),
  endTime?: long(name='EndTime'),
  eventCodes?: [ string ](name='EventCodes'),
  ip?: string(name='Ip'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
  punishStatus?: [ string ](name='PunishStatus'),
  resourceId?: string(name='ResourceId'),
  sourceCodes?: [ string ](name='SourceCodes'),
  startTime?: long(name='StartTime'),
  url?: string(name='Url'),
  urlFuzzy?: string(name='UrlFuzzy'),
}

model SearchPunishRecordsShrinkRequest {
  actionCodesShrink?: string(name='ActionCodes'),
  aliUid?: string(name='AliUid', description='This parameter is required.'),
  bussinessCodes?: string(name='BussinessCodes'),
  caseCodesShrink?: string(name='CaseCodes'),
  domain?: string(name='Domain'),
  endTime?: long(name='EndTime'),
  eventCodesShrink?: string(name='EventCodes'),
  ip?: string(name='Ip'),
  page?: string(name='Page'),
  pageSize?: string(name='PageSize'),
  punishStatusShrink?: string(name='PunishStatus'),
  resourceId?: string(name='ResourceId'),
  sourceCodesShrink?: string(name='SourceCodes'),
  startTime?: long(name='StartTime'),
  url?: string(name='Url'),
  urlFuzzy?: string(name='UrlFuzzy'),
}

model SearchPunishRecordsResponseBody = {
  code?: string(name='Code'),
  dataList?: [ 
    {
      actionCode?: string(name='ActionCode'),
      antiStatus?: string(name='AntiStatus'),
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      createTime?: string(name='CreateTime'),
      domain?: string(name='Domain'),
      eventCode?: string(name='EventCode'),
      ip?: string(name='Ip'),
      punishStatus?: string(name='PunishStatus'),
      reason?: string(name='Reason'),
      resourceId?: string(name='ResourceId'),
      tipsCode?: string(name='TipsCode'),
      url?: string(name='Url'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: int32(name='TotalCount'),
}

model SearchPunishRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishRecordsResponseBody(name='body'),
}

/**
 * @summary 管控事件查询
 *
 * @param tmpReq SearchPunishRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchPunishRecordsResponse
 */
async function searchPunishRecordsWithOptions(tmpReq: SearchPunishRecordsRequest, runtime: Util.RuntimeOptions): SearchPunishRecordsResponse {
  Util.validateModel(tmpReq);
  var request = new SearchPunishRecordsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.actionCodes)) {
    request.actionCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.actionCodes, 'ActionCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.caseCodes)) {
    request.caseCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.caseCodes, 'CaseCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.eventCodes)) {
    request.eventCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventCodes, 'EventCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.punishStatus)) {
    request.punishStatusShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.punishStatus, 'PunishStatus', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceCodes)) {
    request.sourceCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceCodes, 'SourceCodes', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.actionCodesShrink)) {
    query['ActionCodes'] = request.actionCodesShrink;
  }
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.bussinessCodes)) {
    query['BussinessCodes'] = request.bussinessCodes;
  }
  if (!Util.isUnset(request.caseCodesShrink)) {
    query['CaseCodes'] = request.caseCodesShrink;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventCodesShrink)) {
    query['EventCodes'] = request.eventCodesShrink;
  }
  if (!Util.isUnset(request.ip)) {
    query['Ip'] = request.ip;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.punishStatusShrink)) {
    query['PunishStatus'] = request.punishStatusShrink;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.sourceCodesShrink)) {
    query['SourceCodes'] = request.sourceCodesShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.url)) {
    query['Url'] = request.url;
  }
  if (!Util.isUnset(request.urlFuzzy)) {
    query['UrlFuzzy'] = request.urlFuzzy;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchPunishRecords',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 管控事件查询
 *
 * @param request SearchPunishRecordsRequest
 * @return SearchPunishRecordsResponse
 */
async function searchPunishRecords(request: SearchPunishRecordsRequest): SearchPunishRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchPunishRecordsWithOptions(request, runtime);
}

model SearchPunishRequestRequest {
  antiStatuses?: [ string ](name='AntiStatuses'),
  bussinessCodes?: [ string ](name='BussinessCodes'),
  class?: string(name='Class'),
  endDate?: long(name='EndDate'),
  eventCodes?: [ string ](name='EventCodes'),
  extRequestId?: string(name='ExtRequestId'),
  id?: long(name='Id'),
  idType?: string(name='IdType'),
  instanceId?: string(name='InstanceId'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  punishDomain?: string(name='PunishDomain'),
  punishIp?: string(name='PunishIp'),
  punishStatuses?: [ string ](name='PunishStatuses'),
  punishUrl?: string(name='PunishUrl'),
  punishUrlFull?: string(name='PunishUrlFull'),
  sourceCodes?: [ string ](name='SourceCodes'),
  startDate?: long(name='StartDate'),
  userIds?: [ string ](name='UserIds'),
}

model SearchPunishRequestShrinkRequest {
  antiStatusesShrink?: string(name='AntiStatuses'),
  bussinessCodesShrink?: string(name='BussinessCodes'),
  class?: string(name='Class'),
  endDate?: long(name='EndDate'),
  eventCodesShrink?: string(name='EventCodes'),
  extRequestId?: string(name='ExtRequestId'),
  id?: long(name='Id'),
  idType?: string(name='IdType'),
  instanceId?: string(name='InstanceId'),
  page?: long(name='Page'),
  pageSize?: long(name='PageSize'),
  punishDomain?: string(name='PunishDomain'),
  punishIp?: string(name='PunishIp'),
  punishStatusesShrink?: string(name='PunishStatuses'),
  punishUrl?: string(name='PunishUrl'),
  punishUrlFull?: string(name='PunishUrlFull'),
  sourceCodesShrink?: string(name='SourceCodes'),
  startDate?: long(name='StartDate'),
  userIdsShrink?: string(name='UserIds'),
}

model SearchPunishRequestResponseBody = {
  class?: string(name='Class'),
  code?: string(name='Code'),
  count?: long(name='Count'),
  dataList?: [ 
    {
      antiPunishRespTime?: string(name='AntiPunishRespTime'),
      antiPunishTime?: string(name='AntiPunishTime'),
      antiResult?: string(name='AntiResult'),
      antiStatus?: string(name='AntiStatus'),
      bussinessCode?: string(name='BussinessCode'),
      caseCode?: string(name='CaseCode'),
      caseExtendCode?: string(name='CaseExtendCode'),
      caseSubCode?: string(name='CaseSubCode'),
      class?: string(name='Class'),
      creator?: string(name='Creator'),
      deleted?: boolean(name='Deleted'),
      eventCode?: string(name='EventCode'),
      expectedRemoveTime?: string(name='ExpectedRemoveTime'),
      extRequestId?: string(name='ExtRequestId'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      id?: long(name='Id'),
      idType?: string(name='IdType'),
      instanceId?: string(name='InstanceId'),
      ipString?: string(name='IpString'),
      modifier?: string(name='Modifier'),
      punishDomain?: string(name='PunishDomain'),
      punishIp?: string(name='PunishIp'),
      punishRequest?: string(name='PunishRequest'),
      punishRespTime?: string(name='PunishRespTime'),
      punishResult?: string(name='PunishResult'),
      punishStatus?: string(name='PunishStatus'),
      punishTime?: string(name='PunishTime'),
      punishUrl?: string(name='PunishUrl'),
      reason?: string(name='Reason'),
      sourceCode?: string(name='SourceCode'),
      userId?: string(name='UserId'),
    }
  ](name='DataList'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
  viewCount?: long(name='ViewCount'),
}

model SearchPunishRequestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchPunishRequestResponseBody(name='body'),
}

/**
 * @summary 处罚记录查询
 *
 * @param tmpReq SearchPunishRequestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SearchPunishRequestResponse
 */
async function searchPunishRequestWithOptions(tmpReq: SearchPunishRequestRequest, runtime: Util.RuntimeOptions): SearchPunishRequestResponse {
  Util.validateModel(tmpReq);
  var request = new SearchPunishRequestShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.antiStatuses)) {
    request.antiStatusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.antiStatuses, 'AntiStatuses', 'json');
  }
  if (!Util.isUnset(tmpReq.bussinessCodes)) {
    request.bussinessCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bussinessCodes, 'BussinessCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.eventCodes)) {
    request.eventCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.eventCodes, 'EventCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.punishStatuses)) {
    request.punishStatusesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.punishStatuses, 'PunishStatuses', 'json');
  }
  if (!Util.isUnset(tmpReq.sourceCodes)) {
    request.sourceCodesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sourceCodes, 'SourceCodes', 'json');
  }
  if (!Util.isUnset(tmpReq.userIds)) {
    request.userIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userIds, 'UserIds', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SearchPunishRequest',
    version = '2022-08-22',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 处罚记录查询
 *
 * @param request SearchPunishRequestRequest
 * @return SearchPunishRequestResponse
 */
async function searchPunishRequest(request: SearchPunishRequestRequest): SearchPunishRequestResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchPunishRequestWithOptions(request, runtime);
}

