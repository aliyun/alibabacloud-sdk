/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Safe';
  @version = '2022-01-17';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CancelBlockRequest {
  blockId?: long(name='BlockId', position='Body'),
  cancelBLockDesc?: string(name='CancelBLockDesc', position='Body'),
  createEmpId?: string(name='CreateEmpId', position='Body'),
}

model CancelBlockResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveInstanceId?: string(name='ApproveInstanceId'),
    success?: boolean(name='Success'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelBlockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelBlock  CancelBlockRequest
  * @return CancelBlockResponse
 */
async function cancelBlock(request: CancelBlockRequest): CancelBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelBlock', 'POST', '/', 'json', true, 'form', request);
}

model ChangeCancelRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
}

model ChangeCancelResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeCancelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeCancel  ChangeCancelRequest
  * @return ChangeCancelResponse
 */
async function changeCancel(request: ChangeCancelRequest): ChangeCancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeCancel', 'POST', '/', 'json', false, 'json', request);
}

model ChangeCheckRequest {
  affectCustomer?: string(name='AffectCustomer', position='Body'),
  approveFlowParam?: {
    approveNodes?: [ 
      {
        approverDTO?: [ 
          {
            approveDesc?: string(name='ApproveDesc'),
            approveTime?: string(name='ApproveTime'),
            approverId?: string(name='ApproverId'),
            approverName?: string(name='ApproverName'),
            opinion?: int32(name='Opinion'),
          }
        ](name='ApproverDTO'),
        nodeStatus?: int32(name='NodeStatus'),
        processName?: string(name='ProcessName'),
        processNodeOrder?: int32(name='ProcessNodeOrder'),
        strategy?: int32(name='Strategy'),
      }
    ](name='ApproveNodes'),
    authKey?: string(name='AuthKey'),
    authSign?: string(name='AuthSign'),
    bgVid?: string(name='BgVid'),
    flowStatus?: int32(name='FlowStatus'),
    timestamp?: long(name='Timestamp'),
  }(name='ApproveFlowParam', position='Body'),
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  bgCustomTemplateExtraDTO?: {
    bgCustomTemplate?: string(name='BgCustomTemplate'),
    bgCustomTemplateId?: long(name='BgCustomTemplateId'),
    bgCustomTemplateInfo?: string(name='BgCustomTemplateInfo'),
    bgCustomTemplateTitle?: string(name='BgCustomTemplateTitle'),
    bgVid?: string(name='BgVid'),
    extraInfo?: string(name='ExtraInfo'),
  }(name='BgCustomTemplateExtraDTO', position='Body'),
  bgVid?: string(name='BgVid', position='Body'),
  blockInfos?: [ 
    {
      hitInfos?: [ 
        {
          hitInfo?: string(name='HitInfo'),
          hitObject?: string(name='HitObject'),
          scope?: string(name='Scope'),
        }
      ](name='HitInfos'),
      id?: long(name='Id'),
    }
  ](name='BlockInfos', position='Body'),
  callBackInfo?: {
    api?: string(name='Api'),
    apiVersion?: string(name='ApiVersion'),
    endPoint?: string(name='EndPoint'),
    extraInfo?: string(name='ExtraInfo'),
    popProduct?: string(name='PopProduct'),
    regionId?: string(name='RegionId'),
    type?: string(name='Type'),
    url?: string(name='Url'),
  }(name='CallBackInfo', position='Body'),
  changeDataType?: string(name='ChangeDataType', position='Body'),
  changeDesc?: string(name='ChangeDesc', position='Body'),
  changeEndTime?: long(name='ChangeEndTime', position='Body'),
  changeEnv?: string(name='ChangeEnv', position='Body'),
  changeItems?: string(name='ChangeItems', position='Body'),
  changeObject?: string(name='ChangeObject', position='Body'),
  changeOptSubType?: string(name='ChangeOptSubType', position='Body'),
  changeOptType?: string(name='ChangeOptType', position='Body'),
  changeReason?: string(name='ChangeReason', position='Body'),
  changeRmarks?: string(name='ChangeRmarks', position='Body'),
  changeSchemes?: string(name='ChangeSchemes', position='Body'),
  changeStartTime?: long(name='ChangeStartTime', position='Body'),
  changeSubTypeDesc?: string(name='ChangeSubTypeDesc', position='Body'),
  changeSystem?: string(name='ChangeSystem', position='Body'),
  changeTimes?: [ 
    {
      changeEndTime?: long(name='ChangeEndTime'),
      changeStartTime?: long(name='ChangeStartTime'),
    }
  ](name='ChangeTimes', position='Body'),
  changeTitle?: string(name='ChangeTitle', position='Body'),
  changeValidation?: string(name='ChangeValidation', position='Body'),
  creatorEmpId?: string(name='CreatorEmpId', position='Body'),
  damagedChangeNotices?: [ 
    {
      bgCancelNoticeContent?: string(name='BgCancelNoticeContent'),
      bgCancelNoticeEventId?: string(name='BgCancelNoticeEventId'),
      channel?: [ string ](name='Channel'),
      content?: string(name='Content'),
      eventId?: string(name='EventId'),
      sensitiveCustomers?: [ 
        {
          customerInfo?: [ 
            {
              extraInfo?: map[string]any(name='ExtraInfo'),
              type?: string(name='Type'),
              uid?: string(name='Uid'),
            }
          ](name='CustomerInfo'),
          productCode?: string(name='ProductCode'),
        }
      ](name='SensitiveCustomers'),
      type?: string(name='Type'),
    }
  ](name='DamagedChangeNotices', shrink='json', position='Body'),
  executorEmpId?: string(name='ExecutorEmpId', position='Body'),
  extraInfo?: string(name='ExtraInfo', position='Body'),
  follower?: [ string ](name='Follower', position='Body'),
  grayStatus?: string(name='GrayStatus', position='Body'),
  harmChangeNoticeEnum?: string(name='HarmChangeNoticeEnum', position='Body'),
  incidence?: string(name='Incidence', position='Body'),
  influenceInfo?: {
    noticeInfos?: [ 
      {
        channel?: [ string ](name='Channel'),
        content?: string(name='Content'),
        eventId?: string(name='EventId'),
      }
    ](name='NoticeInfos'),
    sensitiveCustomers?: [ 
      {
        customerInfo?: [ 
          {
            extraInfo?: map[string]any(name='ExtraInfo'),
            type?: string(name='Type'),
            uid?: string(name='Uid'),
          }
        ](name='CustomerInfo'),
        productCode?: string(name='ProductCode'),
      }
    ](name='SensitiveCustomers'),
  }(name='InfluenceInfo', position='Body'),
  instance?: {
    attributionApp?: [ string ](name='AttributionApp'),
    influenceApp?: [ string ](name='InfluenceApp'),
    instance?: [ string ](name='Instance'),
    nc?: [ string ](name='Nc'),
    uids?: [ string ](name='Uids'),
  }(name='Instance', position='Body'),
  needModifyDoc?: string(name='NeedModifyDoc', position='Body'),
  product?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='Product', position='Body'),
  releasePackageInfos?: [ 
    {
      productCode?: string(name='ProductCode'),
      releasePackage?: [ string ](name='ReleasePackage'),
    }
  ](name='ReleasePackageInfos', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  reuseSourceOrderId?: string(name='ReuseSourceOrderId', position='Body'),
  riskLevel?: string(name='RiskLevel', position='Body'),
  rollback?: string(name='Rollback', position='Body'),
  sourceName?: string(name='SourceName', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  sourceUrl?: string(name='SourceUrl', position='Body'),
  whiteType?: int32(name='WhiteType', position='Body'),
}

model ChangeCheckResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveResultUrl?: string(name='ApproveResultUrl'),
    bgCheckStatus?: string(name='BgCheckStatus'),
    bgVid?: string(name='BgVid'),
    changeStatus?: string(name='ChangeStatus'),
    checkResultUrl?: string(name='CheckResultUrl'),
    checkStatus?: string(name='CheckStatus'),
    checkholdReason?: [ string ](name='CheckholdReason'),
    ruleDetailUrlList?: [ 
      {
        sceneEnum?: string(name='SceneEnum'),
        title?: string(name='Title'),
        url?: string(name='Url'),
      }
    ](name='RuleDetailUrlList'),
    sourceOrderId?: string(name='SourceOrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeCheck  ChangeCheckRequest
  * @return ChangeCheckResponse
 */
async function changeCheck(request: ChangeCheckRequest): ChangeCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeCheck', 'POST', '/', 'json', true, 'form', request);
}

model ChangeEndRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  changeEndTime?: long(name='ChangeEndTime', position='Query'),
  changeResult?: string(name='ChangeResult', position='Query'),
  curBatchNo?: int32(name='CurBatchNo', position='Query'),
  executorEmpId?: string(name='ExecutorEmpId', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
  totalBatchNo?: int32(name='TotalBatchNo', position='Query'),
}

model ChangeEndResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeEndResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeEndResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeEnd  ChangeEndRequest
  * @return ChangeEndResponse
 */
async function changeEnd(request: ChangeEndRequest): ChangeEndResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeEnd', 'POST', '/', 'json', false, 'json', request);
}

model ChangeStartRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  changeEndTime?: long(name='ChangeEndTime', position='Query'),
  changeObject?: string(name='ChangeObject', position='Query'),
  changeOptType?: string(name='ChangeOptType', position='Query'),
  changeStartTime?: long(name='ChangeStartTime', position='Query'),
  changeTitle?: string(name='ChangeTitle', position='Query'),
  creatorEmpId?: string(name='CreatorEmpId', position='Query'),
  curBatchNo?: int32(name='CurBatchNo', position='Query'),
  executorEmpId?: string(name='ExecutorEmpId', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
  totalBatchNo?: int32(name='TotalBatchNo', position='Query'),
}

model ChangeStartResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeStartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeStart  ChangeStartRequest
  * @return ChangeStartResponse
 */
async function changeStart(request: ChangeStartRequest): ChangeStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeStart', 'POST', '/', 'json', false, 'json', request);
}

model CreateBlockRequest {
  approveStrategyNodes?: [ 
    {
      approveRuleType?: int32(name='ApproveRuleType'),
      approveType?: int32(name='ApproveType'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      nodeCode?: string(name='NodeCode'),
      priorityOrder?: int32(name='PriorityOrder'),
      roleCode?: int32(name='RoleCode'),
      roleValue?: [ string ](name='RoleValue'),
      templateId?: long(name='TemplateId'),
    }
  ](name='ApproveStrategyNodes', position='Body'),
  blockId?: long(name='BlockId', position='Body'),
  director?: string(name='Director', position='Body'),
  isNeedApprove?: int32(name='IsNeedApprove', position='Body'),
  isRecall?: int32(name='IsRecall', position='Body'),
  isTemplate?: int32(name='IsTemplate', position='Body'),
  labelName?: string(name='LabelName', position='Body'),
  noticeDesc?: string(name='NoticeDesc', position='Body'),
  noticeEnclosureInfos?: [ 
    {
      name?: string(name='Name'),
      url?: string(name='url'),
    }
  ](name='NoticeEnclosureInfos', position='Body'),
  noticeRequestLink?: string(name='NoticeRequestLink', position='Body'),
  noticeType?: int32(name='NoticeType', position='Body'),
  reason?: string(name='Reason', position='Body'),
  scene?: int32(name='Scene', position='Body'),
  scopes?: [ 
    {
      blockHarm?: [ int32 ](name='BlockHarm'),
      blockScope?: {
        app?: {
          appName?: [ string ](name='AppName'),
          type?: int32(name='Type'),
        }(name='App'),
        bgSystem?: [ 
          {
            relateCodes?: [ string ](name='RelateCodes'),
            selfCodeName?: string(name='SelfCodeName'),
          }
        ](name='BgSystem'),
        cluster?: {
          codeNames?: [ string ](name='CodeNames'),
          relations?: [ 
            {
              appCodes?: [ string ](name='AppCodes'),
              labelCodes?: [ string ](name='LabelCodes'),
              relateCodes?: [ string ](name='RelateCodes'),
              selfCode?: string(name='SelfCode'),
            }
          ](name='Relations'),
        }(name='Cluster'),
        customer?: [ 
          {
            codeNames?: [ string ](name='CodeNames'),
            relations?: [ 
              {
                appCodes?: [ string ](name='AppCodes'),
                labelCodes?: [ string ](name='LabelCodes'),
                relateCodes?: [ string ](name='RelateCodes'),
                selfCode?: string(name='SelfCode'),
              }
            ](name='Relations'),
            uid?: string(name='Uid'),
            viewCodes?: [ int32 ](name='ViewCodes'),
          }
        ](name='Customer'),
        dept?: [ string ](name='Dept'),
        express?: string(name='Express'),
        infrastructure?: [ string ](name='Infrastructure'),
        product?: [ 
          {
            codeNames?: [ string ](name='CodeNames'),
            key?: string(name='Key'),
            relations?: [ 
              {
                appCodes?: [ string ](name='AppCodes'),
                labelCodes?: [ string ](name='LabelCodes'),
                relateCodes?: [ string ](name='RelateCodes'),
                selfCode?: string(name='SelfCode'),
              }
            ](name='Relations'),
            viewCode?: [ string ](name='ViewCode'),
          }
        ](name='Product'),
      }(name='BlockScope'),
      effectTime?: [ long ](name='EffectTime'),
      scopeRule?: string(name='ScopeRule'),
      changeObjectRegex?: string(name='changeObjectRegex'),
      riskLevels?: [ int32 ](name='riskLevels'),
    }
  ](name='Scopes', position='Body'),
  status?: int32(name='Status', position='Body'),
  title?: string(name='Title', position='Body'),
  type?: string(name='Type', position='Body'),
  versionId?: long(name='VersionId', position='Body'),
  creatorEmpId?: string(name='creatorEmpId', position='Body'),
}

model CreateBlockResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateBlockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateBlock  CreateBlockRequest
  * @return CreateBlockResponse
 */
async function createBlock(request: CreateBlockRequest): CreateBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBlock', 'POST', '/', 'json', true, 'form', request);
}

model CreateMaYiBlockRequest {
  blockId?: string(name='BlockId', position='Body'),
  blockTimes: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
    }
  ](name='BlockTimes', description='This parameter is required.', position='Body'),
  blockType: string(name='BlockType', description='This parameter is required.', position='Body'),
  creatorEmpId: string(name='CreatorEmpId', description='This parameter is required.', position='Body'),
  director: [ string ](name='Director', description='This parameter is required.', position='Body'),
  faultVersion?: string(name='FaultVersion', position='Body'),
  information?: [ string ](name='Information', position='Body'),
  reason: string(name='Reason', description='This parameter is required.', position='Body'),
  scope?: {
    groupBlockScopeParams?: [ 
      {
        az?: string(name='Az'),
        idc?: string(name='Idc'),
        region?: string(name='Region'),
      }
    ](name='GroupBlockScopeParams'),
  }(name='Scope', shrink='json', position='Body'),
  title: string(name='Title', description='This parameter is required.', position='Body'),
  type?: string(name='Type', position='Body'),
}

model CreateMaYiBlockResponseBody = {
  code?: int32(name='Code'),
  data?: {
    blockId?: long(name='BlockId'),
    blockUrl?: string(name='BlockUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMaYiBlockResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMaYiBlockResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMaYiBlock  CreateMaYiBlockRequest
  * @return CreateMaYiBlockResponse
 */
async function createMaYiBlock(request: CreateMaYiBlockRequest): CreateMaYiBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMaYiBlock', 'POST', '/', 'json', true, 'form', request);
}

model CreateOperatorRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  bgObject?: string(name='BgObject', position='Body'),
  bgSystem?: string(name='BgSystem', position='Body'),
  code?: string(name='Code', position='Body'),
  curEmpId?: string(name='CurEmpId', position='Body'),
  name?: string(name='Name', position='Body'),
  noCheck?: boolean(name='NoCheck', position='Body'),
  noRisk?: boolean(name='NoRisk', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
}

model CreateOperatorResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveStrategyId?: long(name='ApproveStrategyId'),
    ruleId?: long(name='RuleId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateOperatorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOperatorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOperator  CreateOperatorRequest
  * @return CreateOperatorResponse
 */
async function createOperator(request: CreateOperatorRequest): CreateOperatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOperator', 'POST', '/', 'json', true, 'form', request);
}

model QueryRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  needValidate?: boolean(name='NeedValidate', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
}

model QueryResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Query  QueryRequest
  * @return QueryResponse
 */
async function query(request: QueryRequest): QueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Query', 'POST', '/', 'json', false, 'json', request);
}

model QueryApproveFlowRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
  stage?: string(name='Stage', position='Query'),
}

model QueryApproveFlowResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryApproveFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryApproveFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryApproveFlow  QueryApproveFlowRequest
  * @return QueryApproveFlowResponse
 */
async function queryApproveFlow(request: QueryApproveFlowRequest): QueryApproveFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryApproveFlow', 'POST', '/', 'json', false, 'json', request);
}

model QueryBlockEventRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  bgSystemName?: string(name='BgSystemName', position='Body'),
  blockHarm?: string(name='BlockHarm', position='Body'),
  category?: string(name='Category', position='Body'),
  deptNo?: string(name='DeptNo', position='Body'),
  endTime?: long(name='EndTime', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  needRule?: boolean(name='NeedRule', position='Body'),
  page?: int32(name='Page', position='Body'),
  productCodes?: [ string ](name='ProductCodes', position='Body'),
  regionReqs?: [ 
    {
      productCode?: string(name='ProductCode'),
      regions?: [ string ](name='Regions'),
    }
  ](name='RegionReqs', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  scope?: [ string ](name='Scope', position='Query'),
  startTime?: long(name='StartTime', position='Body'),
}

model QueryBlockEventResponseBody = {
  code?: int32(name='Code'),
  data?: {
    dataInfo?: [ 
      {
        empId?: string(name='EmpId'),
        endTime?: long(name='EndTime'),
        eventTimes?: [ 
          {
            endTime?: long(name='EndTime'),
            express?: string(name='Express'),
            rule?: [ 
              {
                level1?: string(name='Level1'),
                level2?: string(name='Level2'),
                level3?: string(name='Level3'),
                level4?: string(name='Level4'),
                level5?: string(name='Level5'),
                type?: string(name='Type'),
              }
            ](name='Rule'),
            startTime?: long(name='StartTime'),
            ruleId?: long(name='ruleId'),
          }
        ](name='EventTimes'),
        gmtCreate?: long(name='GmtCreate'),
        gmtModified?: long(name='GmtModified'),
        id?: long(name='Id'),
        reason?: string(name='Reason'),
        startTime?: long(name='StartTime'),
        title?: string(name='Title'),
        url?: string(name='Url'),
        levelType?: {
          label?: string(name='label'),
          value?: int32(name='value'),
        }(name='levelType'),
        versionId?: long(name='versionId'),
      }
    ](name='DataInfo'),
    extraInfo?: map[string]string(name='ExtraInfo'),
    pagination?: {
      limit?: int32(name='Limit'),
      page?: int32(name='Page'),
    }(name='Pagination'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBlockEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBlockEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBlockEvent  QueryBlockEventRequest
  * @return QueryBlockEventResponse
 */
async function queryBlockEvent(request: QueryBlockEventRequest): QueryBlockEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBlockEvent', 'POST', '/', 'json', true, 'form', request);
}

model QueryChangeInfoRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  az?: [ string ](name='Az', position='Body'),
  bgVid?: string(name='BgVid', position='Body'),
  buId?: string(name='BuId', position='Body'),
  changeSystem?: string(name='ChangeSystem', position='Body'),
  endTime?: long(name='EndTime', position='Body'),
  keyword?: string(name='Keyword', position='Body'),
  levelTree?: {
    dataType?: string(name='DataType'),
    treeData?: [ 
      {
        data?: [ any ](name='Data'),
        dataSubType?: string(name='DataSubType'),
        value?: [ string ](name='Value'),
      }
    ](name='TreeData'),
  }(name='LevelTree', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  page?: int32(name='Page', position='Body'),
  product?: [ string ](name='Product', position='Body'),
  region?: [ string ](name='Region', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  source?: string(name='Source', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  startTime?: long(name='StartTime', position='Body'),
  type?: string(name='Type', position='Query'),
}

model QueryChangeInfoResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryChangeInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChangeInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryChangeInfo  QueryChangeInfoRequest
  * @return QueryChangeInfoResponse
 */
async function queryChangeInfo(request: QueryChangeInfoRequest): QueryChangeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChangeInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryCheckInfoRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
}

model QueryCheckInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    checkDetailList?: [ 
      {
        blockRule?: [ 
          {
            blockHarm?: string(name='BlockHarm'),
            blockId?: long(name='BlockId'),
            express?: string(name='Express'),
            scopeEndTime?: long(name='ScopeEndTime'),
            scopeNodeList?: [ 
              {
                leafLevel?: string(name='LeafLevel'),
                level1?: string(name='Level1'),
                level2?: string(name='Level2'),
                level3?: string(name='Level3'),
                level4?: string(name='Level4'),
                level5?: string(name='Level5'),
                path?: string(name='Path'),
                ruleId?: long(name='RuleId'),
                type?: string(name='Type'),
              }
            ](name='ScopeNodeList'),
            scopeRuleId?: long(name='ScopeRuleId'),
            scopeStartTime?: long(name='ScopeStartTime'),
          }
        ](name='BlockRule'),
        checkholdReason?: string(name='CheckholdReason'),
        desc?: string(name='Desc'),
        picInfo?: string(name='PicInfo'),
        riskExplain?: string(name='RiskExplain'),
        title?: string(name='Title'),
        url?: string(name='Url'),
      }
    ](name='CheckDetailList'),
    checkResultUrl?: string(name='CheckResultUrl'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCheckInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCheckInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCheckInfo  QueryCheckInfoRequest
  * @return QueryCheckInfoResponse
 */
async function queryCheckInfo(request: QueryCheckInfoRequest): QueryCheckInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCheckInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryCustomerRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  product?: [ string ](name='Product', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  type?: string(name='Type', position='Body'),
}

model QueryCustomerResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      product?: string(name='Product'),
      type?: string(name='Type'),
      uid?: string(name='Uid'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCustomerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCustomerResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCustomer  QueryCustomerRequest
  * @return QueryCustomerResponse
 */
async function queryCustomer(request: QueryCustomerRequest): QueryCustomerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomer', 'POST', '/', 'json', true, 'form', request);
}

model QueryExecuteInfoRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  az?: [ string ](name='Az', position='Body'),
  bgVid?: string(name='BgVid', position='Body'),
  buId?: string(name='BuId', position='Body'),
  endTime?: long(name='EndTime', position='Body'),
  exVid?: string(name='ExVid', position='Body'),
  keyword?: string(name='Keyword', position='Body'),
  levelTree?: {
    dataType?: string(name='DataType'),
    treeData?: [ 
      {
        data?: [ any ](name='Data'),
        dataSubType?: string(name='DataSubType'),
        value?: [ string ](name='Value'),
      }
    ](name='TreeData'),
  }(name='LevelTree', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  page?: int32(name='Page', position='Body'),
  product?: [ string ](name='Product', position='Body'),
  region?: [ string ](name='Region', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  source?: string(name='Source', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  startTime?: long(name='StartTime', position='Body'),
}

model QueryExecuteInfoResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryExecuteInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExecuteInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExecuteInfo  QueryExecuteInfoRequest
  * @return QueryExecuteInfoResponse
 */
async function queryExecuteInfo(request: QueryExecuteInfoRequest): QueryExecuteInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExecuteInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryInnerProductInfoRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  page?: int32(name='Page', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
}

model QueryInnerProductInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    dataInfo?: [ 
      {
        innerProductCode?: string(name='InnerProductCode'),
        innerProductName?: string(name='InnerProductName'),
        productCode?: string(name='ProductCode'),
        productName?: string(name='ProductName'),
      }
    ](name='DataInfo'),
    pagination?: {
      limit?: int32(name='Limit'),
      page?: int32(name='Page'),
    }(name='Pagination'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInnerProductInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryInnerProductInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryInnerProductInfo  QueryInnerProductInfoRequest
  * @return QueryInnerProductInfoResponse
 */
async function queryInnerProductInfo(request: QueryInnerProductInfoRequest): QueryInnerProductInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInnerProductInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryRegionAzRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  page?: int32(name='Page', position='Body'),
  product?: string(name='Product', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
}

model QueryRegionAzResponseBody = {
  code?: int32(name='Code'),
  data?: {
    dataInfo?: [ 
      {
        azList?: [ string ](name='AzList'),
        regionCode?: string(name='RegionCode'),
        regionName?: string(name='RegionName'),
      }
    ](name='DataInfo'),
    pagination?: {
      limit?: int32(name='Limit'),
      page?: int32(name='Page'),
    }(name='Pagination'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRegionAzResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRegionAzResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryRegionAz  QueryRegionAzRequest
  * @return QueryRegionAzResponse
 */
async function queryRegionAz(request: QueryRegionAzRequest): QueryRegionAzResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRegionAz', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeCancelRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  bgVid?: string(name='BgVid', position='Body'),
  operateEmpNo?: string(name='OperateEmpNo', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
}

model SafeChangeCancelResponseBody = {
  code?: int32(name='Code'),
  data?: {
    sourceOrderId?: string(name='SourceOrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeCancelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeCancelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeCancel  SafeChangeCancelRequest
  * @return SafeChangeCancelResponse
 */
async function safeChangeCancel(request: SafeChangeCancelRequest): SafeChangeCancelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeCancel', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeCheckRequest {
  affectCustomer?: string(name='AffectCustomer', position='Body'),
  approveFlowParam?: {
    approveNodes?: [ 
      {
        approverDTO?: [ 
          {
            approveDesc?: string(name='ApproveDesc'),
            approveTime?: long(name='ApproveTime'),
            approverId?: string(name='ApproverId'),
            approverName?: string(name='ApproverName'),
            opinion?: int32(name='Opinion'),
          }
        ](name='ApproverDTO'),
        nodeStatus?: int32(name='NodeStatus'),
        processName?: string(name='ProcessName'),
        processNodeOrder?: int32(name='ProcessNodeOrder'),
        strategy?: int32(name='Strategy'),
      }
    ](name='ApproveNodes'),
    flowStatus?: int32(name='FlowStatus'),
  }(name='ApproveFlowParam', position='Body'),
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  bgCustomTemplateExtraDTO?: {
    bgCustomTemplateInfo?: string(name='BgCustomTemplateInfo'),
  }(name='BgCustomTemplateExtraDTO', position='Body'),
  blockInfos?: [ 
    {
      hitInfos?: [ 
        {
          hitInfo?: string(name='HitInfo'),
          hitObject?: string(name='HitObject'),
          scope?: string(name='Scope'),
        }
      ](name='HitInfos'),
      id?: long(name='Id'),
    }
  ](name='BlockInfos', position='Body'),
  callBackInfo?: {
    api?: string(name='Api'),
    apiVersion?: string(name='ApiVersion'),
    endPoint?: string(name='EndPoint'),
    popProduct?: string(name='PopProduct'),
    regionId?: string(name='RegionId'),
    type?: string(name='Type'),
    url?: string(name='Url'),
  }(name='CallBackInfo', position='Body'),
  changeDataType?: string(name='ChangeDataType', position='Body'),
  changeDesc?: string(name='ChangeDesc', position='Body'),
  changeEndTime?: long(name='ChangeEndTime', position='Body'),
  changeEnv?: string(name='ChangeEnv', position='Body'),
  changeItems?: string(name='ChangeItems', position='Body'),
  changeObject?: string(name='ChangeObject', position='Body'),
  changeOptSubType?: string(name='ChangeOptSubType', position='Body'),
  changeOptType?: string(name='ChangeOptType', position='Body'),
  changeReason?: string(name='ChangeReason', position='Body'),
  changeRmarks?: string(name='ChangeRmarks', position='Body'),
  changeSchemes?: string(name='ChangeSchemes', position='Body'),
  changeStartTime?: long(name='ChangeStartTime', position='Body'),
  changeSubTypeDesc?: string(name='ChangeSubTypeDesc', position='Body'),
  changeSystem?: string(name='ChangeSystem', position='Body'),
  changeTimes?: [ 
    {
      changeEndTime?: long(name='ChangeEndTime'),
      changeStartTime?: long(name='ChangeStartTime'),
    }
  ](name='ChangeTimes', position='Body'),
  changeTitle?: string(name='ChangeTitle', position='Body'),
  changeValidation?: string(name='ChangeValidation', position='Body'),
  checker?: [ string ](name='Checker', position='Query'),
  creatorEmpId?: string(name='CreatorEmpId', position='Body'),
  damagedChangeNotices?: [ 
    {
      bgCancelNoticeContent?: string(name='BgCancelNoticeContent'),
      bgCancelNoticeEventId?: string(name='BgCancelNoticeEventId'),
      channel?: [ string ](name='Channel'),
      content?: string(name='Content'),
      eventId?: string(name='EventId'),
      sensitiveCustomers?: [ 
        {
          customerInfo?: [ 
            {
              extraInfo?: map[string]any(name='ExtraInfo'),
              type?: string(name='Type'),
              uid?: string(name='Uid'),
            }
          ](name='CustomerInfo'),
          productCode?: string(name='ProductCode'),
        }
      ](name='SensitiveCustomers'),
      type?: string(name='Type'),
    }
  ](name='DamagedChangeNotices', position='Body'),
  executorEmpId?: string(name='ExecutorEmpId', position='Body'),
  extraInfo?: string(name='ExtraInfo', position='Body'),
  follower?: [ string ](name='Follower', position='Body'),
  grayStatus?: string(name='GrayStatus', position='Body'),
  harmChangeNoticeEnum?: string(name='HarmChangeNoticeEnum', position='Query'),
  harmNoticeCombineParam?: {
    combine?: boolean(name='Combine'),
    combineMark?: string(name='CombineMark'),
    combineRule?: string(name='CombineRule'),
  }(name='HarmNoticeCombineParam', shrink='json', position='Body'),
  incidence?: string(name='Incidence', position='Body'),
  influenceInfo?: {
    noticeInfos?: [ 
      {
        channel?: [ string ](name='Channel'),
        content?: string(name='Content'),
        eventId?: string(name='EventId'),
      }
    ](name='NoticeInfos'),
    sensitiveCustomers?: [ 
      {
        customerInfo?: [ 
          {
            extraInfo?: map[string]any(name='ExtraInfo'),
            type?: string(name='Type'),
            uid?: string(name='Uid'),
          }
        ](name='CustomerInfo'),
        productCode?: string(name='ProductCode'),
      }
    ](name='SensitiveCustomers'),
  }(name='InfluenceInfo', position='Body'),
  instance?: {
    nc?: [ string ](name='Nc'),
    uids?: [ string ](name='Uids'),
    attributionApp?: [ string ](name='attributionApp'),
    influenceApp?: [ string ](name='influenceApp'),
    instance?: [ string ](name='instance'),
  }(name='Instance', position='Body'),
  needModifyDoc?: string(name='NeedModifyDoc', position='Body'),
  operateEmpNo?: string(name='OperateEmpNo', position='Body'),
  product?: [ 
    {
      code?: string(name='Code'),
      name?: string(name='Name'),
    }
  ](name='Product', position='Body'),
  releasePackageInfos?: [ 
    {
      productCode?: string(name='ProductCode'),
      releasePackage?: [ string ](name='ReleasePackage'),
    }
  ](name='ReleasePackageInfos', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  reuseSourceOrderId?: string(name='ReuseSourceOrderId', position='Body'),
  riskLevel?: string(name='RiskLevel', position='Body'),
  rollback?: string(name='Rollback', position='Body'),
  sourceName?: string(name='SourceName', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  sourceUrl?: string(name='SourceUrl', position='Body'),
  whiteType?: int32(name='whiteType', position='Body'),
}

model SafeChangeCheckResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveResultUrl?: string(name='ApproveResultUrl'),
    bgCheckStatus?: string(name='BgCheckStatus'),
    bgVid?: string(name='BgVid'),
    checkResultUrl?: string(name='CheckResultUrl'),
    checkStatus?: string(name='CheckStatus'),
    checkholdReason?: [ string ](name='CheckholdReason'),
    ruleDetailUrlList?: [ 
      {
        sceneEnum?: string(name='SceneEnum'),
        title?: string(name='Title'),
        url?: string(name='Url'),
      }
    ](name='RuleDetailUrlList'),
    sourceOrderId?: string(name='SourceOrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeCheck  SafeChangeCheckRequest
  * @return SafeChangeCheckResponse
 */
async function safeChangeCheck(request: SafeChangeCheckRequest): SafeChangeCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeCheck', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeEndRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  changeEndTime?: long(name='ChangeEndTime', position='Body'),
  changeResult?: string(name='ChangeResult', position='Body'),
  curBatchNo?: int32(name='CurBatchNo', position='Body'),
  executorEmpId?: string(name='ExecutorEmpId', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  totalBatchNo?: int32(name='TotalBatchNo', position='Body'),
}

model SafeChangeEndResponseBody = {
  code?: int32(name='Code'),
  data?: {
    status?: string(name='Status'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeEndResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeEndResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeEnd  SafeChangeEndRequest
  * @return SafeChangeEndResponse
 */
async function safeChangeEnd(request: SafeChangeEndRequest): SafeChangeEndResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeEnd', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeQueryRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  needValidate?: boolean(name='NeedValidate', position='Body'),
  queryType?: string(name='QueryType', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  returnType?: boolean(name='ReturnType', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
}

model SafeChangeQueryResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveResultUrl?: string(name='ApproveResultUrl'),
    approveStatus?: string(name='ApproveStatus'),
    changeCancel?: string(name='ChangeCancel'),
    changeEndTime?: long(name='ChangeEndTime'),
    changeObject?: string(name='ChangeObject'),
    changeOptType?: string(name='ChangeOptType'),
    changeResult?: string(name='ChangeResult'),
    changeStartTime?: long(name='ChangeStartTime'),
    changeStatus?: string(name='ChangeStatus'),
    changeSystem?: string(name='ChangeSystem'),
    changeTimes?: [ 
      {
        changeEndTime?: long(name='ChangeEndTime'),
        changeStartTime?: long(name='ChangeStartTime'),
      }
    ](name='ChangeTimes'),
    changeTitle?: string(name='ChangeTitle'),
    checkResultUrl?: string(name='CheckResultUrl'),
    checkStatus?: string(name='CheckStatus'),
    checkholdReason?: [ string ](name='CheckholdReason'),
    executorEmpId?: string(name='ExecutorEmpId'),
    executorEmpName?: string(name='ExecutorEmpName'),
    sourceOrderId?: string(name='SourceOrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeQuery  SafeChangeQueryRequest
  * @return SafeChangeQueryResponse
 */
async function safeChangeQuery(request: SafeChangeQueryRequest): SafeChangeQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeQuery', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeQueryApproveFlowRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  stage?: string(name='Stage', position='Body'),
}

model SafeChangeQueryApproveFlowResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      approveStrategy?: string(name='ApproveStrategy'),
      approver?: string(name='Approver'),
      nodeName?: string(name='NodeName'),
      nodeStatus?: string(name='NodeStatus'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeQueryApproveFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeQueryApproveFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeQueryApproveFlow  SafeChangeQueryApproveFlowRequest
  * @return SafeChangeQueryApproveFlowResponse
 */
async function safeChangeQueryApproveFlow(request: SafeChangeQueryApproveFlowRequest): SafeChangeQueryApproveFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeQueryApproveFlow', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeStartRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  changeEndTime?: long(name='ChangeEndTime', position='Body'),
  changeObject?: string(name='ChangeObject', position='Body'),
  changeOptType?: string(name='ChangeOptType', position='Body'),
  changeStartTime?: long(name='ChangeStartTime', position='Body'),
  changeTitle?: string(name='ChangeTitle', position='Body'),
  creatorEmpId?: string(name='CreatorEmpId', position='Body'),
  curBatchNo?: int32(name='CurBatchNo', position='Body'),
  executorEmpId?: string(name='ExecutorEmpId', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
  totalBatchNo?: int32(name='TotalBatchNo', position='Body'),
}

model SafeChangeStartResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveResultUrl?: string(name='ApproveResultUrl'),
    checkResultUrl?: string(name='CheckResultUrl'),
    status?: string(name='Status'),
    subSatus?: string(name='SubSatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeStartResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeStartResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeStart  SafeChangeStartRequest
  * @return SafeChangeStartResponse
 */
async function safeChangeStart(request: SafeChangeStartRequest): SafeChangeStartResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeStart', 'POST', '/', 'json', true, 'form', request);
}

model SafeChangeStartApproveRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  creatorEmpId?: string(name='CreatorEmpId', position='Body'),
  extraInfo?: string(name='ExtraInfo', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  sourceOrderId?: string(name='SourceOrderId', position='Body'),
}

model SafeChangeStartApproveResponseBody = {
  code?: int32(name='Code'),
  data?: {
    approveStatus?: string(name='ApproveStatus'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeChangeStartApproveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeChangeStartApproveResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeChangeStartApprove  SafeChangeStartApproveRequest
  * @return SafeChangeStartApproveResponse
 */
async function safeChangeStartApprove(request: SafeChangeStartApproveRequest): SafeChangeStartApproveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeChangeStartApprove', 'POST', '/', 'json', true, 'form', request);
}

model SafeScopeDataRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  category?: string(name='Category', position='Body'),
  codeList?: string(name='CodeList', position='Body'),
  factor?: string(name='Factor', position='Body'),
  groupBy?: string(name='GroupBy', position='Body'),
  idList?: string(name='IdList', position='Body'),
  item?: string(name='Item', position='Body'),
  limit?: int32(name='Limit', position='Body'),
  needTotalCount?: boolean(name='NeedTotalCount', position='Body'),
  orderBy?: string(name='OrderBy', position='Body'),
  orderDirection?: string(name='OrderDirection', position='Body'),
  page?: int32(name='Page', position='Body'),
  parentCode?: string(name='ParentCode', position='Body'),
  parentId?: long(name='ParentId', position='Body'),
  productCode?: string(name='ProductCode', position='Body'),
  productId?: long(name='ProductId', position='Body'),
  regionNameEn?: string(name='RegionNameEn', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  searchValue?: string(name='SearchValue', position='Body'),
  type?: int32(name='Type', position='Body'),
  uid?: string(name='Uid', position='Body'),
}

model SafeScopeDataResponseBody = {
  code?: int32(name='Code'),
  data?: {
    data?: [ any ](name='Data'),
    extraInfo?: map[string]string(name='ExtraInfo'),
    pagination?: {
      limit?: int32(name='Limit'),
      page?: int32(name='Page'),
    }(name='Pagination'),
    total?: long(name='Total'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SafeScopeDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SafeScopeDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SafeScopeData  SafeScopeDataRequest
  * @return SafeScopeDataResponse
 */
async function safeScopeData(request: SafeScopeDataRequest): SafeScopeDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SafeScopeData', 'POST', '/', 'json', true, 'form', request);
}

model StartApproveRequest {
  authKey?: string(name='AuthKey', position='Query'),
  authSign?: string(name='AuthSign', position='Query'),
  creatorEmpId?: string(name='CreatorEmpId', position='Query'),
  extraInfo?: string(name='ExtraInfo', position='Query'),
  reqTimestamp?: long(name='ReqTimestamp', position='Query'),
  sourceOrderId?: string(name='SourceOrderId', position='Query'),
}

model StartApproveResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartApproveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartApproveResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartApprove  StartApproveRequest
  * @return StartApproveResponse
 */
async function startApprove(request: StartApproveRequest): StartApproveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartApprove', 'POST', '/', 'json', false, 'json', request);
}

model SyncProductRequest {
  authKey?: string(name='AuthKey', position='Body'),
  authSign?: string(name='AuthSign', position='Body'),
  reqTimestamp?: long(name='ReqTimestamp', position='Body'),
  syncProductList?: [ 
    {
      code?: string(name='Code'),
      innerProductList?: [ 
        {
          code?: string(name='Code'),
          name?: string(name='Name'),
        }
      ](name='InnerProductList'),
      name?: string(name='Name'),
    }
  ](name='SyncProductList', position='Body'),
}

model SyncProductResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SyncProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SyncProduct  SyncProductRequest
  * @return SyncProductResponse
 */
async function syncProduct(request: SyncProductRequest): SyncProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncProduct', 'POST', '/', 'json', true, 'form', request);
}

