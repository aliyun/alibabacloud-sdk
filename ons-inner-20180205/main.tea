/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ons-inner', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ListTagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  scope?: string(name='Scope'),
  instanceId?: string(name='InstanceId'),
  category?: string(name='Category'),
  tagOwnerUid?: string(name='TagOwnerUid'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      instanceId?: string(name='InstanceId'),
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2018-02-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model OnsAddInstanceTunnelTagRequest {
  preventCache?: long(name='PreventCache'),
  tunnelId?: string(name='TunnelId'),
  instanceId?: string(name='InstanceId'),
}

model OnsAddInstanceTunnelTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsAddInstanceTunnelTagResponse = {
  headers: map[string]string(name='headers'),
  body: OnsAddInstanceTunnelTagResponseBody(name='body'),
}

async function onsAddInstanceTunnelTagWithOptions(request: OnsAddInstanceTunnelTagRequest, runtime: Util.RuntimeOptions): OnsAddInstanceTunnelTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsAddInstanceTunnelTag', '2018-02-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsAddInstanceTunnelTag(request: OnsAddInstanceTunnelTagRequest): OnsAddInstanceTunnelTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsAddInstanceTunnelTagWithOptions(request, runtime);
}

model OnsRemoveInstanceTunnelTagRequest {
  preventCache?: long(name='PreventCache'),
  tunnelId?: string(name='TunnelId'),
  instanceId?: string(name='InstanceId'),
}

model OnsRemoveInstanceTunnelTagResponseBody = {
  requestId?: string(name='RequestId'),
}

model OnsRemoveInstanceTunnelTagResponse = {
  headers: map[string]string(name='headers'),
  body: OnsRemoveInstanceTunnelTagResponseBody(name='body'),
}

async function onsRemoveInstanceTunnelTagWithOptions(request: OnsRemoveInstanceTunnelTagRequest, runtime: Util.RuntimeOptions): OnsRemoveInstanceTunnelTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('OnsRemoveInstanceTunnelTag', '2018-02-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function onsRemoveInstanceTunnelTag(request: OnsRemoveInstanceTunnelTagRequest): OnsRemoveInstanceTunnelTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return onsRemoveInstanceTunnelTagWithOptions(request, runtime);
}

model TagResourcesSystemTagsRequest {
  resourceType?: string(name='ResourceType'),
  instanceId?: string(name='InstanceId'),
  tagOwnerUid?: long(name='TagOwnerUid'),
  scope?: string(name='Scope'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  resourceId?: [ string ](name='ResourceId'),
}

model TagResourcesSystemTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesSystemTagsResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesSystemTagsResponseBody(name='body'),
}

async function tagResourcesSystemTagsWithOptions(request: TagResourcesSystemTagsRequest, runtime: Util.RuntimeOptions): TagResourcesSystemTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResourcesSystemTags', '2018-02-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResourcesSystemTags(request: TagResourcesSystemTagsRequest): TagResourcesSystemTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesSystemTagsWithOptions(request, runtime);
}

model UntagResourcesSystemTagsRequest {
  resourceType?: string(name='ResourceType'),
  instanceId?: string(name='InstanceId'),
  all?: boolean(name='All'),
  tagOwnerUid?: long(name='TagOwnerUid'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesSystemTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesSystemTagsResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesSystemTagsResponseBody(name='body'),
}

async function untagResourcesSystemTagsWithOptions(request: UntagResourcesSystemTagsRequest, runtime: Util.RuntimeOptions): UntagResourcesSystemTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResourcesSystemTags', '2018-02-05', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResourcesSystemTags(request: UntagResourcesSystemTagsRequest): UntagResourcesSystemTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesSystemTagsWithOptions(request, runtime);
}

