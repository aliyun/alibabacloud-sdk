/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CloudCallCenter';
  @version = '2020-07-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CampaignDetail {
  actualEndTime?: long(name='ActualEndTime'),
  actualStartTime?: long(name='ActualStartTime'),
  casesAborted?: long(name='CasesAborted'),
  casesConnected?: long(name='CasesConnected'),
  casesUncompleted?: long(name='CasesUncompleted'),
  completedRate?: long(name='CompletedRate'),
  createTime?: long(name='CreateTime'),
  id?: string(name='Id'),
  maxAttemptCount?: long(name='MaxAttemptCount'),
  minAttemptInterval?: long(name='MinAttemptInterval'),
  name?: string(name='Name'),
  planedEndTime?: long(name='PlanedEndTime'),
  planedStartTime?: long(name='PlanedStartTime'),
  queueName?: string(name='QueueName'),
  state?: string(name='State'),
  totalCases?: long(name='TotalCases'),
  updateTime?: long(name='UpdateTime'),
}

model AbortCampaignRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model AbortCampaignResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AbortCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: AbortCampaignResponseBody(name='body'),
}

async function abortCampaign(request: AbortCampaignRequest): AbortCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbortCampaign', 'POST', '/', 'json', false, 'json', request);
}

model AbortCasesRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  phoneNumberList?: [ string ](name='PhoneNumberList', shrink='json', position='Query'),
}

model AbortCasesResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AbortCasesResponse = {
  headers: map[string]string(name='headers'),
  body: AbortCasesResponseBody(name='body'),
}

async function abortCases(request: AbortCasesRequest): AbortCasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbortCases', 'POST', '/', 'json', false, 'json', request);
}

model CheckDemoInstanceExistsRequest {
}

model CheckDemoInstanceExistsResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CheckDemoInstanceExistsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDemoInstanceExistsResponseBody(name='body'),
}

async function checkDemoInstanceExists(request: CheckDemoInstanceExistsRequest): CheckDemoInstanceExistsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDemoInstanceExists', 'POST', '/', 'json', false, 'json', request);
}

model CheckMQRoleAssumptionAuthorityRequest {
}

model CheckMQRoleAssumptionAuthorityResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CheckMQRoleAssumptionAuthorityResponse = {
  headers: map[string]string(name='headers'),
  body: CheckMQRoleAssumptionAuthorityResponseBody(name='body'),
}

async function checkMQRoleAssumptionAuthority(request: CheckMQRoleAssumptionAuthorityRequest): CheckMQRoleAssumptionAuthorityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckMQRoleAssumptionAuthority', 'POST', '/', 'json', false, 'json', request);
}

model CreateCampaignRequest {
  callableTime?: string(name='CallableTime', position='Query'),
  caseFileKey?: string(name='CaseFileKey', position='Query'),
  caseList?: [ 
    {
      customVariables?: string(name='CustomVariables'),
      phoneNumber?: string(name='PhoneNumber'),
      referenceId?: string(name='ReferenceId'),
    }
  ](name='CaseList', shrink='json', position='Query'),
  contactFlowId?: string(name='ContactFlowId', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  executingUntilTimeout?: boolean(name='ExecutingUntilTimeout', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  maxAttemptCount?: long(name='MaxAttemptCount', position='Query'),
  minAttemptInterval?: long(name='MinAttemptInterval', position='Query'),
  name?: string(name='Name', position='Query'),
  queueId?: string(name='QueueId', position='Query'),
  simulation?: boolean(name='Simulation', position='Query'),
  simulationParameters?: string(name='SimulationParameters', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  strategyParameters?: string(name='StrategyParameters', position='Query'),
  strategyType?: string(name='StrategyType', position='Query'),
}

model CreateCampaignResponseBody = {
  campaignId?: string(name='CampaignId'),
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCampaignResponseBody(name='body'),
}

async function createCampaign(request: CreateCampaignRequest): CreateCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCampaign', 'POST', '/', 'json', false, 'json', request);
}

model CreateCorpNumberGroupRequest {
  description: string(name='Description', position='Query'),
  name: string(name='Name', position='Query'),
}

model CreateCorpNumberGroupResponseBody = {
  code?: string(name='Code'),
  data?: {
    aliyunUid?: string(name='AliyunUid'),
    description?: string(name='Description'),
    numberCount?: string(name='NumberCount'),
    numberGroupId?: string(name='NumberGroupId'),
    numberGroupName?: string(name='NumberGroupName'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateCorpNumberGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCorpNumberGroupResponseBody(name='body'),
}

async function createCorpNumberGroup(request: CreateCorpNumberGroupRequest): CreateCorpNumberGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCorpNumberGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateDemoInstanceRequest {
  outboundCallWhitelist: string(name='OutboundCallWhitelist', position='Query'),
}

model CreateDemoInstanceResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  params?: [ string ](name='Params'),
  requestId?: string(name='RequestId'),
}

model CreateDemoInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDemoInstanceResponseBody(name='body'),
}

async function createDemoInstance(request: CreateDemoInstanceRequest): CreateDemoInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDemoInstance', 'POST', '/', 'json', false, 'json', request);
}

model GetCampaignRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model GetCampaignResponseBody = {
  code?: string(name='Code'),
  data?: {
    actualEndTime?: long(name='ActualEndTime'),
    actualStartTime?: long(name='ActualStartTime'),
    campaignId?: string(name='CampaignId'),
    casesAborted?: long(name='CasesAborted'),
    casesConnected?: long(name='CasesConnected'),
    casesUncompleted?: long(name='CasesUncompleted'),
    completedRate?: long(name='CompletedRate'),
    maxAttemptCount?: long(name='MaxAttemptCount'),
    minAttemptInterval?: long(name='MinAttemptInterval'),
    name?: string(name='Name'),
    planedEndTime?: long(name='PlanedEndTime'),
    planedStartTime?: long(name='PlanedStartTime'),
    queueId?: string(name='QueueId'),
    queueName?: string(name='QueueName'),
    simulation?: boolean(name='Simulation'),
    simulationParameters?: string(name='SimulationParameters'),
    state?: string(name='State'),
    strategyParameters?: string(name='StrategyParameters'),
    strategyType?: string(name='StrategyType'),
    totalCases?: long(name='TotalCases'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: GetCampaignResponseBody(name='body'),
}

async function getCampaign(request: GetCampaignRequest): GetCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCampaign', 'POST', '/', 'json', false, 'json', request);
}

model GetHistoricalCampaignReportRequest {
  campaignId: string(name='CampaignId', example='111', position='Query'),
  instanceId: string(name='InstanceId', example='111', position='Query'),
}

model GetHistoricalCampaignReportResponseBody = {
  code?: string(name='Code'),
  data?: {
    abandonedRate?: float(name='AbandonedRate'),
    callsAbandoned?: long(name='CallsAbandoned'),
    callsConnected?: long(name='CallsConnected'),
    callsDialed?: long(name='CallsDialed'),
    connectedRate?: float(name='ConnectedRate'),
    occupancyRate?: float(name='OccupancyRate'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetHistoricalCampaignReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetHistoricalCampaignReportResponseBody(name='body'),
}

async function getHistoricalCampaignReport(request: GetHistoricalCampaignReportRequest): GetHistoricalCampaignReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHistoricalCampaignReport', 'GET', '/', 'json', false, 'json', request);
}

model GetInstanceIdsByAliyunUidV2Request {
  aliyunUid?: string(name='AliyunUid', position='Query'),
}

model GetInstanceIdsByAliyunUidV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  instanceIds?: [ string ](name='InstanceIds'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetInstanceIdsByAliyunUidV2Response = {
  headers: map[string]string(name='headers'),
  body: GetInstanceIdsByAliyunUidV2ResponseBody(name='body'),
}

async function getInstanceIdsByAliyunUidV2(request: GetInstanceIdsByAliyunUidV2Request): GetInstanceIdsByAliyunUidV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInstanceIdsByAliyunUidV2', 'POST', '/', 'json', false, 'json', request);
}

model GetRealtimeCampaignStatsRequest {
  instanceId: string(name='InstanceId', example='111', position='Query'),
  queueId: string(name='QueueId', example='111', position='Query'),
}

model GetRealtimeCampaignStatsResponseBody = {
  code?: string(name='Code'),
  data?: {
    breakingAgents?: long(name='BreakingAgents'),
    caps?: long(name='Caps'),
    loggedInAgents?: long(name='LoggedInAgents'),
    outboundScenarioBreakingAgents?: long(name='OutboundScenarioBreakingAgents'),
    outboundScenarioReadyAgents?: long(name='OutboundScenarioReadyAgents'),
    outboundScenarioTalkingAgents?: long(name='OutboundScenarioTalkingAgents'),
    outboundScenarioWorkingAgents?: long(name='OutboundScenarioWorkingAgents'),
    readyAgents?: long(name='ReadyAgents'),
    talkingAgents?: long(name='TalkingAgents'),
    totalAgents?: long(name='TotalAgents'),
    workingAgents?: long(name='WorkingAgents'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetRealtimeCampaignStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GetRealtimeCampaignStatsResponseBody(name='body'),
}

async function getRealtimeCampaignStats(request: GetRealtimeCampaignStatsRequest): GetRealtimeCampaignStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRealtimeCampaignStats', 'GET', '/', 'json', false, 'json', request);
}

model ImportAdminsRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ramIdList: string(name='RamIdList', position='Query'),
}

model ImportAdminsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      extension?: string(name='Extension'),
      instanceId?: string(name='InstanceId'),
      ramId?: string(name='RamId'),
      roleId?: string(name='RoleId'),
      userId?: string(name='UserId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ImportAdminsResponse = {
  headers: map[string]string(name='headers'),
  body: ImportAdminsResponseBody(name='body'),
}

async function importAdmins(request: ImportAdminsRequest): ImportAdminsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportAdmins', 'POST', '/', 'json', false, 'json', request);
}

model IssueSoftphoneCommandRequest {
  data: string(name='Data', position='Query'),
}

model IssueSoftphoneCommandResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model IssueSoftphoneCommandResponse = {
  headers: map[string]string(name='headers'),
  body: IssueSoftphoneCommandResponseBody(name='body'),
}

async function issueSoftphoneCommand(request: IssueSoftphoneCommandRequest): IssueSoftphoneCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IssueSoftphoneCommand', 'POST', '/', 'json', false, 'json', request);
}

model ListAttemptsRequest {
  agentId?: string(name='AgentId', example='111', position='Query'),
  attemptId?: string(name='AttemptId', example='111', position='Query'),
  callee?: string(name='Callee', example='111', position='Query'),
  caller?: string(name='Caller', example='111', position='Query'),
  campaignId?: string(name='CampaignId', example='111', position='Query'),
  caseId?: string(name='CaseId', example='1111', position='Query'),
  contactId?: string(name='ContactId', example='111', position='Query'),
  endTime?: long(name='EndTime', example='1111', position='Query'),
  instanceId: string(name='InstanceId', example='111', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  queueId?: string(name='QueueId', example='111', position='Query'),
  startTime?: long(name='StartTime', example='111', position='Query'),
}

model ListAttemptsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        agentEstablishedTime?: long(name='AgentEstablishedTime'),
        agentId?: string(name='AgentId'),
        agentRingDuration?: long(name='AgentRingDuration'),
        assignAgentTime?: long(name='AssignAgentTime'),
        attemptId?: string(name='AttemptId'),
        callee?: string(name='Callee'),
        caller?: string(name='Caller'),
        campaignId?: string(name='CampaignId'),
        caseId?: string(name='CaseId'),
        contactId?: string(name='ContactId'),
        customerEstablishedTime?: long(name='CustomerEstablishedTime'),
        customerReleasedTime?: long(name='CustomerReleasedTime'),
        dialDuration?: long(name='DialDuration'),
        dialTime?: long(name='DialTime'),
        enqueueTime?: long(name='EnqueueTime'),
        enterIvrTime?: long(name='EnterIvrTime'),
        instanceId?: string(name='InstanceId'),
        ivrDuration?: long(name='IvrDuration'),
        queueDuration?: long(name='QueueDuration'),
        queueId?: string(name='QueueId'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListAttemptsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAttemptsResponseBody(name='body'),
}

async function listAttempts(request: ListAttemptsRequest): ListAttemptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAttempts', 'GET', '/', 'json', false, 'json', request);
}

model ListCampaignTrendingReportRequest {
  campaignId: string(name='CampaignId', example='111', position='Query'),
  endTime?: long(name='EndTime', example='1111', position='Query'),
  instanceId: string(name='InstanceId', example='111', position='Query'),
  startTime?: long(name='StartTime', example='111', position='Query'),
}

model ListCampaignTrendingReportResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      breakAgents?: long(name='BreakAgents'),
      concurrency?: long(name='Concurrency'),
      datetime?: long(name='Datetime'),
      loggedInAgents?: long(name='LoggedInAgents'),
      outboundScenarioBreakingAgents?: string(name='OutboundScenarioBreakingAgents'),
      outboundScenarioReadyAgents?: string(name='OutboundScenarioReadyAgents'),
      outboundScenarioTalkingAgents?: string(name='OutboundScenarioTalkingAgents'),
      outboundScenarioWorkingAgents?: string(name='OutboundScenarioWorkingAgents'),
      readyAgents?: long(name='ReadyAgents'),
      talkAgents?: long(name='TalkAgents'),
      workAgents?: long(name='WorkAgents'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListCampaignTrendingReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListCampaignTrendingReportResponseBody(name='body'),
}

async function listCampaignTrendingReport(request: ListCampaignTrendingReportRequest): ListCampaignTrendingReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCampaignTrendingReport', 'GET', '/', 'json', false, 'json', request);
}

model ListCampaignsRequest {
  actualStartTimeFrom?: string(name='ActualStartTimeFrom', position='Query'),
  actualStartTimeTo?: string(name='ActualStartTimeTo', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  planedStartTimeFrom?: string(name='PlanedStartTimeFrom', position='Query'),
  planedStartTimeTo?: string(name='PlanedStartTimeTo', position='Query'),
  queueId?: string(name='QueueId', position='Query'),
  state?: string(name='State', position='Query'),
}

model ListCampaignsResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        actualEndTime?: long(name='ActualEndTime'),
        actualStartTime?: long(name='ActualStartTime'),
        campaignId?: string(name='CampaignId'),
        casesAborted?: long(name='CasesAborted'),
        casesConnected?: long(name='CasesConnected'),
        casesUncompleted?: long(name='CasesUncompleted'),
        completedRate?: long(name='CompletedRate'),
        maxAttemptCount?: long(name='MaxAttemptCount'),
        minAttemptInterval?: long(name='MinAttemptInterval'),
        name?: string(name='Name'),
        planedEndTime?: long(name='PlanedEndTime'),
        planedStartTime?: long(name='PlanedStartTime'),
        queueId?: string(name='QueueId'),
        queueName?: string(name='QueueName'),
        simulation?: boolean(name='Simulation'),
        state?: string(name='State'),
        strategyParameters?: string(name='StrategyParameters'),
        strategyType?: string(name='StrategyType'),
        totalCases?: long(name='TotalCases'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCampaignsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCampaignsResponseBody(name='body'),
}

async function listCampaigns(request: ListCampaignsRequest): ListCampaignsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCampaigns', 'POST', '/', 'json', false, 'json', request);
}

model ListCasesRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  phoneNumber?: string(name='PhoneNumber', position='Query'),
}

model ListCasesResponseBody = {
  code?: string(name='Code'),
  data?: {
    list?: [ 
      {
        abandonType?: string(name='AbandonType'),
        attemptCount?: long(name='AttemptCount'),
        caseId?: string(name='CaseId'),
        customVariables?: string(name='CustomVariables'),
        expandInfo?: string(name='ExpandInfo'),
        failureReason?: string(name='FailureReason'),
        phoneNumber?: string(name='PhoneNumber'),
        state?: string(name='State'),
      }
    ](name='List'),
    pageNumber?: long(name='PageNumber'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ListCasesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCasesResponseBody(name='body'),
}

async function listCases(request: ListCasesRequest): ListCasesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCases', 'POST', '/', 'json', false, 'json', request);
}

model ListHistoricalAgentSkillGroupReportRequest {
  agentIdList?: string(name='AgentIdList', example='["agent1@ccc-test", "agent2@ccc-test"]', position='Body'),
  endTime?: long(name='EndTime', example='1657728000000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', example='ccc-test', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  pageNumber: int32(name='PageNumber', example='1', position='Query'),
  pageSize: int32(name='PageSize', example='10', position='Query'),
  skillGroupIdList?: string(name='SkillGroupIdList', example='["skg1@ccc-test", "skg2@ccc-test"]', position='Query'),
  startTime?: long(name='StartTime', example='1671242400000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListHistoricalAgentSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        agentId?: string(name='AgentId', example='agent1@ccc-test'),
        agentName?: string(name='AgentName'),
        back2Back?: {
          agentAnswerRate?: float(name='AgentAnswerRate', example='0.5'),
          answerRate?: float(name='AnswerRate', example='0.5'),
          averageCustomerRingTime?: float(name='AverageCustomerRingTime', example='100'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: long(name='AverageTalkTime', example='100'),
          callsAnswered?: long(name='CallsAnswered', example='10'),
          callsCustomerHandled?: long(name='CallsCustomerHandled', example='100'),
          callsDialed?: long(name='CallsDialed', example='10'),
          customerHandleRate?: float(name='CustomerHandleRate', example='0.5'),
          maxCustomerRingTime?: long(name='MaxCustomerRingTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          totalCustomerRingTime?: long(name='TotalCustomerRingTime', example='100'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
        }(name='Back2Back'),
        displayId?: string(name='DisplayId', example='123'),
        inbound?: {
          averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageResponseTime?: float(name='AverageResponseTime'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='10'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='10'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='10'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='10'),
          callsHandled?: long(name='CallsHandled', example='10'),
          callsHold?: long(name='CallsHold', example='10'),
          callsOffered?: long(name='CallsOffered', example='10'),
          callsRinged?: long(name='CallsRinged', example='10'),
          handleRate?: float(name='HandleRate', example='0.5'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
          satisfactionRate?: float(name='SatisfactionRate', example='100'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalMessagesSent?: long(name='TotalMessagesSent'),
          totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
          totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Inbound'),
        internal?: {
          averageTalkTime?: long(name='AverageTalkTime', example='100'),
          callsAnswered?: long(name='CallsAnswered', example='10'),
          callsDialed?: long(name='CallsDialed', example='10'),
          callsHandled?: long(name='CallsHandled', example='10'),
          callsOffered?: long(name='CallsOffered', example='10'),
          callsTalk?: long(name='CallsTalk', example='10'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
        }(name='Internal'),
        outbound?: {
          answerRate?: float(name='AnswerRate', example='0.4'),
          averageDialingTime?: float(name='AverageDialingTime', example='100'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageRingTime?: float(name='AverageRingTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          callsAnswered?: long(name='CallsAnswered', example='10'),
          callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='10'),
          callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='10'),
          callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='10'),
          callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='10'),
          callsDialed?: long(name='CallsDialed', example='10'),
          callsHold?: long(name='CallsHold', example='10'),
          callsRinged?: long(name='CallsRinged', example='10'),
          maxDialingTime?: long(name='MaxDialingTime', example='100'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxRingTime?: long(name='MaxRingTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='1.5'),
          satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
          totalDialingTime?: long(name='TotalDialingTime', example='100'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalRingTime?: long(name='TotalRingTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Outbound'),
        overall?: {
          averageBreakTime?: float(name='AverageBreakTime', example='100'),
          averageHoldTime?: float(name='AverageHoldTime', example='100'),
          averageReadyTime?: float(name='AverageReadyTime', example='100'),
          averageTalkTime?: float(name='AverageTalkTime', example='100'),
          averageWorkTime?: float(name='AverageWorkTime', example='100'),
          breakCodeDetailList?: [ 
            {
              breakCode?: string(name='BreakCode'),
              count?: long(name='Count', example='100'),
              duration?: long(name='Duration', example='100'),
            }
          ](name='BreakCodeDetailList'),
          firstCheckInTime?: long(name='FirstCheckInTime', example='1686030515000'),
          lastCheckOutTime?: long(name='LastCheckOutTime', example='1686030515000'),
          maxBreakTime?: long(name='MaxBreakTime', example='100'),
          maxHoldTime?: long(name='MaxHoldTime', example='100'),
          maxReadyTime?: long(name='MaxReadyTime', example='100'),
          maxTalkTime?: long(name='MaxTalkTime', example='100'),
          maxWorkTime?: long(name='MaxWorkTime', example='100'),
          occupancyRate?: float(name='OccupancyRate', example='0.1'),
          satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
          satisfactionRate?: float(name='SatisfactionRate', example='100'),
          satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
          satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
          totalBreakTime?: long(name='TotalBreakTime', example='100'),
          totalCalls?: long(name='TotalCalls', example='10'),
          totalHoldTime?: long(name='TotalHoldTime', example='100'),
          totalLoggedInTime?: long(name='TotalLoggedInTime', example='100'),
          totalOffSiteOnlineTime?: long(name='TotalOffSiteOnlineTime', example='100'),
          totalOfficePhoneOnlineTime?: long(name='TotalOfficePhoneOnlineTime', example='100'),
          totalOnSiteOnlineTime?: long(name='TotalOnSiteOnlineTime', example='100'),
          totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime', example='100'),
          totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='100'),
          totalReadyTime?: long(name='TotalReadyTime', example='100'),
          totalTalkTime?: long(name='TotalTalkTime', example='100'),
          totalWorkTime?: long(name='TotalWorkTime', example='100'),
        }(name='Overall'),
        skillGroupId?: string(name='SkillGroupId', example='skg1@ccc-test'),
        skillGroupName?: string(name='SkillGroupName', example='skg'),
      }
    ](name='List'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='13'),
  }(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='FCEFE806-E67C-577E-865B-4ED398F2F648'),
}

model ListHistoricalAgentSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListHistoricalAgentSkillGroupReportResponseBody(name='body'),
}

async function listHistoricalAgentSkillGroupReport(request: ListHistoricalAgentSkillGroupReportRequest): ListHistoricalAgentSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListHistoricalAgentSkillGroupReport', 'POST', '/', 'json', true, 'form', request);
}

model ListIntervalAgentSkillGroupReportRequest {
  agentId: string(name='AgentId', example='agent@ccc-test', position='Query'),
  endTime?: long(name='EndTime', example='1532707199000', minimum=0, maximum=4133952000000, position='Query'),
  instanceId: string(name='InstanceId', example='ccc-test', position='Query'),
  interval?: string(name='Interval', example='Daily', position='Query'),
  mediaType?: string(name='MediaType', position='Query'),
  skillGroupId: string(name='SkillGroupId', example='skg-default@ccc-test', position='Query'),
  startTime?: long(name='StartTime', example='1532448000000', minimum=0, maximum=4133952000000, position='Query'),
}

model ListIntervalAgentSkillGroupReportResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: [ 
    {
      back2Back?: {
        agentAnswerRate?: float(name='AgentAnswerRate', example='0.4'),
        answerRate?: float(name='AnswerRate', example='0.4'),
        averageCustomerRingTime?: float(name='AverageCustomerRingTime', example='100'),
        averageRingTime?: float(name='AverageRingTime', example='100'),
        averageTalkTime?: long(name='AverageTalkTime', example='100'),
        callsAnswered?: long(name='CallsAnswered', example='10'),
        callsCustomerHandled?: long(name='CallsCustomerHandled', example='10'),
        callsDialed?: long(name='CallsDialed', example='10'),
        customerHandleRate?: float(name='CustomerHandleRate', example='0.4'),
        maxCustomerRingTime?: long(name='MaxCustomerRingTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        totalCustomerRingTime?: long(name='TotalCustomerRingTime', example='100'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
      }(name='Back2Back'),
      inbound?: {
        averageFirstResponseTime?: float(name='AverageFirstResponseTime'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageResponseTime?: float(name='AverageResponseTime'),
        averageRingTime?: float(name='AverageRingTime', example='100'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='10'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='10'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='10'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='10'),
        callsHandled?: long(name='CallsHandled', example='10'),
        callsHold?: long(name='CallsHold', example='10'),
        callsOffered?: long(name='CallsOffered', example='100'),
        callsRinged?: long(name='CallsRinged', example='10'),
        handleRate?: float(name='HandleRate', example='0.6'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
        satisfactionRate?: float(name='SatisfactionRate', example='0.8'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalMessagesSent?: long(name='TotalMessagesSent'),
        totalMessagesSentByAgent?: long(name='TotalMessagesSentByAgent'),
        totalMessagesSentByCustomer?: long(name='TotalMessagesSentByCustomer'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='100'),
      }(name='Inbound'),
      internal?: {
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        callsAnswered?: long(name='CallsAnswered', example='10'),
        callsDialed?: long(name='CallsDialed', example='10'),
        callsHandled?: long(name='CallsHandled', example='10'),
        callsOffered?: long(name='CallsOffered', example='10'),
        callsTalk?: long(name='CallsTalk', example='10'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
      }(name='Internal'),
      outbound?: {
        answerRate?: float(name='AnswerRate', example='0.5'),
        averageDialingTime?: float(name='AverageDialingTime', example='100'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageRingTime?: float(name='AverageRingTime', example='100'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        callsAnswered?: long(name='CallsAnswered', example='10'),
        callsAttendedTransferIn?: long(name='CallsAttendedTransferIn', example='10'),
        callsAttendedTransferOut?: long(name='CallsAttendedTransferOut', example='100'),
        callsBlindTransferIn?: long(name='CallsBlindTransferIn', example='10'),
        callsBlindTransferOut?: long(name='CallsBlindTransferOut', example='10'),
        callsDialed?: long(name='CallsDialed', example='10'),
        callsHold?: long(name='CallsHold', example='10'),
        callsRinged?: long(name='CallsRinged', example='10'),
        maxDialingTime?: long(name='MaxDialingTime', example='100'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxRingTime?: long(name='MaxRingTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='1.4'),
        satisfactionRate?: float(name='SatisfactionRate', example='0.5'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
        totalDialingTime?: long(name='TotalDialingTime', example='100'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalRingTime?: long(name='TotalRingTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='100'),
      }(name='Outbound'),
      overall?: {
        averageBreakTime?: float(name='AverageBreakTime', example='100'),
        averageHoldTime?: float(name='AverageHoldTime', example='100'),
        averageReadyTime?: float(name='AverageReadyTime', example='100'),
        averageTalkTime?: float(name='AverageTalkTime', example='100'),
        averageWorkTime?: float(name='AverageWorkTime', example='100'),
        breakCodeDetailList?: [ 
          {
            breakCode?: string(name='BreakCode'),
            count?: long(name='Count', example='10'),
            duration?: long(name='Duration', example='100'),
          }
        ](name='BreakCodeDetailList'),
        firstCheckInTime?: long(name='FirstCheckInTime', example='1620291600000'),
        lastCheckoutTime?: long(name='LastCheckoutTime', example='1620291600000'),
        maxBreakTime?: long(name='MaxBreakTime', example='100'),
        maxHoldTime?: long(name='MaxHoldTime', example='100'),
        maxReadyTime?: long(name='MaxReadyTime', example='100'),
        maxTalkTime?: long(name='MaxTalkTime', example='100'),
        maxWorkTime?: long(name='MaxWorkTime', example='100'),
        occupancyRate?: float(name='OccupancyRate', example='0.4'),
        satisfactionIndex?: float(name='SatisfactionIndex', example='1.5'),
        satisfactionRate?: float(name='SatisfactionRate', example='0.4'),
        satisfactionSurveysOffered?: long(name='SatisfactionSurveysOffered', example='10'),
        satisfactionSurveysResponded?: long(name='SatisfactionSurveysResponded', example='10'),
        totalBreakTime?: long(name='TotalBreakTime', example='100'),
        totalCalls?: long(name='TotalCalls', example='100'),
        totalHoldTime?: long(name='TotalHoldTime', example='100'),
        totalLoggedInTime?: long(name='TotalLoggedInTime', example='100'),
        totalOffSiteOnlineTime?: long(name='TotalOffSiteOnlineTime', example='100'),
        totalOfficePhoneOnlineTime?: long(name='TotalOfficePhoneOnlineTime', example='100'),
        totalOnSiteOnlineTime?: long(name='TotalOnSiteOnlineTime', example='100'),
        totalOutboundScenarioReadyTime?: long(name='TotalOutboundScenarioReadyTime', example='100'),
        totalOutboundScenarioTime?: long(name='TotalOutboundScenarioTime', example='100'),
        totalReadyTime?: long(name='TotalReadyTime', example='100'),
        totalTalkTime?: long(name='TotalTalkTime', example='100'),
        totalWorkTime?: long(name='TotalWorkTime', example='100'),
      }(name='Overall'),
      statsTime?: long(name='StatsTime', example='1620291600000'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='943D8EF3-3321-471F-A104-51C96FCA94D6'),
}

model ListIntervalAgentSkillGroupReportResponse = {
  headers: map[string]string(name='headers'),
  body: ListIntervalAgentSkillGroupReportResponseBody(name='body'),
}

async function listIntervalAgentSkillGroupReport(request: ListIntervalAgentSkillGroupReportRequest): ListIntervalAgentSkillGroupReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIntervalAgentSkillGroupReport', 'POST', '/', 'json', false, 'json', request);
}

model ListMonoRecordingsRequest {
  contactId: string(name='ContactId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model ListMonoRecordingsResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      agentId?: string(name='AgentId'),
      agentName?: string(name='AgentName'),
      contactId?: string(name='ContactId'),
      duration?: string(name='Duration'),
      fileName?: string(name='FileName'),
      fileUrl?: string(name='FileUrl'),
      ramId?: string(name='RamId'),
      skillGroupId?: string(name='SkillGroupId'),
      startTime?: string(name='StartTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListMonoRecordingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListMonoRecordingsResponseBody(name='body'),
}

async function listMonoRecordings(request: ListMonoRecordingsRequest): ListMonoRecordingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListMonoRecordings', 'POST', '/', 'json', false, 'json', request);
}

model PauseCampaignRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model PauseCampaignResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PauseCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: PauseCampaignResponseBody(name='body'),
}

async function pauseCampaign(request: PauseCampaignRequest): PauseCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PauseCampaign', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceMigrationAvailableNumbersRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  operatorName?: string(name='OperatorName', position='Query'),
  operatorUid?: long(name='OperatorUid', position='Query'),
  v1Numbers?: string(name='V1Numbers', position='Query'),
  v2Numbers?: string(name='V2Numbers', position='Query'),
}

model ReplaceMigrationAvailableNumbersResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ReplaceMigrationAvailableNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceMigrationAvailableNumbersResponseBody(name='body'),
}

async function replaceMigrationAvailableNumbers(request: ReplaceMigrationAvailableNumbersRequest): ReplaceMigrationAvailableNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceMigrationAvailableNumbers', 'POST', '/', 'json', false, 'json', request);
}

model ResumeCampaignRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model ResumeCampaignResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ResumeCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeCampaignResponseBody(name='body'),
}

async function resumeCampaign(request: ResumeCampaignRequest): ResumeCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeCampaign', 'POST', '/', 'json', false, 'json', request);
}

model SaveRTCStatsV2Request {
  callId: string(name='CallId', position='Query'),
  generalInfo: string(name='GeneralInfo', position='Query'),
  googAddress: string(name='GoogAddress', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  receiverReport: string(name='ReceiverReport', position='Query'),
  senderReport: string(name='SenderReport', position='Query'),
}

model SaveRTCStatsV2ResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveRTCStatsV2Response = {
  headers: map[string]string(name='headers'),
  body: SaveRTCStatsV2ResponseBody(name='body'),
}

async function saveRTCStatsV2(request: SaveRTCStatsV2Request): SaveRTCStatsV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveRTCStatsV2', 'POST', '/', 'json', false, 'json', request);
}

model SaveTerminalLogRequest {
  appName: string(name='AppName', position='Query'),
  callId: string(name='CallId', position='Query'),
  content: string(name='Content', position='Query'),
  dataType: int32(name='DataType', minimum=0, maximum=100, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
  methodName?: string(name='MethodName', position='Query'),
  status: string(name='Status', position='Query'),
  uniqueRequestId: string(name='UniqueRequestId', position='Query'),
}

model SaveTerminalLogResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveTerminalLogResponse = {
  headers: map[string]string(name='headers'),
  body: SaveTerminalLogResponseBody(name='body'),
}

async function saveTerminalLog(request: SaveTerminalLogRequest): SaveTerminalLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveTerminalLog', 'POST', '/', 'json', false, 'json', request);
}

model SaveWebRtcInfoRequest {
  callId: string(name='CallId', position='Query'),
  content: string(name='Content', position='Query'),
  contentType: string(name='ContentType', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model SaveWebRtcInfoResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: long(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  rowCount?: long(name='RowCount'),
  success?: boolean(name='Success'),
  timeStamp?: long(name='TimeStamp'),
}

model SaveWebRtcInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SaveWebRtcInfoResponseBody(name='body'),
}

async function saveWebRtcInfo(request: SaveWebRtcInfoRequest): SaveWebRtcInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveWebRtcInfo', 'POST', '/', 'json', false, 'json', request);
}

model SubmitCampaignRequest {
  campaignId?: string(name='CampaignId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
}

model SubmitCampaignResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SubmitCampaignResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitCampaignResponseBody(name='body'),
}

async function submitCampaign(request: SubmitCampaignRequest): SubmitCampaignResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitCampaign', 'POST', '/', 'json', false, 'json', request);
}

model UnregisterDeviceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model UnregisterDeviceResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UnregisterDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterDeviceResponseBody(name='body'),
}

async function unregisterDevice(request: UnregisterDeviceRequest): UnregisterDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnregisterDevice', 'POST', '/', 'json', false, 'json', request);
}

