/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('starrocks', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model InstanceConfigDto {
  configKey?: string(name='configKey', example='storage_root_path'),
  configType?: string(name='configType', example='BE'),
  configValue?: string(name='configValue', example='value1'),
  nodeGroupId?: string(name='nodeGroupId', example='ng-e24924dxxxxx'),
}

model ResourceSpec {
  cu?: int32(name='cu'),
  diskNumber?: int32(name='diskNumber'),
  localStorageInstanceType?: string(name='localStorageInstanceType'),
  nodeNumber?: int32(name='nodeNumber'),
  specType?: string(name='specType'),
  storagePerformanceLevel?: string(name='storagePerformanceLevel'),
  storageSize?: int32(name='storageSize'),
}

model ModifyCuRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: int32(name='Target', description='This parameter is required.', example='4'),
}

model ModifyCuResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyCuResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuResponseBody(name='body'),
}

/**
 * @summary 修改计算组的节点Cu数量
 *
 * @param request ModifyCuRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyCuResponse
 */
async function modifyCuWithOptions(request: ModifyCuRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyCuResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCu',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyCu`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组的节点Cu数量
 *
 * @param request ModifyCuRequest
 * @return ModifyCuResponse
 */
async function modifyCu(request: ModifyCuRequest): ModifyCuResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyCuWithOptions(request, headers, runtime);
}

model ModifyCuPreCheckRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-d332aa8bca48****'),
  target?: int32(name='Target', description='This parameter is required.', example='2'),
}

model ModifyCuPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', example='false'),
    reason?: string(name='Reason', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyCuPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuPreCheckResponseBody(name='body'),
}

/**
 * @summary 修改计算组中节点Cu预检查
 *
 * @param request ModifyCuPreCheckRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyCuPreCheckResponse
 */
async function modifyCuPreCheckWithOptions(request: ModifyCuPreCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyCuPreCheckResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCuPreCheck',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyCuPreCheck`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组中节点Cu预检查
 *
 * @param request ModifyCuPreCheckRequest
 * @return ModifyCuPreCheckResponse
 */
async function modifyCuPreCheck(request: ModifyCuPreCheckRequest): ModifyCuPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyCuPreCheckWithOptions(request, headers, runtime);
}

model ModifyDiskNumberRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: int32(name='Target', description='This parameter is required.', example='3'),
}

model ModifyDiskNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskNumberResponseBody(name='body'),
}

/**
 * @summary 修改计算组的节点磁盘块数
 *
 * @param request ModifyDiskNumberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDiskNumberResponse
 */
async function modifyDiskNumberWithOptions(request: ModifyDiskNumberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyDiskNumberResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskNumber',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyDiskNumber`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组的节点磁盘块数
 *
 * @param request ModifyDiskNumberRequest
 * @return ModifyDiskNumberResponse
 */
async function modifyDiskNumber(request: ModifyDiskNumberRequest): ModifyDiskNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyDiskNumberWithOptions(request, headers, runtime);
}

model ModifyDiskPerformanceLevelRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: string(name='Target', description='This parameter is required.', example='pl2'),
}

model ModifyDiskPerformanceLevelResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskPerformanceLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskPerformanceLevelResponseBody(name='body'),
}

/**
 * @summary 修改计算组的节点磁盘性能级别
 *
 * @param request ModifyDiskPerformanceLevelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDiskPerformanceLevelResponse
 */
async function modifyDiskPerformanceLevelWithOptions(request: ModifyDiskPerformanceLevelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyDiskPerformanceLevelResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskPerformanceLevel',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyDiskPerformanceLevel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组的节点磁盘性能级别
 *
 * @param request ModifyDiskPerformanceLevelRequest
 * @return ModifyDiskPerformanceLevelResponse
 */
async function modifyDiskPerformanceLevel(request: ModifyDiskPerformanceLevelRequest): ModifyDiskPerformanceLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyDiskPerformanceLevelWithOptions(request, headers, runtime);
}

model ModifyDiskSizeRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: int32(name='Target', description='This parameter is required.', example='500'),
}

model ModifyDiskSizeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskSizeResponseBody(name='body'),
}

/**
 * @summary 修改计算组的节点存储大小
 *
 * @param request ModifyDiskSizeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDiskSizeResponse
 */
async function modifyDiskSizeWithOptions(request: ModifyDiskSizeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyDiskSizeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDiskSize',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyDiskSize`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组的节点存储大小
 *
 * @param request ModifyDiskSizeRequest
 * @return ModifyDiskSizeResponse
 */
async function modifyDiskSize(request: ModifyDiskSizeRequest): ModifyDiskSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyDiskSizeWithOptions(request, headers, runtime);
}

model ModifyNodeNumberRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: int32(name='Target', description='This parameter is required.', example='3'),
}

model ModifyNodeNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyNodeNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberResponseBody(name='body'),
}

/**
 * @summary 修改计算组的节点数量
 *
 * @param request ModifyNodeNumberRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNodeNumberResponse
 */
async function modifyNodeNumberWithOptions(request: ModifyNodeNumberRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyNodeNumberResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodeNumber',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyNodeNumber`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组的节点数量
 *
 * @param request ModifyNodeNumberRequest
 * @return ModifyNodeNumberResponse
 */
async function modifyNodeNumber(request: ModifyNodeNumberRequest): ModifyNodeNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyNodeNumberWithOptions(request, headers, runtime);
}

model ModifyNodeNumberPreCheckRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  nodeGroupId?: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****'),
  target?: int32(name='Target', description='This parameter is required.', example='3'),
}

model ModifyNodeNumberPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', example='true'),
    reason?: string(name='Reason', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyNodeNumberPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberPreCheckResponseBody(name='body'),
}

/**
 * @summary 修改计算组中节点数量预检查
 *
 * @param request ModifyNodeNumberPreCheckRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNodeNumberPreCheckResponse
 */
async function modifyNodeNumberPreCheckWithOptions(request: ModifyNodeNumberPreCheckRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ModifyNodeNumberPreCheckResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nodeGroupId)) {
    query['NodeGroupId'] = request.nodeGroupId;
  }
  if (!Util.isUnset(request.target)) {
    query['Target'] = request.target;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNodeNumberPreCheck',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/resourceChange/modifyNodeNumberPreCheck`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改计算组中节点数量预检查
 *
 * @param request ModifyNodeNumberPreCheckRequest
 * @return ModifyNodeNumberPreCheckResponse
 */
async function modifyNodeNumberPreCheck(request: ModifyNodeNumberPreCheckRequest): ModifyNodeNumberPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return modifyNodeNumberPreCheckWithOptions(request, headers, runtime);
}

model QueryUpgradableVersionsRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  minor?: boolean(name='Minor', example='true'),
}

model QueryUpgradableVersionsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: [ string ](name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model QueryUpgradableVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUpgradableVersionsResponseBody(name='body'),
}

/**
 * @summary 查询StarRocks可升级的版本列表
 *
 * @param request QueryUpgradableVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryUpgradableVersionsResponse
 */
async function queryUpgradableVersionsWithOptions(request: QueryUpgradableVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryUpgradableVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.minor)) {
    query['Minor'] = request.minor;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUpgradableVersions',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/starrocks/queryUpgradableVersions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询StarRocks可升级的版本列表
 *
 * @param request QueryUpgradableVersionsRequest
 * @return QueryUpgradableVersionsResponse
 */
async function queryUpgradableVersions(request: QueryUpgradableVersionsRequest): QueryUpgradableVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryUpgradableVersionsWithOptions(request, headers, runtime);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
}

model ReleaseInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
 * @summary 释放starrocks按量计费实例
 *
 * @param request ReleaseInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseInstanceResponse
 */
async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/cluster/release`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 释放starrocks按量计费实例
 *
 * @param request ReleaseInstanceRequest
 * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return releaseInstanceWithOptions(request, headers, runtime);
}

model RestartInstanceRequest {
  fastMode?: boolean(name='FastMode', example='true'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
}

model RestartInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Unsupported.Non.Whitelist.Operation'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
 * @summary 重启starrocks集群
 *
 * @param request RestartInstanceRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RestartInstanceResponse
 */
async function restartInstanceWithOptions(request: RestartInstanceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RestartInstanceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.fastMode)) {
    query['FastMode'] = request.fastMode;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartInstance',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/starrocks/restartCluster`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重启starrocks集群
 *
 * @param request RestartInstanceRequest
 * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restartInstanceWithOptions(request, headers, runtime);
}

model UpdateInstanceNameRequest {
  clusterName?: string(name='ClusterName', description='This parameter is required.', example='new_name'),
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
}

model UpdateInstanceNameResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

/**
 * @summary 修改集群名称
 *
 * @param request UpdateInstanceNameRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateInstanceNameResponse
 */
async function updateInstanceNameWithOptions(request: UpdateInstanceNameRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateInstanceNameResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateInstanceName',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/cluster/update_name`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改集群名称
 *
 * @param request UpdateInstanceNameRequest
 * @return UpdateInstanceNameResponse
 */
async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateInstanceNameWithOptions(request, headers, runtime);
}

model UpgradeVersionRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****'),
  minor?: boolean(name='Minor', example='true'),
  targetVersion?: string(name='TargetVersion', description='This parameter is required.', example='3.3.2-1.77-1.6.4'),
}

model UpgradeVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid instance status: [cannot upgrade when instance is not running].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model UpgradeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeVersionResponseBody(name='body'),
}

/**
 * @summary 升级StarRocks的版本
 *
 * @param request UpgradeVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeVersionResponse
 */
async function upgradeVersionWithOptions(request: UpgradeVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpgradeVersionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.minor)) {
    query['Minor'] = request.minor;
  }
  if (!Util.isUnset(request.targetVersion)) {
    query['TargetVersion'] = request.targetVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeVersion',
    version = '2022-10-19',
    protocol = 'HTTPS',
    pathname = `/webapi/starrocks/upgradeVersion`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 升级StarRocks的版本
 *
 * @param request UpgradeVersionRequest
 * @return UpgradeVersionResponse
 */
async function upgradeVersion(request: UpgradeVersionRequest): UpgradeVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return upgradeVersionWithOptions(request, headers, runtime);
}

