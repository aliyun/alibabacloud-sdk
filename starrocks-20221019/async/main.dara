/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'starrocks';
  @version = '2022-10-19';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model InstanceConfigDto {
  configKey?: string(name='configKey', example='storage_root_path'),
  configType?: string(name='configType', example='BE'),
  configValue?: string(name='configValue', example='value1'),
  nodeGroupId?: string(name='nodeGroupId', example='ng-e24924dxxxxx'),
}

model ResourceSpec {
  cu?: int32(name='cu'),
  diskNumber?: int32(name='diskNumber'),
  localStorageInstanceType?: string(name='localStorageInstanceType'),
  nodeNumber?: int32(name='nodeNumber'),
  specType?: string(name='specType'),
  storagePerformanceLevel?: string(name='storagePerformanceLevel'),
  storageSize?: int32(name='storageSize'),
}

model ChangeResourceGroupRequest {
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-1854345****', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='This parameter is required.', example='rg-4352gdf****', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='instance', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='Success'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE74XXX'),
  success?: boolean(name='Success', example='True'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChangeResourceGroup', 'POST', '/webapi/resourceGroup/change', 'json', false, 'json', request);
}

model CreateInstanceV1Request {
  regionId?: string(name='RegionId', position='Host,Body'),
  adminPassword: string(name='AdminPassword', description='This parameter is required.', example='password_example', position='Body'),
  agentNodeGroup?: {
    cu?: int32(name='cu'),
  }(name='AgentNodeGroup', position='Body'),
  autoPay?: boolean(name='AutoPay', position='Body'),
  autoRenew?: boolean(name='AutoRenew', example='true', position='Body'),
  backendNodeGroups?: [ 
    {
      cu?: int32(name='cu', example='8'),
      diskNumber?: int32(name='diskNumber', example='1', minimum=0),
      localStorageInstanceType?: string(name='localStorageInstanceType', example='local_ssd_4_4xlarge'),
      residentNodeNumber?: int32(name='residentNodeNumber', example='3'),
      specType?: string(name='specType', example='standard'),
      storagePerformanceLevel?: string(name='storagePerformanceLevel', example='pl1'),
      storageSize?: int32(name='storageSize', example='100'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-i'),
    }
  ](name='BackendNodeGroups', position='Body'),
  clientToken?: string(name='ClientToken', example='123e4567-e89b-12d3-a456-426655440000', position='Body'),
  duration?: int32(name='Duration', example='1', position='Body'),
  encrypted?: boolean(name='Encrypted', example='true', position='Body'),
  frontendNodeGroups?: [ 
    {
      cu?: int32(name='cu', example='8'),
      diskNumber?: int32(name='diskNumber', example='1'),
      localStorageInstanceType?: string(name='localStorageInstanceType', example='null'),
      residentNodeNumber?: int32(name='residentNodeNumber', example='3'),
      specType?: string(name='specType', example='standard'),
      storagePerformanceLevel?: string(name='storagePerformanceLevel', example='pl1'),
      storageSize?: int32(name='storageSize', example='100'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-i'),
    }
  ](name='FrontendNodeGroups', position='Body'),
  gatewayType?: string(name='GatewayType', position='Body'),
  instanceName: string(name='InstanceName', description='This parameter is required.', example='c1', position='Body'),
  kmsKeyId?: string(name='KmsKeyId', example='fdsdf****', position='Body'),
  observerNodeGroups?: [ 
    {
      cu?: int32(name='cu', example='8'),
      diskNumber?: int32(name='diskNumber', example='1'),
      localStorageInstanceType?: string(name='localStorageInstanceType', example='null'),
      residentNodeNumber?: int32(name='residentNodeNumber', example='3'),
      specType?: string(name='specType', example='standard'),
      storagePerformanceLevel?: string(name='storagePerformanceLevel', example='pl1'),
      storageSize?: int32(name='storageSize', example='100'),
      zoneId?: string(name='zoneId', example='cn-hangzhou-i'),
    }
  ](name='ObserverNodeGroups', position='Body'),
  ossAccessingRoleName?: string(name='OssAccessingRoleName', example='AliyunEMRStarRocksAccessingOSSRole', position='Body'),
  packageType: string(name='PackageType', description='This parameter is required.', example='official', position='Body'),
  payType: string(name='PayType', description='This parameter is required.', example='prePaid', position='Body'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Body'),
  promotionOptionNo?: string(name='PromotionOptionNo', example='165445235634', position='Body'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-aekzllkih7jqxxx', position='Body'),
  runMode: string(name='RunMode', description='This parameter is required.', example='shared_data', position='Body'),
  tags?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tags', position='Body'),
  vSwitches?: [ 
    {
      vswId: string(name='VswId', description='This parameter is required.', example='vsw-bp19mlh98tm9teyyd****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
    }
  ](name='VSwitches', position='Body'),
  version: string(name='Version', description='This parameter is required.', example='3', position='Body'),
  vpcId: string(name='VpcId', description='VPC IDã€‚

This parameter is required.', example='vpc-bp1fll2mci6d7pw8m****', position='Body'),
  zoneId: string(name='ZoneId', description='This parameter is required.', example='cn-hangzhou-i', position='Body'),
}

model CreateInstanceV1ResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    instanceId?: string(name='InstanceId', example='c-b25e21e243889XXX'),
    orderId?: long(name='OrderId', example='241526000650XXX'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [Region id should be select from set [cn-beijing, cn-hangzhou]]'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='B67D142D-D54E-184F-A306-22BDC01B2XXX'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceV1Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceV1ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateInstanceV1  CreateInstanceV1Request
  * @return CreateInstanceV1Response
 */
async function createInstanceV1(request: CreateInstanceV1Request): CreateInstanceV1Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstanceV1', 'POST', '/webapi/cluster/createV1', 'json', false, 'json', request);
}

model CreateServiceLinkedRoleRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model CreateServiceLinkedRoleResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', example='true'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='null'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='3'),
}

model CreateServiceLinkedRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServiceLinkedRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateServiceLinkedRole  CreateServiceLinkedRoleRequest
  * @return CreateServiceLinkedRoleResponse
 */
async function createServiceLinkedRole(request: CreateServiceLinkedRoleRequest): CreateServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateServiceLinkedRole', 'POST', '/webapi/user/create_default_role', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  instanceId?: string(name='InstanceId', example='c-a0cb1c8ad6d35XXX', position='Query'),
  instanceName?: string(name='InstanceName', example='starrocks_1', position='Query'),
  instanceStatus?: string(name='InstanceStatus', example='running,creating', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, maximum=10000, position='Query'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100000, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmygmtrcenXXX', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag', shrink='json', position='Query'),
}

model DescribeInstancesResponseBody = {
  data?: [ 
    {
      aclId?: string(name='AclId', example='acl-bp1xc6b9vs013jjtp****'),
      architecture?: string(name='Architecture', example='onECS'),
      beginTime?: long(name='BeginTime', example='1733292921000'),
      enableAutoMinorVersionUpgrade?: boolean(name='EnableAutoMinorVersionUpgrade', example='true'),
      enableSSL?: boolean(name='EnableSSL', example='true'),
      enabledAuditLoader?: boolean(name='EnabledAuditLoader', example='true'),
      encrypted?: boolean(name='Encrypted', example='true'),
      expireTime?: long(name='ExpireTime', example='4889001600000'),
      instanceId?: string(name='InstanceId', example='c-d4be777ff5e8cXXX'),
      instanceName?: string(name='InstanceName', example='sr_test_1'),
      instanceStatus?: string(name='InstanceStatus', example='running'),
      isolateLeader?: boolean(name='IsolateLeader', example='true'),
      kmsKeyId?: string(name='KmsKeyId', example='rewqfds****'),
      maintainablePeriod?: string(name='MaintainablePeriod', example='00:00-06:00'),
      minorVersion?: string(name='MinorVersion', example='3.2.11-1.79-1.6.5'),
      monitorType?: string(name='MonitorType', example='cms'),
      ossLocation?: string(name='OssLocation', example='oss://sr-c-****'),
      packageType?: string(name='PackageType', example='official'),
      payType?: string(name='PayType', example='postPaid'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmytyuofb****'),
      runMode?: string(name='RunMode', example='shared_nothing'),
      runningTime?: long(name='RunningTime', example='3645445'),
      securityGroupManaged?: boolean(name='SecurityGroupManaged', example='true'),
      sgId?: string(name='SgId', example='sg-8vbaz2etr66a62b9****'),
      tags?: [ 
        {
          key?: string(name='Key', example='k1'),
          value?: string(name='Value', example='v1'),
        }
      ](name='Tags'),
      vSwitches?: [ 
        {
          primary?: boolean(name='Primary', example='true'),
          vswId?: string(name='VswId', example='vsw-bp1p0mldwx5av55v0xXXX'),
          zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
        }
      ](name='VSwitches'),
      version?: string(name='Version', example='3.2'),
      vpcId?: string(name='VpcId', description='VPC IDã€‚', example='vpc-bp1rbvag1cafkj4prwXXX'),
    }
  ](name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE74XXX'),
  success?: boolean(name='Success', example='false'),
  total?: int32(name='Total', example='3'),
}

model DescribeInstancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstancesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeInstances  DescribeInstancesRequest
  * @return DescribeInstancesResponse
 */
async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInstances', 'POST', '/webapi/starrocks/describeInstances', 'json', false, 'json', request);
}

model ModifyCuRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  fastMode?: boolean(name='FastMode', description='Specifies whether to restart compute nodes in quick restart mode. Default value: false. Valid values:

*   true: Compute nodes are restarted in quick restart mode in multiple batches. The batches are executed in parallel, and the nodes in each batch are restarted at the same time.
*   false: Compute nodes are restarted in rolling restart mode.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', position='Query'),
  target: int32(name='Target', description='The number of CUs to which you want to change.

Valid values:

*   4
*   8
*   16
*   32
*   64

This parameter is required.', example='4', minimum=4, maximum=64, position='Query'),
}

model ModifyCuResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', description='The order ID.', example='24151320976****'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyCuResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing methods and [billable items](https://www.alibabacloud.com/help/en/emr/emr-serverless-starrocks/product-overview/billable-items?spm=a2c63.p38356.help-menu-28066.d_0_1_0.3aaf4b0b69jN1P) of EMR Serverless StarRocks instances.
  * Before you call this operation, take note of the following items:
  * *   You can modify the number of CUs for a warehouse of only StarRocks instances of Standard Edition.
  * *   You can increase the number of disks only for warehouses of the standard specifications.
  * *   The instance must be in the Running state.
  * After you modify the number of CUs for a warehouse, the billing of CUs has the following changes:
  * *   Pay-as-you-go StarRocks instances: You are charged based on the number of CUs.
  * *   Subscription StarRocks instances: You are charged additionally based on the price difference between the number of CUs before and after the change and the remaining days of the billing cycle. The billing cycle starts from 00:00 the next day until the end of the subscription period.
  * @param request  the request parameters of ModifyCu  ModifyCuRequest
  * @return ModifyCuResponse
 */
async function modifyCu(request: ModifyCuRequest): ModifyCuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCu', 'POST', '/webapi/resourceChange/modifyCu', 'json', false, 'json', request);
}

model ModifyCuPreCheckRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-d332aa8bca48****', position='Query'),
  target: int32(name='Target', description='The number of CUs to which you want to change.

Valid values:

*   2
*   4
*   8
*   16
*   32
*   64

This parameter is required.', example='2', minimum=0, maximum=100, position='Query'),
}

model ModifyCuPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', description='Indicates whether the number of CUs can be modified.', example='false'),
    reason?: string(name='Reason', description='The reason why the number of CUs cannot be modified.', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data', description='The returned data.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyCuPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCuPreCheck  ModifyCuPreCheckRequest
  * @return ModifyCuPreCheckResponse
 */
async function modifyCuPreCheck(request: ModifyCuPreCheckRequest): ModifyCuPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCuPreCheck', 'POST', '/webapi/resourceChange/modifyCuPreCheck', 'json', false, 'json', request);
}

model ModifyDiskNumberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  fastMode?: boolean(name='FastMode', description='Specifies whether to restart compute nodes in quick restart mode. Default value: false. Valid values:

*   true: Compute nodes are restarted in quick restart mode in multiple batches. The batches are executed in parallel, and the nodes in each batch are restarted at the same time.
*   false: Compute nodes are restarted in rolling restart mode.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', position='Query'),
  target: int32(name='Target', description='The number of disks to which you want to change to.

This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyDiskNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', description='The order ID.', example='24151320976****'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyDiskNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskNumberResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing methods and [billable items](https://www.alibabacloud.com/help/en/emr/emr-serverless-starrocks/product-overview/billable-items?spm=a2c63.p38356.help-menu-28066.d_0_1_0.3aaf4b0b69jN1P) of EMR Serverless StarRocks instances. Before you call this operation, take note of the following items:
  * *   You can increase the number of disks only for StarRocks instances of Standard Edition.
  * *   You can increase the number of disks only for warehouses of the standard specifications.
  * *   The instance must be in the Running state.
  * After you increase the number of disks for a warehouse, the billing of disks has the following changes:
  * *   Pay-as-you-go StarRocks instances: You are charged for the disk based on the new disk type.
  * *   Subscription StarRocks instances: You are charged additionally based on the price difference between the number of disks before and after the change and the remaining days of the billing cycle. The billing cycle starts from 00:00 the next day until the end of the subscription period.
  * @param request  the request parameters of ModifyDiskNumber  ModifyDiskNumberRequest
  * @return ModifyDiskNumberResponse
 */
async function modifyDiskNumber(request: ModifyDiskNumberRequest): ModifyDiskNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskNumber', 'POST', '/webapi/resourceChange/modifyDiskNumber', 'json', false, 'json', request);
}

model ModifyDiskPerformanceLevelRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', position='Query'),
  target: string(name='Target', description='The disk performance level to which you want to change.

Valid values:

*   pl0
*   pl1
*   pl2
*   pl3

This parameter is required.', example='pl2', position='Query'),
}

model ModifyDiskPerformanceLevelResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', description='The order ID.', example='24151320976****'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyDiskPerformanceLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskPerformanceLevelResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing methods and [pricing](https://www.alibabacloud.com/en/product/ecs?_p_lc=1&spm=openapi-amp.newDocPublishment.0.0.47c9281fkIZGiB#pricing) of EMR Serverless StarRocks instances.
  * Before you call this operation, take note of the following items:
  * *   You can modify the disk performance level only for StarRocks instances of Standard Edition.
  * *   You can modify the disk performance level only for warehouses of the standard specifications.
  * *   The instance must be in the Running state.
  * *   You cannot downgrade the performance level to PL0.
  * *   The performance level of an Enterprise SSD (ESSD) is limited by the ESSD disk size. If you cannot upgrade the performance level of an ESSD, expand the ESSD and try again. For more information, see [Enterprise SSDs](https://help.aliyun.com/document_detail/122389.html).
  * After the disk performance level is changed, the billing of the disk has the following changes:
  * *   Pay-as-you-go StarRocks instances: You are charged for the disk based on the new disk type.
  * *   Subscription StarRocks instances: You are charged additionally based on the price difference between the disk performance level before and after the change and the remaining days of the billing cycle. The billing cycle starts from 00:00 the next day until the end of the subscription period.
  * @param request  the request parameters of ModifyDiskPerformanceLevel  ModifyDiskPerformanceLevelRequest
  * @return ModifyDiskPerformanceLevelResponse
 */
async function modifyDiskPerformanceLevel(request: ModifyDiskPerformanceLevelRequest): ModifyDiskPerformanceLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskPerformanceLevel', 'POST', '/webapi/resourceChange/modifyDiskPerformanceLevel', 'json', false, 'json', request);
}

model ModifyDiskSizeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  fastMode?: boolean(name='FastMode', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', position='Query'),
  target: int32(name='Target', description='The disk size to which you want to change to. Unit: GB.

This parameter is required.', example='500', minimum=0, maximum=65000, position='Query'),
}

model ModifyDiskSizeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', description='The order ID.', example='24151320976****'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyDiskSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskSizeResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing methods and [billable items](https://www.alibabacloud.com/help/en/emr/emr-serverless-starrocks/product-overview/billable-items?spm=a2c63.p38356.help-menu-28066.d_0_1_0.3aaf4b0b69jN1P) of EMR Serverless StarRocks instances. Before you call this operation, take note of the following items:
  * *   You can expand the disk size only for StarRocks instances of Standard Edition.
  * *   You can expand the disk size only for warehouses of the standard specifications.
  * *   The instance must be in the Running state.
  * After you expand the disk size, the billing of disks has the following changes:
  * *   Pay-as-you-go StarRocks instances: You are charged for the disk based on the new disk size.
  * *   Subscription StarRocks instances: You are charged additionally based on the price difference between the disk size before and after the change and the remaining days of the billing cycle. The billing cycle starts from 00:00 the next day until the end of the subscription period.
  * @param request  the request parameters of ModifyDiskSize  ModifyDiskSizeRequest
  * @return ModifyDiskSizeResponse
 */
async function modifyDiskSize(request: ModifyDiskSizeRequest): ModifyDiskSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskSize', 'POST', '/webapi/resourceChange/modifyDiskSize', 'json', false, 'json', request);
}

model ModifyNodeNumberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  promotionOptionNo?: string(name='PromotionOptionNo', position='Query'),
  target: int32(name='Target', description='The number of nodes to which you want to change to.

This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyNodeNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', description='The order ID.', example='24151320976****'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyNodeNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you understand the billing methods and [billable items](https://www.alibabacloud.com/help/en/emr/emr-serverless-starrocks/product-overview/billable-items?spm=a2c63.p38356.help-menu-28066.d_0_1_0.3aaf4b0b69jN1P) of EMR Serverless StarRocks instances. Before you call this operation, take note of the following items:
  * *   You can modify the number of nodes in a warehouse of only StarRocks instances of Standard Edition.
  * *   The instance must be in the Running state.
  * *   The number of frontend nodes (FEs) cannot be an even number, and you cannot reduce the number of FE nodes.
  * After you modify the number of nodes in a warehouse, the billing of nodes has the following changes:
  * *   Pay-as-you-go StarRocks instances: You are charged based on the number of nodes.
  * *   Subscription StarRocks instances: You are charged additionally based on the price difference between the number of nodes before and after the change and the remaining days of the billing cycle. The billing cycle starts from 00:00 the next day until the end of the subscription period.
  * @param request  the request parameters of ModifyNodeNumber  ModifyNodeNumberRequest
  * @return ModifyNodeNumberResponse
 */
async function modifyNodeNumber(request: ModifyNodeNumberRequest): ModifyNodeNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeNumber', 'POST', '/webapi/resourceChange/modifyNodeNumber', 'json', false, 'json', request);
}

model ModifyNodeNumberPreCheckRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='The warehouse ID.

This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='The number of nodes to which you want to change to.

This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyNodeNumberPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', description='Indicates whether the number of nodes can be modified.', example='true'),
    reason?: string(name='Reason', description='The reason why the number of nodes cannot be modified.', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data', description='The returned data.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ModifyNodeNumberPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodeNumberPreCheck  ModifyNodeNumberPreCheckRequest
  * @return ModifyNodeNumberPreCheckResponse
 */
async function modifyNodeNumberPreCheck(request: ModifyNodeNumberPreCheckRequest): ModifyNodeNumberPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeNumberPreCheck', 'POST', '/webapi/resourceChange/modifyNodeNumberPreCheck', 'json', false, 'json', request);
}

model QueryUpgradableVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  minor?: boolean(name='Minor', description='Specifies whether to query the minor versions that you can upgrade to. Default value: true. Valid values:

*   true: The minor versions that you can upgrade to.
*   false: The major versions that you can upgrade to.', example='true', position='Query'),
}

model QueryUpgradableVersionsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: [ string ](name='Data', description='The versions that you can upgrade to.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model QueryUpgradableVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUpgradableVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUpgradableVersions  QueryUpgradableVersionsRequest
  * @return QueryUpgradableVersionsResponse
 */
async function queryUpgradableVersions(request: QueryUpgradableVersionsRequest): QueryUpgradableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryUpgradableVersions', 'POST', '/webapi/starrocks/queryUpgradableVersions', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model ReleaseInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', description='The returned data.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
  * @description **
  * **Warning:** After an instance is released, all physical resources used by the instance are recycled. Relevant data is erased and cannot be restored.
  * @param request  the request parameters of ReleaseInstance  ReleaseInstanceRequest
  * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseInstance', 'POST', '/webapi/cluster/release', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  fastMode?: boolean(name='FastMode', description='Specifies whether to restart compute nodes in quick restart mode. Default value: false. Valid values:

*   true: Compute nodes are restarted in quick restart mode in multiple batches. The batches are executed in parallel, and the nodes in each batch are restarted at the same time.
*   false: Compute nodes are restarted in rolling restart mode.', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model RestartInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', description='The returned data.', example='true'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Unsupported.Non.Whitelist.Operation'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
  * @description This operation is an asynchronous operation. After you call this operation to restart a StarRocks instance, the operation sets the status of the instance to Restarting and begins the restart process. When the status of the instance changes to Running, the instance is restarted.
  * @param request  the request parameters of RestartInstance  RestartInstanceRequest
  * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartInstance', 'POST', '/webapi/starrocks/restartCluster', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Body'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', position='Body'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='instance', position='Body'),
  tag: [ 
    {
      key?: string(name='Key', example='k1'),
      value?: string(name='Value', example='v1'),
    }
  ](name='Tag', description='This parameter is required.', position='Body'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE74XXX'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TagResources', 'POST', '/webapi/tags', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', example='true', position='Query'),
  regionId: string(name='RegionId', description='This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='This parameter is required.', shrink='json', position='Query'),
  resourceType: string(name='ResourceType', description='This parameter is required.', example='instance', position='Query'),
  tagKey?: [ string ](name='TagKey', shrink='json', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE74XXX'),
}

model UnTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UnTagResources  UnTagResourcesRequest
  * @return UnTagResourcesResponse
 */
async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UnTagResources', 'DELETE', '/webapi/tags', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterName: string(name='ClusterName', description='The new name of the instance.

This parameter is required.', example='new_name', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model UpdateInstanceNameResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', description='The returned data.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceName  UpdateInstanceNameRequest
  * @return UpdateInstanceNameResponse
 */
async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceName', 'POST', '/webapi/cluster/update_name', 'json', false, 'json', request);
}

model UpgradeVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  fastMode?: boolean(name='FastMode', position='Query'),
  instanceId: string(name='InstanceId', description='The instance ID.

This parameter is required.', example='c-b25e21e24388****', position='Query'),
  minor?: boolean(name='Minor', description='Specifies whether the minor version is upgraded. Default value: true. Valid values:

*   true: The minor version is upgraded.
*   false: The major version is upgraded.', example='true', position='Query'),
  targetVersion: string(name='TargetVersion', description='The version to which you want to upgrade.

This parameter is required.', example='3.3.2-1.77-1.6.4', position='Query'),
}

model UpgradeVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The detailed information about the failed permission verification.', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data', description='The returned data.'),
  errCode?: string(name='ErrCode', description='The error code.', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', description='The error message.', example='Invalid instance status: [cannot upgrade when instance is not running].'),
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model UpgradeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeVersionResponseBody(name='body'),
}

/**
  * @description The instance must be in the Running state when you call this operation.
  * @param request  the request parameters of UpgradeVersion  UpgradeVersionRequest
  * @return UpgradeVersionResponse
 */
async function upgradeVersion(request: UpgradeVersionRequest): UpgradeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeVersion', 'POST', '/webapi/starrocks/upgradeVersion', 'json', false, 'json', request);
}

