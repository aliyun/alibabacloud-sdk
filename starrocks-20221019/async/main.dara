/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'starrocks';
  @version = '2022-10-19';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model InstanceConfigDto {
  configKey?: string(name='configKey', example='storage_root_path'),
  configType?: string(name='configType', example='BE'),
  configValue?: string(name='configValue', example='value1'),
  nodeGroupId?: string(name='nodeGroupId', example='ng-e24924dxxxxx'),
}

model ResourceSpec {
  cu?: int32(name='cu'),
  diskNumber?: int32(name='diskNumber'),
  localStorageInstanceType?: string(name='localStorageInstanceType'),
  nodeNumber?: int32(name='nodeNumber'),
  specType?: string(name='specType'),
  storagePerformanceLevel?: string(name='storagePerformanceLevel'),
  storageSize?: int32(name='storageSize'),
}

model ModifyCuRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='4', minimum=4, maximum=64, position='Query'),
}

model ModifyCuResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyCuResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCu  ModifyCuRequest
  * @return ModifyCuResponse
 */
async function modifyCu(request: ModifyCuRequest): ModifyCuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCu', 'POST', '/webapi/resourceChange/modifyCu', 'json', false, 'json', request);
}

model ModifyCuPreCheckRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-d332aa8bca48****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='2', minimum=0, maximum=100, position='Query'),
}

model ModifyCuPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', example='false'),
    reason?: string(name='Reason', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyCuPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCuPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCuPreCheck  ModifyCuPreCheckRequest
  * @return ModifyCuPreCheckResponse
 */
async function modifyCuPreCheck(request: ModifyCuPreCheckRequest): ModifyCuPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyCuPreCheck', 'POST', '/webapi/resourceChange/modifyCuPreCheck', 'json', false, 'json', request);
}

model ModifyDiskNumberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyDiskNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDiskNumber  ModifyDiskNumberRequest
  * @return ModifyDiskNumberResponse
 */
async function modifyDiskNumber(request: ModifyDiskNumberRequest): ModifyDiskNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskNumber', 'POST', '/webapi/resourceChange/modifyDiskNumber', 'json', false, 'json', request);
}

model ModifyDiskPerformanceLevelRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: string(name='Target', description='This parameter is required.', example='pl2', position='Query'),
}

model ModifyDiskPerformanceLevelResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskPerformanceLevelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskPerformanceLevelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDiskPerformanceLevel  ModifyDiskPerformanceLevelRequest
  * @return ModifyDiskPerformanceLevelResponse
 */
async function modifyDiskPerformanceLevel(request: ModifyDiskPerformanceLevelRequest): ModifyDiskPerformanceLevelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskPerformanceLevel', 'POST', '/webapi/resourceChange/modifyDiskPerformanceLevel', 'json', false, 'json', request);
}

model ModifyDiskSizeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='500', minimum=0, maximum=65000, position='Query'),
}

model ModifyDiskSizeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyDiskSizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDiskSizeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyDiskSize  ModifyDiskSizeRequest
  * @return ModifyDiskSizeResponse
 */
async function modifyDiskSize(request: ModifyDiskSizeRequest): ModifyDiskSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiskSize', 'POST', '/webapi/resourceChange/modifyDiskSize', 'json', false, 'json', request);
}

model ModifyNodeNumberRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyNodeNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: long(name='Data', example='24151320976****'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyNodeNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodeNumber  ModifyNodeNumberRequest
  * @return ModifyNodeNumberResponse
 */
async function modifyNodeNumber(request: ModifyNodeNumberRequest): ModifyNodeNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeNumber', 'POST', '/webapi/resourceChange/modifyNodeNumber', 'json', false, 'json', request);
}

model ModifyNodeNumberPreCheckRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  nodeGroupId: string(name='NodeGroupId', description='This parameter is required.', example='ng-3d5ce6454354****', position='Query'),
  target: int32(name='Target', description='This parameter is required.', example='3', minimum=0, maximum=100, position='Query'),
}

model ModifyNodeNumberPreCheckResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: {
    allow?: boolean(name='Allow', example='true'),
    reason?: string(name='Reason', example='Failed to find node group[ng-3d5ce6454354****].'),
  }(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ModifyNodeNumberPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNodeNumberPreCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyNodeNumberPreCheck  ModifyNodeNumberPreCheckRequest
  * @return ModifyNodeNumberPreCheckResponse
 */
async function modifyNodeNumberPreCheck(request: ModifyNodeNumberPreCheckRequest): ModifyNodeNumberPreCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyNodeNumberPreCheck', 'POST', '/webapi/resourceChange/modifyNodeNumberPreCheck', 'json', false, 'json', request);
}

model QueryUpgradableVersionsRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  minor?: boolean(name='Minor', example='true', position='Query'),
}

model QueryUpgradableVersionsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: [ string ](name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model QueryUpgradableVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUpgradableVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUpgradableVersions  QueryUpgradableVersionsRequest
  * @return QueryUpgradableVersionsResponse
 */
async function queryUpgradableVersions(request: QueryUpgradableVersionsRequest): QueryUpgradableVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryUpgradableVersions', 'POST', '/webapi/starrocks/queryUpgradableVersions', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model ReleaseInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model ReleaseInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReleaseInstance  ReleaseInstanceRequest
  * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ReleaseInstance', 'POST', '/webapi/cluster/release', 'json', false, 'json', request);
}

model RestartInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  fastMode?: boolean(name='FastMode', example='true', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model RestartInstanceResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Unsupported.Non.Whitelist.Operation'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model RestartInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RestartInstanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RestartInstance  RestartInstanceRequest
  * @return RestartInstanceResponse
 */
async function restartInstance(request: RestartInstanceRequest): RestartInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartInstance', 'POST', '/webapi/starrocks/restartCluster', 'json', false, 'json', request);
}

model UpdateInstanceNameRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterName: string(name='ClusterName', description='This parameter is required.', example='new_name', position='Query'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
}

model UpdateInstanceNameResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid params: [instance not exists].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model UpdateInstanceNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstanceNameResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstanceName  UpdateInstanceNameRequest
  * @return UpdateInstanceNameResponse
 */
async function updateInstanceName(request: UpdateInstanceNameRequest): UpdateInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateInstanceName', 'POST', '/webapi/cluster/update_name', 'json', false, 'json', request);
}

model UpgradeVersionRequest {
  regionId?: string(name='RegionId', position='Host'),
  instanceId: string(name='InstanceId', description='This parameter is required.', example='c-b25e21e24388****', position='Query'),
  minor?: boolean(name='Minor', example='true', position='Query'),
  targetVersion: string(name='TargetVersion', description='This parameter is required.', example='3.3.2-1.77-1.6.4', position='Query'),
}

model UpgradeVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', example='{     "PolicyType": "AccountLevelIdentityBasedPolicy",     "AuthPrincipalOwnerId": "xxx",     "EncodedDiagnosticMessage": "xxx",     "AuthPrincipalType": "xxx",     "AuthPrincipalDisplayName": "xxx",     "NoPermissionType": "ImplicitDeny",     "AuthAction": "sr:xxx"   }'),
  data?: boolean(name='Data'),
  errCode?: string(name='ErrCode', example='InvalidParams'),
  errMessage?: string(name='ErrMessage', example='Invalid instance status: [cannot upgrade when instance is not running].'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  requestId?: string(name='RequestId', example='32A44F0D-BFF6-5664-999A-218BBDE7****'),
  success?: boolean(name='Success', example='false'),
}

model UpgradeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpgradeVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpgradeVersion  UpgradeVersionRequest
  * @return UpgradeVersionResponse
 */
async function upgradeVersion(request: UpgradeVersionRequest): UpgradeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeVersion', 'POST', '/webapi/starrocks/upgradeVersion', 'json', false, 'json', request);
}

