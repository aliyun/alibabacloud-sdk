/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'serverless';
  @version = '2021-09-24';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Application {
  autoDeploy?: string(name='autoDeploy', description='是否立即进行部署'),
  createdTime?: string(name='createdTime', description='应用创建时间'),
  description?: string(name='description', description='应用描述'),
  envVars?: map[string]any(name='envVars', description='环境变量'),
  lastRelease?: map[string]any(name='lastRelease', description='应用最新部署详情'),
  name: string(name='name', description='应用名称，同账号下唯一，创建后不允许变更'),
  output?: map[string]any(name='output', description='应用资源详情'),
  parameters?: map[string]any(name='parameters', description='应用初始化参数，schema由应用模板所定义'),
  repoSource?: {
    owner: string(name='owner', description='代码库owner'),
    provider: string(name='provider', description='代码源VCS'),
    repo: string(name='repo', description='代码库名称'),
  }(name='repoSource', description='指定代码仓库为代码源'),
  roleArn?: string(name='roleArn', description='指定role进行角色扮演'),
  template?: string(name='template', description='关联的模板，用于Web应用、模板应用的创建'),
  trigger?: {
    branch?: string(name='branch', description='代码分支，不指定则使用default分支'),
    commit?: string(name='commit', description='commit id'),
    on: string(name='on', description='触发条件'),
  }(name='trigger', description='触发配置，不指定表示手动触发'),
  updatedTime?: string(name='updatedTime', description='应用更新时间'),
  workDir?: string(name='workDir', description='s.yaml所在目录，不指定则默认使用当前目录'),
}

model Condition {
  expression?: string(name='expression', description='an expression with a boolean return type'),
}

model Context {
  data?: map[string]any(name='data', description='data is a valid JSON string.'),
}

model ContextSchema {
  description?: string(name='description', description='Field description.'),
  hint?: string(name='hint', description='Field example.'),
  name?: string(name='name', description='Field name.'),
  required?: boolean(name='required', description='Field is required or not.'),
  type?: string(name='type', description='Field type.'),
}

model Environment {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.', minLength=1, maxLength=40),
  spec: EnvironmentSpec(name='spec', description='Specification of the desired behavior of the Environment.'),
  status?: EnvironmentStatus(name='status', description='Most recently observed status of the Environment. This data may not be up-to-date. Populated by the system. Read-only.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model EnvironmentRevision {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  environmentGeneration?: int32(name='environmentGeneration', description='The generation of the environment.'),
  environmentName?: string(name='environmentName', description='The name of an environment.'),
  kind?: string(name='kind', description='The kind of the resource.'),
  spec?: EnvironmentSpec(name='spec', description='Specification of the desired behavior of the Environment.'),
  status?: EnvironmentStatus(name='status', description='Most recently observed status of the Environment. This data may not be up-to-date. Populated by the system. Read-only.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account.'),
}

model EnvironmentSpec {
  region: string(name='region', description='A region ID at Aliyun. For example, "cn-hangzhou"'),
  roleArn?: string(name='roleArn', description='The ARN (Aliyun Resource Name) of the role designated by a user to allow the system to manage his Aliyun resources. If null, use roleArn of role AliyunFCDefaultRole.'),
  template: string(name='template', description='The name of the template for the Environment'),
  templateVariables: map[string]any(name='templateVariables', description='Variables for specified template'),
  templateVersion?: int32(name='templateVersion', description='The major version of the template. "1" by default.'),
}

model EnvironmentStatus {
  message?: string(name='message', description='A human-readable message indicating details about why the Environment is in this condition'),
  observedGeneration?: int32(name='observedGeneration', description='The most recent generation observed'),
  observedTime?: string(name='observedTime', description='Time when the last update of the status is observed'),
  output?: map[string]any(name='output', description='Details of current state of the Environment'),
  phase?: string(name='phase', description='A simple, high-level summary of where the Environment is in its lifecycle'),
}

model InputVariable {
  defaultJson?: string(name='defaultJson', description='A default value (as JSON string) which then makes the variable optional.'),
  description?: string(name='description', description='This specifies the input variable"s documentation.'),
  name: string(name='name', description='The identifier of an input variable. Identifiers can contain letters, digits, underscores (_), and hyphens (-). The first character of an identifier must not be a digit, to avoid ambiguity with literal numbers.'),
  nullable?: boolean(name='nullable', description='Specify if the variable can be null. True by default.'),
  sensitive?: boolean(name='sensitive', description='Specify if the variable contains sensitive material. False by default.'),
  type?: string(name='type', description='This argument specifies what value types are accepted for the variable.'),
}

model OutputValue {
  description?: string(name='description', description='The description should concisely explain the purpose of the output and what kind of value is expected.'),
  name: string(name='name', description='The identifier of an output value. Identifiers can contain letters, digits, underscores (_), and hyphens (-). The first character of an identifier must not be a digit, to avoid ambiguity with literal numbers.'),
  sensitive?: boolean(name='sensitive', description='Specify if the output value contains sensitive material. False by default.'),
}

model Pipeline {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  labels?: map[string]string(name='labels', description='Labels on the object for label-selections.'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  spec?: PipelineSpec(name='spec'),
  status?: PipelineStatus(name='status'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model PipelineSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', description='An exist valid pipeline template name.'),
}

model PipelineStatus {
  phase?: string(name='phase', description='current pipeline execution phase.'),
}

model PipelineTemplate {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  labels?: map[string]string(name='labels', description='Labels on the object for label-selections.'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  spec?: PipelineTemplateSpec(name='spec'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model PipelineTemplateSpec {
  context?: Context(name='context'),
  contextSchema?: map[string]any(name='contextSchema', description='JSON schemas for context input.'),
  tasks?: [
    TaskExec
  ](name='tasks', description='Task execution list'),
}

model Release {
  appConfig?: map[string]any(name='appConfig', description='本次发布的应用快照，只读'),
  codeVersion?: {
    branch?: string(name='branch', description='代码分支，不指定则使用default分支'),
    commit?: string(name='commit', description='commit id'),
  }(name='codeVersion', description='代码版本，不指定则使用最新的commit'),
  createdTime?: string(name='createdTime', description='创建时间，只读'),
  description?: string(name='description', description='本地发布描述'),
  output?: map[string]any(name='output', description='本次发布的输出，只读'),
  status?: string(name='status', description='本地发布状态：published: 发布完成 publishing：发布中 failed：发布失败 canceled：已撤销'),
  versionId?: long(name='versionId', description='本次发布版本号，由系统生成，只读'),
}

model RepoSource {
  owner?: string(name='owner', description='代码源账号'),
  provider?: string(name='provider', description='代码源VCS'),
  repo?: string(name='repo', description='代码库名字'),
}

model RunAfter {
  name?: string(name='name', description='Task name'),
}

model Service {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.'),
  spec: ServiceSpec(name='spec', description='Specification of the desired behavior of the Service.'),
  status?: ServiceStatus(name='status', description='Most recently observed status of the Service. This data may not be up-to-date. Populated by the system. Read-only.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model ServiceRevision {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource.'),
  serviceGeneration?: int32(name='serviceGeneration', description='The generation of the service.'),
  serviceName?: string(name='serviceName', description='The name of a service.'),
  spec: ServiceSpec(name='spec', description='Specification of the desired behavior of the Service.'),
  status?: EnvironmentStatus(name='status', description='Most recently observed status of the Environment. This data may not be up-to-date. Populated by the system. Read-only.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account.'),
}

model ServiceSpec {
  environment: string(name='environment', description='The name of the associated Environment for the Service'),
  roleArn?: string(name='roleArn', description='The ARN (Aliyun Resource Name) of the role designated by a user to allow the system to manage his Aliyun resources. If null, use roleArn of role AliyunFCDefaultRole.'),
  template: string(name='template', description='The name of the template for the Service'),
  templateVariables: map[string]any(name='templateVariables', description='Variables for specified template'),
  templateVersion?: int32(name='templateVersion', description='The major version of the template. "1" by default.'),
}

model ServiceStatus {
  message?: string(name='message', description='A human-readable message indicating details about why the Service is in this condition'),
  observedGeneration?: int32(name='observedGeneration', description='The most recent generation observed'),
  observedTime?: string(name='observedTime', description='Time when the last update of the status is observed'),
  output?: map[string]any(name='output', description='Details of current state of the Service'),
  phase?: string(name='phase', description='A simple, high-level summary of where the Service is in its lifecycle'),
}

model Status {
  code?: string(name='code', description='A machine-readable description of why this operation is in the failure status. If this value is empty there is no information available.'),
  message?: string(name='message', description='A human-readable description of the status of this operation.'),
  requestId?: string(name='requestId', description='ID of the request. May be null.'),
  success: boolean(name='success', description='Whether the operation is successful.'),
}

model StsCredentials {
  accessKeyId?: string(name='accessKeyId', description='Access key ID'),
  expirationTime?: string(name='expirationTime', description='Expiration time of the credentials'),
  kind?: string(name='kind', description='The kind of the credentials'),
  secretAccessKey?: string(name='secretAccessKey', description='Secret access key'),
  token?: string(name='token', description='Token'),
}

model Task {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  labels?: map[string]string(name='labels', description='Labels on the object for label-selections.'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  spec?: TaskSpec(name='spec'),
  status?: TaskStatus(name='status'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model TaskExec {
  context?: Context(name='context'),
  name?: string(name='name', description='task name'),
  runAfters?: [
    RunAfter
  ](name='runAfters', description='current task must run after all these tasks'),
  taskTemplate?: string(name='taskTemplate', description='task template name'),
}

model TaskSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', description='Task template name.'),
}

model TaskStatus {
  executionDetails?: [ string ](name='executionDetails', description='execution details.'),
  phase?: string(name='phase', description='current execution phase.'),
  statusGeneration?: long(name='statusGeneration', description='auto increased number.'),
}

model TaskTemplate {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  labels?: map[string]string(name='labels', description='Labels on the object for label-selections.'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  spec?: TaskTemplateSpec(name='spec'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
}

model TaskTemplateSpec {
  context?: Context(name='context'),
  contextSchema?: map[string]any(name='contextSchema', description='JSON schemas for context input.'),
  description?: string(name='description', description='task execution description.'),
  executeCondition?: Condition(name='executeCondition'),
  worker?: TaskWorker(name='worker'),
}

model TaskWorker {
  presetWorker?: string(name='presetWorker', description='System preset worker. It will execute hardcoded logic.'),
}

model Template {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  deletionTime?: string(name='deletionTime', description='Date and time at which a deletion is requested by the user. Null when the resource has not been requested for deletion. This field is set by the server, not directly settable by a client. Populated by the system. Read-only.'),
  description?: string(name='description', description='Human-readable description of the resource'),
  generation?: int32(name='generation', description='A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource'),
  name: string(name='name', description='Name must be unique within a namespace. Is required when creating resources. Cannot be updated.'),
  spec: TemplateSpec(name='spec', description='Specification of the desired behavior of the Template.'),
  status?: TemplateStatus(name='status', description='Most recently observed status of the Template. This data may not be up-to-date. Populated by the system. Read-only.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account'),
  version?: int32(name='version', description='The major version of the template. "1" by default. You should ONLY increment the major version when the template are not backwards compatible with the previous major version.'),
}

model TemplateRevision {
  createdTime?: string(name='createdTime', description='A time representing the server time when this object was created. Clients may not set this value. Populated by the system. Read-only.'),
  kind?: string(name='kind', description='The kind of the resource.'),
  spec: TemplateSpec(name='spec', description='Specification of the desired behavior of the Template.'),
  status?: TemplateStatus(name='status', description='Most recently observed status of the Template. This data may not be up-to-date. Populated by the system. Read-only.'),
  templateGeneration?: int32(name='templateGeneration', description='The generation of the template.'),
  templateName?: string(name='templateName', description='The name of a template.'),
  templateVersion?: int32(name='templateVersion', description='The version of a template.'),
  uid?: string(name='uid', description='Main user ID of an Aliyun account.'),
}

model TemplateSpec {
  content: string(name='content', description='The raw content of the template.'),
  contentType: string(name='contentType', description='The media type of the template content. At the moment, only "application/hcl+terraform" is supported.'),
  ramPolicy?: string(name='ramPolicy', description='The content of RAM policy  required for this template.'),
  type: string(name='type', description='The type of the applicable resource for this template. Must be either "Environment" or "Service".'),
}

model TemplateStatus {
  message?: string(name='message', description='A human-readable message indicating details about why the Template is in this condition.'),
  observedGeneration: int32(name='observedGeneration', description='The most recent generation observed.'),
  observedTime?: string(name='observedTime', description='Time when the last update of the status is observed.'),
  outputs: [
    OutputValue
  ](name='outputs', description='The definition of output values of the template parsed from the template content.'),
  phase?: string(name='phase', description='A simple, high-level summary of where the Template is in its lifecycle.'),
  variables: [
    InputVariable
  ](name='variables', description='The definition of input variables of the template parsed from the template content.'),
}

model TriggerConfig {
  branch?: string(name='branch', description='触发分支'),
  commit?: string(name='commit', description='触发commit'),
  on?: string(name='on', description='触发条件'),
}

model CancelTaskRequest {
  name?: string(name='name', position='Path'),
}

model CancelTaskResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'PUT', '/apis/serverlessdeployment/v1/tasks/{name}/cancel', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  autoDeploy?: boolean(name='autoDeploy', position='Body'),
  description?: string(name='description', position='Body'),
  envVars?: map[string]string(name='envVars', position='Body'),
  name?: string(name='name', position='Body'),
  parameters?: map[string]string(name='parameters', position='Body'),
  repoSource?: RepoSource(name='repoSource', position='Body'),
  roleArn?: string(name='roleArn', position='Body'),
  template?: string(name='template', position='Body'),
  trigger?: TriggerConfig(name='trigger', position='Body'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: Application  
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApplication', 'POST', '/apis/serverlessdeployment/v1/applications', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  body?: Pipeline(name='body', position='Body'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  body: Pipeline  
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/apis/serverlessdeployment/v1/pipelines', 'json', false, 'json', request);
}

model CreatePipelineTemplateRequest {
  body?: PipelineTemplate(name='body', position='Body'),
}

model CreatePipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: PipelineTemplate  
}

async function createPipelineTemplate(request: CreatePipelineTemplateRequest): CreatePipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineTemplate', 'POST', '/apis/serverlessdeployment/v1/pipelinetemplates', 'json', false, 'json', request);
}

model CreateReleaseRequest {
  appName?: string(name='appName', description='应用名称', position='Path'),
  description?: string(name='description', position='Query'),
}

model CreateReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: Release  
}

async function createRelease(request: CreateReleaseRequest): CreateReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRelease', 'POST', '/apis/serverlessdeployment/v1/applications/{appName}/releases', 'json', false, 'json', request);
}

model CreateTaskRequest {
  body?: Task(name='body', position='Body'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/apis/serverlessdeployment/v1/tasks', 'json', false, 'json', request);
}

model CreateTaskTemplateRequest {
  body?: TaskTemplate(name='body', position='Body'),
}

model CreateTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: TaskTemplate  
}

async function createTaskTemplate(request: CreateTaskTemplateRequest): CreateTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTaskTemplate', 'POST', '/apis/serverlessdeployment/v1/tasktemplates', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  name?: string(name='name', description='A short description of struct', position='Path'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: string(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApplication', 'DELETE', '/apis/serverlessdeployment/v1/applications/{name}', 'string', false, 'json', request);
}

model DeleteEnvironmentRequest {
  name?: string(name='name', description='A short description of struct', position='Path'),
}

model DeleteEnvironmentResponse = {
  headers: map[string]string(name='headers'),
}

async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironment', 'DELETE', '/apis/serverlessdeployment/v1/environments/{name}', 'none', false, 'json', request);
}

model DeletePipelineTemplateRequest {
  name?: string(name='name', description='需要删除的对象名称', position='Path'),
}

model DeletePipelineTemplateResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeletePipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePipelineTemplateResponseBody(name='body'),
}

async function deletePipelineTemplate(request: DeletePipelineTemplateRequest): DeletePipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineTemplate', 'DELETE', '/apis/serverlessdeployment/v1/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model DeleteTaskTemplateRequest {
  name?: string(name='name', description='需要删除的对象名称', position='Path'),
}

model DeleteTaskTemplateResponseBody = {
  requestId?: string(name='requestId', description='Id of the request'),
}

model DeleteTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTaskTemplateResponseBody(name='body'),
}

async function deleteTaskTemplate(request: DeleteTaskTemplateRequest): DeleteTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTaskTemplate', 'DELETE', '/apis/serverlessdeployment/v1/tasktemplates/{name}', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  name: string(name='name', description='The name of the template.', position='Path'),
  version?: int32(name='version', description='The major version of the template. "1" by default.', position='Query'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: Status  
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTemplate', 'DELETE', '/apis/serverlessdeployment/v1/templates/{name}', 'json', false, 'json', request);
}

model GetApplicationRequest {
  name: string(name='name', description='应用名称', position='Path'),
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: Application  
}

async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetApplication', 'GET', '/apis/serverlessdeployment/v1/applications/{name}', 'json', false, 'json', request);
}

model GetEnvironmentRequest {
  name: string(name='name', description='The name of the environment', minLength=1, maxLength=40, position='Path'),
}

model GetEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: Environment  
}

async function getEnvironment(request: GetEnvironmentRequest): GetEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironment', 'GET', '/apis/serverlessdeployment/v1/environments/{name}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  name?: string(name='name', description='查询对象名称', position='Path'),
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: Pipeline  
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/apis/serverlessdeployment/v1/pipelines/{name}', 'json', false, 'json', request);
}

model GetPipelineTemplateRequest {
  name?: string(name='name', description='查询对象名称', position='Path'),
}

model GetPipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: PipelineTemplate  
}

async function getPipelineTemplate(request: GetPipelineTemplateRequest): GetPipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineTemplate', 'GET', '/apis/serverlessdeployment/v1/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model GetReleaseRequest {
  appName?: string(name='appName', description='应用名称', position='Path'),
  versionId?: long(name='versionId', description='版本ID', position='Path'),
}

model GetReleaseResponse = {
  headers: map[string]string(name='headers'),
  body: Release  
}

async function getRelease(request: GetReleaseRequest): GetReleaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRelease', 'GET', '/apis/serverlessdeployment/v1/applications/{appName}/releases/{versionId}', 'json', false, 'json', request);
}

model GetServiceRequest {
  name: string(name='name', description='The name of the service', minLength=1, maxLength=40, position='Path'),
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  body: Service  
}

async function getService(request: GetServiceRequest): GetServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetService', 'GET', '/apis/serverlessdeployment/v1/services/{name}', 'json', false, 'json', request);
}

model GetTaskRequest {
  name?: string(name='name', description='查询对象名称', position='Path'),
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/apis/serverlessdeployment/v1/tasks/{name}', 'json', false, 'json', request);
}

model GetTaskTemplateRequest {
  name?: string(name='name', description='查询对象名称', position='Path'),
}

model GetTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: TaskTemplate  
}

async function getTaskTemplate(request: GetTaskTemplateRequest): GetTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskTemplate', 'GET', '/apis/serverlessdeployment/v1/tasktemplates/{name}', 'json', false, 'json', request);
}

model GetTemplateRequest {
  name: string(name='name', description='The name of the template', minLength=1, maxLength=40, position='Path'),
  version?: int32(name='version', description='The major version of the template. "1" by default.', position='Query'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: Template  
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTemplate', 'GET', '/apis/serverlessdeployment/v1/templates/{name}', 'json', false, 'json', request);
}

model ListEnvironmentRevisionsRequest {
  environmentName: string(name='environmentName', description='The name of an environment.', position='Query'),
}

model ListEnvironmentRevisionsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    EnvironmentRevision
  ](name='body'),
}

async function listEnvironmentRevisions(request: ListEnvironmentRevisionsRequest): ListEnvironmentRevisionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironmentRevisions', 'GET', '/apis/serverlessdeployment/v1/environmentrevisions/', 'array', false, 'json', request);
}

model ListEnvironmentsRequest {
}

model ListEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Environment
  ](name='body'),
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironments', 'GET', '/apis/serverlessdeployment/v1/environments/', 'array', false, 'json', request);
}

model ListPipelineTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector', description='只返回含有这些label的对象', shrink='simple', position='Query'),
}

model ListPipelineTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: [
    PipelineTemplate
  ](name='body'),
}

async function listPipelineTemplates(request: ListPipelineTemplatesRequest): ListPipelineTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineTemplates', 'GET', '/apis/serverlessdeployment/v1/pipelinetemplates', 'array', false, 'json', request);
}

model ListPipelinesRequest {
  labelSelector?: [ string ](name='labelSelector', description='只返回含有这些label的对象', shrink='simple', position='Query'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Pipeline
  ](name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/apis/serverlessdeployment/v1/pipelines', 'array', false, 'json', request);
}

model ListServiceRevisionsRequest {
  serviceName: string(name='serviceName', description='The name of a service.', position='Query'),
}

model ListServiceRevisionsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    ServiceRevision
  ](name='body'),
}

async function listServiceRevisions(request: ListServiceRevisionsRequest): ListServiceRevisionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceRevisions', 'GET', '/apis/serverlessdeployment/v1/servicerevisions/', 'array', false, 'json', request);
}

model ListServicesRequest {
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Service
  ](name='body'),
}

async function listServices(request: ListServicesRequest): ListServicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServices', 'GET', '/apis/serverlessdeployment/v1/services/', 'array', false, 'json', request);
}

model ListTaskTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector', description='只返回含有这些label的对象', shrink='simple', position='Query'),
}

model ListTaskTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: [
    TaskTemplate
  ](name='body'),
}

async function listTaskTemplates(request: ListTaskTemplatesRequest): ListTaskTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaskTemplates', 'GET', '/apis/serverlessdeployment/v1/tasktemplates', 'array', false, 'json', request);
}

model ListTasksRequest {
  labelSelector?: [ string ](name='labelSelector', description='只返回含有这些label的对象', shrink='simple', position='Query'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Task
  ](name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/apis/serverlessdeployment/v1/tasks', 'array', false, 'json', request);
}

model ListTemplateRevisionsRequest {
  templateName: string(name='templateName', description='The name of a template.', position='Query'),
  templateVersion?: int32(name='templateVersion', description='The major version of the template. "1" by default.', position='Query'),
}

model ListTemplateRevisionsResponse = {
  headers: map[string]string(name='headers'),
  body: [
    TemplateRevision
  ](name='body'),
}

async function listTemplateRevisions(request: ListTemplateRevisionsRequest): ListTemplateRevisionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTemplateRevisions', 'GET', '/apis/serverlessdeployment/v1/templaterevisions/', 'array', false, 'json', request);
}

model ListTemplatesRequest {
  type: string(name='type', description='The type of the applicable resource for this template. Must be either "Environment" or "Service".', position='Query'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: [
    Template
  ](name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTemplates', 'GET', '/apis/serverlessdeployment/v1/templates/', 'array', false, 'json', request);
}

model PutEnvironmentRequest {
  name: string(name='name', description='The name of the environment', position='Path'),
  body: Environment(name='body', description='An environment for serverless deployments', position='Body'),
}

model PutEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  body: Environment  
}

async function putEnvironment(request: PutEnvironmentRequest): PutEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutEnvironment', 'PUT', '/apis/serverlessdeployment/v1/environments/{name}', 'json', false, 'json', request);
}

model PutPipelineStatusRequest {
  name?: string(name='name', position='Path'),
  body?: Pipeline(name='body', position='Body'),
  force?: boolean(name='force', description='强制更新', position='Query'),
}

model PutPipelineStatusResponse = {
  headers: map[string]string(name='headers'),
  body: Pipeline  
}

async function putPipelineStatus(request: PutPipelineStatusRequest): PutPipelineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineStatus', 'PUT', '/apis/serverlessdeployment/v1/pipelines/{name}/status', 'json', false, 'json', request);
}

model PutPipelineTemplateRequest {
  name?: string(name='name', description='修改对象名称', position='Path'),
  body?: PipelineTemplate(name='body', position='Body'),
  force?: boolean(name='force', description='强制更新', position='Query'),
}

model PutPipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: PipelineTemplate  
}

async function putPipelineTemplate(request: PutPipelineTemplateRequest): PutPipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineTemplate', 'PUT', '/apis/serverlessdeployment/v1/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model PutServiceRequest {
  name: string(name='name', description='The name of the service', position='Path'),
  body: Service(name='body', description='A service for serverless deployments', position='Body'),
}

model PutServiceResponse = {
  headers: map[string]string(name='headers'),
  body: Service  
}

async function putService(request: PutServiceRequest): PutServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutService', 'PUT', '/apis/serverlessdeployment/v1/services/{name}', 'json', false, 'json', request);
}

model PutTaskStatusRequest {
  name?: string(name='name', position='Path'),
  body?: Task(name='body', position='Body'),
  force?: boolean(name='force', description='强制更新', position='Query'),
}

model PutTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function putTaskStatus(request: PutTaskStatusRequest): PutTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTaskStatus', 'PUT', '/apis/serverlessdeployment/v1/tasks/{name}/status', 'json', false, 'json', request);
}

model PutTaskTemplateRequest {
  name?: string(name='name', position='Path'),
  body?: TaskTemplate(name='body', position='Body'),
  force?: boolean(name='force', description='强制更新', position='Query'),
}

model PutTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: TaskTemplate  
}

async function putTaskTemplate(request: PutTaskTemplateRequest): PutTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTaskTemplate', 'PUT', '/apis/serverlessdeployment/v1/tasktemplates/{name}', 'json', false, 'json', request);
}

model PutTemplateRequest {
  name: string(name='name', description='The name of the template', position='Path'),
  body: Template(name='body', description='A custom template', position='Body'),
  version?: int32(name='version', description='The major version of the template. "1" by default.', position='Query'),
}

model PutTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: Template  
}

async function putTemplate(request: PutTemplateRequest): PutTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTemplate', 'PUT', '/apis/serverlessdeployment/v1/templates/{name}', 'json', false, 'json', request);
}

model ResumeTaskRequest {
  name?: string(name='name', position='Path'),
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function resumeTask(request: ResumeTaskRequest): ResumeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeTask', 'PUT', '/apis/serverlessdeployment/v1/tasks/{name}/resume', 'json', false, 'json', request);
}

model StartPipelineRequest {
  name?: string(name='name', position='Path'),
}

model StartPipelineResponse = {
  headers: map[string]string(name='headers'),
  body: Pipeline  
}

async function startPipeline(request: StartPipelineRequest): StartPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipeline', 'PUT', '/apis/serverlessdeployment/v1/pipelines/{name}/start', 'json', false, 'json', request);
}

model StartTaskRequest {
  name?: string(name='name', position='Path'),
}

model StartTaskResponse = {
  headers: map[string]string(name='headers'),
  body: Task  
}

async function startTask(request: StartTaskRequest): StartTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTask', 'PUT', '/apis/serverlessdeployment/v1/tasks/{name}/start', 'json', false, 'json', request);
}

model UpdateApplicationRequest {
  name: string(name='name', description='应用名称', position='Path'),
  body?: Application(name='body', position='Body'),
}

model UpdateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: Application  
}

async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateApplication', 'PUT', '/apis/serverlessdeployment/v1/applications/{name}', 'json', false, 'json', request);
}

