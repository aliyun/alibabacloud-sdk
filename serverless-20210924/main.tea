/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('serverless', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Application {
  autoDeploy?: string(name='autoDeploy'),
  createdTime?: string(name='createdTime'),
  description?: string(name='description'),
  envVars?: map[string]any(name='envVars'),
  lastRelease?: map[string]any(name='lastRelease'),
  name?: string(name='name'),
  output?: map[string]any(name='output'),
  parameters?: map[string]any(name='parameters'),
  repoSource?: {
    owner?: string(name='owner'),
    provider?: string(name='provider'),
    repo?: string(name='repo'),
  }(name='repoSource'),
  roleArn?: string(name='roleArn'),
  template?: string(name='template'),
  trigger?: {
    branch?: string(name='branch'),
    commit?: string(name='commit'),
    on?: string(name='on'),
  }(name='trigger'),
  updatedTime?: string(name='updatedTime'),
  workDir?: string(name='workDir'),
}

model Condition {
  expression?: string(name='expression'),
}

model Context {
  data?: map[string]any(name='data'),
}

model ContextSchema {
  description?: string(name='description'),
  hint?: string(name='hint'),
  name?: string(name='name'),
  required?: boolean(name='required'),
  type?: string(name='type'),
}

model Environment {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  name?: string(name='name'),
  spec?: EnvironmentSpec(name='spec'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid'),
}

model EnvironmentRevision {
  createdTime?: string(name='createdTime'),
  environmentGeneration?: int32(name='environmentGeneration'),
  environmentName?: string(name='environmentName'),
  kind?: string(name='kind'),
  spec?: EnvironmentSpec(name='spec'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid'),
}

model EnvironmentSpec {
  region?: string(name='region'),
  roleArn?: string(name='roleArn'),
  template?: string(name='template'),
  templateVariables?: map[string]any(name='templateVariables'),
  templateVersion?: int32(name='templateVersion'),
}

model EnvironmentStatus {
  message?: string(name='message'),
  observedGeneration?: int32(name='observedGeneration'),
  observedTime?: string(name='observedTime'),
  output?: map[string]any(name='output'),
  phase?: string(name='phase'),
}

model InputVariable {
  defaultJson?: string(name='defaultJson'),
  description?: string(name='description'),
  name?: string(name='name'),
  nullable?: boolean(name='nullable'),
  sensitive?: boolean(name='sensitive'),
  type?: string(name='type'),
}

model OutputValue {
  description?: string(name='description'),
  name?: string(name='name'),
  sensitive?: boolean(name='sensitive'),
}

model Pipeline {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name'),
  resourceVersion?: int32(name='resourceVersion'),
  spec?: PipelineSpec(name='spec'),
  status?: PipelineStatus(name='status'),
  uid?: string(name='uid'),
}

model PipelineSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName'),
}

model PipelineStatus {
  phase?: string(name='phase'),
}

model PipelineTemplate {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name'),
  resourceVersion?: int32(name='resourceVersion'),
  spec?: PipelineTemplateSpec(name='spec'),
  uid?: string(name='uid'),
}

model PipelineTemplateSpec {
  context?: Context(name='context'),
  contextSchema?: map[string]any(name='contextSchema'),
  tasks?: [
    TaskExec
  ](name='tasks'),
}

model Release {
  appConfig?: map[string]any(name='appConfig'),
  codeVersion?: {
    branch?: string(name='branch'),
    commit?: string(name='commit'),
  }(name='codeVersion'),
  createdTime?: string(name='createdTime'),
  description?: string(name='description'),
  output?: map[string]any(name='output'),
  status?: string(name='status'),
  versionId?: long(name='versionId'),
}

model RepoSource {
  owner?: string(name='owner'),
  provider?: string(name='provider'),
  repo?: string(name='repo'),
}

model RunAfter {
  name?: string(name='name'),
}

model Service {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  name?: string(name='name'),
  spec?: ServiceSpec(name='spec'),
  status?: ServiceStatus(name='status'),
  uid?: string(name='uid'),
}

model ServiceRevision {
  createdTime?: string(name='createdTime'),
  kind?: string(name='kind'),
  serviceGeneration?: int32(name='serviceGeneration'),
  serviceName?: string(name='serviceName'),
  spec?: ServiceSpec(name='spec'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid'),
}

model ServiceSpec {
  environment?: string(name='environment'),
  roleArn?: string(name='roleArn'),
  template?: string(name='template'),
  templateVariables?: map[string]any(name='templateVariables'),
  templateVersion?: int32(name='templateVersion'),
}

model ServiceStatus {
  message?: string(name='message'),
  observedGeneration?: int32(name='observedGeneration'),
  observedTime?: string(name='observedTime'),
  output?: map[string]any(name='output'),
  phase?: string(name='phase'),
}

model Status {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model StsCredentials {
  accessKeyId?: string(name='accessKeyId'),
  expirationTime?: string(name='expirationTime'),
  kind?: string(name='kind'),
  secretAccessKey?: string(name='secretAccessKey'),
  token?: string(name='token'),
}

model Task {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name'),
  resourceVersion?: int32(name='resourceVersion'),
  spec?: TaskSpec(name='spec'),
  status?: TaskStatus(name='status'),
  uid?: string(name='uid'),
}

model TaskExec {
  context?: Context(name='context'),
  name?: string(name='name'),
  runAfters?: [
    RunAfter
  ](name='runAfters'),
  taskTemplate?: string(name='taskTemplate'),
}

model TaskSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName'),
}

model TaskStatus {
  executionDetails?: [ string ](name='executionDetails'),
  phase?: string(name='phase'),
  statusGeneration?: long(name='statusGeneration'),
}

model TaskTemplate {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name'),
  resourceVersion?: int32(name='resourceVersion'),
  spec?: TaskTemplateSpec(name='spec'),
  uid?: string(name='uid'),
}

model TaskTemplateSpec {
  context?: Context(name='context'),
  contextSchema?: map[string]any(name='contextSchema'),
  description?: string(name='description'),
  executeCondition?: Condition(name='executeCondition'),
  worker?: TaskWorker(name='worker'),
}

model TaskWorker {
  presetWorker?: string(name='presetWorker'),
}

model Template {
  createdTime?: string(name='createdTime'),
  deletionTime?: string(name='deletionTime'),
  description?: string(name='description'),
  generation?: int32(name='generation'),
  kind?: string(name='kind'),
  name?: string(name='name'),
  spec?: TemplateSpec(name='spec'),
  status?: TemplateStatus(name='status'),
  uid?: string(name='uid'),
  version?: int32(name='version'),
}

model TemplateRevision {
  createdTime?: string(name='createdTime'),
  kind?: string(name='kind'),
  spec?: TemplateSpec(name='spec'),
  status?: TemplateStatus(name='status'),
  templateGeneration?: int32(name='templateGeneration'),
  templateName?: string(name='templateName'),
  templateVersion?: int32(name='templateVersion'),
  uid?: string(name='uid'),
}

model TemplateSpec {
  content?: string(name='content'),
  contentType?: string(name='contentType'),
  ramPolicy?: string(name='ramPolicy'),
  type?: string(name='type'),
}

model TemplateStatus {
  message?: string(name='message'),
  observedGeneration?: int32(name='observedGeneration'),
  observedTime?: string(name='observedTime'),
  outputs?: [
    OutputValue
  ](name='outputs'),
  phase?: string(name='phase'),
  variables?: [
    InputVariable
  ](name='variables'),
}

model TriggerConfig {
  branch?: string(name='branch'),
  commit?: string(name='commit'),
  on?: string(name='on'),
}

model CreateApplicationRequest {
  autoDeploy?: boolean(name='autoDeploy'),
  description?: string(name='description'),
  envVars?: map[string]string(name='envVars'),
  name?: string(name='name'),
  parameters?: map[string]string(name='parameters'),
  repoSource?: RepoSource(name='repoSource'),
  roleArn?: string(name='roleArn'),
  template?: string(name='template'),
  trigger?: TriggerConfig(name='trigger'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Application  
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createApplicationWithOptions(request, headers, runtime);
}

async function createApplicationWithOptions(request: CreateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.autoDeploy)) {
    body['autoDeploy'] = request.autoDeploy;
  }
  if (!Util.isUnset(request.description)) {
    body['description'] = request.description;
  }
  if (!Util.isUnset(request.envVars)) {
    body['envVars'] = request.envVars;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.parameters)) {
    body['parameters'] = request.parameters;
  }
  if (!Util.isUnset(request.repoSource)) {
    body['repoSource'] = request.repoSource;
  }
  if (!Util.isUnset(request.roleArn)) {
    body['roleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.template)) {
    body['template'] = request.template;
  }
  if (!Util.isUnset(request.trigger)) {
    body['trigger'] = request.trigger;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateApplication',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreatePipelineRequest {
  body?: Pipeline(name='body'),
}

model CreatePipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Pipeline  
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineWithOptions(request, headers, runtime);
}

async function createPipelineWithOptions(request: CreatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipeline',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreatePipelineTemplateRequest {
  body?: PipelineTemplate(name='body'),
}

model CreatePipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PipelineTemplate  
}

async function createPipelineTemplate(request: CreatePipelineTemplateRequest): CreatePipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineTemplateWithOptions(request, headers, runtime);
}

async function createPipelineTemplateWithOptions(request: CreatePipelineTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelinetemplates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateReleaseRequest {
  description?: string(name='description'),
}

model CreateReleaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Release  
}

async function createRelease(appName: string, request: CreateReleaseRequest): CreateReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createReleaseWithOptions(appName, request, headers, runtime);
}

async function createReleaseWithOptions(appName: string, request: CreateReleaseRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateReleaseResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.description)) {
    query['description'] = request.description;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRelease',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications/${OpenApiUtil.getEncodeParam(appName)}/releases`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTaskRequest {
  body?: Task(name='body'),
}

model CreateTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Task  
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTaskWithOptions(request, headers, runtime);
}

async function createTaskWithOptions(request: CreateTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTask',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateTaskTemplateRequest {
  body?: TaskTemplate(name='body'),
}

model CreateTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TaskTemplate  
}

async function createTaskTemplate(request: CreateTaskTemplateRequest): CreateTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTaskTemplateWithOptions(request, headers, runtime);
}

async function createTaskTemplateWithOptions(request: CreateTaskTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasktemplates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: string(name='body'),
}

async function deleteApplication(name: string): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteApplicationWithOptions(name, headers, runtime);
}

async function deleteApplicationWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteApplication',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'string',
  };
  return callApi(params, req, runtime);
}

model DeleteEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function deleteEnvironment(name: string): DeleteEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEnvironmentWithOptions(name, headers, runtime);
}

async function deleteEnvironmentWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvironment',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model DeletePipelineTemplateResponseBody = {
  requestId?: string(name='requestId'),
}

model DeletePipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePipelineTemplateResponseBody(name='body'),
}

async function deletePipelineTemplate(name: string): DeletePipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineTemplateWithOptions(name, headers, runtime);
}

async function deletePipelineTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipelineTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelinetemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTaskTemplateResponseBody = {
  requestId?: string(name='requestId'),
}

model DeleteTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTaskTemplateResponseBody(name='body'),
}

async function deleteTaskTemplate(name: string): DeleteTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTaskTemplateWithOptions(name, headers, runtime);
}

async function deleteTaskTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTaskTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTaskTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasktemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteTemplateRequest {
  version?: int32(name='version'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Status  
}

async function deleteTemplate(name: string, request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTemplateWithOptions(name, request, headers, runtime);
}

async function deleteTemplateWithOptions(name: string, request: DeleteTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.version)) {
    query['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/templates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Application  
}

async function getApplication(name: string): GetApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getApplicationWithOptions(name, headers, runtime);
}

async function getApplicationWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetApplicationResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetApplication',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Environment  
}

async function getEnvironment(name: string): GetEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEnvironmentWithOptions(name, headers, runtime);
}

async function getEnvironmentWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetEnvironment',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Pipeline  
}

async function getPipeline(name: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(name, headers, runtime);
}

async function getPipelineWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelines/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPipelineTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PipelineTemplate  
}

async function getPipelineTemplate(name: string): GetPipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineTemplateWithOptions(name, headers, runtime);
}

async function getPipelineTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelinetemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetReleaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Release  
}

async function getRelease(appName: string, versionId: string): GetReleaseResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getReleaseWithOptions(appName, versionId, headers, runtime);
}

async function getReleaseWithOptions(appName: string, versionId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetReleaseResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRelease',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications/${OpenApiUtil.getEncodeParam(appName)}/releases/${OpenApiUtil.getEncodeParam(versionId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Service  
}

async function getService(name: string): GetServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getServiceWithOptions(name, headers, runtime);
}

async function getServiceWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetServiceResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetService',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/services/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Task  
}

async function getTask(name: string): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(name, headers, runtime);
}

async function getTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasks/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTaskTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TaskTemplate  
}

async function getTaskTemplate(name: string): GetTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskTemplateWithOptions(name, headers, runtime);
}

async function getTaskTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTaskTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasktemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetTemplateRequest {
  version?: int32(name='version'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Template  
}

async function getTemplate(name: string, request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTemplateWithOptions(name, request, headers, runtime);
}

async function getTemplateWithOptions(name: string, request: GetTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.version)) {
    query['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/templates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListEnvironmentRevisionsRequest {
  environmentName?: string(name='environmentName'),
}

model ListEnvironmentRevisionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    EnvironmentRevision
  ](name='body'),
}

async function listEnvironmentRevisions(request: ListEnvironmentRevisionsRequest): ListEnvironmentRevisionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentRevisionsWithOptions(request, headers, runtime);
}

async function listEnvironmentRevisionsWithOptions(request: ListEnvironmentRevisionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentRevisionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.environmentName)) {
    query['environmentName'] = request.environmentName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironmentRevisions',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/environmentrevisions/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListEnvironmentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Environment
  ](name='body'),
}

async function listEnvironments(): ListEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentsWithOptions(headers, runtime);
}

async function listEnvironmentsWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentsResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironments',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/environments/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListPipelineTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListPipelineTemplatesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListPipelineTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    PipelineTemplate
  ](name='body'),
}

async function listPipelineTemplates(request: ListPipelineTemplatesRequest): ListPipelineTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineTemplatesWithOptions(request, headers, runtime);
}

async function listPipelineTemplatesWithOptions(tmpReq: ListPipelineTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineTemplatesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelineTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineTemplates',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelinetemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListPipelinesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListPipelinesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListPipelinesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Pipeline
  ](name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(request, headers, runtime);
}

async function listPipelinesWithOptions(tmpReq: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelinesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListServiceRevisionsRequest {
  serviceName?: string(name='serviceName'),
}

model ListServiceRevisionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    ServiceRevision
  ](name='body'),
}

async function listServiceRevisions(request: ListServiceRevisionsRequest): ListServiceRevisionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServiceRevisionsWithOptions(request, headers, runtime);
}

async function listServiceRevisionsWithOptions(request: ListServiceRevisionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListServiceRevisionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.serviceName)) {
    query['serviceName'] = request.serviceName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceRevisions',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/servicerevisions/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListServicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Service
  ](name='body'),
}

async function listServices(): ListServicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listServicesWithOptions(headers, runtime);
}

async function listServicesWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): ListServicesResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ListServices',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/services/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListTaskTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListTaskTemplatesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListTaskTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    TaskTemplate
  ](name='body'),
}

async function listTaskTemplates(request: ListTaskTemplatesRequest): ListTaskTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTaskTemplatesWithOptions(request, headers, runtime);
}

async function listTaskTemplatesWithOptions(tmpReq: ListTaskTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTaskTemplatesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTaskTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskTemplates',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasktemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListTasksRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListTasksShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Task
  ](name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTasksWithOptions(request, headers, runtime);
}

async function listTasksWithOptions(tmpReq: ListTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListTemplateRevisionsRequest {
  templateName?: string(name='templateName'),
  templateVersion?: int32(name='templateVersion'),
}

model ListTemplateRevisionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    TemplateRevision
  ](name='body'),
}

async function listTemplateRevisions(request: ListTemplateRevisionsRequest): ListTemplateRevisionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTemplateRevisionsWithOptions(request, headers, runtime);
}

async function listTemplateRevisionsWithOptions(request: ListTemplateRevisionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTemplateRevisionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.templateName)) {
    query['templateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateVersion)) {
    query['templateVersion'] = request.templateVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplateRevisions',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/templaterevisions/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model ListTemplatesRequest {
  type?: string(name='type'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: [
    Template
  ](name='body'),
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTemplatesWithOptions(request, headers, runtime);
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    query['type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTemplates',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/templates/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

model PutEnvironmentRequest {
  body?: Environment(name='body'),
}

model PutEnvironmentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Environment  
}

async function putEnvironment(name: string, request: PutEnvironmentRequest): PutEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putEnvironmentWithOptions(name, request, headers, runtime);
}

async function putEnvironmentWithOptions(name: string, request: PutEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutEnvironmentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutEnvironment',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PutServiceRequest {
  body?: Service(name='body'),
}

model PutServiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Service  
}

async function putService(name: string, request: PutServiceRequest): PutServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putServiceWithOptions(name, request, headers, runtime);
}

async function putServiceWithOptions(name: string, request: PutServiceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutService',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/services/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PutTemplateRequest {
  body?: Template(name='body'),
  version?: int32(name='version'),
}

model PutTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Template  
}

async function putTemplate(name: string, request: PutTemplateRequest): PutTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putTemplateWithOptions(name, request, headers, runtime);
}

async function putTemplateWithOptions(name: string, request: PutTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.version)) {
    query['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutTemplate',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/templates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ResumeTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Task  
}

async function resumeTask(name: string): ResumeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeTaskWithOptions(name, headers, runtime);
}

async function resumeTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeTask',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasks/${OpenApiUtil.getEncodeParam(name)}/resume`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartPipelineResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Pipeline  
}

async function startPipeline(name: string): StartPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineWithOptions(name, headers, runtime);
}

async function startPipelineWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartPipeline',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/pipelines/${OpenApiUtil.getEncodeParam(name)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model StartTaskResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Task  
}

async function startTask(name: string): StartTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTaskWithOptions(name, headers, runtime);
}

async function startTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartTask',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/tasks/${OpenApiUtil.getEncodeParam(name)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateApplicationRequest {
  body?: Application(name='body'),
}

model UpdateApplicationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Application  
}

async function updateApplication(name: string, request: UpdateApplicationRequest): UpdateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateApplicationWithOptions(name, request, headers, runtime);
}

async function updateApplicationWithOptions(name: string, request: UpdateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateApplication',
    version = '2021-09-24',
    protocol = 'HTTPS',
    pathname = `/apis/serverlessdeployment/v1/applications/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

