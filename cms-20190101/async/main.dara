/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cms';
  @version = '2019-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AlertEvent {
  alertName?: string(name='AlertName'),
  alertStatus?: string(name='AlertStatus'),
  customLabels?: map[string]any(name='CustomLabels'),
  deDupId?: string(name='DeDupId'),
  details?: string(name='Details'),
  eventName?: string(name='EventName'),
  expression?: string(name='Expression'),
  metrics?: [ 
    {
      curValue?: string(name='CurValue'),
      metricName?: string(name='MetricName'),
      metricNameEn?: string(name='MetricNameEn'),
      metricNameZh?: string(name='MetricNameZh'),
      operator?: string(name='Operator'),
      statistics?: string(name='Statistics'),
      threshold?: string(name='Threshold'),
      unit?: string(name='Unit'),
      unitFactor?: float(name='UnitFactor'),
    }
  ](name='Metrics'),
  resourceInfo?: map[string]any(name='ResourceInfo'),
  ruleName?: string(name='RuleName'),
  severity?: string(name='Severity'),
  source?: string(name='Source'),
  summary?: string(name='Summary'),
  timestamp?: long(name='Timestamp'),
  traceId?: string(name='TraceId'),
  userId?: string(name='UserId'),
}

model AlertStrategyRelation {
  alertName?: string(name='AlertName'),
  strategyUuid?: string(name='StrategyUuid'),
}

model Dimension {
  label?: string(name='Label'),
  value?: string(name='Value'),
}

model EscalationRule {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  escalations: [ 
    {
      contactGroups?: [ string ](name='ContactGroups'),
      contactGroupsByLevel?: {
        critical?: [ string ](name='Critical'),
        error?: [ string ](name='Error'),
        info?: [ string ](name='Info'),
        resolve?: [ string ](name='Resolve'),
        warning?: [ string ](name='Warning'),
      }(name='ContactGroupsByLevel'),
      escalateMin?: long(name='EscalateMin'),
    }
  ](name='Escalations'),
  name: string(name='Name'),
  updateTime?: string(name='UpdateTime'),
  userId?: string(name='UserId'),
  uuid?: string(name='Uuid'),
}

model Incident {
  actionTime?: long(name='ActionTime'),
  alertCount?: long(name='AlertCount'),
  endTime?: long(name='EndTime'),
  groupingData?: map[string]any(name='GroupingData'),
  groupingId?: string(name='GroupingId'),
  groupingKey?: string(name='GroupingKey'),
  incidentId?: string(name='IncidentId'),
  incidentStatus?: string(name='IncidentStatus'),
  severity?: string(name='Severity'),
  startTime?: long(name='StartTime'),
  strategyUuid?: string(name='StrategyUuid'),
  userId?: string(name='UserId'),
}

model Matcher {
  label?: string(name='Label'),
  operator?: string(name='Operator'),
  value?: string(name='Value'),
}

model MetricStat {
  associated?: map[string]string(name='Associated'),
  dimensions?: [
    Dimension
  ](name='Dimensions'),
  logTime?: long(name='LogTime'),
  measurements?: map[string]any(name='Measurements'),
  metric?: string(name='Metric'),
  namespace?: string(name='Namespace'),
  period?: int32(name='Period'),
  timestamp?: long(name='Timestamp'),
}

model NotificationStrategy {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  escalationSetting?: {
    autoResolveMin?: long(name='AutoResolveMin'),
    customChannels?: [ 
      {
        channelType: string(name='ChannelType'),
        severities?: [ string ](name='Severities'),
        templateUuid?: string(name='TemplateUuid'),
      }
    ](name='CustomChannels'),
    escalationLevel?: string(name='EscalationLevel'),
    escalationUuid?: string(name='EscalationUuid'),
    range?: string(name='Range'),
    retriggerMin?: long(name='RetriggerMin'),
  }(name='EscalationSetting'),
  filterSetting?: {
    blackList?: [[ 
      {
        field: string(name='Field'),
        op: string(name='Op'),
        value: string(name='Value'),
      }
    ]    ](name='BlackList'),
    whiteList?: [[ 
      {
        field: string(name='Field'),
        op: string(name='Op'),
        value: string(name='Value'),
      }
    ]    ](name='WhiteList'),
  }(name='FilterSetting'),
  groupingSetting?: {
    enableRawAlertDispatching?: boolean(name='EnableRawAlertDispatching'),
    groupingItems?: [ 
      {
        keys?: [ string ](name='Keys'),
        type?: string(name='Type'),
      }
    ](name='GroupingItems'),
    periodMin?: int32(name='PeriodMin'),
    silenceSec?: int32(name='SilenceSec'),
    times?: int32(name='Times'),
  }(name='GroupingSetting'),
  name: string(name='Name'),
  pushingSetting?: {
    range?: string(name='Range'),
    targetUuids?: [ string ](name='TargetUuids'),
    templateUuid?: string(name='TemplateUuid'),
  }(name='PushingSetting'),
  updateTime?: string(name='UpdateTime'),
  userId?: string(name='UserId'),
  uuid?: string(name='Uuid'),
}

model NotificationTemplate {
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  enContent?: string(name='EnContent', example='Alarm $.alertName'),
  enItemContent?: string(name='EnItemContent', example='Alarm $.alertName'),
  enTitle?: string(name='EnTitle', example='Alarm $.alertName'),
  name: string(name='Name'),
  type?: string(name='Type', example='DATA,  SMS,  ONCALL,  MAIL,  DING,  WEIXIN,  FEISHU,  SLACK'),
  updateTime?: string(name='UpdateTime'),
  userId?: string(name='UserId'),
  uuid?: string(name='Uuid'),
  wraperType?: string(name='WraperType', example='TEXT, MARKDOWN,CARD'),
  zhContent?: string(name='ZhContent', example='报警 $.alertName'),
  zhItemContent?: string(name='ZhItemContent', example='报警 $.alertName'),
  zhTitle?: string(name='ZhTitle', example='报警通知 $.alertName'),
}

model PushingTarget {
  arn?: string(name='Arn'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  httpRequestTarget?: {
    contentType?: string(name='ContentType'),
    encryptString?: string(name='EncryptString'),
    headers?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Headers'),
    method?: string(name='Method'),
    url?: string(name='Url'),
  }(name='HttpRequestTarget'),
  name: string(name='Name'),
  range?: string(name='Range'),
  templateUuid?: string(name='TemplateUuid'),
  type?: string(name='Type'),
  updateTime?: string(name='UpdateTime'),
  userId?: string(name='UserId'),
  uuid?: string(name='Uuid'),
}

model Subscription {
  conditions?: [ 
    {
      field?: string(name='Field'),
      operator?: string(name='Operator'),
      value?: string(name='Value'),
    }
  ](name='Conditions'),
  createTime?: string(name='CreateTime'),
  description?: string(name='Description'),
  name: string(name='Name'),
  relation?: string(name='Relation'),
  strategyUuid?: string(name='StrategyUuid'),
  updateTime?: string(name='UpdateTime'),
  uuid?: string(name='Uuid'),
}

model AddTagsRequest {
  groupIds: [ string ](name='GroupIds', example='7301****', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='key1'),
      value: string(name='Value', description='The ID of the request.', example='value1'),
    }
  ](name='Tag', position='Query'),
}

model AddTagsResponseBody = {
  code?: string(name='Code', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='200'),
  message?: string(name='Message', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='DAE4B115-3847-5438-8709-423627F0A3A3'),
  success?: boolean(name='Success', example='true'),
}

model AddTagsResponse = {
  headers: map[string]string(name='headers'),
  body: AddTagsResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function addTags(request: AddTagsRequest): AddTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTags', 'POST', '/', 'json', false, 'json', request);
}

model ApplyMetricRuleTemplateRequest {
  applyMode?: string(name='ApplyMode', description='The error message returned.', example='GROUP_INSTANCE_FIRST', position='Query'),
  enableEndTime?: long(name='EnableEndTime', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='23', position='Query'),
  enableStartTime?: long(name='EnableStartTime', description='The mode in which the alert template is applied. Valid values:

*   GROUP_INSTANCE_FIRST: The metrics in the application group take precedence. If a metric specified in the alert template does not exist in the application group, the system does not generate an alert rule for the metric based on the alert template.
*   ALARM_TEMPLATE_FIRST: The metrics specified in the alert template take precedence. If a metric specified in the alert template does not exist in the application group, the system still generates an alert rule for the metric based on the alert template.', example='00', position='Query'),
  groupId: long(name='GroupId', description='The beginning of the time period during which the alert rule is effective. Valid values: 00 to 23. A value of 00 indicates 00:00 and a value of 23 indicates 23:00.', example='123456', position='Query'),
  notifyLevel?: long(name='NotifyLevel', description='The response code.

>  The HTTP status code 200 indicates that the call succeeds.', example='4', position='Query'),
  silenceTime?: long(name='SilenceTime', description='The ID of the alert template.

For more information about how to query the IDs of alert templates, see [DescribeMetricRuleTemplateList](~~114982~~).', example='86400', position='Query'),
  templateIds: string(name='TemplateIds', description='The alert notification method. Valid values:

Set the value to 4. A value of 4 indicates that alert notifications are sent by using TradeManager and DingTalk chatbots.', example='700****', position='Query'),
  webhook?: string(name='Webhook', description='The ID of the request.', example='https://www.aliyun.com', position='Query'),
}

model ApplyMetricRuleTemplateResponseBody = {
  code?: int32(name='Code', description='Indicates whether the call succeeds. Valid values:

*   true: The call succeeds.
*   false: The call fails.', example='200'),
  message?: string(name='Message', description='The resources that are affected by the alert rule.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the application group to which the alert template is applied.', example='3F897F3C-020A-4993-95B4-63ABB84F83E6'),
  resource?: {
    alertResults?: [ 
      {
        code?: string(name='Code', description='The name of the alert rule.', example='200'),
        message?: string(name='Message', description='The ID of the alert rule.', example='alert rule is creating, please wait a few minutes.'),
        ruleId?: string(name='RuleId', example='applyTemplate8ab74c6b-9f27-47ab-8841-de01dc08****'),
        ruleName?: string(name='RuleName', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='test123'),
        success?: boolean(name='Success', description='In this example, the `700****` alert template is applied to the `123456` application group. For the generated alert rule, the ID is `applyTemplate8ab74c6b-9f27-47ab-8841-de01dc08****`, and the name is `test123`.', example='true'),
      }
    ](name='AlertResults', description='Indicates whether the call succeeds. Valid values:

*   true: The call succeeds.
*   false: The call fails.'),
    groupId?: long(name='GroupId', description='The returned information.', example='123456'),
  }(name='Resource', description='The response code.

>  The HTTP status code 200 indicates that the call succeeds.'),
  success?: boolean(name='Success', description='The details of the generated alert rule.', example='true'),
}

model ApplyMetricRuleTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyMetricRuleTemplateResponseBody(name='body'),
}

/**
  * The ID of the application group to which the alert template is applied.
  * For more information about how to query the ID of an application group, see [DescribeMonitorGroups](~~115032~~).
  *
 */
async function applyMetricRuleTemplate(request: ApplyMetricRuleTemplateRequest): ApplyMetricRuleTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyMetricRuleTemplate', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateInstantSiteMonitorRequest {
  taskList: [ 
    {
      address?: string(name='Address', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='https://www.aliyun.com'),
      ispCities?: string(name='IspCities', description='The ID of the site monitoring task.', example='[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]'),
      optionsJson?: string(name='OptionsJson', description='The detection points. If you leave this parameter empty, the system randomly selects three detection points.

The value is a `JSON array`. Example: `{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}`. The values of the city field indicate Beijing, Hangzhou, and Qingdao.

For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](~~115045~~).', example='{"time_out":5000}'),
      taskName?: string(name='TaskName', description='The operation that you want to perform. Set the value to **BatchCreateInstantSiteMonitor**.', example='HangZhou_ECS1'),
      taskType?: string(name='TaskType', description='The name of the site monitoring task.', example='HTTP'),
    }
  ](name='TaskList', position='Query'),
}

model BatchCreateInstantSiteMonitorResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      taskId?: string(name='TaskId', example='679fbe4f-b80b-4706-91b2-5427b43e****'),
      taskName?: string(name='TaskName', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='HangZhou_ECS1'),
    }
  ](name='Data', description='The ID of the request.', example='[{"taskName": "HangZhou_ECS1", "taskId": "679fbe4f-b80b-4706-91b2-5427b43e****"}]'),
  message?: string(name='Message', description='The type of the site monitoring task.

Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.

>  You must create at least one site monitoring task. You must specify all of the `Address`, `TaskName`, and `TaskType` parameters in each request.', example='successful'),
  requestId?: string(name='RequestId', description='The returned message.', example='7AE72720-2C96-5446-9F2B-308C7CEDFF1A'),
  success?: boolean(name='Success', description='The information about the site monitoring task.', example='true'),
}

model BatchCreateInstantSiteMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateInstantSiteMonitorResponseBody(name='body'),
}

/**
  * The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.
  *
 */
async function batchCreateInstantSiteMonitor(request: BatchCreateInstantSiteMonitorRequest): BatchCreateInstantSiteMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateInstantSiteMonitor', 'POST', '/', 'json', false, 'json', request);
}

model BatchCreateIntantSiteMonitorRequest {
  taskList: [ 
    {
      address?: string(name='Address', example='https://www.aliyun.com'),
      ispCities?: string(name='IspCities', example='[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]'),
      optionsJson?: string(name='OptionsJson', example='{"time_out":5000}'),
      taskName?: string(name='TaskName', example='HangZhou_ECS1'),
      taskType?: string(name='TaskType', example='HTTP'),
    }
  ](name='TaskList', position='Query'),
}

model BatchCreateIntantSiteMonitorResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='[{"taskName": "HangZhou_ECS1", "taskId": "679fbe4f-b80b-4706-91b2-5427b43e****"}]'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='7AE72720-2C96-5446-9F2B-308C7CEDFF1A'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateIntantSiteMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: BatchCreateIntantSiteMonitorResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function batchCreateIntantSiteMonitor(request: BatchCreateIntantSiteMonitorRequest): BatchCreateIntantSiteMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCreateIntantSiteMonitor', 'POST', '/', 'json', false, 'json', request);
}

model BatchExportRequest {
  cursor: string(name='Cursor', example='eyJidWNrZXRzIjo0LCJjdXJzb3IiOiIxNjQxNDU0MzIwMDAwMWUxY2YxNWY0NTU0MTliZjllYTY4OWQ2ODI1OTU1Yzc1NmZjMDQ2OTMxMzczMzM2MzUzMTMxMzEzMzM0MzMzODM5MzEzMTMwMjQyYzY5MmQ3NTY2MzYzMjY3NmI2ZjM5MzU2YjY4MzAzMTYyNzg3MTcwNjkzMTM3MjQyYyIsImN1cnNvclZlcnNpb24iOiJxdWVyeSIsImVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydEVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydFN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywiZXhwcmVzc1JhbmdlIjpmYWxzZSwiaGFzTmV4dCI6dHJ1ZSwiaW5wdXRNZXRyaWMiOiJDUFVVdGlsaXphdGlvbiIsImlucHV0TmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJsaW1pdCI6MTAwMCwibG9nVGltZU1vZGUiOnRydWUsIm1hdGNoZXJzIjp7ImNoYWluIjpbeyJsYWJlbCI6InVzZXJJZCIsIm9wZXJhdG9yIjoiRVFVQUxTIiwidmFsdWUiOiIxNzM2NTExMTM0Mzg5MTEwIn1dfSwibWV0cmljIjoiQ1BVVXRpbGl6YXRpb24iLCJtZXRyaWNUeXBlIjoiTUVUUklDIiwibmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJuZXh0UGtBZGFwdGVyIjp7fSwib2Zmc2V0IjowLCJwYXJlbnRVaWQiOjEyNzA2NzY2Nzk1NDY3MDQsInN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywic3RlcCI6LTEsInRpbWVvdXQiOjEyMCwid2luZG93Ijo2****', position='Body'),
  length: int32(name='Length', example='1000', position='Body'),
  measurements?: [ string ](name='Measurements', shrink='json', position='Body'),
  metric: string(name='Metric', example='cpu_idle', position='Body'),
  namespace: string(name='Namespace', example='acs_ecs_dashboard', position='Body'),
}

model BatchExportResponseBody = {
  anchor?: long(name='Anchor', example='1678781819000'),
  code?: int32(name='Code', example='200'),
  cursor?: string(name='Cursor', example='v2.5eyJidWNrZXRzIjo0LCJjdXJzb3IiOiIxNjQxNDU0ODAwMDAwMWUxY2YxNWY0NTU0MTliZjllYTY4OWQ2ODI1OTU1Yzc1NmZjMDQ2OTMxMzczMzM2MzUzMTMxMzEzMzM0MzMzODM5MzEzMTMwMjQyYzY5MmQzMjdhNjU2MjY3N2E2NjZhNzczOTY2NmM3Mjc0NjM3MzY5Njg3NDcyMjQyYyIsImN1cnNvclZlcnNpb24iOiJxdWVyeSIsImVuZFRpbWUiOjE2NDE0NTUyMzYxMTIsImV4cG9ydEVuZFRpbWUiOjE2NDE0NTUyMzYxMTIsImV4cG9ydFN0YXJ0VGltZSI6MTY0MTQ1NDYzNjExMiwiZXhwcmVzc1JhbmdlIjpmYWxzZSwiaGFzTmV4dCI6dHJ1ZSwiaW5wdXRNZXRyaWMiOiJDUFVVdGlsaXphdGlvbiIsImlucHV0TmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJsaW1pdCI6MTAwMCwibG9nVGltZU1vZGUiOnRydWUsIm1hdGNoZXJzIjp7ImNoYWluIjpbeyJsYWJlbCI6InVzZXJJZCIsIm9wZXJhdG9yIjoiRVFVQUxTIiwidmFsdWUiOiIxNzM2NTExMTM0Mzg5MTEwIn1dfSwibWV0cmljIjoiQ1BVVXRpbGl6YXRpb24iLCJtZXRyaWNUeXBlIjoiTUVUUklDIiwibmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJuZXh0UGtBZGFwdGVyIjp7fSwib2Zmc2V0IjowLCJwYXJlbnRVaWQiOjEyNzA2NzY2Nzk1NDY3MDQsInN0YXJ0VGltZSI6MTY0MTQ1NDYzNjExMiwic3RlcCI6LTEsInRpbWVvdXQiOjEyMCwid2luZG93Ijo2MH0***'),
  dataResults?: [
    MetricStat
  ](name='DataResults'),
  hasNext?: boolean(name='HasNext', example='true'),
  length?: int32(name='Length', example='1000'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='251402CD-305C-1617-808E-D8C11FC8138D'),
  success?: boolean(name='Success', example='true'),
}

model BatchExportResponse = {
  headers: map[string]string(name='headers'),
  body: BatchExportResponseBody(name='body'),
}

async function batchExport(request: BatchExportRequest): BatchExportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchExport', 'POST', '/', 'json', true, 'form', request);
}

model CreateCmsCallNumOrderRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  phoneCount?: string(name='PhoneCount', position='Query'),
}

model CreateCmsCallNumOrderResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCmsCallNumOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCmsCallNumOrderResponseBody(name='body'),
}

async function createCmsCallNumOrder(request: CreateCmsCallNumOrderRequest): CreateCmsCallNumOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCmsCallNumOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateCmsOrderRequest {
  apiCount?: string(name='ApiCount', position='Query'),
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  customTimeSeries?: string(name='CustomTimeSeries', position='Query'),
  eventStoreNum?: string(name='EventStoreNum', position='Query'),
  eventStoreTime?: string(name='EventStoreTime', position='Query'),
  logMonitorStream?: string(name='LogMonitorStream', position='Query'),
  payType?: string(name='PayType', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  phoneCount?: string(name='PhoneCount', position='Query'),
  siteEcsNum?: string(name='SiteEcsNum', position='Query'),
  siteOperatorNum?: string(name='SiteOperatorNum', position='Query'),
  siteTaskNum?: string(name='SiteTaskNum', position='Query'),
  smsCount?: string(name='SmsCount', position='Query'),
  suggestType?: string(name='SuggestType', position='Query'),
}

model CreateCmsOrderResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCmsOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCmsOrderResponseBody(name='body'),
}

async function createCmsOrder(request: CreateCmsOrderRequest): CreateCmsOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCmsOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateCmsSmspackageOrderRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  autoUseCoupon?: boolean(name='AutoUseCoupon', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  smsCount?: string(name='SmsCount', position='Query'),
}

model CreateCmsSmspackageOrderResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCmsSmspackageOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCmsSmspackageOrderResponseBody(name='body'),
}

async function createCmsSmspackageOrder(request: CreateCmsSmspackageOrderRequest): CreateCmsSmspackageOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCmsSmspackageOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateDynamicTagGroupRequest {
  contactGroupList: [ string ](name='ContactGroupList', example='ECS_Group', position='Query'),
  enableInstallAgent?: boolean(name='EnableInstallAgent', example='true', position='Query'),
  enableSubscribeEvent?: boolean(name='EnableSubscribeEvent', example='true', position='Query'),
  matchExpress: [ 
    {
      tagName?: string(name='TagName', example='appname'),
      tagValue?: string(name='TagValue', example='instance'),
      tagValueMatchFunction?: string(name='TagValueMatchFunction', example='contains'),
    }
  ](name='MatchExpress', position='Query'),
  matchExpressFilterRelation?: string(name='MatchExpressFilterRelation', example='and', position='Query'),
  tagKey: string(name='TagKey', example='ecs_instance', position='Query'),
  tagRegionId?: string(name='TagRegionId', example='cn-hangzhou', position='Query'),
  templateIdList?: [ string ](name='TemplateIdList', example='85****', position='Query'),
}

model CreateDynamicTagGroupResponseBody = {
  code?: string(name='Code', example='200'),
  id?: string(name='Id', example='2534dc0a-e3e5-4ae1-a2fc-75ef166c****'),
  message?: string(name='Message', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='84AC6F0B-7945-466A-AA44-99BB5A561F86'),
  success?: boolean(name='Success', example='true'),
}

model CreateDynamicTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDynamicTagGroupResponseBody(name='body'),
}

/**
  * Specifies whether the application group automatically subscribes to event notifications. If events whose severity level is critical or warning occur on resources in an application group, CloudMonitor sends alert notifications. Valid values:
  * *   true: The application group automatically subscribes to event notifications.
  * *   false (default value): The application group does not automatically subscribe to event notifications.
  *
 */
async function createDynamicTagGroup(request: CreateDynamicTagGroupRequest): CreateDynamicTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDynamicTagGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupMetricRulesRequest {
  groupId: long(name='GroupId', position='Query'),
  groupMetricRules?: [ 
    {
      escalations: {
        critical: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: string(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Critical'),
        info: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: string(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Info'),
        warn: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: string(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Warn'),
      }(name='Escalations'),
      category: string(name='Category', example='ECS'),
      contactGroups?: string(name='ContactGroups', example='ECS_Group'),
      dimensions?: string(name='Dimensions', example='[{"instanceId":"i-m5e1qg6uo38rztr4****"}]'),
      effectiveInterval?: string(name='EffectiveInterval', example='05:31-23:59'),
      emailSubject?: string(name='EmailSubject'),
      interval?: string(name='Interval', example='60'),
      labels?: [ 
        {
          key?: string(name='Key', example='key1'),
          value?: string(name='Value', example='value1'),
        }
      ](name='Labels'),
      metricName: string(name='MetricName', example='cpu_total'),
      namespace: string(name='Namespace', example='acs_ecs_dashboard'),
      noDataPolicy?: string(name='NoDataPolicy', example='KEEP_LAST_STATE'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', example='00:00-05:30'),
      period?: string(name='Period', example='60'),
      ruleId: string(name='RuleId', example='456789'),
      ruleName: string(name='RuleName', example='ECS_Rule1'),
      silenceTime?: int32(name='SilenceTime', example='86400'),
      webhook?: string(name='Webhook', example='https://www.aliyun.com'),
    }
  ](name='GroupMetricRules', position='Query'),
}

model CreateGroupMetricRulesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D'),
  resources?: {
    alertResult?: [ 
    {
      code?: int32(name='Code', example='200'),
      message?: string(name='Message', example='Metric not found.'),
      ruleId?: string(name='RuleId', example='456789'),
      ruleName?: string(name='RuleName', example='ECS_Rule1'),
      success?: boolean(name='Success', example='true'),
    }
  ](name='AlertResult')
  }(name='Resources'),
  success?: boolean(name='Success', example='true'),
}

model CreateGroupMetricRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupMetricRulesResponseBody(name='body'),
}

/**
  * The details of the alert rules.
  *
 */
async function createGroupMetricRules(request: CreateGroupMetricRulesRequest): CreateGroupMetricRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupMetricRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupMonitoringAgentProcessRequest {
  alertConfig: [ 
    {
      comparisonOperator: string(name='ComparisonOperator', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle

Valid values of N: 1 to 3.', example='GreaterThanOrEqualToThreshold'),
      effectiveInterval?: string(name='EffectiveInterval', description='The time period during which the alert rule is effective.

Valid values of N: 1 to 3.', example='00:00-23:59'),
      escalationsLevel: string(name='EscalationsLevel', description='The level of the alert. Valid values:

*   critical (default value): Critical
*   Warn
*   Info

Valid values of N: 1 to 3.', example='warn'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', description='The time period during which the alert rule is ineffective.

Valid values of N: 1 to 3.', example='00:00-23:59'),
      silenceTime?: string(name='SilenceTime', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.

Valid values of N: 1 to 3.

> Only one alert notification is sent during each mute period even if the metric value exceeds the alert threshold several times.', example='86400'),
      statistics: string(name='Statistics', description='The statistical method for alerts.

Valid values of N: 1 to 3.

> Set the value to Average.', example='Average'),
      targetList?: [ 
        {
          arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the resource.

For information about how to obtain the ARN of a resource, see [DescribeMetricRuleTargets](~~121592~~).

Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.

*   {userId}: the ID of the Alibaba Cloud account.

*   {regionId}: the region ID of the message queue or topic.

*   {Resource type}: the type of the resource that triggers the alert. Valid values:

    *   **queues**: queue.
    *   **topics**: topic.

*   {Resource name}: the name of the resource.

    *   If the resource type is **queues**, the resource name is the queue name.
    *   If the resource type is **topics**, the resource name is the topic name.', example='acs:mns:cn-hangzhou:120886317861****:/queues/test/message'),
          id?: string(name='Id', description='The ID of the resource for which alerts are triggered.

For information about how to obtain the ID of a resource for which alerts are triggered, see [DescribeMetricRuleTargets](~~121592~~).', example='1'),
          jsonParams?: string(name='JsonParams', description='The parameters of the alert callback. The parameters are in the JSON format.', example='{"customField1":"value1","customField2":"$.name"}'),
          level?: string(name='Level', description='The level of the alert. Valid values:

*   INFO: Info
*   WARN: Warn
*   CRITICAL: Critical', example='["INFO", "WARN", "CRITICAL"]'),
        }
      ](name='TargetList', description='The alert triggers.'),
      threshold: string(name='Threshold', description='The alert threshold.

Valid values of N: 1 to 3.', example='5'),
      times: string(name='Times', description='The number of times for which the threshold can be consecutively exceeded. Default value: 3.

Valid values of N: 1 to 3.

> An alert is triggered only if the number of times for which the threshold can be consecutively exceeded is reached.', example='3'),
      webhook?: string(name='Webhook', description='The callback URL.

Valid values of N: 1 to 3.', example='http://www.aliyun.com'),
    }
  ](name='AlertConfig', description='The alert rule configurations.

Valid values of N: 1 to 3.', position='Query'),
  groupId: string(name='GroupId', description='The ID of the application group.', example='123456', position='Query'),
  matchExpress?: [ 
    {
      function?: string(name='Function', description='The matching condition. Valid values:

*   all (default value): matches all
*   startWith: starts with a prefix
*   endWith: ends with a suffix
*   contains: contains
*   notContains: does not contain
*   equals: equals

Valid values of N: 1 to 3.', example='startWith'),
      name?: string(name='Name', description='The criteria based on which the instances are matched.

Valid values of N: 1 to 3.

> Set the value to name. The value name indicates that the instances are matched based on the instance name.', example='name1'),
      value?: string(name='Value', description='The keyword used to match the instance name.

Valid values of N: 1 to 3.', example='portalHost'),
    }
  ](name='MatchExpress', description='The expressions used to match instances.

Valid values of N: 1 to 3.', position='Query'),
  matchExpressFilterRelation?: string(name='MatchExpressFilterRelation', description='The logical operator used between conditional expressions that are used to match instances. Valid values:

*   all
*   and
*   or', example='and', position='Query'),
  processName: string(name='ProcessName', description='The name of the process.', example='test1', position='Query'),
}

model CreateGroupMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The status code.

> The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F6150F9-45C7-43F9-9578-A58B2E726C90'),
  resource?: {
    groupProcessId?: string(name='GroupProcessId'),
  }(name='Resource'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   true: The call is successful.
*   false: The call fails.', example='true'),
}

model CreateGroupMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupMonitoringAgentProcessResponseBody(name='body'),
}

async function createGroupMonitoringAgentProcess(request: CreateGroupMonitoringAgentProcessRequest): CreateGroupMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model CreateHostAvailabilityRequest {
  alertConfig?: {
    endTime?: int32(name='EndTime', description='The name of the availability monitoring task. The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (\\_).', example='22'),
    notifyType: int32(name='NotifyType', description='The content of the HTTP POST request.', example='0'),
    silenceTime?: int32(name='SilenceTime', description='The interval at which detection requests are sent. Unit: seconds. Valid values: 15, 30, 60, 120, 300, 900, 1800, and 3600.

>  This parameter is available only for the CloudMonitor agent V3.5.1 or later.', example='86400'),
    startTime?: int32(name='StartTime', description='The method used to calculate metric values that trigger alerts. Valid values of N: 1 to 21. Valid values:

*   HttpStatus: Value
*   HttpLatency: Average
*   TelnetStatus: Value
*   TelnetLatency: Average
*   PingLostRate: Average

>  The value Value indicates the original value and is used for metrics such as status codes. The value Average indicates the average value and is used for metrics, such as the latency and packet loss rate.', example='0'),
    webHook?: string(name='WebHook', description='The range of instances that are monitored by the availability monitoring task. Valid values:

*   GROUP: All ECS instances in the application group are monitored.
*   GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored. The TaskScope parameter must be used in combination with the InstanceList.N parameter. The InstanceList.N parameter specifies the ECS instances to be monitored.', example='https://www.aliyun.com/webhook.json'),
  }(name='AlertConfig', position='Query'),
  taskOption?: {
    httpHeader?: string(name='HttpHeader', description='The ID of the availability monitoring task.', example='token:testTokenValue'),
    httpMethod?: string(name='HttpMethod', description='The level of the alert. Valid values:

*   INFO: information
*   WARN: warning
*   CRITICAL: critical', example='GET'),
    httpNegative?: boolean(name='HttpNegative', description='The alert notification methods. Valid values:

0: Alert notifications are sent by using emails and DingTalk chatbots.', example='true'),
    httpPostContent?: string(name='HttpPostContent', description='The ID of the application group.', example='params1=paramsValue1'),
    httpResponseCharset?: string(name='HttpResponseCharset', description='The domain name or IP address that you want to monitor.

>  If the TaskType parameter is set to PING or TELNET, this parameter is required.', example='UTF-8'),
    httpResponseMatchContent?: string(name='HttpResponseMatchContent', description='The consecutive number of times for which the metric value meets the alert condition before an alert is triggered. Valid values of N: 1 to 21.', example='ok'),
    httpURI?: string(name='HttpURI', description='The URI that you want to monitor. If the TaskType parameter is set to HTTP, this parameter is required.', example='https://www.aliyun.com'),
    interval?: int32(name='Interval', description='The header of the HTTP request. Format: `Parameter name:Parameter value`. Separate multiple parameters with carriage return characters. Example:

```

params1:value1
params2:value2
```', example='60'),
    telnetOrPingHost?: string(name='TelnetOrPingHost', description='The error message.', example='www.aliyun.com'),
  }(name='TaskOption', position='Query'),
  alertConfigEscalationList: [ 
    {
      aggregate?: string(name='Aggregate', description='The ECS instances that are monitored. Valid values of N: 1 to 21.

>  If the `TaskScope` parameter is set to `GROUP_SPEC_INSTANCE`, this parameter is required.', example='Value'),
      metricName: string(name='MetricName', description='The character set that is used in the HTTP response.

>  Valid value: UTF-8.', example='HttpStatus'),
      operator?: string(name='Operator', description='The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:

*   true: If the HTTP response body includes the alert rule, an alert is triggered.
*   false: If the HTTP response does not include the alert rule, an alert is triggered.

>  If the TaskType parameter is set to HTTP, this parameter takes effect.', example='>'),
      times?: int32(name='Times', description='The parameters of the alert callback. The parameters are in the JSON format.', example='3'),
      value?: string(name='Value', description='The callback URL.', example='90'),
    }
  ](name='AlertConfigEscalationList', position='Query'),
  alertConfigTargetList?: [ 
    {
      arn?: string(name='Arn', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. The default value indicates one day.', example='acs:mns:cn-hangzhou:120886317861****:/queues/test/message'),
      id?: string(name='Id', description='The end of the time period during which the alert rule is effective. Valid values: 0 to 23.

For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.

>  Alert notifications are sent based on the specified threshold only if the alert rule is effective.', example='1'),
      jsonParams?: string(name='JsonParams', description='The ID of the request.', example='{"customField1":"value1","customField2":"$.name"}'),
      level?: string(name='Level', description='The monitoring type of the availability monitoring task. Valid values:

*   PING
*   TELNET
*   HTTP', example='["INFO", "WARN", "CRITICAL"]'),
    }
  ](name='AlertConfigTargetList', position='Query'),
  groupId: long(name='GroupId', description='The metric for which the alert feature is enabled. Valid values of N: 1 to 21. Valid values:

*   HttpStatus: HTTP status code
*   HttpLatency: HTTP response time
*   TelnetStatus: Telnet status code
*   TelnetLatency: Telnet response time
*   PingLostRate: Ping packet loss rate', example='123456', position='Query'),
  instanceList?: [ string ](name='InstanceList', example='i-absdfkwl321****', position='Query'),
  taskName: string(name='TaskName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='task1', position='Query'),
  taskScope?: string(name='TaskScope', description='The comparison operator that is used in the alert rule. Valid values of N: 1 to 21. Valid values:

*   `>`
*   `>=`
*   `<`
*   `<=`
*   `=`', example='GROUP', position='Query'),
  taskType: string(name='TaskType', description='The operation that you want to perform. Set the value to **CreateHostAvailability**.', example='HTTP', position='Query'),
}

model CreateHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The alert threshold. Valid values of N: 1 to 21.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='ACBDBB40-DFB6-4F4C-8957-51FFB233969C'),
  success?: boolean(name='Success', example='true'),
  taskId?: long(name='TaskId', example='12345'),
}

model CreateHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHostAvailabilityResponseBody(name='body'),
}

/**
  * The ID of the resource for which alerts are triggered.
  *
 */
async function createHostAvailability(request: CreateHostAvailabilityRequest): CreateHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model CreateHybridMonitorNamespaceRequest {
  description?: string(name='Description', description='The returned message.', position='Query'),
  namespace: string(name='Namespace', description='The data retention period of the namespace. Valid values:

*   cms.s1.large: 15 days
*   cms.s1.xlarge: 32 days
*   cms.s1.2xlarge: 63 days
*   cms.s1.3xlarge (default value): 93 days
*   cms.s1.6xlarge: 185 days
*   cms.s1.12xlarge: 376 days

For information about the pricing for different retention periods, see the **Pricing** section in [Billing of the dashboard feature](~~223532~~).', example='aliyun', position='Query'),
  spec?: string(name='Spec', description='The ID of the request.', example='cms.s1.3xlarge', position='Query'),
}

model CreateHybridMonitorNamespaceResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **CreateHybridMonitorNamespace**.', example='Success'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Namespace.Existed'),
  requestId?: string(name='RequestId', example='3843D23A-FB9E-5DC8-BCCC-458768B79296'),
  success?: string(name='Success', example='true'),
}

model CreateHybridMonitorNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHybridMonitorNamespaceResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function createHybridMonitorNamespace(request: CreateHybridMonitorNamespaceRequest): CreateHybridMonitorNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHybridMonitorNamespace', 'POST', '/', 'json', false, 'json', request);
}

model CreateHybridMonitorSLSGroupRequest {
  SLSGroupConfig: [ 
    {
      SLSLogstore: string(name='SLSLogstore', description='The name of the Logstore group.

The name must be 2 to 32 characters in length and can contain uppercase letters, lowercase letters, digits, and underscores (\\_). The name must start with a letter.', example='Logstore-ECS'),
      SLSProject: string(name='SLSProject', description='The IDs of the member accounts.

Valid values of N: 1 to 25.

If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.

>  If a member uses CloudMonitor for the first time, you must make sure that the service-linked role AliyunServiceRoleForCloudMonitor is attached to the member. For more information, see [Manage the service-linked role for CloudMonitor](~~170423~~).', example='aliyun-project'),
      SLSRegion: string(name='SLSRegion', description='The error message.', example='cn-hangzhou'),
      SLSUserId?: string(name='SLSUserId', description='The Logstores.

Valid values of N: 1 to 25.', example='120886317861****'),
    }
  ](name='SLSGroupConfig', position='Query'),
  SLSGroupDescription?: string(name='SLSGroupDescription', description='The operation that you want to perform. Set the value to **CreateHybridMonitorSLSGroup**.', position='Query'),
  SLSGroupName: string(name='SLSGroupName', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='Logstore_test', position='Query'),
}

model CreateHybridMonitorSLSGroupResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Duplicate.SLSGroup'),
  requestId?: string(name='RequestId', example='66683237-7126-50F8-BBF8-D67ACC919A17'),
  success?: string(name='Success', example='true'),
}

model CreateHybridMonitorSLSGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHybridMonitorSLSGroupResponseBody(name='body'),
}

/**
  * The Log Service projects.
  * Valid values of N: 1 to 25.
  *
 */
async function createHybridMonitorSLSGroup(request: CreateHybridMonitorSLSGroupRequest): CreateHybridMonitorSLSGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHybridMonitorSLSGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateHybridMonitorTaskRequest {
  attachLabels?: [ 
    {
      name?: string(name='Name', description='The conditions that are used to filter logs imported from Log Service.', example='app_service'),
      value?: string(name='Value', description='The name of the namespace.

For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](~~428880~~).', example='testValue'),
    }
  ](name='AttachLabels', position='Query'),
  collectInterval?: string(name='CollectInterval', description='The error message.', example='60', position='Query'),
  collectTargetType: string(name='CollectTargetType', description='The type of the collection target.

*   If the `TaskType` parameter is set to `aliyun_fc`, enter `aliyun_fc`.
*   If the `TaskType` parameter is set to `aliyun_sls`, enter the name of the Logstore group.', example='aliyun_fc', position='Query'),
  description?: string(name='Description', description='The tag value of the metric.', position='Query'),
  groupId?: string(name='GroupId', description='The conditions that are used to filter logs imported from Log Service.', example='3607****', position='Query'),
  namespace: string(name='Namespace', description='The extended field that specifies the result of basic operations that are performed on aggregation results.', example='aliyun', position='Query'),
  SLSProcessConfig?: {
    express?: [ 
      {
        alias?: string(name='Alias', description='The value of the key that is used to filter logs imported from Log Service.', example='SuccRate'),
        express?: string(name='Express', description='Specifies whether to create a metric import task for an Alibaba Cloud service or create a metric for logs imported from Log Service. Valid values:

*   aliyun_fc: creates a metric import task for an Alibaba Cloud service
*   aliyun_sls: creates a metric for logs imported from Log Service', example='success_count'),
      }
    ](name='Express', description='The name of the key that is used to aggregate logs imported from Log Service.'),
    filter?: {
      filters?: [ 
        {
          operator?: string(name='Operator', description='The description of the metric import task.', example='='),
          SLSKeyName?: string(name='SLSKeyName', description='The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.

*   namespace: the namespace of the Alibaba Cloud service. For information about how to query the namespace of an Alibaba Cloud service, see [DescribeMetricMetaList](~~98846~~).
*   metric_list: the metrics of the Alibaba Cloud service. For information about how to query the metrics of an Alibaba Cloud service, see [DescribeMetricMetaList](~~98846~~).

The following code shows a sample configuration file:

```

products:
- namespace: acs_ecs_dashboard
  metric_info:
  - metric_list:
    - cpu_total
    - cpu_idle
    - diskusage_utilization
    - CPUUtilization
    - DiskReadBPS
    - InternetOut
    - IntranetOut
    - cpu_system
- namespace: acs_rds_dashboard
  metric_info:
  - metric_list:
    - MySQL_QPS
    - MySQL_TPS
```

>  This parameter is required only if the `TaskType` parameter is set to `aliyun_fc`.', example='code'),
          value?: string(name='Value', description='The name of the metric import task.

*   If the `TaskType` parameter is set to `aliyun_fc`, enter the name of the metric import task.
*   If the `TaskType` parameter is set to `aliyun_sls`, enter the name of the metric for logs imported from Log Service.', example='200'),
        }
      ](name='Filters', description='The relationship between multiple filter conditions. Valid values:

*   and (default value): Logs are processed only if all filter conditions are met.
*   or: Logs are processed if one of the filter conditions is met.'),
      relation?: string(name='Relation', description='The configurations of the logs that are imported from Log Service.

>  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.', example='and'),
    }(name='Filter', description='The extended fields that specify the results of basic operations that are performed on aggregation results.'),
    groupBy?: [ 
      {
        alias?: string(name='Alias', description='The ID of the member account.

If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in a resource directory to Hybrid Cloud Monitoring. You can use the resource directory to monitor Alibaba Cloud services across enterprise accounts.

>  This parameter is required only if the `TaskType` parameter is set to `aliyun_fc`.', example='ApiResult'),
        SLSKeyName?: string(name='SLSKeyName', description='The IDs of the member accounts. Separate multiple member account IDs with commas (,).

>  This parameter is required only if you call this operation by using the management account.', example='code'),
      }
    ](name='GroupBy', description='The ID of the application group.

For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).

>  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.'),
    statistics?: [ 
      {
        alias?: string(name='Alias', example='level_count'),
        function?: string(name='Function', example='count'),
        parameter1?: string(name='Parameter1', example='200'),
        parameter2?: string(name='Parameter2', example='299'),
        SLSKeyName?: string(name='SLSKeyName', example='name'),
      }
    ](name='Statistics'),
  }(name='SLSProcessConfig', description='The tag key of the metric.', position='Query'),
  targetUserId?: string(name='TargetUserId', description='The method that is used to filter logs imported from Log Service. Valid values:

*   `contain`: contains
*   `notContain`: does not contain
*   `>`: greater than
*   `<`: less than
*   `=`: equal to
*   `! =`: not equal to
*   `>=`: greater than or equal to
*   `<=`: less than or equal to', example='120886317861****', position='Query'),
  targetUserIdList?: string(name='TargetUserIdList', description='The ID of the metric import task.', example='120886317861****', position='Query'),
  taskName?: string(name='TaskName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='aliyun_task', position='Query'),
  taskType: string(name='TaskType', description='The operation that you want to perform. Set the value to **CreateHybridMonitorTask**.', example='aliyun_fc', position='Query'),
  YARMConfig?: string(name='YARMConfig', description='The interval at which metrics are collected. Valid values:

*   15
*   60 (default value)

Unit: seconds.

>  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.', example='products:- namespace: acs_ecs_dashboard  metric_info:  - metric_list:    - cpu_total', position='Query'),
}

model CreateHybridMonitorTaskResponseBody = {
  code?: string(name='Code', description='The alias of the aggregation result.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='yamlConfigFail'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='28CEA2E0-3E90-51B2-A7E8-B1ED75534E49'),
  success?: string(name='Success', example='true'),
  taskId?: long(name='TaskId', example='36****'),
}

model CreateHybridMonitorTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHybridMonitorTaskResponseBody(name='body'),
}

/**
  * The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL.
  *
 */
async function createHybridMonitorTask(request: CreateHybridMonitorTaskRequest): CreateHybridMonitorTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHybridMonitorTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstantSiteMonitorRequest {
  address: string(name='Address', description='The URL or IP address that you want to test.', example='http://www.aliyun.com', position='Query'),
  ispCities?: string(name='IspCities', description='The detection points. If you leave this parameter empty, the system randomly selects three detection points.

The value is a `JSON array`. Example: {"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}. The values of the city field indicate Beijing, Hangzhou, and Qingdao.

For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](~~115045~~).

> You must specify one of the `IspCities` and `RandomIspCity` parameters.', example='[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]', position='Query'),
  optionsJson?: string(name='OptionsJson', description='The extended options of the protocol that is used by the instant test task. The options vary based on the protocol.', example='{"time_out":5000}', position='Query'),
  randomIspCity?: int32(name='RandomIspCity', description='The number of detection points.

> 

*   You must specify one of the `IspCities` and `RandomIspCity` parameters. If you specify the `RandomIspCity` parameter, the `IspCities` parameter automatically becomes invalid.', example='1', position='Query'),
  taskName: string(name='TaskName', description='The name of the instant test task.

The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (\\_).', example='task1', position='Query'),
  taskType: string(name='TaskType', description='The type of the instant test task. Valid values: HTTP, PING, TCP, UDP, and DNS.', example='HTTP', position='Query'),
}

model CreateInstantSiteMonitorResponseBody = {
  code?: string(name='Code', description='The error code.

> The status code 200 indicates that the call was successful.', example='200'),
  createResultList?: [ 
    {
      taskId?: string(name='TaskId', description='The ID of the instant test task.', example='2c8dbdf9-a3ab-46a1-85a4-f094965e****'),
      taskName?: string(name='TaskName', description='The name of the instant test task.', example='task1'),
    }
  ](name='CreateResultList', description='The results for creating the instant test task.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68192f5d-0d45-4b98-9724-892813f86c71'),
  success?: string(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model CreateInstantSiteMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstantSiteMonitorResponseBody(name='body'),
}

/**
  * You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring. For more information, see [Billing of Network Analysis and Monitoring](~~341649~~).
  * This topic provides an example to show how to create an instant test task. The name of the task is `task1`. The tested address is `http://www.aliyun.com`. The test type is `HTTP`. The number of detection points is `1`.
  *
 */
async function createInstantSiteMonitor(request: CreateInstantSiteMonitorRequest): CreateInstantSiteMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstantSiteMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CreateMetricRuleBlackListRequest {
  category: string(name='Category', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The ID of the application group. The value of this parameter is a JSON array.

>  This parameter is required only if the `ScopeType` parameter is set to `GROUP`.', example='03:00-04:59', position='Query'),
  enableEndTime?: string(name='EnableEndTime', description='The operation that you want to perform. Set the value to **CreateMetricRuleBlackList**.', example='1640608200000', position='Query'),
  enableStartTime?: string(name='EnableStartTime', description='The ID of the blacklist policy.', example='1640237400000', position='Query'),
  instances: [ string ](name='Instances', position='Query'),
  metrics?: [ 
    {
      metricName: string(name='MetricName', description='The timestamp when the blacklist policy starts to take effect.

Unit: milliseconds.', example='disk_utilization'),
      resource?: string(name='Resource', description='The name of the blacklist policy.', example='{"device":"C:"}'),
    }
  ](name='Metrics', position='Query'),
  name: string(name='Name', description='The category of the cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.', example='Blacklist-01', position='Query'),
  namespace: string(name='Namespace', description='The timestamp when the blacklist policy expires.

Unit: milliseconds.', example='acs_ecs_dashboard', position='Query'),
  scopeType?: string(name='ScopeType', description='The IDs of instances that belong to the specified cloud service. The value of this parameter is a JSON array.

Valid values of N: 1 to 20.', example='USER', position='Query'),
  scopeValue?: string(name='ScopeValue', description='The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.

Valid values of N: 1 to 10', example='["67****","78****"]', position='Query'),
}

model CreateMetricRuleBlackListResponseBody = {
  code?: string(name='Code', description='The effective scope of the blacklist policy. Valid values:

*   USER: The blacklist policy takes effect only for the current Alibaba Cloud account.

*   GROUP: The blacklist policy takes effect only for the specified application group. This is the default value.

    For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='200'),
  id?: string(name='Id', example='93514c96-ceb8-47d8-8ee3-93b6d98b****'),
  message?: string(name='Message', description='The ID of the request.', example='The request has failed due to a temporary failure of the server.'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='5C637FA3-3959-3352-8BE6-78CE2ED2D33D'),
  success?: boolean(name='Success', example='true'),
}

model CreateMetricRuleBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMetricRuleBlackListResponseBody(name='body'),
}

/**
  * The name of the metric.
  * Valid values of N: 1 to 10
  *
 */
async function createMetricRuleBlackList(request: CreateMetricRuleBlackListRequest): CreateMetricRuleBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMetricRuleBlackList', 'POST', '/', 'json', false, 'json', request);
}

model CreateMetricRuleResourcesRequest {
  overwrite?: string(name='Overwrite', description='The resources to be associated with the alert rule. The value is a JSON array.

>  You can add up to 100 resources each time. An alert rule can be associated with up to 3,000 resources.', example='false', position='Query'),
  resources: string(name='Resources', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='[{"instanceId":"i-a2d5q7pm3f9yr29e****"}]', position='Query'),
  ruleId?: string(name='RuleId', description='Specifies whether to overwrite the existing data. Valid values:

*   true: The resources submitted this time will overwrite the previous associated resources.
*   false: The resources submitted this time will not overwrite the previous associated resources. The associated resources after submission include the previous associated resources and the resources submitted this time.', example='i-2ze3w55tr2rcpejpcfap_59c96b85-0339-4f35-ba66-ae4e34d3****', position='Query'),
}

model CreateMetricRuleResourcesResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='0671A721-0D7A-4F11-BB77-2416325D65AB'),
  success?: boolean(name='Success', example='true'),
}

model CreateMetricRuleResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMetricRuleResourcesResponseBody(name='body'),
}

async function createMetricRuleResources(request: CreateMetricRuleResourcesRequest): CreateMetricRuleResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMetricRuleResources', 'POST', '/', 'json', false, 'json', request);
}

model CreateMetricRuleTemplateRequest {
  alertTemplates?: [ 
    {
      escalations: {
        critical: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Critical'),
        info: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Info'),
        warn: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Warn'),
      }(name='Escalations'),
      category: string(name='Category', description='The abbreviation of the Alibaba Cloud service name.

To obtain the abbreviation of an Alibaba Cloud service name, call the [DescribeProjectMeta](~~114916~~) operation. The `metricCategory` tag in the `Labels` response parameter indicates the abbreviation of the Alibaba Cloud service name.', example='ecs'),
      metricName: string(name='MetricName', description='The name of the metric. Valid values of N: 1 to 200.

>  For more information, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~28619~~).', example='cpu_total'),
      namespace: string(name='Namespace', description='The namespace of the cloud service. Valid values of N: 1 to 200.

>  For more information, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~28619~~).', example='acs_ecs_dashboard'),
      period?: int32(name='Period', description='The aggregation period of monitoring data. Unit: seconds.

The default value is the minimum aggregation period. Generally, you do not need to specify the minimum aggregation period.

Valid values of N: 1 to 200.', example='60'),
      ruleName: string(name='RuleName', description='The name of the alert rule. Valid values of N: 1 to 200.'),
      selector?: string(name='Selector', description='The extended field selectors. Valid values of N: 1 to 200.', example='{"disk":"/"}'),
      webhook?: string(name='Webhook', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='http://ww.aliyun.com'),
    }
  ](name='AlertTemplates', position='Query'),
  description?: string(name='Description', description='The description of the alert template.', example='ECS_Template1', position='Query'),
  name: string(name='Name', description='The name of the alert template.', example='Template1', position='Query'),
}

model CreateMetricRuleTemplateResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  id?: long(name='Id', description='The ID of the alert template.', example='12345'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9763ED1A-4D09-41BF-851E-310421750204'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model CreateMetricRuleTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMetricRuleTemplateResponseBody(name='body'),
}

async function createMetricRuleTemplate(request: CreateMetricRuleTemplateRequest): CreateMetricRuleTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMetricRuleTemplate', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorAgentProcessRequest {
  instanceId: string(name='InstanceId', description='The user who launches the process.', example='i-2ze2d6j5uhg20x47****', position='Query'),
  processName: string(name='ProcessName', description='The ID of the instance.', example='AliYunDun', position='Query'),
  processUser?: string(name='ProcessUser', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='admin', position='Query'),
}

model CreateMonitorAgentProcessResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  id?: long(name='Id', example='123456'),
  message?: string(name='Message', description='The ID of the request.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='971CC023-5A96-452A-BB7C-2483F948BCFD'),
  success?: boolean(name='Success', description='The ID of the process.', example='true'),
}

model CreateMonitorAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorAgentProcessResponseBody(name='body'),
}

async function createMonitorAgentProcess(request: CreateMonitorAgentProcessRequest): CreateMonitorAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupRequest {
  contactGroups?: string(name='ContactGroups', description='The ID of the request.', example='ECS_Alert_Group', position='Query'),
  groupName: string(name='GroupName', description='The error message.', example='ECS_Group', position='Query'),
}

model CreateMonitorGroupResponseBody = {
  code?: int32(name='Code', description='The ID of the application group.', example='200'),
  groupId?: long(name='GroupId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1234567'),
  message?: string(name='Message', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='In this example, the application group named `ECS_Group` is created.', example='83C89BA6-ABD4-4398-A175-83E86C47A001'),
  success?: boolean(name='Success', example='true'),
}

model CreateMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupResponseBody(name='body'),
}

/**
  * The name of the application group.
  *
 */
async function createMonitorGroup(request: CreateMonitorGroupRequest): CreateMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupByResourceGroupIdRequest {
  contactGroupList: [ string ](name='ContactGroupList', example='ECS_Group', position='Query'),
  enableInstallAgent?: boolean(name='EnableInstallAgent', description='The name of the resource group.

For information about how to obtain the name of a resource group, see [ListResourceGroups](~~158855~~).', example='true', position='Query'),
  enableSubscribeEvent?: boolean(name='EnableSubscribeEvent', description='The operation that you want to perform. Set the value to **CreateMonitorGroupByResourceGroupId**.', example='true', position='Query'),
  regionId: string(name='RegionId', description='The error message.', example='cn-hangzhou', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', description='Specifies whether the application group automatically subscribes to event notifications. If events whose severity level is critical or warning occur on resources in an application group, CloudMonitor sends alert notifications. Valid values:

*   true: The application group automatically subscribes to event notifications.
*   false (default value): The application group does not automatically subscribe to event notifications.', example='rg-acfmw3ty5y7****', position='Query'),
  resourceGroupName: string(name='ResourceGroupName', description='The alert contact group. The alert notifications of the application group are sent to the alert contacts that belong to the specified alert contact groups.

An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](~~114923~~) and [PutContactGroup](~~114929~~). For information about how to obtain alert contact groups, see [DescribeContactGroupList](~~114922~~).', example='CloudMonitor', position='Query'),
}

model CreateMonitorGroupByResourceGroupIdResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  id?: long(name='Id', example='3607****'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='784CAB3C-F613-5BCE-8469-6DCB29B18A20'),
  success?: boolean(name='Success', example='true'),
}

model CreateMonitorGroupByResourceGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupByResourceGroupIdResponseBody(name='body'),
}

/**
  * The ID of the region where the resource group resides.
  * For information about how to obtain the ID of the region where a resource group resides, see [GetResourceGroup](~~158866~~).
  *
 */
async function createMonitorGroupByResourceGroupId(request: CreateMonitorGroupByResourceGroupIdRequest): CreateMonitorGroupByResourceGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroupByResourceGroupId', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupInstancesRequest {
  groupId: string(name='GroupId', description='The ID of the instance.', example='3607****', position='Query'),
  instances: [ 
    {
      category: string(name='Category', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs'),
      instanceId: string(name='InstanceId', description='The ID of the request.', example='i-2ze26xj5wwy12****'),
      instanceName: string(name='InstanceName', description='The name of the instance.', example='test-instance-ecs'),
      regionId: string(name='RegionId', description='The operation that you want to perform. Set the value to **CreateMonitorGroupInstances**.', example='cn-hangzhou'),
    }
  ](name='Instances', position='Query'),
}

model CreateMonitorGroupInstancesResponseBody = {
  code?: int32(name='Code', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='200'),
  message?: string(name='Message', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='1BC69FEB-56CD-4555-A0E2-02536A24A946'),
  success?: boolean(name='Success', example='true'),
}

model CreateMonitorGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupInstancesResponseBody(name='body'),
}

/**
  * The abbreviation of the Alibaba Cloud service name.
  * To obtain the abbreviation of an Alibaba Cloud service name, call the [DescribeProjectMeta](~~114916~~) operation. The `metricCategory` tag in the `Labels` response parameter indicates the abbreviation of the Alibaba Cloud service name.
  *
 */
async function createMonitorGroupInstances(request: CreateMonitorGroupInstancesRequest): CreateMonitorGroupInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroupInstances', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitorGroupNotifyPolicyRequest {
  endTime: long(name='EndTime', description='The ID of the request.', example='1623208500000', position='Query'),
  groupId: string(name='GroupId', description='The HTTP status code.

>  The HTTP status code 200 indicates that the call succeeds.', example='7301****', position='Query'),
  policyType: string(name='PolicyType', description='The timestamp that indicates the end time of the validity period for the policy.

This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='PauseNotify', position='Query'),
  startTime: long(name='StartTime', description='The error message.', example='1622949300000', position='Query'),
}

model CreateMonitorGroupNotifyPolicyResponseBody = {
  code?: string(name='Code', description='The number of entries that are returned.', example='200'),
  message?: string(name='Message', description='Indicates whether the call succeeds. Valid values:

*   true: The call succeeds.
*   false: The call fails.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='If the policy is valid, no alert notifications are sent for the application group.

This topic describes how to create the `PauseNotify` policy to pause alert notifications for the `7301****` application group. The StartTime parameter is set to `1622949300000` and the EndTime parameter is set to `1623208500000`. This indicates that the policy is valid from `2021-06-06 11:15:00 UTC+8` to `2021-06-09 11:15:00 UTC+8`.', example='13356BCA-3EC3-4748-A771-2064DA69AEF1'),
  result?: int32(name='Result', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1'),
  success?: string(name='Success', example='true'),
}

model CreateMonitorGroupNotifyPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitorGroupNotifyPolicyResponseBody(name='body'),
}

/**
  * The type of the policy. Valid value: PauseNotify.
  *
 */
async function createMonitorGroupNotifyPolicy(request: CreateMonitorGroupNotifyPolicyRequest): CreateMonitorGroupNotifyPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitorGroupNotifyPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateMonitoringAgentProcessRequest {
  instanceId: string(name='InstanceId', description='The user who launches the process.', example='i-2ze51wjtwox01r8g****', position='Query'),
  processName?: string(name='ProcessName', description='The ID of the instance.', example='java', position='Query'),
  processUser?: string(name='ProcessUser', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='admin', position='Query'),
}

model CreateMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  id?: long(name='Id', example='12345'),
  message?: string(name='Message', description='The ID of the request.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='0DFCB47D-E7E1-4CBE-A381-8339F7B300EF'),
  success?: boolean(name='Success', description='The ID of the process.', example='true'),
}

model CreateMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMonitoringAgentProcessResponseBody(name='body'),
}

async function createMonitoringAgentProcess(request: CreateMonitoringAgentProcessRequest): CreateMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model CreateSiteMonitorRequest {
  address: string(name='Address', description='The name of the site monitoring task.

The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (\\_).', example='https://www.aliyun.com', position='Query'),
  alertIds?: string(name='AlertIds', description='Indicates whether the existing alert rule was associated with the site monitoring task. Valid values:

*   true
*   false', example='SystemDefault_acs_ecs_dashboard_InternetOutRate_Percent', position='Query'),
  interval?: string(name='Interval', description='The operation that you want to perform. Set the value to **CreateSiteMonitor**.', example='1', position='Query'),
  ispCities?: string(name='IspCities', description='The information of the detection points. If you leave this parameter empty, the system randomly selects three detection points.

The value is a JSON array. Example: `[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]`. The values of the city field indicate Beijing, Hangzhou, and Qingdao.

For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](~~115045~~).', example='[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]', position='Query'),
  optionsJson?: string(name='OptionsJson', description='The returned message.', example='{"time_out":5000}', position='Query'),
  taskName: string(name='TaskName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='HanZhou_ECS1', position='Query'),
  taskType: string(name='TaskType', description='The ID of the alert rule.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='HTTPS', position='Query'),
}

model CreateSiteMonitorResponseBody = {
  code?: string(name='Code', description='The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.', example='200'),
  createResultList?: {
    createResultList?: [ 
    {
      taskId?: string(name='TaskId', example='2c8dbdf9-a3ab-46a1-85a4-f094965e****'),
      taskName?: string(name='TaskName', example='HanZhou_ECS1'),
    }
  ](name='CreateResultList')
  }(name='CreateResultList'),
  data?: {
    attachAlertResult?: {
      contact?: [ 
      {
        code?: string(name='Code', description='The status code that is returned after you associate the existing alert rule with the site monitoring task.

>  The status code 200 indicates that the call was successful.', example='200'),
        message?: string(name='Message', description='The following tables describe the extended options of the HTTP, HTTPS, PING, TCP, UDP, DNS, SMTP. POP3, and FTP protocols specified by the TaskType parameter.  

- HTTP or HTTPS

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| http_method | String | The HTTP or HTTPS request method. Valid values: GET, POST, and HEAD. Default value: GET. |
| header | String | The custom HTTP headers that are separated by line feeds (\\n). 

Each header must comply with the HTTP protocol. Each header must be a key-value pair in which the key and value are separated by a colon (:). |
| cookie | String | The HTTP cookie that is specified in compliance with the HTTP request standard. |
| request_content | String | The content of the request. The content can be in the JSON or form format. If this parameter is not specified, the request body is empty. |
| response_content | String | The expected content of the response. The first 64 bytes of the content returned by the HTTP server are checked during site monitoring. |
| match_rule | String | 0: If the response does not contain the content specified by the response_content parameter, the detection is successful.  

1: If the response contains the content specified by the response_content parameter, the detection is successful. |
| username | String | If the username parameter is specified, the HTTP request contains the basic authentication header. |
| password | String | The password that is used to authenticate the HTTP or HTTPS request. |
| time_out | int | The timeout period. Unit: milliseconds. Default value: 5. |
| max_redirect | int | The maximum number of redirections. The default value is 5 for a detection point that is running on an Elastic Compute Service (ECS) instance and 2 for a detection point that is provided by a carrier.  

To disable redirections, set the value to 0. 

Valid values: 0 to 50. |
- PING

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| failure_rate | Text | If the rate of the failed pings exceeds the value of this parameter, the detection fails and the status code 610 or 615 is returned. The error message of the status code 610 is PingAllFail and the error message of the status code 615 is PingPartialFail. 

Default value: 0.1. |
| ping_num | int | The number of times that the monitored address is pinged. Default value: 10. 

Valid values: 1 to 100. |
- DNS

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| dns_server | string | The domain name or IP address of the Domain Name System (DNS) server. |
| dns_type | string | The type of the DNS records to query. Valid values: A, NS, CNAME, MX, TXT, ANY, and AAAA. |
| expect_value | string | The list of expected values. Separate the expected values with space characters. |
| match_rule | string | The relationship between the list of expected values and the list of DNS results. If the two lists do not meet the specified relationship, the detection fails. Valid values:    

Empty string or IN_DNS: The list of expected values is a subset of the list of DNS results.   

DNS_IN: The list of DNS results is a subset of the list of expected values.    

EQUAL: The list of DNS results is the same as the list of expected values.   

ANY: The list of DNS results intersects with the list of expected values. |
- FTP

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| port | int | The port number of the FTP server. If this parameter is not specified, the default value is used. The default port number is 21 for FTP and 990 for FTPS. |
| username | string | The username that is used to log on to the FTP server.  If this parameter is not specified, anonymous logon is used. |
| password | string | The password that is used to log on to the FTP server. |
- POP3 or SMTP

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| port | int | The port number of the POP3 or SMTP server. The default port number is 110 for POP3, 995 for POPS3, and 25 for SMTP. |
| username | string | The username that is used to log on to the POP3 or SMTP server. The username and password that are used to log on to the POP3 or SMTP server are required. |
| password | string | The password that is used to log on to the POP3 or SMTP server. The username and password that are used to log on to the POP3 or SMTP server are required. |
- TCP or UDP

| Parameter | Type | Description |
| --------- | ---- | ----------- |
| port | int | The port number of the TCP or UDP server. |
| request_content | string | The content of the request. If the request_format parameter is set to hex, the value of the request_content parameter is parsed in the hexadecimal format. |
| request_format | string | If the request_format parameter is set to another value, the value of the request_content parameter is sent to the TCP or UDP server as a regular string. |
| response_content | string | The content of the response. If the response from the TCP or UDP server does not contain the content specified by the response_content parameter, the detection fails.  

If the response_format parameter is set to hex, the value of the response_content parameter is parsed in the hexadecimal format.  

If the response_format parameter is set to another value, the value of the response_content parameter is parsed as a regular string. |', example='successful'),
        requestId?: string(name='RequestId', description='Creates a site monitoring task.', example='5dd33455-4f65-4b0c-9200-33d66f3f340b'),
        ruleId?: string(name='RuleId', example='SystemDefault_acs_ecs_dashboard_InternetOutRate_Percent'),
        success?: string(name='Success', example='true'),
      }
    ](name='Contact')
    }(name='AttachAlertResult', description='The ID of the request.'),
  }(name='Data', description='The result of the site monitoring task.'),
  message?: string(name='Message', description='The URL or IP address that is monitored by the task.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the alert rule.', example='68192f5d-0d45-4b98-9724-892813f86c71'),
  success?: string(name='Success', description='The interval at which detection requests are sent.

Valid values: 1, 5, 15, 30, and 60. Unit: minutes.

Default value: 1.', example='true'),
}

model CreateSiteMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSiteMonitorResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function createSiteMonitor(request: CreateSiteMonitorRequest): CreateSiteMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSiteMonitor', 'POST', '/', 'json', false, 'json', request);
}

model CursorRequest {
  endTime?: string(name='EndTime', example='1641645000000', position='Body'),
  matchers?: [
    Matcher
  ](name='Matchers', shrink='json', position='Body'),
  metric: string(name='Metric', example='cpu_idle', position='Body'),
  namespace: string(name='Namespace', example='acs_ecs_dashboard', position='Body'),
  period: int32(name='Period', example='60', position='Body'),
  startTime: string(name='StartTime', example='1641627000000', position='Body'),
}

model CursorResponseBody = {
  code?: int32(name='Code', example='200'),
  cursor?: string(name='Cursor', example='v2.5eyJiYXRjaGVzIjoxLCJidWNrZXRCeXRlcyI6IndBPT0iLCJidWNrZXRzIjo0LCJjdXJyZW50QnVja2V0IjotNjQsImN1cnJlbnRUYXJnZXRUaW1lU2xvdCI6MTY3ODc1MjAwMCwiZW5kVGltZSI6MTY3ODc4MjQxOTAwMCwiZXhwb3J0RW5kVGltZSI6MTY3ODc4MjQxOTAwMCwiZXhwb3J0U3RhcnRUaW1lIjoxNjc4NzgxODE5MDAwLCJleHByZXNzUmFuZ2UiOmZhbHNlLCJoYXNOZXh0Ijp0cnVlLCJpbmRleCI6MCwibGF0ZXN0TG9nVGltZSI6MCwibWF0Y2hlcnMiOnsiY2hhaW4iOlt7ImxhYmVsIjoidXNlcklkIiwib3BlcmF0b3IiOiJFUVVBTFMiLCJ2YWx1ZSI6IjEyNzA2NzY2Nzk1NDY3MDQifV0sImxvY2tlZCI6dHJ1ZX0sIm1ldHJpYyI6IlNwbGl0cndQcm94eU1heFJlc3BvbnNlU2l6ZSIsIm1ldHJpY1R5cGUiOiJNRVRSSUMiLCJuYW1lc3BhY2UiOiJhY3Nfa3ZzdG9yZV9leCIsIm5leHRQa0FkYXB0ZXIiOnsiZGltIjoiVjowXG5EOmB1c2VySWRgPTEyNzA2NzY2Nzk1NDY3MDQsYGluc3RhbmNlSWRgPXItcmo5ZjlzMTlsc3V1MXd1bnVyLGBub2RlSWRgPXItcmo5ZjlzMTlsc3V1MXd1bnVyLXByb3h5LTIsXG4iLCJtZXRhIjoiXG5WOjBcbk06YWNzX2t2c3RvcmVfZXgvU3BsaXRyd1Byb3h5TWF4UmVzcG9uc2VTaXplXG5XOjYwXG5COjRcbkk6LTFcblQ6MFxuQzpgQXZlcmFnZWAsYE1heGltdW1gLGBfX2NvdW50X19gLGBfX3RzX19gXG4iLCJyZCI6InN1YkFMU0RwWXY2K0t6aENQQUFBWkErNUFKMEpjbGErRGd2V0hFNWxDSHMvbGtqR2FXYTFJTkVwdFE9PSIsInRhZyI6IiJ9LCJvZmZzZXQiOjAsIm9mZnNldERpZ2l0Ijo0NTU0NTczNDQyMTc4NDIxMjIsInN0YXJ0VGltZSI6MTY3ODc4MTgxOTAwMCwic3RlcCI6LTEsInRhZ01hdGNoZXJzIjp7ImNoYWluIjpbXSwibG9ja2VkIjp0cnVlfSwidGFyZ2V0VGltZVNsb3RzIjpbMTY3ODY2NTYwMCwxNjc4NzUyMDAwXSwidXVpZCI6ImQwMmFhZmY1LWU3ZGQtNDUyYy0***********'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='915C2D7A-E6A4-17C3-8E13-4DBDD61E7919'),
  success?: boolean(name='Success', example='true'),
}

model CursorResponse = {
  headers: map[string]string(name='headers'),
  body: CursorResponseBody(name='body'),
}

async function cursor(request: CursorRequest): CursorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Cursor', 'POST', '/', 'json', true, 'form', request);
}

model DeleteContactRequest {
  contactName: string(name='ContactName', description='test-01', example='The HTTP status code.

>  The status code 200 indicates that the call was successful.', position='Query'),
}

model DeleteContactResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='50D4CFE1-01E5-4543-939C-18BC01E3EC1C'),
  success?: boolean(name='Success', description='Deletes an alert contact.', example='true'),
}

model DeleteContactResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteContactResponseBody(name='body'),
}

async function deleteContact(request: DeleteContactRequest): DeleteContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContact', 'POST', '/', 'json', false, 'json', request);
}

model DeleteContactGroupRequest {
  contactGroupName: string(name='ContactGroupName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='The returned message.', position='Query'),
}

model DeleteContactGroupResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='success'),
  requestId?: string(name='RequestId', example='F722BE59-2400-4A64-9C1A-AD886AED9A69'),
  success?: boolean(name='Success', example='true'),
}

model DeleteContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteContactGroupResponseBody(name='body'),
}

async function deleteContactGroup(request: DeleteContactGroupRequest): DeleteContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomMetricRequest {
  groupId: string(name='GroupId', description='The ID of the application group.', example='3607****', position='Query'),
  md5?: string(name='Md5', description='The MD5 value of the HTTP request body. The MD5 value is a 128-bit hash value used to verify the uniqueness of the reported monitoring data.

>  `Md5` is returned when you query the reported monitoring data of a metric.', example='38796C8CFFEB8F89BB2A626C7BD7****', position='Query'),
  metricName: string(name='MetricName', description='The name of the metric.', example='AdvanceCredit', position='Query'),
  UUID?: string(name='UUID', description='The ID of the request for reporting monitoring data.

>  `UUID` is returned when you query the reported monitoring data of a metric. We recommend that you specify the `Md5` parameter.', example='5497633c-66c5-4eae-abaa-89db5adb****', position='Query'),
}

model DeleteCustomMetricResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='05B36C2C-5F6E-48D5-8B41-CE36DD7EE8E0'),
}

model DeleteCustomMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCustomMetricResponseBody(name='body'),
}

async function deleteCustomMetric(request: DeleteCustomMetricRequest): DeleteCustomMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomMetric', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDynamicTagGroupRequest {
  dynamicTagRuleId: string(name='DynamicTagRuleId', description='The ID of the request.', example='6b882d9a-5117-42e2-9d0c-4749a0c6****', position='Query'),
}

model DeleteDynamicTagGroupResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteDynamicTagGroup**.', example='200'),
  message?: string(name='Message', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='08AAE67E-77B5-485B-9C79-D7C8C059150A'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDynamicTagGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDynamicTagGroupResponseBody(name='body'),
}

async function deleteDynamicTagGroup(request: DeleteDynamicTagGroupRequest): DeleteDynamicTagGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDynamicTagGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventRuleTargetsRequest {
  ids: [ string ](name='Ids', example='1', position='Query'),
  ruleName: string(name='RuleName', description='The ID of the target. Valid values of N: 1 to 20.', example='testRule', position='Query'),
}

model DeleteEventRuleTargetsResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='Success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='7ADD7EFB-7555-4EC1-A3D9-F9955C189CCF'),
  success?: boolean(name='Success', description='Deletes the targets to which alert notifications are sent based on an event-triggered alert rule.', example='true'),
}

model DeleteEventRuleTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRuleTargetsResponseBody(name='body'),
}

async function deleteEventRuleTargets(request: DeleteEventRuleTargetsRequest): DeleteEventRuleTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventRuleTargets', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEventRulesRequest {
  ruleNames: [ string ](name='RuleNames', example='rule1', position='Query'),
}

model DeleteEventRulesResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='E5A72B5B-4F44-438C-B68A-147FD5DC53A8'),
  success?: boolean(name='Success', description='Deletes one or more event-triggered alert rules.', example='true'),
}

model DeleteEventRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEventRulesResponseBody(name='body'),
}

async function deleteEventRules(request: DeleteEventRulesRequest): DeleteEventRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEventRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExporterOutputRequest {
  destName: string(name='DestName', description='The name of the configuration set.', example='testName', position='Query'),
}

model DeleteExporterOutputResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  message?: string(name='Message', description='The returned message.', example='Success'),
  requestId?: string(name='RequestId', description='The request ID.', example='2DECF751-7AFA-43BB-8C63-2B6B07E51AE1'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model DeleteExporterOutputResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteExporterOutputResponseBody(name='body'),
}

async function deleteExporterOutput(request: DeleteExporterOutputRequest): DeleteExporterOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExporterOutput', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExporterRuleRequest {
  ruleName: string(name='RuleName', description='The name of the data export rule.', example='myRuleName', position='Query'),
}

model DeleteExporterRuleResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A5F022D-AC7C-460E-94AE-B9E75083D023'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
}

model DeleteExporterRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteExporterRuleResponseBody(name='body'),
}

async function deleteExporterRule(request: DeleteExporterRuleRequest): DeleteExporterRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExporterRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupMonitoringAgentProcessRequest {
  groupId: string(name='GroupId', description='The ID of the process monitoring task.', example='123456', position='Query'),
  id: string(name='Id', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='48F83746-C817-478C-9B06-7158F56B****', position='Query'),
}

model DeleteGroupMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='3F6150F9-45C7-43F9-9578-A58B2E726C90'),
  success?: boolean(name='Success', example='true'),
}

model DeleteGroupMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupMonitoringAgentProcessResponseBody(name='body'),
}

async function deleteGroupMonitoringAgentProcess(request: DeleteGroupMonitoringAgentProcessRequest): DeleteGroupMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHostAvailabilityRequest {
  id: [ long ](name='Id', example='12456', position='Query'),
}

model DeleteHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='57C782E6-B235-4842-AD2B-DB94961761EB'),
  success?: boolean(name='Success', description='Deletes one or more availability monitoring tasks.', example='true'),
}

model DeleteHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHostAvailabilityResponseBody(name='body'),
}

async function deleteHostAvailability(request: DeleteHostAvailabilityRequest): DeleteHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHybridMonitorNamespaceRequest {
  namespace: string(name='Namespace', description='The ID of the request.', example='aliyun', position='Query'),
}

model DeleteHybridMonitorNamespaceResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteHybridMonitorNamespace**.', example='Success'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Namespace.NotFound'),
  requestId?: string(name='RequestId', example='3843D23A-FB9E-5DC8-BCCC-458768B79296'),
  success?: string(name='Success', example='true'),
}

model DeleteHybridMonitorNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHybridMonitorNamespaceResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function deleteHybridMonitorNamespace(request: DeleteHybridMonitorNamespaceRequest): DeleteHybridMonitorNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHybridMonitorNamespace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHybridMonitorSLSGroupRequest {
  SLSGroupName: string(name='SLSGroupName', description='The ID of the request.', example='Logstore_test', position='Query'),
}

model DeleteHybridMonitorSLSGroupResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteHybridMonitorSLSGroup**.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='RESOURCE_NOT_FOUND'),
  requestId?: string(name='RequestId', example='85198BFF-1DE6-556E-B6A4-C77C51C62B8D'),
  success?: string(name='Success', example='true'),
}

model DeleteHybridMonitorSLSGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHybridMonitorSLSGroupResponseBody(name='body'),
}

/**
  * Indicates whether the call is successful. Valid values:
  * *   true: The call is successful.
  * *   false: The call fails.
  *
 */
async function deleteHybridMonitorSLSGroup(request: DeleteHybridMonitorSLSGroupRequest): DeleteHybridMonitorSLSGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHybridMonitorSLSGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteHybridMonitorTaskRequest {
  namespace?: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='aliyun', position='Query'),
  targetUserId?: string(name='TargetUserId', description='The ID of the request.', example='120886317861****', position='Query'),
  taskId?: string(name='TaskId', description='The ID of the member account.

>  This parameter is required only if you call this operation to delete metric import tasks that belong to a member in a resource directory. In this case, the `TaskType` parameter is set to `aliyun_fc`.', example='36****', position='Query'),
}

model DeleteHybridMonitorTaskResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteHybridMonitorTask**.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='null'),
  requestId?: string(name='RequestId', example='D6B8103F-7BAD-5FEB-945F-71D991AB8834'),
  success?: string(name='Success', example='true'),
}

model DeleteHybridMonitorTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteHybridMonitorTaskResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function deleteHybridMonitorTask(request: DeleteHybridMonitorTaskRequest): DeleteHybridMonitorTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteHybridMonitorTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteLogMonitorRequest {
  logId: long(name='LogId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='12345', position='Query'),
}

model DeleteLogMonitorResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='metric not exist.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='42BFFC2B-5E4D-4FDE-BCC6-E91EE33C5967'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLogMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLogMonitorResponseBody(name='body'),
}

async function deleteLogMonitor(request: DeleteLogMonitorRequest): DeleteLogMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogMonitor', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetricRuleBlackListRequest {
  id: string(name='Id', description='The ID of the request.', example='a9ad2ac2-3ed9-11ed-b878-0242ac12****', position='Query'),
}

model DeleteMetricRuleBlackListResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteMetricRuleBlackList**.', example='200'),
  count?: int32(name='Count', example='1'),
  message?: string(name='Message', description='The number of blacklist policies that are deleted.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='B88D233C-A004-3AB8-AD9C-30CBDD4440C5'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetricRuleBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetricRuleBlackListResponseBody(name='body'),
}

async function deleteMetricRuleBlackList(request: DeleteMetricRuleBlackListRequest): DeleteMetricRuleBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetricRuleBlackList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetricRuleResourcesRequest {
  resources: string(name='Resources', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='[{"instanceId":"i-uf6hm9lnlzsarrc7****"}]', position='Query'),
  ruleId: string(name='RuleId', description='The resources to be disassociated from the alert rule.', example='rr-bp18017n6iolv****', position='Query'),
}

model DeleteMetricRuleResourcesResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The alert does not exist.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='D8A35882-90C6-4F03-BBEB-153C180398EA'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMetricRuleResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetricRuleResourcesResponseBody(name='body'),
}

async function deleteMetricRuleResources(request: DeleteMetricRuleResourcesRequest): DeleteMetricRuleResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetricRuleResources', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetricRuleTargetsRequest {
  ruleId: string(name='RuleId', description='The ID of the message resource. Valid values of N: 1 to 5.', example='ruleId-xxxxxx', position='Query'),
  targetIds: [ string ](name='TargetIds', example='12345', position='Query'),
}

model DeleteMetricRuleTargetsResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  failIds?: {
    targetIds?: {
      targetId?: [ string ](name='TargetId')
    }(name='TargetIds', description='Deletes the message resources of an alert rule. This operation supports only Message Service (MNS) resources.'),
  }(name='FailIds', description='The ID of the message resource that failed to be deleted.'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='786E92D2-AC66-4250-B76F-F1E2FCDDBA1C'),
  success?: boolean(name='Success', description='The message resources that failed to be deleted.', example='true'),
}

model DeleteMetricRuleTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetricRuleTargetsResponseBody(name='body'),
}

async function deleteMetricRuleTargets(request: DeleteMetricRuleTargetsRequest): DeleteMetricRuleTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetricRuleTargets', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetricRuleTemplateRequest {
  templateId: string(name='TemplateId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='123****', position='Query'),
}

model DeleteMetricRuleTemplateResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='7B63F8CF-D48D-4608-A402-04FB5B2B4B6A'),
  resource?: {
    templateId?: string(name='TemplateId', example='123****'),
  }(name='Resource', description='The ID of the template.'),
  success?: boolean(name='Success', description='The information about the alert template.', example='true'),
}

model DeleteMetricRuleTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetricRuleTemplateResponseBody(name='body'),
}

async function deleteMetricRuleTemplate(request: DeleteMetricRuleTemplateRequest): DeleteMetricRuleTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetricRuleTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMetricRulesRequest {
  id: [ string ](name='Id', example='ab05733c97b7ce239fb1b53393dc1697c7e12****', position='Query'),
}

model DeleteMetricRulesResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='E5599964-8D0D-40DC-8E90-27A619384B81'),
  success?: boolean(name='Success', description='Deletes one or more alert rules.', example='true'),
}

model DeleteMetricRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMetricRulesResponseBody(name='body'),
}

async function deleteMetricRules(request: DeleteMetricRulesRequest): DeleteMetricRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMetricRules', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupRequest {
  groupId: long(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='123456', position='Query'),
}

model DeleteMonitorGroupResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  group?: {
    contactGroups?: {
      contactGroup?: [ 
      {
        name?: string(name='Name', description='Deletes an application group.', example='ECS_Group'),
      }
    ](name='ContactGroup')
    }(name='ContactGroups', description='The name of the alert group.'),
    groupName?: string(name='GroupName', description='The alert groups that receive alert notifications for the application group.', example='ECS_test'),
  }(name='Group', description='The name of the application group.'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='CA35B3AE-4FFD-4A33-AE67-67EF68711EFA'),
  success?: boolean(name='Success', description='The deleted application group.', example='true'),
}

model DeleteMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitorGroupResponseBody(name='body'),
}

async function deleteMonitorGroup(request: DeleteMonitorGroupRequest): DeleteMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupDynamicRuleRequest {
  category: string(name='Category', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs', position='Query'),
  groupId: long(name='GroupId', description='The service to which the rule applies. Valid values: ecs, rds, and slb.', example='123456', position='Query'),
}

model DeleteMonitorGroupDynamicRuleResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='56B4516A-EB44-4C66-8854-0393B35F636B'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMonitorGroupDynamicRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitorGroupDynamicRuleResponseBody(name='body'),
}

async function deleteMonitorGroupDynamicRule(request: DeleteMonitorGroupDynamicRuleRequest): DeleteMonitorGroupDynamicRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroupDynamicRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupInstancesRequest {
  category: string(name='Category', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs', position='Query'),
  groupId: long(name='GroupId', description='The instances to be removed from the application group. Separate multiple instances with commas (,). You can remove a maximum of 20 instances from an application group at a time.', example='123456', position='Query'),
  instanceIdList: string(name='InstanceIdList', description='The abbreviation of the service name. Valid values:

*   ECS: Elastic Compute Service (ECS) instances provided by Alibaba Cloud and hosts not provided by Alibaba Cloud
*   RDS: ApsaraDB for RDS
*   ADS: AnalyticDB
*   SLB: Server Load Balancer (SLB)
*   VPC: Virtual Private Cloud (VPC)
*   APIGATEWAY: API Gateway
*   CDN: Alibaba Cloud Content Delivery Network (CDN)
*   CS: Container Service for Swarm
*   DCDN: Dynamic Route for CDN
*   DDoS: Anti-DDoS Pro
*   EIP: Elastic IP Address (EIP)
*   ELASTICSEARCH: Elasticsearch
*   EMR: E-MapReduce
*   ESS: Auto Scaling
*   HBASE: ApsaraDB for Hbase
*   IOT_EDGE: IoT Edge
*   K8S_POD: pods in Container Service for Kubernetes
*   KVSTORE_SHARDING: ApsaraDB for Redis of the cluster architecture
*   KVSTORE_SPLITRW: ApsaraDB for Redis of the read/write splitting architecture
*   KVSTORE_STANDARD: ApsaraDB for Redis of the standard architecture
*   MEMCACHE: ApsaraDB for Memcache
*   MNS: Message Service (MNS)
*   MONGODB: ApsaraDB for MongoDB of the replica set architecture
*   MONGODB_CLUSTER: ApsaraDB for MongoDB of the cluster architecture
*   MONGODB_SHARDING: ApsaraDB for MongoDB of the sharded cluster architecture
*   MQ_TOPIC: MNS topics
*   OCS: ApsaraDB for Memcache of earlier versions
*   OPENSEARCH: Open Search
*   OSS: Object Storage Service (OSS)
*   POLARDB: PolarDB
*   PETADATA: HybridDB for MySQL
*   SCDN: Secure Content Delivery Network (SCDN)
*   SHAREBANDWIDTHPACKAGES: EIP Bandwidth Plan
*   SLS: Log Service
*   VPN: VPN Gateway', example='i-a2d5q7pm3f912****,i-a2d5q7pm3f222****', position='Query'),
}

model DeleteMonitorGroupInstancesResponseBody = {
  code?: int32(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='5351B0F2-26A9-4BC9-87FF-1B74034D12C3'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMonitorGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitorGroupInstancesResponseBody(name='body'),
}

async function deleteMonitorGroupInstances(request: DeleteMonitorGroupInstancesRequest): DeleteMonitorGroupInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroupInstances', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitorGroupNotifyPolicyRequest {
  groupId?: string(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='6780****', position='Query'),
  policyType: string(name='PolicyType', description='The ID of the application group.', example='PauseNotify', position='Query'),
}

model DeleteMonitorGroupNotifyPolicyResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The operation that you want to perform. Set the value to **DeleteMonitorGroupNotifyPolicy**.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='B7AF834D-D38B-4A46-920B-FE974EB7E135'),
  result?: int32(name='Result', example='1'),
  success?: string(name='Success', example='true'),
}

model DeleteMonitorGroupNotifyPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitorGroupNotifyPolicyResponseBody(name='body'),
}

async function deleteMonitorGroupNotifyPolicy(request: DeleteMonitorGroupNotifyPolicyRequest): DeleteMonitorGroupNotifyPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitorGroupNotifyPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteMonitoringAgentProcessRequest {
  instanceId: string(name='InstanceId', description='The ID of the process.

>  You must specify either the `ProcessId` or the `ProcessName` parameter.', example='i-KpVny6l****', position='Query'),
  processId?: string(name='ProcessId', description='The ID of the request.', example='123****', position='Query'),
  processName?: string(name='ProcessName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='http', position='Query'),
}

model DeleteMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **DeleteMonitoringAgentProcess**.', example='200'),
  message?: string(name='Message', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='971CC023-5A96-452A-BB7C-2483F948BCFD'),
  success?: boolean(name='Success', example='true'),
}

model DeleteMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMonitoringAgentProcessResponseBody(name='body'),
}

async function deleteMonitoringAgentProcess(request: DeleteMonitoringAgentProcessRequest): DeleteMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSiteMonitorsRequest {
  isDeleteAlarms?: boolean(name='IsDeleteAlarms', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='true', position='Query'),
  taskIds: string(name='TaskIds', description='Specifies whether to delete the alert rules configured for the site monitoring tasks. Valid values:

*   true (default value)
*   false', example='01adacc2-ece5-41b6-afa2-3143ab5d****,43bd1ead-514f-4524-813e-228ce091****', position='Query'),
}

model DeleteSiteMonitorsResponseBody = {
  code?: string(name='Code', description='The information about the site monitoring tasks that were deleted.', example='200'),
  data?: {
    count?: int32(name='count', example='0'),
  }(name='Data'),
  message?: string(name='Message', description='The ID of the request.', example='The operation that you want to perform. Set the value to **DeleteSiteMonitors**.'),
  requestId?: string(name='RequestId', description='Deletes one or more site monitoring tasks.', example='123BCC5D-8B63-48EA-B747-9A8995BE7AA6'),
  success?: string(name='Success', example='true'),
}

model DeleteSiteMonitorsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSiteMonitorsResponseBody(name='body'),
}

async function deleteSiteMonitors(request: DeleteSiteMonitorsRequest): DeleteSiteMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSiteMonitors', 'POST', '/', 'json', false, 'json', request);
}

model DescribeActiveMetricRuleListRequest {
  product: string(name='Product', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs', position='Query'),
}

model DescribeActiveMetricRuleListResponseBody = {
  alertList?: {
    alert?: [ 
    {
      alertState?: string(name='AlertState', description='The dimensions that specify the resources for which you want to query monitoring data.

The value is a collection of key-value pairs. A typical key-value pair is `instanceId:XXXXXX`.

The key and value must be 1 to 64 bytes in length, respectively. Excessive bytes are truncated from the string.

The key and value can contain letters, digits, periods (.), hyphens (-), underscores (\\_), forward slashes (/), and backslashes (\\\\).

>  Dimensions must be organized in a JSON string and follow the required order.', example='OK'),
      contactGroups?: string(name='ContactGroups', description='The namespace of the service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='ECS_Group'),
      dimensions?: string(name='Dimensions', description='Indicates whether the alert rule is enabled. Valid values:

*   true: The alert rule is enabled.
*   false: The alert rule is disabled.', example='""'),
      effectiveInterval?: string(name='EffectiveInterval', description='The time period during which the alert rule is ineffective.', example='00:00-23:59'),
      enableState?: boolean(name='EnableState', description='The resources that are associated with the alert rule. A one-click alert rule is associated with all resources. The return value is fixed.', example='true'),
      escalations?: {
        critical?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.', example='GreaterThanThreshold'),
          statistics?: string(name='Statistics', description='Queries details about one-click alert rules.', example='Average'),
          threshold?: string(name='Threshold', description='The statistical aggregation method for critical-level alerts.', example='99'),
          times?: string(name='Times', description='The threshold for critical-level alerts.', example='3'),
        }(name='Critical', description='The comparison operator of the threshold for critical-level alerts. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle'),
        info?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The consecutive number of times for which the metric value meets the alert condition before an info-level alert is triggered.', example='GreaterThanThreshold'),
          statistics?: string(name='Statistics', description='The condition for triggering warn-level alerts.', example='Average'),
          threshold?: string(name='Threshold', description='The statistical aggregation method for info-level alerts.', example='95'),
          times?: string(name='Times', description='The threshold for info-level alerts.', example='3'),
        }(name='Info', description='The comparison operator of the threshold for info-level alerts. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle'),
        warn?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The consecutive number of times for which the metric value meets the alert condition before a warn-level alert is triggered.', example='GreaterThanThreshold'),
          statistics?: string(name='Statistics', description='The condition for triggering critical-level alerts.', example='Average'),
          threshold?: string(name='Threshold', description='The statistical aggregation method for warn-level alerts.', example='80'),
          times?: string(name='Times', description='The threshold of warn-level alerts.', example='3'),
        }(name='Warn', description='The comparison operator of the threshold for critical-level alerts. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle'),
      }(name='Escalations', description='The condition for triggering info-level alerts.'),
      mailSubject?: string(name='MailSubject', example='ECS_Bucket'),
      metricName?: string(name='MetricName', description='The callback URL.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The time period during which the alert rule is effective.', example='acs_ecs_dashboard'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', description='The name of the alert rule.', example='00:00-06:00'),
      period?: string(name='Period', description='The status of the alert rule. Valid values:

*   OK: The alert rule has no active alert.
*   ALARM: The alert rule has at least one active alert.
*   INSUFFICIENT_DATA: The alert rule has no data.', example='60'),
      resources?: string(name='Resources', description='The conditions for triggering different levels of alerts.', example='[{"resource":"_ALL"}]'),
      ruleId?: string(name='RuleId', description='The aggregation period of the monitoring data. Unit: seconds. The default value is the minimum aggregation period, indicating that the metric is polled at the highest frequency. Typically, you do not need to specify the minimum aggregation period.', example='ruleIdxxxx'),
      ruleName?: string(name='RuleName', description='The ID of the alert rule.', example='myAlert'),
      silenceTime?: string(name='SilenceTime', description='The name of the metric.', example='86400'),
      webhook?: string(name='Webhook', description='The alert group that receives alert notifications.', example='http://www.aliyun.com'),
    }
  ](name='Alert')
  }(name='AlertList', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.'),
  code?: string(name='Code', description='The returned message.', example='200'),
  datapoints?: {
    alarm?: [ 
    {
      comparisonOperator?: string(name='ComparisonOperator', description='The beginning of the time period during which the alert rule is effective. Unit: hours. For example, the value 23 indicates `23:59:59`.', example='>'),
      contactGroups?: string(name='ContactGroups', description='The namespace of the service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='ECS_Group'),
      enable?: string(name='Enable', description='The details of the alert rules.', example='true'),
      endTime?: string(name='EndTime', description='The end of the time period during which the alert rule is effective. Unit: hours. For example, the value 00 indicates `00:00:00`.', example='24'),
      evaluationCount?: string(name='EvaluationCount', description='The callback URL.', example='3'),
      metricName?: string(name='MetricName', description='The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The name of the alert rule.', example='acs_ecs_dashboard'),
      period?: string(name='Period', description='The comparison operator that is used in the alert rule. Valid values:

*   `>`
*   `<`
*   `>=`
*   `<=`
*   `=`
*   `=`', example='60'),
      ruleId?: string(name='RuleId', description='The aggregation period of the monitoring data. Unit: seconds. The default value is the minimum aggregation period, indicating that the metric is polled at the highest frequency. Typically, you do not need to specify the minimum aggregation period.', example='a151cd6023eacee2f0978e03863cc1697c89508****'),
      ruleName?: string(name='RuleName', description='The ID of the alert rule.', example='SystemDefault_acs_rds_dashboard_CpuUsage'),
      silenceTime?: string(name='SilenceTime', description='The name of the metric.', example='86400'),
      startTime?: string(name='StartTime', description='The threshold of the metric value.', example='00'),
      state?: string(name='State', description='The alert group that receives alert notifications.', example='Enable'),
      statistics?: string(name='Statistics', description='Indicates whether the alert rule is enabled. Valid values:

*   true: The alert rule is enabled.
*   false: The alert rule is disabled.', example='Average'),
      threshold?: string(name='Threshold', description='The statistical aggregation method.', example='90'),
      webhook?: string(name='Webhook', description='Indicates whether the alert rule is enabled.', example='http://www.aliyun.com'),
    }
  ](name='Alarm')
  }(name='Datapoints', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='F82E6667-7811-4BA0-842F-5B2DC42BBAAD'),
  success?: boolean(name='Success', description='The details of the alert rules.', example='true'),
}

model DescribeActiveMetricRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeActiveMetricRuleListResponseBody(name='body'),
}

async function describeActiveMetricRuleList(request: DescribeActiveMetricRuleListRequest): DescribeActiveMetricRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeActiveMetricRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertHistoryListRequest {
  ascending?: boolean(name='Ascending', description='The order of alerts. Valid values:

*   true (default value): reverse chronological order
*   false: chronological order', example='true', position='Query'),
  endTime?: string(name='EndTime', description='The end timestamp of the historical alerts that you want to query.

Unit: milliseconds.', example='1640608200000', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group.

For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='7671****', position='Query'),
  metricName?: string(name='MetricName', description='The metric that is used to monitor the cloud service.

For information about how to query the name of a metric, see [Appendix 1: Metrics](~~163515~~).', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cloud service.

For information about how to query the namespace of a cloud service, see [Appendix 1: Metrics](~~163515~~).', example='acs_ecs_dashboard', position='Query'),
  page?: int32(name='Page', description='The number of the page to return.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Default value: 10.', example='10', position='Query'),
  ruleId?: string(name='RuleId', description='The ID of the alert rule.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='applyTemplate61dc81b5-d357-4cf6-a9b7-9f83c1d5****', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the alert rule.

For information about how to query the name of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='ECS_Rule', position='Query'),
  startTime?: string(name='StartTime', description='The start timestamp of the historical alerts that you want to query.

Unit: milliseconds.', example='1640237400000', position='Query'),
  state?: string(name='State', description='The status of the alert. Valid values:

*   ALARM (default value): Alerts are triggered.
*   OK: No alerts are triggered.', example='ALARM', position='Query'),
  status?: string(name='Status', description='Specifies whether alerts are muted. Valid values:

*   2 (default value): Alerts are muted and are not triggered within the mute period, even if the condition specified in the alert rule is met.
*   0: Alerts are triggered or cleared.
*   1: The alert rule is ineffective.', example='2', position='Query'),
}

model DescribeAlertHistoryListResponseBody = {
  alarmHistoryList?: {
    alarmHistory?: [ 
    {
      alertTime?: long(name='AlertTime', description='The timestamp when the alert was triggered. Unit: milliseconds.', example='1640586600000'),
      contactALIIMs?: {
        contactALIIM?: [ string ](name='ContactALIIM')
      }(name='ContactALIIMs', description='The TradeManager IDs of the alert contacts.

> This parameter is valid only on the China site (aliyun.com).'),
      contactGroups?: {
        contactGroup?: [ string ](name='ContactGroup')
      }(name='ContactGroups', description='The alert contact groups.'),
      contactMails?: {
        contactMail?: [ string ](name='ContactMail')
      }(name='ContactMails', description='The email addresses of the alert contacts.'),
      contactSmses?: {
        contactSms?: [ string ](name='ContactSms')
      }(name='ContactSmses', description='The mobile numbers of the alert contacts.

> This parameter is valid only on the China site (aliyun.com).'),
      contacts?: {
        contact?: [ string ](name='Contact')
      }(name='Contacts', description='The alert contacts that receive alert notifications.'),
      dimensions?: string(name='Dimensions', description='The resources that are monitored.', example='{\\"instanceId\\":\\"i-bp1cqhiw1za2****\\"}'),
      evaluationCount?: int32(name='EvaluationCount', description='The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.', example='3'),
      expression?: string(name='Expression', description='The expression that is used to trigger alerts.', example='$Average>=10'),
      groupId?: string(name='GroupId', description='The ID of the application group.', example='7671****'),
      instanceName?: string(name='InstanceName', description='The instance name.', example='i-bp1cqhiw1za2****'),
      lastTime?: long(name='LastTime', description='The duration of the alert. Unit: milliseconds.', example='360133'),
      level?: string(name='Level', description='The severity level and notification methods of the alert. Valid values:

*   P4: Alert notifications are sent by using emails and DingTalk chatbots.
*   OK: No alert is generated.', example='P4'),
      metricName?: string(name='MetricName', description='The metric name.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The namespace of the cloud service.', example='acs_ecs_dashboard'),
      ruleId?: string(name='RuleId', description='The ID of the alert rule.', example='applyTemplate61dc81b5-d357-4cf6-a9b7-9f83c1d5****'),
      ruleName?: string(name='RuleName', description='The name of the alert rule.', example='ECS_Rule'),
      state?: string(name='State', description='The alert status. Valid values:

*   ALARM: Alerts are triggered.
*   OK: No alerts are triggered.', example='ALARM'),
      status?: int32(name='Status', description='Indicates whether alerts are muted. Valid values:

*   2 (default): Alerts are muted and are not triggered within the mute period, even if the condition specified in the alert rule is met.
*   0: Alerts are triggered or cleared.
*   1: The alert rule is ineffective.', example='2'),
      value?: string(name='Value', description='The threshold of the metric value to trigger or clear an alert.', example='10.58'),
      webhooks?: string(name='Webhooks', description='The callback URL.', example='https://www.aliyun.com'),
    }
  ](name='AlarmHistory')
  }(name='AlarmHistoryList', description='The details of historical alerts.'),
  code?: string(name='Code', description='The status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C3C69FBE-2262-541F-A409-C52F380BAE63'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  total?: string(name='Total', description='The total number of entries returned.', example='2'),
}

model DescribeAlertHistoryListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertHistoryListResponseBody(name='body'),
}

/**
  * @deprecated
  * This API operation is no longer maintained. We recommend that you call the [DescribeAlertLogList](~~201087~~) operation.
  *
 */
// Deprecated
async function describeAlertHistoryList(request: DescribeAlertHistoryListRequest): DescribeAlertHistoryListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertHistoryList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertLogCountRequest {
  contactGroup?: string(name='ContactGroup', description='The alert group.', example='ECS_Group', position='Query'),
  endTime?: long(name='EndTime', description='The statistical period of alert logs. Unit: minutes.', example='1610074409694', position='Query'),
  groupBy: string(name='GroupBy', description='The dimension based on which data is aggregated. This parameter is similar to the Group By clause of SQL statements. Valid values:

*   `product`: aggregates data by cloud service.
*   `level`: aggregates data by alert level.
*   `groupId`: aggregates data by application group.
*   `contactGroup`: aggregates data by alert group.
*   `product,metricName`: aggregates data both by cloud service and by metric.', example='product', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group.', example='7301****', position='Query'),
  lastMin?: string(name='LastMin', description='The statistical period of alert logs. Unit: minutes.', example='360', position='Query'),
  level?: string(name='Level', description='The level and notification method of the alert. Valid values:

*   P4: Alert notifications are sent by using emails and DingTalk chatbots.
*   OK: No alert is generated.', example='P4', position='Query'),
  metricName?: string(name='MetricName', description='The name of the metric.

>  For more information about the metrics of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cloud service.

>  For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='acs_ecs_dashboard', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL. Valid values:

*   `product`: aggregates data by cloud service.
*   `level`: aggregates data by alert level.
*   `groupId`: aggregates data by application group.
*   `contactGroup`: aggregates data by alert contact group.
*   `product,metricName`: aggregates data both by cloud service and by metric.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
  product?: string(name='Product', description='The abbreviation of the service name.', example='ECS', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the alert rule.', example='test123', position='Query'),
  searchKey?: string(name='SearchKey', description='The keyword based on which the alert logs to be counted are searched.', example='test', position='Query'),
  sendStatus?: string(name='SendStatus', description='The status of the alert. Valid values:

*   0: The alert is triggered or cleared.
*   1: The alert is generated not during the effective period.
*   2: The alert is muted and not triggered in a specified period.
*   3: The host is restarting.
*   4: Notifications are not sent for the alert.

When the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.', example='0', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  startTime?: long(name='StartTime', description='The name of the metric.

> For more information about the metrics of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='1609988009694', position='Query'),
}

model DescribeAlertLogCountResponseBody = {
  alertLogCount?: [ 
    {
      count?: int32(name='Count', description='The number of alert logs.', example='1'),
      logs?: [ 
        {
          name?: string(name='Name', description='The name of the dimension field based on which alert logs are aggregated.', example='product'),
          value?: string(name='Value', description='The value of the dimension field based on which alert logs are aggregated.', example='ECS'),
        }
      ](name='Logs', description='The details about alert logs.'),
    }
  ](name='AlertLogCount', description='The statistics of alert logs.'),
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The request ID.', example='1C4A3709-BF52-42EE-87B5-7435F0929585'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeAlertLogCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertLogCountResponseBody(name='body'),
}

/**
  * This topic provides an example to show how to query the statistics of alert logs for Elastic Compute Service (ECS) based on the `product` dimension.
  *
 */
async function describeAlertLogCount(request: DescribeAlertLogCountRequest): DescribeAlertLogCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertLogCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertLogHistogramRequest {
  contactGroup?: string(name='ContactGroup', description='The name of the metric.

>  For more information about the metrics of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='ECS_Group', position='Query'),
  endTime?: long(name='EndTime', description='The number of entries to return on each page. Default value: 10.', example='1609989009694', position='Query'),
  groupBy?: string(name='GroupBy', description='The error message.', example='product', position='Query'),
  groupId?: string(name='GroupId', description='The namespace of the cloud service.

>  For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='7301****', position='Query'),
  lastMin?: string(name='LastMin', description='The HTTP status code.

>  The HTTP status code 200 indicates a success.', example='360', position='Query'),
  level?: string(name='Level', description='The alert group.', example='P4', position='Query'),
  metricName?: string(name='MetricName', description='The dimension based on which data is aggregated. This parameter is similar to the Group By clause of SQL statements. Valid values:

*   `product`: aggregates data by cloud service.
*   `level`: aggregates data by alert level.
*   `groupId`: aggregates data by application group.
*   `contactGroup`: aggregates data by alert group.
*   `product,metricName`: aggregates data both by cloud service and by metric.', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The status of the alert. Valid values:

*   0: The alert is triggered or cleared.
*   1: The alert is generated not during the effective period.
*   2: The alert is muted and not triggered in a specified period.
*   3: The host is restarting.
*   4: Notifications are not sent for the alert.

When the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.', example='acs_ecs_dashboard', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The keyword based on which the alert logs to be queried are searched.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The ID of the application group.', example='10', position='Query'),
  product?: string(name='Product', description='The level and notification method of the alert. Valid values:

*   P4: Alert notifications are sent by using emails and DingTalk chatbots.
*   OK: No alert is generated.', example='ECS', position='Query'),
  ruleName?: string(name='RuleName', description='The statistical period of alert logs. Unit: minutes.', example='test123', position='Query'),
  searchKey?: string(name='SearchKey', description='The abbreviation of the service name.', example='alert', position='Query'),
  sendStatus?: string(name='SendStatus', description='The name of the alert rule.', example='0', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  startTime?: long(name='StartTime', description='The number of the page to return. Default value: 1', example='1609988009694', position='Query'),
}

model DescribeAlertLogHistogramResponseBody = {
  alertLogHistogramList?: [ 
    {
      count?: int32(name='Count', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='20'),
      from?: long(name='From', description='The number of alert logs.', example='1610074791'),
      to?: long(name='To', description='This topic provides an example on how to query the number of alert logs of Elastic Compute Service (ECS) from the cloud service dimension.', example='1610074800'),
    }
  ](name='AlertLogHistogramList', description='The end timestamp of queried alert logs in an interval. Unit: seconds.'),
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The details about the number of alert logs that were generated during each interval of a time period.', example='1C4A3709-BF52-42EE-87B5-7435F0929585'),
  success?: boolean(name='Success', description='The start timestamp of queried alert logs in an interval. Unit: seconds.', example='true'),
}

model DescribeAlertLogHistogramResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertLogHistogramResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeAlertLogHistogram.
  *
 */
async function describeAlertLogHistogram(request: DescribeAlertLogHistogramRequest): DescribeAlertLogHistogramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertLogHistogram', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertLogListRequest {
  contactGroup?: string(name='ContactGroup', description='The start timestamp of the alert logs to be queried. Unit: milliseconds.', example='ECS_Group', position='Query'),
  endTime?: long(name='EndTime', description='The alert contact group.', example='1610074409694', position='Query'),
  groupBy?: string(name='GroupBy', description='The alert information in a JSON string.', example='product', position='Query'),
  groupId?: string(name='GroupId', description='The operation that you want to perform. Set the value to **DescribeAlertLogList**.', example='7301****', position='Query'),
  lastMin?: string(name='LastMin', description='The name of the blacklist policy.', example='360', position='Query'),
  level?: string(name='Level', description='The webhook URLs of alert contacts.', example='P4', position='Query'),
  metricName?: string(name='MetricName', description='The message returned for the alert callback.', example='IntranetInRate', position='Query'),
  namespace?: string(name='Namespace', description='Indicates whether the call was successful.

*   true: The call was successful.
*   false: The call failed.', example='acs_ecs_dashboard', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The severity level and notification methods of the alert. Valid values:

*   P4: Alert notifications are sent by using emails and DingTalk chatbots.

<!---->

*   OK: No alert is generated.', example='10', position='Query'),
  product?: string(name='Product', description='The email addresses of alert contacts.', example='ECS', position='Query'),
  ruleId?: string(name='RuleId', description='The phone numbers of alert contacts that can receive alert text messages.

>  This parameter can be returned only on the China site (aliyun.com).', example='bc369e8_30f87e517ed2fc****', position='Query'),
  ruleName?: string(name='RuleName', description='The identifier of the cloud service. Valid values:

*   If the cloud service is provided by Alibaba Cloud, the abbreviation of the service name is returned. Example: ECS.
*   If the cloud service is not provided by Alibaba Cloud, a value in the `acs_Service keyword` format is returned. Example: acs_networkmonitor.', example='test123', position='Query'),
  searchKey?: string(name='SearchKey', description='The ID of the log.', example='alert', position='Query'),
  sendStatus?: string(name='SendStatus', description='The sending results of alert notifications.', example='0', position='Query'),
  sourceType?: string(name='SourceType', position='Query'),
  startTime?: long(name='StartTime', description='Indicates whether the alert level was changed. Valid values:

*   `P4->OK`: The alert level was changed from P4 to OK.
*   `P4->P4`: The alert level was still P4.', example='1609988009694', position='Query'),
}

model DescribeAlertLogListResponseBody = {
  alertLogList?: [ 
    {
      alertTime?: string(name='AlertTime', description='The details of the blacklist policy.', example='1610043776621'),
      blackListDetail?: string(name='BlackListDetail', description='The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL. Valid values:

*   `product`: aggregates data by cloud service.
*   `level`: aggregates data by alert level.
*   `groupId`: aggregates data by application group.
*   `contactGroup`: aggregates data by alert contact group.
*   `product,metricName`: aggregates data both by cloud service and by metric.', example='BlackListDetail'),
      blackListName?: string(name='BlackListName', description='The number of entries to return on each page. Default value: 10.', example='{"id":123,"metricProject":"acs_ecs_dashboard","userId":1736511134389110,"uuid":"8410dbbd-7d30-41c5-94cb-***","name":"alert-***","productCategory":"ecs","instances":[{"instanceId":"host-***"}],"metrics":null,"scopeType":"USER","scopeValue":"","startTime":"0001-01-01T00:00:00Z","endTime":"9999-12-31T23:59:59.999999999+08:00","effectiveTime":null,"isEnable":true,"status":1,"gmtCreate":"2021-11-02T16:35:59+08:00","gmtModified":"2021-11-02T16:35:59+08:00","loadTime":"2021-11-02T16:36:15.213072177+08:00"}'),
      blackListUUID?: string(name='BlackListUUID', description='The category of the alert notification method. Valid values:

*   Mail: email
*   ALIIM: TradeManager
*   SMS: text message
*   CALL: phone call
*   DING: DingTalk chatbot
*   Merged: alert merging', example='8410dbbd-7d30-41c5-94cb-*****'),
      contactALIIWWList?: [ string ](name='ContactALIIWWList', description='The name of the extended field.'),
      contactDingList?: [ string ](name='ContactDingList', description='The abbreviation of the Alibaba Cloud service name.'),
      contactGroups?: [ string ](name='ContactGroups', description='The alert notification method.'),
      contactMailList?: [ string ](name='ContactMailList', description='The callback URL.'),
      contactOnCallList?: [ string ](name='ContactOnCallList', description='The name of the resource.'),
      contactSMSList?: [ string ](name='ContactSMSList', description='The statistical period of alert logs. Unit: minutes.'),
      dimensions?: [ 
        {
          key?: string(name='Key', description='The list of sending results that are categorized by notification method.', example='instanceId'),
          value?: string(name='Value', description='The ID of the blacklist policy.', example='i-m5e1qg6uo38rztr4****'),
        }
      ](name='Dimensions', description='The status of the alert. Valid values:

*   0: The alert is triggered or cleared.
*   1: The alert is ineffective.
*   2: The alert is muted and not triggered in a specified period.
*   3: The host is restarting.
*   4: No alert notification is sent.

If the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.'),
      dingdingWebhookList?: [ string ](name='DingdingWebhookList', description='The ID of the application group.'),
      escalation?: {
        expression?: string(name='Expression', example='$Average<90'),
        level?: string(name='Level', example='P4'),
        times?: int32(name='Times', example='1'),
      }(name='Escalation'),
      eventName?: string(name='EventName', description='The number of the page to return. Default value: 1.', example='IOHang'),
      extendedInfo?: [ 
        {
          name?: string(name='Name', description='The name of the event.', example='userId'),
          value?: string(name='Value', description='The method that is used to send alert notifications. Valid values:

*   MAIL: email
*   SMS: text message
*   WEBHOOK: alert callback
*   SLS: Log Service
*   ONCALL: phone call
*   FC: Function Compute
*   MNS: Message Service queue', example='120886317861****'),
        }
      ](name='ExtendedInfo', description='The sending results of alert notifications.'),
      groupId?: string(name='GroupId', description='The number of entries returned per page.', example='7301****'),
      groupName?: string(name='GroupName', description='The ID of the alert rule.', example='ECS_Instances'),
      instanceId?: string(name='InstanceId', description='The alert contact group.', example='i-m5e1qg6uo38rztr4****'),
      instanceName?: string(name='InstanceName', description='The list of callback URLs.', example='portalHost'),
      level?: string(name='Level', description='The HTTP status code.

*   If the value of the `Channel` parameter is `WEBHOOK`, the status code is 200 or 500.
*   If the value of the `Channel` parameter is `MAIL`, `SMS`, `SLS`, `ONCALL`, `FC`, or `MNS`, this parameter is empty or not returned.', example='P4'),
      levelChange?: string(name='LevelChange', description='The key of the dimension.', example='P4->OK'),
      logId?: string(name='LogId', example='7818361[1523]@1671593992[1]'),
      message?: string(name='Message', description='The name of the alert rule.', example='{"alertName":"e47aa0ac-4076-44db-a47d-d1083968****_Availability"}'),
      metricName?: string(name='MetricName', description='The name of the metric.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The dimensions of the resource that triggered alerts.', example='acs_ecs_dashboard'),
      product?: string(name='Product', description='Indicates whether the alert notifications are sent.

*   If the alert notifications are sent, the value "success" is returned.
*   If the configuration is invalid, no alert notification is sent and an error code is returned.', example='ECS'),
      ruleId?: string(name='RuleId', description='The phone numbers of alert contacts that can receive alert phone calls.

>  This parameter can be returned only on the China site (aliyun.com).', example='d582b9e9-b1c1-4f17-9279-0fe7333a****_ResponseTime'),
      ruleName?: string(name='RuleName', description='The ID of the resource.'),
      sendDetail?: {
        channelResultList?: [ 
          {
            channel?: string(name='Channel', description='The queried resources.', example='MAIL'),
            resultList?: [ 
              {
                code?: string(name='Code', description='The severity level and notification methods of the alert. Valid values:

*   P4: Alert notifications are sent by using emails and DingTalk chatbots.

<!---->

*   OK: No alert is generated.', example='200'),
                detail?: string(name='Detail', description='The name of the application group.', example='{ }'),
                requestId?: string(name='RequestId', description='The ID of the alert rule.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='0BDAF8A8-04DC-5F0C-90E4-724D42C4****'),
                success?: boolean(name='Success', description='The page number of the returned page.', example='true'),
                notifyTargetList?: [ string ](name='notifyTargetList', description='The ID of the request.'),
              }
            ](name='ResultList', description='The details about the sending results of alert notifications.'),
          }
        ](name='ChannelResultList', description='The namespace of the cloud service.'),
        resultCode?: string(name='ResultCode', description='The alert logs.', example='success'),
      }(name='SendDetail', description='The namespace of the cloud service.

>  For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](~~163515~~).'),
      sendResultList?: [ 
        {
          key?: string(name='Key', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Mail'),
          value?: [ string ](name='Value'),
        }
      ](name='SendResultList', description='The details of the returned results.'),
      sendStatus?: string(name='SendStatus', description='The value of the dimension.', example='0'),
      webhookList?: [ 
        {
          code?: string(name='code', description='The search keyword that is used to query alert logs.', example='200'),
          message?: string(name='message', description='The error message.', example='success'),
          url?: string(name='url', description='The request ID returned when CloudMonitor calls another cloud service.', example='https://www.aliyun.com/webhook.html'),
        }
      ](name='WebhookList', description='The value of the extended field.'),
    }
  ](name='AlertLogList', description='The status code of the alert callback.'),
  code?: string(name='Code', description='The extended fields.', example='200'),
  message?: string(name='Message', description='The end timestamp of the alert logs to be queried. Unit: milliseconds.', example='The specified resource is not found.'),
  pageNumber?: int32(name='PageNumber', description='The DingTalk chatbots of alert contacts.', example='1'),
  pageSize?: int32(name='PageSize', description='The name of the metric.

>  For more information about the metrics of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='10'),
  requestId?: string(name='RequestId', description='The name of the alert rule.', example='1C4A3709-BF52-42EE-87B5-7435F0929585'),
  success?: boolean(name='Success', description='The timestamp that was generated when the alert was triggered. Unit: milliseconds.', example='true'),
}

model DescribeAlertLogListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertLogListResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function describeAlertLogList(request: DescribeAlertLogListRequest): DescribeAlertLogListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertLogList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAlertingMetricRuleResourcesRequest {
  dimensions?: string(name='Dimensions', description='The namespace of the cloud service.

For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='{\\"userId\\":\\"120886317861****\\",\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\"}', position='Query'),
  groupId?: string(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='7671****', position='Query'),
  namespace?: string(name='Namespace', description='The resources that are monitored.', example='acs_mns_new', position='Query'),
  page?: int32(name='Page', description='The timestamp when the last alert was triggered for the resource based on the alert rule.

Unit: milliseconds.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The operation that you want to perform. Set the value to **DescribeAlertingMetricRuleResources**.', example='10', position='Query'),
  ruleId?: string(name='RuleId', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   `>=`
*   `=`
*   `<=`
*   `>`
*   `<`
*   `!=`', example='putNewAlarm_user_7e78d765-0e3e-4671-ba6d-7ce39108****', position='Query'),
}

model DescribeAlertingMetricRuleResourcesResponseBody = {
  code?: int32(name='Code', description='The ID of the application group.

>  If the alert rule is associated with an application group, the ID of the application group is returned in this parameter.', example='200'),
  message?: string(name='Message', description='The relationship between multiple metrics. Valid values:

*   &&: If all metrics meet the alert conditions, CloudMonitor sends alert notifications.
*   ||: If one of the metrics meets the alert conditions, CloudMonitor sends alert notifications.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The error message.', example='0724011B-D9E0-4B2F-8C51-F17A894CC42C'),
  resources?: {
    resource?: [ 
    {
      dimensions?: string(name='Dimensions', description='The alert threshold.', example='{\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\",\\"userId\\":\\"120886317861****\\"}'),
      enable?: string(name='Enable', description='The name of the alert rule.', example='true'),
      escalation?: {
        resource?: [ 
        {
          comparisonOperator?: string(name='ComparisonOperator', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='GreaterThanOrEqualToThreshold'),
          expression?: string(name='Expression', description='The time when the resource was associated with the alert rule.

Unit: milliseconds.', example='$Average>=10'),
          expressionList?: {
            expressionList?: [ 
            {
              comparisonOperator?: string(name='ComparisonOperator', description='The statistical method of the alert level. Valid values:

*   Maximum: the maximum value
*   Minimum: the minimum value
*   Average: the average value', example='GreaterThanOrEqualToThreshold'),
              metricName?: string(name='MetricName', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='cpu_total'),
              period?: string(name='Period', description='Queries the resources for which active alerts are triggered based on an alert rule.', example='60'),
              statistics?: string(name='Statistics', example='Average'),
              threshold?: string(name='Threshold', example='90'),
            }
          ](name='ExpressionList')
          }(name='ExpressionList', description='The alert threshold.'),
          expressionListJoin?: string(name='ExpressionListJoin', description='The ID of the request.', example='&&'),
          expressionRaw?: string(name='ExpressionRaw', example='$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)'),
          level?: int32(name='Level', description='The statistical period of the metric. Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.', example='3'),
          preCondition?: string(name='PreCondition', description='The resources to which the alert rule is applied.', example='>='),
          tag?: string(name='Tag', description='The number of entries to return on each page.

Default value: 10.', example='mns'),
          threshold?: string(name='Threshold', description='The severity level and notification method of the alert. Valid values:

*   4: Alert notifications are sent by using emails and DingTalk chatbots.

<!---->

*   OK: No alert is generated.', example='10'),
          times?: int32(name='Times', description='The type of the cloud service.', example='1'),
        }
      ](name='Resource')
      }(name='Escalation', description='The ID of the alert rule.'),
      groupId?: string(name='GroupId', description='The total number of returned entries.', example='7671****'),
      lastAlertTime?: string(name='LastAlertTime', description='The method used to calculate metric values that trigger alerts.', example='1622427900000'),
      lastModifyTime?: string(name='LastModifyTime', description='The name of the metric.', example='1622827900000'),
      level?: int32(name='Level', description='The ID of the application group. For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='3'),
      metricName?: string(name='MetricName', description='The ID of the alert rule. For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='ActiveMessages'),
      metricValues?: string(name='MetricValues', description='The description of the multi-metric alert rule.', example='{\\"timestamp\\":1623727500000,\\"Sum\\":926,\\"value\\":463,\\"Maximum\\":463,\\"Minimum\\":463,\\"Average\\":463,\\"SampleCount\\":2,\\"userId\\":\\"120886317861****\\",\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\"}'),
      namespace?: string(name='Namespace', description='The alert rule based on which the alert is triggered.', example='acs_mns_new'),
      productCategory?: string(name='ProductCategory', description='The dimensions that specify the resources whose monitoring data you want to query.', example='mns'),
      resource?: string(name='Resource', description='The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.', example='userId=120886317861****,region=cn-huhehaote,queue=test-0128'),
      retryTimes?: string(name='RetryTimes', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='3'),
      ruleId?: string(name='RuleId', description='The description of the alert rule.

>  This parameter is the content of the alert rule. If the metric value meets the alert condition, an alert is triggered.', example='putNewAlarm_user_7e78d765-0e3e-4671-ba6d-7ce39108****'),
      ruleName?: string(name='RuleName', description='The alert threshold.', example='test123456789'),
      startTime?: string(name='StartTime', description='The severity level and notification method of the alert. Valid values:

*   4: Alert notifications are sent by using emails and DingTalk chatbots.

<!---->

*   OK: No alert is generated.', example='1622427900000'),
      statistics?: string(name='Statistics', description='Indicates whether the alert rule is enabled. Valid values:

*   true: The alert rule is enabled.
*   false: The alert rule is disabled.', example='Average'),
      threshold?: string(name='Threshold', description='The number of the page to return.

Default value: 1.', example='10'),
    }
  ](name='Resource')
  }(name='Resources', description='The dimensions that specify the resources whose monitoring data you want to query.'),
  success?: boolean(name='Success', description='The tags of the instance.', example='true'),
  total?: int32(name='Total', description='The name of the metric.', example='2'),
}

model DescribeAlertingMetricRuleResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAlertingMetricRuleResourcesResponseBody(name='body'),
}

async function describeAlertingMetricRuleResources(request: DescribeAlertingMetricRuleResourcesRequest): DescribeAlertingMetricRuleResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAlertingMetricRuleResources', 'GET', '/', 'json', false, 'json', request);
}

model DescribeContactGroupListRequest {
  pageNumber?: int32(name='PageNumber', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='10', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of the page to return.', example='1', position='Query'),
}

model DescribeContactGroupListResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  contactGroupList?: {
    contactGroup?: [ 
    {
      contacts?: {
        contact?: [ string ](name='Contact')
      }(name='Contacts', description='Queries alert groups.'),
      createTime?: long(name='CreateTime', description='Indicates whether the alert group can subscribe to weekly reports. Valid values:

*   true: The alert group can subscribe to weekly reports.
*   false: The alert group cannot subscribe to weekly reports.

>  The weekly report subscription feature is only available for Alibaba Cloud accounts with more than five Elastic Compute Service (ECS) instances.', example='1507070598000'),
      describe?: string(name='Describe', description='The time when the alert group was modified. This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.'),
      enableSubscribed?: boolean(name='EnableSubscribed', description='The alert contacts in the alert group.', example='true'),
      enabledWeeklyReport?: boolean(name='EnabledWeeklyReport', description='The name of the alert group.', example='true'),
      name?: string(name='Name', description='Indicates whether the alert group subscribes to weekly reports. Valid values:

*   true: The alert group subscribes to weekly reports.
*   false: The alert group does not subscribe to weekly reports.', example='Contact1'),
      updateTime?: long(name='UpdateTime', description='The time when the alert group was created. This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1589447759000'),
    }
  ](name='ContactGroup')
  }(name='ContactGroupList', description='The description of the alert group.'),
  contactGroups?: {
    contactGroup?: [ string ](name='ContactGroup')
  }(name='ContactGroups', description='The information about alert groups that were queried.'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The total number of the returned entries.', example='916EE694-03C2-47B6-85EE-5054E3C168D3'),
  success?: boolean(name='Success', description='The names of alert groups.', example='true'),
  total?: int32(name='Total', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='22'),
}

model DescribeContactGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactGroupListResponseBody(name='body'),
}

async function describeContactGroupList(request: DescribeContactGroupListRequest): DescribeContactGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactGroupList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactListRequest {
  chanelType?: string(name='ChanelType', description='The status of the TradeManager ID.

Valid value: OK. The value OK indicates that the TradeManager ID is valid and can receive alert notifications.

>  This parameter can be returned only on the China site (aliyun.com).', example='Mail', position='Query'),
  chanelValue?: string(name='ChanelValue', description='The error message.', example='Alice@example.com', position='Query'),
  contactName?: string(name='ContactName', description='The value specified for the alert notification method.

>  This parameter is required only if you set the `ChanelType` parameter to `Mail`.', example='Alice', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **DescribeContactList**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='10', position='Query'),
}

model DescribeContactListResponseBody = {
  code?: string(name='Code', description='The description of the alert contact.', example='200'),
  contacts?: {
    contact?: [ 
    {
      channels?: {
        aliIM?: string(name='AliIM', description='The alert notification method. Valid values:

*   Mail: emails
*   DingWebHook: DingTalk chatbots', example='Alice'),
        dingWebHook?: string(name='DingWebHook', description='The timestamp when the alert contact was updated.

Unit: milliseconds.', example='https://oapi.dingtalk.com/robot/send?access_token=9bf44f8189597d07dfdd7a123455ffc112****'),
        mail?: string(name='Mail', description='The alert contact groups.', example='Alice@example.com'),
        SMS?: string(name='SMS', description='The ID of the request.', example='1333333****'),
      }(name='Channels', description='The status of the email address. Valid values:

*   PENDING: The email address is not activated. Alert notifications can be sent to the email address only after the email address is activated.
*   OK: The email address is activated and can receive alert notifications.'),
      channelsState?: {
        aliIM?: string(name='AliIM', description='Queries alert contacts.', example='OK'),
        dingWebHook?: string(name='DingWebHook', example='OK'),
        mail?: string(name='Mail', description='The status of the DingTalk chatbot.

Valid value: OK. The value OK indicates that the DingTalk chatbot is normal and alert notifications can be received in a DingTalk group.', example='PENDING'),
        SMS?: string(name='SMS', example='OK'),
      }(name='ChannelsState', description='The status of the alert notification method. Valid values: PENDING and OK.

The email address must be activated after it is added as the value specified for the alert notification method. The value PENDING indicates that the email address is not activated. The value OK indicates that the email address is activated.'),
      contactGroups?: {
        contactGroup?: [ string ](name='ContactGroup')
      }(name='ContactGroups', description='The alert notification method.'),
      createTime?: long(name='CreateTime', description='The name of the alert contact.', example='1552356159000'),
      desc?: string(name='Desc', description='The alert contacts.'),
      lang?: string(name='Lang', description='The timestamp when the alert contact was created.

Unit: milliseconds.', example='zh-cn'),
      name?: string(name='Name', description='The number of the page to return.

Default value: 1.', example='Alice'),
      updateTime?: long(name='UpdateTime', description='The email address of the alert contact.', example='1552356159000'),
    }
  ](name='Contact')
  }(name='Contacts', description='The status of the phone number. Valid values:

*   PENDING: The phone number is not activated. Alert notifications can be sent to the phone number by using text messages only after the phone number is activated.
*   OK: The phone number is activated and can receive alert notifications.

>  This parameter can be returned only on the China site (aliyun.com).'),
  message?: string(name='Message', description='The language in which the alert information is displayed. Valid values:

*   zh-cn: simplified Chinese
*   en: English', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The number of entries to return on each page.

Default value: 100.', example='06D5ECC2-B9BE-42A4-8FA3-1A610FB08B83'),
  success?: boolean(name='Success', description='The TradeManager ID of the alert contact.', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='15'),
}

model DescribeContactListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactListResponseBody(name='body'),
}

async function describeContactList(request: DescribeContactListRequest): DescribeContactListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactListByContactGroupRequest {
  contactGroupName: string(name='ContactGroupName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='CloudMonitor', position='Query'),
}

model DescribeContactListByContactGroupResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  contacts?: {
    contact?: [ 
    {
      channels?: {
        aliIM?: string(name='AliIM', description='The webhook URL of the DingTalk chatbot.', example='Alice'),
        dingWebHook?: string(name='DingWebHook', description='The phone number of the alert contact.

>  This parameter can be returned only on the China site (aliyun.com).', example='https://oapi.dingtalk.com/robot/send?access_token=9bf44f8189597d07dfdd7a123455ffc112****'),
        mail?: string(name='Mail', description='The TradeManager ID of the alert contact.

>  This parameter can be returned only on the China site (aliyun.com).', example='alice@example.com'),
        SMS?: string(name='SMS', description='Queries the alert contacts in an alert group.', example='1333333****'),
      }(name='Channels', description='The email address of the alert contact.'),
      createTime?: long(name='CreateTime', description='The description of the alert contact.', example='1552314252000'),
      desc?: string(name='Desc', description='The alert notification targets.', example='ECS'),
      name?: string(name='Name', description='The time when the alert contact was created.', example='Alice'),
      updateTime?: long(name='UpdateTime', description='The name of the alert contact.', example='1552314252000'),
    }
  ](name='Contact')
  }(name='Contacts', description='The time when the alert contact was modified.'),
  message?: string(name='Message', description='The ID of the request.', example='The group is not exists.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='06D5ECC2-B9BE-42A4-8FA3-1A610FB08B83'),
  success?: boolean(name='Success', description='The alert group.', example='true'),
}

model DescribeContactListByContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactListByContactGroupResponseBody(name='body'),
}

async function describeContactListByContactGroup(request: DescribeContactListByContactGroupRequest): DescribeContactListByContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactListByContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomEventAttributeRequest {
  endTime?: string(name='EndTime', description='The number of the page to return.', example='1552227965971', position='Query'),
  eventId?: string(name='EventId', description='The ID of the application group.', example='123****', position='Query'),
  groupId?: string(name='GroupId', description='The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.

*   If you need to query the custom event whose content contains a and b, set the value to a and b.
*   If you need to query the custom event whose content contains a or b, set the value to a or b.', example='123****', position='Query'),
  name?: string(name='Name', description='The ID of the custom event.', example='test123', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='50', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The beginning of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='cms', position='Query'),
  startTime?: string(name='StartTime', description='The end of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552224365971', position='Query'),
}

model DescribeCustomEventAttributeResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  customEvents?: {
    customEvent?: [ 
    {
      content?: string(name='Content', description='The ID of the custom event.', example='requestId:4975A6F3-19AC-4C01-BAD2-034DA07FEBB5, info:{"autoPay":false,"autoUseCoupon":false,"bid":"26842","buyerId":118935342242****,"commodities":[{"aliyunProduceCode":"cms","chargeType":"PREPAY","commodityCode":"cms_call_num","components":[{"componentCode":"phone_count","instanceProperty":[{"code":"phone_count","value":"500"}],"moduleAttrStatus":1}],"duration":6,"free":false,"orderParams":{"aliyunProduceCode":"cms"},"orderType":"BUY","prePayPostCharge":false,"pricingCycle":"Month","quantity":1,"refundSpecCode":"","renewChange":false,"specCode":"cms_call_num","specUpdate":false,"syncToSubscription":false,"upgradeInquireFinancialValue":true}],"fromApp":"commonbuy","orderParams":{"priceCheck":"true"},"payerId":118935342242****,"requestId":"ade3ad32-f58b-45d7-add4-ac542be3d8ec","skipChannel":false,"userId":118935342242****}'),
      groupId?: string(name='GroupId', description='The content of the custom event.', example='12345'),
      id?: string(name='Id', description='Queries the details of a custom event occurred in a specified time period.', example='123'),
      name?: string(name='Name', description='The ID of the application group.', example='BABEL_CHECK'),
      time?: string(name='Time', description='The name of the custom event.', example='1552199984000'),
    }
  ](name='CustomEvent')
  }(name='CustomEvents', description='The time when the custom event occurred.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.'),
  message?: string(name='Message', description='The ID of the request.', example='userId:173651113438**** and name:"BABEL_CHECK"'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='60912C8D-B340-4253-ADE7-61ACDFD25CFC'),
  success?: string(name='Success', description='The details of the custom event.', example='true'),
}

model DescribeCustomEventAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomEventAttributeResponseBody(name='body'),
}

async function describeCustomEventAttribute(request: DescribeCustomEventAttributeRequest): DescribeCustomEventAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomEventAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomEventCountRequest {
  endTime?: string(name='EndTime', description='The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.', example='1552220485596', position='Query'),
  eventId?: string(name='EventId', description='The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.

*   If you need to query the custom event whose content contains a and b, set the value to a and b.
*   If you need to query the custom event whose content contains a or b, set the value to a or b.', example='123', position='Query'),
  groupId?: string(name='GroupId', description='The beginning of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='12345', position='Query'),
  name?: string(name='Name', description='The ID of the application group.', example='BABEL_BUY', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The end of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='cms', position='Query'),
  startTime?: string(name='StartTime', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1552209685596', position='Query'),
}

model DescribeCustomEventCountResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  customEventCounts?: {
    customEventCount?: [ 
    {
      name?: string(name='Name', description='Queries the number of times that a custom event occurred in a specified time period.', example='BABEL_BUY'),
      num?: int32(name='Num', description='>  This operation counts the number of times that a custom event occurred for each service.', example='20'),
      time?: long(name='Time', description='The name of the custom event.', example='1552267615000'),
    }
  ](name='CustomEventCount')
  }(name='CustomEventCounts', description='The number of times that the custom event occurred in the specified time period.'),
  message?: string(name='Message', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='success'),
  requestId?: string(name='RequestId', description='The details of the custom event.', example='60912C8D-B340-4253-ADE7-61ACDFD25CFC'),
  success?: boolean(name='Success', description='The time when the custom event occurred.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='true'),
}

model DescribeCustomEventCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomEventCountResponseBody(name='body'),
}

/**
  * The name of the custom event.
  *
 */
async function describeCustomEventCount(request: DescribeCustomEventCountRequest): DescribeCustomEventCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomEventCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomEventHistogramRequest {
  endTime?: string(name='EndTime', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1552220485596', position='Query'),
  eventId?: string(name='EventId', description='The ID of the application group.', example='123', position='Query'),
  groupId?: string(name='GroupId', description='The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.

*   If you need to query the custom event whose content contains a and b, set the value to a and b.
*   If you need to query the custom event whose content contains a or b, set the value to a or b.', example='12345', position='Query'),
  level?: string(name='Level', description='The ID of the custom event.', example='CRITICAL', position='Query'),
  name?: string(name='Name', description='The level of the custom event. Valid values:

*   CRITICAL
*   WARN
*   INFO', example='BucketIngressBandwidth', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The beginning of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='cms', position='Query'),
  startTime?: string(name='StartTime', description='The end of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552209685596', position='Query'),
}

model DescribeCustomEventHistogramResponseBody = {
  code?: string(name='Code', description='The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.', example='200'),
  eventHistograms?: {
    eventHistogram?: [ 
    {
      count?: long(name='Count', description='Queries the number of times that a custom event occurred during each interval of a time period.', example='3'),
      endTime?: long(name='EndTime', description='The beginning of an interval.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552226750000'),
      startTime?: long(name='StartTime', description='The information about the number of times that the custom event occurred during an interval of a time period.', example='1552226740000'),
    }
  ](name='EventHistogram')
  }(name='EventHistograms', description='The end of an interval.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='486029C9-53E1-44B4-85A8-16A571A043FD'),
  success?: string(name='Success', description='The information about the number of times that the custom event occurred during each interval of a time period.', example='true'),
}

model DescribeCustomEventHistogramResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomEventHistogramResponseBody(name='body'),
}

async function describeCustomEventHistogram(request: DescribeCustomEventHistogramRequest): DescribeCustomEventHistogramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomEventHistogram', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCustomMetricListRequest {
  dimension?: string(name='Dimension', description='The number of entries to return on each page.

Pages start from page 1. Default value: 10.', example='{sampleName1=value1&amp;sampleName2=value2}', position='Query'),
  groupId?: string(name='GroupId', description='The MD5 value of the HTTP request body. The MD5 value is a 128-bit hash value used to verify the uniqueness of the reported custom metrics.', example='7378****', position='Query'),
  md5?: string(name='Md5', description='The HTTP status code.

>  The value 200 indicates that the call is successful.', example='97c25982d9745a231276bff27469****', position='Query'),
  metricName?: string(name='MetricName', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='cpu_total', position='Query'),
  pageNumber?: string(name='PageNumber', description='The returned message.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The ID of the request.', example='10', position='Query'),
}

model DescribeCustomMetricListResponseBody = {
  code?: string(name='Code', description='The reported custom metrics that are found in the query.', example='200'),
  message?: string(name='Message', description='>  You can call the DescribeMetricList operation to query the metrics of a cloud service. For more information, see [DescribeMetricList](~~51936~~).', example='success'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1AF425E4-1DEA-54F2-910A-8117C9686140'),
  result?: string(name='Result', example='{\\"all\\":0,\\"size\\":10,\\"param\\":{\\"metric\\":\\"{\\\\\\"metricName\\\\\\":\\\\\\"cpu_total\\\\\\",\\\\\\"groupId\\\\\\":7378****,\\\\\\"project\\\\\\":\\\\\\"acs_customMetric_120886317861****\\\\\\",\\\\\\"dimension\\\\\\":\\\\\\"sampleName1=value1&sampleName2=value2\\\\\\",\\\\\\"status\\\\\\":1}\\",\\"service\\":\\"metric-center.aliyun-inc.com\\"},\\"page\\":1,\\"list\\":[]}'),
}

model DescribeCustomMetricListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCustomMetricListResponseBody(name='body'),
}

/**
  * The ID of the application group.
  * For more information, see [DescribeMonitorGroups](~~115032~~).
  *
 */
async function describeCustomMetricList(request: DescribeCustomMetricListRequest): DescribeCustomMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCustomMetricList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDynamicTagRuleListRequest {
  dynamicTagRuleId?: string(name='DynamicTagRuleId', description='The total number of returned entries.', example='004155fa-15ba-466d-b61a-***********', position='Query'),
  pageNumber?: string(name='PageNumber', description='The ID of the region to which the tags belong.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The conditional expressions used to create an application group based on the tag.', example='30', position='Query'),
  tagKey?: string(name='TagKey', description='The error message.', example='tagkey1', position='Query'),
  tagRegionId?: string(name='TagRegionId', description='The number of entries to return on each page.

Minimum value: 1. Default value: 30.', example='cn-hangzhou', position='Query'),
  tagValue?: string(name='TagValue', description='The ID of the tag rule.', example='*', position='Query'),
}

model DescribeDynamicTagRuleListResponseBody = {
  code?: string(name='Code', description='The tag value.

The `TagValue` and `TagValueMatchFunction` parameters must be used in pairs.', example='200'),
  message?: string(name='Message', description='The tag value.

For more information about how to obtain a tag value, see [DescribeTagKeyList](~~145557~~).', example='The specified resource is not found.'),
  pageNumber?: string(name='PageNumber', description='The status of adding instances that meet the tag rule to the application group. Valid values:

*   `RUNNING`
*   `FINISH`', example='1'),
  pageSize?: string(name='PageSize', description='The ID of the region to which the tags belong.', example='30'),
  requestId?: string(name='RequestId', description='The logical operator that is used between conditional expressions. Valid values:

*   `and`
*   `or`

>  Only one logical operator can be used in a request.', example='0D50523D-8D59-4A61-B58E-E2286ECFB3A9'),
  success?: boolean(name='Success', description='The tag key.

For more information about how to obtain a tag key, see [DescribeTagKeyList](~~145558~~).', example='true'),
  tagGroupList?: {
    tagGroup?: [ 
    {
      contactGroupList?: {
        contactGroupList?: [ string ](name='ContactGroupList')
      }(name='ContactGroupList'),
      dynamicTagRuleId?: string(name='DynamicTagRuleId', description='The tag key.', example='1536df65-a719-429d-8813-73cc40d7****'),
      matchExpress?: {
        matchExpress?: [ 
        {
          tagKey?: string(name='TagKey', example='azone-version'),
          tagValue?: string(name='TagValue', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='*'),
          tagValueMatchFunction?: string(name='TagValueMatchFunction', description='Queries tag rules.', example='all'),
        }
      ](name='MatchExpress')
      }(name='MatchExpress', description='The ID of the request.'),
      matchExpressFilterRelation?: string(name='MatchExpressFilterRelation', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='or'),
      regionId?: string(name='RegionId', description='The page number of the returned page.', example='cn-hangzhou'),
      status?: string(name='Status', description='The alert contact group.', example='FINISH'),
      tagKey?: string(name='TagKey', description='The number of entries returned per page.', example='tagkey1'),
      templateIdList?: {
        templateIdList?: [ string ](name='TemplateIdList')
      }(name='TemplateIdList'),
    }
  ](name='TagGroup')
  }(name='TagGroupList', description='The ID of the tag rule.'),
  total?: int32(name='Total', description='The tag rules of application groups.', example='2'),
}

model DescribeDynamicTagRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDynamicTagRuleListResponseBody(name='body'),
}

/**
  * The HTTP status code.
  * >  The status code 200 indicates that the call was successful.
  *
 */
async function describeDynamicTagRuleList(request: DescribeDynamicTagRuleListRequest): DescribeDynamicTagRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDynamicTagRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventRuleAttributeRequest {
  ruleName: string(name='RuleName', description='The error message.', example='testRule', position='Query'),
  silenceTime?: string(name='SilenceTime', description='The ID of the request.', example='86400', position='Query'),
}

model DescribeEventRuleAttributeResponseBody = {
  code?: string(name='Code', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='200'),
  message?: string(name='Message', description='The details of the event-triggered alert rule.', example='The alert does not exist.'),
  requestId?: string(name='RequestId', description='The type of the event. Valid values:

*   SYSTEM: system event
*   CUSTOM: custom event', example='9AA3F210-C03D-4C86-8DB6-21C84FF692A1'),
  result?: {
    description?: string(name='Description', description='The status of the event-triggered alert rule. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='Default group event rule.'),
    eventPattern?: {
      eventTypeList?: {
        eventTypeList?: [ string ](name='EventTypeList')
      }(name='EventTypeList'),
      levelList?: {
        levelList?: [ string ](name='LevelList')
      }(name='LevelList', description='This topic provides an example on how to query the details of an event-triggered alert rule named `testRule`.'),
      nameList?: {
        nameList?: [ string ](name='NameList')
      }(name='NameList'),
      product?: string(name='Product', description='The name of the event.', example='CloudMonitor'),
      statusList?: {
        statusList?: [ string ](name='StatusList')
      }(name='StatusList', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
    }(name='EventPattern', description='The status of the event.'),
    eventType?: string(name='EventType', description='The ID of the application group.', example='SYSTEM'),
    groupId?: string(name='GroupId', description='The name of the cloud service.', example='3607****'),
    name?: string(name='Name', description='The event pattern. This parameter specifies the trigger conditions of an event.', example='test_DefaultEventRule_7378****'),
    state?: string(name='State', description='The level of the event-triggered alert rule. Valid values:

*   CRITICAL: critical
*   WARN: warning
*   INFO: information', example='ENABLED'),
  }(name='Result', description='The name of the event-triggered alert rule.'),
  success?: boolean(name='Success', description='The description of the event-triggered alert rule.', example='true'),
}

model DescribeEventRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventRuleAttributeResponseBody(name='body'),
}

/**
  * The name of the event-triggered alert rule.
  * For information about how to obtain the name of an event-triggered alert rule, see [DescribeEventRuleList](~~114996~~).
  *
 */
async function describeEventRuleAttribute(request: DescribeEventRuleAttributeRequest): DescribeEventRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventRuleListRequest {
  groupId?: string(name='GroupId', description='The operation that you want to perform. Set the value to DescribeEventRuleList.', example='7378****', position='Query'),
  namePrefix?: string(name='NamePrefix', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='test', position='Query'),
  pageNumber?: string(name='PageNumber', description='The description of the event-triggered alert rule.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The status of the event-triggered alert rule. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='10', position='Query'),
}

model DescribeEventRuleListResponseBody = {
  code?: string(name='Code', description='The prefix in the name of the event-triggered alert rule.', example='200'),
  eventRules?: {
    eventRule?: [ 
    {
      description?: string(name='Description', description='The filter keyword.', example='Default group event rule.'),
      eventPattern?: {
        eventPattern?: [ 
        {
          customFilters?: string(name='CustomFilters', description='The ID of the request.', example='ECS123'),
          eventTypeList?: {
            eventTypeList?: [ string ](name='EventTypeList')
          }(name='EventTypeList', description='The keywords that are used to match events.'),
          keywordFilter?: {
            keywords?: {
              keywords?: [ string ](name='Keywords')
            }(name='Keywords'),
            relation?: string(name='Relation', example='OR'),
          }(name='KeywordFilter', description='Queries event-triggered alert rules.'),
          levelList?: {
            levelList?: [ string ](name='LevelList')
          }(name='LevelList', description='The type of the event-triggered alert rule.

`*` indicates all types of alert rules.'),
          nameList?: {
            nameList?: [ string ](name='NameList')
          }(name='NameList', description='Indicates that logs are filtered based on the specified SQL statement. If the specified conditions are met, an alert is triggered.'),
          product?: string(name='Product', description='The ID of the application group.', example='CloudMonitor'),
          SQLFilter?: string(name='SQLFilter', example='ycccluster1 and (i-23ij0o82612 or Executed1) or Asimulated not 222'),
        }
      ](name='EventPattern')
      }(name='EventPattern', description='The ID of the application group.'),
      eventType?: string(name='EventType', description='The mode of the event-triggered alert rule.', example='SYSTEM'),
      groupId?: string(name='GroupId', description='The number of entries to return on each page.

A minimum of one entry can be returned on each page. Default value: 10.', example='7378****'),
      name?: string(name='Name', description='The relationship between multiple keywords in a condition. Valid values:

*   OR: The relationship between keywords is OR.
*   NOT: The keyword is excluded. The value NOT indicates that all events that do not contain the keywords are matched.', example='test_DefaultEventRule_7378****'),
      silenceTime?: long(name='SilenceTime', example='86400'),
      state?: string(name='State', description='The level of the event. Valid values:

*   CRITICAL: critical
*   WARN: warning
*   INFO: information', example='ENABLED'),
    }
  ](name='EventRule')
  }(name='EventRules', description='The number of the page to return.

Pages start from page 1. Default value: 1.'),
  message?: string(name='Message', description='The event-triggered alert rules.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The name of the event-triggered alert rule.', example='D0E6D82B-16B5-422A-8136-EE5BDC01E415'),
  success?: boolean(name='Success', description='The total number of returned entries.', example='true'),
  total?: int32(name='Total', description='The list of event names.', example='21'),
}

model DescribeEventRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventRuleListResponseBody(name='body'),
}

async function describeEventRuleList(request: DescribeEventRuleListRequest): DescribeEventRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventRuleTargetListRequest {
  ruleName: string(name='RuleName', description='The name of the alert group.', example='testRule', position='Query'),
}

model DescribeEventRuleTargetListResponseBody = {
  code?: string(name='Code', description='The alert notification methods. Valid values:

4: Alert notifications are sent by using DingTalk chatbots and emails.', example='200'),
  contactParameters?: {
    contactParameter?: [ 
    {
      contactGroupName?: string(name='ContactGroupName', description='Queries the details of an event-triggered alert rule.'),
      id?: string(name='Id', example='1'),
      level?: string(name='Level', example='3'),
    }
  ](name='ContactParameter')
  }(name='ContactParameters', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
  fcParameters?: {
    FCParameter?: [ 
    {
      arn?: string(name='Arn', example='acs:log:cn-hangzhou::project/cms-log-mon***/logstore/cxxxx***'),
      functionName?: string(name='FunctionName', example='fcTest1'),
      id?: string(name='Id', example='3'),
      region?: string(name='Region', example='cn-qingdao'),
      serviceName?: string(name='ServiceName', example='service1'),
    }
  ](name='FCParameter')
  }(name='FcParameters'),
  message?: string(name='Message', description='The information about the recipients if alert notifications are sent to the alert contacts of an alert contact group.', example='The Request is not authorization.'),
  mnsParameters?: {
    mnsParameter?: [ 
    {
      arn?: string(name='Arn', example='acs:log:cn-hangzhou::project/cms-log-mon***/logstore/cxxxx***'),
      id?: string(name='Id', example='2'),
      queue?: string(name='Queue', example='testQueue'),
      region?: string(name='Region', example='cn-hangzhou'),
      topic?: string(name='Topic', example='topic_sample'),
    }
  ](name='MnsParameter')
  }(name='MnsParameters'),
  openApiParameters?: {
    openApiParameters?: [ 
    {
      action?: string(name='Action', example='PutLogs'),
      arn?: string(name='Arn', example='acs:log:cn-hangzhou::project/cms-log-mon***/logstore/cxxxx***'),
      id?: string(name='Id', example='3'),
      product?: string(name='Product', example='log'),
      region?: string(name='Region', example='cn-hangzhou'),
      role?: string(name='Role', example='MyRole'),
      version?: string(name='Version', example='2019-01-01'),
    }
  ](name='OpenApiParameters')
  }(name='OpenApiParameters'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='87170bc7-e28a-4c93-b9bf-90a1dbe84736'),
  slsParameters?: {
    slsParameter?: [ 
    {
      arn?: string(name='Arn', example='acs:log:cn-hangzhou::project/cms-log-mo****/logstore/c***'),
      id?: string(name='Id', example='4'),
      logStore?: string(name='LogStore', example='logstore_test'),
      project?: string(name='Project', example='project_test'),
      region?: string(name='Region', example='cn-hangzhou'),
    }
  ](name='SlsParameter')
  }(name='SlsParameters'),
  webhookParameters?: {
    webhookParameter?: [ 
    {
      id?: string(name='Id', example='5'),
      method?: string(name='Method', example='GET'),
      protocol?: string(name='Protocol', example='HTTP'),
      url?: string(name='Url', example='http://www.aliyun.com'),
    }
  ](name='WebhookParameter')
  }(name='WebhookParameters'),
}

model DescribeEventRuleTargetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventRuleTargetListResponseBody(name='body'),
}

/**
  * The error message.
  *
 */
async function describeEventRuleTargetList(request: DescribeEventRuleTargetListRequest): DescribeEventRuleTargetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEventRuleTargetList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExporterOutputListRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
}

model DescribeExporterOutputListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  datapoints?: {
    datapoint?: [ 
    {
      configJson?: {
        ak?: string(name='ak', description='The AccessKey ID.', example='LTAIpY33********'),
        endpoint?: string(name='endpoint', description='The Log Service endpoint to which the monitoring data is exported.', example='http://cn-qingdao-share.log.aliyuncs.com'),
        logstore?: string(name='logstore', description='The Logstore.', example='monitorlogstore'),
        project?: string(name='project', description='The Log Service project to which the monitoring data is exported.', example='exporter'),
      }(name='ConfigJson', description='The JSON object that contains the details about the destination to which the monitoring data is exported.'),
      createTime?: long(name='CreateTime', description='The time when the configuration set was created. The value is a UNIX timestamp.', example='1584016495498'),
      destName?: string(name='DestName', description='The name of the configuration set.', example='exporterOut'),
      destType?: string(name='DestType', description='The service to which the monitoring data is exported.

> Only Log Service is supported. More services will be supported in the future.', example='SLS'),
    }
  ](name='Datapoint')
  }(name='Datapoints', description='The configuration sets for exporting monitoring data.'),
  message?: string(name='Message', description='The returned message.', example='sucess'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='0E657631-CD6C-4C24-9637-98D000B9272C'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='25'),
}

model DescribeExporterOutputListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExporterOutputListResponseBody(name='body'),
}

async function describeExporterOutputList(request: DescribeExporterOutputListRequest): DescribeExporterOutputListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExporterOutputList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeExporterRuleListRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 1000.', example='1000', position='Query'),
}

model DescribeExporterRuleListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.', example='200'),
  datapoints?: {
    datapoint?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the rule was created. The value is a UNIX timestamp.', example='1584024616228'),
      describe?: string(name='Describe', description='The description of the rule.', example='Export monitoring data'),
      dimension?: string(name='Dimension', description='The associated dimensions.', example='{"instanceId":"xxxxx"}'),
      dstName?: {
        dstName?: [ string ](name='DstName')
      }(name='DstName'),
      enabled?: boolean(name='Enabled', description='Indicates whether the rule is enabled.', example='true'),
      metricName?: string(name='MetricName', description='The name of the metric.

> For more information, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~28619~~).', example='cpu_total'),
      namespace?: string(name='Namespace', description='The namespace of the service.

> For more information, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~28619~~).', example='acs_ecs_dashboard'),
      ruleName?: string(name='RuleName', description='The name of the data export rule.', example='myRuleName'),
      targetWindows?: string(name='TargetWindows', description='The time window of the exported data.\\
Multiple windows are separated with commas (,).

> Data in a time window of less than 60 seconds cannot be exported.', example='60,300'),
    }
  ](name='Datapoint')
  }(name='Datapoints', description='The details of the data export rules.'),
  message?: string(name='Message', description='The returned message.', example='susscess'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  requestId?: string(name='RequestId', description='The request ID.', example='6BA047CA-8BC6-40BC-BC8F-FBECF35F1993'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   `true`
*   `false`', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='1000'),
}

model DescribeExporterRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExporterRuleListResponseBody(name='body'),
}

async function describeExporterRuleList(request: DescribeExporterRuleListRequest): DescribeExporterRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeExporterRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGroupMonitoringAgentProcessRequest {
  groupId: string(name='GroupId', description='The number of the page to return. Default value: 1.', example='12345', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The ID of the request.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='10', position='Query'),
  processName?: string(name='ProcessName', description='The number of entries to return on each page. Default value: 10.', example='sshd', position='Query'),
}

model DescribeGroupMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The number of the returned page. Default value: 1.', example='200'),
  message?: string(name='Message', description='The number of entries returned on each page. Default value: 10.', example='The Request is not authorization.'),
  pageNumber?: string(name='PageNumber', description='The total number of entries returned.', example='1'),
  pageSize?: string(name='PageSize', description='The process monitoring tasks created for the application group.', example='10'),
  processes?: {
    process?: [ 
    {
      alertConfig?: {
        alertConfig?: [ 
        {
          comparisonOperator?: string(name='ComparisonOperator', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='GreaterThanOrEqualToThreshold'),
          effectiveInterval?: string(name='EffectiveInterval', description='The method used to calculate metric values that trigger alerts.', example='00:00-23:59'),
          escalationsLevel?: string(name='EscalationsLevel', description='The time period during which the alert rule is effective.', example='warn'),
          noEffectiveInterval?: string(name='NoEffectiveInterval', description='The threshold for triggering alerts.', example='00:00-23:59'),
          silenceTime?: string(name='SilenceTime', description='The number of times for which the threshold can be consecutively exceeded.

>  A metric triggers an alert only after the metric value reaches the threshold consecutively for the specified times.', example='86400'),
          statistics?: string(name='Statistics', description='Queries the process monitoring tasks for an application group.', example='Average'),
          targetList?: {
            target?: [ 
            {
              arn?: string(name='Arn'),
              id?: string(name='Id'),
              jsonParmas?: string(name='JsonParmas'),
              level?: string(name='Level'),
            }
          ](name='Target')
          }(name='TargetList'),
          threshold?: string(name='Threshold', description='You can create a process monitoring task to monitor all or the specified Elastic Compute Service (ECS) instances in an application group and set alert rules for the process monitoring task.', example='5'),
          times?: string(name='Times', description='The time period during which the alert rule is ineffective.', example='3'),
          webhook?: string(name='Webhook', description='The level of the alert. Valid values:

*   critical
*   warn
*   info', example='http://www.aliyun.com'),
        }
      ](name='AlertConfig')
      }(name='AlertConfig', description='The duration of the mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.

>  Only one alert notification is sent during each mute period even if the metric value consecutively exceeds the alert threshold several times.'),
      groupId?: string(name='GroupId', example='12345'),
      id?: string(name='Id', description='The keyword used to match the instance name.', example='3F6150F9-45C7-43F9-9578-A58B2E72****'),
      matchExpress?: {
        matchExpress?: [ 
        {
          function?: string(name='Function', description='The comparison operator of the threshold for critical-level alerts. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='all'),
          name?: string(name='Name', description='The configurations of the alert rule.', example='name'),
          value?: string(name='Value', description='The method used to match the instances. Default value: all. Valid values:

*   all
*   startWith
*   endWith
*   contains
*   notContains
*   equals

>  The matched instances are monitored by the process monitoring task.', example='portalHost'),
        }
      ](name='MatchExpress')
      }(name='MatchExpress', description='The criteria based on which the instances are matched.

>  Set the value to `name`, indicating that the instances are matched based on instance name.'),
      matchExpressFilterRelation?: string(name='MatchExpressFilterRelation', example='and'),
      processName?: string(name='ProcessName', description='The conditional expressions used to match the instances.

>  Only the instances that meet the conditional expressions are monitored by the process monitoring task.', example='sshd'),
    }
  ](name='Process')
  }(name='Processes', description='The ID of the process monitoring task.'),
  requestId?: string(name='RequestId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='7985D471-3FA8-4EE9-8F4B-45C19DF3D36F'),
  success?: boolean(name='Success', description='The returned message.', example='true'),
  total?: string(name='Total', description='The name of the process monitoring task.', example='28'),
}

model DescribeGroupMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGroupMonitoringAgentProcessResponseBody(name='body'),
}

/**
  * The ID of the application group.
  *
 */
async function describeGroupMonitoringAgentProcess(request: DescribeGroupMonitoringAgentProcessRequest): DescribeGroupMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGroupMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostAvailabilityListRequest {
  groupId?: long(name='GroupId', description='The ID of the request.', example='12345', position='Query'),
  id?: long(name='Id', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='123456', position='Query'),
  ids?: string(name='Ids', description='The number of entries to return on each page.

Default value: 10.', example='123456,345678', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The HTTP status code.

>  The value 200 indicates that the call was successful.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The error message.', example='10', position='Query'),
  taskName?: string(name='TaskName', description='The ID of the application group.', example='ecs_instance', position='Query'),
}

model DescribeHostAvailabilityListResponseBody = {
  code?: string(name='Code', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='200'),
  message?: string(name='Message', description='The total number of returned entries.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The details of the availability monitoring tasks.', example='4A288E86-45C3-4858-9DB0-6D85B10BD92A'),
  success?: boolean(name='Success', description='The type of the availability monitoring task. Valid values:

*   PING
*   TELNET
*   HTTP', example='true'),
  taskList?: {
    nodeTaskConfig?: [ 
    {
      alertConfig?: {
        endTime?: int32(name='EndTime', description='The alert notification methods. Valid values:

0: Alert notifications are sent by using emails and DingTalk chatbots.', example='22'),
        escalationList?: {
          escalationList?: [ 
          {
            aggregate?: string(name='Aggregate', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Value'),
            metricName?: string(name='MetricName', description='The method used to calculate metric values that trigger alerts. Valid values:

*   Value: the value of the HTTP status code
*   Average: the average HTTP response time
*   Value: the value of the Telnet status code
*   TelnetLatency: the average Telnet response time
*   Average: the average Ping packet loss rate', example='HttpStatus'),
            operator?: string(name='Operator', description='This topic provides an example to show how to query all the availability monitoring tasks of your Alibaba Cloud account. The sample responses indicate that the account has one availability monitoring task named `ecs_instance`.', example='='),
            times?: string(name='Times', description='Queries availability monitoring tasks.', example='3'),
            value?: string(name='Value', description='The consecutive number of times for which the metric value is measured before an alert is triggered.', example='400'),
          }
        ](name='escalationList')
        }(name='EscalationList', description='The comparison operator that is used in the alert rule. Valid values:

*   `>`
*   `>=`
*   `<`
*   `<=`
*   `=`'),
        notifyType?: int32(name='NotifyType', description='The name of the metric. Valid values:

*   HttpStatus: HTTP status code
*   HttpLatency: HTTP response time
*   TelnetStatus: Telnet status code
*   TelnetLatency: Telnet response time
*   PingLostRate: Ping packet loss rate', example='1'),
        silenceTime?: int32(name='SilenceTime', description='The callback URL.

CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.', example='86400'),
        startTime?: int32(name='StartTime', description='The trigger conditions of the alert rule.', example='0'),
        targetList?: {
          target?: [ 
          {
            arn?: string(name='Arn'),
            id?: string(name='Id'),
            jsonParams?: string(name='JsonParams'),
            level?: string(name='Level'),
          }
        ](name='Target')
        }(name='TargetList'),
        webHook?: string(name='WebHook', description='The alert threshold.', example='https://www.aliyun.com'),
      }(name='AlertConfig', description='The beginning of the time period during which the alert rule is effective. Valid values: 0 to 23.

For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.

>  Alert notifications are sent based on the specified threshold only if the alert rule is effective.'),
      disabled?: boolean(name='Disabled', description='The ECS instances that are monitored.', example='false'),
      groupId?: long(name='GroupId', description='The range of instances that are monitored by the availability monitoring task. Valid values:

*   GROUP: All ECS instances in the application group are monitored.
*   GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored.', example='12345'),
      groupName?: string(name='GroupName', description='Indicates whether the availability monitoring task is disabled. Valid values:

*   true: The availability monitoring task is disabled.
*   false: The availability monitoring task is enabled.', example='Group_ECS'),
      id?: long(name='Id', description='The HTTP request method. Valid values:

*   GET
*   POST
*   HEAD', example='123456'),
      instances?: {
        instance?: [ string ](name='Instance')
      }(name='Instances', description='The interval at which detection requests are sent. Unit: seconds.'),
      taskName?: string(name='TaskName', description='The ID of the availability monitoring task.', example='ecs_instance'),
      taskOption?: {
        httpKeyword?: string(name='HttpKeyword', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.', example='OK'),
        httpMethod?: string(name='HttpMethod', description='The domain name or IP address that you want to monitor.', example='GET'),
        httpNegative?: boolean(name='HttpNegative', description='The end of the time period during which the alert rule is effective. Valid values: 0 to 23.

For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.

>  Alert notifications are sent based on the specified threshold only if the alert rule is effective.', example='true'),
        httpPostContent?: string(name='HttpPostContent', description='The configurations of the alert rule.', example='params1=paramsValue1'),
        httpResponseCharset?: string(name='HttpResponseCharset', description='The response to the HTTP request.', example='UTF-8'),
        httpURI?: string(name='HttpURI', description='The content of the HTTP POST request.', example='https://www.aliyun.com'),
        interval?: int32(name='Interval', description='The character set that is used in the HTTP response.', example='60'),
        telnetOrPingHost?: string(name='TelnetOrPingHost', description='The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:

*   true: If the HTTP response body includes the alert rule, an alert is triggered.
*   false: If the HTTP response does not include the alert rule, an alert is triggered.', example='ssh.aliyun.com'),
      }(name='TaskOption', description='The URI that you want to monitor. If the TaskType parameter is set to HTTP, this parameter is required.'),
      taskScope?: string(name='TaskScope', description='The optional parameters of the availability monitoring task.', example='GROUP'),
      taskType?: string(name='TaskType', description='The name of the availability monitoring task.', example='HTTP'),
    }
  ](name='NodeTaskConfig')
  }(name='TaskList', description='The ID of the application group.'),
  total?: int32(name='Total', description='The name of the application group.', example='1'),
}

model DescribeHostAvailabilityListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostAvailabilityListResponseBody(name='body'),
}

/**
  * The ID of the availability monitoring task.
  *
 */
async function describeHostAvailabilityList(request: DescribeHostAvailabilityListRequest): DescribeHostAvailabilityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostAvailabilityList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHybridMonitorDataListRequest {
  end: long(name='End', description='The interval at which monitoring data is collected.

Unit: seconds.', example='1653805225', position='Query'),
  namespace: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='default-aliyun', position='Query'),
  period?: string(name='Period', description='The error message.', example='60', position='Query'),
  promSQL: string(name='PromSQL', description='The operation that you want to perform. Set the value to **DescribeHybridMonitorDataList**.', example='AliyunEcs_cpu_total', position='Query'),
  start: long(name='Start', description='The metric values that are collected at different timestamps.', example='1653804865', position='Query'),
}

model DescribeHybridMonitorDataListResponseBody = {
  code?: string(name='Code', description='The name of the metric.', example='200'),
  message?: string(name='Message', description='The returned monitoring data.', example='end timestamp must not be before start time.'),
  requestId?: string(name='RequestId', description='The name of the namespace.

For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](~~428880~~).', example='C240412F-3F5F-50E2-ACEC-DE808EF9C4BE'),
  success?: string(name='Success', description='The timestamp that indicates the time when the metric value is collected.

Unit: seconds.', example='true'),
  timeSeries?: [ 
    {
      labels?: [ 
        {
          k?: string(name='K', description='The timestamp that specifies the end of the time range to query.

Unit: seconds.', example='instanceId'),
          v?: string(name='V', description='The ID of the request.', example='i-rj99xc6cptkk64ml****'),
        }
      ](name='Labels', description='The tags of the time dimension.'),
      metricName?: string(name='MetricName', description='The tag value.', example='AliyunEcs_cpu_total'),
      values?: [ 
        {
          ts?: string(name='Ts', example='1653804865'),
          v?: string(name='V', example='0.13'),
        }
      ](name='Values', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
    }
  ](name='TimeSeries', description='The metric value.'),
}

model DescribeHybridMonitorDataListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHybridMonitorDataListResponseBody(name='body'),
}

/**
  * The tag key.
  *
 */
async function describeHybridMonitorDataList(request: DescribeHybridMonitorDataListRequest): DescribeHybridMonitorDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHybridMonitorDataList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHybridMonitorNamespaceListRequest {
  keyword?: string(name='Keyword', description='Specifies whether to return the configuration details of metric import tasks for Alibaba Cloud services and the number of metric import tasks for third-party services. Valid values:

*   true
*   false (default value)', example='aliyun', position='Query'),
  namespace?: string(name='Namespace', description='The error message.', example='aliyun-test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **DescribeHybridMonitorNamespaceList**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The returned message.', example='10', position='Query'),
  showTaskStatistic?: boolean(name='ShowTaskStatistic', description='The details of the namespaces.', example='false', position='Query'),
}

model DescribeHybridMonitorNamespaceListResponseBody = {
  code?: string(name='Code', description='The account that is used to create the namespace.', example='Success'),
  describeHybridMonitorNamespace?: [ 
    {
      aliyunProductMetricList?: [ 
        {
          namespaceList?: [ 
            {
              metricList?: [ 
                {
                  list?: [ string ](name='List'),
                  period?: long(name='Period', example='60'),
                }
              ](name='MetricList', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
              namespace?: string(name='Namespace', description='The interval at which metrics are collected.

Unit: seconds.', example='acs_ecs_dashboard'),
            }
          ](name='NamespaceList', description='The list of namespaces.'),
          userId?: long(name='UserId', description='The ID of the request.', example='120886317861****'),
          YAMLConfig?: string(name='YAMLConfig', example='products:- namespace: acs_ecs_dashboard metric_info: - metric_list: - cpu_total dimension: \\"\\"'),
        }
      ](name='AliyunProductMetricList', description='Indicates whether the namespace is deleted. Valid values:

*   0: The namespace is not deleted.
*   1: The namespace is deleted.'),
      createTime?: string(name='CreateTime', description='The keyword that is used to search for namespaces.', example='1652682744000'),
      description?: string(name='Description', description='The number of metric import tasks for third-party services.', example='aliyun-test'),
      detail?: {
        spec?: string(name='Spec', description='The page number of the returned page.', example='cms.s1.3xlarge'),
      }(name='Detail', description='The name of the namespace.

The name can contain uppercase letters, lowercase letters, digits, and hyphens (-).'),
      id?: string(name='Id', description='The list of metrics for the Alibaba Cloud service.', example='3****'),
      isDelete?: int32(name='IsDelete', description='The details of the data retention period.', example='0'),
      modifyTime?: string(name='ModifyTime', description='The name of the namespace.', example='1652682744000'),
      namespace?: string(name='Namespace', description='The configuration details of metric import tasks for Alibaba Cloud services.', example='aliyun-test'),
      notAliyunTaskNumber?: long(name='NotAliyunTaskNumber', description='The number of entries returned per page.', example='0'),
    }
  ](name='DescribeHybridMonitorNamespace', description='The metrics.'),
  message?: string(name='Message', description='The ID of the namespace.', example='Specified parameter PageSize is not valid.'),
  pageNumber?: int32(name='PageNumber', description='The timestamp that was generated when the namespace was last modified.', example='1'),
  pageSize?: int32(name='PageSize', description='The total number of returned entries.', example='10'),
  requestId?: string(name='RequestId', description='The number of entries to return on each page.

A minimum of 1 entry can be returned on each page. Default value: 10.', example='1EC450A4-3221-5148-B77E-2827576CFE48'),
  success?: string(name='Success', description='The namespace for the Alibaba Cloud service.', example='true'),
  total?: int32(name='Total', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
}

model DescribeHybridMonitorNamespaceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHybridMonitorNamespaceListResponseBody(name='body'),
}

/**
  * The data retention period. Valid values:
  * *   cms.s1.large: Data is stored for 15 days.
  * *   cms.s1.xlarge: Data is stored for 32 days.
  * *   cms.s1.2xlarge: Data is stored for 63 days.
  * *   cms.s1.3xlarge: Data is stored for 93 days.
  * *   cms.s1.6xlarge: Data is stored for 185 days.
  * *   cms.s1.12xlarge: Data is stored for 376 days.
  *
 */
async function describeHybridMonitorNamespaceList(request: DescribeHybridMonitorNamespaceListRequest): DescribeHybridMonitorNamespaceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHybridMonitorNamespaceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHybridMonitorSLSGroupRequest {
  keyword?: string(name='Keyword', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='Logstore', position='Query'),
  pageNumber?: string(name='PageNumber', description='The timestamp that was generated when the Logstore group was created.

Unit: milliseconds.', example='1', position='Query'),
  pageSize?: string(name='PageSize', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='10', position='Query'),
  SLSGroupName?: string(name='SLSGroupName', description='The operation that you want to perform. Set the value to **DescribeHybridMonitorSLSGroup**.', example='Logstore_test', position='Query'),
}

model DescribeHybridMonitorSLSGroupResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  list?: [ 
    {
      createTime?: string(name='CreateTime', description='The number of entries returned per page.', example='1652845630000'),
      SLSGroupConfig?: [ 
        {
          SLSLogstore?: string(name='SLSLogstore', description='The name of the Logstore group.', example='Logstore-aliyun-all'),
          SLSProject?: string(name='SLSProject', description='The ID of the member account.

>  This parameter is returned only when you call API operations by using a management account.', example='aliyun-project'),
          SLSRegion?: string(name='SLSRegion', description='The Logstore.', example='cn-hangzhou'),
          SLSUserId?: string(name='SLSUserId', description='The page number of the returned page.', example='120886317861****'),
        }
      ](name='SLSGroupConfig', description='The Log Service project.'),
      SLSGroupDescription?: string(name='SLSGroupDescription', description='The configurations of the Logstore group.'),
      SLSGroupName?: string(name='SLSGroupName', description='The region ID.', example='Logstore_test'),
      updateTime?: string(name='UpdateTime', description='The ID of the request.', example='1652845630000'),
    }
  ](name='List', description='The description of the Logstore group.'),
  message?: string(name='Message', description='The timestamp that was generated when the Logstore group was modified.

Unit: milliseconds.', example='NotFound.SLSGroup'),
  pageNumber?: long(name='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='10'),
  requestId?: string(name='RequestId', description='The name of the Logstore group.', example='66683237-7126-50F8-BBF8-D67ACC919A17'),
  success?: string(name='Success', description='The keyword that is used to search for Logstore groups.'),
  total?: long(name='Total', example='2'),
}

model DescribeHybridMonitorSLSGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHybridMonitorSLSGroupResponseBody(name='body'),
}

/**
  * Indicates whether the call is successful. Valid values:
  * *   true: The call is successful.
  * *   false: The call fails.
  *
 */
async function describeHybridMonitorSLSGroup(request: DescribeHybridMonitorSLSGroupRequest): DescribeHybridMonitorSLSGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHybridMonitorSLSGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHybridMonitorTaskListRequest {
  groupId?: string(name='GroupId', description='The additional information of the instance.', example='3607****', position='Query'),
  includeAliyunTask?: boolean(name='IncludeAliyunTask', description='The timestamp when the metric import task was created.

Unit: milliseconds.', example='true', position='Query'),
  keyword?: string(name='Keyword', description='The conditions that are used to filter logs imported from Log Service.', example='task', position='Query'),
  namespace?: string(name='Namespace', description='The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.

*   namespace: the namespace of the Alibaba Cloud service.
*   metric_list: the metrics of the Alibaba Cloud service.', example='aliyun', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **DescribeHybridMonitorTaskList**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='10', position='Query'),
  targetUserId?: long(name='TargetUserId', description='The keyword that is used to search for metric import tasks.', example='120886317861****', position='Query'),
  taskId?: string(name='TaskId', description='The type of the metric import task. Valid values:

*   aliyun_fc: metric import tasks for Alibaba Cloud services
*   aliyun_sls: metrics for logs imported from Log Service', example='36****', position='Query'),
  taskType?: string(name='TaskType', description='The interval at which the CloudMonitor agent collects host monitoring data. Valid values:

*   15
*   30
*   60

Unit: seconds.', example='aliyun_fc', position='Query'),
}

model DescribeHybridMonitorTaskListResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', description='The configurations of the logs that are imported from Log Service.', example='success'),
  pageNumber?: int32(name='PageNumber', description='The method that is used to aggregate on-premises log data.', example='1'),
  pageSize?: int32(name='PageSize', description='The conditions that are used to match the instances in the application group.', example='10'),
  requestId?: string(name='RequestId', description='The alias of the extended field that indicates the result of basic operations that are performed on aggregation results.', example='11145B76-566A-5D80-A8A3-FAD98D310079'),
  success?: string(name='Success', description='The timeout period during which the CloudMonitor agent collects host monitoring data. Valid values:

*   0
*   15
*   30
*   60

Unit: seconds.', example='true'),
  taskList?: [ 
    {
      attachLabels?: [ 
        {
          name?: string(name='Name', description='The name of the key that is used to aggregate logs imported from Log Service.', example='key1'),
          value?: string(name='Value', description='The number of entries to return on each page.

Minimum value: 1. Default value: 10.', example='value1'),
        }
      ](name='AttachLabels', description='The method that is used to match the instance name. Valid values:

*   startWith: starts with a prefix
*   endWith: ends with a suffix
*   all: includes all
*   equals: equals
*   contains: contains
*   notContains: excludes'),
      collectInterval?: int32(name='CollectInterval', description='The relationship between the conditions that are used to filter metric import tasks. Valid values:

*   or
*   and', example='60'),
      collectTargetEndpoint?: string(name='CollectTargetEndpoint', description='The number of entries returned per page.', example='http://localhost'),
      collectTargetPath?: string(name='CollectTargetPath', description='The conditions that are used to filter logs imported from Log Service.', example='/metrics'),
      collectTargetType?: string(name='CollectTargetType', description='The ID of the application group.', example='nginx'),
      collectTimout?: int32(name='CollectTimout', description='The name of the namespace.

For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](~~428880~~).', example='15'),
      createTime?: string(name='CreateTime', description='The metric import tasks.', example='1639382496000'),
      description?: string(name='Description', description='The result that is returned after on-premises log data is split based on the specified matching mode.

>  The matching modes of on-premises log data include full regex mode, delimiter mode, and JSON mode.', example='aliyun'),
      extraInfo?: string(name='ExtraInfo', description='The network type of the host. Valid values:

*   `vpc`: a virtual private cloud (VPC)
*   `Internet`: Internet', example='test'),
      groupId?: string(name='GroupId', description='The name of the metric import task.', example='3607****'),
      instances?: [ string ](name='Instances', description='The name of the key that is used to filter logs imported from Log Service.'),
      logFilePath?: string(name='LogFilePath', description='The relationship between multiple filter conditions. Valid values:

*   and (default value): Logs are processed only if all filter conditions are met.
*   or: Logs are processed if one of the filter conditions is met.', example='C:\\UserData\\log\\*.Log'),
      logProcess?: string(name='LogProcess', description='The description of the metric import task.', example='[{"metric": "metric1","filters": [{"column": "filed2","type": "include","values": ["222222"]}],"groupBys": [{"column": "filed3","name": "filed3"}],"calculates": [{"column": "field1","name": "avg","type": "avg"}]},{"metric": "metric2","filters": [{"column": "field1","type": "include","values": ["11111"]}],"groupBys": [{"column": "filed2","name": "filed2"}],"calculates": [{"column": "field1","name": "avg","type": "avg"}]}]'),
      logSample?: string(name='LogSample', description='The type of the metric import task. Valid values:

*   aliyun_fc: metric import tasks for Alibaba Cloud services
*   aliyun_sls: metrics for logs imported from Log Service', example='{"logContent":"100.116.134.26 1119 - [13/Aug/2019:16:55:46 +0800] POST metrichub-cn-hongkong.aliyun.com /agent/metrics/putLines 200 0 \\"-\\" \\"127.0.0.1:7001\\" \\"Go-http-client/1.1\\" \\"-\\" \\"-\\" \\"0a98a21a15656865460656276e\\"","addData":{"field1":["1119","1119"],"filed2":["POSTx","POST"],"filed3":["true","200"]}}'),
      logSplit?: string(name='LogSplit', description='The total number of returned entries.', example='{"type": "regex","regex": "\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\s+(\\\\d+)\\\\s+\\\\S+\\\\s+\\\\[\\\\d+/\\\\S+/\\\\d+:\\\\d+:\\\\d+:\\\\d+\\\\s+\\\\+\\\\d+\\\\]\\\\s+(\\\\S+)\\\\s+\\\\S+\\\\s+/\\\\S+/\\\\S+/\\\\S+\\\\s+(\\\\d+)","columns": [{"name": "field1"},{"name": "filed2","translate": {"default": "-","mappings": [{"from": "(\\\\w+)","to": "$1x","type": "regex"}]}},{"name": "filed3","translate": {"default": "-","mappings": [{"from": "NumberRange(100,300)","to": "true","type": "function"}]}}]}'),
      matchExpress?: [ 
        {
          function?: string(name='Function', description='The extended fields that indicate the results of basic operations that are performed on aggregation results.', example='all'),
          name?: string(name='Name', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='name'),
          value?: string(name='Value', description='The name of the instance.', example='ECS_instance1'),
        }
      ](name='MatchExpress', description='The returned message.

*   If the call is successful, the value `successful` is returned.
*   If the call fails, an error message is returned.'),
      matchExpressRelation?: string(name='MatchExpressRelation', description='The URL of the destination from which the CloudMonitor agent collects host monitoring data.', example='or'),
      namespace?: string(name='Namespace', description='The relative path from which the CloudMonitor agent collects monitoring data.', example='aliyun'),
      networkType?: string(name='NetworkType', description='The keyword that corresponds to the instance name.', example='vpc'),
      SLSProcess?: string(name='SLSProcess', description='Specifies whether the returned result includes metric import tasks for Alibaba Cloud services. Valid values:

*   true (default value): includes metric import tasks for Alibaba Cloud services.
*   false: excludes metric import tasks for Alibaba Cloud services.', example='{"express": [],"filter": {"filters": [{"key": "task_type","operator": "=","value": "1"}]},"groupby": [{"alias": "isp","key": "isp","sqlKey": "t.`isp`","valueKey": "isp"}],"interval": 60,"labels": [{"name": "__cms_app__","type": 0,"value": "sitemonitor"}],"statistics": [{"alias": "http_dns_time_avg","function": "avg","key": "http_dns_time"}]}'),
      SLSProcessConfig?: {
        express?: [ 
          {
            alias?: string(name='Alias', example='SuccRate'),
            express?: string(name='Express', example='success_count'),
          }
        ](name='Express', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
        filter?: {
          filters?: [ 
            {
              operator?: string(name='Operator', description='The value of the tag.', example='='),
              SLSKeyName?: string(name='SLSKeyName', description='The type of the monitoring data. Valid values: Spring, Tomcat, Nginx, Tengine, JVM, Redis, and MySQL.', example='host'),
              value?: string(name='Value', description='The page number of the returned page.', example='200'),
            }
          ](name='Filters', description='The extended field that indicates the result of basic operations that are performed on aggregation results.'),
          relation?: string(name='Relation', description='The ID of the member account.

>  This parameter is required only if you call this operation to delete metric import tasks that belong to a member in a resource directory. In this case, the `TaskType` parameter is set to `aliyun_fc`.', example='and'),
        }(name='Filter', description='The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL.'),
        groupBy?: [ 
          {
            alias?: string(name='Alias', description='The ID of the request.', example='ApiResult'),
            SLSKeyName?: string(name='SLSKeyName', description='The alias of the aggregation result.', example='code'),
          }
        ](name='GroupBy', description='The sample on-premises log.'),
        statistics?: [ 
          {
            alias?: string(name='Alias', example='level_count'),
            function?: string(name='Function', example='count'),
            parameter1?: string(name='Parameter1', example='200'),
            parameter2?: string(name='Parameter2', example='299'),
            SLSKeyName?: string(name='SLSKeyName', example='name'),
          }
        ](name='Statistics'),
      }(name='SLSProcessConfig', description='The key of the tag.'),
      targetUserId?: string(name='TargetUserId', description='The ID of the metric import task.', example='120886317861****'),
      taskId?: string(name='TaskId', description='The configurations of the logs that are imported from Log Service.

>  This parameter is returned only if the `TaskType` parameter is set to `aliyun_sls`.', example='36****'),
      taskName?: string(name='TaskName', description='The ID of the instance.', example='aliyun_task'),
      taskType?: string(name='TaskType', description='The region where the host resides.', example='aliyun_sls'),
      uploadRegion?: string(name='UploadRegion', description='The ID of the member account.

>  This parameter is returned only if you call this operation by using a management account.', example='cn-hangzhou'),
      YARMConfig?: string(name='YARMConfig', description='The ID of the application group.

For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='products:- namespace: acs_ecs_dashboard metric_info: - metric_list: - cpu_total'),
    }
  ](name='TaskList', description='The ID of the metric import task.'),
  total?: int32(name='Total', description='The method that is used to filter logs imported from Log Service. Valid values:

*   `contain`: contains
*   `notContain`: does not contain
*   `>`: greater than
*   `<`: less than
*   `=`: equal to
*   `! =`: not equal to
*   `>=`: greater than or equal to
*   `<=`: less than or equal to', example='1'),
}

model DescribeHybridMonitorTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHybridMonitorTaskListResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function describeHybridMonitorTaskList(request: DescribeHybridMonitorTaskListRequest): DescribeHybridMonitorTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHybridMonitorTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogMonitorAttributeRequest {
  metricName: string(name='MetricName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='cpu_total', position='Query'),
}

model DescribeLogMonitorAttributeResponseBody = {
  code?: string(name='Code', description='The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.', example='200'),
  logMonitor?: {
    aggregates?: [ 
      {
        alias?: string(name='Alias', description='The name of the field in logs.', example='HostName'),
        fieldName?: string(name='FieldName', description='The condition that is used to filter logs. The ValueFilter and ValueFilterRelation parameters are used in pair. The filter condition is equivalent to the WHERE clause in SQL statements.

If no filter condition is specified, all logs are processed. Assume that logs contain the Level field, which may be set to Error. If you need to calculate the number of times that logs of the Error level appear every minute, you can set the filter condition to Level=Error and count the number of logs that meet this condition.', example='hostName'),
        function?: string(name='Function', description='The alias of the aggregate function.', example='count'),
        max?: string(name='Max', description='The minimum value.', example='10'),
        min?: string(name='Min', description='The function that is used to aggregate the monitoring data of logs within an aggregation period. Valid values:

*   count: counts the number.
*   sum: calculates the total value.
*   avg: calculates the average value.
*   max: selects the maximum value.
*   min: selects the minimum value.
*   countps: calculates the counted number of the specified field divided by the total number of seconds of the aggregation period.
*   sumps: calculates the total value of the specified field divided by the total number of seconds of the aggregation period.
*   distinct: counts the number of logs where the specified field appears within the aggregation period.', example='0'),
      }
    ](name='Aggregates', description='The maximum value.'),
    gmtCreate?: long(name='GmtCreate', description='The name of the Log Service project.', example='1547431398000'),
    groupId?: long(name='GroupId', description='The ID returned by Log Service.', example='12345'),
    groupbys?: [ string ](name='Groupbys'),
    logId?: long(name='LogId', description='The extended field. The extended field allows you to perform basic operations on the aggregation results.

Assume that you have calculated TotalNumber and 5XXNumber by aggregating the data. TotalNumber indicates the total number of HTTP requests, and 5XXNumber indicates the number of HTTP requests whose status code is greater than 499. You can calculate the server error rate by adding the following formula to the extended field: 5XXNumber/TotalNumber\\*100.', example='1234'),
    metricExpress?: string(name='MetricExpress', description='The ID of the region where the Log Service Logstore resides.', example='{"extend":{"errorPercent":"5XXNumber/TotalNumber*100"}}'),
    metricName?: string(name='MetricName', description='The ID of the application group.', example='cpu_total'),
    slsLogstore?: string(name='SlsLogstore', description='The name of the log monitoring metric. For more information, see [Appendix 1: Metrics](~~163515~~).', example='test-logstore'),
    slsProject?: string(name='SlsProject', description='The aggregate functions.', example='test-project'),
    slsRegionId?: string(name='SlsRegionId', description='The time when the log monitoring metric was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='cn-hangzhou'),
    tumblingwindows?: [ string ](name='Tumblingwindows', description='The dimension based on which the data is grouped. This parameter is equivalent to the GROUP BY clause in SQL statements. If no dimension is specified, all data is aggregated based on the aggregate function.'),
    valueFilter?: [ 
      {
        key?: string(name='Key', description='The field value to be matched in the filter condition.', example='hostName'),
        operator?: string(name='Operator', description='The size of the tumbling window for calculation. Unit: seconds. The system performs an aggregation for each tumbling window.', example='contain'),
        value?: string(name='Value', description='The method that is used to match the field value. Valid values:

*   `contain`
*   `notContain`
*   `>`: greater than
*   `<`: less than
*   `>=`: greater than or equal to
*   `<=`: less than or equal to', example='portal'),
      }
    ](name='ValueFilter', description='The name of the log field used for matching in the filter condition.'),
    valueFilterRelation?: string(name='ValueFilterRelation', description='The name of the Log Service Logstore.', example='and'),
  }(name='LogMonitor', description='The logical operator that is used between log filter conditions. The ValueFilter and ValueFilterRelation parameters are used in pair. Valid values:

*   and
*   or'),
  message?: string(name='Message', description='The ID of the request.', example='successful'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='C6718537-E673-4A58-8EE1-24B8B38C7AAE'),
  success?: boolean(name='Success', description='The details of the log monitoring metric.', example='true'),
}

model DescribeLogMonitorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogMonitorAttributeResponseBody(name='body'),
}

async function describeLogMonitorAttribute(request: DescribeLogMonitorAttributeRequest): DescribeLogMonitorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogMonitorAttribute', 'GET', '/', 'json', false, 'json', request);
}

model DescribeLogMonitorListRequest {
  groupId?: long(name='GroupId', description='The ID of the request.', example='123456', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page. Default value: 10', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The keyword that is used to search for log monitoring metrics. Fuzzy match is supported.', example='10', position='Query'),
  searchValue?: string(name='SearchValue', description='The ID of the application group.', example='test', position='Query'),
}

model DescribeLogMonitorListResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  logMonitorList?: [ 
    {
      gmtCreate?: long(name='GmtCreate', description='The name of the Log Service project.', example='1577766395000'),
      groupId?: long(name='GroupId', description='The ID returned by Log Service.', example='12345'),
      logId?: long(name='LogId', description='The ID of the region where the Log Service Logstore resides.', example='12345'),
      metricName?: string(name='MetricName', description='The ID of the application group.', example='cpu_total'),
      slsLogstore?: string(name='SlsLogstore', description='The name of the log monitoring metric. For more information, see [Appendix 1: Metrics](~~163515~~).', example='testSlS****'),
      slsProject?: string(name='SlsProject', description='The condition that is used to filter logs. The ValueFilter and ValueFilterRelation parameters are used in pair. The filter condition is equivalent to the WHERE clause in SQL statements.

If no filter condition is specified, all logs are processed. Assume that logs contain the Level field, which may be set to Error. If you need to calculate the number of times that logs of the Error level appear every minute, you can set the filter condition to Level=Error and count the number of logs that meet this condition.', example='sls-project-test****'),
      slsRegionId?: string(name='SlsRegionId', description='The time when the log monitoring metric was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='cn-hangzhou'),
      valueFilter?: [ 
        {
          key?: string(name='Key', description='The field value to be matched in the filter condition.', example='hostName'),
          operator?: string(name='Operator', example='contain'),
          value?: string(name='Value', description='The method that is used to match the field value. Valid values:

*   contain
*   notContain
*   `>`: greater than
*   `<`: less than
*   `>=`: greater than or equal to
*   `<=`: less than or equal to', example='portal'),
        }
      ](name='ValueFilter', description='The name of the log field used for matching in the filter condition.'),
      valueFilterRelation?: string(name='ValueFilterRelation', description='The name of the Log Service Logstore.', example='and'),
    }
  ](name='LogMonitorList', description='The logical operator that is used between log filter conditions. The ValueFilter and ValueFilterRelation parameters are used in pair. Valid values:

*   and
*   or'),
  message?: string(name='Message', description='The number of entries returned on each page.', example='successful'),
  pageNumber?: int32(name='PageNumber', description='The total number of the returned entries.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of the returned page.', example='10'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='01E90080-4300-4FAA-B9AE-161956BC350D'),
  success?: boolean(name='Success', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='true'),
  total?: long(name='Total', description='The log monitoring metrics.', example='15'),
}

model DescribeLogMonitorListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogMonitorListResponseBody(name='body'),
}

async function describeLogMonitorList(request: DescribeLogMonitorListRequest): DescribeLogMonitorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogMonitorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricDataRequest {
  dimensions?: string(name='Dimensions', description='The beginning of the time range to query.

*   If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``

*   If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:

    *   If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
    *   If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
    *   If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.

The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

> 
*   You must set the `StartTime` parameter to a point in time that is later than 00:00:00 Thursday, January 1, 1970. Otherwise, this parameter is invalid.
*   We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='[{"instanceId": "i-abcdefgh12****"}]', position='Query'),
  endTime?: string(name='EndTime', description='The namespace of the cloud service.

For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='1618368960000', position='Query'),
  express?: string(name='Express', description='The statistical period of the monitoring data.

Valid values: 15, 60, 900, and 3600.

Unit: seconds.', example='{"groupby":["userId","instanceId"]}', position='Query'),
  length?: string(name='Length', description='The ID of the request.', example='1000', position='Query'),
  metricName: string(name='MetricName', description='The end of the time range to query.

*   If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``

*   If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:

    *   If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
    *   If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
    *   If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.

The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

>  We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='cpu_idle', position='Query'),
  namespace: string(name='Namespace', description='The operation that you want to perform. Set the value to **DescribeMetricData**.', example='acs_ecs_dashboard', position='Query'),
  period?: string(name='Period', description='The error message.', example='60', position='Query'),
  startTime?: string(name='StartTime', description='The dimensions that specify the resources whose monitoring data you want to query.

Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.

>  You can query a maximum of 50 instances in a single request.', example='1618368900000', position='Query'),
}

model DescribeMetricDataResponseBody = {
  code?: string(name='Code', description='The monitoring data. The value includes the following fields:

*   `timestamp`: the timestamp when the alert was triggered.
*   `userId`: the ID of the user for which the alert was triggered.
*   `instanceId`: the ID of the instance for which the alert was triggered.
*   `Minimum`, `Average`, and `Maximum`: the aggregation methods.', example='200'),
  datapoints?: string(name='Datapoints', example='[{\\"timestamp\\":1618368900000,\\"Average\\":95.8291666666667,\\"Minimum\\":65.48,\\"Maximum\\":100.0},{\\"timestamp\\":1618368960000,\\"Average\\":95.8683333333333,\\"Minimum\\":67.84,\\"Maximum\\":100.0}]'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', example='6A5F022D-AC7C-460E-94AE-B9E75083D027'),
}

model DescribeMetricDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricDataResponseBody(name='body'),
}

/**
  * The statistical period of the metric.
  * Valid values: 15, 60, 900, and 3600.
  * Unit: seconds.
  * > 
  * *   If this parameter is not specified, monitoring data is queried based on the period in which metric values are reported.
  * *   For more information about the statistical period of a metric that is specified by the `MetricName` parameter, see [Appendix 1: Metrics](~~163515~~).
  *
 */
async function describeMetricData(request: DescribeMetricDataRequest): DescribeMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricLastRequest {
  dimensions?: string(name='Dimensions', description='The dimensions that specify the resources whose monitoring data you want to query.

Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.

>  You can query a maximum of 50 instances in a single request.', example='[{"instanceId":"i-abcdefgh12****"}]', position='Query'),
  endTime?: string(name='EndTime', description='The error message.', example='2019-01-31 10:10:00', position='Query'),
  express?: string(name='Express', description='The start of the time range to query monitoring data.', example='{"groupby":["userId","instanceId"]}', position='Query'),
  length?: string(name='Length', description='The namespace of the cloud service. Format: acs_service name.

For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='1000', position='Query'),
  metricName: string(name='MetricName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='CPUUtilization', position='Query'),
  namespace: string(name='Namespace', description='The paging token.

*   If the number of results exceeds the maximum number of entries allowed on a single page, a paging token is returned.
*   This token can be used as an input parameter to obtain the next page of results. If all results are obtained, no token is returned.', example='acs_ecs_dashboard', position='Query'),
  nextToken?: string(name='NextToken', description='The expression that is used to calculate the query results in real time.', example='15761432850009dd70bb64cff1f0fff6c0b08ffff073be5fb1e785e2b020f7fed9b5e137bd810a6d6cff5ae****', position='Query'),
  period?: string(name='Period', description='The operation that you want to perform. Set the value to **DescribeMetricLast**.', example='60', position='Query'),
  startTime?: string(name='StartTime', description='The end of the time range to query monitoring data.

*   For second-level data, the start time is obtained by comparing the time that is specified by the startTime parameter and 20 minutes earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.
*   For minute-level data, the start time is obtained by comparing the time that is specified by the startTime parameter and 2 hours earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.
*   For hour-level data, the start time is obtained by comparing the time that is specified by the startTime parameter and two days earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.', example='2019-01-31 10:00:00', position='Query'),
}

model DescribeMetricLastResponseBody = {
  code?: string(name='Code', description='Queries the latest monitoring data of a metric.', example='200'),
  datapoints?: string(name='Datapoints', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='[{"timestamp":1548777660000,"userId":"123456789876****","instanceId":"i-abcdefgh12****","Minimum":93.1,"Average":99.52,"Maximum":100}]'),
  message?: string(name='Message', example='The specified resource is not found.'),
  nextToken?: string(name='NextToken', description='The interval at which the monitoring data is queried.

Unit: seconds.', example='xxxxxx'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='021472A6-25E3-4094-8D00-BA4B6A5486C3'),
  success?: boolean(name='Success', description='The monitoring data.', example='true'),
}

model DescribeMetricLastResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricLastResponseBody(name='body'),
}

/**
  * The number of entries to return on each page.
  * Default value: 1000. This value indicates that a maximum of 1,000 entries of monitoring data can be returned on each page.
  * >  The maximum value of the Length parameter in a request is 1440.
  *
 */
async function describeMetricLast(request: DescribeMetricLastRequest): DescribeMetricLastResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricLast', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricListRequest {
  dimensions?: string(name='Dimensions', description='The expression that is used to compute the query results in real time.

>  Only the groupby expression is supported. This expression is similar to the GROUP BY statement that is used in databases.', example='[{"instanceId": "i-abcdefgh12****"}]', position='Query'),
  endTime?: string(name='EndTime', description='The dimensions that specify the resources whose monitoring data you want to query.

Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.

>  You can query a maximum of 50 instances in a single request.', example='2019-01-30 00:10:00', position='Query'),
  express?: string(name='Express', description='The interval at which the monitoring data is queried. Unit: seconds. Valid values: 60, 300, and 900.', example='{"groupby":["userId","instanceId"]}', position='Query'),
  length?: string(name='Length', description='The beginning of the time range to query. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

>  The specified period includes the end time and excludes the start time. The start time must be earlier than the end time.', example='1000', position='Query'),
  metricName: string(name='MetricName', description='The operation that you want to perform. Set the value to **DescribeMetricList**.', example='cpu_idle', position='Query'),
  namespace: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='acs_ecs_dashboard', position='Query'),
  nextToken?: string(name='NextToken', description='The namespace of the cloud service. Format: acs_service name.

For more information about the namespaces of cloud services, see [Appendix 1: Metrics](~~163515~~).', example='15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****', position='Query'),
  period?: string(name='Period', description='The end of the time range to query. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format', example='60', position='Query'),
  startTime?: string(name='StartTime', description='The error message.', example='2019-01-30 00:00:00', position='Query'),
}

model DescribeMetricListResponseBody = {
  code?: string(name='Code', example='200'),
  datapoints?: string(name='Datapoints', description='Queries the monitoring data of a metric for a specified cloud service.', example='[{"timestamp":1548777660000,"userId":"120886317861****","instanceId":"i-abc","Minimum":9.92,"Average":9.92,"Maximum":9.92}]'),
  message?: string(name='Message', example='The specified resource is not found.'),
  nextToken?: string(name='NextToken', description='The ID of the request.', example='15761441850009dd70bb64cff1f0fff6d0b08ffff073be5fb1e785e2b020f7fed9b5e137bd810a6d6cff5ae****'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', description='The monitoring data.', example='3121AE7D-4AFF-4C25-8F1D-C8226EBB1F42'),
  success?: boolean(name='Success', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='true'),
}

model DescribeMetricListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricListResponseBody(name='body'),
}

/**
  * The name of the metric.
  * For more information about metric names, see [Appendix 1: Metrics](~~163515~~).
  *
 */
async function describeMetricList(request: DescribeMetricListRequest): DescribeMetricListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricMetaListRequest {
  labels?: string(name='Labels', description='The page to return. Default value: 1', example='[{"name":"productCategory","value":"kvstore_old"}]', position='Query'),
  metricName?: string(name='MetricName', description='The number of entries to return on each page. Default value: 30.', example='CPUUtilization', position='Query'),
  namespace?: string(name='Namespace', description='The name of the metric. For more information, see [Appendix 1: Metrics](~~163515~~).', example='acs_kvstore', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The response code.

>  The HTTP 200 code indicates that the request was successful.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The error message.', example='30', position='Query'),
}

model DescribeMetricMetaListResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The total number of returned records.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='Indicates whether the request was successful. The value true indicates success. The value false indicates failure.', example='0CCE0AF0-053C-4B13-A583-DC9A85785D49'),
  resources?: {
    resource?: [ 
    {
      description?: string(name='Description', description='The unit of the metric.', example='CPUUtilization'),
      dimensions?: string(name='Dimensions', description='The statistical period of the metric. Multiple statistical periods are separated with commas (,).', example='instanceId'),
      labels?: string(name='Labels', description='The dimensions of the metric. Multiple dimensions are separated with commas (,).', example='[{\\"name\\":\\"alertUnit\\",\\"value\\":\\"Bytes\\"},{\\"name\\":\\"minAlertPeriod\\",\\"value\\":\\"60\\"},{\\"name\\":\\"metricCategory\\",\\"value\\":\\"instanceId\\"},{\\"name\\":\\"instanceType\\",\\"value\\":\\"disaster\\"},{\\"name\\":\\"is_alarm\\",\\"value\\":\\"true\\"},{\\"name\\":\\"productCategory\\",\\"value\\":\\"kvstore_old\\"}]'),
      metricName?: string(name='MetricName', description='The tags of the metric, including one or more JSON strings. Format: `[{"name":"tag name","value":"tag value"}]`. The `name` can be repeated.

The following tags are available:

*   metricCategory: the category of the metric.
*   alertEnable: specifies whether to report alerts for the metric.
*   alertUnit: the suggested unit of the metric value in alerts.
*   unitFactor: the factor for metric unit conversion.
*   minAlertPeriod: the minimum time interval to report a new alert.
*   productCategory: the category of the service.', example='CPUUtilization'),
      namespace?: string(name='Namespace', description='The statistical method. Multiple statistic methods are separated with commas (,).', example='acs_kvstore'),
      periods?: string(name='Periods', description='This operation is usually used with DescribeMetricList and DescribeMetricLast. For more information, see [DescribeMetricList](~~51936~~) and [DescribeMetricLast](~~51939~~).', example='60,300'),
      statistics?: string(name='Statistics', example='Average,Minimum,Maximum'),
      unit?: string(name='Unit', description='The namespace of the service. The value is usually in the format of acs_Service.', example='%'),
    }
  ](name='Resource')
  }(name='Resources', description='The description of the metric.'),
  success?: boolean(name='Success', description='The name of the metric.', example='true'),
  totalCount?: string(name='TotalCount', description='The configuration of the metric.', example='12'),
}

model DescribeMetricMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricMetaListResponseBody(name='body'),
}

/**
  * The namespace of the service.
  * For more information, see [Appendix 1: Metrics](~~163515~~).
  *
 */
async function describeMetricMetaList(request: DescribeMetricMetaListRequest): DescribeMetricMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricMetaList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleBlackListRequest {
  category?: string(name='Category', description='The ID of the blacklist policy.', example='ecs', position='Query'),
  ids?: [ string ](name='Ids', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  isEnable?: boolean(name='IsEnable', position='Query'),
  name?: string(name='Name', position='Query'),
  namespace?: string(name='Namespace', description='The timestamp when the blacklist policy expired.

Unit: milliseconds.', example='acs_ecs_dashboard', position='Query'),
  order?: int32(name='Order', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='DESC', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The name of the metric.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The categories of the Alibaba Cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.', example='100', position='Query'),
  scopeType?: string(name='ScopeType', position='Query'),
}

model DescribeMetricRuleBlackListResponseBody = {
  code?: string(name='Code', description='The categories of the Alibaba Cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.', example='200'),
  describeMetricRuleBlackList?: [ 
    {
      category?: string(name='Category', description='The name of the blacklist policy.', example='ecs'),
      createTime?: string(name='CreateTime', description='The metrics of the instance.', example='1665714561000'),
      effectiveTime?: string(name='EffectiveTime', description='The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.', example='00:00-23:59'),
      enableEndTime?: long(name='EnableEndTime', description='The number of entries to return on each page.

Default value: 10.', example='1640608200000'),
      enableStartTime?: long(name='EnableStartTime', description='The ID of the application group. The value of this parameter is a JSON array.

>  This parameter is returned only if the `ScopeType` parameter is set to `GROUP`.', example='1640237400000'),
      id?: string(name='Id', description='The timestamp when the blacklist policy was modified.

Unit: milliseconds.', example='93514c96-ceb8-47d8-8ee3-93b6d98b****'),
      instances?: [ string ](name='Instances'),
      isEnable?: boolean(name='IsEnable', description='The total number of blacklist policies.', example='true'),
      metrics?: [ 
        {
          metricName?: string(name='MetricName', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='disk_utilization'),
          resource?: string(name='Resource', description='The ID of the request.', example='[{"device":"C:"}]'),
        }
      ](name='Metrics', description='The method that is used to sort query results by time. Valid values:

*   DESC (default): descending order
*   ASC: ascending order'),
      name?: string(name='Name', description='The status of the blacklist policy. Valid values:

*   true: The blacklist policy is enabled.
*   false: The blacklist policy is disabled.', example='Blacklist-01'),
      namespace?: string(name='Namespace', description='The number of the page to return.

Default value: 1.', example='acs_ecs_dashboard'),
      scopeType?: string(name='ScopeType', description='The IDs of instances that belong to the specified cloud service.', example='USER'),
      scopeValue?: [ string ](name='ScopeValue'),
      updateTime?: string(name='UpdateTime', description='The ID of the blacklist policy.', example='1665718373000'),
    }
  ](name='DescribeMetricRuleBlackList', description='The timestamp when the blacklist policy started to take effect.

Unit: milliseconds.'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The namespace of the cloud service.', example='D63E76CB-29AA-5B9F-88CE-400A6F28D428'),
  success?: boolean(name='Success', description='The namespace of the cloud service.

For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='true'),
  total?: int32(name='Total', description='The timestamp when the blacklist policy was created.

Unit: milliseconds.', example='1'),
}

model DescribeMetricRuleBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleBlackListResponseBody(name='body'),
}

async function describeMetricRuleBlackList(request: DescribeMetricRuleBlackListRequest): DescribeMetricRuleBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleBlackList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleCountRequest {
  metricName?: string(name='MetricName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The name of the metric. For more information, see [Appendix 1: Metrics](~~163515~~).', example='acs_ecs_dashboard', position='Query'),
}

model DescribeMetricRuleCountResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  metricRuleCount?: {
    alarm?: int32(name='Alarm', example='5'),
    disable?: int32(name='Disable', description='The total number of alert rules.', example='0'),
    nodata?: int32(name='Nodata', description='The number of disabled alert rules.', example='0'),
    ok?: int32(name='Ok', description='The number of alert rules without data.', example='40'),
    total?: int32(name='Total', description='The number of alert rules with active alerts.', example='45'),
  }(name='MetricRuleCount', description='The number of alert rules without active alerts.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='FF38D33A-67C1-40EB-AB65-FAEE51EDB644'),
  success?: boolean(name='Success', description='The number of alert rules in each state.', example='true'),
}

model DescribeMetricRuleCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleCountResponseBody(name='body'),
}

async function describeMetricRuleCount(request: DescribeMetricRuleCountRequest): DescribeMetricRuleCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleCount', 'GET', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleListRequest {
  alertState?: string(name='AlertState', description='The status of the alert rule. Valid values:

*   OK: The alert rule has no active alerts.
*   ALARM: The alert rule has active alerts.
*   INSUFFICIENT_DATA: No data is available.', example='OK', position='Query'),
  dimensions?: string(name='Dimensions', description='The dimensions of the alert rule. The dimensions specify the resources for which you want to query monitoring data.

Set the value to a set of key-value pairs, for example, `userId:120886317861****` or `i-2ze2d6j5uhg20x47****`.', example='{"instanceId":"i-2ze2d6j5uhg20x47****"}', position='Query'),
  enableState?: boolean(name='EnableState', description='Specifies whether to query enabled or disabled alert rules. Valid values:

*   true: queries enabled alert rules.
*   false: queries disabled alert rules.', example='true', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group.

For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='7301****', position='Query'),
  metricName?: string(name='MetricName', description='The name of the metric.

For information about how to obtain the name of a metric, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~163515~~).', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cloud service.

For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~163515~~).', example='acs_ecs_dashboard', position='Query'),
  page?: int32(name='Page', description='The page number of the page to return.

Minimum value: 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Minimum value: 1. Default value: 10.', example='10', position='Query'),
  ruleIds?: string(name='RuleIds', description='The ID of the alert rule. You can specify up to 20 IDs at a time. Separate multiple IDs with commas (,).', example='applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the alert rule.

This parameter supports fuzzy match.', example='Rule_01', position='Query'),
}

model DescribeMetricRuleListResponseBody = {
  alarms?: {
    alarm?: [ 
    {
      alertState?: string(name='AlertState', description='The status of the alert rule. Valid values:

*   OK: The alert rule has no active alerts.
*   ALARM: The alert rule has active alerts.
*   INSUFFICIENT_DATA: No data is available.', example='OK'),
      compositeExpression?: {
        expressionList?: {
          expressionList?: [ 
          {
            comparisonOperator?: string(name='ComparisonOperator', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='GreaterThanOrEqualToThreshold'),
            metricName?: string(name='MetricName', description='The metric that is used to monitor the cloud service.', example='cpu_total'),
            period?: int32(name='Period', description='The aggregation period of the metric.

Unit: seconds.', example='60'),
            statistics?: string(name='Statistics', description='The statistical method of the metric. Valid values:

*   $Maximum: the maximum value
*   $Minimum: the minimum value
*   $Average: the average value
*   $Availability: the availability rate (usually used for site monitoring)

>  `$` is the prefix of the metric. For information about the Alibaba Cloud services that are supported by CloudMonitor, see [Appendix 1: Metrics](~~163515~~).', example='$Maximum'),
            threshold?: string(name='Threshold', description='The alert threshold.', example='90'),
          }
        ](name='ExpressionList')
        }(name='ExpressionList', description='The trigger conditions that are created in standard mode.'),
        expressionListJoin?: string(name='ExpressionListJoin', description='The relationship between the trigger conditions for multiple metrics. Valid values:

*   `&&`: An alert is triggered only if all metrics meet the trigger conditions. An alert is triggered only if the results of all expressions specified in the ExpressionList parameter are `true`.
*   `||`: An alert is triggered if one of the metrics meets the trigger conditions.', example='||'),
        expressionRaw?: string(name='ExpressionRaw', description='The trigger conditions that are created by using expressions. You can use expressions to create trigger conditions in the following scenarios:

*   Set an alert blacklist for specific resources. For example, if you specify `$instanceId != \\"i-io8kfvcpp7x5****\\" ``&&`` $Average > 50`, no alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 50.
*   Set a special alert threshold for a specified instance in the rule. For example, if you specify `$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)`, an alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 80 or the `average metric value` of other instances exceeds 50.
*   Limit the number of instances whose metric values exceed the threshold. For example, if you specify `count($Average > 20) > 3`, an alert is triggered only when the number of instances whose `average metric value` exceeds 20 exceeds three.', example='$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)'),
        level?: string(name='Level', description='The level of the alert. Valid values:

*   Critical
*   Warn
*   Info', example='Critical'),
        times?: int32(name='Times', description='The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.', example='3'),
      }(name='CompositeExpression', description='The trigger conditions for multiple metrics.

>  The trigger conditions for a single metric and multiple metrics are mutually exclusive. You cannot specify trigger conditions for a single metric and multiple metrics at the same time.'),
      contactGroups?: string(name='ContactGroups', description='The alert contact group.', example='ECS_Alarm'),
      dimensions?: string(name='Dimensions', description='The dimensions of the alert rule.', example='[{"instanceId":"i-2ze2d6j5uhg20x47****"}]'),
      effectiveInterval?: string(name='EffectiveInterval', description='The time period during which the alert rule is effective.', example='05:31-23:59'),
      enableState?: boolean(name='EnableState', description='Indicates whether the alert rule is enabled. Valid values:

*   true: The alert rule is enabled.
*   false: The alert rule is disabled.', example='true'),
      escalations?: {
        critical?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='GreaterThanOrEqualToThreshold'),
          preCondition?: string(name='PreCondition', description='The additional conditions for triggering Critical-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.

For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.

>  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.', example='$Average>80'),
          statistics?: string(name='Statistics', description='The statistical methods for Critical-level alerts.', example='Average'),
          threshold?: string(name='Threshold', description='The threshold for Critical-level alerts.', example='90'),
          times?: int32(name='Times', description='The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.', example='3'),
        }(name='Critical', description='The conditions for triggering Critical-level alerts.'),
        info?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='GreaterThanOrEqualToThreshold'),
          preCondition?: string(name='PreCondition', description='The additional conditions for triggering Info-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.

For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.

>  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.', example='$Average>80'),
          statistics?: string(name='Statistics', description='The statistical methods for Info-level alerts.', example='Average'),
          threshold?: string(name='Threshold', description='The threshold for Info-level alerts.', example='90'),
          times?: int32(name='Times', description='The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.', example='3'),
        }(name='Info', description='The conditions for triggering Info-level alerts.'),
        warn?: {
          comparisonOperator?: string(name='ComparisonOperator', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='GreaterThanOrEqualToThreshold'),
          preCondition?: string(name='PreCondition', description='The additional conditions for triggering Warn-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.

For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.

>  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.', example='$Average>80'),
          statistics?: string(name='Statistics', description='The statistical methods for Warn-level alerts.', example='Average'),
          threshold?: string(name='Threshold', description='The threshold for Warn-level alerts.', example='90'),
          times?: int32(name='Times', description='The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.', example='3'),
        }(name='Warn', description='The conditions for triggering Warn-level alerts.'),
      }(name='Escalations', description='The conditions for triggering different levels of alerts.'),
      groupId?: string(name='GroupId', description='The ID of the application group.', example='7301****'),
      groupName?: string(name='GroupName', description='The name of the application group.

>  If the alert rule is associated with an application group, the name of the application group is returned in this parameter.', example='ECS_Group'),
      labels?: {
        labels?: [ 
        {
          key?: string(name='Key', description='The tag key of the alert rule.', example='cmsRuleKey'),
          value?: string(name='Value', description='The tag value of the alert rule.', example='cmsRuleValue'),
        }
      ](name='Labels')
      }(name='Labels', description='The tags of the alert rule.'),
      mailSubject?: string(name='MailSubject', description='The subject of the alert notification email.', example='"${serviceType}-${metricName}-${levelDescription}Notification(${dimensions})"'),
      metricName?: string(name='MetricName', description='The name of the metric.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The namespace of the cloud service.', example='acs_ecs_dashboard'),
      noDataPolicy?: string(name='NoDataPolicy', description='The method that is used to handle alerts when no monitoring data is found. Valid values:

*   KEEP_LAST_STATE (default value): No operation is performed.
*   INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
*   OK: The status is considered normal.', example='KEEP_LAST_STATE'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', description='The time period during which the alert rule is ineffective.', example='00:00-05:30'),
      period?: string(name='Period', description='The statistical period.', example='60'),
      prometheus?: {
        annotations?: {
          annotations?: [ 
          {
            key?: string(name='Key', description='The key of the annotation.', example='summary'),
            value?: string(name='Value', description='The value of the annotation.', example='{{ $labels.instance }} CPU usage above 10% {current value: {{ humanizePercentage $value }} }'),
          }
        ](name='Annotations')
        }(name='Annotations', description='The annotations of the Prometheus alert rule. When a Prometheus alert is triggered, the system renders the annotated keys and values to help you understand the metrics and alert rule.

>  This parameter is equivalent to the annotations parameter of open source Prometheus.'),
        level?: string(name='Level', description='The level of the alert. Valid values:

*   Critical
*   Warn
*   Info', example='Critical'),
        promQL?: string(name='PromQL', description='The PromQL query statement.

>  The data obtained by using the PromQL query statement is the monitoring data. You must include the alert threshold in this statement.', example='CpuUsage{instanceId="xxxx"}[1m]>90'),
        times?: long(name='Times', description='The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.', example='3'),
      }(name='Prometheus', description='The Prometheus alert rule.

>  This parameter is required only when you create a Prometheus alert rule for Hybrid Cloud Monitoring.'),
      resources?: string(name='Resources', description='The resources that are associated with the alert rule.', example='[{\\"instanceId\\":\\"i-2ze2d6j5uhg20x47****\\"}]'),
      ruleId?: string(name='RuleId', description='The ID of the alert rule.', example='applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****'),
      ruleName?: string(name='RuleName', description='The name of the alert rule.', example='Rule_01'),
      silenceTime?: int32(name='SilenceTime', description='The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. Minimum value: 3600.

Only one alert is reported during each mute period even if the metric value consecutively exceeds the alert rule threshold several times.', example='86400'),
      sourceType?: string(name='SourceType', description='The type of the alert rule. Valid value: METRIC. This value indicates an alert rule for time series metrics.', example='METRIC'),
      webhook?: string(name='Webhook', description='The callback URL. CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.', example='https://www.aliyun.com'),
    }
  ](name='Alarm')
  }(name='Alarms', description='The details of the alert rules.'),
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='386C6712-335F-5054-930A-CC92B851ECBA'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   true: The call is successful.
*   false: The call fails.', example='true'),
  total?: string(name='Total', description='The total number of returned entries.', example='1'),
}

model DescribeMetricRuleListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleListResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query all alert rules within your Alibaba Cloud account. The returned result shows that only one alert rule is found. The name of the alert rule is `Rule_01` and the ID is `applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****`.
  *
 */
async function describeMetricRuleList(request: DescribeMetricRuleListRequest): DescribeMetricRuleListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleTargetsRequest {
  ruleId: string(name='RuleId', description='The ID of the alert rule.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='ae06917_75a8c43178ab66****', position='Query'),
}

model DescribeMetricRuleTargetsResponseBody = {
  code?: string(name='Code', description='The Alibaba Cloud Resource Name (ARN) of the resource. Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
*   {userId}: the ID of the Alibaba Cloud account.
*   {regionId}: the region ID of the message queue or topic.
*   {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues** - **topics** {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`', example='200'),
  message?: string(name='Message', description='The ID of the resource for which alerts are triggered.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='786E92D2-AC66-4250-B76F-F1E2FCDDBA1C'),
  success?: boolean(name='Success', description='The ID of the request.', example='true'),
  targets?: {
    target?: [ 
    {
      arn?: string(name='Arn', description='Queries the resources that are associated with a specified alert rule.', example='acs:mns:cn-hangzhou:120886317861****:/queues/test/message'),
      id?: string(name='Id', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1'),
      jsonParams?: string(name='JsonParams', example='{"customField1":"value1","customField2":"$.name"}'),
      level?: string(name='Level', example='["INFO", "WARN", "CRITICAL"]'),
    }
  ](name='Target')
  }(name='Targets', description='The operation that you want to perform. Set the value to **DescribeMetricRuleTargets**.'),
}

model DescribeMetricRuleTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleTargetsResponseBody(name='body'),
}

/**
  * The parameters of the alert callback. The parameters are in the JSON format.
  *
 */
async function describeMetricRuleTargets(request: DescribeMetricRuleTargetsRequest): DescribeMetricRuleTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleTargets', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleTemplateAttributeRequest {
  name?: string(name='Name', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='ECS_Template1', position='Query'),
  templateId?: string(name='TemplateId', description='The error message.', example='70****', position='Query'),
}

model DescribeMetricRuleTemplateAttributeResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='Indicates whether the call is successful. Valid values:

*   true: The call is successful.
*   false: The call fails.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The details of the alert template.', example='8F3A82AD-DA92-52B0-8EC6-C059D1C3839F'),
  resource?: {
    alertTemplates?: {
      alertTemplate?: [ 
      {
        category?: string(name='Category', description='The name of the alert rule.', example='ecs'),
        escalations?: {
          critical?: {
            comparisonOperator?: string(name='ComparisonOperator', description='The threshold for Critical-level alerts.', example='GreaterThanOrEqualToThreshold'),
            statistics?: string(name='Statistics', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Average'),
            threshold?: string(name='Threshold', description='This topic provides an example to show how to query the details of an alert template whose ID is `70****`.', example='90'),
            times?: int32(name='Times', description='The statistical method for Critical-level alerts.

The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='5'),
          }(name='Critical', description='The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.'),
          info?: {
            comparisonOperator?: string(name='ComparisonOperator', description='The threshold for Info-level alerts.', example='GreaterThanOrEqualToThreshold'),
            statistics?: string(name='Statistics', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='Average'),
            threshold?: string(name='Threshold', description='The conditions for triggering Warn-level alerts.', example='90'),
            times?: int32(name='Times', description='The statistical method for Info-level alerts.

The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='3'),
          }(name='Info', description='The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.'),
          warn?: {
            comparisonOperator?: string(name='ComparisonOperator', description='The threshold for Warn-level alerts.', example='GreaterThanOrEqualToThreshold'),
            statistics?: string(name='Statistics', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='Average'),
            threshold?: string(name='Threshold', description='The conditions for triggering Critical-level alerts.', example='90'),
            times?: int32(name='Times', description='The statistical method for Warn-level alerts.

The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='3'),
          }(name='Warn', description='The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.'),
        }(name='Escalations', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle'),
        labels?: {
          labels?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Labels')
        }(name='Labels'),
        metricName?: string(name='MetricName', example='cpu_total'),
        namespace?: string(name='Namespace', description='The processing method of alerts when no monitoring data is found. Valid values:

*   KEEP_LAST_STATE (default value): No operation is performed.
*   INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
*   OK: The alert rule has no active alerts.', example='acs_ecs_dashboard'),
        noDataPolicy?: string(name='NoDataPolicy', description='The threshold and the alert level.', example='KEEP_LAST_STATE'),
        ruleName?: string(name='RuleName', description='The conditions for triggering Info-level alerts.', example='ECS_Rule'),
        selector?: string(name='Selector', description='The namespace of the cloud service.', example='{"disk":"/"}'),
        webhook?: string(name='Webhook', description='The abbreviation of the cloud service name.', example='https://www.aliyun.com'),
      }
    ](name='AlertTemplate')
    }(name='AlertTemplates', description='The callback URL to which a request is sent when an alert is triggered.'),
    description?: string(name='Description'),
    name?: string(name='Name', description='The ID of the alert template.', example='ECS_Template1'),
    restVersion?: string(name='RestVersion', description='The list of alert templates.', example='1'),
    templateId?: string(name='TemplateId', description='The dimension of the alert. It is an extended field.', example='70****'),
  }(name='Resource', description='The version of the alert template.'),
  success?: boolean(name='Success', description='The name of the alert template.', example='true'),
}

model DescribeMetricRuleTemplateAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleTemplateAttributeResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeMetricRuleTemplateAttribute.
  *
 */
async function describeMetricRuleTemplateAttribute(request: DescribeMetricRuleTemplateAttributeRequest): DescribeMetricRuleTemplateAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleTemplateAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricRuleTemplateListRequest {
  history?: boolean(name='History', description='The name of the alert template.', example='false', position='Query'),
  keyword?: string(name='Keyword', description='The name of the application group.', example='ECS', position='Query'),
  name?: string(name='Name', description='The number of entries to return on each page.', example='ECS_Template1', position='Query'),
  order?: boolean(name='Order', description='The version of the alert template.

Default value: 0.', example='true', position='Query'),
  orderBy?: string(name='OrderBy', description='The timestamp when the alert template was created.

Unit: milliseconds.', example='gmtCreate', position='Query'),
  pageNumber?: long(name='PageNumber', description='The error message.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='Specifies whether to display the application history of the alert templates. Default value: false. Valid values:

*   true
*   false', example='10', position='Query'),
  templateId?: long(name='TemplateId', description='The name of the alert template.', example='70****', position='Query'),
}

model DescribeMetricRuleTemplateListResponseBody = {
  code?: int32(name='Code', description='The timestamp when the alert template was applied to the application group.

Unit: milliseconds.', example='200'),
  message?: string(name='Message', description='The list of alert templates.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The total number of returned entries.', example='659401C0-6214-5C02-972A-CFA929D717B7'),
  success?: boolean(name='Success', description='The keyword of the alert template name.', example='true'),
  templates?: {
    template?: [ 
    {
      applyHistories?: {
        applyHistory?: [ 
        {
          applyTime?: long(name='ApplyTime', example='1646055898000'),
          groupId?: long(name='GroupId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='3607****'),
          groupName?: string(name='GroupName', example='ECS_Group'),
        }
      ](name='ApplyHistory')
      }(name='ApplyHistories', description='The ID of the request.'),
      description?: string(name='Description', description='The order in which you want to sort alert templates. Default value: true. Valid values:

*   true: ascending order
*   false: descending order'),
      gmtCreate?: long(name='GmtCreate', description='The ID of the application group.', example='1646018798000'),
      gmtModified?: long(name='GmtModified', description='The number of the page to return.

Default value: 1', example='1646054798000'),
      name?: string(name='Name', description='The application history of the alert template.', example='ECS_Template1'),
      restVersion?: long(name='RestVersion', description='The ID of the alert template.', example='0'),
      templateId?: long(name='TemplateId', description='The description of the alert template.', example='70****'),
    }
  ](name='Template')
  }(name='Templates', description='The ID of the alert template.'),
  total?: long(name='Total', description='The sorting basis. Default value: gmtCreate. Valid values:

*   gmtMotified: Sorts alert templates by modification time.
*   gmtCreate: Sorts alert templates by creation time.', example='2'),
}

model DescribeMetricRuleTemplateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricRuleTemplateListResponseBody(name='body'),
}

/**
  * The HTTP status code.
  * >  The status code 200 indicates that the call was successful.
  *
 */
async function describeMetricRuleTemplateList(request: DescribeMetricRuleTemplateListRequest): DescribeMetricRuleTemplateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricRuleTemplateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMetricTopRequest {
  dimensions?: string(name='Dimensions', description='The dimensions that specify the resources whose monitoring data you want to query.

Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.

>  You can query a maximum of 50 instances in a single request.', example='[{"instanceId": "i-abcdefgh12****"}]', position='Query'),
  endTime?: string(name='EndTime', description='The error message.', example='2021-05-08 10:00:00', position='Query'),
  express?: string(name='Express', description='The statistical period of the monitoring data. Unit: seconds. Valid values: 15, 60, 900, and 3600.', example='{"groupby":["userId","instanceId"]}', position='Query'),
  length?: string(name='Length', description='The start of the time range to query monitoring data.

*   If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``

*   If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:

    *   If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
    *   If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
    *   If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.

The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

> 

*   You must set the `StartTime` parameter to a point in time that is later than 00:00:00 Thursday, January 1, 1970. Otherwise, this parameter is invalid.
*   We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='10', position='Query'),
  metricName: string(name='MetricName', description='The operation that you want to perform. Set the value to **DescribeMetricTop**.', example='cpu_idle', position='Query'),
  namespace: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='acs_ecs_dashboard', position='Query'),
  orderDesc?: string(name='OrderDesc', description='The statistical period of the monitoring data.

Valid values: 15, 60, 900, and 3600.

Unit: seconds.

> 

*   If this parameter is not specified, monitoring data is queried based on the period in which metric values are reported.
*   Statistical periods vary based on metrics that are specified by `MetricName`. For more information, see [Appendix 1: Metrics](~~163515~~).', example='False', position='Query'),
  orderby: string(name='Orderby', description='The number of entries to return on each page.

Default value: 10.

>  The maximum value of the Length parameter in a request is 1440.', example='Average', position='Query'),
  period?: string(name='Period', description='The field based on which data is sorted. Valid values:

*   Average: the average value
*   Minimum: the minimum value
*   Maximum: the maximum value', example='60', position='Query'),
  startTime?: string(name='StartTime', description='The end of the time range to query monitoring data.

*   If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``

*   If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:

    *   If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
    *   If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
    *   If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.

The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

>  We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='2021-05-08 08:00:00', position='Query'),
}

model DescribeMetricTopResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  datapoints?: string(name='Datapoints', example='[{\\"order\\":1,\\"timestamp\\":1620287520000,\\"userId\\":\\"120886317861****\\",\\"instanceId\\":\\"i-j6ccf7d5fn335qpo****\\",\\"Average\\":99.92,\\"Minimum\\":99.5,\\"Maximum\\":100.0,\\"_count\\":1.0},{\\"order\\":2,\\"timestamp\\":1620287520000,\\"userId\\":\\"120886317861****\\",\\"instanceId\\":\\"i-0xii2bvf42iqvxbp****\\",\\"Average\\":99.91,\\"Minimum\\":99.0,\\"Maximum\\":100.0,\\"_count\\":1.0}]'),
  message?: string(name='Message', description='The monitoring data.', example='The specified resource is not found.'),
  period?: string(name='Period', example='60'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='3121AE7D-4AFF-4C25-8F1D-C8226EBB1F42'),
}

model DescribeMetricTopResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMetricTopResponseBody(name='body'),
}

/**
  * The order in which data is sorted. Valid values:
  * *   True: sorts data in ascending order.
  * *   False (default value): sorts data in descending order.
  *
 */
async function describeMetricTop(request: DescribeMetricTopRequest): DescribeMetricTopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMetricTop', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupCategoriesRequest {
  groupId: long(name='GroupId', description='The ID of the application group.', example='123456', position='Query'),
}

model DescribeMonitorGroupCategoriesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  monitorGroupCategories?: {
    groupId?: long(name='GroupId', description='The ID of the application group.', example='123456'),
    monitorGroupCategory?: {
      categoryItem?: [ 
      {
        category?: string(name='Category', description='The name of the cloud service. Valid values:

*   ecs: Elastic Compute Service (ECS) instances that are provided by Alibaba Cloud and hosts that are not provided by Alibaba Cloud
*   rds: ApsaraDB RDS
*   ads: AnalyticDB
*   slb: Server Load Balancer (SLB)
*   vpc: Virtual Private Cloud (VPC)
*   apigateway: API Gateway
*   cdn: Alibaba Cloud Content Delivery Network (CDN)
*   cs: Container Service for Swarm
*   dcdn: Dynamic Route for CDN (DCDN)
*   ddos: Anti-DDoS
*   eip: Elastic IP Address (EIP)
*   elasticsearch: Elasticsearch
*   emr: E-MapReduce
*   ess: Auto Scaling
*   hbase: ApsaraDB for HBase
*   iot_edge: IoT Edge
*   k8s_pod: pods in Container Service for Kubernetes (ACK)
*   kvstore_sharding: ApsaraDB for Redis of the cluster master-replica architecture
*   kvstore_splitrw: ApsaraDB for Redis of the read/write splitting architecture
*   kvstore_standard: ApsaraDB for Redis of the standard master-replica architecture
*   memcache: ApsaraDB for Memcache
*   mns: Message Service (MNS)
*   mongodb: ApsaraDB for MongoDB of the replica set architecture
*   mongodb_cluster: ApsaraDB for MongoDB of the cluster architecture
*   mongodb_sharding: ApsaraDB for MongoDB of the sharded cluster architecture
*   mq_topic: MNS topics
*   ocs: ApsaraDB for Memcache of earlier versions
*   opensearch: Open Search
*   oss: Object Storage Service (OSS)
*   polardb: PolarDB
*   petadata: HybridDB for MySQL
*   scdn: Secure CDN (SCDN)
*   sharebandwidthpackages: EIP Bandwidth Plan
*   sls: Log Service
*   vpn: VPN Gateway', example='ECS'),
        count?: int32(name='Count', description='The number of resources that belong to the cloud service.', example='1'),
      }
    ](name='CategoryItem')
    }(name='MonitorGroupCategory', description='One of the cloud services to which the resources in the application group belong and the number of resources that belong to the cloud service.'),
  }(name='MonitorGroupCategories', description='The cloud services to which the resources in the application group belong and the number of resources that belong to the cloud service.'),
  requestId?: string(name='RequestId', example='9E0347B0-EBC3-4769-A78D-D96F21C6BB52'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMonitorGroupCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupCategoriesResponseBody(name='body'),
}

async function describeMonitorGroupCategories(request: DescribeMonitorGroupCategoriesRequest): DescribeMonitorGroupCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroupCategories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupDynamicRulesRequest {
  groupId: long(name='GroupId', description='The ID of application group.', example='123456', position='Query'),
}

model DescribeMonitorGroupDynamicRulesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The value 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2170B94A-1576-4D65-900E-2093037CDAF3'),
  resource?: {
    resource?: [ 
    {
      category?: string(name='Category', description='The type of the cloud service to which the dynamic rule belongs. Valid values:

*   ecs: Elastic Compute Service (ECS)
*   rds: ApsaraDB RDS
*   slb: Server Load Balancer (SLB)', example='ecs'),
      filterRelation?: string(name='FilterRelation', description='The filtering condition. Valid values:

*   and: queries the instances that meet all alert rules
*   or: queries the instances that meet any alert rule', example='and'),
      filters?: {
        filter?: [ 
        {
          function?: string(name='Function', description='The method that is used to filter the instances. Valid values:

*   contains: includes a specified element
*   startWith: specifies a prefix
*   endWith: specifies a suffix', example='contains'),
          name?: string(name='Name', description='The name of the instance.', example='hostName'),
          value?: string(name='Value', description='The value of the dynamic rule.', example='1'),
        }
      ](name='Filter')
      }(name='Filters', description='The dynamic rules of the application group.'),
    }
  ](name='Resource')
  }(name='Resource', description='The resources that is associated with the application group.'),
  success?: boolean(name='Success', example='true'),
}

model DescribeMonitorGroupDynamicRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupDynamicRulesResponseBody(name='body'),
}

async function describeMonitorGroupDynamicRules(request: DescribeMonitorGroupDynamicRulesRequest): DescribeMonitorGroupDynamicRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroupDynamicRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupInstanceAttributeRequest {
  category?: string(name='Category', description='The keyword that is used to search for resources.', example='ecs', position='Query'),
  groupId: long(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='123456', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The ID of the application group.', example='i-m5e0k0bexac8tykr****', position='Query'),
  keyword?: string(name='Keyword', description='The ID of the vSwitch to which the instance belongs.', example='portal', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The operation that you want to perform. Set the value to **DescribeMonitorGroupInstanceAttribute**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The abbreviation of the Alibaba Cloud service name.

To obtain the abbreviation of an Alibaba Cloud service name, call the [DescribeProjectMeta](~~114916~~) operation. The `metricCategory` tag in the `Labels` response parameter indicates the abbreviation of the Alibaba Cloud service name.', example='10', position='Query'),
  total?: boolean(name='Total', description='The error message.', example='true', position='Query'),
}

model DescribeMonitorGroupInstanceAttributeResponseBody = {
  code?: int32(name='Code', description='The information about the virtual private cloud (VPC).', example='200'),
  message?: string(name='Message', description='The number of the page to return.

Valid values: 1 to 1000000000.

Default value: 1.', example='The specified resource is not found.'),
  pageNumber?: int32(name='PageNumber', description='The ID of the VPC.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 1000000000.

Default value: 10.', example='2'),
  requestId?: string(name='RequestId', description='The dimensions of the resource that is associated with the application group.', example='9FB8EA79-7279-4482-8D6D-3D28EEDD871A'),
  resources?: {
    resource?: [ 
    {
      category?: string(name='Category', description='The network type.', example='ecs'),
      desc?: string(name='Desc', description='The total number of returned pages.', example='desc_test'),
      dimension?: string(name='Dimension', description='The tag value.', example='{"instanceId":"i-m5e0k0bexac8tykr****"}'),
      instanceId?: string(name='InstanceId', description='Specifies whether to return the total number of resources in the specified application group. Valid values:

*   true (default value)
*   false', example='i-m5e0k0bexac8tykr****'),
      instanceName?: string(name='InstanceName', description='The resources that are associated with the application group.', example='hostName'),
      networkType?: string(name='NetworkType', description='The page number of the returned page.', example='vpc'),
      region?: {
        availabilityZone?: string(name='AvailabilityZone', example='cn-hangzhou-f'),
        regionId?: string(name='RegionId', example='cn-hangzhou'),
      }(name='Region'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The name of the instance.', example='instanceNetworkType'),
          value?: string(name='Value', description='The description of the resource.', example='VPC'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags of the resource.'),
      vpc?: {
        vpcInstanceId?: string(name='VpcInstanceId', example='vpc-2zew7etgiceg21****'),
        vswitchInstanceId?: string(name='VswitchInstanceId', example='vsw-2ze36seq79n992****'),
      }(name='Vpc', description='The ID of the request.'),
    }
  ](name='Resource')
  }(name='Resources', description='The ID of the instance.'),
  success?: boolean(name='Success', description='The total number of returned entries.', example='true'),
  total?: int32(name='Total', description='The ID of the resource. Separate multiple resource IDs with commas (,). You can query the details about a maximum of 20 resources in each request.', example='12'),
}

model DescribeMonitorGroupInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupInstanceAttributeResponseBody(name='body'),
}

async function describeMonitorGroupInstanceAttribute(request: DescribeMonitorGroupInstanceAttributeRequest): DescribeMonitorGroupInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroupInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupInstancesRequest {
  category?: string(name='Category', description='The abbreviation of the name of the service to which the instances in the application group belong. Valid values:

*   ECS: Elastic Compute Service (ECS) instances provided by Alibaba Cloud and hosts not provided by Alibaba Cloud
*   RDS: ApsaraDB for RDS
*   ADS: AnalyticDB
*   SLB: Server Load Balancer (SLB)
*   VPC: Virtual Private Cloud (VPC)
*   APIGATEWAY: API Gateway
*   CDN: Alibaba Cloud Content Delivery Network (CDN)
*   CS: Container Service for Swarm
*   DCDN: Dynamic Route for CDN
*   DDoS: Anti-DDoS Pro
*   EIP: Elastic IP Address (EIP)
*   ELASTICSEARCH: Elasticsearch
*   EMR: E-MapReduce
*   ESS: Auto Scaling
*   HBASE: ApsaraDB for Hbase
*   IOT_EDGE: IoT Edge
*   K8S_POD: pods in Container Service for Kubernetes
*   KVSTORE_SHARDING: ApsaraDB for Redis of the cluster architecture
*   KVSTORE_SPLITRW: ApsaraDB for Redis of the read/write splitting architecture
*   KVSTORE_STANDARD: ApsaraDB for Redis of the standard architecture
*   MEMCACHE: ApsaraDB for Memcache
*   MNS: Message Service (MNS)
*   MONGODB: ApsaraDB for MongoDB of the replica set architecture
*   MONGODB_CLUSTER: ApsaraDB for MongoDB of the cluster architecture
*   MONGODB_SHARDING: ApsaraDB for MongoDB of the sharded cluster architecture
*   MQ_TOPIC: MNS topics
*   OCS: ApsaraDB for Memcache of earlier versions
*   OPENSEARCH: Open Search
*   OSS: Object Storage Service (OSS)
*   POLARDB: PolarDB
*   PETADATA: HybridDB for MySQL
*   SCDN: Secure Content Delivery Network (SCDN)
*   SHAREBANDWIDTHPACKAGES: EIP Bandwidth Plan
*   SLS: Log Service
*   VPN: VPN Gateway

Valid values of N: 1 to 200.', example='ecs', position='Query'),
  groupId: long(name='GroupId', description='The ID of the application group.', example='12345', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The ID of the instance. You can query multiple instances by specifying multiple IDs.', example='i-x1234568', position='Query'),
  keyword?: string(name='Keyword', description='The keyword used to search for instances. Fuzzy search based on instance name is supported.', example='s1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 10.', example='10', position='Query'),
}

model DescribeMonitorGroupInstancesResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='97F2A410-9412-499C-9AD1-76EF7EC02DF2'),
  resources?: {
    resource?: [ 
    {
      category?: string(name='Category', description='The abbreviation of the service name.', example='ecs'),
      id?: long(name='Id', description='The ID of the resource.', example='12345'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-2ze3w55tr2r****'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='hostIP'),
      regionId?: string(name='RegionId', description='The ID of the region where the instance resides.', example='cn-hangzhou'),
    }
  ](name='Resource')
  }(name='Resources', description='The information about the resources in the application group.'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
  total?: int32(name='Total', example='12'),
}

model DescribeMonitorGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupInstancesResponseBody(name='body'),
}

async function describeMonitorGroupInstances(request: DescribeMonitorGroupInstancesRequest): DescribeMonitorGroupInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroupInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupNotifyPolicyListRequest {
  groupId?: string(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='6780****', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of entries to return on each page. Default value: 10.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The timestamp that specifies the end of the time range to query.

Unit: milliseconds.', example='100', position='Query'),
  policyType: string(name='PolicyType', description='The number of the page to return. Default value: 1.', example='PauseNotify', position='Query'),
}

model DescribeMonitorGroupNotifyPolicyListResponseBody = {
  code?: string(name='Code', description='The ID of the application group.', example='200'),
  message?: string(name='Message', description='The policies that were returned.', example='The Request is not authorization.'),
  notifyPolicyList?: {
    notifyPolicy?: [ 
    {
      endTime?: long(name='EndTime', description='The ID of the policy.', example='1551761781273'),
      groupId?: string(name='GroupId', example='6780****'),
      id?: string(name='Id', example='123****'),
      startTime?: long(name='StartTime', description='The ID of the request.', example='1551761781273'),
      type?: string(name='Type', description='The ID of the application group.', example='PauseNotify'),
    }
  ](name='NotifyPolicy')
  }(name='NotifyPolicyList', description='The type of the policy.

Valid value: PauseNotify.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to **DescribeMonitorGroupNotifyPolicyList**.', example='6072F026-C441-41A6-B114-35A1E8F8FDD3'),
  success?: string(name='Success', description='The error message.', example='true'),
  total?: int32(name='Total', description='The timestamp that specifies the beginning of the time range to query.

Unit: milliseconds.', example='11'),
}

model DescribeMonitorGroupNotifyPolicyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupNotifyPolicyListResponseBody(name='body'),
}

async function describeMonitorGroupNotifyPolicyList(request: DescribeMonitorGroupNotifyPolicyListRequest): DescribeMonitorGroupNotifyPolicyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroupNotifyPolicyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorGroupsRequest {
  dynamicTagRuleId?: string(name='DynamicTagRuleId', description='The ID of the tag rule.', example='6b882d9a-5117-42e2-9d0c-4749a0c6****', position='Query'),
  groupFounderTagKey?: string(name='GroupFounderTagKey', description='The tag key that is created for the application group by using the tag rule.', example='GroupKey1', position='Query'),
  groupFounderTagValue?: string(name='GroupFounderTagValue', description='The tag value that is created for the application group by using the tag rule.', example='GroupValue1', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group. Separate multiple application group IDs with commas (,).', example='92****', position='Query'),
  groupName?: string(name='GroupName', description='The name of the application group.', example='testGroup124', position='Query'),
  includeTemplateHistory?: boolean(name='IncludeTemplateHistory', description='Specifies whether to include the historical alert templates that are applied to the application group in the response. Valid values:

*   true
*   false', example='true', position='Query'),
  instanceId?: string(name='InstanceId', description='The instance ID. This parameter is used to query the application group to which the specified instance belongs.', example='i-abcdefgh12****', position='Query'),
  keyword?: string(name='Keyword', description='The keyword that is used for the search.', example='test', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Pages start from page 1. Default value: 30.', example='30', position='Query'),
  selectContactGroups?: boolean(name='SelectContactGroups', description='Specifies whether to include the alert contact groups in the response. Valid values:

*   true
*   false', example='true', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key of the application group. Valid values of N: 1 to 5.', example='tagKey1'),
      value?: string(name='Value', description='The tag value of the application group. Valid values of N: 1 to 5.', example='tagValue1'),
    }
  ](name='Tag', description='The tags of the application group.', position='Query'),
  type?: string(name='Type', description='The type of the application group. Valid values:

*   custom: a self-managed application group
*   ehpc_cluster: an application group that is synchronized from an Elastic High Performance Computing (E-HPC) cluster
*   kubernetes: an application group that is synchronized from a Container Service for Kubernetes (ACK) cluster', example='custom', position='Query'),
  types?: string(name='Types', position='Query'),
}

model DescribeMonitorGroupsResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The specified resource is not found.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='30'),
  requestId?: string(name='RequestId', description='The request ID.', example='F02B299A-D374-4595-9F55-7534D604F132'),
  resources?: {
    resource?: [ 
    {
      bindUrl?: string(name='BindUrl', description='The URL of the ACK cluster from which the application group is synchronized.', example='https://aliyun.com'),
      contactGroups?: {
        contactGroup?: [ 
        {
          name?: string(name='Name', description='The name of the alert contact group.', example='CloudMonitor'),
        }
      ](name='ContactGroup')
      }(name='ContactGroups', description='The alert contact groups.'),
      dynamicTagRuleId?: string(name='DynamicTagRuleId', description='The ID of the tag rule.', example='6b882d9a-5117-42e2-9d0c-4749a0c6****'),
      gmtCreate?: long(name='GmtCreate', description='The timestamp when the application group was created.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1603181891000'),
      gmtModified?: long(name='GmtModified', description='The timestamp when the application group was last modified.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1603181891000'),
      groupFounderTagKey?: string(name='GroupFounderTagKey', description='The tag key that is created for the application group by using the tag rule.', example='GroupKey1'),
      groupFounderTagValue?: string(name='GroupFounderTagValue', description='The tag value that is created for the application group by using the tag rule.', example='GroupValue1'),
      groupId?: long(name='GroupId', description='The ID of the application group.', example='12345'),
      groupName?: string(name='GroupName', description='The name of the application group.', example='test123'),
      resourceGroupId?: string(name='ResourceGroupId'),
      serviceId?: string(name='ServiceId', description='The ID of the Alibaba Cloud service.', example='49****'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key of the application group.', example='tagKey1'),
          value?: string(name='Value', description='The tag value of the application group.', example='tagValue1'),
        }
      ](name='Tag')
      }(name='Tags', description='The tags that are attached to the application group.'),
      templateIds?: {
        templateId?: [ string ](name='TemplateId')
      }(name='TemplateIds'),
      type?: string(name='Type', description='The type of the application group. Valid values:

*   custom: a self-managed application group
*   ehpc_cluster: an application group that is synchronized from an E-HPC cluster
*   kubernetes: an application group that is synchronized from an ACK cluster', example='custom'),
    }
  ](name='Resource')
  }(name='Resources', description='The resources that are associated with the application group.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='10'),
}

model DescribeMonitorGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorGroupsResponseBody(name='body'),
}

/**
  * This topic provides an example of how to query the application groups of the current account. The response shows that the current account has two application groups: `testGroup124` and `test123`.
  *
 */
async function describeMonitorGroups(request: DescribeMonitorGroupsRequest): DescribeMonitorGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitorResourceQuotaAttributeRequest {
  showUsed?: boolean(name='ShowUsed', description='The ID of the instance to be monitored.', example='true', position='Query'),
}

model DescribeMonitorResourceQuotaAttributeResponseBody = {
  code?: string(name='Code', description='The quota of alert phone calls in your purchased resource plan. Unit: calls.', example='200'),
  message?: string(name='Message', description='The used quota of the time series in custom monitoring in your purchased plan.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The details about the quota of detection points that are provided by other carriers in site monitoring.', example='31BC7201-00F2-47B2-B7B9-6A173076ACE'),
  resourceQuota?: {
    api?: {
      quotaLimit?: int32(name='QuotaLimit', description='The current edition of CloudMonitor. Valid values:

*   free: free edition
*   pro: Professional Edition
*   cms_post: pay-as-you-go', example='500'),
      quotaPackage?: int32(name='QuotaPackage', description='The used quota of API operation calls in your purchased plan. Unit: calls.', example='500'),
      quotaUsed?: int32(name='QuotaUsed', description='The quota of alert text messages in your purchased resource plan.', example='9987'),
    }(name='Api', description='The details about the quota of API operation calls.'),
    customMonitor?: {
      quotaLimit?: int32(name='QuotaLimit', description='The total quota of alert phone calls. Unit: calls.', example='1200'),
      quotaPackage?: int32(name='QuotaPackage', description='The quota of site monitoring tasks.', example='1000'),
      quotaUsed?: int32(name='QuotaUsed', description='The total quota of events that can be reported in event monitoring. The total quota is the value that is multiplied by 10,000.', example='8'),
    }(name='CustomMonitor', description='The quota of detection points that are provided by other carriers in site monitoring in your purchased plan.'),
    enterpriseQuota?: {
      instanceId?: string(name='InstanceId', example='cms_enterprise_public_cn-7mz27pd****'),
      suitInfo?: string(name='SuitInfo', example='ENTERPRISE'),
    }(name='EnterpriseQuota', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
    eventMonitor?: {
      quotaLimit?: int32(name='QuotaLimit', description='The used quota of detection points that are provided by Alibaba Cloud in site monitoring in your purchased plan.

>  The value indicates the total number of detection points provided by Alibaba Cloud that are used by existing site monitoring tasks.', example='55'),
      quotaPackage?: int32(name='QuotaPackage', description='The details about the quota of custom monitoring.', example='50'),
      quotaUsed?: int32(name='QuotaUsed', description='The description of the instance.', example='2'),
    }(name='EventMonitor', description='The details about the quota of alert phone calls.'),
    expireTime?: string(name='ExpireTime', description='The total quota of detection points that are provided by Alibaba Cloud in site monitoring.

>  The value indicates the maximum number of detection points provided by Alibaba Cloud that you can select for a site monitoring task.', example='2021-02-28'),
    instanceId?: string(name='InstanceId', description='The operation that you want to perform. Set the value to DescribeMonitorResourceQuotaAttribute.', example='cms_edition-cn-n6w20rn****'),
    logMonitor?: {
      quotaLimit?: int32(name='QuotaLimit', description='The used quota of events that can be reported in event monitoring in your purchased plan. The product of multiplying the value and 10,000 indicates the used quota.', example='150'),
      quotaPackage?: int32(name='QuotaPackage', description='The details about the resource quotas of CloudMonitor.', example='150'),
      quotaUsed?: int32(name='QuotaUsed', description='The used quota of alert text messages in your purchased resource plan.', example='80'),
    }(name='LogMonitor', description='The total quota of site monitoring tasks.'),
    phone?: {
      quotaLimit?: int32(name='QuotaLimit', description='The quota of processed log data in log monitoring in your purchased plan. Unit: MB/min.', example='550'),
      quotaPackage?: int32(name='QuotaPackage', description='The ID of the request.', example='500'),
      quotaUsed?: int32(name='QuotaUsed', description='The quota of API operation calls in your purchased plan. Unit: 10,000 calls.', example='100'),
    }(name='Phone', description='The details about the quota of alert text messages.'),
    SMS?: {
      quotaLimit?: int32(name='QuotaLimit', description='The details about the quota of detection points that are provided by Alibaba Cloud in site monitoring.', example='550'),
      quotaPackage?: int32(name='QuotaPackage', description='The used quota of processed log data in log monitoring in your purchased plan. Unit: MB/min.', example='500'),
      quotaUsed?: int32(name='QuotaUsed', description='The quota of events that can be reported in event monitoring in your purchased plan. The quota of events that can be reported in event monitoring.', example='38'),
    }(name='SMS', description='The used quota of detection points that are provided by other carriers in site monitoring in your purchased plan.'),
    siteMonitorEcsProbe?: {
      quotaLimit?: int32(name='QuotaLimit', description='The used quota of site monitoring tasks in your purchased plan.', example='5'),
      quotaPackage?: int32(name='QuotaPackage', description='The quota of the time series in custom monitoring in your purchased plan.', example='5'),
      quotaUsed?: int32(name='QuotaUsed', description='Specifies whether to return information about used quotas. Valid values:

*   true: to include information about used quotas. Default value: true.
*   false: to exclude information about used quotas.', example='20'),
    }(name='SiteMonitorEcsProbe', description='The error message.'),
    siteMonitorOperatorProbe?: {
      quotaLimit?: int32(name='QuotaLimit', description='The total quota of processed log data in log monitoring. Unit: MB/min.', example='5'),
      quotaPackage?: int32(name='QuotaPackage', description='The time when the plan expires.', example='5'),
      quotaUsed?: int32(name='QuotaUsed', description='The details about the quota of event monitoring.', example='0'),
    }(name='SiteMonitorOperatorProbe', description='The total quota of API operation calls. Unit: 10,000 calls.'),
    siteMonitorTask?: {
      quotaLimit?: int32(name='QuotaLimit', description='The total quota of the time series in custom monitoring.', example='25'),
      quotaPackage?: int32(name='QuotaPackage', description='The details about the quota.', example='20'),
      quotaUsed?: int32(name='QuotaUsed', description='The ID of the purchased subscription plan.', example='15'),
    }(name='SiteMonitorTask', description='The quota of site monitoring tasks in your purchased plan.'),
    suitInfo?: string(name='SuitInfo', description='The HTTP status code.

>  The HTTP status code 200 indicates that the call succeeds.', example='pro'),
  }(name='ResourceQuota', description='The total quota of alert text messages.'),
}

model DescribeMonitorResourceQuotaAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitorResourceQuotaAttributeResponseBody(name='body'),
}

async function describeMonitorResourceQuotaAttribute(request: DescribeMonitorResourceQuotaAttributeRequest): DescribeMonitorResourceQuotaAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitorResourceQuotaAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringAgentAccessKeyRequest {
}

model DescribeMonitoringAgentAccessKeyResponseBody = {
  accessKey?: string(name='AccessKey', description='The AccessKey ID that is required to install the agent.', example='E7A27f9****'),
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0F655E9-D793-51E6-BD78-CABBCCFC1047'),
  secretKey?: string(name='SecretKey', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='sBjNOUhLylrxMX-Xv1****'),
  success?: boolean(name='Success', description='The operation that you want to perform. Set the value to **DescribeMonitoringAgentAccessKey**.', example='true'),
}

model DescribeMonitoringAgentAccessKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringAgentAccessKeyResponseBody(name='body'),
}

async function describeMonitoringAgentAccessKey(request: DescribeMonitoringAgentAccessKeyRequest): DescribeMonitoringAgentAccessKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringAgentAccessKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringAgentConfigRequest {
}

model DescribeMonitoringAgentConfigResponseBody = {
  autoInstall?: boolean(name='AutoInstall', description='Indicates whether the Cloud Monitor agent is automatically installed on existing Elastic Compute Service (ECS) instances. Valid values:

*   true
*   false', example='true'),
  code?: string(name='Code', description='The status code.

>  The status code 200 indicates a success.', example='200'),
  enableActiveAlert?: string(name='EnableActiveAlert', description='The service for which one-click alert is enabled.', example='redis,rds,ecs'),
  enableInstallAgentNewECS?: boolean(name='EnableInstallAgentNewECS', description='Indicates whether the Cloud Monitor agent is automatically installed on new ECS instances. Valid values:

*   true
*   false', example='true'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9F4FA2A-54BE-4EF9-9D1D-1A0B1DC86B8D'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='true'),
}

model DescribeMonitoringAgentConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringAgentConfigResponseBody(name='body'),
}

async function describeMonitoringAgentConfig(request: DescribeMonitoringAgentConfigRequest): DescribeMonitoringAgentConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringAgentConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringAgentHostsRequest {
  aliyunHost?: boolean(name='AliyunHost', description='Specifies whether to query Elastic Compute Service (ECS) instances that are provided by Alibaba Cloud or to query hosts that are not provided by Alibaba Cloud. Valid values:

*   true (default value): queries all the ECS instances that are provided by Alibaba Cloud.
*   false: queries all the hosts that are not provided by Alibaba Cloud.', example='true', position='Query'),
  hostName?: string(name='HostName', description='The name of the host.', example='hostNam1', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The ID of the instance.', example='i-a3d1q1pm2f9yr29e****', position='Query'),
  instanceRegionId?: string(name='InstanceRegionId', description='The region ID of the instance.', example='cn-hangzhou', position='Query'),
  keyWord?: string(name='KeyWord', description='The keyword that is used in fuzzy match.', example='host1', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values:

*   10
*   20
*   50
*   100

> Although Alibaba Cloud does not limit the maximum value of this parameter, we recommend that you do not set it to an excessively large value. If you set it to an excessively large value, a timeout error may occur.', example='10', position='Query'),
  serialNumbers?: string(name='SerialNumbers', description='The serial number of the host.

After the CloudMonitor agent is installed on a host, a globally unique serial number is generated. A host that is not provided by Alibaba Cloud has a serial number instead of an instance ID.

> This parameter can be used to accurately search for a monitored host.', example='a1ab31a3-1234-40f2-9e95-c8caa8f0****', position='Query'),
  status?: string(name='Status', description='The status of the hosts that you want to query. Valid values:

*   Running: queries the hosts that are running.
*   Stopped: queries the hosts that are stopped, are not installed, or fail to be installed.', example='Running', position='Query'),
  sysomStatus?: string(name='SysomStatus', description='The status of SysOM. Valid values:

*   installing: SysOM is being installed.
*   running: SysOM is running.
*   stopped: SysOM is stopped.
*   uninstalling: SysOM is being uninstalled.', example='running', position='Query'),
}

model DescribeMonitoringAgentHostsResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the call is successful.', example='200'),
  hosts?: {
    host?: [ 
    {
      agentVersion?: string(name='AgentVersion', description='The version of the CloudMonitor agent.', example='3.4.6'),
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account.', example='103201326074****'),
      eipAddress?: string(name='EipAddress', description='The elastic IP address (EIP) of the host.', example='192.168.XX.XX'),
      eipId?: string(name='EipId', description='The ID of the EIP.', example='eip-bp16i16k9gcezyfrp****'),
      hostName?: string(name='HostName', description='The name of the host.', example='hostIP'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-a2d5q7pm3f9yr212****'),
      instanceTypeFamily?: string(name='InstanceTypeFamily', description='The type of the ECS instance.', example='ecs.n4'),
      ipGroup?: string(name='IpGroup', description='The IP address of the host.

> Multiple IP addresses are separated with commas (,).', example='192.168.XX.XX'),
      natIp?: string(name='NatIp', description='The IP address of the Network Address Translation (NAT) gateway.', example='192.168.XX.XX'),
      networkType?: string(name='NetworkType', description='The network type.', example='vpc'),
      operatingSystem?: string(name='OperatingSystem', description='The operating system.', example='Linux'),
      region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the host. A host that is not provided by Alibaba Cloud has a serial number instead of an instance ID.

> This parameter can be used to accurately search for a monitored host.', example='x12335-6cc8-4a22-9f21-1a00a719****'),
      isAliyunHost?: boolean(name='isAliyunHost', description='Indicates whether the host is provided by Alibaba Cloud. Valid values:

*   true: The host is provided by Alibaba Cloud.
*   false: The host is not provided by Alibaba Cloud.', example='true'),
    }
  ](name='Host')
  }(name='Hosts', description='The information about the hosts.'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  pageTotal?: int32(name='PageTotal', description='The total number of returned pages.', example='50'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='63EEBB2A-9E51-41E4-9E83-5DE7F3B292E0'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   true: The call is successful.
*   false: The call fails.', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='10'),
}

model DescribeMonitoringAgentHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringAgentHostsResponseBody(name='body'),
}

async function describeMonitoringAgentHosts(request: DescribeMonitoringAgentHostsRequest): DescribeMonitoringAgentHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringAgentHosts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringAgentProcessesRequest {
  instanceId: string(name='InstanceId', description='The returned message.', example='i-hp3hl3cx1pbahzy8****', position='Query'),
}

model DescribeMonitoringAgentProcessesResponseBody = {
  code?: string(name='Code', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='200'),
  message?: string(name='Message', description='The information about the processes.', example='The specified resource is not found.'),
  nodeProcesses?: {
    nodeProcess?: [ 
    {
      command?: string(name='Command', description='The ID of the instance.', example='number'),
      groupId?: string(name='GroupId', description='The user who launched the process.', example='3619****'),
      instanceId?: string(name='InstanceId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='i-hp3hl3cx1pbahzy8****'),
      processId?: long(name='ProcessId', description='The command used to obtain the number of processes. Valid value: `number`.

>  The `number` command obtains the number of processes that match the condition.', example='234567'),
      processName?: string(name='ProcessName', description='The ID of the application group.', example='Nginx'),
      processUser?: string(name='ProcessUser', description='>  Before you call this operation, call the CreateMonitoringAgentProcess operation to create processes. For more information, see [CreateMonitoringAgentProcess](~~114951~~~).

This topic provides an example of how to query the processes of the `i-hp3hl3cx1pbahzy8****` instance. The response indicates the details of the `NGINX` and `HTTP` processes.', example='alice'),
    }
  ](name='NodeProcess')
  }(name='NodeProcesses', description='The ID of the process.'),
  requestId?: string(name='RequestId', example='C11C0E85-6862-4F25-8D66-D6A5E0882984'),
  success?: boolean(name='Success', description='The name of the process.', example='true'),
}

model DescribeMonitoringAgentProcessesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringAgentProcessesResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeMonitoringAgentProcesses.
  *
 */
async function describeMonitoringAgentProcesses(request: DescribeMonitoringAgentProcessesRequest): DescribeMonitoringAgentProcessesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringAgentProcesses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringAgentStatusesRequest {
  hostAvailabilityTaskId?: string(name='HostAvailabilityTaskId', description='The error message.', example='126****', position='Query'),
  instanceIds?: string(name='InstanceIds', description='The operation that you want to perform. Set the value to **DescribeMonitoringAgentStatuses**.', example='i-hp3dunahluwajv6f****', position='Query'),
}

model DescribeMonitoringAgentStatusesResponseBody = {
  code?: string(name='Code', description='The status information.', example='200'),
  message?: string(name='Message', description='The ID of the instance. Separate multiple instance IDs with commas (,).', example='The specified resource is not found.'),
  nodeStatusList?: {
    nodeStatus?: [ 
    {
      autoInstall?: boolean(name='AutoInstall', description='The error status of SysOM. Valid values:

*   `install_fail`: SysOM fails to be installed or an unknown error occurs.
*   `install_assist_invalid`: SysOM fails to be installed because the status of Cloud Assistant is invalid.
*   `install_assist_command_fail`: SysOM fails to be installed because the installation command fails to run.
*   `uninstall_fail`: SysOM fails to be uninstalled or an unknown error occurs.
*   `uninstall_assist_invalid`: SysOM fails to be uninstalled because the status of Cloud Assistant is invalid.
*   `uninstall_assist_command_fail`: SysOM fails to be uninstalled because the uninstallation command fails to run.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the request.', example='i-hp3dunahluwajv6f****'),
      osMonitorConfig?: string(name='OsMonitorConfig'),
      osMonitorErrorCode?: string(name='OsMonitorErrorCode', example='install_fail'),
      osMonitorErrorDetail?: string(name='OsMonitorErrorDetail', example='Command.ErrorCode.Fail.Downlaod.REGIN_ID'),
      osMonitorStatus?: string(name='OsMonitorStatus', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='running'),
      osMonitorVersion?: string(name='OsMonitorVersion'),
      status?: string(name='Status', description='The status of the CloudMonitor agent. Valid values:

*   running: The CloudMonitor agent is running.
*   stopped: The CloudMonitor agent is stopped.
*   installing: The CloudMonitor agent is being installed.
*   install_faild: The CloudMonitor agent fails to be installed.
*   abnormal: The CloudMonitor agent is not properly installed.
*   not_installed: The CloudMonitor agent is not installed.', example='running'),
    }
  ](name='NodeStatus')
  }(name='NodeStatusList', description='The ID of the instance.'),
  requestId?: string(name='RequestId', description='The status of SysOM. Valid values:

*   installing: SysOM is being installed.
*   running: SysOM is running.
*   stopped: SysOM is stopped.
*   uninstalling: SysOM is being uninstalled.', example='6F8371DF-AB81-41B8-9E1B-5493B3FF0E4F'),
  success?: boolean(name='Success', description='Indicates whether the CloudMonitor agent is automatically installed. Valid values:

*   true: The CloudMonitor agent is automatically installed.
*   false: The CloudMonitor agent is not automatically installed.', example='true'),
}

model DescribeMonitoringAgentStatusesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringAgentStatusesResponseBody(name='body'),
}

/**
  * The details of the execution error. Valid values:
  * *   `Command.ErrorCode.Fail.Downlaod.REGIN_ID`: Failed to obtain the region ID.
  * *   `Command.ErrorCode.Fail.Downlaod.SYSAK`: Failed to download the .rpm package of System Analyse Kit (SysAK).
  * *   `Command.ErrorCode.Fail.Downlaod.CMON_FILE`: Failed to download the CMON file.
  * *   `Command.ErrorCode.Fail.Downlaod.BTF`: Failed to start SysAK because the BTF file is not found.
  * *   `Command.ErrorCode.Fail.Start.SYSAK`: Failed to start SysAK due to an unknown error.
  *
 */
async function describeMonitoringAgentStatuses(request: DescribeMonitoringAgentStatusesRequest): DescribeMonitoringAgentStatusesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringAgentStatuses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeMonitoringConfigRequest {
}

model DescribeMonitoringConfigResponseBody = {
  autoInstall?: boolean(name='AutoInstall', description='Indicates whether the Cloud Monitor agent is automatically installed on existing ECS instances. Valid values:

*   true
*   false', example='false'),
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  enableInstallAgentNewECS?: boolean(name='EnableInstallAgentNewECS', description='Indicates whether the Cloud Monitor agent is automatically installed on new Elastic Compute Service (ECS) instances. Valid values:

*   true
*   false', example='true'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F35654DB-0C9D-4FB3-903F-479BA7663061'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DescribeMonitoringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMonitoringConfigResponseBody(name='body'),
}

async function describeMonitoringConfig(request: DescribeMonitoringConfigRequest): DescribeMonitoringConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeMonitoringConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProductResourceTagKeyListRequest {
  nextToken?: string(name='NextToken', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='dbc2826f237e****', position='Query'),
}

model DescribeProductResourceTagKeyListResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  message?: string(name='Message', description='The pagination cursor. If more entries are to be returned on the next page, a pagination cursor is returned.

>  If the value of this parameter is not null, more entries are to be returned on the next page. You can use the returned pagination cursor as a request parameter to obtain entries on the next page. If the value of this parameter is null, all the entries have been returned.', example='The request processing has failed due to some unknown error.'),
  nextToken?: string(name='NextToken', description='The ID of the request.', example='dbc2826f237e****'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='945ACAA9-89F2-4A62-8913-076FDEDAA8DB'),
  success?: boolean(name='Success', description='The keys of tags.', example='true'),
  tagKeys?: {
    tagKey?: [ string ](name='TagKey')
  }(name='TagKeys', description='>  If a tag is attached to multiple cloud resources in the region, the key of the tag is returned only once.'),
}

model DescribeProductResourceTagKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductResourceTagKeyListResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeProductResourceTagKeyList.
  *
 */
async function describeProductResourceTagKeyList(request: DescribeProductResourceTagKeyListRequest): DescribeProductResourceTagKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProductResourceTagKeyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProductsOfActiveMetricRuleRequest {
}

model DescribeProductsOfActiveMetricRuleResponseBody = {
  allProductInitMetricRuleList?: {
    allProductInitMetricRule?: [ 
    {
      alertInitConfigList?: {
        alertInitConfig?: [ 
        {
          evaluationCount?: string(name='EvaluationCount', description='The consecutive number of times for which the metric value is measured before an alert is triggered.', example='3'),
          metricName?: string(name='MetricName', description='The name of the metric. For more information, see [Appendix 1: Metrics](~~163515~~).', example='cpu_total'),
          namespace?: string(name='Namespace', description='The namespace of the service. For more information, see [Appendix 1: Metrics](~~163515~~).', example='acs_rds_dashboard'),
          period?: string(name='Period', description='The aggregation period of the monitoring data. Unit: minutes. For more information, see [Appendix 1: Metrics](~~163515~~).', example='1m'),
          statistics?: string(name='Statistics', description='The statistical aggregation method that is used to calculate metric values that trigger alerts. For more information, see [Appendix 1: Metrics](~~163515~~).', example='Average'),
          threshold?: string(name='Threshold', description='The threshold of the metric value.', example='90'),
        }
      ](name='AlertInitConfig')
      }(name='AlertInitConfigList', description='The initial alert rules that are generated after one-click alert is enabled for a service.'),
      product?: string(name='Product', example='ecs'),
    }
  ](name='AllProductInitMetricRule')
  }(name='AllProductInitMetricRuleList', description='The information about the services for which one-click alert is enabled.'),
  code?: int32(name='Code', example='200'),
  datapoints?: string(name='Datapoints', example='ecs,rds'),
  message?: string(name='Message', description='The returned message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F82E6667-7811-4BA0-842F-5B2DC42BBAAD'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DescribeProductsOfActiveMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductsOfActiveMetricRuleResponseBody(name='body'),
}

async function describeProductsOfActiveMetricRule(request: DescribeProductsOfActiveMetricRuleRequest): DescribeProductsOfActiveMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProductsOfActiveMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProjectMetaRequest {
  labels?: string(name='Labels', description='The tags. Tags are used to filter services.

You can filter services only by the tag whose `name` is `product`. Example: {"name":"product","value":"ECS"}.

> We recommend that you do not use the special tags in the CloudMonitor console.', example='[{"name":"product","value":"ECS"}]', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The page number.

Valid values: 1 to 100.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page.

Valid values: 1 to 10000.

Default value: 30.

> The value of this parameter is not limited. You can view a large number of entries per page.', example='30', position='Query'),
}

model DescribeProjectMetaResponseBody = {
  code?: string(name='Code', description='The status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The Request is not authorization.'),
  pageNumber?: string(name='PageNumber', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='5'),
  requestId?: string(name='RequestId', description='The request ID.', example='4C2061B2-3B1B-43BF-A4A4-C53426F479C0'),
  resources?: {
    resource?: [ 
    {
      description?: string(name='Description', description='The description.', example='CDN'),
      labels?: string(name='Labels', description='The tags. Tags are used to filter services.

Tags are returned in the following format: `[{"name":"Tag key","value":"Tag value"}, {"name":"Tag key","value":"Tag value"}]`. The following tags are commonly used:

*   alertUnit: the unit of the metric value in alerts. If the unit is small, the original metric value may be too large. In this case, you can use the `alertUnit` tag to specify an appropriate unit. This tag is used in CloudMonitor.
*   minAlertPeriod: the minimum time interval to report a new alert. The interval is usually set to 1 minute.
*   metricCategory: the service specification. Example: kvstore_sharding. An Alibaba Cloud service may have different specifications that are defined in the same namespace. You can use this parameter to distinguish between service specifications.
*   is_alarm: specifies whether an alert rule can be set. We recommend that you do not use the special tags in the CloudMonitor console.', example='[{"groupFlag":true}]'),
      namespace?: string(name='Namespace', description='The namespace of the cloud service. Format: `acs_Service name abbreviation`. For more information about namespaces, see [Appendix 1: Metrics](~~163515~~).', example='acs_cdn'),
    }
  ](name='Resource')
  }(name='Resources', description='The details of the cloud service.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.', example='true'),
  total?: string(name='Total', description='The total number of entries returned.', example='12'),
}

model DescribeProjectMetaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProjectMetaResponseBody(name='body'),
}

/**
  * The information obtained by this operation includes the service description, namespace, and tags.
  *
 */
async function describeProjectMeta(request: DescribeProjectMetaRequest): DescribeProjectMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProjectMeta', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorAttributeRequest {
  includeAlert?: boolean(name='IncludeAlert', description='The ID of the request.', example='false', position='Query'),
  taskId: string(name='TaskId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='cc641dff-c19d-45f3-ad0a-818a0c4f****', position='Query'),
}

model DescribeSiteMonitorAttributeResponseBody = {
  code?: string(name='Code', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='200'),
  message?: string(name='Message', example='successful'),
  metricRules?: {
    metricRule?: [ 
    {
      actionEnable?: string(name='ActionEnable', description='The alert threshold.', example='true'),
      alarmActions?: string(name='AlarmActions', description='The name of the alert rule.', example='CloudMonitor'),
      comparisonOperator?: string(name='ComparisonOperator', description='The dimension of the alert rule.', example='GreaterThanYesterday'),
      dimensions?: string(name='Dimensions', description='The status of the alert. Valid values:

*   OK: normal.
*   ALARM: The alert is triggered.', example='[{"taskId": "cc641dff-c19d-45f3-ad0a-818a0c4f****" }]'),
      evaluationCount?: string(name='EvaluationCount', description='The alert contact groups to which alert notifications are sent.', example='3'),
      expression?: string(name='Expression', description='Indicates whether the alert rule is enabled. Valid values:

*   true: The alert rule is enabled.
*   false: The alert rule is disabled.', example='$Availability=30'),
      level?: string(name='Level', description='This topic provides an example on how to query the details of a site monitoring task whose ID is `cc641dff-c19d-45f3-ad0a-818a0c4f****`. The returned result indicates that the task name is `test123`, the address that is monitored by the task is `https://aliyun.com`, and the name of the carrier is `Alibaba`.', example='2'),
      metricName?: string(name='MetricName', description='The namespace of the cloud service.', example='Availability'),
      namespace?: string(name='Namespace', description='The alert contact group to which alert notifications are sent.', example='acs_networkmonitor'),
      okActions?: string(name='OkActions', description='The ID of the alert rule.', example='[ "CloudMonitor"]'),
      period?: string(name='Period', description='The expression that is used to trigger alerts.', example='15s'),
      ruleId?: string(name='RuleId', description='The interval at which the monitoring data is queried. The value is the same as the interval at which metric data is reported. Unit: seconds.

>  If you specify a statistical period for the alert rule, raw data is queried based on the statistical period.', example='bf071ae_7b7aec3817b0fdf****'),
      ruleName?: string(name='RuleName', description='The comparison operator that is used in the alert rule. Valid values:

*   `>=`
*   `>`
*   `<=`
*   `<`
*   `=`
*   `!=`
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='rule1'),
      stateValue?: string(name='StateValue', description='The severity of the alert. Valid values:

*   1: critical
*   2: warning
*   3: information', example='OK'),
      statistics?: string(name='Statistics', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Availability'),
      threshold?: string(name='Threshold', description='The statistical method of the alert rule. Valid values:

*   Availability: the percentage of available detection points
*   AvailableNumber: the number of available detection points
*   ErrorCodeMaximum: a status code for an alert
*   ErrorCodeMinimum: all status codes for a set of alerts
*   Average: response time', example='30'),
    }
  ](name='MetricRule')
  }(name='MetricRules', description='The consecutive number of times for which the metric value is measured before an alert is triggered.'),
  requestId?: string(name='RequestId', description='The details of the site monitoring task.', example='D17DF650-7EBD-54D0-903A-1D4E624D7402'),
  siteMonitors?: {
    address?: string(name='Address', description='The information of detection points. The information includes the carriers that provide the detection points and the cities where the detection points reside.', example='https://aliyun.com'),
    agentGroup?: string(name='AgentGroup'),
    interval?: string(name='Interval', description='The name of the site monitoring task.', example='1'),
    ispCities?: {
      ispCity?: [ 
      {
        city?: string(name='City', description='The ID of the carrier.', example='738'),
        cityName?: string(name='CityName', description='The name of the metric.'),
        isp?: string(name='Isp', description='The information of the alert rules that are configured for the site monitoring task.', example='465'),
        ispName?: string(name='IspName', description='The name of the city.'),
      }
    ](name='IspCity')
    }(name='IspCities', description='The name of the carrier.'),
    optionJson?: {
      assertions?: {
        assertions?: [ 
        {
          operator?: string(name='operator'),
          property?: string(name='property'),
          target?: string(name='target'),
          type?: string(name='type'),
        }
      ](name='assertions')
      }(name='assertions'),
      attempts?: long(name='attempts', example='3'),
      authentication?: int32(name='authentication', example='1'),
      cookie?: string(name='cookie', example='lang=en'),
      diagnosisMtr?: boolean(name='diagnosis_mtr'),
      diagnosisPing?: boolean(name='diagnosis_ping'),
      dnsHijackWhitelist?: string(name='dns_hijack_whitelist'),
      dnsMatchRule?: string(name='dns_match_rule', example='IN_DNS'),
      dnsServer?: string(name='dns_server', example='192.168.XX.XX'),
      dnsType?: string(name='dns_type', example='A'),
      expectValue?: string(name='expect_value', example='dns_server'),
      failureRate?: float(name='failure_rate', example='0.4'),
      header?: string(name='header', example='testKey:testValue'),
      httpMethod?: string(name='http_method', example='get'),
      isBase64Encode?: string(name='isBase64Encode', example='true'),
      matchRule?: int32(name='match_rule', example='1'),
      minTlsVersion?: string(name='min_tls_version'),
      password?: string(name='password', example='123****'),
      pingNum?: int32(name='ping_num', example='29'),
      port?: int32(name='port', example='110'),
      protocol?: string(name='protocol', example='TCP'),
      requestContent?: string(name='request_content', example='aa=bb'),
      requestFormat?: string(name='request_format', example='txt'),
      responseContent?: string(name='response_content', example='txt'),
      responseFormat?: string(name='response_format', example='txt'),
      retryDelay?: int32(name='retry_delay'),
      timeOut?: long(name='time_out', example='3'),
      username?: string(name='username', example='testUser'),
    }(name='OptionJson'),
    taskId?: string(name='TaskId', description='The ID of the city.', example='cc641dff-c19d-45f3-ad0a-818a0c4f****'),
    taskName?: string(name='TaskName', description='The ID of the site monitoring task.', example='test123'),
    taskState?: string(name='TaskState', description='The address that is monitored by the site monitoring task.', example='1'),
    taskType?: string(name='TaskType', description='The status of the site monitoring task. Valid values:

*   1: The task is enabled.
*   2: The task is disabled.', example='HTTP'),
  }(name='SiteMonitors', description='The interval at which the site monitoring task is executed. Unit: minutes. Valid values: 1, 5, 15, 30, and 60.'),
  success?: boolean(name='Success', description='The protocol that is used by the site monitoring task. Valid values: HTTP, HTTPS, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.', example='true'),
}

model DescribeSiteMonitorAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorAttributeResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeSiteMonitorAttribute.
  *
 */
async function describeSiteMonitorAttribute(request: DescribeSiteMonitorAttributeRequest): DescribeSiteMonitorAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorDataRequest {
  endTime?: string(name='EndTime', description='The interval at which monitoring data is returned. The value is an integral multiple of 60. Unit: seconds.

>  The default value equals the minimum interval at which detection requests are sent to the monitored address.', example='1551581437000', position='Query'),
  length?: int32(name='Length', description='The returned monitoring data.', example='1000', position='Query'),
  metricName: string(name='MetricName', description='The beginning of the time range for the query. Supported formats:

*   UNIX timestamp: The value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
*   Time format: The value is in the YYYY-MM-DDThh:mm:ssZ format.', example='Availability', position='Query'),
  nextToken?: string(name='NextToken', description='The number of data points to return.', example='49f7b317-7645-4cc9-94fd-ea42e5220930ea42e5220930ea42e522****', position='Query'),
  period?: string(name='Period', description='The pagination cursor.', example='60', position='Query'),
  startTime?: string(name='StartTime', description='The end of the time range for the query. Supported formats:

*   UNIX timestamp: The value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
*   Time format: The value is in the YYYY-MM-DDThh:mm:ssZ format.', example='1551579637000', position='Query'),
  taskId: string(name='TaskId', description='The type of the monitored object whose monitoring data is to be queried. Valid values:

*   metric
*   event', example='49f7b317-7645-4cc9-94fd-ea42e522****', position='Query'),
  type?: string(name='Type', description='The name of the metric. Valid values:

*   Availability
*   ResponseTime', example='metric', position='Query'),
}

model DescribeSiteMonitorDataResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  data?: string(name='Data', description='The pagination cursor.', example='[{"Maximum":247,"Mimimum":61,"Average":154,"userId":"127067667954****","taskId":"49f7b317-7645-4cc9-94fd-ea42e522****","timestamp":1551581760000}]'),
  message?: string(name='Message', description='The returned data contains a JSON string that may consist of several or all of the following parameters:

*   Error4XXRate: the percentage of detection results with 4XX status codes.
*   Error6XXRate: the percentage of detection results with 6XX status codes.
*   Error5XXRate: the percentage of detection results with 5XX status codes.
*   Error4XXNumber: the number of detection results with 4XX status codes.
*   Error5XXNumber: the number of detection results with 5XX status codes.
*   Error6XXNumber: the number of detection results with 6XX status codes.
*   Over5totalTime: the percentage of detection requests to which the response time exceeds 5,000 ms.
*   Over3totalTime: the percentage of detection requests to which the response time exceeds 3,000 ms.
*   Over2totalTime: the percentage of detection requests to which the response time exceeds 2,000 ms.
*   Over10FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 10%.
*   Over100FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 99%.
*   Over30FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 30%.
*   Over50FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 50%.
*   Over80FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 80%.
*   Over90FailureRate: the percentage of detection points whose failure rate of detection requests exceeds 90%.
*   Over400NumberRate: the percentage of detection results with status codes that are greater than 400.
*   Over400NumberRate: the percentage of detection results with status codes that are greater than 500.
*   AvailableNumber: the number of detection results in which the status code is smaller than 400.
*   UnavailableNumber: the number of detection results in which the status code is greater than 399.
*   Availability: the percentage of detection results in which the status code is smaller than 400.
*   Unavailability: the percentage of detection results in which the status code is greater than 399.
*   ErrorCodeMaximum: the maximum error code in the detection results that were returned in a specific period. Assume that five status codes are returned in a minute after detection requests are sent from five detection points. The status code in four detection results is 200 and that in one detection result is 404. In this case, the maximum error code is 404.
*   ErrorCodeMinimum: the minimum error code in the detection results returned in a monitoring period. Assume that five status codes are returned in a minute after detection requests are sent from five detection points. The status code in four detection results is 200 and that in one detection result is 404. In this case, the minimum error code is 200.

>  We recommend that you use the AvailableNumber, UnavailableNumber, Availability, Unavailability, ErrorCodeMaximum, or ErrorCodeMinimum metric, whose value is easy to calculate.', example='Successful'),
  nextToken?: string(name='NextToken', description='The ID of the request.', example='ea42e5220930ea42e522****'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='3febb181-0d98-4af9-8b04-7faf36b048b9'),
  success?: string(name='Success', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='true'),
}

model DescribeSiteMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorDataResponseBody(name='body'),
}

async function describeSiteMonitorData(request: DescribeSiteMonitorDataRequest): DescribeSiteMonitorDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorData', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorISPCityListRequest {
  city?: string(name='City', description='The name or ID of the city.

> City names support fuzzy match.', position='Query'),
  IPV4?: boolean(name='IPV4', description='Specifies whether to query IPv4 probes. Valid values:

*   true (default): IPv4 probes are queried.
*   false: IPv4 probes are not queried.', example='true', position='Query'),
  IPV6?: boolean(name='IPV6', description='Specifies whether to query IPv6 probes. Valid values:

*   true (default): IPv6 probes are queried.
*   false: IPv6 probes are not queried.', example='true', position='Query'),
  isp?: string(name='Isp', description='The name or ID of the carrier.

> Carrier names support fuzzy match.', position='Query'),
  viewAll?: boolean(name='ViewAll', description='Specifies whether to return all detection points. Valid values:

*   true (default): returns all detection points.
*   false: returns only available detection points.', example='true', position='Query'),
}

model DescribeSiteMonitorISPCityListResponseBody = {
  code?: string(name='Code', description='The status code.

> The status code 200 indicates that the request was successful.', example='200'),
  ispCityList?: {
    ispCity?: [ 
    {
      area_en?: string(name='Area.en'),
      area_zh_cN?: string(name='Area.zh_CN'),
      city?: string(name='City', description='The city ID.', example='4'),
      cityName_en?: string(name='CityName.en'),
      cityName_zh_cN?: string(name='CityName.zh_CN'),
      country?: string(name='Country', description='The country name.

> This parameter is valid only on the China site (aliyun.com).', example='629'),
      country_en?: string(name='Country.en'),
      country_zh_cN?: string(name='Country.zh_CN'),
      IPPool?: {
        IPPool?: [ string ](name='IPPool')
      }(name='IPPool', description='The IP address pool.'),
      IPV4ProbeCount?: string(name='IPV4ProbeCount', description='The number of IPv4 probes.', example='4'),
      IPV6ProbeCount?: string(name='IPV6ProbeCount', description='The number of IPv6 probes.', example='3'),
      isp?: string(name='Isp', description='The carrier ID.', example='232'),
      ispName_en?: string(name='IspName.en'),
      ispName_zh_cN?: string(name='IspName.zh_CN'),
      region?: string(name='Region', description='The province name.', example='264'),
      region_en?: string(name='Region.en'),
      region_zh_cN?: string(name='Region.zh_CN'),
    }
  ](name='IspCity')
  }(name='IspCityList', description='The queried detection points.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The request ID.', example='B35D7D84-547B-4E61-B909-48A1F8A0C756'),
  success?: string(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model DescribeSiteMonitorISPCityListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorISPCityListResponseBody(name='body'),
}

/**
  * This topic provides an example on how to query the detection points that are provided by China Unicom in Guiyang.
  *
 */
async function describeSiteMonitorISPCityList(request: DescribeSiteMonitorISPCityListRequest): DescribeSiteMonitorISPCityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorISPCityList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorListRequest {
  keyword?: string(name='Keyword', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='site', position='Query'),
  page?: int32(name='Page', description='The number of hops for the PING protocol.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The operation that you want to perform. Set the value to **DescribeSiteMonitorList**.', example='10', position='Query'),
  taskId?: string(name='TaskId', description='The parsing path of the assertion.

*   If the assertion type is `body_json`, the path is `json path`.
*   If the assertion type is `body_xml`, the path is `xml path`.', example='a1ecd34a-8157-44d9-b060-14950837****', position='Query'),
  taskState?: string(name='TaskState', description='The ID of the site monitoring task.', example='1', position='Query'),
  taskType?: string(name='TaskType', description='The time when the site monitoring task was updated.', example='HTTP', position='Query'),
}

model DescribeSiteMonitorListResponseBody = {
  code?: string(name='Code', description='The numeric value or character used for matching.', example='200'),
  message?: string(name='Message', description='Indicates whether the DNS server of the carrier is used.

*   true (default value): The DNS server of the carrier is used.
*   false: The DNS server of the carrier is not used. The default DNS server or the specified DNS server is used.', example='successful'),
  pageNumber?: int32(name='PageNumber', description='Indicates whether the alert rule is included. Valid values:

*   0: The alert rule is included.
*   1: The alert rule is not included.', example='1'),
  pageSize?: int32(name='PageSize', description='The domain name or IP address of the DNS server.', example='10'),
  requestId?: string(name='RequestId', description='Indicates whether ping requests are automatically sent to detect network latency if a detection task fails. Valid values:

*   false (default value): Ping requests are not automatically sent to detect network latency if a detection task fails.
*   true: Ping requests are automatically sent to detect network latency if a detection task fails.', example='A80DB41C-AF6C-50E1-ADB5-66DCBA3D266B'),
  siteMonitors?: {
    siteMonitor?: [ 
    {
      address?: string(name='Address', description='The site monitoring tasks that are returned.', example='https://aliyun.com'),
      agentGroup?: string(name='AgentGroup'),
      createTime?: string(name='CreateTime', description='The keyword to be matched.

>  You can search for tasks by name or address. Fuzzy search is supported.', example='2021-11-01 11:05:18'),
      interval?: string(name='Interval', description='The protocol type of DNS detection. Valid values:

*   udp (default value)
*   tcp
*   tcp-tls', example='1'),
      optionsJson?: {
        acceptableResponseCode?: string(name='acceptable_response_code', description='The header of the HTTP request. An HTTP header is a key-value pair in which the key and the value are separated by a colon (:). The format is `key1:value1`. Each HTTP header occupies a line.', example='400'),
        assertions?: {
          assertions?: [ 
          {
            operator?: string(name='operator', example='lessThan'),
            property?: string(name='property', description='The relationship between the list of expected aliases or IP addresses and the list of DNS results. Valid values:

*   IN_DNS: The list of expected values is a subset of the list of DNS results.
*   DNS_IN: The list of DNS results is a subset of the list of expected values.
*   EQUAL: The list of DNS results is the same as the list of expected values.
*   ANY: The list of DNS results intersects with the list of expected values.', example='json path'),
            target?: string(name='target', example='1000'),
            type?: string(name='type', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='response_time'),
          }
        ](name='assertions')
        }(name='assertions', description='The number of retries after a DNS failure occurred.'),
        attempts?: long(name='attempts', description='The username of the FTP, SMTP, or POP3 protocol.', example='3'),
        authentication?: int32(name='authentication', description='The status of the task. Valid values:

*   1: The task is enabled.
*   2: The task is disabled.', example='1'),
        certVerify?: boolean(name='cert_verify', description='The page number of the returned page.', example='false'),
        cookie?: string(name='cookie', description='The returned message.', example='lang=en'),
        diagnosisMtr?: boolean(name='diagnosis_mtr', description='The extended options of the site monitoring task. The options vary based on the specified protocol. For more information, see [CreateSiteMonitor](~~115048~~).', example='false'),
        diagnosisPing?: boolean(name='diagnosis_ping', description='The cookie of the HTTP request.', example='false'),
        dnsMatchRule?: string(name='dns_match_rule', description='The URL or IP address that is monitored by the site monitoring task.', example='IN_DNS'),
        dnsServer?: string(name='dns_server', description='Indicates whether the certificate is verified. Valid values:

*   false (default value): The certificate is not verified.
*   true: The certificate is verified.', example='192.168.XX.XX'),
        dnsType?: string(name='dns_type', description='Indicates whether the password is decoded by using the Base64 algorithm. Valid values:

*   true: The password is decoded by using the Base64 algorithm.
*   false (default value): The password is not decoded by using the Base64 algorithm.', example='A'),
        enableOperatorDns?: boolean(name='enable_operator_dns', description='The format of the HTTP request. Valid values:

*   hex: hexadecimal
*   txt: text', example='true'),
        failureRate?: float(name='failure_rate', description='The response to the HTTP request.

*   Hexadecimal format: If the request content is a byte string and cannot be represented in printable characters, you can convert the byte string to printable characters in the hexadecimal format. If you convert the byte string to printable characters in the hexadecimal format, one byte is converted to two hexadecimal characters. For example, (byte)1 is converted to `01` and (byte)27 is converted to `1B`. If the request content is a binary array in the Java format, for example, `{(byte)1, (byte)27}`, you can convert the binary array to `011b` or `011B`. Hexadecimal characters are not case-sensitive in site monitoring tasks. You can enter `011B` in the request content and set the request_format parameter to hex.
*   Text format: Common text refers to strings that consist of printable characters.', example='0.5'),
        header?: string(name='header', description='The number of entries to return on each page. Default value: 10.', example='testKey:testValue'),
        httpMethod?: string(name='http_method', description='The status of the task. Valid values:

*   1: The task is enabled.
*   2: The task is disabled.', example='get'),
        isBase64Encode?: string(name='isBase64Encode', description='The time when the site monitoring task was created.', example='false'),
        matchRule?: int32(name='match_rule', description='The assertions.', example='0'),
        password?: string(name='password', description='The number of entries returned per page.', example='123****'),
        pingNum?: int32(name='ping_num', description='The protocol that is used by the site monitoring task. Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.', example='20'),
        port?: int32(name='port', description='The interval at which detection requests are sent. Unit: minutes.', example='80'),
        protocol?: string(name='protocol', description='The name of the site monitoring task.', example='udp'),
        proxyProtocol?: boolean(name='proxy_protocol', description='The ID of the site monitoring task.', example='false'),
        requestContent?: string(name='request_content', description='The format of the HTTP response. Valid values:

*   hex: hexadecimal
*   txt: text', example='cf0f85'),
        requestFormat?: string(name='request_format', description='The acceptable status code.

>  We recommend that you configure assertions.', example='hex'),
        responseContent?: string(name='response_content', description='The total number of returned entries.', example='cf0f85'),
        responseFormat?: string(name='response_format', description='The port number of the TCP, UDP, SMTP, or POP3 protocol.', example='hex'),
        retryDelay?: int32(name='retry_delay', description='The ID of the request.', example='1'),
        timeOut?: long(name='time_out', description='The password of the SMTP, POP3, or FTP protocol.', example='3000'),
        unfollowRedirect?: boolean(name='unfollow_redirect', description='Indicates whether the PROXY protocol is enabled. Valid values:

*   false (default value): The PROXY protocol is disabled.
*   true: The PROXY protocol is enabled.', example='false'),
        username?: string(name='username', description='The type of the DNS record. This parameter is returned only if the TaskType parameter is set to DNS. Valid values:

*   A (default value): a record that specifies an IP address related to the specified host name or domain name.
*   CNAME: a record that maps multiple domain names to a domain name.
*   NS: a record that specifies a DNS server used to parse domain names.
*   MX: a record that links domain names to the address of a mail server.
*   TXT: a record that stores the text information of host name or domain names. The text must be 1 to 512 bytes in length. The TXT record serves as a Sender Policy Framework (SPF) record to fight against spam.
*   AAAA: a record that maps a domain name to the relevant IPv6 address.', example='testUser'),
      }(name='OptionsJson', description='The number of the page to return. Default value: 1.'),
      taskId?: string(name='TaskId', description='The HTTP request method. Valid values:

*   get
*   post
*   head', example='f5783760-1b39-4b6b-80e8-453d962a****'),
      taskName?: string(name='TaskName', description='The number of times a failed detection request is retried.'),
      taskState?: string(name='TaskState', description='Indicates whether MTR is automatically used to diagnose network issues if a task fails. Valid values:

*   false (default value): MTR is not automatically used to diagnose network issues if a task fails.
*   true: MTR is automatically used to diagnose network issues if a task fails.', example='1'),
      taskType?: string(name='TaskType', description='The protocol that is used by the site monitoring task. Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.', example='TCP'),
      updateTime?: string(name='UpdateTime', description='The packet loss rate.

>  This parameter is returned only if the TaskType parameter is set to PING.', example='2022-03-08 17:14:31'),
    }
  ](name='SiteMonitor')
  }(name='SiteMonitors', description='The type of the assertion. Valid values:

*   response_time: checks whether the response time meets expectations.
*   status_code: checks whether the HTTP status code meets expectations.
*   header: checks whether the fields in the response header meet expectations.
*   body_text: checks whether the content in the response body meets expectations by using text matching.
*   body_json: checks whether the content in the response body meets expectations by using JSON parsing (JSONPath).
*   body_xml: checks whether the content in the response body meets expectations by using XML parsing (XPath).'),
  success?: string(name='Success', description='The comparison operator of the assertion. Valid values:

*   contains: contains
*   doesNotContain: does not contain
*   matches: matches regular expressions
*   doesNotMatch: does not match regular expressions
*   is: equal to a numeric value or matches a character
*   isNot: not equal to
*   lessThan: less than
*   moreThan: greater than', example='true'),
  totalCount?: int32(name='TotalCount', description='Indicates whether redirects are followed if the status code 301 or 302 is returned. Valid values:

*   true: Redirects are not followed.
*   false (default value): Redirects are followed.', example='1'),
}

model DescribeSiteMonitorListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorListResponseBody(name='body'),
}

/**
  * The content of the HTTP request.
  *
 */
async function describeSiteMonitorList(request: DescribeSiteMonitorListRequest): DescribeSiteMonitorListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorLogRequest {
  city?: string(name='City', description='The city identification code.', example='546', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query data. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

> We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='1638422475687', position='Query'),
  filter?: string(name='Filter', description='The filter condition.

You can specify a simple expression, for example, `TotalTime>100`. In this case, the operation returns only the data for instant test tasks whose total response time exceeds 100 milliseconds.', example='TotalTime>100', position='Query'),
  isp?: string(name='Isp', description='The carrier identification code.', example='465', position='Query'),
  length?: int32(name='Length', description='The number of entries to return on each page. Valid values: 1 to 1440.', example='1000', position='Query'),
  metricName?: string(name='MetricName', description='The name of the metric.

Only the `ProbeLog` metric is supported.', example='ProbeLog', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to initiate the next request if the response of the current request is truncated. You can use the token to initiate another request and obtain the remaining records.``', example='IWBjqMYSy0is7zSMGu16****', position='Query'),
  startTime?: string(name='StartTime', description='The start of the time range to query data. The following formats are supported:

*   UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
*   UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format

> 
*   The specified time range includes the end time and excludes the start time. The `start time` must be earlier than the `end time`.
*   We recommend that you use UNIX timestamps to prevent time zone-related issues.', example='1638422474389', position='Query'),
  taskIds: string(name='TaskIds', description='The IDs of the instant test tasks. Separate multiple task IDs with commas (,).', example='afa5c3ce-f944-4363-9edb-ce919a29****', position='Query'),
}

model DescribeSiteMonitorLogResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the call was successful.', example='200'),
  data?: string(name='Data', description='The logs of the instant test tasks.', example='\\[{\\\\"redirectCount\\\\":0.0,\\\\"SSLConnectTime\\\\":0.0,\\\\"pingDetail\\\\":\\\\"\\\\",\\\\"HTTPConnectTime\\\\":0.0,\\\\"isp\\\\":\\\\"465\\\\",\\\\"errorCode\\\\":611,\\\\"ispCN\\\\":\\\\"Alibaba\\\\",\\\\"resolution\\\\":\\\\"\\\\",\\\\"areaEN\\\\":\\\\"HuaBei\\\\",\\\\"taskEndTimestamp\\\\":1638422475687,\\\\"targetIspEN\\\\":\\\\"\\\\",\\\\"TotalTime\\\\":1.0,\\\\"taskStartTimestamp\\\\":1638422474389,\\\\"countryCN\\\\":\\\\"China\\\\",\\\\"provinceEN\\\\":\\\\"Beijing\\\\",\\\\"countryEN\\\\":\\\\"China\\\\",\\\\"targetCityEN\\\\":\\\\"\\\\",\\\\"curlConnectTime\\\\":0.0,\\\\"ips\\\\":\\\\"\\\\",\\\\"route\\\\":\\\\"\\\\",\\\\"tcpConnectTime\\\\":0.0,\\\\"cityEN\\\\":\\\\"Beijing\\\\",\\\\"HTTPDownloadSpeed\\\\":0.0,\\\\"HTTPDownloadTime\\\\":0.0,\\\\"HTTPResponseCode\\\\":0.0,\\\\"areaCN\\\\":\\\\"North China\\\\",\\\\"city\\\\":\\\\"546\\\\",\\\\"expection\\\\":\\\\"\\\\",\\\\"suorceIp\\\\":\\\\"192.168.XX.XX \\\\",\\\\"ispEN\\\\":\\\\"Alibaba\\\\",\\\\"HTTPDNSTime\\\\":1.0,\\\\"targetIsp\\\\":\\\\"\\\\",\\\\"curlStarttransferTime\\\\":0.0,\\\\"provinceCN\\\\":\\\\"Beijing\\\\",\\\\"timestamp\\\\":1638422474000,\\\\"redirectTime\\\\":0.0,\\\\"targetCity\\\\":\\\\"\\\\", \\\\"expect\\\\":\\\\"\\\\",\\\\"HTTPDownloadSize\\\\":0.0,\\\\"localDns\\\\":\\\\"192.168.XX.XX\\\\",\\\\"cityCN\\\\":\\\\"Beijing\\\\",\\\\"taskId\\\\":\\\\"afa5c3ce-f944-4363-9edb-ce919a29\\*\\*\\*\\*\\\\"}]'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  nextToken?: string(name='NextToken', description='The token that is used to initiate the next request.', example='IWBjqMYSy0is7zSMGu16****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='67F646FA-ED8A-58C2-B461-451DB52C8B14'),
  success?: string(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DescribeSiteMonitorLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorLogResponseBody(name='body'),
}

/**
  * You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring. For more information, see [Billing of Network Analysis and Monitoring](~~341649~~).
  * This topic provides an example to show how to query the logs of an instant test task whose ID is `afa5c3ce-f944-4363-9edb-ce919a29****`.
  *
 */
async function describeSiteMonitorLog(request: DescribeSiteMonitorLogRequest): DescribeSiteMonitorLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorQuotaRequest {
}

model DescribeSiteMonitorQuotaResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  data?: {
    secondMonitor?: boolean(name='SecondMonitor', description='Indicates whether the second-level monitoring is enabled. Valid values:

*   true
*   false', example='false'),
    siteMonitorIdcQuota?: int32(name='SiteMonitorIdcQuota', description='The quota of detection points that are provided by Alibaba Cloud. Five detection points are provided for free.', example='5'),
    siteMonitorOperatorQuotaQuota?: int32(name='SiteMonitorOperatorQuotaQuota', description='The quota of detection points that are not provided by Alibaba Cloud. Default value: 0.', example='0'),
    siteMonitorQuotaTaskUsed?: int32(name='SiteMonitorQuotaTaskUsed', description='The used quota of site monitoring tasks.', example='6'),
    siteMonitorTaskQuota?: int32(name='SiteMonitorTaskQuota', description='The quota of site monitoring tasks.', example='10'),
    siteMonitorVersion?: string(name='SiteMonitorVersion', description='The version of site monitoring. Valid values:

*   V1
*   V2', example='V1'),
  }(name='Data', description='The quotas and version of site monitoring.'),
  message?: string(name='Message', description='The returned message.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='26860260-76C6-404E-AB7A-EB98D36A6885'),
  success?: string(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DescribeSiteMonitorQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorQuotaResponseBody(name='body'),
}

async function describeSiteMonitorQuota(request: DescribeSiteMonitorQuotaRequest): DescribeSiteMonitorQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorQuota', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSiteMonitorStatisticsRequest {
  metricName: string(name='MetricName', example='Availability', position='Query'),
  startTime?: string(name='StartTime', example='1576142850527', position='Query'),
  taskId: string(name='TaskId', example='ef4cdc8b-9dc7-43e7-810e-f950e56c****', position='Query'),
  timeRange?: string(name='TimeRange', example='1440', position='Query'),
}

model DescribeSiteMonitorStatisticsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='100'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='3AD2724D-E317-4BFB-B422-D6691D071BE1'),
  success?: string(name='Success', example='true'),
}

model DescribeSiteMonitorStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSiteMonitorStatisticsResponseBody(name='body'),
}

async function describeSiteMonitorStatistics(request: DescribeSiteMonitorStatisticsRequest): DescribeSiteMonitorStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSiteMonitorStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemEventAttributeRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

The value must be a UNIX timestamp. It is the number of seconds that have elapsed since 00:00:00 UTC, January 1, 1970.', example='1552221584949', position='Query'),
  eventType?: string(name='EventType', description='The type of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to query the types of system events.', example='Exception', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group.', example='12346', position='Query'),
  level?: string(name='Level', description='The level of the system event. Valid values:

*   CRITICAL: critical
*   WARN: warning
*   INFO: information', example='CRITICAL', position='Query'),
  name?: string(name='Name', description='The name of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to query the names of system events.', example='BucketIngressBandwidth', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Valid values: 1 to 100000000.

Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Valid values: 1 to 100.

Default value: 10', example='10', position='Query'),
  product?: string(name='Product', description='The abbreviation of the service name.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to query the abbreviations of service names.', example='oss', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The keywords that are used to search for the system event. Valid values:

*   If you want to search for the system event whose content contains a and b, set the value to `a and b`.
*   If you want to search for the system event whose content contains a or b, set the value to `a or b`.', example='cms', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

The value must be a UNIX timestamp. It is the number of seconds that have elapsed since 00:00:00 UTC, January 1, 1970.', example='1552199984949', position='Query'),
  status?: string(name='Status', description='The status of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to query the statuses of system events.', example='normal', position='Query'),
}

model DescribeSystemEventAttributeResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='200'),
  message?: string(name='Message', description='The message that is returned. If the call is successful, `success` is returned. If the call fails, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='60912C8D-B340-4253-ADE7-61ACDFD25CFC'),
  success?: string(name='Success', description='Indicates whether the call is successful. Valid values: True: The call is successful. false: The call fails.', example='true'),
  systemEvents?: {
    systemEvent?: [ 
    {
      content?: string(name='Content', description='The details of the system event.', example='[{"product":"CloudMonitor","content":"{\\"ipGroup\\":\\"112.126.XX.XX,10.163.XX.XX\\",\\"tianjimonVersion\\":\\"1.2.22\\"}","groupId":"176,177,178,179,180,692,120812,1663836,96,2028302","time":"1552209568000","resourceId":"acs:ecs:cn-beijing:173651113438****:instance/i-25k35****","level":"CRITICAL","status":"stopped","instanceName":"cmssiteprobebj-6","name":"Agent_Status_Stopped","regionId":"cn-beijing"}]'),
      groupId?: string(name='GroupId', description='The ID of the application group.', example='12345'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='instanceId1'),
      level?: string(name='Level', description='The level of the system event. Valid values:

*   CRITICAL: critical
*   WARN: warning
*   INFO: information', example='WARN'),
      name?: string(name='Name', description='The name of the system event.', example='Agent_Status_Stopped'),
      product?: string(name='Product', description='The abbreviation of the service name.', example='CloudMonitor'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='xxxxx-1'),
      status?: string(name='Status', description='The status of the system event.', example='normal'),
      time?: long(name='Time', description='The timestamp when the system event occurred.

Unit: milliseconds.', example='1552199984000'),
    }
  ](name='SystemEvent')
  }(name='SystemEvents', description='The details of the system event.'),
}

model DescribeSystemEventAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemEventAttributeResponseBody(name='body'),
}

async function describeSystemEventAttribute(request: DescribeSystemEventAttributeRequest): DescribeSystemEventAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemEventAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemEventCountRequest {
  endTime?: string(name='EndTime', description='The ID of the request.', example='1635993921000', position='Query'),
  eventType?: string(name='EventType', description='The level of the system event. Valid values:

*   Critical
*   Warn
*   Info

You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Level`. The value of the Level parameter indicates the levels of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](~~114972~~).', example='StatusNotification', position='Query'),
  groupId?: string(name='GroupId', description='The timestamp that specifies the start of the time range to query. Unit: milliseconds.', example='17285****', position='Query'),
  level?: string(name='Level', description='The ID of the application group.', example='Info', position='Query'),
  name?: string(name='Name', description='The status of the system event.

You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Status`. The value of the Status parameter indicates the status of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](~~114972~~).', example='Instance:StateChange', position='Query'),
  product?: string(name='Product', description='The name of the system event.

You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Name`. The value of the Name parameter indicates the names of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](~~114972~~).', example='ECS', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The timestamp that specifies the end of the time range to query. Unit: milliseconds.', example='ECS', position='Query'),
  startTime?: string(name='StartTime', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1635993541000', position='Query'),
  status?: string(name='Status', description='The keywords that are used to search for the system event. You can use a logical operator to connect keywords. Valid values:

*   If you want to search for the system event whose content contains a and b, set the value to `a and b`.
*   If you want to search for the system event whose content contains a or b, set the value to `a or b`.', example='Normal', position='Query'),
}

model DescribeSystemEventCountResponseBody = {
  code?: string(name='Code', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The details of the system event.', example='C7A7B776-0ACE-5A93-9B07-DE8008D9CCDF'),
  success?: string(name='Success', description='The status of the system event.', example='true'),
  systemEventCounts?: {
    systemEventCount?: [ 
    {
      content?: string(name='Content', description='The ID of the region.'),
      groupId?: string(name='GroupId', description='The name of the instance.', example='17285****'),
      instanceName?: string(name='InstanceName', description='The ID of the resource.', example='ECS-test'),
      level?: string(name='Level', description='This topic provides an example on how to query the number of times that a system event occurred for Elastic Compute Service (`ECS`). The returned result indicates that the number of times that the specified system event occurred is 3.', example='Info'),
      name?: string(name='Name', description='The level of the system event. Valid values:

*   Critical
*   Warn
*   Info', example='Instance:StateChange'),
      num?: long(name='Num', description='The name of the system event.', example='3'),
      product?: string(name='Product', description='The number of times that the system event occurred.', example='ECS'),
      regionId?: string(name='RegionId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='cn-hangzhou'),
      resourceId?: string(name='ResourceId', description='The description of the system event.', example='i-rj99xc6cptkk64ml****'),
      status?: string(name='Status', description='The ID of the application group.', example='Normal'),
      time?: long(name='Time', description='The name of the cloud service in which the system event occurred.', example='1635993751000'),
    }
  ](name='SystemEventCount')
  }(name='SystemEventCounts', description='The timestamp when the system event occurred. Unit: milliseconds.'),
}

model DescribeSystemEventCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemEventCountResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeSystemEventCount.
  *
 */
async function describeSystemEventCount(request: DescribeSystemEventCountRequest): DescribeSystemEventCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemEventCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemEventHistogramRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552220485596', position='Query'),
  eventType?: string(name='EventType', description='The type of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to view the types of system events.', example='Exception', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the application group.', example='12345', position='Query'),
  level?: string(name='Level', description='The level of the system event. Valid values:

*   CRITICAL
*   WARN
*   INFO', example='CRITICAL', position='Query'),
  name?: string(name='Name', description='The name of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to view the names of system events.', example='BucketIngressBandwidth', position='Query'),
  product?: string(name='Product', description='The abbreviation of the service name.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to view the abbreviations of service names.', example='OSS', position='Query'),
  searchKeywords?: string(name='SearchKeywords', description='The keywords contained in the content of the system event to query. You can use a logical operator between keywords. Examples:

*   If you need to query the system event whose content contains a and b, set the value to `a and b`.
*   If you need to query the system event whose content contains a or b, set the value to `a or b`.', example='cms', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552209685596', position='Query'),
  status?: string(name='Status', description='The status of the system event.

>  You can call the [DescribeSystemEventMetaList](~~114972~~) operation to view the statuses of system events.', example='normal', position='Query'),
}

model DescribeSystemEventHistogramResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='486029C9-53E1-44B4-85A8-16A571A043FD'),
  success?: string(name='Success', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='true'),
  systemEventHistograms?: {
    systemEventHistogram?: [ 
    {
      count?: long(name='Count', description='The number of times that the system event occurred.', example='2'),
      endTime?: long(name='EndTime', description='The end of an interval.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552225753000'),
      startTime?: long(name='StartTime', description='The beginning of an interval.

This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.', example='1552225770000'),
    }
  ](name='SystemEventHistogram')
  }(name='SystemEventHistograms', description='The information about the number of times that the system event occurred during each interval of a time period.'),
}

model DescribeSystemEventHistogramResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemEventHistogramResponseBody(name='body'),
}

async function describeSystemEventHistogram(request: DescribeSystemEventHistogramRequest): DescribeSystemEventHistogramResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemEventHistogram', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemEventMetaListRequest {
}

model DescribeSystemEventMetaListResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  data?: {
    resource?: [ 
    {
      eventType?: string(name='EventType', description='The type of the system event. Valid values:

*   StatusNotification
*   Exception
*   Maintenance', example='Exception'),
      level?: string(name='Level', description='The level of the alert. Valid values:

*   CRITICAL
*   WARN
*   INFO', example='INFO'),
      name?: string(name='Name', description='The name of the system event.', example='SelectFailureRate'),
      nameDesc?: string(name='NameDesc', description='The description of the system event, in Chinese.'),
      nameDesc_en?: string(name='NameDesc.En'),
      product?: string(name='Product', description='The abbreviation of the service name.', example='ADS'),
      status?: string(name='Status', description='The status of the system event.', example='failed'),
      statusDesc?: string(name='StatusDesc', description='The description of the event status.', example='Operation Failed'),
    }
  ](name='Resource')
  }(name='Data', description='The detailed meta information.'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A6582C8B-E67C-4A19-BC15-EAEFEBDC7995'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DescribeSystemEventMetaListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemEventMetaListResponseBody(name='body'),
}

async function describeSystemEventMetaList(request: DescribeSystemEventMetaListRequest): DescribeSystemEventMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemEventMetaList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeyListRequest {
  pageNumber?: int32(name='PageNumber', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.

Maximum value: 100. Default value: 50.', example='10', position='Query'),
}

model DescribeTagKeyListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='Specified parameter PageSize is not valid.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B04B8CF3-4489-432D-83BA-6F128E5F2293'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
  tagKeys?: {
    tagKey?: [ string ](name='TagKey')
  }(name='TagKeys', description='The tag keys returned.'),
}

model DescribeTagKeyListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeyListResponseBody(name='body'),
}

async function describeTagKeyList(request: DescribeTagKeyListRequest): DescribeTagKeyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagValueListRequest {
  pageNumber?: int32(name='PageNumber', description='The key of the tag whose values you want to query.

For more information about how to obtain a tag key, see [DescribeTagKeyList](~~145558~~).', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The HTTP status code.

>  The value 200 indicates that the call was successful.', example='10', position='Query'),
  tagKey: string(name='TagKey', description='The error message.', example='tagKey1', position='Query'),
}

model DescribeTagValueListResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The tag values returned.', example='B04B8CF3-4489-432D-83BA-6F128E4F2295'),
  success?: boolean(name='Success', description='This topic provides an example of how to query the tag values corresponding to `tagKey1`. The return results are `tagValue1` and `tagValue2`.', example='true'),
  tagValues?: {
    tagValue?: [ string ](name='TagValue')
  }(name='TagValues', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
}

model DescribeTagValueListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagValueListResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to DescribeTagValueList.
  *
 */
async function describeTagValueList(request: DescribeTagValueListRequest): DescribeTagValueListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagValueList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUnhealthyHostAvailabilityRequest {
  id: [ long ](name='Id', example='123456', position='Query'),
}

model DescribeUnhealthyHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ACBDBB40-DFB6-4F4C-8957-51FFB233969C'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
  unhealthyList?: {
    nodeTaskInstance?: [ 
    {
      id?: long(name='Id', description='The ID of the availability monitoring task.', example='123456'),
      instanceList?: {
        string?: [ string ](name='String')
      }(name='InstanceList', description='The unhealthy instances that are detected by the availability monitoring task.'),
    }
  ](name='NodeTaskInstance')
  }(name='UnhealthyList', description='The unhealthy instances that are detected by the specified availability monitoring tasks.'),
}

model DescribeUnhealthyHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUnhealthyHostAvailabilityResponseBody(name='body'),
}

async function describeUnhealthyHostAvailability(request: DescribeUnhealthyHostAvailabilityRequest): DescribeUnhealthyHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUnhealthyHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model DisableActiveMetricRuleRequest {
  product: string(name='Product', description='The service for which you want to disable one-click alert. Valid values:

*   ecs: Elastic Compute Service (ECS)
*   rds: ApsaraDB RDS
*   slb: Server Load Balancer (SLB)
*   redis_standard: ApsaraDB for Redis of the standard architecture
*   redis_sharding: ApsaraDB for Redis of the cluster architecture
*   redis_splitrw: ApsaraDB for Redis of the read/write splitting architecture
*   mongodb: ApsaraDB for MongoDB of the replica set architecture
*   mongodb_sharding: ApsaraDB for MongoDB of the sharded cluster architecture
*   hbase: ApsaraDB for HBase
*   elasticsearch: Elasticsearch
*   opensearch: Open Search', example='ecs', position='Query'),
}

model DisableActiveMetricRuleResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F82E6667-7811-4BA0-842F-5B2DC42BBAAD'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DisableActiveMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableActiveMetricRuleResponseBody(name='body'),
}

async function disableActiveMetricRule(request: DisableActiveMetricRuleRequest): DisableActiveMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableActiveMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model DisableEventRulesRequest {
  ruleNames: [ string ](name='RuleNames', example='ruleName1', position='Query'),
}

model DisableEventRulesResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3FD0E8B5-F132-4F4E-A081-2878AF378B12'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='true'),
}

model DisableEventRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DisableEventRulesResponseBody(name='body'),
}

async function disableEventRules(request: DisableEventRulesRequest): DisableEventRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableEventRules', 'POST', '/', 'json', false, 'json', request);
}

model DisableHostAvailabilityRequest {
  id: [ long ](name='Id', example='12345', position='Query'),
}

model DisableHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The status code.

>  The status code 200 indicates a success.', example='200'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ACBDBB40-DFB6-4F4C-8957-51FFB233969C'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='true'),
}

model DisableHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: DisableHostAvailabilityResponseBody(name='body'),
}

async function disableHostAvailability(request: DisableHostAvailabilityRequest): DisableHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model DisableMetricRulesRequest {
  ruleId: [ string ](name='RuleId', example='detect_87****_HTTP_HttpLatency', position='Query'),
}

model DisableMetricRulesResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='RuleId is mandatory for this action.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FF38D33A-67C1-40EB-AB65-FAEE51EDB644'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model DisableMetricRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DisableMetricRulesResponseBody(name='body'),
}

async function disableMetricRules(request: DisableMetricRulesRequest): DisableMetricRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableMetricRules', 'POST', '/', 'json', false, 'json', request);
}

model DisableSiteMonitorsRequest {
  taskIds: string(name='TaskIds', description='The IDs of the site monitoring tasks. Separate multiple IDs with commas (,).', example='49f7b317-7645-4cc9-94fd-ea42e522****,49f7b317-7645-4cc9-94fd-ea42e522****', position='Query'),
}

model DisableSiteMonitorsResponseBody = {
  code?: string(name='Code', description='The status code.

>  The status code 200 indicates a success.', example='200'),
  data?: {
    count?: int32(name='count', description='The number of detection points.', example='0'),
  }(name='Data', description='The number of detection points that were monitored by the site monitoring tasks.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3fcd12e7-d387-42ee-b77e-661c775bb17f'),
  success?: string(name='Success', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='true'),
}

model DisableSiteMonitorsResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSiteMonitorsResponseBody(name='body'),
}

async function disableSiteMonitors(request: DisableSiteMonitorsRequest): DisableSiteMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSiteMonitors', 'POST', '/', 'json', false, 'json', request);
}

model EnableActiveMetricRuleRequest {
  product: string(name='Product', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='ecs', position='Query'),
}

model EnableActiveMetricRuleResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The operation that you want to perform. Set the value to **EnableActiveMetricRule**.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='F82E6667-7811-4BA0-842F-5B2DC42BBAAD'),
  success?: boolean(name='Success', example='true'),
}

model EnableActiveMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableActiveMetricRuleResponseBody(name='body'),
}

async function enableActiveMetricRule(request: EnableActiveMetricRuleRequest): EnableActiveMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableActiveMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model EnableEventRulesRequest {
  ruleNames: [ string ](name='RuleNames', example='ruleName1', position='Query'),
}

model EnableEventRulesResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='20F2896A-6684-4A04-8255-4155B1593C70'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='true'),
}

model EnableEventRulesResponse = {
  headers: map[string]string(name='headers'),
  body: EnableEventRulesResponseBody(name='body'),
}

async function enableEventRules(request: EnableEventRulesRequest): EnableEventRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableEventRules', 'POST', '/', 'json', false, 'json', request);
}

model EnableHostAvailabilityRequest {
  id: [ long ](name='Id', example='123456', position='Query'),
}

model EnableHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The status code.

>  The HTTP status code 200 indicates a success.', example='200'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ACBDBB40-DFB6-4F4C-8957-51FFB233969C'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='true'),
}

model EnableHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: EnableHostAvailabilityResponseBody(name='body'),
}

async function enableHostAvailability(request: EnableHostAvailabilityRequest): EnableHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model EnableMetricRuleBlackListRequest {
  id: string(name='Id', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='a9ad2ac2-3ed9-11ed-b878-0242ac12****', position='Query'),
  isEnable: boolean(name='IsEnable', description='The ID of the request.', example='true', position='Query'),
}

model EnableMetricRuleBlackListResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **EnableMetricRuleBlackList**.', example='200'),
  count?: int32(name='Count', example='1'),
  message?: string(name='Message', description='The number of blacklist policies that are enabled or disabled.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='94869866-1621-3652-BBC9-72A47B2AC2F5'),
  success?: boolean(name='Success', example='true'),
}

model EnableMetricRuleBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMetricRuleBlackListResponseBody(name='body'),
}

async function enableMetricRuleBlackList(request: EnableMetricRuleBlackListRequest): EnableMetricRuleBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMetricRuleBlackList', 'POST', '/', 'json', false, 'json', request);
}

model EnableMetricRulesRequest {
  ruleId: [ string ](name='RuleId', description='The IDs of the alert rules.

Valid values of N: 1 to 100.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='ab05733c97b7ce239fb1b53393dc1697c123****', position='Query'),
}

model EnableMetricRulesResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='FF38D33A-67C1-40EB-AB65-FAEE51EDB644'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model EnableMetricRulesResponse = {
  headers: map[string]string(name='headers'),
  body: EnableMetricRulesResponseBody(name='body'),
}

async function enableMetricRules(request: EnableMetricRulesRequest): EnableMetricRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableMetricRules', 'POST', '/', 'json', false, 'json', request);
}

model EnableSiteMonitorsRequest {
  taskIds: string(name='TaskIds', description='The IDs of the site monitoring tasks. Separate multiple instance IDs with commas (,).', example='49f7b317-7645-4cc9-94fd-ea42e522****,49f7b317-7645-4cc9-94fd-ea42e522****', position='Query'),
}

model EnableSiteMonitorsResponseBody = {
  code?: string(name='Code', description='The status code.

>  The status code 200 indicates a success.', example='200'),
  data?: {
    count?: int32(name='count', description='The number of detection points.', example='0'),
  }(name='Data', description='The number of detection points that are affected by the site monitoring tasks.'),
  message?: string(name='Message', description='The returned message.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3fcd12e7-d387-42ee-b77e-661c775bb17f'),
  success?: string(name='Success', description='Indicates whether the operation was successful. Valid values:

*   true: successful.
*   false: failed.', example='true'),
}

model EnableSiteMonitorsResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSiteMonitorsResponseBody(name='body'),
}

async function enableSiteMonitors(request: EnableSiteMonitorsRequest): EnableSiteMonitorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSiteMonitors', 'POST', '/', 'json', false, 'json', request);
}

model InstallMonitoringAgentRequest {
  force?: boolean(name='Force', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='true', position='Query'),
  installCommand?: string(name='InstallCommand', description='The ID of the request.', example='onlyInstallNotHasAgent', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', example='i-m5e0k0bexac8tykr****', position='Query'),
}

model InstallMonitoringAgentResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **InstallMonitoringAgent**.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='0BDAF8A8-04DC-5F0C-90E4-724D42C41945'),
  success?: boolean(name='Success', example='true'),
}

model InstallMonitoringAgentResponse = {
  headers: map[string]string(name='headers'),
  body: InstallMonitoringAgentResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function installMonitoringAgent(request: InstallMonitoringAgentRequest): InstallMonitoringAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallMonitoringAgent', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupMonitoringAgentProcessRequest {
  alertConfig: [ 
    {
      comparisonOperator: string(name='ComparisonOperator', description='The level of the alert. Valid values:

*   INFO: information
*   WARN: warning
*   CRITICAL: critical', example='GreaterThanOrEqualToThreshold'),
      effectiveInterval?: string(name='EffectiveInterval', description='The error message.', example='00:00-22:59'),
      escalationsLevel: string(name='EscalationsLevel', description='The time period during which the alert rule is effective. Valid values of N: 1 to 200.', example='warn'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', description='The ID of the process monitoring task.', example='23:00-23:59'),
      silenceTime?: string(name='SilenceTime', description='The logical operator used between conditional expressions that are used to match instances. Valid values:

*   all
*   and
*   or', example='86400'),
      statistics?: string(name='Statistics', description='The level of the alert. Valid values of N: 1 to 200. Valid values:

*   critical (default value): critical
*   warn: warning
*   info: information', example='Average'),
      targetList?: [ 
        {
          arn?: string(name='Arn', description='The Alibaba Cloud Resource Name (ARN) of the resource.

For information about how to obtain the ARN of a resource, see [DescribeMetricRuleTargets](~~121592~~).

Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
*   {userId}: the ID of the Alibaba Cloud account.
*   {regionId}: the region ID of the message queue or topic.
*   {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues** - **topics** {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`', example='acs:mns:cn-hangzhou:120886317861****:/queues/test/message'),
          id?: string(name='Id', description='The time period during which the alert rule is ineffective. Valid values of N: 1 to 200.', example='1'),
          jsonParams?: string(name='JsonParams', description='The alert threshold. Valid values of N: 1 to 200.', example='{"customField1":"value1","customField2":"$.name"}'),
          level?: string(name='Level', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule. Valid values of N: 1 to 200.', example='["INFO", "WARN", "CRITICAL"]'),
        }
      ](name='TargetList'),
      threshold: string(name='Threshold', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Valid values of N: 1 to 200.

Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.

>  Only one alert notification is sent during a mute period even if the metric value exceeds the alert threshold during consecutive checks.', example='5'),
      times: string(name='Times', description='The operation that you want to perform. Set the value to **ModifyGroupMonitoringAgentProcess**.', example='3'),
      webhook?: string(name='Webhook', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='http://www.aliyun.com'),
    }
  ](name='AlertConfig', position='Query'),
  groupId: string(name='GroupId', description='The ID of the application group.', example='6780****', position='Query'),
  id: string(name='Id', description='The statistical aggregation method that is used to calculate the metric values. Valid values of N: 1 to 200.

>  Set the value to Average.', example='92E3065F-0980-4E31-9AA0-BA6****', position='Query'),
  matchExpressFilterRelation?: string(name='MatchExpressFilterRelation', description='The comparison operator that is used to compare the metric value with the threshold. Valid values of N: 1 to 200. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold.
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday.
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='and', position='Query'),
}

model ModifyGroupMonitoringAgentProcessResponseBody = {
  code?: string(name='Code', description='The number of times for which the threshold can be consecutively exceeded. Valid values of N: 1 to 200. Default value: 3.

>  A metric triggers an alert only after the metric value reaches the threshold consecutively for the specified times.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='7985D471-3FA8-4EE9-8F4B-45C19DF3D36F'),
  success?: boolean(name='Success', example='true'),
}

model ModifyGroupMonitoringAgentProcessResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyGroupMonitoringAgentProcessResponseBody(name='body'),
}

async function modifyGroupMonitoringAgentProcess(request: ModifyGroupMonitoringAgentProcessRequest): ModifyGroupMonitoringAgentProcessResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroupMonitoringAgentProcess', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostAvailabilityRequest {
  alertConfig?: {
    endTime?: int32(name='EndTime', description='The ID of the availability monitoring task.', example='22'),
    notifyType: int32(name='NotifyType', description='The content of the HTTP POST request.', example='0'),
    silenceTime?: int32(name='SilenceTime', description='The interval at which detection requests are sent. Unit: seconds. Valid values: 15, 30, 60, 120, 300, 900, 1800, and 3600.

>  This parameter is available only for the CloudMonitor agent V3.5.1 or later.', example='86400'),
    startTime?: int32(name='StartTime', description='The method used to calculate metric values that trigger alerts. Valid values of N: 1 to 21. The value of this parameter varies based on the metric. The following points describe the correspondence between metrics and calculation methods:

*   HttpStatus: Value
*   HttpLatency: Average
*   TelnetStatus: Value
*   TelnetLatency: Average
*   PingLostRate: Average

>  The value Value indicates the original value and is used for metrics such as status codes. The value Average indicates the average value and is used for metrics, such as the latency and packet loss rate.', example='0'),
    webHook?: string(name='WebHook', description='The name of the availability monitoring task.', example='https://www.aliyun.com/webhook.json'),
  }(name='AlertConfig', position='Query'),
  taskOption?: {
    httpHeader?: string(name='HttpHeader', description='The alert notification methods. Valid values:

0: Alert notifications are sent by using emails and DingTalk chatbots.', example='params1:value1'),
    httpMethod?: string(name='HttpMethod', description='The consecutive number of times for which the metric value meets the alert condition before an alert is triggered. Valid values of N: 1 to 21.', example='GET'),
    httpNegative?: boolean(name='HttpNegative', description='The level of the alert. Valid values:

*   INFO: information
*   WARN: warning
*   CRITICAL: critical', example='true'),
    httpPostContent?: string(name='HttpPostContent', description='The domain name or IP address that you want to monitor.

>  If the TaskType parameter is set to PING or TELNET, this parameter is required. For more information about how to set the TaskType parameter, see [CreateHostAvailability](~~115317~~).', example='params1=value1'),
    httpResponseCharset?: string(name='HttpResponseCharset', description='The error message.', example='UTF-8'),
    httpResponseMatchContent?: string(name='HttpResponseMatchContent', description='The ID of the application group.', example='ok'),
    httpURI?: string(name='HttpURI', description='The operation that you want to perform. Set the value to **ModifyHostAvailability**.', example='https://www.aliyun.com'),
    interval?: int32(name='Interval', description='The header of the HTTP request. Format: `Parameter name:Parameter value`. Separate multiple parameters with carriage return characters. Example:

```

params1:value1
params2:value2
```', example='60'),
    telnetOrPingHost?: string(name='TelnetOrPingHost', description='The URI that you want to monitor. If the TaskType parameter is set to HTTP, this parameter is required.', example='www.aliyun.com'),
  }(name='TaskOption', position='Query'),
  alertConfigEscalationList: [ 
    {
      aggregate?: string(name='Aggregate', description='The ECS instances that are monitored. Valid values of N: 1 to 21.

>  If the `TaskScope` parameter is set to `GROUP_SPEC_INSTANCE`, this parameter is required.', example='Value'),
      metricName: string(name='MetricName', description='The character set that is used in the HTTP response.

>  Valid value: UTF-8.', example='HttpStatus'),
      operator?: string(name='Operator', description='The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:

*   true: If the HTTP response body includes the alert rule, an alert is triggered.
*   false: If the HTTP response does not include the alert rule, an alert is triggered.

>  If the TaskType parameter is set to HTTP, this parameter is required. For more information about how to set the TaskType parameter, see [CreateHostAvailability](~~115317~~).', example='>'),
      times?: int32(name='Times', description='The parameters of the alert callback. The parameters are in the JSON format.', example='3'),
      value?: string(name='Value', description='The callback URL.', example='3'),
    }
  ](name='AlertConfigEscalationList', position='Query'),
  alertConfigTargetList?: [ 
    {
      arn?: string(name='Arn', description='The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. The default value indicates one day.', example='acs:mns:cn-hangzhou:111:/queues/test/message'),
      id?: string(name='Id', description='The end of the time period during which the alert rule is effective. Valid values: 0 to 23.

For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.

>  Alert notifications are sent based on the specified threshold only if the alert rule is effective.', example='1'),
      jsonParams?: string(name='JsonParams', description='The ID of the request.', example='{"customField1":"value1","customField2":"$.name"}'),
      level?: string(name='Level', description='The range of instances that are monitored by the availability monitoring task. Valid values:

*   GROUP: All ECS instances in the application group are monitored.
*   GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored. The TaskScope parameter must be used in combination with the InstanceList.N parameter. The InstanceList.N parameter specifies the ECS instances to be monitored.', example='["INFO", "WARN", "CRITICAL"]'),
    }
  ](name='AlertConfigTargetList', position='Query'),
  groupId: long(name='GroupId', description='The Alibaba Cloud Resource Name (ARN) of the resource.

Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
*   {userId}: the ID of the Alibaba Cloud account.
*   {regionId}: the region ID of the message queue or topic.
*   {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues** - **topics** {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`', example='123456', position='Query'),
  id: long(name='Id', description='The metric for which the alert feature is enabled. Valid values of N: 1 to 21. Valid values:

*   HttpStatus: HTTP status code
*   HttpLatency: HTTP response time
*   TelnetStatus: Telnet status code
*   TelnetLatency: Telnet response time
*   PingLostRate: Ping packet loss rate', example='12345', position='Query'),
  instanceList?: [ string ](name='InstanceList', example='i-absdfkwl321****', position='Query'),
  taskName: string(name='TaskName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='task2', position='Query'),
  taskScope?: string(name='TaskScope', description='The comparison operator that is used in the alert rule. Valid values of N: 1 to 21. Valid values:

*   `>`
*   `>=`
*   `<`
*   `<=`
*   `=`', example='GROUP', position='Query'),
}

model ModifyHostAvailabilityResponseBody = {
  code?: string(name='Code', description='The alert threshold. Valid values of N: 1 to 21.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='16E815A3-47E1-4290-87F9-D5C99471FF45'),
  success?: boolean(name='Success', example='true'),
}

model ModifyHostAvailabilityResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostAvailabilityResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function modifyHostAvailability(request: ModifyHostAvailabilityRequest): ModifyHostAvailabilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostAvailability', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHostInfoRequest {
  hostName?: string(name='HostName', description='The name of the host.', example='portalHost', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance. Only hosts not on Alibaba Cloud are supported.', example='host-R_NSWNV****', position='Query'),
}

model ModifyHostInfoResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EBB5215C-44AB-4000-A2D7-48634FDC4F04'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.', example='true'),
}

model ModifyHostInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHostInfoResponseBody(name='body'),
}

/**
  * ****
  *
 */
async function modifyHostInfo(request: ModifyHostInfoRequest): ModifyHostInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHostInfo', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHybridMonitorNamespaceRequest {
  description?: string(name='Description', description='Indicates whether the request was successful.', position='Query'),
  namespace: string(name='Namespace', description='The data retention period of the namespace. Valid values:

*   cms.s1.large: 15 days
*   cms.s1.xlarge: 32 days
*   cms.s1.2xlarge: 63 days
*   cms.s1.3xlarge: 93 days
*   cms.s1.6xlarge: 185 days
*   cms.s1.12xlarge: 376 days

For information about the pricing for different retention periods, see the **Pricing** section in [Billing of the dashboard feature](~~223532~~).', example='aliyun', position='Query'),
  spec?: string(name='Spec', description='The ID of the request.', example='cms.s1.2xlarge', position='Query'),
}

model ModifyHybridMonitorNamespaceResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **ModifyHybridMonitorNamespace**.', example='Success'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='%s'),
  requestId?: string(name='RequestId', example='E190AB2E-7BF9-59B7-9DDC-7CB1782C5ECD'),
  success?: string(name='Success', example='true'),
}

model ModifyHybridMonitorNamespaceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHybridMonitorNamespaceResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function modifyHybridMonitorNamespace(request: ModifyHybridMonitorNamespaceRequest): ModifyHybridMonitorNamespaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHybridMonitorNamespace', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHybridMonitorSLSGroupRequest {
  SLSGroupConfig: [ 
    {
      SLSLogstore: string(name='SLSLogstore', description='The name of the Logstore group.

For information about how to obtain the name of a Logstore group, see [DescribeHybridMonitorSLSGroup](~~429526~~).', example='Logstore-aliyun-all'),
      SLSProject: string(name='SLSProject', description='The IDs of the member accounts.

Valid values of N: 1 to 25.

If you call API operations by using a management account, you can connect the Alibaba Cloud services that are activated for a member account in Resource Directory to Hybrid Cloud Monitoring. You can use Resource Directory to monitor Alibaba Cloud services across enterprise accounts.

>  If a member uses CloudMonitor for the first time, you must make sure that the service-linked role AliyunServiceRoleForCloudMonitor is attached to the member. For more information, see [Manage the service-linked role for CloudMonitor](~~170423~~).', example='aliyun-project'),
      SLSRegion: string(name='SLSRegion', description='The error message.', example='cn-hangzhou'),
      SLSUserId?: string(name='SLSUserId', description='The Logstores.

Valid values of N: 1 to 25.', example='120886317861****'),
    }
  ](name='SLSGroupConfig', position='Query'),
  SLSGroupDescription?: string(name='SLSGroupDescription', description='The operation that you want to perform. Set the value to **ModifyHybridMonitorSLSGroup**.', position='Query'),
  SLSGroupName: string(name='SLSGroupName', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='Logstore_test', position='Query'),
}

model ModifyHybridMonitorSLSGroupResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='NotFound.SLSGroup'),
  requestId?: string(name='RequestId', example='66683237-7126-50F8-BBF8-D67ACC919A17'),
  success?: string(name='Success', example='true'),
}

model ModifyHybridMonitorSLSGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHybridMonitorSLSGroupResponseBody(name='body'),
}

/**
  * The Log Service projects.
  * Valid values of N: 1 to 25.
  *
 */
async function modifyHybridMonitorSLSGroup(request: ModifyHybridMonitorSLSGroupRequest): ModifyHybridMonitorSLSGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHybridMonitorSLSGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHybridMonitorTaskRequest {
  attachLabels?: [ 
    {
      name?: string(name='Name', description='The alias of the aggregation result.', example='app_service'),
      value?: string(name='Value', description='The error message.', example='testValue'),
    }
  ](name='AttachLabels', position='Query'),
  collectInterval?: string(name='CollectInterval', description='The value of the key that is used to filter logs imported from Log Service.', example='15', position='Query'),
  description?: string(name='Description', description='The operation that you want to perform. Set the value to **ModifyHybridMonitorTask**.', position='Query'),
  SLSProcessConfig?: {
    express?: [ 
      {
        alias?: string(name='Alias', description='The interval at which metrics are collected. Valid values:

*   15
*   60

Unit: seconds.', example='SuccRate'),
        express?: string(name='Express', description='The name of the key that is used to filter logs imported from Log Service.', example='success_count'),
      }
    ](name='Express', description='The name of the key that is used to aggregate logs imported from Log Service.'),
    filter?: {
      filters?: [ 
        {
          operator?: string(name='Operator', description='The extended field that specifies the result of basic operations performed on aggregation results.', example='='),
          SLSKeyName?: string(name='SLSKeyName', description='The method that is used to filter logs imported from Log Service. Valid values:

*   `contain`: contains
*   `notContain`: does not contain
*   `>`: greater than
*   `<`: less than
*   `=`: equal to
*   `! =`: not equal to
*   `>=`: greater than or equal to
*   `<=`: less than or equal to', example='code'),
          value?: string(name='Value', description='The name of the metric import task.

For information about how to obtain the ID of a metric import task, see [DescribeHybridMonitorTaskList](~~428624~~).', example='200'),
        }
      ](name='Filters', description='The conditions that are used to filter logs imported from Log Service.'),
      relation?: string(name='Relation', description='The ID of the metric import task.

For information about how to obtain the ID of a metric import task, see [DescribeHybridMonitorTaskList](~~428624~~).', example='and'),
    }(name='Filter', description='The configurations of the logs that are imported from Log Service.'),
    groupBy?: [ 
      {
        alias?: string(name='Alias', description='The relationship between multiple filter conditions. Valid values:

*   and (default value): Logs are processed only if all filter conditions are met.
*   or: Logs are processed if one of the filter conditions is met.', example='ApiResult'),
        SLSKeyName?: string(name='SLSKeyName', description='The tag key of the metric.', example='code'),
      }
    ](name='GroupBy', description='The description of the metric import task.'),
    statistics?: [ 
      {
        alias?: string(name='Alias', example='level_count'),
        function?: string(name='Function', example='count'),
        parameter1?: string(name='Parameter1', example='200'),
        parameter2?: string(name='Parameter2', example='299'),
        SLSKeyName?: string(name='SLSKeyName', example='name'),
      }
    ](name='Statistics'),
  }(name='SLSProcessConfig', description='None.', position='Query'),
  taskId: string(name='TaskId', description='The tag value of the metric.', example='36****', position='Query'),
  taskName?: string(name='TaskName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='SLS_task', position='Query'),
}

model ModifyHybridMonitorTaskResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='Invalid.SLSConfig'),
  requestId?: string(name='RequestId', example='11145B76-566A-5D80-A8A3-FAD98D310079'),
  success?: string(name='Success', example='true'),
}

model ModifyHybridMonitorTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHybridMonitorTaskResponseBody(name='body'),
}

/**
  * The alias of the extended field that specifies the result of basic operations performed on aggregation results.
  *
 */
async function modifyHybridMonitorTask(request: ModifyHybridMonitorTaskRequest): ModifyHybridMonitorTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHybridMonitorTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMetricRuleBlackListRequest {
  category: string(name='Category', description='The IDs of instances that belong to the specified cloud service. The value of this parameter is a JSON array.

Valid values of N: 1 to 20.', example='ecs', position='Query'),
  effectiveTime?: string(name='EffectiveTime', description='The ID of the application group. The value of this parameter is a JSON array.

>  This parameter is required only if the `ScopeType` parameter is set to `GROUP`.', example='03:00-04:59', position='Query'),
  enableEndTime?: string(name='EnableEndTime', description='The error message.', example='1640608200000', position='Query'),
  enableStartTime?: string(name='EnableStartTime', description='The effective scope of the blacklist policy. Valid values:

*   USER: The blacklist policy takes effect only for the current Alibaba Cloud account.

*   GROUP: The blacklist policy takes effect only for the specified application group. This is the default value.

    For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='1640237400000', position='Query'),
  id: string(name='Id', description='The namespace of the cloud service.

For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](~~163515~~).', example='93514c96-ceb8-47d8-8ee3-93b6d98b****', position='Query'),
  instances: [ string ](name='Instances', position='Query'),
  metrics?: [ 
    {
      metricName: string(name='MetricName', description='The ID of the blacklist policy.

For information about how to obtain the ID of a blacklist policy, see [DescribeMetricRuleBlackList](~~457257~~).', example='disk_utilization'),
      resource?: string(name='Resource', description='The categories of the Alibaba Cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.', example='{"device":"C:"}'),
    }
  ](name='Metrics', position='Query'),
  name: string(name='Name', description='The timestamp when the blacklist policy starts to take effect.

Unit: milliseconds.', example='Blacklist-02', position='Query'),
  namespace: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='acs_ecs_dashboard', position='Query'),
  scopeType?: string(name='ScopeType', description='The operation that you want to perform. Set the value to **ModifyMetricRuleBlackList**.', example='USER', position='Query'),
  scopeValue?: string(name='ScopeValue', description='The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.

Valid values of N: 1 to 10', example='["67****","78****"]', position='Query'),
}

model ModifyMetricRuleBlackListResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  count?: string(name='Count', example='1'),
  message?: string(name='Message', description='The number of blacklist policies that are modified.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='008773AE-1D86-3231-90F9-1AF7F808F9CE'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMetricRuleBlackListResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMetricRuleBlackListResponseBody(name='body'),
}

async function modifyMetricRuleBlackList(request: ModifyMetricRuleBlackListRequest): ModifyMetricRuleBlackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMetricRuleBlackList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMetricRuleTemplateRequest {
  alertTemplates?: [ 
    {
      escalations: {
        critical: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Critical'),
        info: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Info'),
        warn: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Warn'),
      }(name='Escalations'),
      category?: string(name='Category', description='The statistical period of monitoring data. Valid values of N: 1 to 200.

>  If the value is set to 300 seconds, the monitoring data is collected every 300 seconds. If the monitoring data is reported every 1 minute, the alert system calculates the average, maximum, and minimum values of the monitoring data of 5 minutes and checks whether the aggregated values exceed the threshold. To prevent unexpected alerts, we recommend that you set this parameter together with other parameters.', example='ecs'),
      metricName?: string(name='MetricName', description='The operation that you want to perform. Set the value to ModifyMetricRuleTemplate.', example='cpu_total'),
      namespace?: string(name='Namespace', description='The ID of the alert template.

For information about how to obtain the ID of an alert template, see [DescribeMetricRuleTemplateList](~~114982~~).', example='acs_ecs_dashboard'),
      period?: int32(name='Period', description='The dimension of the alert. It is an extended field. Valid values of N: 1 to 200.

For example, an alert template is applied to an application group, this parameter is set to `{"disk":"/"}`, and the MetricName parameter is set to `DiskUtilization`. In this case, the generated alert rule is applied to the root disk partition (`"/"`) of all instances in the application group to which the alert template is applied.

>  For more information about the values of extended fields, see [DescribeMetricRuleTemplateAttribute](~~114979~~).', example='60'),
      ruleName?: string(name='RuleName', description='The namespace of the cloud service. Valid values of N: 1 to 200.

For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~163515~~).', example='rule1'),
      selector?: string(name='Selector', description='The abbreviation of the service name. Valid values of N: 1 to 200. Valid values:

*   PolarDB: PolarDB
*   NewBGPDDoS: Anti-DDoS Pro
*   IoTDevice: IoT Platform
*   DRDS: PolarDB-X
*   VS: Video Surveillance System
*   AMQP: Alibaba Cloud Message Queue for AMQP
*   ADS: AnalyticDB
*   APIGateway: API Gateway
*   InternetSharedBandwidth: EIP Bandwidth Plan
*   CDN: Alibaba Cloud Content Delivery Network (CDN)
*   CEN: Cloud Enterprise Network (CEN)
*   DCDN: Dynamic Route for CDN (DCDN)
*   DDoS: Anti-DDoS
*   ECS: Elastic Compute Service (ECS)
*   DirectMail: Direct Mail
*   Elasticsearch: Elasticsearch
*   EMR: E-MapReduce (EMR)
*   ESS: Auto Scaling
*   FunctionCompute: Function Compute
*   RealtimeCompute: Realtime Compute for Apache Flink
*   GlobalAcceleration: Global Accelerator (GA)
*   Hbase: ApsaraDB for HBase
*   TSDB: Time Series Database (TSDB)
*   IPv6trans: IPv6 Translation Service
*   Kafka: Message Queue for Apache Kafka
*   Kubernetes: Container Service for Kubernetes (ACK)
*   KVstore: ApsaraDB for Redis
*   MNS: Message Service (MNS)
*   MongoDB: ApsaraDB for MongoDB
*   MQ: Message Queue
*   NAT: NAT Gateway
*   OpenAd: Open Ad
*   OpenSearch: Open Search
*   OSS: Object Storage Service (OSS)
*   PCDN: P2P CDN
*   petadata: HybridDB for MySQL
*   RDS: ApsaraDB RDS
*   SCDN: Secure CDN
*   SLB: Server Load Balancer (SLB)
*   SLS: Log Service
*   VideoLive: ApsaraVideo Live
*   VOD: ApsaraVideo VOD
*   EIP: Elastic IP Address (EIP)
*   VPN: VPN Gateway
*   AIRec: Artificial Intelligence Recommendation (AIRec)
*   GPDB: AnalyticDB for PostgreSQL
*   DBS: Database Backup (DBS)
*   SAG: Smart Access Gateway (SAG)
*   Memcache: ApsaraDB for Memcache
*   IOT_EDGE: Link IoT Edge
*   OCS: ApsaraDB for Memcache (previous version)
*   VPC: Express Connect
*   EHPC: Elastic High Performance Computing (E-HPC)
*   MPS: ApsaraVideo Media Processing (MPS)
*   ENS: Edge Node Service (ENS)
*   MaxCompute_Prepay: MaxCompute
*   IoT_Kubernetes: Edge Application Hosting
*   CMS: CloudMonitor
*   batchcomputenew: Batch Compute
*   HBaseUE: ApsaraDB for HBase Performance-enhanced Edition
*   UIS: Ultimate Internet Service (UIS)
*   nls: Intelligent Speech Interaction
*   ots: Tablestore
*   NAS: Apsara File Storage NAS
*   ECI: Elastic Container Instance (ECI)
*   OpenAPI: OpenAPI Explorer
*   pvtzpost: Alibaba Cloud DNS PrivateZone
*   blinkonk8s: Flink on Kubernetes
*   FunctionFlow: Serverless Workflow (SWF)
*   SMC: Server Migration Center (SMC)
*   ddosbgp: Anti-DDoS Origin
*   baas: Blockchain as a Service
*   privatelink: PrivateLink
*   cds: ApsaraDB for Cassandra
*   DDH: Dedicated Host
*   RocketMQ: Message Queue for Apache RocketMQ
*   ECC: Express Cloud Connect
*   hbaseserverless: ApsaraDB for HBase Serverless Edition
*   mns_tmp: Message Service
*   hdr: Hybrid Disaster Recovery (HDR)
*   hbr: Hybrid Backup Recovery (HBR)
*   ADB: AnalyticDB for MySQL V3.0
*   tag: Tag Service
*   GDB: Graph Database
*   WAF: Web Application Firewall (WAF)
*   hcs_sgw: Cloud Storage Gateway (CSG)
*   ipv6gateway: IPv6 Gateway
*   RDS_SAR: ApsaraDB Exclusive Host Group
*   learn: Machine Learning Platform for AI
*   ROS: Resource Orchestration Service (ROS)
*   OOS: Operation Orchestration Service (OOS)
*   bds: Data Synchronization for HBase
*   cfw: Cloud Firewall
*   ddosDip: Anti-DDoS Premium
*   datahub: DataHub
*   hologres: Hologres
*   ExpressConnect: Express Connect
*   dbfs: Database File System (DBFS)
*   clickhouse: ApsaraDB for ClickHouse
*   k8s: Container Service for Kubernetes (ACK)
*   DTS: Data Transmission Service (DTS)
*   AnycastEIP: Anycast Elastic IP Address
*   Lindorm: ApsaraDB for Lindorm
*   config: Cloud Config
*   spark: Databricks DataInsight (DDI)
*   serverless: Serverless App Engine (SAE)
*   alb: Application Load Balancer (ALB)
*   oceanbase: ApsaraDB for OceanBase
*   KMS: Key Management Service (KMS)
*   lvwang: Content Moderation
*   LinkVisual: LinkVisual
*   tair: ApsaraDB for Redis Enhanced Edition (Tair)
*   dlf: Data Lake Formation (DLF)
*   networkmonitor: Site Monitoring
*   pnc: Physical Network Change
*   AIS: Alibaba Cloud Infrastructure
*   cloudgame: Cloud Gaming Platform
*   RTC: Real-Time Communication
*   cloudbox: CloudBox
*   actiontrail: ActionTrail
*   cc: Cloud Connector
*   disk: Elastic Block Storage (EBS)
*   easygene: Genomics Computing Platform
*   cloudphone: Elastic Cloud Phone
*   BMS: Bare Metal Management Service
*   swas: Simple Application Server
*   AvailabilityMonitoring: Availability Monitoring of CloudMonitor', example='{"disk":"/"}'),
      webhook?: string(name='Webhook', description='The error message.', example='https://apiwebhook.hipac.cn/api/v1/alarm/aly/eregfeeferrtbnmkdszp'),
    }
  ](name='AlertTemplates', position='Query'),
  description?: string(name='Description', description='The description of the alert template.', example='ECS_template1', position='Query'),
  name?: string(name='Name', description='The name of the alert rule. Valid values of N: 1 to 200.', example='test123', position='Query'),
  restVersion: long(name='RestVersion', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='0', position='Query'),
  templateId: long(name='TemplateId', description='The callback URL. Valid values of N: 1 to 200.

The callback URL must be accessible over the Internet. CloudMonitor sends a POST request to push an alert notification to the callback URL that you specify. Only HTTP requests are supported.', example='123456', position='Query'),
}

model ModifyMetricRuleTemplateResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='9E07117F-F6AE-4F1C-81E8-36FBB4892235'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMetricRuleTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMetricRuleTemplateResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function modifyMetricRuleTemplate(request: ModifyMetricRuleTemplateRequest): ModifyMetricRuleTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMetricRuleTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMonitorGroupRequest {
  contactGroups?: string(name='ContactGroups', description='The alert groups that can receive alert notifications for the application group.', example='alarm_ecs_group', position='Query'),
  groupId: string(name='GroupId', description='The ID of the application group.', example='123456', position='Query'),
  groupName?: string(name='GroupName', description='The name of the application group.', example='ecs_group', position='Query'),
}

model ModifyMonitorGroupResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C85A2870-5DF4-4269-BC50-ECB5E4591A80'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model ModifyMonitorGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMonitorGroupResponseBody(name='body'),
}

async function modifyMonitorGroup(request: ModifyMonitorGroupRequest): ModifyMonitorGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMonitorGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyMonitorGroupInstancesRequest {
  groupId: long(name='GroupId', description='The ID of the region where the instance resides. Valid values of N: 1 to 2000.', example='12345', position='Query'),
  instances: [ 
    {
      category: string(name='Category', description='The ID of the instance. Valid values of N: 1 to 2000.', example='ECS'),
      instanceId: string(name='InstanceId', description='The name of the instance. Valid values of N: 1 to 2000.', example='i-a2d5q7pm12****'),
      instanceName: string(name='InstanceName', description='The ID of the application group.', example='HostName'),
      regionId: string(name='RegionId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='cn-hangzhou'),
    }
  ](name='Instances', position='Query'),
}

model ModifyMonitorGroupInstancesResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The operation that you want to perform. Set the value to ModifyMonitorGroupInstances.', example='success'),
  requestId?: string(name='RequestId', example='FEC7EDB3-9B08-4AC0-A42A-329F5D14B95A'),
  success?: boolean(name='Success', example='true'),
}

model ModifyMonitorGroupInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMonitorGroupInstancesResponseBody(name='body'),
}

async function modifyMonitorGroupInstances(request: ModifyMonitorGroupInstancesRequest): ModifyMonitorGroupInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyMonitorGroupInstances', 'POST', '/', 'json', false, 'json', request);
}

model ModifySiteMonitorRequest {
  address?: string(name='Address', description='The ID of the site monitoring task.', example='http://www.aliyun.com', position='Query'),
  alertIds?: string(name='AlertIds', description='The returned message.', example='49f7c317-7645-4cc9-94fd-ea42e122****', position='Query'),
  interval?: string(name='Interval', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1', position='Query'),
  intervalUnit?: string(name='IntervalUnit', description='The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.', example='ms', position='Query'),
  ispCities?: string(name='IspCities', description='The operation that you want to perform. Set the value to ModifySiteMonitor.', example='[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]', position='Query'),
  optionsJson?: string(name='OptionsJson', description='The detection points. The value is a JSON array. Example: `[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]`. The values of the `city` field indicate Beijing, Hangzhou, and Qingdao.

>  You can call the DescribeSiteMonitorISPCityList operation to query the detection points. For more information, see [DescribeSiteMonitorISPCityList](~~115045~~). If you leave this parameter empty, the system randomly selects three detection points.', example='{"time_out":5000}', position='Query'),
  taskId: string(name='TaskId', description='The name of the site monitoring task. The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (\\_).', example='2c8dbdf9-a3ab-46a1-85a4-f094965e****', position='Query'),
  taskName?: string(name='TaskName', description='The ID of the alert rule. You can call the DescribeMetricRuleList operation to query the IDs of existing alert rules in CloudMonitor. For more information, see [DescribeMetricRuleList](~~114941~~).', example='HanZhou_ECS2', position='Query'),
}

model ModifySiteMonitorResponseBody = {
  code?: string(name='Code', description='The URL or IP address that is monitored by the task.', example='200'),
  data?: {
    count?: int32(name='count', example='1'),
  }(name='Data'),
  message?: string(name='Message', description='The monitoring frequency. Valid values: 1, 5, 15, and 15000. Unit: milliseconds. Default value: 1.', example='successful'),
  requestId?: string(name='RequestId', description='The result of modifying the task.', example='68192f5d-0d45-4b98-9724-892813f86c71'),
  success?: string(name='Success', description='The ID of the request.', example='true'),
}

model ModifySiteMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySiteMonitorResponseBody(name='body'),
}

/**
  * The number of site monitoring tasks.
  *
 */
async function modifySiteMonitor(request: ModifySiteMonitorRequest): ModifySiteMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySiteMonitor', 'POST', '/', 'json', false, 'json', request);
}

model OpenCmsServiceRequest {
}

model OpenCmsServiceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='211206750270***'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E5A72B5B-4F44-438C-B68A-147FD5DC53A8'),
}

model OpenCmsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenCmsServiceResponseBody(name='body'),
}

/**
  * @deprecated
  *
 */
// Deprecated
async function openCmsService(request: OpenCmsServiceRequest): OpenCmsServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenCmsService', 'POST', '/', 'json', false, 'json', request);
}

model PutContactRequest {
  channels?: {
    aliIM?: string(name='AliIM', description='The TradeManager ID of the alert contact.

Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.', example='Jim'),
    dingWebHook?: string(name='DingWebHook', description='The webhook URL of the DingTalk chatbot.

Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.', example='https://oapi.dingtalk.com/robot/send?access_token=7d49515e8ebf21106a80a9cc4bb3d247771305d52fb15d6201234565****'),
    mail?: string(name='Mail', description='The email address of the alert contact. After you add or modify an email address, the recipient receives an email that contains an activation link. The system adds the recipient to the list of alert contacts only after the recipient activates the email address.

Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.', example='test@aliyun.com'),
    SMS?: string(name='SMS', description='The phone number of the alert contact. After you add or modify a phone number, the recipient receives a text message that contains an activation link. The system adds the recipient to the list of alert contacts only after the recipient activates the phone number.

Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.', example='1333333****'),
  }(name='Channels', position='Query'),
  contactName: string(name='ContactName', description='The name of the alert contact.', example='Alice', position='Query'),
  describe: string(name='Describe', description='The description of the alert contact.', example='ECS_Instance', position='Query'),
  lang?: string(name='Lang', description='The language in which the alert information is displayed. Valid values:

*   zh-cn: simplified Chinese
*   en: English

>  If you do not specify a value for this parameter, Cloud Monitor identifies the language of the alert information based on the region of your Alibaba Cloud account.', example='zh-cn', position='Query'),
}

model PutContactResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='181C406E-9DE4-484C-9C61-37AE9A1A12EE'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='true'),
}

model PutContactResponse = {
  headers: map[string]string(name='headers'),
  body: PutContactResponseBody(name='body'),
}

async function putContact(request: PutContactRequest): PutContactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutContact', 'POST', '/', 'json', false, 'json', request);
}

model PutContactGroupRequest {
  contactGroupName: string(name='ContactGroupName', description='The description of the alert contact group.', example='ECS_Group', position='Query'),
  contactNames?: [ string ](name='ContactNames', example='Alice', position='Query'),
  describe?: string(name='Describe', description='Specifies whether to enable the weekly report subscription feature. Valid values:

*   true: The weekly report subscription feature is enabled.
*   false: The weekly report subscription feature is disabled.

>  You can enable the weekly report subscription only for an Alibaba Cloud account that has at least five Elastic Compute Service (ECS) instances.', example='ECS_Alert_Group', position='Query'),
  enableSubscribed?: boolean(name='EnableSubscribed', description='The name of the alert contact. Valid values of N: 1 to 100.', example='true', position='Query'),
}

model PutContactGroupResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='Illegal parameters.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='B4E30DB6-F069-5D0B-A589-2A89F7D62A57'),
  success?: boolean(name='Success', description='This topic provides an example on how to create an alert contact group named `ECS_Group`.', example='true'),
}

model PutContactGroupResponse = {
  headers: map[string]string(name='headers'),
  body: PutContactGroupResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to PutContactGroup.
  *
 */
async function putContactGroup(request: PutContactGroupRequest): PutContactGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutContactGroup', 'POST', '/', 'json', false, 'json', request);
}

model PutCustomEventRequest {
  eventInfo: [ 
    {
      content: string(name='Content', description='The ID of the request.', example='IOException'),
      eventName: string(name='EventName', description='The time when the custom event occurred.

Format: `yyyyMMddTHHmmss.SSSZ`.

Valid values of N: 1 to 50.

>  You can also specify a UNIX timestamp. Example: 1552199984000. Unit: milliseconds.', example='myEvent'),
      groupId?: string(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='123456'),
      time?: string(name='Time', description='The content of the custom event. Valid values of N: 1 to 50.', example='20171013T170923.456+0800'),
    }
  ](name='EventInfo', position='Query'),
}

model PutCustomEventResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **PutCustomEvent**.', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='131DD9C8-9A32-4428-AD2E-4E3013B6E3A7'),
}

model PutCustomEventResponse = {
  headers: map[string]string(name='headers'),
  body: PutCustomEventResponseBody(name='body'),
}

async function putCustomEvent(request: PutCustomEventRequest): PutCustomEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutCustomEvent', 'POST', '/', 'json', false, 'json', request);
}

model PutCustomEventRuleRequest {
  contactGroups: string(name='ContactGroups', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='ECS_Group', position='Query'),
  effectiveInterval?: string(name='EffectiveInterval', description='The cycle that is used to aggregate monitoring data of the custom event. Unit: seconds. Set the value to an integral multiple of 60. Default value: 300.', example='00:00-23:59', position='Query'),
  emailSubject?: string(name='EmailSubject', description='The alert threshold.', position='Query'),
  eventName: string(name='EventName', description='The alert contact group that receives alert notifications. Separate multiple contact groups with commas (,).', example='HostDown', position='Query'),
  groupId: string(name='GroupId', description='The ID of the alert rule.

>  You can specify an existing ID to modify the corresponding alert rule or specify a new ID to create an alert rule.', example='7378****', position='Query'),
  level: string(name='Level', description='The HTTP status code.

>  The value 200 indicates that the call was successful.', example='CRITICAL', position='Query'),
  period?: string(name='Period', description='The subject of the alert notification email.', example='60', position='Query'),
  ruleId: string(name='RuleId', description='The name of the alert rule.', example='CustomRuleId1', position='Query'),
  ruleName: string(name='RuleName', description='The name of the custom event. For more information about how to obtain the event name, see [DescribeCustomEventAttribute](~~115262~~).', example='CustomeRule', position='Query'),
  threshold: string(name='Threshold', description='The level of the alert. Valid values:

*   CRITICAL: critical issue
*   WARN: warning
*   INFO: information', example='99', position='Query'),
  webhook?: string(name='Webhook', description='The time period during which the alert rule is effective. Valid values: 00:00 to 23:59.', example='https://www.aliyun.com', position='Query'),
}

model PutCustomEventRuleResponseBody = {
  code?: string(name='Code', description='The error message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The request has failed due to a temporary failure of the server.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='AD5DCD82-BD1C-405F-BAED-32302DE9F498'),
  success?: boolean(name='Success', description='Before you call this operation, call the PutCustomEvent operation to report the monitoring data of the custom event. For more information, see [PutCustomEvent](~~115012~~).', example='true'),
}

model PutCustomEventRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutCustomEventRuleResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to PutCustomEventRule.
  *
 */
async function putCustomEventRule(request: PutCustomEventRuleRequest): PutCustomEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutCustomEventRule', 'POST', '/', 'json', false, 'json', request);
}

model PutCustomMetricRequest {
  metricList: [ 
    {
      dimensions: string(name='Dimensions', description='The operation that you want to perform. Set the value to **PutCustomMetric**.', example='{"sampleName1":"value1","sampleName2":"value2"}'),
      groupId: string(name='GroupId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='12345'),
      metricName: string(name='MetricName', description='The type of the reported data. Valid values of N: 1 to 21. Valid values:

*   0: reports raw data
*   1: reports aggregate data

>  We recommend that you report aggregate data in both the aggregation periods of 60s and 300s. Otherwise, you cannot query monitoring data in a time span that is more than seven days.', example='cpu_total'),
      period?: string(name='Period', description='The aggregation period. Valid values of N: 1 to 21. Unit: seconds. Valid values: 60 and 300.

>  If the MetricList.N.Type parameter is set to 1, the MetricList.N.Period parameter is required.', example='60'),
      time?: string(name='Time', description='The collection of metric values. Valid values of N: 1 to 21.

>  If the MetricList.N.Type parameter is set to 0, the keys in this parameter must be set to the specified value. CloudMonitor aggregates raw data in each aggregation period to generate multiple statistical values, such as the maximum value, the count, and the total value.', example='1508136760000'),
      type: string(name='Type', description='The timestamp when the metric data is generated. Valid values of N: 1 to 21. The timestamp can be in one of the following formats:

*   The UTC timestamp that is in the YYYY-MM-DDThh:mm:ssZ format. Example: 20171012T132456.888+0800.
*   The UNIX timestamp of the LONG type. Example: 1508136760000.', example='0'),
      values: string(name='Values', description='The ID of the request.', example='{"value":10.5}'),
    }
  ](name='MetricList', position='Query'),
}

model PutCustomMetricResponseBody = {
  code?: string(name='Code', description='The name of the metric. Valid values of N: 1 to 21. For more information, see [Appendix 1: Metrics](~~163515~~).', example='200'),
  message?: string(name='Message', example='The request has failed due to a temporary failure of the server.'),
  requestId?: string(name='RequestId', example='05B36C2C-5F6E-48D5-8B41-CE36DD7EE8E0'),
}

model PutCustomMetricResponse = {
  headers: map[string]string(name='headers'),
  body: PutCustomMetricResponseBody(name='body'),
}

/**
  * The dimensions that specify the resources whose monitoring data you want to query. Valid values of N: 1 to 21.
  * Set the value to a collection of key-value pairs. Format:`{"Key":"Value"}`.
  * The key or value must be 1 to 64 bytes in length. Excessive characters are truncated.
  * The key or value can contain letters, digits, periods (.), hyphens (-), underscores (\\_), forward slashes (/), and backslashes (\\\\).
  * >  Dimensions must be formatted as a JSON string in a specified order.
  *
 */
async function putCustomMetric(request: PutCustomMetricRequest): PutCustomMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutCustomMetric', 'POST', '/', 'json', false, 'json', request);
}

model PutCustomMetricRuleRequest {
  comparisonOperator: string(name='ComparisonOperator', description='The HTTP status code.

>  The value 200 indicates that the call was successful.', example='>=', position='Query'),
  contactGroups: string(name='ContactGroups', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='ECS_Group', position='Query'),
  effectiveInterval?: string(name='EffectiveInterval', description='The mute period during which notifications are not repeatedly sent for an alert. Unit: seconds. Default value: 86400. The default value indicates one day.

>  Only one alert notification is sent during each mute period even if the metric value consecutively exceeds the alert threshold several times.', example='00:00-23:59', position='Query'),
  emailSubject?: string(name='EmailSubject', description='The threshold of the metric value.', position='Query'),
  evaluationCount: int32(name='EvaluationCount', description='The method that is used to calculate the metric values that trigger alerts.', example='3', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the alert rule.

>  You can specify an existing ID to modify the corresponding alert rule or specify a new ID to create an alert rule.', example='7378****', position='Query'),
  level: string(name='Level', description='The consecutive number of times for which the metric value is measured before an alert is triggered.', example='CRITICAL', position='Query'),
  metricName: string(name='MetricName', description='The custom monitoring data to which the alert rule applies. The value includes the application group ID to which the custom monitoring data belongs and the dimension to which the metric belongs.', example='cpu_total', position='Query'),
  period?: string(name='Period', description='The subject of the alert notification email.', example='300', position='Query'),
  resources: string(name='Resources', description='The alert group that receives alert notifications. Separate multiple alert groups with commas (,).', example='[{"groupId":7378****,"dimension":"instanceId=i-hp3543t5e4sudb3s****"}]', position='Query'),
  ruleId: string(name='RuleId', description='The name of the alert rule.', example='MyRuleId1', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the metric.

>  For more information about how to obtain the metric name, see [DescribeCustomMetricList](~~115005~~).', example='CpuUsage', position='Query'),
  silenceTime?: int32(name='SilenceTime', description='The cycle that is used to aggregate custom monitoring data. Unit: seconds. Set the value to an integral multiple of 60. The original reporting cycle of custom monitoring data is used by default.', example='86400', position='Query'),
  statistics: string(name='Statistics', description='The comparison operator before the threshold. Valid values:

*   `>=`
*   `=`
*   `<=`
*   `>`
*   `<`
*   `!=`', example='Average', position='Query'),
  threshold: string(name='Threshold', description='The level of the alert. Valid values:

*   CRITICAL
*   WARN
*   INFO', example='90', position='Query'),
  webhook?: string(name='Webhook', description='The time period during which the alert rule is effective. Valid values: 00:00 to 23:59.', example='https://www.aliyun.com', position='Query'),
}

model PutCustomMetricRuleResponseBody = {
  code?: string(name='Code', description='The returned message. If the call was successful, the return value is null. If the call failed, an error message is returned.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='ComparisonOperator is mandatory for this action.'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='65D50468-ECEF-48F1-A6E1-D952E89D9432'),
  success?: boolean(name='Success', description='Before you call this operation, call the PutCustomMetric operation to report custom monitoring data. For more information, see [PutCustomMetric](~~115004~~).', example='true'),
}

model PutCustomMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutCustomMetricRuleResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to PutCustomMetricRule.
  *
 */
async function putCustomMetricRule(request: PutCustomMetricRuleRequest): PutCustomMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutCustomMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model PutEventRuleRequest {
  description?: string(name='Description', description='The operation that you want to perform. Set the value to **PutEventRule**.', position='Query'),
  eventPattern: [ 
    {
      customFilters?: string(name='CustomFilters', description='The SQL condition that is used to filter events. If the content of an event meets the specified SQL condition, an alert is automatically triggered.

>  The syntax of SQL event filtering is consistent with the query syntax of Log Service.', example='Stopping'),
      eventTypeList?: [ string ](name='EventTypeList', example='Exception'),
      levelList?: [ string ](name='LevelList', example='CRITICAL'),
      nameList?: [ string ](name='NameList', example='Agent_Status_Stopped'),
      product: string(name='Product', description='The name of the event-triggered alert rule.', example='ecs'),
      SQLFilter?: string(name='SQLFilter', description='The description of the event-triggered alert rule.', example='192.168.XX.XX and Executed'),
      statusList?: [ string ](name='StatusList', example='Failed'),
    }
  ](name='EventPattern', position='Query'),
  eventType?: string(name='EventType', description='The type of the cloud service. Valid values of N: 1 to 50.

>  You can call the DescribeSystemEventMetaList operation to query the cloud services that support event-triggered alerts. For more information, see [DescribeSystemEventMetaList](~~114972~~).', example='SYSTEM', position='Query'),
  groupId?: string(name='GroupId', description='The type of the event-triggered alert rule. Valid values of N: 1 to 50. Valid values:

*   StatusNotification: fault notifications
*   Exception: exceptions
*   Maintenance: O\\&M
*   \\*: all types', example='7378****', position='Query'),
  ruleName: string(name='RuleName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='myRuleName', position='Query'),
  silenceTime?: long(name='SilenceTime', description='The number of event-triggered alert rules that were created or modified.', example='86400', position='Query'),
  state?: string(name='State', description='The status of the event-triggered alert rule. Valid values:

*   ENABLED: enabled
*   DISABLED: disabled', example='ENABLED', position='Query'),
}

model PutEventRuleResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  data?: string(name='Data', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1'),
  message?: string(name='Message', description='The level of the event-triggered alert rule. Valid values of N: 1 to 50. Valid values:

*   CRITICAL: critical
*   WARN: warning
*   INFO: information
*   \\*: all levels', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', example='0B47C47B-E68A-4429-BB23-370E91889C7D'),
  success?: boolean(name='Success', example='true'),
}

model PutEventRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutEventRuleResponseBody(name='body'),
}

/**
  * The ID of the application group to which the event-triggered alert rule belongs.
  *
 */
async function putEventRule(request: PutEventRuleRequest): PutEventRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutEventRule', 'POST', '/', 'json', false, 'json', request);
}

model PutEventRuleTargetsRequest {
  contactParameters?: [ 
    {
      contactGroupName?: string(name='ContactGroupName', description='The operation that you want to perform. Set the value to **PutEventRuleTargets**.'),
      id?: string(name='Id', description='The HTTP request method. Valid values of N: 1 to 5.

Valid values: GET and POST.', example='2'),
      level?: string(name='Level', description='The name of the event-triggered alert rule.', example='3'),
    }
  ](name='ContactParameters', position='Query'),
  fcParameters?: [ 
    {
      functionName?: string(name='FunctionName', description='The number of resources that failed to be created or modified.', example='fc-test'),
      id?: string(name='Id', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='1'),
      region?: string(name='Region', description='The MNS topic.', example='cn-hangzhou'),
      serviceName?: string(name='ServiceName', description='The region where Log Service is deployed. Valid values of N: 1 to 5.', example='fc-test'),
    }
  ](name='FcParameters', position='Query'),
  mnsParameters?: [ 
    {
      id?: string(name='Id', description='The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.', example='3'),
      queue?: string(name='Queue', description='The version of the API.', example='queue1'),
      region?: string(name='Region', description='The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.', example='cn-hangzhou'),
      topic?: string(name='Topic', description='The Alibaba Cloud Resource Name (ARN) of the resource. Valid values of N: 1 to 5.

Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:

*   Service: the code of a cloud service
*   Region: the region ID
*   Account: the ID of an Alibaba Cloud account
*   ResourceType: the resource type
*   ResourceId: the resource ID', example='topic_sample'),
    }
  ](name='MnsParameters', position='Query'),
  openApiParameters?: [ 
    {
      action?: string(name='Action', description='The ID of the recipient that receives alert notifications sent by an API callback.', example='PutLogs'),
      arn?: string(name='Arn', description='The error message.', example='acs:log:cn-hangzhou::project/cms-log-mon***/logstore/cxxxx***'),
      id?: string(name='Id', description='The region where Function Compute is deployed. Valid values of N: 1 to 5.', example='3'),
      jsonParams?: string(name='JsonParams', description='The region where Message Service (MNS) is deployed. Valid values of N: 1 to 5.', example='{"customField1":"value1","customField2":"$.name"}'),
      product?: string(name='Product', description='The name of the Log Service project. Valid values of N: 1 to 5.', example='log'),
      region?: string(name='Region', description='The callback URL. Valid values of N: 1 to 5.', example='cn-hangzhou'),
      role?: string(name='Role', description='This parameter is returned if the specified alert contact groups in the request failed to be created or modified.', example='MyRole'),
      version?: string(name='Version', description='The name of the alert contact group.', example='2019-01-01'),
    }
  ](name='OpenApiParameters', position='Query'),
  ruleName: string(name='RuleName', description='The name of the protocol. Valid values of N: 1 to 5. Valid values:

*   http
*   telnet
*   ping', example='testEventRule', position='Query'),
  slsParameters?: [ 
    {
      id?: string(name='Id', description='The name of the alert contact group. Valid values of N: 1 to 5.', example='5'),
      logStore?: string(name='LogStore', description='The name of the Log Service Logstore. Valid values of N: 1 to 5.', example='testlogstore'),
      project?: string(name='Project', description='The parameters of the alert callback. The parameters are in the JSON format.', example='testproject'),
      region?: string(name='Region', description='The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.', example='cn-hangzhou'),
    }
  ](name='SlsParameters', position='Query'),
  webhookParameters?: [ 
    {
      id?: string(name='Id', description='The alert notification methods. Valid values of N: 1 to 5. Valid values:

4: Alert notifications are sent by using DingTalk chatbots and emails.', example='4'),
      method?: string(name='Method', description='The region where the resource resides.', example='GET'),
      protocol?: string(name='Protocol', description='The ID of the recipient.', example='http'),
      url?: string(name='Url', description='The name of the function. Valid values of N: 1 to 5.', example='http://www.aliyun.com'),
    }
  ](name='WebhookParameters', position='Query'),
}

model PutEventRuleTargetsResponseBody = {
  code?: string(name='Code', description='The name of the API operation.', example='200'),
  failedContactParameters?: {
    contactParameter?: [ 
    {
      contactGroupName?: string(name='ContactGroupName', description='The ID of the request.'),
      id?: int32(name='Id', example='2'),
      level?: string(name='Level', example='3'),
    }
  ](name='ContactParameter')
  }(name='FailedContactParameters', description='The name of the queue. Valid values of N: 1 to 5.'),
  failedFcParameters?: {
    fcParameter?: [ 
    {
      functionName?: string(name='FunctionName', example='functionTest1'),
      id?: int32(name='Id', example='1'),
      region?: string(name='Region', example='cn-hangzhou'),
      serviceName?: string(name='ServiceName', example='serviceTest1'),
    }
  ](name='FcParameter')
  }(name='FailedFcParameters'),
  failedMnsParameters?: {
    mnsParameter?: [ 
    {
      id?: int32(name='Id', example='2'),
      queue?: string(name='Queue', example='testQueue'),
      region?: string(name='Region', example='cn-hangzhou'),
    }
  ](name='MnsParameter')
  }(name='FailedMnsParameters'),
  failedParameterCount?: string(name='FailedParameterCount', description='The name of the Function Compute service. Valid values of N: 1 to 5.', example='2'),
  message?: string(name='Message', description='The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The alert notification methods. Valid values:

4: Alert notifications are sent by using DingTalk chatbots and emails.', example='409C64DA-CF14-45DF-B463-471C790DD15A'),
  success?: boolean(name='Success', description='The name of the role.', example='true'),
}

model PutEventRuleTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: PutEventRuleTargetsResponseBody(name='body'),
}

async function putEventRuleTargets(request: PutEventRuleTargetsRequest): PutEventRuleTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutEventRuleTargets', 'POST', '/', 'json', false, 'json', request);
}

model PutExporterOutputRequest {
  configJson: string(name='ConfigJson', description='The configuration set for exporting monitoring data. It is a JSON object string. The string must include the following fields:

*   endpoint: the endpoint of Log Service.
*   project: the Log Service project to which monitoring data is exported.
*   logstore: the Log Service Logstore to which the monitoring data is exported.
*   ak: the AccessKey ID.
*   as: the AccessKey secret.', example='{ "endpoint": "http://cn-qingdao-share.log.aliyuncs.com", "project": "exporter", "logstore": "exporter","ak": "LTAIp*******", "userId": "17754********", "as": "TxHwuJ8yAb3AU******"}', position='Query'),
  desc?: string(name='Desc', description='The description of the configuration set.', example='Export CPU metrics', position='Query'),
  destName: string(name='DestName', description='The name of the configuration set.', example='exporterConfig', position='Query'),
  destType?: string(name='DestType', description='The service to which the monitoring data is exported.', example='sls', position='Query'),
}

model PutExporterOutputResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6A5F022D-AC7C-460E-94AE-B9E75083D027'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. true: The request was successful. false: The request failed.', example='true'),
}

model PutExporterOutputResponse = {
  headers: map[string]string(name='headers'),
  body: PutExporterOutputResponseBody(name='body'),
}

/**
  * > The monitoring data can be exported only to Log Service. More services will be supported in the future.
  *
 */
async function putExporterOutput(request: PutExporterOutputRequest): PutExporterOutputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutExporterOutput', 'POST', '/', 'json', false, 'json', request);
}

model PutExporterRuleRequest {
  describe?: string(name='Describe', description='The description of the data export rule.', example='Export CPU metrics', position='Query'),
  dstNames: [ string ](name='DstNames', description='The destination to which the data is exported. Valid values of N: 1 to 20.', example='distName1', position='Query'),
  metricName?: string(name='MetricName', description='The name of the metric.

> 

For more information, see [Appendix 1: Metrics](~~163515~~).', example='cpu_total', position='Query'),
  namespace?: string(name='Namespace', description='The namespace of the cloud service.

> For more information, see [Appendix 1: Metrics](~~163515~~).', example='acs_ecs_dashboard', position='Query'),
  ruleName?: string(name='RuleName', description='The name of the rule.

> If the specified rule exists, the existing rule is modified. Otherwise, a rule is created.', example='MyRuleName', position='Query'),
  targetWindows?: string(name='TargetWindows', description='The time window of the exported data. Unit: seconds.

> 

*   Separate multiple time windows with commas (,).

*   Data in a time window of less than 60 seconds cannot be exported.', example='60,300', position='Query'),
}

model PutExporterRuleResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

> The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The returned message. If the request was successful, "successful" is returned. If the request failed, an error message is returned.', example='success'),
  requestId?: string(name='RequestId', description='The request ID.', example='461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true
*   false', example='true'),
}

model PutExporterRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutExporterRuleResponseBody(name='body'),
}

async function putExporterRule(request: PutExporterRuleRequest): PutExporterRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutExporterRule', 'POST', '/', 'json', false, 'json', request);
}

model PutGroupMetricRuleRequest {
  escalations?: {
    critical: {
        comparisonOperator?: string(name='ComparisonOperator', description='The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The interval at which the alert rule is executed. Unit: seconds.

>  We recommend that you set the interval to the data aggregation period. If the interval is shorter than the data aggregation period, alerts cannot be triggered due to insufficient data.', example='Average'),
        threshold?: string(name='Threshold', description='The name of the cloud service. Valid values:

*   PolarDB: PolarDB
*   NewBGPDDoS: Anti-DDoS Pro
*   IoTDevice: IoT Platform
*   DRDS: PolarDB-X
*   VS: Video Surveillance System
*   AMQP: Alibaba Cloud Message Queue for AMQP
*   ADS: AnalyticDB
*   APIGateway: API Gateway
*   InternetSharedBandwidth: EIP Bandwidth Plan
*   CDN: Alibaba Cloud Content Delivery Network (CDN)
*   CEN: Cloud Enterprise Network (CEN)
*   DCDN: Dynamic Route for CDN (DCDN)
*   DDoS: Anti-DDoS
*   ECS: Elastic Compute Service (ECS)
*   DirectMail: Direct Mail
*   Elasticsearch: Elasticsearch
*   EMR: E-MapReduce (EMR)
*   ESS: Auto Scaling
*   FunctionCompute: Function Compute
*   RealtimeCompute: Realtime Compute for Apache Flink
*   GlobalAcceleration: Global Accelerator (GA)
*   Hbase: ApsaraDB for HBase
*   TSDB: Time Series Database (TSDB)
*   IPv6trans: IPv6 Translation Service
*   Kafka: Message Queue for Apache Kafka
*   Kubernetes: Container Service for Kubernetes (ACK)
*   KVstore: ApsaraDB for Redis
*   MNS: Message Service (MNS)
*   MongoDB: ApsaraDB for MongoDB
*   MQ: Message Queue
*   NAT: NAT Gateway
*   OpenAd: Open Ad
*   OpenSearch: Open Search
*   OSS: Object Storage Service (OSS)
*   PCDN: P2P CDN
*   petadata: HybridDB for MySQL
*   RDS: ApsaraDB RDS
*   SCDN: Secure CDN
*   SLB: Server Load Balancer (SLB)
*   SLS: Log Service
*   VideoLive: ApsaraVideo Live
*   VOD: ApsaraVideo VOD
*   EIP: Elastic IP Address (EIP)
*   VPN: VPN Gateway
*   AIRec: Artificial Intelligence Recommendation (AIRec)
*   GPDB: AnalyticDB for PostgreSQL
*   DBS: Database Backup (DBS)
*   SAG: Smart Access Gateway (SAG)
*   Memcache: ApsaraDB for Memcache
*   IOT_EDGE: Link IoT Edge
*   OCS: ApsaraDB for Memcache (previous version)
*   VPC: Express Connect
*   EHPC: Elastic High Performance Computing (E-HPC)
*   MPS: ApsaraVideo Media Processing (MPS)
*   ENS: Edge Node Service (ENS)
*   MaxCompute_Prepay: MaxCompute
*   IoT_Kubernetes: Edge Application Hosting
*   CMS: CloudMonitor
*   batchcomputenew: Batch Compute
*   HBaseUE: ApsaraDB for HBase Performance-enhanced Edition
*   UIS: Ultimate Internet Service (UIS)
*   nls: Intelligent Speech Interaction
*   ots: Tablestore
*   NAS: Apsara File Storage NAS
*   ECI: Elastic Container Instance (ECI)
*   OpenAPI: OpenAPI Explorer
*   pvtzpost: Alibaba Cloud DNS PrivateZone
*   blinkonk8s: Flink on Kubernetes
*   FunctionFlow: Serverless Workflow (SWF)
*   SMC: Server Migration Center (SMC)
*   ddosbgp: Anti-DDoS Origin
*   baas: Blockchain as a Service
*   privatelink: PrivateLink
*   cds: ApsaraDB for Cassandra
*   DDH: Dedicated Host
*   RocketMQ: Message Queue for Apache RocketMQ
*   ECC: Express Cloud Connect (ECC)
*   hbaseserverless: ApsaraDB for HBase Serverless Edition
*   mns_tmp: Message Service
*   hdr: Hybrid Disaster Recovery (HDR)
*   hbr: Hybrid Backup Recovery (HBR)
*   ADB: AnalyticDB for MySQL V3.0
*   tag: Tag Service
*   GDB: Graph Database
*   WAF: Web Application Firewall (WAF)
*   hcs_sgw: Cloud Storage Gateway (CSG)
*   ipv6gateway: IPv6 Gateway
*   RDS_SAR: ApsaraDB Exclusive Host Group
*   learn: Machine Learning Platform for AI
*   ROS: Resource Orchestration Service (ROS)
*   OOS: Operation Orchestration Service (OOS)
*   bds: Data Synchronization for HBase
*   cfw: Cloud Firewall
*   ddosDip: Anti-DDoS Premium
*   datahub: DataHub
*   hologres: Hologres
*   ExpressConnect: Express Connect
*   dbfs: Database File System (DBFS)
*   clickhouse: ApsaraDB for ClickHouse
*   k8s: Container Service for Kubernetes (ACK)
*   DTS: Data Transmission Service (DTS)
*   AnycastEIP: Anycast Elastic IP Address
*   Lindorm: Lindorm
*   config: Cloud Config
*   spark: Databricks DataInsight (DDI)
*   serverless: Serverless App Engine (SAE)
*   alb: Application Load Balancer (ALB)
*   oceanbase: ApsaraDB for OceanBase
*   KMS: Key Management Service (KMS)
*   lvwang: Content Moderation
*   LinkVisual: LinkVisual
*   tair: ApsaraDB for Redis Enhanced Edition (Tair)
*   dlf: Data Lake Formation (DLF)
*   networkmonitor: Site Monitoring
*   pnc: Physical Network Change
*   AIS: Alibaba Cloud Infrastructure
*   cloudgame: Cloud Gaming Platform
*   RTC: Real-Time Communication
*   cloudbox: CloudBox
*   actiontrail: ActionTrail
*   cc: Cloud Connector
*   disk: Elastic Block Storage (EBS)
*   easygene: Genomics Computing Platform
*   cloudphone: Elastic Cloud Phone
*   BMS: Bare Metal Management Service
*   swas: Simple Application Server
*   AvailabilityMonitoring: Availability Monitoring of CloudMonitor', example='90'),
        times?: int32(name='Times', description='The first-level dimension of the alert rule in the application group.

Set the value to a set of key-value pairs, for example, `userId:120886317861****` or `instanceId:i-m5e1qg6uo38rztr4****`.', example='3'),
    }(name='Critical'),
    info: {
        comparisonOperator?: string(name='ComparisonOperator', description='The time period during which the alert rule is effective.', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The mute period during which new alerts are not sent even if the trigger conditions are met.

Unit: seconds. Default value: 86400.', example='Average'),
        threshold?: string(name='Threshold', description='The alert contact group.', example='90'),
        times?: int32(name='Times', description='The statistical methods for Critical-level alerts. Separate multiple statistical methods with commas (,). Valid values:

*   Average: the average value
*   Minimum: the minimum value
*   Maximum: the maximum value', example='3'),
    }(name='Info'),
    warn: {
        comparisonOperator?: string(name='ComparisonOperator', description='The tag value of the alert rule.', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='Average'),
        threshold?: string(name='Threshold', description='The method that is used to handle alerts when no monitoring data is found. Valid values:

*   KEEP_LAST_STATE (default value): No operation is performed.
*   INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
*   OK: The status is considered normal.', example='90'),
        times?: int32(name='Times', description='The tag key of the alert rule.', example='3'),
    }(name='Warn'),
  }(name='Escalations', position='Query'),
  category?: string(name='Category', description='The operation that you want to perform. Set the value to **PutGroupMetricRule**.', example='ECS', position='Query'),
  contactGroups?: string(name='ContactGroups', description='The ID of the alert rule.

*   When you create an alert rule for the application group, enter the ID of the alert rule.
*   When you modify a specified alert rule in the application group, you must obtain the ID of the alert rule. For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='ECS_Group', position='Query'),
  dimensions?: string(name='Dimensions', description='The error message.', example='[{"instanceId":"i-m5e1qg6uo38rztr4****"}]', position='Query'),
  effectiveInterval?: string(name='EffectiveInterval', description='The ID of the application group.

For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](~~115032~~).', example='05:31-23:59', position='Query'),
  emailSubject?: string(name='EmailSubject', description='The second-level or third-level dimension of the alert rule in the application group.

Set the value to a set of key-value pairs, for example, `port:80` or `/dev/xvda:d-m5e6yphgzn3aprwu****`.

If the first-level dimension of the alert rule is `instanceId:i-m5e1qg6uo38rztr4****`, its second-level dimension is the `/dev/xvda:d-m5e6yphgzn3aprwu****` disk in the instance.', position='Query'),
  extraDimensionJson?: string(name='ExtraDimensionJson', description='The name of the metric.

For information about how to obtain the name of a metric, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~163515~~).', example='{"/dev/xvda":"d-m5e6yphgzn3aprwu****"}', position='Query'),
  groupId: string(name='GroupId', description='The statistical methods for Warn-level alerts. Separate multiple statistical methods with commas (,). Valid values:

*   Average: the average value
*   Minimum: the minimum value
*   Maximum: the maximum value', example='17285****', position='Query'),
  interval?: string(name='Interval', description='The callback URL.

The callback URL must be accessible over the Internet. CloudMonitor sends a POST request to push an alert notification to the callback URL that you specify. Only HTTP requests are supported.', example='60', position='Query'),
  labels?: [ 
    {
      key?: string(name='Key', description='The name of the alert rule.

*   When you create an alert rule for the application group, enter the name of the alert rule.
*   When you modify a specified alert rule in the application group, you must obtain the name of the alert rule. For information about how to obtain the name of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='key1'),
      value?: string(name='Value', description='The ID of the alert rule.', example='value1'),
    }
  ](name='Labels', position='Query'),
  metricName: string(name='MetricName', description='The comparison operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle', example='cpu_total', position='Query'),
  namespace: string(name='Namespace', description='The threshold for Critical-level alerts.', example='acs_ecs_dashboard', position='Query'),
  noDataPolicy?: string(name='NoDataPolicy', description='The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.', example='KEEP_LAST_STATE', position='Query'),
  noEffectiveInterval?: string(name='NoEffectiveInterval', description='The threshold for Info-level alerts.', example='00:00-05:30', position='Query'),
  period?: string(name='Period', description='The threshold for Warn-level alerts.', example='60', position='Query'),
  ruleId: string(name='RuleId', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='123456', position='Query'),
  ruleName: string(name='RuleName', description='The namespace of the cloud service.

For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](~~98846~~) or [Appendix 1: Metrics](~~163515~~).', example='Rule_01', position='Query'),
  silenceTime?: int32(name='SilenceTime', description='The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.', example='86400', position='Query'),
  webhook?: string(name='Webhook', description='The aggregation period of the metric data.

Set the `Period` parameter to an integral multiple of 60. Unit: seconds. Default value: 300.', example='https://www.aliyun.com', position='Query'),
}

model PutGroupMetricRuleResponseBody = {
  code?: string(name='Code', description='The statistical methods for Info-level alerts. Separate multiple statistical methods with commas (,). Valid values:

*   Average: the average value
*   Minimum: the minimum value
*   Maximum: the maximum value', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='The Request is not authorization.'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D'),
  result?: {
    ruleId?: string(name='RuleId', example='123456'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model PutGroupMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutGroupMetricRuleResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function putGroupMetricRule(request: PutGroupMetricRuleRequest): PutGroupMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutGroupMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model PutHybridMonitorMetricDataRequest {
  metricList: [ 
    {
      labels?: [ 
        {
          key?: string(name='Key', description='The position of the error message in the array.', example='IP'),
          value?: string(name='Value', description='The name of the namespace.

For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](~~428880~~).', example='192.168.XX.XX'),
        }
      ](name='Labels', example='app、ip、hostName等标识信息'),
      name: string(name='Name', description='The operation that you want to perform. Set the value to **PutHybridMonitorMetricData**.', example='CPU_Usage', minLength=1, maxLength=128),
      ts?: long(name='TS', description='The value of the metric.

Valid values of N: 1 to 100.

The value is an integer or a floating-point number.', example='1640776119473'),
      value: string(name='Value', description='The tag key of the metric.

Valid values of N: 1 to 100.

The key can contain letters, digits, and underscores (\\_). The key must start with a letter or an underscore (\\_).

>  You must specify a key and a value for a tag at the same time.', example='90'),
    }
  ](name='MetricList', position='Query'),
  namespace: string(name='Namespace', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='default-aliyun', position='Query'),
}

model PutHybridMonitorMetricDataResponseBody = {
  code?: string(name='Code', description='The details of the invalid parameters.

If the request parameters that you set are invalid, the details of the invalid parameters are displayed.', example='200'),
  errorDetail?: [ 
    {
      errorMessage?: string(name='ErrorMessage', example='label name :123 not match [a-zA-Z_][a-zA-Z0-9_]*'),
      index?: long(name='Index', example='0'),
    }
  ](name='ErrorDetail', description='For more information about common request parameters, see [Common parameters](~~199331~~).'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5DB1CBCA-D14A-55FA-814F-B4DBD9735F68'),
}

model PutHybridMonitorMetricDataResponse = {
  headers: map[string]string(name='headers'),
  body: PutHybridMonitorMetricDataResponseBody(name='body'),
}

/**
  * The tag value of the metric.
  * Valid values of N: 1 to 100.
  * >  You must specify a key and a value for a tag at the same time.
  *
 */
async function putHybridMonitorMetricData(request: PutHybridMonitorMetricDataRequest): PutHybridMonitorMetricDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutHybridMonitorMetricData', 'POST', '/', 'json', false, 'json', request);
}

model PutLogMonitorRequest {
  aggregates: [ 
    {
      alias: string(name='Alias', description='The name of the Log Service project.', example='Count'),
      fieldName: string(name='FieldName', description='The alias of the aggregate function. Valid values of N: 1 to 10.', example='sourceCount'),
      function: string(name='Function', description='The ID of the log monitoring metric.', example='count'),
    }
  ](name='Aggregates', position='Query'),
  groupId?: string(name='GroupId', description='The ID of the log monitoring metric.', example='7301****', position='Query'),
  groupbys?: [ 
    {
      alias?: string(name='Alias', description='The function that is used to aggregate the monitoring data of logs within an aggregation period. Valid values of N: 1 to 10. Valid values:

*   count: counts the number.
*   sum: calculates the total value.
*   avg: calculates the average value.
*   max: selects the maximum value.
*   min: selects the minimum value.
*   countps: calculates the counted number of the specified field divided by the total number of seconds of the aggregation period.
*   sumps: calculates the total value of the specified field divided by the total number of seconds of the aggregation period.
*   distinct: counts the number of logs where the specified field appears within the aggregation period.', example='CPUUtilization'),
      fieldName?: string(name='FieldName', description='The ID of the application group.', example='cpu'),
    }
  ](name='Groupbys', position='Query'),
  logId?: string(name='LogId', description='The HTTP status code.

>  The status code 200 indicates that the call is successful.', example='16****', position='Query'),
  metricExpress?: string(name='MetricExpress', description='The extended field. The extended field allows you to perform basic operations on the aggregation results.

For example, if you have calculated TotalNumber and 5XXNumber by aggregating the data. TotalNumber indicates the total number of HTTP requests, and 5XXNumber indicates the number of HTTP requests whose status code is greater than 499. You can calculate the server error rate by adding the following formula to the extended field: 5XXNumber/TotalNumber\\*100.

JSON format: {"extend":{"errorPercent":"5XXNumber/TotalNumber\\*100"}}. Description:

*   extend: required.
*   errorPercent: the alias of the field generated in the calculation result. You can specify the alias as needed.
*   5XXNumber/TotalNumber\\*100: the calculation expression.', example='{"extend":{"errorPercent":"5XXNumber/TotalNumber*100"}}', position='Query'),
  metricName: string(name='MetricName', description='The returned message.

*   If the call is successful, the value `successful` is returned.
*   If the call fails, an error message is returned. Example: `alias of aggreate must be set value.`', example='cpu_total', position='Query'),
  slsLogstore: string(name='SlsLogstore', description='The name of the metric. For more information about the metrics for cloud services, see [Appendix 1: Metrics](~~163515~~).', example='test-logstore', position='Query'),
  slsProject: string(name='SlsProject', description='The name of the field that is specified as the dimension. Valid values of N: 1 to 10.', example='test-project', position='Query'),
  slsRegionId: string(name='SlsRegionId', description='The operation that you want to perform. Set the value to PutLogMonitor.', example='cn-hangzhou', position='Query'),
  tumblingwindows?: string(name='Tumblingwindows', description='The logical operator that is used between log filter conditions. Valid values:

*   and
*   or

>  The ValueFilterRelation and `ValueFilter.N.Key` parameters must be used in pair.', example='60,300', position='Query'),
  unit?: string(name='Unit', description='The region in which the Log Service project resides.', example='Percent', position='Query'),
  valueFilter?: [ 
    {
      key?: string(name='Key', description='The method that is used to match the field value. Valid values of N: 1 to 10. Valid values:

*   `contain`: contains
*   `notContain`: does not contain
*   `>`: be greater than
*   `<`: be less than
*   `>=`: be greater than or equal to
*   `<=`: be less than or equal to', example='lh_source'),
      operator?: string(name='Operator', description='The size of the tumbling window for calculation. Unit: seconds. CloudMonitor performs aggregation for each tumbling window.', example='Operator'),
      value?: string(name='Value', description='The alias of the dimension based on which the data is grouped. Valid values of N: 1 to 10.', example='test'),
    }
  ](name='ValueFilter', position='Query'),
  valueFilterRelation: string(name='ValueFilterRelation', description='The field value to be matched in the filter condition. Valid values of N: 1 to 10.', example='and', position='Query'),
}

model PutLogMonitorResponseBody = {
  code?: string(name='Code', description='The name of the Log Service Logstore.', example='200'),
  logId?: string(name='LogId', example='16****'),
  message?: string(name='Message', description='The ID of the request.', example='successful'),
  requestId?: string(name='RequestId', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='91561287-0802-5F9C-9BDE-404C50D41B06'),
  success?: boolean(name='Success', example='true'),
}

model PutLogMonitorResponse = {
  headers: map[string]string(name='headers'),
  body: PutLogMonitorResponseBody(name='body'),
}

/**
  * The name of the log field that is used for matching in the filter condition. Valid values of N: 1 to 10.
  *
 */
async function putLogMonitor(request: PutLogMonitorRequest): PutLogMonitorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutLogMonitor', 'POST', '/', 'json', false, 'json', request);
}

model PutMetricRuleTargetsRequest {
  ruleId: string(name='RuleId', description='The list of resources that failed to be created or modified.', example='ae06917_75a8c43178ab66****', position='Query'),
  targets: [ 
    {
      arn: string(name='Arn', description='The ARN of the resource.

Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
*   {userId}: the ID of the Alibaba Cloud account.
*   {regionId}: the region ID of the message queue or topic.
*   {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues** - **topics** {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`', example='acs:mns:cn-hangzhou:120886317861****:/queues/test/message'),
      id: string(name='Id', description='The ID of the resource for which alerts are triggered.

For information about how to obtain the ID of a resource for which alerts are triggered, see [DescribeMetricRuleTargets](~~121592~~).', example='1'),
      jsonParams?: string(name='JsonParams', description='The ID of the resource for which alerts are triggered.', example='{"customField1":"value1","customField2":"$.name"}'),
      level?: string(name='Level', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='["INFO", "WARN", "CRITICAL"]'),
    }
  ](name='Targets', position='Query'),
}

model PutMetricRuleTargetsResponseBody = {
  code?: string(name='Code', description='The operation that you want to perform. Set the value to **PutMetricRuleTargets**.', example='200'),
  failData?: {
    targets?: {
      target?: [ 
      {
        arn?: string(name='Arn', example='acs:mns:cn-hangzhou:111:/queues/test/message'),
        id?: string(name='Id', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='1'),
        level?: string(name='Level', example='["INFO", "WARN", "CRITICAL"]'),
      }
    ](name='Target')
    }(name='Targets', description='The ID of the request.'),
  }(name='FailData', description='The ARN of the resource.

For information about how to obtain the ARN of a resource, see [DescribeMetricRuleTargets](~~121592~~).

Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:

*   {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
*   {userId}: the ID of the Alibaba Cloud account.
*   {regionId}: the region ID of the message queue or topic.
*   {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues** - **topics** {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`'),
  message?: string(name='Message', description='The error message.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The ID of the alert rule.

For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).', example='6A569B0D-9055-58AF-9E82-BAEAF95C0FD5'),
  success?: boolean(name='Success', description='The level of the alert. Valid values:

*   INFO: information
*   WARN: warning
*   CRITICAL: critical', example='true'),
}

model PutMetricRuleTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: PutMetricRuleTargetsResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function putMetricRuleTargets(request: PutMetricRuleTargetsRequest): PutMetricRuleTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMetricRuleTargets', 'POST', '/', 'json', false, 'json', request);
}

model PutMonitorGroupDynamicRuleRequest {
  groupId: long(name='GroupId', description='The method that is used to filter instances. Valid values of N: 1 to 3. Valid values:

*   contains: contains
*   notContains: excludes
*   startWith: starts with a prefix
*   endWith: ends with a suffix', example='123456', position='Query'),
  groupRules: [ 
    {
      category: string(name='Category', description='The logical operator used between conditional expressions in the alert rule. Valid values of N: 1 to 3. Valid values:

*   and: The instances that meet all the conditional expressions are automatically added to the application group.
*   or: The instances that meet one of the conditional expressions are automatically added to the application group.', example='ecs'),
      filterRelation: string(name='FilterRelation', description='The mode for creating the alert rule. Valid values:

*   true: creates asynchronously
*   false (default value): creates synchronously', example='and'),
      filters: [ 
        {
          function: string(name='Function', description='The error message.', example='contains'),
          name: string(name='Name', description='The operation that you want to perform. Set the value to **PutMonitorGroupDynamicRule**.', example='hostName'),
          value: string(name='Value', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='nginx'),
        }
      ](name='Filters'),
    }
  ](name='GroupRules', position='Query'),
  isAsync?: boolean(name='IsAsync', description='The ID of the application group.', example='false', position='Query'),
}

model PutMonitorGroupDynamicRuleResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The specified resource is not found.'),
  requestId?: string(name='RequestId', example='3E73F1AB-D195-438A-BCA7-2F4355789C58'),
  success?: boolean(name='Success', example='true'),
}

model PutMonitorGroupDynamicRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutMonitorGroupDynamicRuleResponseBody(name='body'),
}

async function putMonitorGroupDynamicRule(request: PutMonitorGroupDynamicRuleRequest): PutMonitorGroupDynamicRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMonitorGroupDynamicRule', 'POST', '/', 'json', false, 'json', request);
}

model PutMonitoringConfigRequest {
  autoInstall?: boolean(name='AutoInstall', description='Specifies whether to automatically install the CloudMonitor agent on new ECS instances. Valid values:

*   true (default value)
*   false', example='true', position='Query'),
  enableInstallAgentNewECS?: boolean(name='EnableInstallAgentNewECS', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='true', position='Query'),
}

model PutMonitoringConfigResponseBody = {
  code?: int32(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='The operation that you want to perform. Set the value to **PutMonitoringConfig**.', example='Specified parameter EnableInstallAgentNewECS is not valid.'),
  requestId?: string(name='RequestId', example='109C8095-6FAD-4DBB-B013-6ED18CE4C0B1'),
  success?: boolean(name='Success', example='true'),
}

model PutMonitoringConfigResponse = {
  headers: map[string]string(name='headers'),
  body: PutMonitoringConfigResponseBody(name='body'),
}

async function putMonitoringConfig(request: PutMonitoringConfigRequest): PutMonitoringConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMonitoringConfig', 'POST', '/', 'json', false, 'json', request);
}

model PutResourceMetricRuleRequest {
  escalations?: {
    critical: {
        comparisonOperator?: string(name='ComparisonOperator', description='The statistical period of the metric. Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.

>  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](~~163515~~).', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The Prometheus alert rule.

>  This parameter is required only when you create a Prometheus alert rule for Hybrid Cloud Monitoring.', example='Average'),
        threshold?: string(name='Threshold', description='The aggregation period of the metric.

Unit: seconds.', example='90'),
        times?: int32(name='Times', description='The threshold for Warn-level alerts.

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='3'),
    }(name='Critical'),
    info: {
        comparisonOperator?: string(name='ComparisonOperator', description='The PromQL query statement.

>  The data obtained by using the PromQL query statement is the monitoring data. You must include the alert threshold in this statement.', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The value of the tag.

>  You can use a template parameter to specify a tag value. CloudMonitor replaces the value of the template parameter with an actual tag value.', example='Average'),
        threshold?: string(name='Threshold', description='The information about the resource. Examples: `[{"instanceId":"i-uf6j91r34rnwawoo****"}]` and `[{"userId":"100931896542****"}]`.

For information about the supported dimensions that are used to query resources, see [Appendix 1: Metrics](~~163515~~).', example='90'),
        times?: int32(name='Times', description='The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.', example='3'),
    }(name='Info'),
    warn: {
        comparisonOperator?: string(name='ComparisonOperator', description='The key of the annotation.', example='GreaterThanOrEqualToThreshold'),
        statistics?: string(name='Statistics', description='The name of the metric. For information about how to query the name of a metric, see [Appendix 1: Metrics](~~163515~~).

>  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to the name of the namespace. For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](~~428880~~).', example='Average'),
        threshold?: string(name='Threshold', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='90'),
        times?: int32(name='Times', description='The processing method of alerts when no monitoring data is found. Valid values:

*   KEEP_LAST_STATE (default value): No operation is performed.
*   INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
*   OK: The status is considered normal.', example='3'),
    }(name='Warn'),
  }(name='Escalations', position='Query'),
  compositeExpression?: {
    expressionList?: [ 
      {
        comparisonOperator?: string(name='ComparisonOperator', description='The statistical method of the metric. Valid values:

*   $Maximum: the maximum value
*   $Minimum: the minimum value
*   $Average: the average value
*   $Availability: the availability rate (usually used for site monitoring)

>  `$` is the prefix of the metric. For information about the Alibaba Cloud services that are supported by CloudMonitor, see [Appendix 1: Metrics](~~163515~~).', example='GreaterThanOrEqualToThreshold'),
        metricName?: string(name='MetricName', description='The trigger conditions for multiple metrics.

>  The trigger conditions for a single metric and multiple metrics are mutually exclusive. You cannot specify trigger conditions for a single metric and multiple metrics at the same time.', example='cpu_total'),
        period?: long(name='Period', description='The statistical methods for Critical-level alerts. Valid values:

*   Maximum: the maximum value
*   Minimum: the minimum value
*   Average: the average value
*   Availability: the availability rate

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='60'),
        statistics?: string(name='Statistics', description='The time period during which the alert rule is effective.', example='$Maximum'),
        threshold?: string(name='Threshold', description='The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.', example='90'),
      }
    ](name='ExpressionList', description='The trigger conditions that are created by using expressions. You can use expressions to create trigger conditions in the following scenarios:

*   Set an alert blacklist for specific resources. For example, if you specify ` $instanceId != \\"i-io8kfvcpp7x5****\\"  ``&&``  $Average > 50 `, no alert is generated even when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 50.
*   Set a special alert threshold for a specified instance in the rule. For example, if you specify `$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)`, an alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 80 or the `average metric value` of other instances exceeds 50.
*   Limits the number of instances whose metric values exceed the threshold. For example, if you specify `count($Average > 20) > 3`, an alert is triggered only when the number of instances whose `average metric value` exceeds 20 exceeds three.'),
    expressionListJoin?: string(name='ExpressionListJoin', description='The alert threshold.', example='||'),
    expressionRaw?: string(name='ExpressionRaw', description='The threshold for Info-level alerts.

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)'),
    level?: string(name='Level', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.', example='Critical'),
    times?: int32(name='Times', description='The statistical methods for Warn-level alerts. Valid values:

*   Maximum: the maximum value
*   Minimum: the minimum value
*   Average: the average value
*   Availability: the availability rate

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='3'),
  }(name='CompositeExpression', description='The alert contact group. The alert notifications are sent to the contacts that belong to the alert contact group.

>  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](~~114923~~) and [PutContactGroup](~~114929~~).', shrink='json', position='Query'),
  contactGroups: string(name='ContactGroups', description='The statistical methods for Info-level alerts. Valid values:

*   Maximum: the maximum value
*   Minimum: the minimum value
*   Average: the average value
*   Availability: the availability rate

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='ECS_Group', position='Query'),
  effectiveInterval?: string(name='EffectiveInterval', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='00:00-23:59', position='Query'),
  emailSubject?: string(name='EmailSubject', description='The namespace of the cloud service. For information about how to query the namespace of a cloud service, see [Appendix 1: Metrics](~~163515~~).

>  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to `acs_prometheus`.', position='Query'),
  interval?: string(name='Interval', description='The subject of the alert notification email.', example='60', position='Query'),
  labels?: [ 
    {
      key?: string(name='Key', example='tagKey1'),
      value?: string(name='Value', description='The relationship between the trigger conditions for multiple metrics. Valid values:

*   `&&`: An alert is triggered only if all metrics meet the trigger conditions. An alert is triggered only if the results of all expressions specified in the ExpressionList parameter are `true`.
*   `||`: If one of the metrics meets the trigger conditions, an alert is triggered.', example='ECS'),
    }
  ](name='Labels', position='Query'),
  metricName: string(name='MetricName', description='The trigger conditions that are created in standard mode.', example='cpu_total', position='Query'),
  namespace: string(name='Namespace', description='The operation that you want to perform. Set the value to **PutResourceMetricRule**.', example='acs_ecs_dashboard', position='Query'),
  noDataPolicy?: string(name='NoDataPolicy', description='The error message.', example='KEEP_LAST_STATE', position='Query'),
  noEffectiveInterval?: string(name='NoEffectiveInterval', description='The value of the annotation.', example='00:00-06:00', position='Query'),
  period?: string(name='Period', description='The name of the alert rule.

You can specify a new name or the name of an existing alert rule. For information about how to query the name of an alert rule, see [DescribeMetricRuleList](~~114941~~).

>  If you specify a new name, a threshold-triggered alert rule is created.', example='60', position='Query'),
  prometheus?: {
    annotations?: [ 
      {
        key?: string(name='Key', description='The level of the alert. Valid values:

*   Critical
*   Warn
*   Info', example='summary'),
        value?: string(name='Value', description='The consecutive number of times for which the metric value meets the trigger condition before an Info-level alert is triggered.

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='{{ $labels.instance }} CPU usage above 10% {current value: {{ humanizePercentage $value }} }'),
      }
    ](name='Annotations', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle'),
    level?: string(name='Level', description='The annotations of the Prometheus alert rule. When a Prometheus alert is triggered, the system renders the annotated keys and values to help you understand the metrics and alert rule.

>  This parameter is equivalent to the annotations parameter of open source Prometheus.', example='Critical'),
    promQL?: string(name='PromQL', description='The threshold for Critical-level alerts.

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='cpuUsage{instanceId="xxxx"}[1m]>90'),
    times?: int32(name='Times', description='The consecutive number of times for which the metric value meets the trigger condition before a Critical-level alert is triggered.

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='3'),
  }(name='Prometheus', description='The time period during which the alert rule is ineffective.', shrink='json', position='Query'),
  resources?: string(name='Resources', description='The operator that is used to compare the metric value with the threshold. Valid values:

*   GreaterThanOrEqualToThreshold: greater than or equal to the threshold
*   GreaterThanThreshold: greater than the threshold
*   LessThanOrEqualToThreshold: less than or equal to the threshold
*   LessThanThreshold: less than the threshold
*   NotEqualToThreshold: not equal to the threshold
*   GreaterThanYesterday: greater than the metric value at the same time yesterday
*   LessThanYesterday: less than the metric value at the same time yesterday
*   GreaterThanLastWeek: greater than the metric value at the same time last week
*   LessThanLastWeek: less than the metric value at the same time last week
*   GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
*   LessThanLastPeriod: less than the metric value in the last monitoring cycle

>  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for the selected alert level.', example='[{"instanceId":"i-uf6j91r34rnwawoo****"}]', position='Query'),
  ruleId: string(name='RuleId', description='The metric that is used to monitor the cloud service.', example='a151cd6023eacee2f0978e03863cc1697c89508****', position='Query'),
  ruleName: string(name='RuleName', description='The level of the alert. Valid values:

*   Critical
*   Warn
*   Info', example='test123', position='Query'),
  silenceTime?: int32(name='SilenceTime', description='The interval at which the alert is triggered. Unit: seconds.

>  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](~~163515~~).', example='86400', position='Query'),
  webhook?: string(name='Webhook', description='The ID of the alert rule.

You can specify a new ID or the ID of an existing alert rule. For information about how to query the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).

>  If you specify a new ID, a threshold-triggered alert rule is created.', example='https://alert.aliyun.com.com:8080/callback', position='Query'),
}

model PutResourceMetricRuleResponseBody = {
  code?: string(name='Code', description='The ID of the request.', example='200'),
  message?: string(name='Message', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', example='65D50468-ECEF-48F1-A6E1-D952E89D9436'),
  success?: boolean(name='Success', example='true'),
}

model PutResourceMetricRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PutResourceMetricRuleResponseBody(name='body'),
}

/**
  * The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.
  * >  If an alert is not cleared within the mute period, a new alert notification is sent when the mute period ends.
  *
 */
async function putResourceMetricRule(request: PutResourceMetricRuleRequest): PutResourceMetricRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutResourceMetricRule', 'POST', '/', 'json', false, 'json', request);
}

model PutResourceMetricRulesRequest {
  rules: [ 
    {
      escalations: {
        critical: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Critical'),
        info: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Info'),
        warn: {
            comparisonOperator?: string(name='ComparisonOperator'),
            n?: int32(name='N'),
            preCondition?: string(name='PreCondition'),
            statistics?: string(name='Statistics'),
            threshold?: string(name='Threshold'),
            times?: int32(name='Times'),
        }(name='Warn'),
      }(name='Escalations'),
      contactGroups: string(name='ContactGroups', description='The error message.', example='ECS_Group'),
      effectiveInterval?: string(name='EffectiveInterval', description='The operation that you want to perform. Set the value to **PutResourceMetricRules**.', example='00:00-23:59'),
      emailSubject?: string(name='EmailSubject', description='The HTTP status code.'),
      interval?: string(name='Interval', description='The alert contact group. The alert notifications are sent to the alert contacts in the alert contact group.

Valid values of N: 1 to 500.

>  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](~~114923~~) and [PutContactGroup](~~114929~~).', example='60'),
      labels?: [ 
        {
          key?: string(name='Key', description='The interval at which the alert rule is executed.

Unit: seconds.

Valid values of N: 1 to 500.

>  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](~~163515~~).', example='tagKey1'),
          value?: string(name='Value', description='The subject of the alert notification email.

Valid values of N: 1 to 500.', example='ECS'),
        }
      ](name='Labels'),
      metricName?: string(name='MetricName', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='cpu_total'),
      namespace: string(name='Namespace', description='The name of the alert rule.

Valid values of N: 1 to 500.

You can specify a new name or the name of an existing alert rule. For information about how to query the name of an alert rule, see [DescribeMetricRuleList](~~114941~~).

>  If you specify a new name, you create a threshold-triggered alert rule.', example='acs_ecs_dashboard'),
      noDataPolicy?: string(name='NoDataPolicy', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='KEEP_LAST_STATE'),
      noEffectiveInterval?: string(name='NoEffectiveInterval', description='The time period during which the alert rule is effective.

Valid values of N: 1 to 500.', example='00:00-06:00'),
      period?: string(name='Period', description='The name of the metric.

Valid values of N: 1 to 500.

For information about how to query the name of a metric, see [Appendix 1: Metrics](~~163515~~).', example='60'),
      resources: string(name='Resources', description='The statistical methods for Warn-level alerts. Valid values:

*   Maximum: the maximum value
*   Minimum: the minimum value
*   Average: the average value
*   Availability: the availability rate

Valid values of N: 1 to 500.

>  You must set a collection of the Rules.N.Escalations.Critical.Statistics, Rules.N.Escalations.Critical.ComparisonOperator, Rules.N.Escalations.Critical.Threshold, and Rules.N.Escalations.Critical.Times parameters, a collection of the Rules.N.Escalations.Warn.Statistics, Rules.N.Escalations.Warn.ComparisonOperator, Rules.N.Escalations.Warn.Threshold, and Rules.N.Escalations.Warn.Times parameters, or a collection of the Rules.N.Escalations.Info.Statistics, Rules.N.Escalations.Info.ComparisonOperator, Rules.N.Escalations.Info.Threshold, and Rules.N.Escalations.Info.Times parameters.', example='[{"instanceId":"i-uf6j91r34rnwawoo****"}]'),
      ruleId: string(name='RuleId', description='The error message.', example='a151cd6023eacee2f0978e03863cc1697c89508****'),
      ruleName: string(name='RuleName', description='The ID of the alert rule.', example='test123'),
      silenceTime?: int32(name='SilenceTime', description='The method that is used to handle alerts when no monitoring data is found. Valid values:

*   KEEP_LAST_STATE (default value): No operation is performed.
*   INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
*   OK: The status is considered normal.

Valid values of N: 1 to 500.', example='86400'),
      webhook?: string(name='Webhook', description='The mute period during which new alerts are not sent even if the trigger conditions are met.

Unit: seconds. Default value: 86400.

Valid values of N: 1 to 500.

>  If an alert is not cleared after the mute period ends, CloudMonitor resends an alert notification.', example='https://alert.aliyun.com.com:8080/callback'),
    }
  ](name='Rules', position='Query'),
}

model PutResourceMetricRulesResponseBody = {
  code?: string(name='Code', description='The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.

Valid values of N: 1 to 500.', example='200'),
  failedListResult?: {
    target?: [ 
    {
      result?: {
        code?: string(name='Code', description='For more information about common request parameters, see [Common parameters](~~199331~~).', example='404'),
        message?: string(name='Message', example='The request processing has failed due to some unknown error.'),
        success?: boolean(name='Success', example='false'),
      }(name='Result', description='The alert rules that failed to be created for the resource.'),
      ruleId?: string(name='RuleId', description='The statistical period of the metric.

Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.

Valid values of N: 1 to 500.

>  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](~~163515~~).', example='a151cd6023eacee2f0978e03863cc1697c89508****'),
    }
  ](name='Target')
  }(name='FailedListResult', description='The ID of the request.'),
  message?: string(name='Message', description='The ID of the alert rule.

Valid values of N: 1 to 500.

You can specify a new ID or the ID of an existing alert rule. For information about how to query the ID of an alert rule, see [DescribeMetricRuleList](~~114941~~).

>  If you specify a new ID, you create a threshold-triggered alert rule.', example='The request processing has failed due to some unknown error.'),
  requestId?: string(name='RequestId', description='The alert rule that failed to be created.', example='15D1440E-BF24-5A41-93E4-36864635179E'),
  success?: boolean(name='Success', description='The key of the tag.', example='true'),
}

model PutResourceMetricRulesResponse = {
  headers: map[string]string(name='headers'),
  body: PutResourceMetricRulesResponseBody(name='body'),
}

/**
  * Indicates whether the call was successful. Valid values:
  * *   true: The call was successful.
  * *   false: The call failed.
  *
 */
async function putResourceMetricRules(request: PutResourceMetricRulesRequest): PutResourceMetricRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutResourceMetricRules', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTagsRequest {
  groupIds: [ string ](name='GroupIds', example='12345', position='Query'),
  tag: [ 
    {
      key: string(name='Key', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='Key1'),
      value: string(name='Value', description='The value of the tag.

>  The `Tag.N.Key` and `Tag.N.Value` parameters must be used in pairs.', example='Value1'),
    }
  ](name='Tag', position='Query'),
}

model RemoveTagsResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

>  The status code 200 indicates that the call was successful.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='Illegal parameters.'),
  requestId?: string(name='RequestId', description='The operation that you want to perform. Set the value to RemoveTags.', example='195390D2-69D0-4D9E-81AA-A7F5BC1B91EB'),
  success?: boolean(name='Success', example='true'),
  tag?: {
    tags?: [ string ](name='Tags')
  }(name='Tag'),
}

model RemoveTagsResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTagsResponseBody(name='body'),
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTags', 'POST', '/', 'json', false, 'json', request);
}

model SendDryRunSystemEventRequest {
  eventContent?: string(name='EventContent', description='The operation that you want to perform. Set the value to SendDryRunSystemEvent.', example='{"product":"CloudMonitor","resourceId":"acs:ecs:cn-hongkong:173651113438****:instance/{instanceId}","level":"CRITICAL","instanceName":"instanceName","regionId":"cn-hangzhou","name":"Agent_Status_Stopped","content":{"ipGroup":"0.0.0.0,0.0.0.1","tianjimonVersion":"1.2.11"},"status":"stopped"}', position='Query'),
  eventName: string(name='EventName', description='The ID of the application group.', example='Agent_Status_Stopped', position='Query'),
  groupId?: string(name='GroupId', description='The content of the system event.

>  The value of this parameter is a JSON object. We recommend that you include the `product`, `resourceId`, and `regionId` fields in the JSON object.', example='123456', position='Query'),
  product: string(name='Product', description='The name of the system event.

>  For more information, see [DescribeSystemEventMetaList](~~114972~~).', example='ecs', position='Query'),
}

model SendDryRunSystemEventResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='success'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='486029C9-53E1-44B4-85A8-16A571A043FD'),
  success?: string(name='Success', description='This operation is used to test whether a system event can be triggered as expected. You can call this operation to simulate a system event and check whether an expected response is returned after an alert is triggered by the system event.', example='true'),
}

model SendDryRunSystemEventResponse = {
  headers: map[string]string(name='headers'),
  body: SendDryRunSystemEventResponseBody(name='body'),
}

/**
  * The name of the cloud service.
  * >  For information about the system events supported by Cloud Monitor for Alibaba Cloud services, see [System events](~~167388~~).
  *
 */
async function sendDryRunSystemEvent(request: SendDryRunSystemEventRequest): SendDryRunSystemEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendDryRunSystemEvent', 'POST', '/', 'json', false, 'json', request);
}

model UninstallMonitoringAgentRequest {
  instanceId: string(name='InstanceId', description='The HTTP status code.

>  The HTTP status code 200 indicates that the call was successful.', example='host-****', position='Query'),
}

model UninstallMonitoringAgentResponseBody = {
  code?: string(name='Code', description='The returned message.', example='200'),
  message?: string(name='Message', description='The ID of the request.', example='Successfully'),
  requestId?: string(name='RequestId', description='Indicates whether the call was successful. Valid values:

*   true: The call was successful.
*   false: The call failed.', example='466902B9-2842-40B0-B796-00FE772B6EF3'),
  success?: boolean(name='Success', description='>  This API operation is not applicable to ECS instances. To uninstall the agent from an ECS instance, see [Install and uninstall the Cloud Monitor agent](~~183482~~).', example='true'),
}

model UninstallMonitoringAgentResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallMonitoringAgentResponseBody(name='body'),
}

/**
  * The operation that you want to perform. Set the value to UninstallMonitoringAgent.
  *
 */
async function uninstallMonitoringAgent(request: UninstallMonitoringAgentRequest): UninstallMonitoringAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallMonitoringAgent', 'POST', '/', 'json', false, 'json', request);
}

