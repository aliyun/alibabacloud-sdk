/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cloudfw';
  @version = '2017-12-07';
  @endpointRule = 'central';
  @endpointMap = {
    ap-southeast-1 = 'cloudfw.ap-southeast-1.aliyuncs.com',
    cn-hangzhou = 'cloudfw.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddAddressBookRequest {
  addressList?: string(name='AddressList', description='The addresses that you want to add to the address book. Separate multiple addresses with commas (,).

> If you set GroupType to `ip`, `port` or `domain`, you must specify the AddressList parameter.
>
> * If you set GroupType to `ip`, you must add IP addresses to the address book. Example: 192.0.XX.XX/32, 192.0.XX.XX/24.
> * If you set GroupType to `port`, you must add port numbers or port ranges to the address book. Example: 80, 100/200.
> * If you set GroupType to `domain`, you must add domain names to the address book. Example: example.com, aliyundoc.com.', example='192.0.XX.XX/32, 192.0.XX.XX/24', position='Query'),
  autoAddTagEcs?: string(name='AutoAddTagEcs', description='Specifies whether to automatically add public IP addresses of ECS instances to the address book if the instances match the specified tags. Valid values:

*   **1**: yes
*   **0**: no (default)', example='1', position='Query'),
  description: string(name='Description', description='The description of the address book.', example='sz-001', position='Query'),
  groupName: string(name='GroupName', description='The name of the address book.', example='sz-001', position='Query'),
  groupType: string(name='GroupType', description='The type of the address book. Valid values:

* **ip**: IP address book
* **domain**: domain address book
* **port**: port address book
* **tag**: ECS tag-based address book', example='ip', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the tag.', example='TXY'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='1'),
    }
  ](name='TagList', description='The ECS tags that you want to match.', position='Query'),
  tagRelation?: string(name='TagRelation', description='The logical relation among the ECS tags that you want to match. Valid values:

*   **and**: Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book. This is the default value.
*   **or**: The public IP addresses of ECS instances that match one of the specified tags can be added to the address book.', example='and', position='Query'),
}

model AddAddressBookResponseBody = {
  groupUuid?: string(name='GroupUuid', description='The UUID of the returned address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2****'),
}

model AddAddressBookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAddressBookResponseBody(name='body'),
}

/**
  * You can call the AddAddressBook operation to create an address book for access control. The address book can be an IP address book, an ECS tag-based address book, a port address book, or a domain address book.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function addAddressBook(request: AddAddressBookRequest): AddAddressBookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAddressBook', 'POST', '/', 'json', false, 'json', request);
}

model AddControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept', position='Query'),
  applicationName?: string(name='ApplicationName', description='The application type supported by the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**
*   **ANY**

> The value of this parameter is based on the value of Proto. If Proto is set to TCP, you can set ApplicationName to any valid value. If Proto is set to UDP, ICMP, or ANY, you can set ApplicationName only to ANY. You must specify at least one of the ApplicationNameList and ApplicationName parameters.', example='ANY', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.', position='Query'),
  description: string(name='Description', description='The description of the access control policy.', example='Allows traffic', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. Valid values:

*   If Proto is set to ICMP, DestPort is automatically left empty.

> If Proto is set to ICMP, access control does not take effect on the destination port.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to group, DestPort is empty.

> If DestPortType is set to group, you do not need to specify the destination port number. All ports on which the access control policy takes effect are included in the destination port address book.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to port, the value of DestPort is the destination port number.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.

> If DestPortType is set to group, you must specify the name of the destination port address book.', example='my_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy.

Valid values:

*   **port**: port
*   **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy.

Valid values:

*   If DestinationType is set to net, the value of this parameter is a CIDR block.

    Example: 1.2.XX.XX/24

*   If DestinationType is set to group, the value of this parameter is an address book name.

    Example: db_group

*   If DestinationType is set to domain, the value of this parameter is a domain name.

    Example: \\*.aliyuncs.com

*   If DestinationType is set to location, the value of this parameter is a location.

    Example: \\["BJ11", "ZB"]', example='192.0.XX.XX/24', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: location', example='net', position='Query'),
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy.

Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='6', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  newOrder: string(name='NewOrder', description='The priority of the access control policy. The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1', position='Query'),
  proto: string(name='Proto', description='The protocol type supported by the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**', example='ANY', position='Query'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: enables the access control policy.
*   **false**: disables the access control policy.', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy. Valid values:

*   If SourceType is set to net, the value of this parameter is a CIDR block.

    Example: 1.1.XX.XX/24

*   If SourceType is set to group, the value of this parameter is an address book name.

    Example: db_group

*   If SourceType is set to location, the value of this parameter is a location.

    Example: \\["BJ11", "ZB"]', example='192.0.XX.XX/24', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model AddControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy that is created on the Internet firewall.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model AddControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddControlPolicyResponseBody(name='body'),
}

/**
  * You can call the AddControlPolicy operation to create an access control policy to allow, block, or monitor traffic that reaches Cloud Firewall.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function addControlPolicy(request: AddControlPolicyRequest): AddControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AddInstanceMembersRequest {
  members: [ 
    {
      memberDesc?: string(name='MemberDesc', description='The remarks of member that you want to add to Cloud Firewall. The remarks must be 1 to 256 characters in length.', example='renewal'),
      memberUid: long(name='MemberUid', description='The UID of member that you want to add to Cloud Firewall.', example='258039427902****'),
    }
  ](name='Members', description='The members that you want to add to Cloud Firewall.', position='Query'),
}

model AddInstanceMembersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B40A54DF-C142-44F7-8441-B31C1EADB36E'),
}

model AddInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddInstanceMembersResponseBody(name='body'),
}

/**
  * You can call the AddInstanceMembers operation to add members to Cloud Firewall. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function addInstanceMembers(request: AddInstanceMembersRequest): AddInstanceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddInstanceMembers', 'POST', '/', 'json', false, 'json', request);
}

model BatchCopyVpcFirewallControlPolicyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  sourceVpcFirewallId: string(name='SourceVpcFirewallId', description='The ID of the policy group of the source VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](~~159760~~) operation to query the IDs of policy groups.', example='vfw-a42bbb7b887148c9****', position='Query'),
  targetVpcFirewallId: string(name='TargetVpcFirewallId', description='The ID of the policy group of the destination VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a VBR, or a CCN instance.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](~~159760~~) operation to query the IDs of policy groups.', example='vfw-e37d3a04cf79446a****', position='Query'),
}

model BatchCopyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model BatchCopyVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCopyVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can call the BatchCopyVpcFirewallControlPolicy operation to copy all access control policies from a policy group of a source VPC firewall to a policy group of a destination VPC firewall.  
  * Before you call this operation, we recommend that you back up access control policies. For more information about how to back up an access control policy, see [Back up an access control policy](https://www.alibabacloud.com/help/en/cloud-firewall/latest/back-up-and-roll-back-an-access-control-policy).  
  * After you call this operation, all the access control policies in the policy group of the destination VPC firewall are replaced.  
  * The policy groups of the source VPC firewall and the destination VPC firewall must belong to the same Alibaba Cloud account.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. When the number of calls to this operation per second exceeds the limit, throttling is triggered. Throttling may affect your business. We recommend that you take note of the limit on this operation.
  *
 */
async function batchCopyVpcFirewallControlPolicy(request: BatchCopyVpcFirewallControlPolicyRequest): BatchCopyVpcFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchCopyVpcFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateNatFirewallControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='log', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.', position='Query'),
  description: string(name='Description', description='The description of the access control policy.', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. Valid values:

*   If Proto is set to ICMP, DestPort is automatically left empty.

> If Proto is set to ICMP, access control does not take effect on the destination port.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to group, DestPort is empty.

> If DestPortType is set to group, you do not need to specify the destination port number. All ports on which the access control policy takes effect are included in the destination port address book.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to port, the value of DestPort is the destination port number.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.

> If DestPortType is set to group, you must specify the name of the destination port address book.', example='my_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy.

Valid values:

*   If DestinationType is set to net, the value of this parameter is a CIDR block.

    Example: 1.2.XX.XX/24

*   If DestinationType is set to group, the value of this parameter is an address book.

    Example: db_group

*   If DestinationType is set to domain, the value of this parameter is a domain name.

    Example: \\*.aliyuncs.com

*   If DestinationType is set to location, the value of this parameter is a location.

    Example: \\["BJ11", "ZB"]', example='XX.XX.XX.XX/24', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name', example='net', position='Query'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **out**: outbound traffic', example='out', position='Query'),
  domainResolveType?: int32(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **0**: Fully qualified domain name (FQDN)-based resolution
*   **1**: Domain Name System (DNS)-based dynamic resolution
*   **2**: FQDN and DNS-based dynamic resolution', example='0', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy. Valid values:

*   **4**: IPv4 (default)', example='4', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngx-xxxxxxx', position='Query'),
  newOrder: string(name='NewOrder', description='The new priority of the access control policy.', example='1', position='Query'),
  proto: string(name='Proto', description='The protocol type in the access control policy.

Valid values:

*   ANY: all types of protocols
*   TCP
*   UDP
*   ICMP', example='ANY', position='Query'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy.

Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block.

    Example: 10.2.4.0/24

*   If **SourceType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group', example='192.168.0.25/32', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy.

Valid values:

*   **net**: source CIDR block
*   **group**: source address book', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model CreateNatFirewallControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

> If you want to modify an access control policy, you must provide the UUID of the policy. You can call the DescribeNatFirewallControlPolicy operation to query the UUIDs of access control policies.', example='6504d2fb-ab36-49c3-92a6-822a56549783'),
  requestId?: string(name='RequestId', description='The request ID.', example='0DC783F1-B3A7-578D-8A63-687CC9B82C0A'),
}

model CreateNatFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateNatFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can use this operation to create an access control policy to allow, deny, or monitor traffic that passes through a NAT firewall.
  *
 */
async function createNatFirewallControlPolicy(request: CreateNatFirewallControlPolicyRequest): CreateNatFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNatFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrFirewallV2Request {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-4xbjup276au29r****', position='Query'),
  firewallDescription?: string(name='FirewallDescription', description='The description of the firewall.', position='Query'),
  firewallName?: string(name='FirewallName', description='The name of the firewall.', position='Query'),
  firewallSubnetCidr?: string(name='FirewallSubnetCidr', description='The subnet CIDR block of the VPC in which the ENI of the firewall is stored in automatic mode.', example='10.0.1.0/24', position='Query'),
  firewallVpcCidr?: string(name='FirewallVpcCidr', description='The CIDR block that is allocated to the VPC created for the VPC firewall in automatic mode.', example='10.0.0.0/16', position='Query'),
  firewallVpcId?: string(name='FirewallVpcId', description='The ID of the VPC in which the ENI associated with the VPC firewall is created in manual mode.', example='vpc-wz9r5qvryn0lg3atb****', position='Query'),
  firewallVswitchId?: string(name='FirewallVswitchId', description='The ID of the vSwitch that is used to create the ENI in manual mode.', example='vsw-uf6ydz3vqj77mr5l6****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  regionNo?: string(name='RegionNo', description='The region ID of the route router.', example='cn-hangzhou', position='Query'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed', position='Query'),
  trAttachmentMasterCidr?: string(name='TrAttachmentMasterCidr', description='The primary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.3.0/24', position='Query'),
  trAttachmentMasterZone?: string(name='TrAttachmentMasterZone', position='Query'),
  trAttachmentSlaveCidr?: string(name='TrAttachmentSlaveCidr', description='The secondary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.0.16/28', position='Query'),
  trAttachmentSlaveZone?: string(name='TrAttachmentSlaveZone', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-m5etmb2q7e0mxcur****', position='Query'),
}

model CreateTrFirewallV2ResponseBody = {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-37e22bf0d9b34870****'),
  requestId?: string(name='RequestId', description='The request ID.', example='822B9125-6E1A-551C-8EAF-6E7AE7444B00'),
}

model CreateTrFirewallV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrFirewallV2ResponseBody(name='body'),
}

async function createTrFirewallV2(request: CreateTrFirewallV2Request): CreateTrFirewallV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrFirewallV2', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrFirewallV2RoutePolicyRequest {
  destCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', example='vpc-2ze9epancaw8t4sha****'),
      candidateType?: string(name='CandidateType', example='VPC'),
    }
  ](name='DestCandidateList', shrink='json', position='Query'),
  firewallId?: string(name='FirewallId', example='vfw-tr-f8ce36689b224f77****', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  policyDescription?: string(name='PolicyDescription', position='Query'),
  policyName?: string(name='PolicyName', position='Query'),
  policyType?: string(name='PolicyType', example='fullmesh', position='Query'),
  srcCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', example='vpc-2ze9epancaw8t4sha****'),
      candidateType?: string(name='CandidateType', example='VPC'),
    }
  ](name='SrcCandidateList', shrink='json', position='Query'),
}

model CreateTrFirewallV2RoutePolicyResponseBody = {
  requestId?: string(name='RequestId', example='C91D68BA-A0BE-51BF-A0F1-1CB5C57FE58D'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', example='policy-8ebed27e13e14ce2****'),
}

model CreateTrFirewallV2RoutePolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateTrFirewallV2RoutePolicyResponseBody(name='body'),
}

async function createTrFirewallV2RoutePolicy(request: CreateTrFirewallV2RoutePolicyRequest): CreateTrFirewallV2RoutePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrFirewallV2RoutePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcFirewallCenConfigureRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-x5jayxou71ad73****', position='Query'),
  firewallSwitch: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: After you create the VPC firewall, the VPC firewall is automatically enabled. This is the default value.
*   **close**: After you create the VPC firewall, the VPC firewall is disabled. You can call the [ModifyVpcFirewallCenSwitchStatus](~~345780~~) operation to manually enable the VPC firewall.', example='open', position='Query'),
  firewallVSwitchCidrBlock?: string(name='FirewallVSwitchCidrBlock', description='The CIDR block of the vSwitch that is automatically created for the VPC firewall. You must specify a CIDR block for the Cloud_Firewall_VSWITCH VPC that is automatically created for the VPC firewall for traffic redirection. The CIDR block does not conflict with your network plan. The subnet mask of the CIDR block must be less than or equal to 29 bits in length. The CIDR block of the vSwitch must be within the network segment of the VPC.

If you do not specify a value, the CIDR block 10.219.219.216/29 is automatically allocated.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region.', example='10.0.*.*/28', position='Query'),
  firewallVpcCidrBlock?: string(name='FirewallVpcCidrBlock', description='The CIDR block of the VPC that is automatically created for the VPC firewall. You must specify a CIDR block for the Cloud_Firewall_VPC VPC that is automatically created for the VPC firewall for traffic redirection. The subnet mask of the CIDR block must be less than or equal to 28 bits in length.

If you do not specify a value, the CIDR block 10.0.0.0/8 is automatically allocated.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region.', example='10.0.0.0/8', position='Query'),
  firewallVpcZoneId?: string(name='FirewallVpcZoneId', description='The ID of the zone to which the vSwitch belongs. If your service is latency-sensitive, you can specify the same zone for the vSwitch of the firewall and the vSwitch of your business VPC to minimize latency.

If you do not specify a value, a zone is automatically assigned for the vSwitch.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region. For more information about zones that are supported by each region, see [Query zones](~~36064~~).', example='cn-hangzhou-a', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  networkInstanceId: string(name='NetworkInstanceId', description='The ID of the VPC for which you want to create the VPC firewall.', example='vpc-bp10zlifxh6j0232w****', position='Query'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is used to associate with the elastic network interface (ENI) required by the VPC firewall.', example='vsw-qzeaol304m***', position='Query'),
  vpcFirewallName: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test instance', position='Query'),
  vpcRegion: string(name='VpcRegion', description='The ID of the region to which the VPC belongs.

> For more information about the regions, see [Supported regions](~~195657~~).', example='cn-hangzhou', position='Query'),
}

model CreateVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125h4j6'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
}

model CreateVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
  * You can call the CreateVpcFirewallCenConfigure operation to create a VPC firewall. The VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. The VPC firewall cannot protect mutual access traffic between VBRs, between CCN instances, or between VBRs and CCN instances. For more information, see [VPC firewall limits](~~172295~~).
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createVpcFirewallCenConfigure(request: CreateVpcFirewallCenConfigureRequest): CreateVpcFirewallCenConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcFirewallCenConfigure', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcFirewallConfigureRequest {
  firewallSwitch: string(name='FirewallSwitch', description='The status of the VPC firewall after you create the firewall. Valid values:

*   **open**: After you create the VPC firewall, the firewall is automatically enabled. This is the default value.
*   **close**: After you create the VPC firewall, the firewall is not automatically enabled. To enable the firewall, you can call the [ModifyVpcFirewallSwitchStatus](~~342935~~) operation.', example='open', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  localVpcCidrTableList: string(name='LocalVpcCidrTableList', description='The CIDR blocks of the local VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the local VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the local VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the local VPC.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]', position='Query'),
  localVpcId: string(name='LocalVpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****', position='Query'),
  localVpcRegion: string(name='LocalVpcRegion', description='The region ID of the local VPC.

>  For more information about regions in which Cloud Firewall is supported, see [Supported regions](~~195657~~).', example='cn-hangzhou', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  peerVpcCidrTableList: string(name='PeerVpcCidrTableList', description='The CIDR blocks of the peer VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the peer VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the peer VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the peer VPC.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]', position='Query'),
  peerVpcId: string(name='PeerVpcId', description='The ID of the peer VPC.', example='vpc-wb8vbo90rq0anm6t****', position='Query'),
  peerVpcRegion: string(name='PeerVpcRegion', description='The region ID of the peer VPC.

>  For more information about regions in which Cloud Firewall is supported, see [Supported regions](~~195657~~).', example='cn-shanghai', position='Query'),
  vpcFirewallName: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='my-vpc-firewall', position='Query'),
}

model CreateVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125h4j6'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
}

model CreateVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcFirewallConfigureResponseBody(name='body'),
}

/**
  * You can call the CreateVpcFirewallConfigure operation to create a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. The VPC firewall does not control the mutual access traffic between VPCs that reside in different regions or belong to different Alibaba Cloud accounts. The firewall also does not control the mutual access traffic between VPCs and virtual border routers (VBRs). For more information, see [Limits on VPC firewalls](https://www.alibabacloud.com/help/en/cloud-firewall/latest/vpc-firewall-limits).  
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createVpcFirewallConfigure(request: CreateVpcFirewallConfigureRequest): CreateVpcFirewallConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcFirewallConfigure', 'POST', '/', 'json', false, 'json', request);
}

model CreateVpcFirewallControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

- **accept**: allows the traffic.
- **drop**: blocks the traffic.
- **log**: monitors the traffic.', example='accept', position='Query'),
  applicationName?: string(name='ApplicationName', description='The type of the applications that the access control policy supports. Valid values:

- **FTP**
- **HTTP**
- **HTTPS**
- **MySQL**
- **SMTP**
- **SMTPS**
- **RDP**
- **VNC**
- **SSH**
- **Redis**
- **MQTT**
- **MongoDB**
- **Memcache**
- **SSL**
- **ANY**: all types of applications', example='HTTP', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', position='Query'),
  description: string(name='Description', description='The description of the access control policy.', example='test', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. 

>  If **DestPortType** is set to `port`, you must specify this parameter.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy. 

>  If **DestPortType** is set to `group`, you must specify this parameter.', example='my_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

- **port**: port
- **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy. Valid values:

- If **DestinationType** is set to `net`, the value of **Destination** must be a CIDR block.
- If **DestinationType** is set to `group`, the value of **Destination** must be an address book.
- If **DestinationType** is set to `domain`, the value of **Destination** must be a domain name.', example='10.2.XX.XX/24', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

- **net**: CIDR block
- **group**: address book
- **domain**: domain name', example='net', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

- **zh**: Chinese (default)
- **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  newOrder: string(name='NewOrder', description='The priority of the access control policy. 

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1', position='Query'),
  proto: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

- **ANY** (If you are not sure about the protocol type, you can set this parameter to ANY.)
- **TCP**
- **UDP**
- **ICMP**', example='TCP', position='Query'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values: 

- **true**: enables the access control policy.
- **false**: disables the access control policy.', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy. 

- If SourceType is set to `net`, the value of Source must be a CIDR block.
- If SourceType is set to `group`, the value of Source must be an address book.', example='10.2.XX.XX/24', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

- **net**: CIDR block
- **group**: address book', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The ID of the policy group in which you want to create the access control policy. 

- If a VPC firewall protects the traffic between two VPCs that are connected by using a CEN instance, the value of this parameter must be the ID of the CEN instance.
- If a VPC firewall protects the traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](https://www.alibabacloud.com/help/en/cloud-firewall/latest/describevpcfirewallaclgrouplist) operation to query the IDs.', example='vfw-a42bbb7b887148c9****', position='Query'),
}

model CreateVpcFirewallControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model CreateVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can call the CreateVpcFirewallControlPolicy operation to create an access control policy in a specified policy group for a VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createVpcFirewallControlPolicy(request: CreateVpcFirewallControlPolicyRequest): CreateVpcFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVpcFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAddressBookRequest {
  groupUuid: string(name='GroupUuid', description='The ID of the address book.

To delete the address book, you must provide the ID of the address book. You can call the DescribeAddressBook operation to query the ID.', example='0657ab9d-fe8b-4174-b2a6-6baf358e****', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model DeleteAddressBookResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model DeleteAddressBookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteAddressBookResponseBody(name='body'),
}

/**
  * You can call the DeleteAddressBook operation to delete an address book for access control.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteAddressBook(request: DeleteAddressBookRequest): DeleteAddressBookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAddressBook', 'POST', '/', 'json', false, 'json', request);
}

model DeleteControlPolicyRequest {
  aclUuid: string(name='AclUuid', description='The ID of the access control policy.

To delete an access control policy, you must provide the ID of the policy. You can call the [DescribeControlPolicy](~~138866~~) operation to query the ID.', example='00281255-d220-4db1-8f4f-c4df221ad84c', position='Query'),
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the traffic.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

/**
  * You can call the DeleteControlPolicy operation to delete an access control policy that applies to inbound or outbound traffic.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFirewallV2RoutePoliciesRequest {
  firewallId?: string(name='FirewallId', example='vfw-tr-d5ba592ac6c84aff****', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', example='policy-2d06d3568fd74d60****', position='Query'),
}

model DeleteFirewallV2RoutePoliciesResponseBody = {
  requestId?: string(name='RequestId', example='22B6B889-4E9F-56B3-AF3D-53749C477D1D'),
}

model DeleteFirewallV2RoutePoliciesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteFirewallV2RoutePoliciesResponseBody(name='body'),
}

async function deleteFirewallV2RoutePolicies(request: DeleteFirewallV2RoutePoliciesRequest): DeleteFirewallV2RoutePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFirewallV2RoutePolicies', 'POST', '/', 'json', false, 'json', request);
}

model DeleteInstanceMembersRequest {
  memberUids: [ long ](name='MemberUids', description='The unique identifiers (UID) of members that you want to remove from Cloud Firewall.', example='1234123412341234', position='Query'),
}

model DeleteInstanceMembersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='03E8AA70-0CC9-42EA-97AA-EA68377930B4'),
}

model DeleteInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteInstanceMembersResponseBody(name='body'),
}

/**
  * You can call the DeleteInstanceMembers operation to remove members from Cloud Firewall. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteInstanceMembers(request: DeleteInstanceMembersRequest): DeleteInstanceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteInstanceMembers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNatFirewallControlPolicyRequest {
  aclUuid: string(name='AclUuid', description='The UUID of the access control policy.

To delete an access control policy, you must provide the ID of the policy. You can call the DescribeNatFirewallControlPolicy operation to query the UUIDs of access control policies.', example='b6c8f905-2eb6-442a-ba35-9416e9dbb2c5', position='Query'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **out**: outbound traffic', example='out', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx', position='Query'),
}

model DeleteNatFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='31306869-C4BC-56F3-BBE6-C377CF9C8E1C'),
}

model DeleteNatFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteNatFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can use this operation to delete an outbound access control policy that is created for a NAT firewall.
  *
 */
async function deleteNatFirewallControlPolicy(request: DeleteNatFirewallControlPolicyRequest): DeleteNatFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNatFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrFirewallV2Request {
  firewallId?: string(name='FirewallId', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model DeleteTrFirewallV2ResponseBody = {
  requestId?: string(name='RequestId', example='A774E66E-B170-59FC-9AAF-3068B15E991F'),
}

model DeleteTrFirewallV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteTrFirewallV2ResponseBody(name='body'),
}

async function deleteTrFirewallV2(request: DeleteTrFirewallV2Request): DeleteTrFirewallV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrFirewallV2', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallIdList: [ string ](name='VpcFirewallIdList', description='The instance IDs of VPC firewalls.', position='Query'),
}

model DeleteVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model DeleteVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
  * You can call the DeleteVpcFirewallCenConfigure operation to delete a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](~~345772~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteVpcFirewallCenConfigure(request: DeleteVpcFirewallCenConfigureRequest): DeleteVpcFirewallCenConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcFirewallCenConfigure', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcFirewallConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallIdList: [ string ](name='VpcFirewallIdList', description='The instance IDs of VPC firewalls.', position='Query'),
}

model DeleteVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model DeleteVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcFirewallConfigureResponseBody(name='body'),
}

/**
  * You can call the DeleteVpcFirewallCenConfigure operation to delete a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](~~342893~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteVpcFirewallConfigure(request: DeleteVpcFirewallConfigureRequest): DeleteVpcFirewallConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcFirewallConfigure', 'POST', '/', 'json', false, 'json', request);
}

model DeleteVpcFirewallControlPolicyRequest {
  aclUuid: string(name='AclUuid', description='The ID of the access control policy. 

To delete an access control policy, you must provide the ID of the policy. You can call the **DescribeVpcFirewallControlPolicy** operation to query the ID.', example='00281255-d220-4db1-8f4f-c4df2214****', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values: 

- **zh**: Chinese
- **en**: English', example='zh', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The ID of the group to which the access control policy belongs. You can call the **DescribeVpcFirewallAclGroupList** operation to query the ID.  

Valid values:

- If the VPC firewall is used to protect a CEN instance, the value of this parameter is the ID of the CEN instance.  

Example: cen-ervw0g12b5jbw****
- If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the ID of the VPC firewall.  

Example: vfw-a42bbb7b887148c9****', example='vfw-a42bbb7b887148c91****', position='Query'),
}

model DeleteVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model DeleteVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can call the DeleteVpcFirewallControlPolicy operation to delete an access control policy from a specific policy group for a VPC firewall. Different access control policies are used for the VPC firewall that is used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewall that is used to protect each Express Connect circuit. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function deleteVpcFirewallControlPolicy(request: DeleteVpcFirewallControlPolicyRequest): DeleteVpcFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVpcFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeACLProtectTrendRequest {
  endTime?: string(name='EndTime', example='1670397599', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', example='223.95.87.130', position='Query'),
  startTime?: string(name='StartTime', example='1677050306', position='Query'),
}

model DescribeACLProtectTrendResponseBody = {
  inProtectCnt?: long(name='InProtectCnt', example='100'),
  interVPCProtectCnt?: long(name='InterVPCProtectCnt', example='0'),
  interval?: int32(name='Interval', example='86400'),
  outProtectCnt?: long(name='OutProtectCnt', example='200'),
  requestId?: string(name='RequestId', example='9063AB86-6FFA-5B2D-A16D-697C966DECA3'),
  totalProtectCnt?: long(name='TotalProtectCnt', example='300'),
  trendList?: [ 
    {
      protectCnt?: int32(name='ProtectCnt', example='100'),
      time?: long(name='Time', example='1697299200'),
    }
  ](name='TrendList'),
}

model DescribeACLProtectTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeACLProtectTrendResponseBody(name='body'),
}

async function describeACLProtectTrend(request: DescribeACLProtectTrendRequest): DescribeACLProtectTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeACLProtectTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAddressBookRequest {
  containPort?: string(name='ContainPort', description='The port that is included in the address book. This parameter takes effect only when the **GroupType** parameter is set to **port**.', example='80', position='Query'),
  currentPage: string(name='CurrentPage', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  groupType?: string(name='GroupType', description='The type of the address book. Valid values:

* **ip**: IP address book
* **domain**: domain address book
* **port**: port address book
* **tag**: Elastic Compute Service (ECS) tag-based address book
* **allCloud**: cloud service address book
* **threat**: threat intelligence address book

> If you do not specify a type, the domain address books and ECS tag-based address books are queried.', example='ip', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request. Valid values:

* **zh**: Chinese (default)
* **en**: English', example='zh', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.

Default value: 10. Maximum value: 50.', example='10', position='Query'),
  query?: string(name='Query', description='The query condition that is used to search for the address book.', example='192.0.XX.XX', position='Query'),
}

model DescribeAddressBookResponseBody = {
  acls?: [ 
    {
      addressList?: [ string ](name='AddressList', description='The addresses in the address book.'),
      addressListCount?: int32(name='AddressListCount', description='The number of addresses in the address book.', example='2'),
      autoAddTagEcs?: int32(name='AutoAddTagEcs', description='Indicates whether the public IP addresses of ECS instances are automatically added to the address book if the instances match the specified tags. The setting takes effect on both newly purchased ECS instances whose tag settings are complete and ECS instances whose tag settings are modified. Valid values:

* **1**: yes
* **0**: no', example='1'),
      description?: string(name='Description', description='The description of the address book.', example='my address book'),
      groupName?: string(name='GroupName', description='The name of the address book.', example='demo_address_book'),
      groupType?: string(name='GroupType', description='The type of the address book. Valid values:

* **ip**: IP address book
* **domain**: domain address book
* **port**: port address book
* **tag**: ECS tag-based address book
* **allCloud**: cloud service address book
* **threat**: threat intelligence address book', example='ip'),
      groupUuid?: string(name='GroupUuid', description='The unique ID of the address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
      referenceCount?: int32(name='ReferenceCount', description='The number of times that the address book is referenced.', example='3'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the ECS tag.', example='company'),
          tagValue?: string(name='TagValue', description='The value of the ECS tag.', example='admin'),
        }
      ](name='TagList', description='The details about the ECS tags that can be automatically added to the address book.'),
      tagRelation?: string(name='TagRelation', description='The logical relationship among ECS tags. Valid values:

* **and**: Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book.
* **or**: The public IP addresses of ECS instances that match any of the specified tags can be added to the address book.', example='and'),
    }
  ](name='Acls', description='The information about the address book.'),
  pageNo?: string(name='PageNo', description='The page number of the current page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B36F150A-1E27-43AA-B72C-D2AC712F09DA'),
  totalCount?: string(name='TotalCount', description='The total number of the returned address books.', example='100'),
}

model DescribeAddressBookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAddressBookResponseBody(name='body'),
}

/**
  * You can call the DescribeAddressBook operation to query the details about an address book for an access control policy.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeAddressBook(request: DescribeAddressBookRequest): DescribeAddressBookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAddressBook', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAssetListRequest {
  currentPage: string(name='CurrentPage', description='The page number. Valid values: 1 to 50.', example='1', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='4', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: long(name='MemberUid', description='The UID of the member that is added to Cloud Firewall.', example='258039427902****', position='Query'),
  newResourceTag?: string(name='NewResourceTag', description='The time when the asset was added. Valid values:

*   **discovered in 1 hour**: within one hour.
*   **discovered in 1 day**: within one day.
*   **discovered in 7 days**: within seven days.', example='discovered in 1 hour', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries per page. Valid values: 1 to 50.', example='10', position='Query'),
  regionNo?: string(name='RegionNo', description='The region ID of your Cloud Firewall.

> For more information about the regions, see [Supported regions](~~195657~~).', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **BastionHostEgressIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EIP', position='Query'),
  searchItem?: string(name='SearchItem', description='The instance ID or IP address of the asset.', example='192.0.XX.XX', position='Query'),
  sgStatus?: string(name='SgStatus', description='The status of the security group policy. Valid values:

*   **pass**: delivered
*   **block**: undelivered
*   **unsupport**: unsupported

> If you do not specify this parameter, the assets on which security group policies in all states take effect are queried.', example='pass', position='Query'),
  status?: string(name='Status', description='The status of the firewall. Valid values:

*   **open**: The firewall is enabled.
*   **opening**: The firewall is being enabled.
*   **closed**: The firewall is disabled.
*   **closing**: The firewall is being disabled.

> If you do not specify this parameter, the assets that are configured for firewalls in all states are queried.', example='open', position='Query'),
  type?: string(name='Type', description='This parameter is deprecated.', example='eip', position='Query'),
  userType?: string(name='UserType', description='The edition of Cloud Firewall. Valid values:

*   **buy**: a paid edition (default)
*   **free**: Free Edition', example='buy', position='Query'),
}

model DescribeAssetListResponseBody = {
  assets?: [ 
    {
      aliUid?: long(name='AliUid', description='The UID of the Alibaba Cloud account.

>  The value of this parameter indicates the management account to which the member is added.', example='158039427902****'),
      bindInstanceId?: string(name='BindInstanceId', description='The ID of the cloud resource with which the asset is associated.', example='i-8vbdrjrxzt78****'),
      bindInstanceName?: string(name='BindInstanceName', description='The instance name of the asset.', example='instance01'),
      createTimeStamp?: string(name='CreateTimeStamp', description='The timestamp when the asset is added to Cloud Firewall.', example='2023-02-28 10:29:58'),
      internetAddress?: string(name='InternetAddress', description='The public IP address of the server.', example='192.0.XX.XX'),
      intranetAddress?: string(name='IntranetAddress', description='The internal IP address of the server.', example='192.168.XX.XX'),
      ipVersion?: int32(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='4'),
      memberUid?: long(name='MemberUid', description='The UID of the member.', example='258039427902****'),
      name?: string(name='Name', description='The instance name of the asset that is protected by Cloud Firewall.', example='instance01'),
      newResourceTag?: string(name='NewResourceTag', description='The time when the asset was added. Valid values:

*   **discovered in 1 hour**: within one hour.
*   **discovered in 1 day**: within one day.
*   **discovered in 7 days**: within seven days.', example='discovered in 1 hour'),
      note?: string(name='Note', description='The remarks of the asset. Valid values:

*   **REGION_NOT_SUPPORT**: The region is not supported.
*   **NETWORK_NOT_SUPPORT**: The network is not supported.', example='REGION_NOT_SUPPORT'),
      protectStatus?: string(name='ProtectStatus', description='The status of the firewall. Valid values:

*   **open**: enabled.
*   **opening**: being enabled.
*   **closed**: disabled.
*   **closing**: being disabled.', example='open'),
      regionID?: string(name='RegionID', description='The ID of the region in which the asset resides.', example='cn-hangzhou'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether the firewall is supported in the region in which the asset resides. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resourceInstanceId?: string(name='ResourceInstanceId', description='The instance ID of the asset.', example='i-8vbdrjrxzt78****'),
      resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **BastionHostEgressIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EIP'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the asset. Valid values:

*   **low**: low
*   **middle**: medium
*   **hight**: high

>  The value of this parameter is returned only when the UserType parameter is set to free.', example='low'),
      sgStatus?: string(name='SgStatus', description='The status of the security group policy. Valid values:

*   **pass**: applied
*   **block**: not applied
*   **unsupport**: unsupported', example='block'),
      sgStatusTime?: long(name='SgStatusTime', description='The time when the status of the security group was last checked. The value is a UNIX timestamp. Unit: seconds.', example='1615082937'),
      syncStatus?: string(name='SyncStatus', description='Indicates whether traffic redirection is supported for the asset. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      type?: string(name='Type', description='This parameter is deprecated.', example='eip'),
    }
  ](name='Assets', description='The details about the assets that are protected by Cloud Firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: int32(name='TotalCount', description='The total number of the assets that are protected by Cloud Firewall.', example='12'),
}

model DescribeAssetListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeAssetListResponseBody(name='body'),
}

/**
  * You can call the DescribeAssetList operation to query the assets that are protected by Cloud Firewall.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeAssetList(request: DescribeAssetListRequest): DescribeAssetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAssetList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.

>  If you do not specify this parameter, access control policies of all action types are queried.', example='accept', position='Query'),
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****', position='Query'),
  currentPage: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1', position='Query'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

>  If you do not specify this parameter, access control policies that have descriptions are queried.', example='test', position='Query'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported. The value of this parameter depends on the value of the DestinationType parameter.

*   If DestinationType is set to `net`, the value of Destination must be a CIDR block. Example: 10.0.3.0/24.
*   If DestinationType is set to `domain`, the value of Destination must be a domain name. Example: aliyun.
*   If DestinationType is set to `group`, the value of Destination must be the name of an address book. Example: db_group.
*   If DestinationType is set to `location`, the value of Destination must be a location. Example: beijing.

>  If you do not specify this parameter, access control policies of all destination address types are queried.', example='192.0.XX.XX', position='Query'),
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version of the address in the access control policy. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='6', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.', example='10', position='Query'),
  proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

* **TCP**
* **UDP**
* **ICMP**
* **ANY**: all types of protocols

>  If you do not specify this parameter, access control policies of all protocol types are queried.', example='TCP', position='Query'),
  release?: string(name='Release', description='Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**: The access control policy is enabled.
*   **false**: The access control policy is disabled.', example='true', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported. The value of this parameter depends on the value of the SourceType parameter.

*   If SourceType is set to `net`, the value of Source must be a CIDR block. Example: 192.0.XX.XX/24.
*   If SourceType is set to `group`, the value of Source must be the name of an address book. Example: db_group. If the db_group address book does not contain addresses, all source addresses are queried.
*   If SourceType is set to `location`, the value of Source must be a location. Example: beijing.

>  If you do not specify this parameter, access control policies of all source address types are queried.', example='192.0.XX.XX', position='Query'),
}

model DescribeControlPolicyResponseBody = {
  pageNo?: string(name='PageNo', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='10'),
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****'),
      applicationId?: string(name='ApplicationId', description='The application ID in the access control policy.', example='10***'),
      applicationName?: string(name='ApplicationName', description='The type of the application that the access control policy supports. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL**
*   **VNC**
*   **ANY**: all types of applications', example='HTTP'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The names of applications.'),
      createTime?: long(name='CreateTime', description='The time at which the access control policy was created.', example='1761062400'),
      description?: string(name='Description', description='The description of the access control policy.', example='test'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='The ports in the destination port address book.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. The value of this parameter depends on the value of the DestinationType parameter. Valid values:

*   If **DestinationType** is set to **net**, the value of Destination is a CIDR block. Example: 192.0.XX.XX/24.
*   If **DestinationType** is set to **domain**, the value of Destination is a domain name. Example: aliyuncs.com.
*   If **DestinationType** is set to **group**, the value of Destination is the name of an address book. Example: db_group.
*   If **DestinationType** is set to **location**, the value of Destination is a location. For more information about location codes, see [AddControlPolicy](~~138867~~). Example: \\["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='The CIDR blocks in the destination address book.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more IP addresses
*   **tag**: an ECS tag-based address book that includes the IP addresses of the ECS instances with one or more specific tags
*   **domain**: an address book that includes one or more domain names
*   **threat**: an address book that includes one or more malicious IP addresses or domain names
*   **backsrc**: an address book that includes one or more back-to-origin addresses of Anti-DDoS Pro or Anti-DDoS Premium instances or WAF instances', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: destination CIDR block
*   **group**: destination address book
*   **domain**: destination domain name
*   **location**: destination location', example='net'),
      direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in'),
      dnsResult?: string(name='DnsResult', description='The DNS resolution result.', example='192.0.XX.XX,192.0.XX.XX'),
      dnsResultTime?: long(name='DnsResultTime', description='The timestamp of the DNS resolution result. The value is a UNIX timestamp. Unit: seconds.', example='1579261141'),
      endTime?: long(name='EndTime'),
      hitLastTime?: long(name='HitLastTime', description='The timestamp when the access control policy was last hit. The value is a UNIX timestamp. Unit: seconds.', example='1579261141'),
      hitTimes?: long(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      ipVersion?: int32(name='IpVersion', description='The IP version of the address in the access control policy. Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='6'),
      modifyTime?: long(name='ModifyTime', description='The time at which the access control policy was modified.', example='1761062400'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A small priority value indicates a high priority.', example='1'),
      proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**', example='TCP'),
      release?: string(name='Release', description='Indicates whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**: The access control policy is enabled.
*   **false**: The access control policy is disabled.', example='true'),
      repeatDays?: [ long ](name='RepeatDays'),
      repeatEndTime?: string(name='RepeatEndTime'),
      repeatStartTime?: string(name='RepeatStartTime'),
      repeatType?: string(name='RepeatType'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block. Example: 192.0.XX.XX/24.
*   If **SourceType** is set to `group`, the value of Source is the name of an address book. Example: db_group.
*   If **SourceType** is set to `location`, the value of Source is a location. For more information about location codes, see [AddControlPolicy](~~138867~~). Example: \\["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='The CIDR blocks in the source address book.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more IP addresses
*   **tag**: an Elastic Compute Service (ECS) tag-based address book that includes the IP addresses of the ECS instances with one or more specific tags
*   **domain**: an address book that includes one or more domain names
*   **threat**: an address book that includes one or more malicious IP addresses or domain names
*   **backsrc**: an address book that includes one or more back-to-origin addresses of Anti-DDoS Pro or Anti-DDoS Premium instances or Web Application Firewall (WAF) instances', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: source CIDR block
*   **group**: source address book
*   **location**: source location', example='net'),
      spreadCnt?: int32(name='SpreadCnt', description='The total quota consumed by the returned access control policies, which is the sum of the quota consumed by each policy.

Quota that is consumed by an access control policy = Number of source CIDR blocks × Number of destination CIDR blocks, destination locations, or IP addresses that are resolved from destination domain names × Number of applications × Number of ports.', example='10,000'),
      startTime?: long(name='StartTime'),
    }
  ](name='Policys', description='The details about the access control policy.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2****'),
  totalCount?: string(name='TotalCount', description='The total number of the returned access control policies.', example='100'),
}

model DescribeControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeControlPolicyResponseBody(name='body'),
}

/**
  * You can call the DescribeControlPolicy operation to query the details about access control policies by page.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeControlPolicy(request: DescribeControlPolicyRequest): DescribeControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefaultIPSConfigRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeDefaultIPSConfigResponseBody = {
  aiRules?: int32(name='AiRules'),
  basicRules?: int32(name='BasicRules'),
  ctiRules?: int32(name='CtiRules'),
  enableAllPatch?: int32(name='EnableAllPatch'),
  enableDefault?: int32(name='EnableDefault'),
  patchRules?: int32(name='PatchRules'),
  requestId?: string(name='RequestId'),
  ruleClass?: int32(name='RuleClass'),
  runMode?: int32(name='RunMode'),
}

model DescribeDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDefaultIPSConfigResponseBody(name='body'),
}

async function describeDefaultIPSConfig(request: DescribeDefaultIPSConfigRequest): DescribeDefaultIPSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefaultIPSConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainResolveRequest {
  domain: string(name='Domain', description='The domain name whose DNS record you want to query.', example='www.aliyundoc.com', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='6', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model DescribeDomainResolveResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  resolveResult?: {
    ipAddrs?: string(name='IpAddrs', description='The IP address to which the domain name is resolved. Multiple IP addresses are separated by commas (,).', example='11.1.X.X,12.1.X.X'),
    updateTime?: long(name='UpdateTime', description='The time when the domain name was resolved. The value of this parameter is a timestamp. Unit: seconds.', example='1579091739'),
  }(name='ResolveResult', description='The details about the DNS record of the domain name.'),
}

model DescribeDomainResolveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainResolveResponseBody(name='body'),
}

/**
  * You can use this operation to query the DNS record of a domain name. This operation can retrieve DNS records only from Alibaba Cloud DNS. Before you can call this operation, make sure that your domain name is hosted on Alibaba Cloud DNS.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeDomainResolve(request: DescribeDomainResolveRequest): DescribeDomainResolveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainResolve', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceMembersRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Default value: **1**.', example='1', position='Query'),
  memberDesc?: string(name='MemberDesc', description='The remarks of the member. The remarks must be 1 to 256 characters in length.', example='renewal', position='Query'),
  memberDisplayName?: string(name='MemberDisplayName', description='The name of the member.', example='cloudfirewall_2', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member.', example='258039427902****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page.

Default value: **20**.', example='20', position='Query'),
}

model DescribeInstanceMembersResponseBody = {
  members?: [ 
    {
      createTime?: int32(name='CreateTime', description='The time when the member was added to Cloud Firewall. The value is a timestamp. Unit: seconds.', example='1615189819'),
      memberDesc?: string(name='MemberDesc', description='The remarks of the member.', example='renewal'),
      memberDisplayName?: string(name='MemberDisplayName', description='The name of the member.', example='cloudfirewall_2'),
      memberStatus?: string(name='MemberStatus', description='The status of the member. Valid values:

*   **normal**
*   **deleting**', example='normal'),
      memberUid?: long(name='MemberUid', description='The UID of the member.', example='258039427902****'),
      modifyTime?: int32(name='ModifyTime', description='The time when the member was last modified. The value is a timestamp. Unit: seconds.', example='1615189819'),
    }
  ](name='Members', description='The information about the member.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of the members.', example='20'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A531AE1A-FBA2-48B6-BAB8-84D02BD409EE'),
}

model DescribeInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceMembersResponseBody(name='body'),
}

/**
  * You can use this operation to query the information about members in Cloud Firewall.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeInstanceMembers(request: DescribeInstanceMembersRequest): DescribeInstanceMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceMembers', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInternetOpenIpRequest {
  assetsInstanceId?: string(name='AssetsInstanceId', example='i-uf6faknmuby7ezht****', position='Query'),
  assetsInstanceName?: string(name='AssetsInstanceName', example='launch-advisor-2023****', position='Query'),
  assetsType?: string(name='AssetsType', example='EcsEIP', position='Query'),
  currentPage: string(name='CurrentPage', example='1', position='Query'),
  endTime?: string(name='EndTime', example='1663640336', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize: string(name='PageSize', example='10', position='Query'),
  port?: string(name='Port', example='80', position='Query'),
  publicIp?: string(name='PublicIp', example='203.0.113.1', position='Query'),
  regionNo?: string(name='RegionNo', example='cn-shanghai', position='Query'),
  riskLevel?: string(name='RiskLevel', example='2', position='Query'),
  serviceName?: string(name='ServiceName', example='SSH', position='Query'),
  startTime?: string(name='StartTime', example='1681957629', position='Query'),
}

model DescribeInternetOpenIpResponseBody = {
  dataList?: [ 
    {
      aclRecommendDetail?: string(name='AclRecommendDetail'),
      assetsInstanceId?: string(name='AssetsInstanceId', example='i-bp1ix9w22kv6aew9****'),
      assetsName?: string(name='AssetsName', example='launch-advisor-2023****'),
      assetsType?: string(name='AssetsType', example='EcsEIP'),
      detailNum?: int32(name='DetailNum', example='5'),
      hasAclRecommend?: boolean(name='HasAclRecommend', example='true'),
      portList?: [ string ](name='PortList'),
      publicIp?: string(name='PublicIp', example='203.0.113.1'),
      regionNo?: string(name='RegionNo', example='cn-shenzhen'),
      riskLevel?: int32(name='RiskLevel', example='3'),
      riskReason?: string(name='RiskReason'),
      serviceNameList?: [ string ](name='ServiceNameList'),
      trafficPercent1Day?: string(name='TrafficPercent1Day', example='11.1'),
      trafficPercent30Day?: string(name='TrafficPercent30Day', example='99.9'),
      trafficPercent7Day?: string(name='TrafficPercent7Day', example='77.7'),
    }
  ](name='DataList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='40'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='6B780BD6-282C-51A9-A8E6-59F636BAFA54'),
}

model DescribeInternetOpenIpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInternetOpenIpResponseBody(name='body'),
}

async function describeInternetOpenIp(request: DescribeInternetOpenIpRequest): DescribeInternetOpenIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInternetOpenIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInternetTrafficTrendRequest {
  direction?: string(name='Direction', example='in', position='Query'),
  endTime: string(name='EndTime', example='1674958929', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  sourceCode: string(name='SourceCode', example='yundun', position='Query'),
  sourceIp?: string(name='SourceIp', example='101.80.171.196', deprecated='true', position='Query'),
  srcPrivateIP?: string(name='SrcPrivateIP', example='10.100.134.60', position='Query'),
  srcPublicIP?: string(name='SrcPublicIP', example='47.112.210.136', position='Query'),
  startTime: string(name='StartTime', example='1670307484', position='Query'),
  trafficType?: string(name='TrafficType', example='max', position='Query'),
}

model DescribeInternetTrafficTrendResponseBody = {
  avgInBps?: long(name='AvgInBps', example='6114152'),
  avgOutBps?: long(name='AvgOutBps', example='70148993'),
  avgSession?: long(name='AvgSession', example='79013'),
  avgTotalBps?: long(name='AvgTotalBps', example='2306'),
  dataList?: [ 
    {
      inBps?: long(name='InBps', example='187'),
      inBytes?: long(name='InBytes', example='235'),
      inPps?: long(name='InPps', example='2'),
      newConn?: long(name='NewConn', example='27'),
      outBps?: long(name='OutBps', example='45'),
      outBytes?: long(name='OutBytes', example='1123'),
      outPps?: long(name='OutPps', example='2'),
      sessionCount?: long(name='SessionCount', example='27'),
      time?: int32(name='Time', example='1659405600'),
      totalBps?: long(name='TotalBps'),
    }
  ](name='DataList'),
  maxBandwidthTime?: long(name='MaxBandwidthTime', example='1672736400'),
  maxInBps?: long(name='MaxInBps', example='10275643'),
  maxOutBps?: long(name='MaxOutBps', example='395188'),
  maxSession?: long(name='MaxSession', example='931641'),
  maxTotalBps?: long(name='MaxTotalBps', example='89783147'),
  requestId?: string(name='RequestId', example='C7E837BE-0379-565E-B7B4-DE595C8D337C'),
  totalBytes?: long(name='TotalBytes', example='963227674958'),
  totalInBytes?: long(name='TotalInBytes', example='41536824243873'),
  totalOutBytes?: long(name='TotalOutBytes', example='2660894567178'),
  totalSession?: long(name='TotalSession', example='1061449'),
}

model DescribeInternetTrafficTrendResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInternetTrafficTrendResponseBody(name='body'),
}

async function describeInternetTrafficTrend(request: DescribeInternetTrafficTrendRequest): DescribeInternetTrafficTrendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInternetTrafficTrend', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInvadeEventListRequest {
  assetsIP?: string(name='AssetsIP', description='The IP address of the affected asset.', example='10.0.XX.XX', position='Query'),
  assetsInstanceId?: string(name='AssetsInstanceId', description='The ID of the instance.', example='ins_1321_asedb_****', position='Query'),
  assetsInstanceName?: string(name='AssetsInstanceName', description='The name of the instance.', example='ECS_test', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1', position='Query'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds. If you do not specify this parameter, the query ends at the current time.', example='1656837360', position='Query'),
  eventKey?: string(name='EventKey', description='The ID of the breach awareness event.', example='69d189e2-ec17-4676-a2fe-02969234****', position='Query'),
  eventName?: string(name='EventName', description='The name of the breach awareness event.', example='event_test', position='Query'),
  eventUuid?: string(name='EventUuid', description='The UUID of the breach awareness event.', example='fadd-dfdd-****', position='Query'),
  isIgnore?: string(name='IsIgnore', description='Specifies whether the breach awareness event is ignored. Valid values:

*   **true**: The breach awareness event is ignored.
*   **false**: The breach awareness event is not ignored.', example='true', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: long(name='MemberUid', description='The ID of the member.', example='135809047715****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 10.', example='1', position='Query'),
  processStatusList?: [ int32 ](name='ProcessStatusList', description='The handling status of breach awareness events.', position='Query'),
  riskLevel?: [ int32 ](name='RiskLevel', description='The risk levels.', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds. If you do not specify this parameter, the query starts from 30 days before the current time.', example='1656750960', position='Query'),
}

model DescribeInvadeEventListResponseBody = {
  eventList?: [ 
    {
      assetsInstanceId?: string(name='AssetsInstanceId', description='The ID of the affected asset.', example='i-ECS****'),
      assetsInstanceName?: string(name='AssetsInstanceName', description='The name of the affected asset.', example='ECS_test'),
      assetsType?: string(name='AssetsType', description='The type of the affected asset. Valid values:

*   **BastionHostIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EcsPublicIp'),
      eventKey?: string(name='EventKey', description='The ID of the breach awareness event.', example='69d189e2-ec17-4676-a2fe-02969234****'),
      eventName?: string(name='EventName', description='The name of the breach awareness event.', example='event_test'),
      eventSrc?: string(name='EventSrc', description='The type of the breach awareness event. Valid values:

*   **IPS**: intrusion prevention event
*   **offline**: disconnection event', example='IPS'),
      eventUuid?: string(name='EventUuid', description='The UUID of the breach awareness event.', example='fadd-dfdd-****'),
      firstTime?: int32(name='FirstTime', description='The time when the breach awareness event first occurred. The value is a UNIX timestamp. Unit: seconds.', example='1656750960'),
      isIgnore?: boolean(name='IsIgnore', description='Indicates whether the breach awareness event is ignored. Valid values:

*   **true**: The breach awareness event is ignored.
*   **false**: The breach awareness event is not ignored.', example='true'),
      lastTime?: int32(name='LastTime', description='The time when the breach awareness event last occurred. The value is a UNIX timestamp. Unit: seconds.', example='1656837360'),
      memberUid?: string(name='MemberUid', description='The ID of the member.', example='135809047715****'),
      privateIP?: string(name='PrivateIP', description='The private IP address of the affected asset.', example='192.168.XX.XX'),
      processStatus?: int32(name='ProcessStatus', description='The handling status of the breach awareness event. Valid values:

*   **0**: unhandled
*   **20**: handled', example='20'),
      publicIP?: string(name='PublicIP', description='The public IP address of the affected asset.', example='198.51.XX.XX'),
      publicIpType?: string(name='PublicIpType', description='The type of the affected asset. Valid values:

*   **BastionHostIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the EIP of an ECS instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an ENI
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of an SLB instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the HAVIP', example='EcsPublicIp'),
      riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
    }
  ](name='EventList', description='An array that consists of breach awareness events.'),
  highLevelPercent?: int32(name='HighLevelPercent', description='The percentage of high-risk events.', example='40'),
  lowLevelPercent?: int32(name='LowLevelPercent', description='The percentage of low-risk events.', example='20'),
  middleLevelPercent?: int32(name='MiddleLevelPercent', description='The percentage of medium-risk events.', example='40'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of breach awareness events.', example='40'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
}

model DescribeInvadeEventListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInvadeEventListResponseBody(name='body'),
}

async function describeInvadeEventList(request: DescribeInvadeEventListRequest): DescribeInvadeEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInvadeEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept', position='Query'),
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='303f0697-2a21-4e43-b142-4a77adf7b358', position='Query'),
  currentPage?: string(name='CurrentPage', description='The page number.', example='1', position='Query'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

> If you do not specify this parameter, the descriptions of all policies are queried.', position='Query'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported. The value of this parameter varies based on the value of the DestinationType parameter.

*   If DestinationType is set to `net`, the value of Destination must be a CIDR block. Example: 10.0.3.0/24.
*   If DestinationType is set to `domain`, the value of Destination must be a domain name. Example: aliyun.
*   If DestinationType is set to `group`, the value of Destination must be the name of an address book. Example: db_group.
*   If DestinationType is set to `location`, the value of Destination is a location. For more information about location codes, see [AddControlPolicy](~~474128~~). Example: \\["BJ11", "ZB"].

> If you do not specify this parameter, all types of destination addresses are queried.', example='x.x.x.x/32', position='Query'),
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **out**: outbound traffic', example='out', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all types of protocols

> If you do not specify this parameter, access control policies of all protocol types are queried.', example='ANY', position='Query'),
  release?: string(name='Release', description='Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported. The value of this parameter varies based on the value of the SourceType parameter.

*   If SourceType is set to `net`, the value of Source must be a CIDR block. Example: 192.0.XX.XX/24.
*   If SourceType is set to `group`, the value of Source must be the name of an address book. Example: db_group. If the db_group address book does not contain addresses, all source addresses are queried.
*   If SourceType is set to `location`, the value of Source must be a location. Example: beijing.

> If you do not specify this parameter, all types of source addresses are queried.', example='1.1.1.1/32', position='Query'),
}

model DescribeNatFirewallControlPolicyResponseBody = {
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.'),
      createTime?: long(name='CreateTime', description='The time at which the access control policy was created.', example='1761062400'),
      description?: string(name='Description', description='The description of the access control policy.'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='The ports in the destination port address book.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. The value of this parameter varies based on the value of the DestinationType parameter. Valid values:

*   If **DestinationType** is set to **net**, the value of Destination is a CIDR block. Example: 192.0.XX.XX/24.
*   If **DestinationType** is set to **domain**, the value of Destination is a domain name. Example: aliyuncs.com.
*   If **DestinationType** is set to **group**, the value of Destination is the name of an address book. Example: db_group.
*   If **DestinationType** is set to **location**, the value of Destination is a location. For more information about location codes, see [AddControlPolicy](~~138867~~). Example: \\["BJ11", "ZB"].', example='x.x.x.x/32'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='The CIDR blocks in the destination address book.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more CIDR blocks
*   **domain**: an address book that includes one or more domain names', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**', example='net'),
      dnsResult?: string(name='DnsResult', description='The DNS resolution result.', example='111.0.XX.XX,112.0.XX.XX'),
      dnsResultTime?: long(name='DnsResultTime', description='The time of the DNS resolution result. The value is a timestamp. Unit: seconds.', example='1579261141'),
      domainResolveType?: int32(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **1**: Fully qualified domain name (FQDN)-based
*   **2**: Domain Name System (DNS)-based
*   **3**: FQDN and DNS-based', example='1'),
      endTime?: long(name='EndTime'),
      hitLastTime?: long(name='HitLastTime', description='The times when the access control policy was last hit. The value is a timestamp. Unit: seconds.', example='1579261141'),
      hitTimes?: int32(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      modifyTime?: long(name='ModifyTime', description='The time at which the access control policy was modified.', example='1761062400'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1'),
      proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**', example='TCP'),
      release?: string(name='Release', description='Indicates whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true'),
      repeatDays?: [ long ](name='RepeatDays'),
      repeatEndTime?: string(name='RepeatEndTime'),
      repeatStartTime?: string(name='RepeatStartTime'),
      repeatType?: string(name='RepeatType'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block. Example: 192.0.XX.XX/24.
*   If **SourceType** is set to `group`, the value of Source is the name of an address book. Example: db_group.
*   If **SourceType** is set to `location`, the value of Source is a location. For more information about location codes, see [AddControlPolicy](~~138867~~). Example: \\["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='The CIDR blocks in the source address book.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address book in the access control policy. The value is fixed as **ip**. The value indicates an address book that includes one or more CIDR blocks.', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address book in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location', example='net'),
      spreadCnt?: string(name='SpreadCnt', description='The total quota consumed by the returned access control policies, which is the sum of the quota consumed by each policy. The quota that is consumed by an access control policy is calculated based on the following formula: Quota that is consumed by an access control policy = Number of source CIDR blocks × Number of destination CIDR blocks, regions, or resolved domain names × *Number of applications* × Number of ports.', example='10,000'),
      startTime?: long(name='StartTime'),
    }
  ](name='Policys', description='The information about the access control policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F183567D-8A52-5BAE-9472-F1C427378C28'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='28'),
}

model DescribeNatFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNatFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can use this operation to query the information about all access control policies that are created for NAT firewalls by page.
  *
 */
async function describeNatFirewallControlPolicy(request: DescribeNatFirewallControlPolicyRequest): DescribeNatFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNatFirewallPolicyPriorUsedRequest {
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **out**: outbound traffic', example='out', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy. Valid values:

*   **4**: IPv4 (default)', example='4', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx', position='Query'),
}

model DescribeNatFirewallPolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority for the access control policy.', example='28'),
  requestId?: string(name='RequestId', description='The request ID.', example='BCDF3907-1011-5504-B015-CC7603C0E6B6'),
  start?: int32(name='Start', description='The highest priority for the access control policy.', example='1'),
}

model DescribeNatFirewallPolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeNatFirewallPolicyPriorUsedResponseBody(name='body'),
}

/**
  * You can use this operation to query the priority range of access control policies that are created for a NAT firewall.
  *
 */
async function describeNatFirewallPolicyPriorUsed(request: DescribeNatFirewallPolicyPriorUsedRequest): DescribeNatFirewallPolicyPriorUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNatFirewallPolicyPriorUsed', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOutgoingDestinationIPRequest {
  applicationName?: string(name='ApplicationName', description='The application type in the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**

>  The value of this parameter depends on the value of Proto. If you set Proto to TCP, you can set ApplicationNameList to any valid value. If you specify both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.', example='FTP', position='Query'),
  categoryId?: string(name='CategoryId', description='The ID of the service to which the destination IP address belongs. This parameter is left empty by default. Valid values:

*   **All**: all services
*   **RiskDomain**: risky domain names
*   **RiskIP**: risky IP addresses
*   **AliYun**: Alibaba Cloud services
*   **NotAliYun**: third-party services', example='All', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1', position='Query'),
  dstIP?: string(name='DstIP', description='The destination IP address in the outbound connection that is initiated to access a domain name.', example='10.0.XX.XX', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656923760', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  order?: string(name='Order', description='The order in which you want to sort the queried information. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 10.', example='10', position='Query'),
  port?: string(name='Port', description='The port number.', example='80', position='Query'),
  privateIP?: string(name='PrivateIP', description='The private IP address of the ECS instance that initiates the outbound connection.', example='192.168.XX.XX', position='Query'),
  publicIP?: string(name='PublicIP', description='The public IP address of the Elastic Compute Service (ECS) instance that initiates the outbound connection.', example='192.0.XX.XX', position='Query'),
  sort?: string(name='Sort', description='The field based on which you want to sort the queried information. Valid values:

*   **SessionCount**: the number of requests. This is the default value.
*   **TotalBytes**: the total volume of traffic.', example='SessionCount', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656837360', position='Query'),
  tagIdNew?: string(name='TagIdNew', description='The ID of the tag. Valid values:

*   **AliYun**: Alibaba Cloud service
*   **RiskDomain**: risky domain name
*   **RiskIP**: risky IP address
*   **TrustedDomain**: trusted website
*   **AliPay**: Alipay
*   **DingDing**: DingTalk
*   **WeChat**: WeChat
*   **QQ**: Tencent QQ
*   **SecurityService**: security service
*   **Microsoft**: Microsoft
*   **Amazon**: Amazon Web Services (AWS)
*   **Pan**: cloud disk
*   **Map**: map
*   **Code**: code hosting
*   **SystemService**: system service
*   **Taobao**: Taobao
*   **Google**: Google
*   **ThirdPartyService**: third-party service
*   **FirstFlow**: the first time
*   **Downloader**: malicious download
*   **Alexa Top1M**: popular website
*   **Miner**: mining pool
*   **Intelligence**: threat intelligence
*   **DDoS**: DDoS trojan
*   **Ransomware**: ransomware
*   **Spyware**: spyware
*   **Rogue**: rogue software
*   **Botnet**: botnet
*   **Suspicious**: suspicious website
*   **C\\&C**: command and control (C\\&C)
*   **Gang**: gang
*   **CVE**: Common Vulnerabilities and Exposures (CVE)
*   **Backdoor**: webshell
*   **Phishing**: phishing website
*   **APT**: advanced persistent threat (APT) attack
*   **Supply Chain Attack**: supply chain attack
*   **Malicious software**: malware', example='AliYun', position='Query'),
}

model DescribeOutgoingDestinationIPResponseBody = {
  dstIPList?: [ 
    {
      aclCoverage?: string(name='AclCoverage', description='Indicates whether an access control policy is configured. Valid values:

*   **Uncovered**: No access control policies are configured.
*   **FullCoverage**: An access control policy is configured.', example='Uncovered'),
      aclRecommendDetail?: string(name='AclRecommendDetail', description='The suggestion in an access control policy.', example='Allows the traffic.'),
      aclStatus?: string(name='AclStatus', description='The state of the access control policy. Valid values:

*   **Normal**: healthy
*   **Abnormal**: unhealthy', example='Normal'),
      addressGroupList?: [ 
        {
          addressGroupName?: string(name='AddressGroupName', description='The name of the address book.', example='IP address book'),
          addressGroupUUID?: string(name='AddressGroupUUID', description='The UUID of the address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
        }
      ](name='AddressGroupList', description='The information about the address book.'),
      applicationPortList?: [ 
        {
          applicationName?: string(name='ApplicationName', description='The application type in the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**

>  The value of this parameter depends on the value of Proto. If you set Proto to TCP, you can set ApplicationNameList to any valid value. If you specify both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.', example='HTTP'),
          port?: int32(name='Port', description='The port of the application.', example='80'),
        }
      ](name='ApplicationPortList', description='An array that consists of application ports.'),
      categoryClassId?: string(name='CategoryClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
      categoryId?: string(name='CategoryId', description='The ID of the service to which the destination IP address belongs. Valid values:

*   **Aliyun**: Alibaba Cloud services
*   **NotAliyun**: third-party services', example='Aliyun'),
      categoryName?: string(name='CategoryName', description='The type of the service to which the destination IP address belongs. Valid values:

*   **Alibaba Cloud services**
*   **third-party services**', example='Alibaba Cloud services'),
      dstIP?: string(name='DstIP', description='The destination IP address in the outbound connection that is initiated to access a domain name.', example='10.0.XX.XX'),
      groupName?: string(name='GroupName', description='The name of the group to which the access control policy belongs.', example='Rule_test'),
      hasAcl?: string(name='HasAcl', description='Indicates whether an access control policy is configured. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      hasAclRecommend?: boolean(name='HasAclRecommend', description='Indicates whether an access control policy is recommended. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      inBytes?: long(name='InBytes', description='The inbound traffic. Unit: bytes.', example='472'),
      isMarkNormal?: boolean(name='IsMarkNormal', description='Indicates whether the destination IP address is added to a whitelist. Valid values:

*   **true**: added
*   **false**: not added', example='true'),
      outBytes?: long(name='OutBytes', description='The outbound traffic. Unit: bytes.', example='965'),
      ruleId?: string(name='RuleId', description='The UUID of the access control policy.', example='fadsfd-dfadf-df****'),
      ruleName?: string(name='RuleName', description='The name of the access control policy.', example='Default rule'),
      securityReason?: string(name='SecurityReason', description='The reason why the domain name is secure.', example='Intelligent policy: The destination domain name belongs to Alibaba Cloud Computing Co., Ltd. The domain name mainly provides services for Alibaba Cloud. No security risks are found, and you can add the domain name to the whitelist.'),
      securitySuggest?: string(name='SecuritySuggest', description='The suggestion to handle the traffic of the domain name in outbound connections. Valid values:

*   **pass**: allow
*   **alert**: deny
*   **drop**: monitor', example='pass'),
      sessionCount?: long(name='SessionCount', description='The number of requests.', example='4'),
      tagList?: [ 
        {
          classId?: string(name='ClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
          riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
          tagDescribe?: string(name='TagDescribe', description='The description of the tag.', example='Tag that indicates traffic is allowed'),
          tagId?: string(name='TagId', description='The ID of the tag.', example='AliYun'),
          tagName?: string(name='TagName', description='The name of the tag.', example='Tag that indicates traffic is allowed'),
        }
      ](name='TagList', description='The tags.'),
      totalBytes?: string(name='TotalBytes', description='The total volume of traffic. Unit: bytes.', example='800'),
    }
  ](name='DstIPList', description='The destination IP addresses in outbound connections.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  totalCount?: int32(name='TotalCount', description='The total number of destination IP addresses in outbound connections.', example='50'),
}

model DescribeOutgoingDestinationIPResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOutgoingDestinationIPResponseBody(name='body'),
}

async function describeOutgoingDestinationIP(request: DescribeOutgoingDestinationIPRequest): DescribeOutgoingDestinationIPResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOutgoingDestinationIP', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOutgoingDomainRequest {
  categoryId?: string(name='CategoryId', description='The type of the service. This parameter is empty by default. Valid values:

*   **All**: all services
*   **RiskDomain**: risky domain names
*   **RiskIP**: risky IP addresses
*   **AliYun**: Alibaba Cloud services
*   **NotAliYun**: third-party services', example='All', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1', position='Query'),
  domain?: string(name='Domain', description='The domain name in outbound connections.', example='www.aliyundoc.com', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656750960', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  order?: string(name='Order', description='The order in which you want to sort the query results. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 100.', example='10', position='Query'),
  publicIP?: string(name='PublicIP', description='The public IP address of the Elastic Compute Service (ECS) instance that initiates outbound connections.', example='192.0.XX.XX', position='Query'),
  sort?: string(name='Sort', description='The field based on which you want to sort the query results. Valid values:

*   **SessionCount**: the number of requests. This is the default value.
*   **TotalBytes**: the total volume of traffic.', example='SessionCount', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656664560', position='Query'),
  tagIdNew?: string(name='TagIdNew', description='The ID of the tag. Valid values:

*   **AliYun**: Alibaba Cloud service
*   **RiskDomain**: risky domain name
*   **RiskIP**: risky IP address
*   **TrustedDomain**: trusted website
*   **AliPay**: Alipay
*   **DingDing**: DingTalk
*   **WeChat**: WeChat
*   **QQ**: Tencent QQ
*   **SecurityService**: security service
*   **Microsoft**: Microsoft
*   **Amazon**: Amazon Web Services (AWS)
*   **Pan**: cloud disk
*   **Map**: map
*   **Code**: code hosting
*   **SystemService**: system service
*   **Taobao**: Taobao
*   **Google**: Google
*   **ThirdPartyService**: third-party service
*   **FirstFlow**: the first time when an outbound connection is initiated
*   **Downloader**: malicious download
*   **Alexa Top1M**: popular website
*   **Miner**: mining pool
*   **Intelligence**: threat intelligence
*   **DDoS**: DDoS trojan
*   **Ransomware**: ransomware
*   **Spyware**: spyware
*   **Rogue**: rogue software
*   **Botnet**: botnet
*   **Suspicious**: suspicious website
*   **C\\&C**: command and control (C\\&C)
*   **Gang**: gang
*   **CVE**: Common Vulnerabilities and Exposures (CVE)
*   **Backdoor**: webshell
*   **Phishing**: phishing website
*   **APT**: advanced persistent threat (APT) attack
*   **Supply Chain Attack**: supply chain attack
*   **Malicious software**: malware', example='AliYun', position='Query'),
}

model DescribeOutgoingDomainResponseBody = {
  domainList?: [ 
    {
      aclCoverage?: string(name='AclCoverage', description='Indicates whether an access control policy is configured. Valid values:

*   **Uncovered**: no
*   **FullCoverage**: yes', example='Uncovered'),
      aclRecommendDetail?: string(name='AclRecommendDetail', description='The suggestion in an access control policy.', example='Allows the traffic.'),
      aclStatus?: string(name='AclStatus', description='The state of the access control policy. Valid values:

*   **normal**: healthy
*   **abnormal**: unhealthy', example='Normal'),
      addressGroupName?: string(name='AddressGroupName', description='The name of the address book.', example='The address book for outbound connections'),
      addressGroupUUID?: string(name='AddressGroupUUID', description='The UUID of the address book.', example='fdad-fdafa-dafa-dfa****'),
      business?: string(name='Business', description='The website service.', example='Alibaba Cloud'),
      categoryClassId?: string(name='CategoryClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
      categoryId?: string(name='CategoryId', description='The type ID of the service to which the domain name belongs. Valid values:

*   **Aliyun**: Alibaba Cloud services
*   **NotAliyun**: third-party services', example='Aliyun'),
      categoryName?: string(name='CategoryName', description='The type of the service to which the domain name belongs. Valid values:

*   **Alibaba Cloud services**
*   **Third-party services**', example='Alibaba Cloud services'),
      domain?: string(name='Domain', description='The domain name in outbound connections.', example='www.aliyundoc.com'),
      groupName?: string(name='GroupName', description='The name of the group to which the access control policy belongs.', example='Group of addresses in outbound connections'),
      hasAcl?: string(name='HasAcl', description='Indicates whether an `access control policy` is configured for the domain name. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      hasAclRecommend?: boolean(name='HasAclRecommend', description='Indicates whether an access control policy is recommended. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      inBytes?: long(name='InBytes', description='The volume of inbound traffic.', example='3214'),
      isMarkNormal?: boolean(name='IsMarkNormal', description='Indicates whether the domain name is marked as normal. Valid values:

*   **true**: normal
*   **false**: abnormal', example='true'),
      organization?: string(name='Organization', description='The name of the organization.', example='Alibaba Cloud Computing Co., Ltd.'),
      outBytes?: long(name='OutBytes', description='The volume of outbound traffic.', example='4582'),
      ruleId?: string(name='RuleId', description='The ID of the access control policy.', example='add-dfadf-f****'),
      ruleName?: string(name='RuleName', description='The name of the access control policy.', example='Default rule'),
      securityReason?: string(name='SecurityReason', description='The reason why the domain name is secure.', example='Intelligent policy: The destination domain name belongs to Alibaba Cloud Computing Co., Ltd. The domain name mainly provides services for Alibaba Cloud. No security risks are found, and you can add the domain name to the whitelist.'),
      securitySuggest?: string(name='SecuritySuggest', description='The suggestion to handle the traffic of the domain name in outbound connections. Valid values:

*   **pass**: allow
*   **alert**: monitor
*   **drop**: deny', example='pass'),
      sessionCount?: long(name='SessionCount', description='The number of requests.', example='12'),
      tagList?: [ 
        {
          classId?: string(name='ClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
          riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='3'),
          tagDescribe?: string(name='TagDescribe', description='The description of the tag.', example='Tag indicating that the domain name is added to the whitelist'),
          tagId?: string(name='TagId', description='The ID of the tag.', example='AliYun'),
          tagName?: string(name='TagName', description='The name of the tag.', example='Tag indicating that the domain name is added to the whitelist'),
        }
      ](name='TagList', description='An array that consists of tags.'),
      totalBytes?: string(name='TotalBytes', description='The total volume of traffic. Unit: bytes.', example='800'),
    }
  ](name='DomainList', description='An array that consists of the domain names in outbound connections.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  totalCount?: int32(name='TotalCount', description='The total number of the domain names in outbound connections.', example='132'),
}

model DescribeOutgoingDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeOutgoingDomainResponseBody(name='body'),
}

async function describeOutgoingDomain(request: DescribeOutgoingDomainRequest): DescribeOutgoingDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOutgoingDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyAdvancedConfigRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model DescribePolicyAdvancedConfigResponseBody = {
  internetSwitch?: string(name='InternetSwitch', description='Indicates whether the strict mode is enabled for the access control policy. Valid values:

*   **on**: The strict mode is enabled.
*   **off**: The strict mode is disabled.', example='off'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model DescribePolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyAdvancedConfigResponseBody(name='body'),
}

/**
  * You can call the DescribePolicyAdvancedConfig operation to query whether the strict mode is enabled for an access control policy.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describePolicyAdvancedConfig(request: DescribePolicyAdvancedConfigRequest): DescribePolicyAdvancedConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyAdvancedConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribePolicyPriorUsedRequest {
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in', position='Query'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='6', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model DescribePolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority of existing access control policies.

>  The value -1 indicates the lowest priority.', example='150'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  start?: int32(name='Start', description='The highest priority of existing access control policies.

>  The value 0 indicates the highest priority.', example='-1'),
}

model DescribePolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePolicyPriorUsedResponseBody(name='body'),
}

/**
  * You can call the DescribePolicyPriorUsed operation to query the priority range of the access control policies that match specific query conditions.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describePolicyPriorUsed(request: DescribePolicyPriorUsedRequest): DescribePolicyPriorUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePolicyPriorUsed', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskEventGroupRequest {
  attackApp?: [ string ](name='AttackApp', description='The names of attacked applications. Set the value in the `["AttackApp1","AttackApp2"]` format.', example='["MySql","DNS"]', position='Query'),
  attackType?: string(name='AttackType', description='The attack type of the intrusion events. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leak
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: trojan backdoor
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell

> If you do not specify this parameter, the intrusion events of all attack types are queried.', example='1', position='Query'),
  buyVersion?: long(name='BuyVersion', description='The edition of Cloud Firewall that you purchase. Valid values:

*   **2**: Premium Edition
*   **3**: Enterprise Edition
*   **4**: Ultimate Edition
*   **10**: Cloud Firewall that uses the pay-as-you-go billing method', example='10', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  dataType: string(name='DataType', description='The type of the risk events.\\
Set the value to **session**, which indicates intrusion events.', example='session', position='Query'),
  direction?: string(name='Direction', description='The direction of the traffic for the intrusion events. Valid values:

*   **in**: inbound
*   **out**: outbound

> If you do not specify this parameter, the intrusion events that are recorded for both inbound and outbound traffic are queried.', example='in', position='Query'),
  dstIP?: string(name='DstIP', description='The destination IP address to query. If you specify this parameter, all intrusion events with the specified destination IP address are queried.', example='192.0.XX.XX', position='Query'),
  dstNetworkInstanceId?: string(name='DstNetworkInstanceId', description='The ID of the destination VPC.

> If the FirewallType parameter is set to VpcFirewall, you must specify this parameter.', example='vpc-uf6e9a9zyokj2ywuo****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1534408267', position='Query'),
  eventName?: string(name='EventName', description='The name of the intrusion event.', example='Webshell communication', position='Query'),
  firewallType?: string(name='FirewallType', description='The type of the firewall. Valid values:

*   **VpcFirewall**: virtual private cloud (VPC) firewall
*   **InternetFirewall**: Internet firewall (default)', example='InternetFirewall', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  noLocation?: string(name='NoLocation', description='Specifies whether to query the information about the geographical locations of IP addresses.

*   **true**: does not query the information about the geographical locations of IP addresses.
*   **false**: queries the information about the geographical locations of IP addresses. This is the default value.', example='false', position='Query'),
  order?: string(name='Order', description='The order in which you want to sort the results. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: **6**. Maximum value: **10**.', example='6', position='Query'),
  ruleResult?: string(name='RuleResult', description='The status of the firewall. Valid values:

*   **1**: alerting
*   **2**: blocking

> If you do not specify this parameter, all intrusion events that are detected by the firewall are queried, regardless of the firewall status.', example='1', position='Query'),
  ruleSource?: string(name='RuleSource', description='The module of the rule that is used to detect the intrusion events. Valid values:

*   **1**: basic protection
*   **2**: virtual patching
*   **4**: threat intelligence

> If you do not specify this parameter, the intrusion events that are detected by all rules are queried.', example='1', position='Query'),
  sort?: string(name='Sort', description='The field based on which you want to sort the results. Valid values:

*   **VulLevel**: The results are sorted based on the risk level field. This is the default value.
*   **LastTime**: The results are sorted based on the most recent occurrence time.', example='LastTime', position='Query'),
  srcIP?: string(name='SrcIP', description='The source IP address to query. If you specify this parameter, all intrusion events with the specified source IP address are queried.', example='192.0.XX.XX', position='Query'),
  srcNetworkInstanceId?: string(name='SrcNetworkInstanceId', description='The ID of the source VPC.

> If the FirewallType parameter is set to VpcFirewall, you must specify this parameter.', example='vpc-uf6e9a9zyokj2ywuo****', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1534408189', position='Query'),
  vulLevel?: string(name='VulLevel', description='The risk level of the intrusion events. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high

> If you do not specify this parameter, the intrusion events that are at all risk levels are queried.', example='1', position='Query'),
}

model DescribeRiskEventGroupResponseBody = {
  dataList?: [ 
    {
      attackApp?: string(name='AttackApp', description='The name of the attacked application.', example='MySql'),
      attackType?: int32(name='AttackType', description='The attack type of the intrusion event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leak
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: trojan backdoor
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell', example='1'),
      description?: string(name='Description', description='The description of the intrusion event.', example='Path traversal attacks are detected in the web access requests over HTTP.'),
      direction?: string(name='Direction', description='The direction of the traffic for the intrusion event. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
      dstIP?: string(name='DstIP', description='The destination IP address that is included in the intrusion event.', example='192.0.XX.XX'),
      eventCount?: int32(name='EventCount', description='The number of intrusion events.', example='100'),
      eventId?: string(name='EventId', description='The ID of the intrusion event.', example='2b58efae-4c4b-4d96-9544-a586fb1f****'),
      eventName?: string(name='EventName', description='The name of the intrusion event.', example='Path traversal attack'),
      firstEventTime?: int32(name='FirstEventTime', description='The time when the intrusion event was first detected. The value is a UNIX timestamp. Unit: seconds.', example='1534408189'),
      IPLocationInfo?: {
        cityId?: string(name='CityId', description='The ID of the city to which the IP address belongs.', example='510100'),
        cityName?: string(name='CityName', description='The name of the city to which the IP address belongs.', example='Chengdu, Sichuan Province'),
        countryId?: string(name='CountryId', description='The ID of the country to which the IP address belongs.', example='CN'),
        countryName?: string(name='CountryName', description='The name of the country to which the IP address belongs.', example='China'),
      }(name='IPLocationInfo', description='The geographical information about the IP address. The value is a struct that contains the following parameters: **CityId**, **CityName**, **CountryId**, and **CountryName**.\\
****************'),
      lastEventTime?: int32(name='LastEventTime', description='The time when the intrusion event was last detected. The value is a UNIX timestamp. Unit: seconds.', example='1534408267'),
      resourcePrivateIPList?: [ 
        {
          regionNo?: string(name='RegionNo', description='The ID of the region to which the private IP address belongs.', example='cn-hangzhou'),
          resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of the instance that uses the private IP address.', example='i-wz92jf4scg2zb74p****'),
          resourceInstanceName?: string(name='ResourceInstanceName', description='The name of the instance that uses the private IP address.', example='LD-shenzhen-zy****'),
          resourcePrivateIP?: string(name='ResourcePrivateIP', description='The private IP address.', example='10.255.XX.XX'),
        }
      ](name='ResourcePrivateIPList', description='The information about the private IP address in the intrusion event. The value is an array that contains the following parameters: **RegionNo**, **ResourceInstanceId**, **ResourceInstanceName**, and **ResourcePrivateIP**.\\
****************'),
      resourceType?: string(name='ResourceType', description='The type of the public IP address in the intrusion event. Valid values:

*   **EIP**: the elastic IP address (EIP)
*   **EcsPublicIP**: the public IP address of an Elastic Compute Service (ECS) instance
*   **EcsEIP**: the EIP of an ECS instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **NatEIP**: the EIP of a NAT gateway', example='EcsPublicIP'),
      ruleId?: string(name='RuleId', description='The ID of the rule that is used to detect the intrusion event.', example='1000****'),
      ruleResult?: int32(name='RuleResult', description='The status of the firewall. Valid values:

*   **1**: alerting
*   **2**: blocking', example='2'),
      ruleSource?: int32(name='RuleSource', description='The module of the rule that is used to detect the intrusion event. Valid values:

*   **1**: basic protection
*   **2**: virtual patching
*   **4**: threat intelligence', example='1'),
      srcIP?: string(name='SrcIP', description='The source IP address that is included in the intrusion event.', example='192.0.XX.XX'),
      srcIPTag?: string(name='SrcIPTag', description='The tag added to the source IP address. The tag helps identify whether the source IP address is a back-to-origin IP address for a cloud service.', example='WAF Back-to-origin Address'),
      srcPrivateIPList?: [ string ](name='SrcPrivateIPList', description='An array that consists of the source private IP addresses in the intrusion event.'),
      tag?: string(name='Tag', description='The tag added to the threat intelligence that is provided for major events.', example='Threat intelligence provided for major events'),
      vpcDstInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.', example='i-wz92jf4scg2zb74p****'),
        ecsInstanceName?: string(name='EcsInstanceName', description='The name of the ECS instance.', example='LD-shenzhen-zy****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC.', example='vpc-uf6e9a9zyokj2ywuo****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the VPC.', example='VPC-SH-TX****'),
        regionNo?: string(name='RegionNo', description='The ID of the region in which the destination VPC resides.', example='cn-hangzhou'),
      }(name='VpcDstInfo', description='The information about the destination VPC of the intrusion event. The value is a struct that contains the following parameters: **EcsInstanceId**, **EcsInstanceName**, **NetworkInstanceId**, **NetworkInstanceName**, and **RegionNo**.\\
********************'),
      vpcSrcInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.', example='i-wz92jf4scg2zb74p****'),
        ecsInstanceName?: string(name='EcsInstanceName', description='The name of the ECS instance.', example='LD-shenzhen-zy****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC.', example='vpc-uf6e9a9zyokj2ywuo****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the VPC.', example='VPC-SH-TX****'),
        regionNo?: string(name='RegionNo', description='The ID of the region in which the source VPC resides.', example='cn-hangzhou'),
      }(name='VpcSrcInfo', description='The information about the source VPC of the intrusion event. The value is a struct that contains the following parameters: **EcsInstanceId**, **EcsInstanceName**, **NetworkInstanceId**, **NetworkInstanceName**, and **RegionNo**.\\
********************'),
      vulLevel?: int32(name='VulLevel', description='The risk level of the intrusion event. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
    }
  ](name='DataList', description='An array that consists of the details of the intrusion events.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B14757D0-4640-4B44-AC67-7F558FE7E6EF'),
  totalCount?: int32(name='TotalCount', description='The total number of risk events.', example='20'),
}

model DescribeRiskEventGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskEventGroupResponseBody(name='body'),
}

/**
  * You can call the DescribeRiskEventGroup operation to query and download the details of intrusion events. We recommend that you query the details of 5 to 10 intrusion events at a time. If you do not need to query the geographical information about IP addresses, you can set the NoLocation parameter to true to prevent query timeout.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeRiskEventGroup(request: DescribeRiskEventGroupRequest): DescribeRiskEventGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskEventGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRiskEventPayloadRequest {
  dstIP?: string(name='DstIP', description='The destination IP address to query. If you specify this parameter, all intrusion events with the specified destination IP address are queried.', example='203.0.113.2', position='Query'),
  dstVpcId?: string(name='DstVpcId', description='The ID of the destination VPC to query. If you specify this parameter, all intrusion events that contain the specified ID of the destination VPC are queried.', example='vpc-uf6jr1klwqb60dyn2****', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a timestamp. Unit: seconds.', example='1681288980', position='Query'),
  firewallType?: string(name='FirewallType', description='The type of the firewall. Valid values:

*   **VpcFirewall**: virtual private cloud (VPC) firewall
*   **InternetFirewall** (default): Internet firewall', example='InternetFirewall', position='Query'),
  publicIP?: string(name='PublicIP', description='The public IP address. If you specify this parameter, all intrusion events that contain the specified public IP address are queried.', example='203.0.113.3', position='Query'),
  srcIP?: string(name='SrcIP', description='The source IP address to query. If you specify this parameter, all intrusion events from the specified source IP address are queried.', example='203.0.113.1', position='Query'),
  srcVpcId?: string(name='SrcVpcId', description='The ID of the source VPC to query. If you specify this parameter, all intrusion events that contain the specified ID of the source VPC are queried.', example='vpc-wz9j2lqyo15udw5nt****', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The value is a timestamp. Unit: seconds.', example='1669533617', position='Query'),
  UUID?: string(name='UUID', description='The UUID of the intrusion event.', example='e62c25e0-1073-46bd-9567-b8f12b3d****', position='Query'),
}

model DescribeRiskEventPayloadResponseBody = {
  dstIP?: string(name='DstIP', description='The destination IP address of the intrusion event.', example='203.0.113.1'),
  dstPort?: int32(name='DstPort', description='The destination port of the intrusion event.', example='8080'),
  dstVpcId?: string(name='DstVpcId', description='The destination VPC ID of the intrusion event.', example='vpc-bp10w5nb30r4jzfyc****'),
  payload?: string(name='Payload', description='The attack payload of the intrusion event.', example='302902010004067075626c6963a01c0204036a5f43020100020100300e300c06082b060102010101000500'),
  payloadLen?: int32(name='PayloadLen', description='The length of the attack payload of the intrusion event.', example='457'),
  proto?: string(name='Proto', description='The protocol type of intrusion event. Valid values:

*   **TCP**
*   **UDP**', example='TCP'),
  realIp?: string(name='RealIp', description='The HTTP X-Real-IP field.', example='203.0.113.3'),
  requestId?: string(name='RequestId', description='The request ID.', example='68055BA4-D8BD-5611-AC49-C651E619A12E'),
  srcIP?: string(name='SrcIP', description='The source IP address of the intrusion event.', example='203.0.113.2'),
  srcPort?: int32(name='SrcPort', description='The source port of the intrusion event.', example='54360'),
  srcVpcId?: string(name='SrcVpcId', description='The source VPC ID of the intrusion event.', example='vpc-t4nlt09olhpazpoeg****'),
  xForwardFor?: string(name='XForwardFor', description='The HTTP X-Forwarded-For field.', example='203.0.113.4'),
}

model DescribeRiskEventPayloadResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRiskEventPayloadResponseBody(name='body'),
}

async function describeRiskEventPayload(request: DescribeRiskEventPayloadRequest): DescribeRiskEventPayloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRiskEventPayload', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrFirewallPolicyBackUpAssociationListRequest {
  firewallId?: string(name='FirewallId', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', position='Query'),
}

model DescribeTrFirewallPolicyBackUpAssociationListResponseBody = {
  policyAssociationBackupConfigs?: [ 
    {
      candidateId?: string(name='CandidateId'),
      candidateName?: string(name='CandidateName'),
      candidateType?: string(name='CandidateType', example='VPC'),
      currentRouteTableId?: string(name='CurrentRouteTableId'),
      originalRouteTableId?: string(name='OriginalRouteTableId'),
    }
  ](name='PolicyAssociationBackupConfigs'),
  requestId?: string(name='RequestId', example='C264A756-9B48-57E3-B312-716941E146C6'),
}

model DescribeTrFirewallPolicyBackUpAssociationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrFirewallPolicyBackUpAssociationListResponseBody(name='body'),
}

async function describeTrFirewallPolicyBackUpAssociationList(request: DescribeTrFirewallPolicyBackUpAssociationListRequest): DescribeTrFirewallPolicyBackUpAssociationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrFirewallPolicyBackUpAssociationList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrFirewallV2RoutePolicyListRequest {
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  firewallId?: string(name='FirewallId', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  policyId?: string(name='PolicyId', position='Query'),
}

model DescribeTrFirewallV2RoutePolicyListResponseBody = {
  requestId?: string(name='RequestId', example='95EB5F3A-67FE-5780-92BD-5ECBA772AB7E'),
  totalCount?: string(name='TotalCount'),
  trFirewallRoutePolicies?: [ 
    {
      destCandidateList?: [ 
        {
          candidateId?: string(name='CandidateId'),
          candidateType?: string(name='CandidateType', example='VPC'),
        }
      ](name='DestCandidateList'),
      policyDescription?: string(name='PolicyDescription'),
      policyName?: string(name='PolicyName'),
      policyStatus?: string(name='PolicyStatus', example='opened'),
      policyType?: string(name='PolicyType', example='fullmesh'),
      srcCandidateList?: [ 
        {
          candidateId?: string(name='CandidateId'),
          candidateType?: string(name='CandidateType', example='VPC'),
        }
      ](name='SrcCandidateList'),
      trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId'),
    }
  ](name='TrFirewallRoutePolicies'),
}

model DescribeTrFirewallV2RoutePolicyListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrFirewallV2RoutePolicyListResponseBody(name='body'),
}

async function describeTrFirewallV2RoutePolicyList(request: DescribeTrFirewallV2RoutePolicyListRequest): DescribeTrFirewallV2RoutePolicyListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrFirewallV2RoutePolicyList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrFirewallsV2DetailRequest {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-a5a6b89f46764928****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
}

model DescribeTrFirewallsV2DetailResponseBody = {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-37nddhri7jf0d2****'),
  firewallDescription?: string(name='FirewallDescription', description='The description of the VPC firewall.', example='VPC Firewall'),
  firewallEniId?: string(name='FirewallEniId', description='The ID of the Elastic Network Interface (ENI) with which the VPC firewall is associated.', example='eni-uf621u00nafypeex****'),
  firewallEniVpcId?: string(name='FirewallEniVpcId', description='The ID of the VPC to which the ENI is attached.', example='vpc-2zeppcci782zeh2bk****'),
  firewallEniVswitchId?: string(name='FirewallEniVswitchId', description='The ID of the vSwitch with which the ENI is associated.', example='vsw-uf6ptq1kl1c1d9pw9****'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-9c7c711abdfa4d80****'),
  firewallName?: string(name='FirewallName', description='The name of the VPC firewall.', example='cloudfirewall-manual'),
  firewallStatus?: string(name='FirewallStatus', description='The status of the VPC firewall. Valid values:

*   Creating
*   Deleting
*   Ready', example='Ready'),
  firewallSubnetCidr?: string(name='FirewallSubnetCidr', description='The subnet CIDR block of the VPC in which the ENI of the firewall is stored in automatic mode.', example='10.0.1.0/24'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
  firewallVpcCidr?: string(name='FirewallVpcCidr', description='The CIDR block that is allocated to the VPC created for the VPC firewall in automatic mode.', example='10.0.0.0/16'),
  regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='7E53A7FB-3EB9-5E33-8E50-B8F417D1E02B'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed'),
  trAttachmentMasterCidr?: string(name='TrAttachmentMasterCidr', description='The primary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.2.0/24'),
  trAttachmentSlaveCidr?: string(name='TrAttachmentSlaveCidr', description='The secondary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.3.0/24'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-wz9y8sgug8b1xb416****'),
}

model DescribeTrFirewallsV2DetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrFirewallsV2DetailResponseBody(name='body'),
}

async function describeTrFirewallsV2Detail(request: DescribeTrFirewallsV2DetailRequest): DescribeTrFirewallsV2DetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrFirewallsV2Detail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrFirewallsV2ListRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-rig0t5zi96crkl****', position='Query'),
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: **1**.', example='1', position='Query'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-f1799baa9e254651****', position='Query'),
  firewallName?: string(name='FirewallName', description='The name of the VPC firewall.', position='Query'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

>  If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10', position='Query'),
  regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-hangzhou', position='Query'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode

>  If you do not specify this parameter, VPC firewalls in all routing modes are queried.', example='managed', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-uf6egtvyaedvt20xl****', position='Query'),
}

model DescribeTrFirewallsV2ListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1471E2EC-F706-5F11-A79B-BD583ACB8297'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='6'),
  vpcTrFirewalls?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-03f8s0z052ka3v****'),
      cenName?: string(name='CenName', description='The name of the CEN instance.', example='cen_swas'),
      firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-99bc4f0fc88b4d00****'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

>  If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='1'),
      }(name='IpsConfig', description='The information about the intrusion prevention system (IPS) configuration.'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='171761785151****'),
      precheckStatus?: string(name='PrecheckStatus', description='Indicates whether the VPC firewall can be automatically enabled. Valid values:

*   **passed**: yes
*   **failed**: no
*   **unknown**', example='passed'),
      protectedResource?: {
        count?: int32(name='Count', description='The number of protected resources.', example='1'),
        peerTrList?: [ string ](name='PeerTrList', description='The protected peer transit routers.'),
        vbrList?: [ string ](name='VbrList', description='The protected virtual border routers (VBRs).'),
        vpcList?: [ string ](name='VpcList', description='The protected VPCs.'),
        vpnList?: [ string ](name='VpnList', description='The protected VPN gateways.'),
      }(name='ProtectedResource', description='The protected resources.'),
      regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-hangzhou'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **RegionDisable**: VPC Firewall is not supported in the region of the network instance. You cannot create a VPC firewall for the network instance.
*   **Empty string**: You can create a VPC firewall for the network instance.', example='RegionDisable'),
      routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-2vcmhjs88nil55fvu****'),
      unprotectedResource?: {
        count?: int32(name='Count', description='The number of unprotected resources.', example='1'),
        peerTrList?: [ string ](name='PeerTrList', description='The unprotected peer transit routers.'),
        vbrList?: [ string ](name='VbrList', description='The unprotected VBRs.'),
        vpcList?: [ string ](name='VpcList', description='The unprotected VPCs.'),
        vpnList?: [ string ](name='VpnList', description='The unprotected VPN gateways.'),
      }(name='UnprotectedResource', description='The unprotected resources.'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.'),
    }
  ](name='VpcTrFirewalls', description='The VPC firewalls.'),
}

model DescribeTrFirewallsV2ListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrFirewallsV2ListResponseBody(name='body'),
}

async function describeTrFirewallsV2List(request: DescribeTrFirewallsV2ListRequest): DescribeTrFirewallsV2ListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrFirewallsV2List', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrFirewallsV2RouteListRequest {
  currentPage?: string(name='CurrentPage', example='1', position='Query'),
  firewallId?: string(name='FirewallId', example='vfw-tr-8bcfa0f2f12d411e****', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  pageSize?: string(name='PageSize', example='10', position='Query'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', example='policy-7d5c672e37ee4175****', position='Query'),
}

model DescribeTrFirewallsV2RouteListResponseBody = {
  firewallRouteDetailList?: [ 
    {
      trFirewallRouteDestination?: string(name='TrFirewallRouteDestination', example='192.168.10.0/25'),
      trFirewallRouteNexthop?: string(name='TrFirewallRouteNexthop', example='tr-attach-hnxab1y0pxn16p****'),
      trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', example='policy-04ecbbc6720d4f90****'),
      trFirewallRouteTableId?: string(name='TrFirewallRouteTableId', example='vtb-2zeockxxxorv0mnhz****'),
    }
  ](name='FirewallRouteDetailList'),
  requestId?: string(name='RequestId', example='ABF190A2-B4D0-53F6-995A-5690A721F91C'),
}

model DescribeTrFirewallsV2RouteListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeTrFirewallsV2RouteListResponseBody(name='body'),
}

async function describeTrFirewallsV2RouteList(request: DescribeTrFirewallsV2RouteListRequest): DescribeTrFirewallsV2RouteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrFirewallsV2RouteList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserAssetIPTrafficInfoRequest {
  assetIP: string(name='AssetIP', description='The IP address of the asset.', example='192.0.XX.XX', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  trafficTime: string(name='TrafficTime', description='The point in time to query. The value is a UNIX timestamp. Unit: seconds.', example='1656923760', position='Query'),
}

model DescribeUserAssetIPTrafficInfoResponseBody = {
  endTime?: long(name='EndTime', description='The end of the time range that is queried. The value is a UNIX timestamp. Unit: seconds.', example='1656923760'),
  inBps?: long(name='InBps', description='The network throughput, which indicates the inbound traffic rate. Unit: bit/s.', example='4520'),
  inPps?: long(name='InPps', description='The network throughput, which indicates the inbound packet rate. Unit: packets per second (pps).', example='233'),
  newConn?: long(name='NewConn', description='The number of new connections.', example='43'),
  outBps?: long(name='OutBps', description='The network throughput, which indicates the outbound traffic rate. Unit: bit/s.', example='4180'),
  outPps?: long(name='OutPps', description='The network throughput, which indicates the outbound packet rate. Unit: pps.', example='224'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  sessionCount?: long(name='SessionCount', description='The number of requests.', example='50'),
  startTime?: long(name='StartTime', description='The beginning of the time range that is queried. The value is a UNIX timestamp. Unit: seconds.', example='1656837360'),
}

model DescribeUserAssetIPTrafficInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserAssetIPTrafficInfoResponseBody(name='body'),
}

async function describeUserAssetIPTrafficInfo(request: DescribeUserAssetIPTrafficInfoRequest): DescribeUserAssetIPTrafficInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserAssetIPTrafficInfo', 'GET', '/', 'json', false, 'json', request);
}

model DescribeUserIPSWhitelistRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserIPSWhitelistResponseBody = {
  ipv6Whitelists?: [ 
    {
      direction?: long(name='Direction'),
      listType?: long(name='ListType'),
      listValue?: string(name='ListValue'),
      whiteListValue?: [ string ](name='WhiteListValue'),
      whiteType?: long(name='WhiteType'),
    }
  ](name='Ipv6Whitelists'),
  requestId?: string(name='RequestId'),
  whitelists?: [ 
    {
      direction?: long(name='Direction'),
      listType?: long(name='ListType'),
      listValue?: string(name='ListValue'),
      whiteListValue?: [ string ](name='WhiteListValue'),
      whiteType?: long(name='WhiteType'),
    }
  ](name='Whitelists'),
}

model DescribeUserIPSWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeUserIPSWhitelistResponseBody(name='body'),
}

async function describeUserIPSWhitelist(request: DescribeUserIPSWhitelistRequest): DescribeUserIPSWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserIPSWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallAclGroupListRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus', description='Specifies whether VPC firewalls are configured. Valid values:

*   **notconfigured**: VPC firewalls are not configured.
*   **configured**: VPC firewalls are configured.
*   If this parameter is left empty, all policy groups of access control policies are queried.', example='configured', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10', position='Query'),
}

model DescribeVpcFirewallAclGroupListResponseBody = {
  aclGroupList?: [ 
    {
      aclGroupId?: string(name='AclGroupId', description='The ID of the policy group.

Valid values:

*   If the VPC firewall is used to protect a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\*\\*\\*\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the ID of the VPC firewall instance.

    Example: vfw-a42bbb7b887148c9\\*\\*\\*\\*', example='vfw-a42bbb7b887148c9****'),
      aclGroupName?: string(name='AclGroupName', description='The name of the policy group. Valid values:

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter is the name of the CEN instance.
*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the name of the VPC firewall instance.', example='group_test'),
      aclRuleCount?: int32(name='AclRuleCount'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
    }
  ](name='AclGroupList', description='An array that consists of the information about the policy group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: int32(name='TotalCount', description='The total number of the policy groups that are returned.', example='1'),
}

model DescribeVpcFirewallAclGroupListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallAclGroupListResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallAclGroupList operation to query the information about all policy groups of access control policies that are created for VPC firewalls.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallAclGroupList(request: DescribeVpcFirewallAclGroupListRequest): DescribeVpcFirewallAclGroupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallAclGroupList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallCenDetailRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC for which the VPC firewall is created.', example='vpc-2zefk9fbn8j7v585g****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](~~345777~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model DescribeVpcFirewallCenDetailResponseBody = {
  connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **cen**, which indicates CEN instances.', example='cen'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: enabled
*   **closed**: disabled
*   **notconfigured**: not configured', example='opened'),
  firewallVpc?: {
    allowConfiguration?: int32(name='AllowConfiguration', description='Indicates whether you can specify a CIDR block when you create a VPC firewall for a Basic Edition transit router of a CEN instance. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
    vpcCidr?: string(name='VpcCidr', description='The CIDR block of the VPC.', example='10.0.0.0/8'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp1245k5oagy2bp74****'),
    vswitchCidr?: string(name='VswitchCidr', description='The CIDR block of the vSwitch.', example='10.0.0.1/24'),
    vswitchId?: string(name='VswitchId', description='The vSwitch ID.', example='vsw-bp1sqg9wms9wxcs1****'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-i'),
  }(name='FirewallVpc', description='The VPC that is automatically created for the firewall.'),
  localVpc?: {
    attachmentId?: string(name='AttachmentId', description='The ID of the connection between two network instances.', example='tr-attach-sxig7bye51fid5****'),
    attachmentName?: string(name='AttachmentName', description='The name of the connection between two network instances.', example='Local test'),
    defendCidrList?: [ string ](name='DefendCidrList', description='An array consisting of the CIDR blocks that are protected by the VPC firewall.'),
    eniList?: [ 
      {
        eniId?: string(name='EniId', description='The ID of the ENI that belongs to the VPC.', example='eni-8vbhfosfqv2rff42****'),
        eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the ENI that belongs to the VPC.', example='192.168.XX.XX'),
        eniVSwitchId?: string(name='EniVSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-wz9viido7j436b0n1****'),
      }
    ](name='EniList', description='The Elastic Network Interfaces (ENIs).'),
    manualVSwitchId?: string(name='ManualVSwitchId', description='The ID of the specified vSwitch when the routing mode is manual.', example='vsw-zeq4o875u****'),
    networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC for which the VPC firewall is created.', example='vpc-2zefk9fbn8j7v585g****'),
    networkInstanceName?: string(name='NetworkInstanceName', description='The name of the network instance.', example='Test VPC'),
    networkInstanceType?: string(name='NetworkInstanceType', description='The type of the network instance. The value is fixed as **VPC**.', example='VPC'),
    ownerId?: string(name='OwnerId', description='The UID of the Alibaba Cloud account to which the VPC belongs.', example='158039427902****'),
    regionNo?: string(name='RegionNo', description='The ID of the region in which the VPC resides.', example='cn-hangzhou'),
    routeMode?: string(name='RouteMode', description='The routing mode. Valid values:

*   auto: automatic mode
*   manual: manual mode', example='auto'),
    supportManualMode?: string(name='SupportManualMode', description='Indicates whether the manual routing mode is supported. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
    transitRouterId?: string(name='TransitRouterId', description='The instance ID of the CEN transit router.', example='tr-2zetwxskej633l3u1****'),
    transitRouterType?: string(name='TransitRouterType', description='The edition of the CEN transit router. Valid values:

*   **Basic**: Basic Edition
*   **Enterprise**: Enterprise Edition', example='Basic'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries for the VPC.'),
        routeTableId?: string(name='RouteTableId', description='The route table ID of the VPC.', example='vtb-1234'),
      }
    ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
    vpcName?: string(name='VpcName', description='The name of the VPC.', example='Test instance'),
  }(name='LocalVpc', description='The details about the VPC.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125g4d2'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
}

model DescribeVpcFirewallCenDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallCenDetailResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallCenDetail operation to query the details about a VPC firewall. The VPC firewall protects access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallCenDetail(request: DescribeVpcFirewallCenDetailRequest): DescribeVpcFirewallCenDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallCenDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallCenListRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-x5jayxou71ad73****', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1', position='Query'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured but is not enabled.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account. The member is also an Alibaba Cloud account.', example='258039427902****', position='Query'),
  networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the network instance.', example='vpc-8vbwbo90rq0anm6t****', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 10. Maximum value: 50.', example='10', position='Query'),
  regionNo?: string(name='RegionNo', description='The region ID of the VPC.

> For more information about the regions, see [Supported regions](~~195657~~).', example='cn-hangzhou', position='Query'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **auto**: automatic mode
*   **manual**: manual mode

> If you do not specify this parameter, VPC firewalls in all routing modes are queried.', example='auto', position='Query'),
  transitRouterType?: string(name='TransitRouterType', description='The type of the transit router. Valid values:

*   **Basic**: Basic Edition transit router
*   **Enterprise**: Enterprise Edition transit router', example='Basic', position='Query'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****', position='Query'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall', position='Query'),
}

model DescribeVpcFirewallCenListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k8g2'),
  totalCount?: int32(name='TotalCount', description='The total number of VPC firewalls.', example='10'),
  vpcFirewalls?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-x5jayxou71ad73****'),
      cenName?: string(name='CenName', description='The name of the CEN instance.', example='Test CEN instance'),
      connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as cen, which indicates a CEN instance.', example='cen'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
      }(name='IpsConfig', description='The information about the intrusion prevention system (IPS) configuration.'),
      localVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether the VPC is granted the required permissions. The value is fixed as **authorized**, which indicates that the VPC is granted the required permissions.', example='authorized'),
        defendCidrList?: [ string ](name='DefendCidrList', description='An array consisting of the CIDR blocks that are protected by the VPC firewall.'),
        manualVSwitchId?: string(name='ManualVSwitchId', description='The ID of the specified vSwitch when the routing mode is manual.', example='vsw-zeq4o875u****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the network instance.', example='vpc-2zefk9fbn8j7v585g****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the network instance.', example='Test VPC'),
        networkInstanceType?: string(name='NetworkInstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**', example='VPC'),
        ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the VPC.', example='cn-hangzhou'),
        routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **auto**: automatic mode
*   **manual**: manual mode', example='auto'),
        supportManualMode?: string(name='SupportManualMode', description='Indicates whether the manual routing mode is supported. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
        transitRouterType?: string(name='TransitRouterType', description='The edition of the CEN transit router. Valid values:

*   **Basic**: Basic Edition transit router
*   **Enterprise**: Enterprise Edition transit router', example='Basic'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries for the VPC.'),
            routeTableId?: string(name='RouteTableId', description='The route table ID of the VPC.', example='vtb-1234'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the VPC.', example='Test instance'),
      }(name='LocalVpc', description='The details about the VPC.'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is manged by your Alibaba Cloud account. The member is also an Alibaba Cloud account.', example='258039427902****'),
      precheckStatus?: string(name='PrecheckStatus', description='Indicates whether the VPC firewall can be automatically enabled to protect VPC traffic based on route learning. Valid values:

*   **passed**: The VPC firewall can be automatically enabled.
*   **failed**: The VPC firewall cannot be automatically enabled.
*   **unknown**: The VPC firewall is in an unknown state.', example='failed'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **Unauthorized**: Cloud Firewall is not authorized to access the VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **RegionDisable**: VPC Firewall is not supported in the region of the VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **OpsDisable**: You are not allowed to create the VPC firewall.
*   **VbrNotSupport**: The VPC firewall cannot be created for a VBR that is attached to the CEN instance.
*   Empty string: You can create a VPC firewall for the network instance.', example='Unauthorized'),
      vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
    }
  ](name='VpcFirewalls', description='An array that consists of the details about the VPC firewall.'),
}

model DescribeVpcFirewallCenListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallCenListResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallCenList operation to query VPC firewalls. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallCenList(request: DescribeVpcFirewallCenListRequest): DescribeVpcFirewallCenListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallCenList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: blocks the traffic.
*   **log**: monitors the traffic.

> If you do not specify this parameter, access control policies are queried based on all actions.', example='accept', position='Query'),
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='4037fbf7-3e39-4634-92a4-d0155247****', position='Query'),
  currentPage: string(name='CurrentPage', description='The number of the page to return.', example='1', position='Query'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.', example='test', position='Query'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported.

> The value of this parameter can be a CIDR block or an address book name.', example='192.0.XX.XX/24', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  pageSize: string(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.', example='10', position='Query'),
  proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all protocol types

> If you do not specify this parameter, access control policies of all protocol types are queried.', example='TCP', position='Query'),
  release?: string(name='Release', description='Specifies whether the access control policy is enabled. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: The access control policy is enabled.
*   **false**: The access control policy is disabled.', example='true', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported.

> The value of this parameter can be a CIDR block or an address book name.', example='192.0.XX.XX/24', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. Valid values:

*   If the VPC firewall protects the traffic between two VPCs that are connected by using a CEN instance, the value of this parameter must be the ID of the CEN instance.
*   If the VPC firewall protects the traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallAclGroupList](~~159760~~) operation to query the ID.', example='vfw-a42bbb7b887148c9****', position='Query'),
}

model DescribeVpcFirewallControlPolicyResponseBody = {
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: blocks the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='4037fbf7-3e39-4634-92a4-d0155247****'),
      applicationId?: string(name='ApplicationId', description='The application ID in the access control policy.', example='10**'),
      applicationName?: string(name='ApplicationName', description='The application type in the access control policy. Valid values:

*   **HTTP**
*   **HTTPS**
*   **MySQL**
*   **SMTP**
*   **SMTPS**
*   **RDP**
*   **VNC**
*   **SSH**
*   **Redis**
*   **MQTT**
*   **MongoDB**
*   **Memcache**
*   **SSL**
*   **ANY**: all application types', example='HTTP'),
      applicationNameList?: [ string ](name='ApplicationNameList'),
      createTime?: long(name='CreateTime'),
      description?: string(name='Description', description='The description of the access control policy.', example='test'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='An array that consists of the ports in the destination port address book of the access control policy.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. Valid values:

*   If **DestinationType** is set to `net`, the value of this parameter is a CIDR block.
*   If **DestinationType** is set to `domain`, the value of this parameter is a domain name.
*   If **DestinationType** is set to `group`, the value of this parameter is an address book name.', example='192.0.XX.XX/24'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='An array that consists of the CIDR blocks in the destination address book of the access control policy.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more CIDR blocks
*   **domain**: an address book that includes one or more domain names', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name', example='net'),
      endTime?: long(name='EndTime'),
      hitLastTime?: long(name='HitLastTime'),
      hitTimes?: long(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
      modifyTime?: long(name='ModifyTime'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1'),
      proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all protocol types', example='TCP'),
      release?: string(name='Release', description='Indicates whether the access control policy is enabled. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: The access control policy is enabled.
*   **false**: The access control policy is disabled.', example='true'),
      repeatDays?: [ long ](name='RepeatDays'),
      repeatEndTime?: string(name='RepeatEndTime'),
      repeatStartTime?: string(name='RepeatStartTime'),
      repeatType?: string(name='RepeatType'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of this parameter is a CIDR block.
*   If **SourceType** is set to `group`, the value of this parameter is an address book name.', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='An array that consists of the CIDR blocks in the source address book of the access control policy.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address in the access control policy. The value is fixed as **ip**. The value indicates an address book that includes one or more CIDR blocks.', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net'),
      spreadCnt?: long(name='SpreadCnt'),
      startTime?: long(name='StartTime'),
    }
  ](name='Policys', description='The information about the access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: string(name='TotalCount', description='The total number of access control policies returned.', example='20'),
}

model DescribeVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallControlPolicy operation to query the information about all access control policies that are created for a specified VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallControlPolicy(request: DescribeVpcFirewallControlPolicyRequest): DescribeVpcFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallDefaultIPSConfigRequest {
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. You can call the [DescribeVpcFirewallCenList](~~345777~~) operation to query the IDs of CEN instances.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall. You can call the [DescribeVpcFirewallList](~~342932~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model DescribeVpcFirewallDefaultIPSConfigResponseBody = {
  basicRules?: int32(name='BasicRules', description='Indicates whether basic policies are enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125adf1'),
  runMode?: int32(name='RunMode', description='The mode of the intrusion prevention system (IPS). Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
}

model DescribeVpcFirewallDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallDefaultIPSConfig operation to query the intrusion prevention configurations of a VPC firewall.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallDefaultIPSConfig(request: DescribeVpcFirewallDefaultIPSConfigRequest): DescribeVpcFirewallDefaultIPSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallDefaultIPSConfig', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallDetailRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  localVpcId?: string(name='LocalVpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****', position='Query'),
  peerVpcId?: string(name='PeerVpcId', description='The ID of the peer VPC.', example='vpc-90rq0anm6t8vbwbo****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallList](~~342932~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model DescribeVpcFirewallDetailResponseBody = {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.', example='2'),
  connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **expressconnect**, which indicates Express Connect circuits.', example='expressconnect'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured.', example='opened'),
  localVpc?: {
    eniId?: string(name='EniId', description='The ID of the ENI for the local VPC.', example='eni-8vbhfosfqv2rff42****'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the elastic network interface (ENI) for the local VPC.', example='192.168.XX.XX'),
    regionNo?: string(name='RegionNo', description='The region ID of the local VPC.', example='cn-hangzhou'),
    routerInterfaceId?: string(name='RouterInterfaceId', description='The router interface ID of the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the local VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries of the local VPC.'),
        routeTableId?: string(name='RouteTableId', description='The ID of the route table for the local VPC.', example='vtb-1234'),
      }
    ](name='VpcCidrTableList', description='The CIDR blocks of the local VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****'),
    vpcName?: string(name='VpcName', description='The name of the local VPC.', example='Vitasoy'),
  }(name='LocalVpc', description='The details about the local VPC.'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  peerVpc?: {
    eniId?: string(name='EniId', description='The ID of the ENI for the peer VPC.', example='eni-8vbhfosfqv2rff42****'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the ENI for the peer VPC.', example='192.168.XX.XX'),
    regionNo?: string(name='RegionNo', description='The region ID of the peer VPC.', example='cn-hangzhou'),
    routerInterfaceId?: string(name='RouterInterfaceId', description='The router interface ID of the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the peer VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries of the peer VPC.'),
        routeTableId?: string(name='RouteTableId', description='The ID of the route table for the peer VPC.', example='vtb-1256'),
      }
    ](name='VpcCidrTableList', description='The CIDR blocks of the peer VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the peer VPC.', example='vpc-90rq0anm6t8vbwbo****'),
    vpcName?: string(name='VpcName', description='The name of the peer VPC.', example='zcy_prod'),
  }(name='PeerVpc', description='The details about the peer VPC.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125g4d2'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='tf-test'),
}

model DescribeVpcFirewallDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallDetailResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallDetail operation to query the details about a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.  
  * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://www.alibabacloud.com/help/en/cloud-firewall/latest/createvpcfirewallconfigure) operation.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallDetail(request: DescribeVpcFirewallDetailRequest): DescribeVpcFirewallDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallListRequest {
  connectSubType?: string(name='ConnectSubType', description='The sub-type of the connection. Valid values:

*   **vpc2vpc**: Express Connect connection
*   **vpcpeer**: peer connection', example='vpcpeer', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Pages start from page **1**. Default value: **1**.', example='1', position='Query'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: **10**.**** Maximum value: **50**.', example='10', position='Query'),
  peerUid?: string(name='PeerUid', description='The UID of the Alibaba Cloud account to which the peer VPC belongs.', example='258039427902****', position='Query'),
  regionNo?: string(name='RegionNo', description='The region ID of the VPC.

> For more information about the regions, see [Supported regions](~~195657~~).', example='cn-hangzhou', position='Query'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****', position='Query'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****', position='Query'),
}

model DescribeVpcFirewallListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k8g2'),
  totalCount?: int32(name='TotalCount', description='The total number of VPC firewalls.', example='10'),
  vpcFirewalls?: [ 
    {
      bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.', example='2'),
      connectSubType?: string(name='ConnectSubType', description='The sub-type of the connection. Valid values:

*   **vpc2vpc**: Express Connect connection
*   **vpcpeer**: peer connection', example='vpcpeer'),
      connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **expressconnect**, which indicates an Express Connect connection.', example='expressconnect'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
      }(name='IpsConfig', description='The information about the intrusion prevention system (IPS) configuration.'),
      localVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether Cloud Firewall is authorized to access the local VPC. The value is fixed as authorized, which indicates that Cloud Firewall is authorized to access the local VPC.', example='authorized'),
        ownerId?: long(name='OwnerId', description='The UID of the Alibaba Cloud account to which the local VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the local VPC.', example='cn-hangzhou'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the local VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries of the local VPC.'),
            routeTableId?: string(name='RouteTableId', description='The ID of the route table for the local VPC.', example='vtb-1234'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the local VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the local VPC.', example='Test instance'),
      }(name='LocalVpc', description='The details about the local VPC.'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
      peerVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether Cloud Firewall is authorized to access the peer VPC. The value is fixed as **authorized**, which indicates that Cloud Firewall is authorized to access the peer VPC.', example='authorized'),
        ownerId?: long(name='OwnerId', description='The UID of the Alibaba Cloud account to which the peer VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the peer VPC.', example='cn-hangzhou'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the peer VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries of the peer VPC.'),
            routeTableId?: string(name='RouteTableId', description='The ID of the route table for the peer VPC.', example='vtb-1256'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the peer VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the peer VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the peer VPC.', example='Test VPC 2'),
      }(name='PeerVpc', description='The details about the peer VPC.'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **Unauthorized**: Cloud Firewall is not authorized to access a VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **RegionDisable**: VPC Firewall is not supported in the region of a VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **Empty string**: You can create a VPC firewall for the network instance.', example='Unauthorized'),
      vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
    }
  ](name='VpcFirewalls', description='An array that consists of the details about the VPC firewall.'),
}

model DescribeVpcFirewallListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallListResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallList operation to query the details about VPC firewalls by page. Each VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
  * ### Limits
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallList(request: DescribeVpcFirewallListRequest): DescribeVpcFirewallListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVpcFirewallPolicyPriorUsedRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. 

Valid values:

- **zh**: Chinese (default)
- **en**: English', example='zh', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The ID of the policy group to which the access control policy belongs. You can call the DescribeVpcFirewallAclGroupList operation to query the ID.  

Valid values:

- If the VPC firewall is used to protect a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance.  

Example: cen-ervw0g12b5jbw****
- If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the ID of the VPC firewall instance.  

Example: vfw-a42bbb7b887148c9****', example='vfw-a42bbb7b887148c9****', position='Query'),
}

model DescribeVpcFirewallPolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority for the access control policy.', example='150'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  start?: int32(name='Start', description='The highest priority for the access control policy.', example='1'),
}

model DescribeVpcFirewallPolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVpcFirewallPolicyPriorUsedResponseBody(name='body'),
}

/**
  * You can call the DescribeVpcFirewallPolicyPriorUsed operation to query the priority range of access control policies that are created for a VPC firewall in a specific policy group.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function describeVpcFirewallPolicyPriorUsed(request: DescribeVpcFirewallPolicyPriorUsedRequest): DescribeVpcFirewallPolicyPriorUsedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVpcFirewallPolicyPriorUsed', 'POST', '/', 'json', false, 'json', request);
}

model DescribeVulnerabilityProtectedListRequest {
  attackType?: string(name='AttackType', description='The attack type of the intrusion event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leakage
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: webshell
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell

> If you do not specify this parameter, the intrusion events of all attack types are queried.', example='13', position='Query'),
  buyVersion?: long(name='BuyVersion', description='The edition of Cloud Firewall.', example='10', position='Query'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1', position='Query'),
  endTime: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1646063922', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  order?: string(name='Order', description='The order in which you want to sort the queried information. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc', position='Query'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10', position='Query'),
  sortKey?: string(name='SortKey', description='The sorting basis. Set the value to **attackCnt**, which indicates the number of attacks.', example='attackCnt', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='112.239.XX.XX', deprecated='true', position='Query'),
  startTime: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1655778046', position='Query'),
  userType?: string(name='UserType', description='The type of the user. Set the value to **buy**, which indicates user of a paid edition of Cloud Firewall.', example='buy', position='Query'),
  vulnCveName?: string(name='VulnCveName', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2022-2992', position='Query'),
  vulnLevel?: string(name='VulnLevel', description='The risk level of the vulnerability. Valid values:

*   **high**
*   **medium**
*   **low**', example='medium', position='Query'),
  vulnResource?: string(name='VulnResource', description='The number of assets that are affected by the vulnerability.', example='1', position='Query'),
  vulnStatus?: string(name='VulnStatus', description='The status of vulnerability protection. Valid values:

*   **partProtected**: partially protected
*   **protected**: protected
*   **unProtected**: unprotected', example='protected', position='Query'),
  vulnType?: string(name='VulnType', description='The type of the vulnerability. Valid values:

*   **App**: application vulnerability
*   **emg**: urgent vulnerability
*   **cms**: Web-CMS vulnerability', example='emg', position='Query'),
}

model DescribeVulnerabilityProtectedListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D355C631-1537-59C5-A56E-F6C5037B99E5'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerabilities that are detected by Cloud Firewall.', example='5'),
  vulnList?: [ 
    {
      attackCnt?: int32(name='AttackCnt', description='The number of vulnerabilities.', example='0'),
      attackType?: int32(name='AttackType', description='The attack type of the intrusion event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leakage
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: webshell
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell

> If no attack type is specified, the intrusion events of all attack types are queried.', example='13'),
      basicRuleIds?: string(name='BasicRuleIds', description='The IDs of associated basic protection policies.', example='12,12'),
      cveId?: string(name='CveId', description='The CVE IDs.', example='12112131123, 1231123112'),
      firstTime?: long(name='FirstTime', description='The time when the first attack was launched.', example='1608687364'),
      highlightTag?: int32(name='HighlightTag', description='Indicates whether you need to pay special attention to the vulnerability. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      lastTime?: long(name='LastTime', description='The time when the last attack was launched.', example='1608687364'),
      memberUid?: string(name='MemberUid', example='119384235299****'),
      needOpenBasicRule?: boolean(name='NeedOpenBasicRule', description='The status of basic protection. Valid values:

*   **false**: enabled
*   **false**: disabled

> If the value of this parameter is true, you must configure the intrusion prevention feature when you enable protection.', example='false'),
      needOpenBasicRuleUuids?: string(name='NeedOpenBasicRuleUuids', description='The UUIDs of the basic protection policies for which you want to set the Current Action parameter to Block.', example='UUID-1231231'),
      needOpenRunMode?: boolean(name='NeedOpenRunMode', description='Indicates whether the intrusion prevention feature needs to be configured when you enable protection. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      needOpenVirtualPatche?: boolean(name='NeedOpenVirtualPatche', description='The status of virtual patching. Valid values:

*   **true**: enabled
*   **false**: disabled

> If the value of this parameter is true, you must configure the intrusion prevention feature when you enable protection.', example='true'),
      needOpenVirtualPatcheUuids?: string(name='NeedOpenVirtualPatcheUuids', description='The UUIDs of the virtual patching policies for which you want to set the Current Action parameter to Block.', example='UUID-1231231234'),
      needRuleClass?: int32(name='NeedRuleClass', description='The Rule Group that you want to specify. Valid values:

*   **1**: Loose (default)
*   **2**: Medium
*   **3**: Strict', example='1'),
      resourceCnt?: int32(name='ResourceCnt', description='The number of assets on which vulnerabilities are detected.', example='0'),
      resourceList?: [ 
        {
          eip?: string(name='Eip', description='The elastic IP address (EIP) that is associated with the instance.', example='203.107.XX.XX'),
          internetIp?: string(name='InternetIp', description='The public IP address of the instance.', example='47.96.XX.XX'),
          intranetIp?: string(name='IntranetIp', description='The private IP address of the instance.', example='192.168.XX.XX'),
          regionId?: string(name='RegionId', description='The ID of the region in which Cloud Firewall is supported.

> For more information about the regions, see [Supported regions](~~195657~~).', example='cn-beijing'),
          resourceId?: string(name='ResourceId', description='The ID of the instance.', example='vfw-m5e7dbc4y****'),
          resourceName?: string(name='ResourceName', description='The name of the instance.', example='ECS'),
          resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **SLB**
*   **EIP**
*   **ECS**', example='EIP'),
          vulnStatus?: string(name='VulnStatus', description='The status of vulnerability protection. Valid values:

*   **partProtected**: partially protected
*   **protected**: protected
*   **unProtected**: unprotected', example='protected'),
        }
      ](name='ResourceList', description='An array consisting of the assets on which vulnerabilities are detected.'),
      virtualPatcheIds?: string(name='VirtualPatcheIds', description='The IDs of associated virtual patching policies.', example='13,13'),
      vulnKey?: string(name='VulnKey', description='The code of the vulnerability.', example='dedecms-archive.helper.php-vul'),
      vulnLevel?: string(name='VulnLevel', description='The risk level of the vulnerability. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      vulnName?: string(name='VulnName', description='The name of the vulnerability.', example='Deserialization vulnerability of arbitrary code execution in Fastjson 1.2.80 and earlier versions'),
      vulnStatus?: string(name='VulnStatus', description='The status of vulnerability protection. Valid values:

*   **partProtected**: partially protected
*   **protected**: protected
*   **unProtected**: unprotected', example='protected'),
      vulnType?: string(name='VulnType', description='The type of the vulnerability. Valid values:

*   **cve**: Windows vulnerability
*   **cms**: Web-CMS vulnerability
*   **App**: application vulnerability', example='emg'),
    }
  ](name='VulnList', description='An array that consists of the information about the vulnerabilities.'),
  zeroResourceCount?: int32(name='ZeroResourceCount', description='The number of assets on which no vulnerabilities are detected.', example='1'),
}

model DescribeVulnerabilityProtectedListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeVulnerabilityProtectedListResponseBody(name='body'),
}

async function describeVulnerabilityProtectedList(request: DescribeVulnerabilityProtectedListRequest): DescribeVulnerabilityProtectedListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeVulnerabilityProtectedList', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAddressBookRequest {
  addressList?: string(name='AddressList', description='The addresses in the address book. Separate multiple addresses with commas (,). If you set GroupType to **ip**, **port**, or **domain**, you must specify this parameter.

*   If you set GroupType to **ip**, you must specify IP addresses for the address book. Example: 1.2.XX.XX/32,1.2.XX.XX/24.
*   If you set GroupType to **port**, you must specify port numbers or port ranges for the address book. Example: 80/80,100/200.
*   If you set GroupType to **domain**, you must specify domain names for the address book. Example: demo1.aliyun.com,demo2.aliyun.com.', example='192.0.XX.XX/32, 192.0.XX.XX/24', position='Query'),
  autoAddTagEcs?: string(name='AutoAddTagEcs', description='Specifies whether to automatically add public IP addresses of Elastic Compute Service (ECS) instances to the address book if the instances match the specified tags. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  description: string(name='Description', description='The description of the address book.', example='bj-001', position='Query'),
  groupName: string(name='GroupName', description='The name of the address book.', example='bj-001', position='Query'),
  groupUuid: string(name='GroupUuid', description='The ID of the address book.

>  To modify the address book, you must provide the ID of the address book. You can call the [DescribeAddressBook](~~138869~~) operation to query the ID.', example='0657ab9d-fe8b-4174-b2a6-6baf358e****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of ECS tag N that you want to match.', example='TXY'),
      tagValue?: string(name='TagValue', description='The value of ECS tag N that you want to match.', example='1'),
    }
  ](name='TagList', description='The ECS tags that you want to match.', position='Query'),
  tagRelation?: string(name='TagRelation', description='The logical relationship among ECS tags. Valid values:

*   **and**: Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book.
*   **or**: The public IP addresses of ECS instances that match one of the specified tags can be added to the address book.', example='and', position='Query'),
}

model ModifyAddressBookResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyAddressBookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAddressBookResponseBody(name='body'),
}

/**
  * You can call the ModifyAddressBook operation to modify the address book that is configured for access control.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyAddressBook(request: ModifyAddressBookRequest): ModifyAddressBookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAddressBook', 'POST', '/', 'json', false, 'json', request);
}

model ModifyControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept', position='Query'),
  aclUuid: string(name='AclUuid', description='The ID of the access control policy.

>  If you want to modify the configurations of an access control policy, you must provide the ID of the policy. You can call the [DescribeControlPolicy](~~138866~~) operation to query the ID.', example='00281255-d220-4db1-8f4f-c4df221ad84c', position='Query'),
  applicationName?: string(name='ApplicationName', description='The type of the application that the access control policy supports. Valid values:

*   **ANY**
*   **HTTP**
*   **HTTPS**
*   **MySQL**
*   **SMTP**
*   **SMTPS**
*   **RDP**
*   **VNC**
*   **SSH**
*   **Redis**
*   **MQTT**
*   **MongoDB**
*   **Memcache**
*   **SSL**

>  The value **ANY** indicates all types of applications.', example='HTTP', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application names. You can specify multiple application names.', position='Query'),
  description: string(name='Description', description='The description of the access control policy.', example='test', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to net, the value of **Destination** is a CIDR block. Example: 1.2.XX.XX/24
*   If **DestinationType** is set to group, the value of **Destination** is an address book. Example: db_group
*   If **DestinationType** is set to domain, the value of **Destination** is a domain name. Example: \\*.aliyuncs.com
*   If **DestinationType** is set to location, the value of **Destination** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: \\["BJ11", "ZB"]', example='192.0.XX.XX/24', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: destination CIDR block
*   **group**: destination address book
*   **domain**: destination domain name
*   **location**: destination location', example='net', position='Query'),
  direction: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  proto: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**

>  The value **ANY** indicates all types of protocols.', example='TCP', position='Query'),
  release?: string(name='Release', description='The status of the access control policy. Valid values:

*   true: enabled
*   false: disabled', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy.

*   If **SourceType** is set to net, the value of **Source** is a CIDR block. Example: 1.2.XX.XX/24
*   If **SourceType** is set to group, the value of **Source** is an address book. Example: db_group
*   If **SourceType** is set to location, the value of **Source** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: \\["BJ11", "ZB"]', example='192.0.XX.XX/24', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: source CIDR block
*   **group**: source address book
*   **location**: source location', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model ModifyControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyControlPolicyResponseBody(name='body'),
}

/**
  * You can call the ModifyControlPolicy operation to modify the configurations of an access control policy. The policy allows Cloud Firewall to allow, deny, or monitor the traffic that passes through Cloud Firewall.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyControlPolicy(request: ModifyControlPolicyRequest): ModifyControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyControlPolicyPositionRequest {
  direction: string(name='Direction', description='The direction of the traffic to which the IPv4 access control policy applies. Valid values:

*   in: inbound traffic
*   out: outbound traffic', example='in', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   zh: Chinese (default)
*   en: English', example='zh', position='Query'),
  newOrder: string(name='NewOrder', description='The new priority of the IPv4 access control policy.

You must specify a numeric value for this parameter. The value 1 indicates the highest priority. A larger value indicates a lower priority.

>  The value of this parameter must be within the priority range of existing IPv4 access control policies. Otherwise, an error occurs when you call this operation.

We recommend that you first call the [DescribePolicyPriorUsed](~~138862~~) operation to query the priority range of existing IPv4 access control policies that apply to the traffic of the specified direction.', example='1', position='Query'),
  oldOrder: string(name='OldOrder', description='The original priority of the IPv4 access control policy.', example='5', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model ModifyControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model ModifyControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyControlPolicyPositionResponseBody(name='body'),
}

/**
  * You can call the ModifyControlPolicyPosition operation to modify the priority of an IPv4 access control policy for the Internet firewall. No API operations are provided for you to modify the priority of an IPv6 access control policy for the Internet firewall. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyControlPolicyPosition(request: ModifyControlPolicyPositionRequest): ModifyControlPolicyPositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyControlPolicyPosition', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDefaultIPSConfigRequest {
  aiRules?: string(name='AiRules', position='Query'),
  basicRules: string(name='BasicRules', position='Query'),
  ctiRules: string(name='CtiRules', position='Query'),
  enableAllPatch?: string(name='EnableAllPatch', position='Query'),
  enableDefault?: string(name='EnableDefault', position='Query'),
  lang?: string(name='Lang', position='Query'),
  patchRules?: string(name='PatchRules', position='Query'),
  ruleClass?: string(name='RuleClass', position='Query'),
  runMode: string(name='RunMode', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model ModifyDefaultIPSConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDefaultIPSConfigResponseBody(name='body'),
}

async function modifyDefaultIPSConfig(request: ModifyDefaultIPSConfigRequest): ModifyDefaultIPSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDefaultIPSConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFirewallV2RoutePolicySwitchRequest {
  firewallId?: string(name='FirewallId', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  shouldRecover?: string(name='ShouldRecover', example='false', position='Query'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', position='Query'),
  trFirewallRoutePolicySwitchStatus?: string(name='TrFirewallRoutePolicySwitchStatus', example='open', position='Query'),
}

model ModifyFirewallV2RoutePolicySwitchResponseBody = {
  requestId?: string(name='RequestId', example='1F6D4A8D-EC01-5996-A61A-AA3B56490C00'),
}

model ModifyFirewallV2RoutePolicySwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyFirewallV2RoutePolicySwitchResponseBody(name='body'),
}

async function modifyFirewallV2RoutePolicySwitch(request: ModifyFirewallV2RoutePolicySwitchRequest): ModifyFirewallV2RoutePolicySwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFirewallV2RoutePolicySwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMemberAttributesRequest {
  members: [ 
    {
      memberDesc: string(name='MemberDesc', description='The remarks of the member in Cloud Firewall.', example='renewal'),
      memberUid: long(name='MemberUid', description='The UID of the member in Cloud Firewall.', example='123412341234****'),
    }
  ](name='Members', description='The members that to be modified.', position='Query'),
}

model ModifyInstanceMemberAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AB74E747-BA5C-492C-87DD-CEA67FCFFFE5'),
}

model ModifyInstanceMemberAttributesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceMemberAttributesResponseBody(name='body'),
}

/**
  * You can call the ModifyInstanceMemberAttributes operation to update the information about members in Cloud Firewall.  
  * ## Limits
  * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyInstanceMemberAttributes(request: ModifyInstanceMemberAttributesRequest): ModifyInstanceMemberAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMemberAttributes', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatFirewallControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='log', position='Query'),
  aclUuid: string(name='AclUuid', description='The UUID of the access control policy.

To modify the configurations of an access control policy, you must provide the UUID of the policy. You can call the DescribeNatFirewallControlPolicy operation to query the UUIDs of access control policies.', example='61ab1c02-926a-4d1b-9ef7-595eed8c4226', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The name of the application.', position='Query'),
  description: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

> If you do not specify this parameter, the descriptions of all policies are queried.', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.

> If **DestPortType** is set to `port`, you must specify this parameter.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_dest_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to net, the value of **Destination** is a CIDR block. Example: 1.2.3.4/24
*   If **DestinationType** is set to group, the value of **Destination** is an address book. Example: db_group
*   If **DestinationType** is set to domain, the value of **Destination** is a domain name. Example: \\*.aliyuncs.com
*   If **DestinationType** is set to location, the value of **Destination** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: \\["BJ11", "ZB"]', example='x.x.x.x/32', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**', example='net', position='Query'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **0**: Fully qualified domain name (FQDN)-based resolution
*   **1**: Domain Name System (DNS)-based dynamic resolution
*   **2**: FQDN and DNS-based dynamic resolution', example='0', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx', position='Query'),
  proto: string(name='Proto', description='The protocol type supported by the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**

> The value **ANY** indicates all types of protocols.', example='TCP', position='Query'),
  release?: string(name='Release', description='The status of the access control policy. Valid values:

*   true: enabled
*   false: disabled', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy.

Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block.

    Example: 10.2.4.0/24

*   If **SourceType** is set to `group`, the value of this parameter is an address book.

    Example: db_group', example='192.168.0.25/32', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model ModifyNatFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3868197C-E6E8-52CD-8358-05E3308430E2'),
}

model ModifyNatFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can use this operation to modify the configurations of an access control policy. The policy is used to allow, deny, or monitor traffic that reaches a NAT firewall.
  *
 */
async function modifyNatFirewallControlPolicy(request: ModifyNatFirewallControlPolicyRequest): ModifyNatFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNatFirewallControlPolicyPositionRequest {
  aclUuid: string(name='AclUuid', description='The UUID of the access control policy.', example='66961eea-e659-4225-84c9-9b6da76ec401', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  natGatewayId: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx', position='Query'),
  newOrder?: int32(name='NewOrder', description='The new priority of the IPv4 access control policy. You must specify a numeric value for this parameter. The value 1 indicates the highest priority. A larger value indicates a lower priority.

> Make sure that the value of this parameter is within the priority range of existing IPv4 access control policies. Otherwise, an error occurs when you call this operation.

Before you call this operation, we recommend that you call the DescribeNatFirewallPolicyPriorUsed operation to query the priority range of the IPv4 access control policies in the specified traffic direction.', example='5', position='Query'),
}

model ModifyNatFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='60617208-F5F7-5B44-BB1E-3AC1B6FCD627'),
}

model ModifyNatFirewallControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyNatFirewallControlPolicyPositionResponseBody(name='body'),
}

async function modifyNatFirewallControlPolicyPosition(request: ModifyNatFirewallControlPolicyPositionRequest): ModifyNatFirewallControlPolicyPositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNatFirewallControlPolicyPosition', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPolicyAdvancedConfigRequest {
  internetSwitch: string(name='InternetSwitch', description='Specifies whether to enable the strict mode for the access control policy. Valid values:

*   **on**: enables the strict mode.
*   **off**: disables the strict mode.', example='off', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model ModifyPolicyAdvancedConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model ModifyPolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPolicyAdvancedConfigResponseBody(name='body'),
}

/**
  * You can call the ModifyPolicyAdvancedConfig operation to enable or disable the strict mode for an access control policy.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyPolicyAdvancedConfig(request: ModifyPolicyAdvancedConfigRequest): ModifyPolicyAdvancedConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPolicyAdvancedConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTrFirewallV2ConfigurationRequest {
  firewallId?: string(name='FirewallId', example='vfw-tr-bcdf89d405ce4bd2****', position='Query'),
  firewallName?: string(name='FirewallName', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
}

model ModifyTrFirewallV2ConfigurationResponseBody = {
  requestId?: string(name='RequestId', example='A74C8FDD-2BEF-52D5-8B01-EB6FD94606F9'),
}

model ModifyTrFirewallV2ConfigurationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTrFirewallV2ConfigurationResponseBody(name='body'),
}

async function modifyTrFirewallV2Configuration(request: ModifyTrFirewallV2ConfigurationRequest): ModifyTrFirewallV2ConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrFirewallV2Configuration', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTrFirewallV2RoutePolicyScopeRequest {
  destCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId'),
      candidateType?: string(name='CandidateType', example='VPC'),
    }
  ](name='DestCandidateList', shrink='json', position='Query'),
  firewallId?: string(name='FirewallId', position='Query'),
  lang?: string(name='Lang', example='zh', position='Query'),
  srcCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId'),
      candidateType?: string(name='CandidateType', example='VPC'),
    }
  ](name='SrcCandidateList', shrink='json', position='Query'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', position='Query'),
}

model ModifyTrFirewallV2RoutePolicyScopeResponseBody = {
  requestId?: string(name='RequestId', example='E7D4D635-0C70-5CEB-A609-851E94D51FBB'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId'),
}

model ModifyTrFirewallV2RoutePolicyScopeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyTrFirewallV2RoutePolicyScopeResponseBody(name='body'),
}

async function modifyTrFirewallV2RoutePolicyScope(request: ModifyTrFirewallV2RoutePolicyScopeRequest): ModifyTrFirewallV2RoutePolicyScopeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTrFirewallV2RoutePolicyScope', 'POST', '/', 'json', false, 'json', request);
}

model ModifyUserIPSWhitelistRequest {
  direction?: long(name='Direction', position='Query'),
  ipVersion?: string(name='IpVersion', position='Query'),
  lang?: string(name='Lang', position='Query'),
  listType?: long(name='ListType', position='Query'),
  listValue?: string(name='ListValue', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  whiteType?: long(name='WhiteType', position='Query'),
}

model ModifyUserIPSWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserIPSWhitelistResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyUserIPSWhitelistResponseBody(name='body'),
}

async function modifyUserIPSWhitelist(request: ModifyUserIPSWhitelistRequest): ModifyUserIPSWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserIPSWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](~~345777~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
  vpcFirewallName: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test instance', position='Query'),
}

model ModifyVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6f8'),
}

model ModifyVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallCenConfigure operation to modify the configurations of a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](~~345772~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallCenConfigure(request: ModifyVpcFirewallCenConfigureRequest): ModifyVpcFirewallCenConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallCenConfigure', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallCenSwitchStatusRequest {
  firewallSwitch: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: yes
*   **close**: no', example='open', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](~~345777~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model ModifyVpcFirewallCenSwitchStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125afj2'),
}

model ModifyVpcFirewallCenSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallCenSwitchStatusResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallCenSwitchStatus operation to enable or disable a VPC firewall. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. After you enable the VPC firewall, the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. After you disable the VPC firewall, the VPC firewall no longer protect mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance.
  * Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](~~345772~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallCenSwitchStatus(request: ModifyVpcFirewallCenSwitchStatusRequest): ModifyVpcFirewallCenSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallCenSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  localVpcCidrTableList: string(name='LocalVpcCidrTableList', description='The CIDR blocks of the local VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the local VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the local VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the local VPC.

> You can call the [DescribeVpcFirewallDetail](~~342892~~) operation to query the CIDR blocks of local VPCs for VPC firewalls.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  peerVpcCidrTableList: string(name='PeerVpcCidrTableList', description='The CIDR blocks of the peer VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the peer VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the peer VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the peer VPC.

> You can call the [DescribeVpcFirewallDetail](~~342892~~) operation to query the CIDR blocks of peer VPCs for VPC firewalls.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallList](~~342932~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
  vpcFirewallName: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall', position='Query'),
}

model ModifyVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6f8'),
}

model ModifyVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallConfigureResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallCenConfigure operation to modify the configurations of a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](~~342893~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallConfigure(request: ModifyVpcFirewallConfigureRequest): ModifyVpcFirewallConfigureResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallConfigure', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallControlPolicyRequest {
  aclAction: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: blocks the traffic.
*   **log**: monitors the traffic.', example='accept', position='Query'),
  aclUuid: string(name='AclUuid', description='The unique ID of the access control policy.

If you want to modify the configurations of an access control policy, you must provide the unique ID of the policy. You can call the [DescribeVpcFirewallControlPolicy](~~159758~~) operation to query the ID.', example='00281255-d220-4db1-8f4f-c4df221a****', position='Query'),
  applicationName?: string(name='ApplicationName', description='The application type in the access control policy.

Valid values:

*   ANY
*   FTP
*   HTTP
*   HTTPS
*   MySQL
*   SMTP
*   SMTPS
*   RDP
*   VNC
*   SSH
*   Redis
*   MQTT
*   MongoDB
*   Memcache
*   SSL
*   ANY: all application types', example='HTTP', position='Query'),
  applicationNameList?: [ string ](name='ApplicationNameList', position='Query'),
  description: string(name='Description', description='The description of the access control policy.', example='test', position='Query'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80', position='Query'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group', position='Query'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy.

*   **port**: port
*   **group**: port address book', example='port', position='Query'),
  destination: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to `net`, the value of this parameter must be a CIDR block.

    Example: 10.2.3.0/24

*   If **DestinationType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group

*   If **DestinationType** is set to `domain`, the value of this parameter must be a domain name.

    Example: \\*.aliyuncs.com', example='10.2.X.X/XX', position='Query'),
  destinationType: string(name='DestinationType', description='The type of the destination address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name', example='net', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  proto: string(name='Proto', description='The protocol type in the access control policy.

Valid values:

*   ANY: all protocol types
*   TCP
*   UDP
*   ICMP', example='TCP', position='Query'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: enables the access control policy.
*   **false**: disables the access control policy.', example='true', position='Query'),
  repeatDays?: [ long ](name='RepeatDays', position='Query'),
  repeatEndTime?: string(name='RepeatEndTime', position='Query'),
  repeatStartTime?: string(name='RepeatStartTime', position='Query'),
  repeatType?: string(name='RepeatType', position='Query'),
  source: string(name='Source', description='The source address in the access control policy.

Valid values:

*   If **SourceType** is set to `net`, the value of this parameter must be a CIDR block.

    Example: 10.2.4.0/24

*   If **SourceType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group', example='10.2.X.X/XX', position='Query'),
  sourceType: string(name='SourceType', description='The type of the source address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. You can call the [DescribeVpcFirewallAclGroupList](~~159760~~) operation to query the ID.

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter must be the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\*\\*\\*\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\*\\*\\*\\*', example='vfw-a42bbb7b887148c9****', position='Query'),
}

model ModifyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallControlPolicy operation to modify the configurations of an access control policy that is created for a VPC firewall in a specified policy group. Different access control policies are used for the VPC firewalls that are used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewalls that are used to protect each Express Connect circuit.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallControlPolicy(request: ModifyVpcFirewallControlPolicyRequest): ModifyVpcFirewallControlPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallControlPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallControlPolicyPositionRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

If you want to modify the configurations of an access control policy, you must provide the UUID of the policy. You can call the [DescribeVpcFirewallControlPolicy](~~159758~~) operation to query the UUID.', example='2746d9ff-5d7c-449d-a2a9-ccaa15fe****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  newOrder: string(name='NewOrder', description='The new priority of the access control policy.', example='1', position='Query'),
  oldOrder?: string(name='OldOrder', description='The original priority of the access control policy.

> This parameter is not recommended. We recommend that you use the AclUuid parameter to specify the policy that you want to modify.', example='5', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The ID of the group to which the access control policy belongs. You can call the [DescribeVpcFirewallAclGroupList](~~159760~~) operation to query the ID.

Valid values:

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter must be the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\*\\*\\*\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\*\\*\\*\\*', example='vfw-a42bbb7b887148c9****', position='Query'),
}

model ModifyVpcFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model ModifyVpcFirewallControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallControlPolicyPositionResponseBody(name='body'),
}

/**
  * You can use this operation to modify the priority of an access control policy that is created for a VPC firewall in a specific policy group.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallControlPolicyPosition(request: ModifyVpcFirewallControlPolicyPositionRequest): ModifyVpcFirewallControlPolicyPositionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallControlPolicyPosition', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallDefaultIPSConfigRequest {
  basicRules: string(name='BasicRules', description='Specifies whether to enable basic protection. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  enableAllPatch: string(name='EnableAllPatch', description='Specifies whether to enable virtual patching. Valid values:

*   **1**: yes
*   **0**: no', example='1', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  runMode: string(name='RunMode', description='The mode of the intrusion prevention system (IPS). Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. You can call the [DescribeVpcFirewallCenList](~~345777~~) operation to query the IDs of CEN instances.
*   If the VPC firewall protects mutual access traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the ID of the VPC firewall. You can call the [DescribeVpcFirewallList](~~342932~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model ModifyVpcFirewallDefaultIPSConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3B51B5BF-3C26-5009-ADAB-190E58DE4D6E'),
}

model ModifyVpcFirewallDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallDefaultIPSConfig operation to modify the intrusion prevention configurations of a VPC firewall.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallDefaultIPSConfig(request: ModifyVpcFirewallDefaultIPSConfigRequest): ModifyVpcFirewallDefaultIPSConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallDefaultIPSConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyVpcFirewallSwitchStatusRequest {
  firewallSwitch: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: yes
*   **close**: no', example='open', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****', position='Query'),
  vpcFirewallId: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallList](~~342932~~) operation to query the instance IDs of VPC firewalls.', example='vfw-m5e7dbc4y****', position='Query'),
}

model ModifyVpcFirewallSwitchStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125afj2'),
}

model ModifyVpcFirewallSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyVpcFirewallSwitchStatusResponseBody(name='body'),
}

/**
  * You can call the ModifyVpcFirewallSwitchStatus operation to enable or disable a VPC firewall. The VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit. After you enable the VPC firewall, the VPC firewall protects access traffic between two VPCs that are connected by using an Express Connect circuit. After you disable the VPC firewall, the VPC firewall no longer protects access traffic between two VPCs that are connected by using an Express Connect circuit.
  * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](~~342893~~) operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyVpcFirewallSwitchStatus(request: ModifyVpcFirewallSwitchStatusRequest): ModifyVpcFirewallSwitchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVpcFirewallSwitchStatus', 'POST', '/', 'json', false, 'json', request);
}

model PutDisableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='i-2ze8v2x5kd9qyvp2****', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model PutDisableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutDisableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutDisableAllFwSwitchResponseBody(name='body'),
}

/**
  * You can call the PutDisableAllFwSwitch operation to turn off all firewall switches. 
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function putDisableAllFwSwitch(request: PutDisableAllFwSwitchRequest): PutDisableAllFwSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDisableAllFwSwitch', 'POST', '/', 'json', false, 'json', request);
}

model PutDisableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList', description='The IP addresses.

>  You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["192.0.XX.XX","192.0.XX.XX"]', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  regionList?: [ string ](name='RegionList', description='The regions.

>  You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["cn-hangzhou","cn-shanghai"]', position='Query'),
  resourceTypeList?: [ string ](name='ResourceTypeList', description='The types of the assets.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["EcsPublicIp","NatEip"]', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model PutDisableFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutDisableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutDisableFwSwitchResponseBody(name='body'),
}

/**
  * You can call the PutDisableFwSwitch operation to disable a firewall for specific assets. After you disable the firewall, traffic does not pass through Cloud Firewall.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function putDisableFwSwitch(request: PutDisableFwSwitchRequest): PutDisableFwSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutDisableFwSwitch', 'POST', '/', 'json', false, 'json', request);
}

model PutEnableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='i-2ze8v2x5kd9qyvp2****', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated='true', position='Query'),
}

model PutEnableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutEnableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutEnableAllFwSwitchResponseBody(name='body'),
}

/**
  * You can call the PutEnableAllFwSwitch operation to enable a firewall for all public IP addresses within your Alibaba Cloud account.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function putEnableAllFwSwitch(request: PutEnableAllFwSwitchRequest): PutEnableAllFwSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutEnableAllFwSwitch', 'POST', '/', 'json', false, 'json', request);
}

model PutEnableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList', description='The IP addresses.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["192.0.X.X","192.0.X.X"]', position='Query'),
  lang?: string(name='Lang', description='The language of the content within the response.

*   **zh**: Chinese
*   **en**: English', example='zh', position='Query'),
  regionList?: [ string ](name='RegionList', description='The regions.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["cn-hangzhou","cn-shanghai"]', position='Query'),
  resourceTypeList?: [ string ](name='ResourceTypeList', description='The types of the assets.

Valid values:

*   BastionHostIP: the egress IP address of a bastion host
*   BastionHostIngressIP: the ingress IP address of a bastion host
*   EcsEIP: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   EcsPublicIP: the public IP address of an ECS instance
*   EIP: the EIP
*   EniEIP: the EIP of an elastic network interface (ENI)
*   NatEIP: the EIP of a NAT gateway
*   SlbEIP: the EIP of a Server Load Balancer (SLB) instance
*   SlbPublicIP: the public IP address of an SLB instance
*   NatPublicIP: the public IP address of a NAT gateway
*   HAVIP: the high-availability virtual IP address (HAVIP)

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["EcsPublicIp","NatEip"]', position='Query'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.X.X', deprecated='true', position='Query'),
}

model PutEnableFwSwitchResponseBody = {
  abnormalResourceStatusList?: [ 
    {
      msg?: string(name='Msg', description='The message displayed when the asset is not synchronized to Cloud Firewall. Valid values:

*   cloudfirewall do not sync this ip address: This IP address is not synchronized to Cloud Firewall.', example='cloudfirewall do not sync this ip address'),
      resource?: string(name='Resource', description='The IP address of the asset.', example='203.0.113.0'),
      status?: string(name='Status', description='The status of the asset when it is not synchronized to Cloud Firewall. Valid values:

*   ip_not_sync: The asset is not synchronized.', example='ip_not_sync'),
    }
  ](name='AbnormalResourceStatusList', description='The status information of the asset when it is not synchronized to Cloud Firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutEnableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PutEnableFwSwitchResponseBody(name='body'),
}

/**
  * You can call the PutEnableFwSwitch operation to enable a firewall. After you enable a firewall, traffic passes through Cloud Firewall.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds a limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limits when you call this operation.
  *
 */
async function putEnableFwSwitch(request: PutEnableFwSwitchRequest): PutEnableFwSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutEnableFwSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ResetVpcFirewallRuleHitCountRequest {
  aclUuid: string(name='AclUuid', description='The ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****', position='Query'),
  lang?: string(name='Lang', description='The natural language of the request and response. 

Valid values:

- **zh**: Chinese (default)
- **en**: English', example='zh', position='Query'),
}

model ResetVpcFirewallRuleHitCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ResetVpcFirewallRuleHitCountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetVpcFirewallRuleHitCountResponseBody(name='body'),
}

/**
  * You can call the ResetVpcFirewallRuleHitCount operation to clear the count on hits of an access control policy that is created for a VPC firewall in a specific policy group.  
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function resetVpcFirewallRuleHitCount(request: ResetVpcFirewallRuleHitCountRequest): ResetVpcFirewallRuleHitCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetVpcFirewallRuleHitCount', 'POST', '/', 'json', false, 'json', request);
}

