/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  @endpointMap = {
    ap-southeast-1 = 'cloudfw.ap-southeast-1.aliyuncs.com',
    cn-hangzhou = 'cloudfw.cn-hangzhou.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('cloudfw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAddressBookRequest {
  addressList?: string(name='AddressList'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupType?: string(name='GroupType'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagList'),
  tagRelation?: string(name='TagRelation'),
}

model AddAddressBookResponseBody = {
  groupUuid?: string(name='GroupUuid'),
  requestId?: string(name='RequestId'),
}

model AddAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: AddAddressBookResponseBody(name='body'),
}

async function addAddressBookWithOptions(request: AddAddressBookRequest, runtime: Util.RuntimeOptions): AddAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAddressBook(request: AddAddressBookRequest): AddAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAddressBookWithOptions(request, runtime);
}

model AddControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destPortGroup?: string(name='DestPortGroup'),
  destPortType?: string(name='DestPortType'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  direction?: string(name='Direction'),
  ipVersion?: string(name='IpVersion'),
  lang?: string(name='Lang'),
  newOrder?: string(name='NewOrder'),
  proto?: string(name='Proto'),
  release?: string(name='Release'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
  sourceType?: string(name='SourceType'),
}

model AddControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid'),
  requestId?: string(name='RequestId'),
}

model AddControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddControlPolicyResponseBody(name='body'),
}

async function addControlPolicyWithOptions(request: AddControlPolicyRequest, runtime: Util.RuntimeOptions): AddControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addControlPolicy(request: AddControlPolicyRequest): AddControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addControlPolicyWithOptions(request, runtime);
}

model AddInstanceMembersRequest {
  members?: [ 
    {
      memberDesc?: string(name='MemberDesc'),
      memberUid?: long(name='MemberUid'),
    }
  ](name='Members'),
}

model AddInstanceMembersResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: AddInstanceMembersResponseBody(name='body'),
}

async function addInstanceMembersWithOptions(request: AddInstanceMembersRequest, runtime: Util.RuntimeOptions): AddInstanceMembersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddInstanceMembers', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addInstanceMembers(request: AddInstanceMembersRequest): AddInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addInstanceMembersWithOptions(request, runtime);
}

model CreateVpcFirewallCenConfigureRequest {
  cenId?: string(name='CenId'),
  firewallSwitch?: string(name='FirewallSwitch'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  networkInstanceId?: string(name='NetworkInstanceId'),
  vpcCidrTableList?: string(name='VpcCidrTableList'),
  vpcFirewallName?: string(name='VpcFirewallName'),
  vpcRegion?: string(name='VpcRegion'),
}

model CreateVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model CreateVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcFirewallCenConfigureResponseBody(name='body'),
}

async function createVpcFirewallCenConfigureWithOptions(request: CreateVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVpcFirewallCenConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVpcFirewallCenConfigure(request: CreateVpcFirewallCenConfigureRequest): CreateVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallCenConfigureWithOptions(request, runtime);
}

model CreateVpcFirewallConfigureRequest {
  firewallSwitch?: string(name='FirewallSwitch'),
  lang?: string(name='Lang'),
  localVpcCidrTableList?: string(name='LocalVpcCidrTableList'),
  localVpcId?: string(name='LocalVpcId'),
  localVpcRegion?: string(name='LocalVpcRegion'),
  memberUid?: string(name='MemberUid'),
  peerVpcCidrTableList?: string(name='PeerVpcCidrTableList'),
  peerVpcId?: string(name='PeerVpcId'),
  peerVpcRegion?: string(name='PeerVpcRegion'),
  vpcFirewallName?: string(name='VpcFirewallName'),
}

model CreateVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model CreateVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcFirewallConfigureResponseBody(name='body'),
}

async function createVpcFirewallConfigureWithOptions(request: CreateVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVpcFirewallConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVpcFirewallConfigure(request: CreateVpcFirewallConfigureRequest): CreateVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallConfigureWithOptions(request, runtime);
}

model CreateVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destPortGroup?: string(name='DestPortGroup'),
  destPortType?: string(name='DestPortType'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  newOrder?: string(name='NewOrder'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model CreateVpcFirewallControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid'),
  requestId?: string(name='RequestId'),
}

model CreateVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVpcFirewallControlPolicyResponseBody(name='body'),
}

async function createVpcFirewallControlPolicyWithOptions(request: CreateVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVpcFirewallControlPolicy(request: CreateVpcFirewallControlPolicyRequest): CreateVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DeleteAddressBookRequest {
  groupUuid?: string(name='GroupUuid'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteAddressBookResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAddressBookResponseBody(name='body'),
}

async function deleteAddressBookWithOptions(request: DeleteAddressBookRequest, runtime: Util.RuntimeOptions): DeleteAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAddressBook(request: DeleteAddressBookRequest): DeleteAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAddressBookWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  aclUuid?: string(name='AclUuid'),
  direction?: string(name='Direction'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteControlPolicyResponseBody(name='body'),
}

async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteInstanceMembersRequest {
  memberUids?: [ long ](name='MemberUids'),
}

model DeleteInstanceMembersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteInstanceMembersResponseBody(name='body'),
}

async function deleteInstanceMembersWithOptions(request: DeleteInstanceMembersRequest, runtime: Util.RuntimeOptions): DeleteInstanceMembersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteInstanceMembers', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteInstanceMembers(request: DeleteInstanceMembersRequest): DeleteInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceMembersWithOptions(request, runtime);
}

model DeleteVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  vpcFirewallIdList?: [ string ](name='VpcFirewallIdList'),
}

model DeleteVpcFirewallCenConfigureResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model DeleteVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcFirewallCenConfigureResponseBody(name='body'),
}

async function deleteVpcFirewallCenConfigureWithOptions(request: DeleteVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpcFirewallCenConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpcFirewallCenConfigure(request: DeleteVpcFirewallCenConfigureRequest): DeleteVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallCenConfigureWithOptions(request, runtime);
}

model DeleteVpcFirewallConfigureRequest {
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  vpcFirewallIdList?: [ string ](name='VpcFirewallIdList'),
}

model DeleteVpcFirewallConfigureResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model DeleteVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcFirewallConfigureResponseBody(name='body'),
}

async function deleteVpcFirewallConfigureWithOptions(request: DeleteVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpcFirewallConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpcFirewallConfigure(request: DeleteVpcFirewallConfigureRequest): DeleteVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallConfigureWithOptions(request, runtime);
}

model DeleteVpcFirewallControlPolicyRequest {
  aclUuid?: string(name='AclUuid'),
  lang?: string(name='Lang'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DeleteVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVpcFirewallControlPolicyResponseBody(name='body'),
}

async function deleteVpcFirewallControlPolicyWithOptions(request: DeleteVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVpcFirewallControlPolicy(request: DeleteVpcFirewallControlPolicyRequest): DeleteVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeAddressBookRequest {
  containPort?: string(name='ContainPort'),
  currentPage?: string(name='CurrentPage'),
  groupType?: string(name='GroupType'),
  lang?: string(name='Lang'),
  pageSize?: string(name='PageSize'),
  query?: string(name='Query'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeAddressBookResponseBody = {
  acls?: [ 
    {
      addressList?: [ string ](name='AddressList'),
      addressListCount?: int32(name='AddressListCount'),
      autoAddTagEcs?: int32(name='AutoAddTagEcs'),
      description?: string(name='Description'),
      global?: int32(name='Global'),
      groupName?: string(name='GroupName'),
      groupType?: string(name='GroupType'),
      groupUuid?: string(name='GroupUuid'),
      referenceCount?: int32(name='ReferenceCount'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey'),
          tagValue?: string(name='TagValue'),
        }
      ](name='TagList'),
      tagRelation?: string(name='TagRelation'),
    }
  ](name='Acls'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAddressBookResponseBody(name='body'),
}

async function describeAddressBookWithOptions(request: DescribeAddressBookRequest, runtime: Util.RuntimeOptions): DescribeAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAddressBook(request: DescribeAddressBookRequest): DescribeAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressBookWithOptions(request, runtime);
}

model DescribeAssetListRequest {
  currentPage?: string(name='CurrentPage'),
  ipVersion?: string(name='IpVersion'),
  lang?: string(name='Lang'),
  memberUid?: long(name='MemberUid'),
  pageSize?: string(name='PageSize'),
  regionNo?: string(name='RegionNo'),
  resourceType?: string(name='ResourceType'),
  searchItem?: string(name='SearchItem'),
  sgStatus?: string(name='SgStatus'),
  sourceIp?: string(name='SourceIp'),
  status?: string(name='Status'),
  type?: string(name='Type'),
  userType?: string(name='UserType'),
}

model DescribeAssetListResponseBody = {
  assets?: [ 
    {
      aliUid?: long(name='AliUid'),
      bindInstanceId?: string(name='BindInstanceId'),
      bindInstanceName?: string(name='BindInstanceName'),
      internetAddress?: string(name='InternetAddress'),
      intranetAddress?: string(name='IntranetAddress'),
      ipVersion?: int32(name='IpVersion'),
      memberUid?: long(name='MemberUid'),
      name?: string(name='Name'),
      note?: string(name='Note'),
      protectStatus?: string(name='ProtectStatus'),
      regionID?: string(name='RegionID'),
      regionStatus?: string(name='RegionStatus'),
      resourceInstanceId?: string(name='ResourceInstanceId'),
      resourceType?: string(name='ResourceType'),
      riskLevel?: string(name='RiskLevel'),
      sgStatus?: string(name='SgStatus'),
      sgStatusTime?: long(name='SgStatusTime'),
      syncStatus?: string(name='SyncStatus'),
      type?: string(name='Type'),
    }
  ](name='Assets'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAssetListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAssetListResponseBody(name='body'),
}

async function describeAssetListWithOptions(request: DescribeAssetListRequest, runtime: Util.RuntimeOptions): DescribeAssetListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAssetList', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAssetList(request: DescribeAssetListRequest): DescribeAssetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetListWithOptions(request, runtime);
}

model DescribeControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  aclUuid?: string(name='AclUuid'),
  currentPage?: string(name='CurrentPage'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  direction?: string(name='Direction'),
  ipVersion?: string(name='IpVersion'),
  lang?: string(name='Lang'),
  pageSize?: string(name='PageSize'),
  proto?: string(name='Proto'),
  release?: string(name='Release'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeControlPolicyResponseBody = {
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  policys?: [ 
    {
      aclAction?: string(name='AclAction'),
      aclUuid?: string(name='AclUuid'),
      applicationId?: string(name='ApplicationId'),
      applicationName?: string(name='ApplicationName'),
      description?: string(name='Description'),
      destPort?: string(name='DestPort'),
      destPortGroup?: string(name='DestPortGroup'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
      destPortType?: string(name='DestPortType'),
      destination?: string(name='Destination'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
      destinationGroupType?: string(name='DestinationGroupType'),
      destinationType?: string(name='DestinationType'),
      direction?: string(name='Direction'),
      dnsResult?: string(name='DnsResult'),
      dnsResultTime?: long(name='DnsResultTime'),
      hitLastTime?: long(name='HitLastTime'),
      hitTimes?: long(name='HitTimes'),
      ipVersion?: int32(name='IpVersion'),
      order?: int32(name='Order'),
      proto?: string(name='Proto'),
      release?: string(name='Release'),
      source?: string(name='Source'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
      sourceGroupType?: string(name='SourceGroupType'),
      sourceType?: string(name='SourceType'),
    }
  ](name='Policys'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeControlPolicyResponseBody(name='body'),
}

async function describeControlPolicyWithOptions(request: DescribeControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeControlPolicy(request: DescribeControlPolicyRequest): DescribeControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeControlPolicyWithOptions(request, runtime);
}

model DescribeDomainResolveRequest {
  domain?: string(name='Domain'),
  ipVersion?: string(name='IpVersion'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribeDomainResolveResponseBody = {
  requestId?: string(name='RequestId'),
  resolveResult?: {
    ipAddrs?: string(name='IpAddrs'),
    updateTime?: long(name='UpdateTime'),
  }(name='ResolveResult'),
}

model DescribeDomainResolveResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResolveResponseBody(name='body'),
}

async function describeDomainResolveWithOptions(request: DescribeDomainResolveRequest, runtime: Util.RuntimeOptions): DescribeDomainResolveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDomainResolve', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDomainResolve(request: DescribeDomainResolveRequest): DescribeDomainResolveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainResolveWithOptions(request, runtime);
}

model DescribeInstanceMembersRequest {
  currentPage?: string(name='CurrentPage'),
  memberDesc?: string(name='MemberDesc'),
  memberDisplayName?: string(name='MemberDisplayName'),
  memberUid?: string(name='MemberUid'),
  pageSize?: string(name='PageSize'),
}

model DescribeInstanceMembersResponseBody = {
  members?: [ 
    {
      createTime?: int32(name='CreateTime'),
      memberDesc?: string(name='MemberDesc'),
      memberDisplayName?: string(name='MemberDisplayName'),
      memberStatus?: string(name='MemberStatus'),
      memberUid?: long(name='MemberUid'),
      modifyTime?: int32(name='ModifyTime'),
    }
  ](name='Members'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMembersResponseBody(name='body'),
}

async function describeInstanceMembersWithOptions(request: DescribeInstanceMembersRequest, runtime: Util.RuntimeOptions): DescribeInstanceMembersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMembers', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMembers(request: DescribeInstanceMembersRequest): DescribeInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMembersWithOptions(request, runtime);
}

model DescribePolicyAdvancedConfigRequest {
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribePolicyAdvancedConfigResponseBody = {
  internetSwitch?: string(name='InternetSwitch'),
  requestId?: string(name='RequestId'),
}

model DescribePolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyAdvancedConfigResponseBody(name='body'),
}

async function describePolicyAdvancedConfigWithOptions(request: DescribePolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): DescribePolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyAdvancedConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyAdvancedConfig(request: DescribePolicyAdvancedConfigRequest): DescribePolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyAdvancedConfigWithOptions(request, runtime);
}

model DescribePolicyPriorUsedRequest {
  direction?: string(name='Direction'),
  ipVersion?: string(name='IpVersion'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model DescribePolicyPriorUsedResponseBody = {
  end?: int32(name='End'),
  requestId?: string(name='RequestId'),
  start?: int32(name='Start'),
}

model DescribePolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePolicyPriorUsedResponseBody(name='body'),
}

async function describePolicyPriorUsedWithOptions(request: DescribePolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribePolicyPriorUsedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePolicyPriorUsed', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePolicyPriorUsed(request: DescribePolicyPriorUsedRequest): DescribePolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyPriorUsedWithOptions(request, runtime);
}

model DescribeRiskEventGroupRequest {
  attackApp?: [ string ](name='AttackApp'),
  attackType?: string(name='AttackType'),
  currentPage?: string(name='CurrentPage'),
  dataType?: string(name='DataType'),
  direction?: string(name='Direction'),
  dstIP?: string(name='DstIP'),
  dstNetworkInstanceId?: string(name='DstNetworkInstanceId'),
  endTime?: string(name='EndTime'),
  firewallType?: string(name='FirewallType'),
  lang?: string(name='Lang'),
  noLocation?: string(name='NoLocation'),
  pageSize?: string(name='PageSize'),
  ruleResult?: string(name='RuleResult'),
  ruleSource?: string(name='RuleSource'),
  srcIP?: string(name='SrcIP'),
  srcNetworkInstanceId?: string(name='SrcNetworkInstanceId'),
  startTime?: string(name='StartTime'),
  vulLevel?: string(name='VulLevel'),
}

model DescribeRiskEventGroupResponseBody = {
  dataList?: [ 
    {
      attackApp?: string(name='AttackApp'),
      attackType?: int32(name='AttackType'),
      description?: string(name='Description'),
      direction?: string(name='Direction'),
      dstIP?: string(name='DstIP'),
      eventCount?: int32(name='EventCount'),
      eventId?: string(name='EventId'),
      eventName?: string(name='EventName'),
      firstEventTime?: int32(name='FirstEventTime'),
      IPLocationInfo?: {
        cityId?: string(name='CityId'),
        cityName?: string(name='CityName'),
        countryId?: string(name='CountryId'),
        countryName?: string(name='CountryName'),
      }(name='IPLocationInfo'),
      lastEventTime?: int32(name='LastEventTime'),
      resourcePrivateIPList?: [ 
        {
          regionNo?: string(name='RegionNo'),
          resourceInstanceId?: string(name='ResourceInstanceId'),
          resourceInstanceName?: string(name='ResourceInstanceName'),
          resourcePrivateIP?: string(name='ResourcePrivateIP'),
        }
      ](name='ResourcePrivateIPList'),
      resourceType?: string(name='ResourceType'),
      ruleId?: string(name='RuleId'),
      ruleResult?: int32(name='RuleResult'),
      ruleSource?: int32(name='RuleSource'),
      srcIP?: string(name='SrcIP'),
      srcPrivateIPList?: [ string ](name='SrcPrivateIPList'),
      tag?: string(name='Tag'),
      vpcDstInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId'),
        ecsInstanceName?: string(name='EcsInstanceName'),
        networkInstanceId?: string(name='NetworkInstanceId'),
        networkInstanceName?: string(name='NetworkInstanceName'),
        regionNo?: string(name='RegionNo'),
      }(name='VpcDstInfo'),
      vpcSrcInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId'),
        ecsInstanceName?: string(name='EcsInstanceName'),
        networkInstanceId?: string(name='NetworkInstanceId'),
        networkInstanceName?: string(name='NetworkInstanceName'),
        regionNo?: string(name='RegionNo'),
      }(name='VpcSrcInfo'),
      vulLevel?: int32(name='VulLevel'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRiskEventGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRiskEventGroupResponseBody(name='body'),
}

async function describeRiskEventGroupWithOptions(request: DescribeRiskEventGroupRequest, runtime: Util.RuntimeOptions): DescribeRiskEventGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRiskEventGroup', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRiskEventGroup(request: DescribeRiskEventGroupRequest): DescribeRiskEventGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskEventGroupWithOptions(request, runtime);
}

model DescribeVpcFirewallAclGroupListRequest {
  currentPage?: string(name='CurrentPage'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus'),
  lang?: string(name='Lang'),
  pageSize?: string(name='PageSize'),
}

model DescribeVpcFirewallAclGroupListResponseBody = {
  aclGroupList?: [ 
    {
      aclGroupId?: string(name='AclGroupId'),
      aclGroupName?: string(name='AclGroupName'),
      memberUid?: string(name='MemberUid'),
    }
  ](name='AclGroupList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeVpcFirewallAclGroupListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallAclGroupListResponseBody(name='body'),
}

async function describeVpcFirewallAclGroupListWithOptions(request: DescribeVpcFirewallAclGroupListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallAclGroupListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallAclGroupList', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallAclGroupList(request: DescribeVpcFirewallAclGroupListRequest): DescribeVpcFirewallAclGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallAclGroupListWithOptions(request, runtime);
}

model DescribeVpcFirewallCenDetailRequest {
  lang?: string(name='Lang'),
  networkInstanceId?: string(name='NetworkInstanceId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallCenDetailResponseBody = {
  connectType?: string(name='ConnectType'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus'),
  localVpc?: {
    attachmentId?: string(name='AttachmentId'),
    attachmentName?: string(name='AttachmentName'),
    defendCidrList?: [ string ](name='DefendCidrList'),
    eniList?: [ 
      {
        eniId?: string(name='EniId'),
        eniPrivateIpAddress?: string(name='EniPrivateIpAddress'),
      }
    ](name='EniList'),
    manualVSwitchId?: string(name='ManualVSwitchId'),
    networkInstanceId?: string(name='NetworkInstanceId'),
    networkInstanceName?: string(name='NetworkInstanceName'),
    networkInstanceType?: string(name='NetworkInstanceType'),
    ownerId?: string(name='OwnerId'),
    regionNo?: string(name='RegionNo'),
    routeMode?: string(name='RouteMode'),
    supportManualMode?: string(name='SupportManualMode'),
    transitRouterId?: string(name='TransitRouterId'),
    transitRouterType?: string(name='TransitRouterType'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr'),
            nextHopInstanceId?: string(name='NextHopInstanceId'),
          }
        ](name='RouteEntryList'),
        routeTableId?: string(name='RouteTableId'),
      }
    ](name='VpcCidrTableList'),
    vpcId?: string(name='VpcId'),
    vpcName?: string(name='VpcName'),
  }(name='LocalVpc'),
  requestId?: string(name='RequestId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  vpcFirewallName?: string(name='VpcFirewallName'),
}

model DescribeVpcFirewallCenDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallCenDetailResponseBody(name='body'),
}

async function describeVpcFirewallCenDetailWithOptions(request: DescribeVpcFirewallCenDetailRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallCenDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallCenDetail', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallCenDetail(request: DescribeVpcFirewallCenDetailRequest): DescribeVpcFirewallCenDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallCenDetailWithOptions(request, runtime);
}

model DescribeVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  aclUuid?: string(name='AclUuid'),
  currentPage?: string(name='CurrentPage'),
  description?: string(name='Description'),
  destination?: string(name='Destination'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  pageSize?: string(name='PageSize'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallControlPolicyResponseBody = {
  policys?: [ 
    {
      aclAction?: string(name='AclAction'),
      aclUuid?: string(name='AclUuid'),
      applicationId?: string(name='ApplicationId'),
      applicationName?: string(name='ApplicationName'),
      description?: string(name='Description'),
      destPort?: string(name='DestPort'),
      destPortGroup?: string(name='DestPortGroup'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
      destPortType?: string(name='DestPortType'),
      destination?: string(name='Destination'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
      destinationType?: string(name='DestinationType'),
      direction?: string(name='Direction'),
      hitTimes?: int32(name='HitTimes'),
      memberUid?: string(name='MemberUid'),
      order?: int32(name='Order'),
      proto?: string(name='Proto'),
      source?: string(name='Source'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
      sourceType?: string(name='SourceType'),
    }
  ](name='Policys'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
}

model DescribeVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallControlPolicyResponseBody(name='body'),
}

async function describeVpcFirewallControlPolicyWithOptions(request: DescribeVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallControlPolicy(request: DescribeVpcFirewallControlPolicyRequest): DescribeVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeVpcFirewallDefaultIPSConfigRequest {
  memberUid?: string(name='MemberUid'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallDefaultIPSConfigResponseBody = {
  basicRules?: int32(name='BasicRules'),
  enableAllPatch?: int32(name='EnableAllPatch'),
  enableDefault?: int32(name='EnableDefault'),
  requestId?: string(name='RequestId'),
  runMode?: int32(name='RunMode'),
}

model DescribeVpcFirewallDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

async function describeVpcFirewallDefaultIPSConfigWithOptions(request: DescribeVpcFirewallDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallDefaultIPSConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallDefaultIPSConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallDefaultIPSConfig(request: DescribeVpcFirewallDefaultIPSConfigRequest): DescribeVpcFirewallDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallDefaultIPSConfigWithOptions(request, runtime);
}

model DescribeVpcFirewallDetailRequest {
  lang?: string(name='Lang'),
  localVpcId?: string(name='LocalVpcId'),
  peerVpcId?: string(name='PeerVpcId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallDetailResponseBody = {
  bandwidth?: int32(name='Bandwidth'),
  connectType?: string(name='ConnectType'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus'),
  localVpc?: {
    eniId?: string(name='EniId'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress'),
    regionNo?: string(name='RegionNo'),
    routerInterfaceId?: string(name='RouterInterfaceId'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr'),
            nextHopInstanceId?: string(name='NextHopInstanceId'),
          }
        ](name='RouteEntryList'),
        routeTableId?: string(name='RouteTableId'),
      }
    ](name='VpcCidrTableList'),
    vpcId?: string(name='VpcId'),
    vpcName?: string(name='VpcName'),
  }(name='LocalVpc'),
  peerVpc?: {
    eniId?: string(name='EniId'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress'),
    regionNo?: string(name='RegionNo'),
    routerInterfaceId?: string(name='RouterInterfaceId'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr'),
            nextHopInstanceId?: string(name='NextHopInstanceId'),
          }
        ](name='RouteEntryList'),
        routeTableId?: string(name='RouteTableId'),
      }
    ](name='VpcCidrTableList'),
    vpcId?: string(name='VpcId'),
    vpcName?: string(name='VpcName'),
  }(name='PeerVpc'),
  requestId?: string(name='RequestId'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  vpcFirewallName?: string(name='VpcFirewallName'),
}

model DescribeVpcFirewallDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallDetailResponseBody(name='body'),
}

async function describeVpcFirewallDetailWithOptions(request: DescribeVpcFirewallDetailRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallDetail', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallDetail(request: DescribeVpcFirewallDetailRequest): DescribeVpcFirewallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallDetailWithOptions(request, runtime);
}

model DescribeVpcFirewallListRequest {
  currentPage?: string(name='CurrentPage'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  pageSize?: string(name='PageSize'),
  regionNo?: string(name='RegionNo'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  vpcFirewallName?: string(name='VpcFirewallName'),
  vpcId?: string(name='VpcId'),
}

model DescribeVpcFirewallListResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vpcFirewalls?: [ 
    {
      bandwidth?: int32(name='Bandwidth'),
      connectType?: string(name='ConnectType'),
      firewallMode?: string(name='FirewallMode'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus'),
      healthCheckResult?: string(name='HealthCheckResult'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules'),
        enableAllPatch?: int32(name='EnableAllPatch'),
        runMode?: int32(name='RunMode'),
      }(name='IpsConfig'),
      localVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus'),
        ownerId?: long(name='OwnerId'),
        regionNo?: string(name='RegionNo'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr'),
                nextHopInstanceId?: string(name='NextHopInstanceId'),
              }
            ](name='RouteEntryList'),
            routeTableId?: string(name='RouteTableId'),
          }
        ](name='VpcCidrTableList'),
        vpcId?: string(name='VpcId'),
        vpcName?: string(name='VpcName'),
      }(name='LocalVpc'),
      memberUid?: string(name='MemberUid'),
      operationResult?: string(name='OperationResult'),
      peerVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus'),
        ownerId?: long(name='OwnerId'),
        regionNo?: string(name='RegionNo'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr'),
                nextHopInstanceId?: string(name='NextHopInstanceId'),
              }
            ](name='RouteEntryList'),
            routeTableId?: string(name='RouteTableId'),
          }
        ](name='VpcCidrTableList'),
        vpcId?: string(name='VpcId'),
        vpcName?: string(name='VpcName'),
      }(name='PeerVpc'),
      regionStatus?: string(name='RegionStatus'),
      vpcFirewallId?: string(name='VpcFirewallId'),
      vpcFirewallName?: string(name='VpcFirewallName'),
    }
  ](name='VpcFirewalls'),
}

model DescribeVpcFirewallListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallListResponseBody(name='body'),
}

async function describeVpcFirewallListWithOptions(request: DescribeVpcFirewallListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallList', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallList(request: DescribeVpcFirewallListRequest): DescribeVpcFirewallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallListWithOptions(request, runtime);
}

model DescribeVpcFirewallPolicyPriorUsedRequest {
  lang?: string(name='Lang'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model DescribeVpcFirewallPolicyPriorUsedResponseBody = {
  end?: int32(name='End'),
  requestId?: string(name='RequestId'),
  start?: int32(name='Start'),
}

model DescribeVpcFirewallPolicyPriorUsedResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVpcFirewallPolicyPriorUsedResponseBody(name='body'),
}

async function describeVpcFirewallPolicyPriorUsedWithOptions(request: DescribeVpcFirewallPolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallPolicyPriorUsedResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVpcFirewallPolicyPriorUsed', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVpcFirewallPolicyPriorUsed(request: DescribeVpcFirewallPolicyPriorUsedRequest): DescribeVpcFirewallPolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallPolicyPriorUsedWithOptions(request, runtime);
}

model ModifyAddressBookRequest {
  addressList?: string(name='AddressList'),
  autoAddTagEcs?: string(name='AutoAddTagEcs'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  groupUuid?: string(name='GroupUuid'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagList'),
  tagRelation?: string(name='TagRelation'),
}

model ModifyAddressBookResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAddressBookResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAddressBookResponseBody(name='body'),
}

async function modifyAddressBookWithOptions(request: ModifyAddressBookRequest, runtime: Util.RuntimeOptions): ModifyAddressBookResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAddressBook', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAddressBook(request: ModifyAddressBookRequest): ModifyAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAddressBookWithOptions(request, runtime);
}

model ModifyControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  aclUuid?: string(name='AclUuid'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destPortGroup?: string(name='DestPortGroup'),
  destPortType?: string(name='DestPortType'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  direction?: string(name='Direction'),
  lang?: string(name='Lang'),
  proto?: string(name='Proto'),
  release?: string(name='Release'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp'),
  sourceType?: string(name='SourceType'),
}

model ModifyControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyControlPolicyResponseBody(name='body'),
}

async function modifyControlPolicyWithOptions(request: ModifyControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyControlPolicy(request: ModifyControlPolicyRequest): ModifyControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyWithOptions(request, runtime);
}

model ModifyControlPolicyPositionRequest {
  direction?: string(name='Direction'),
  lang?: string(name='Lang'),
  newOrder?: string(name='NewOrder'),
  oldOrder?: string(name='OldOrder'),
  sourceIp?: string(name='SourceIp'),
}

model ModifyControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyControlPolicyPositionResponseBody(name='body'),
}

async function modifyControlPolicyPositionWithOptions(request: ModifyControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyPositionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyControlPolicyPosition', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyControlPolicyPosition(request: ModifyControlPolicyPositionRequest): ModifyControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyPositionWithOptions(request, runtime);
}

model ModifyInstanceMemberAttributesRequest {
  members?: [ 
    {
      memberDesc?: string(name='MemberDesc'),
      memberUid?: long(name='MemberUid'),
    }
  ](name='Members'),
}

model ModifyInstanceMemberAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMemberAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMemberAttributesResponseBody(name='body'),
}

async function modifyInstanceMemberAttributesWithOptions(request: ModifyInstanceMemberAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMemberAttributesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMemberAttributes', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMemberAttributes(request: ModifyInstanceMemberAttributesRequest): ModifyInstanceMemberAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMemberAttributesWithOptions(request, runtime);
}

model ModifyPolicyAdvancedConfigRequest {
  internetSwitch?: string(name='InternetSwitch'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model ModifyPolicyAdvancedConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPolicyAdvancedConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPolicyAdvancedConfigResponseBody(name='body'),
}

async function modifyPolicyAdvancedConfigWithOptions(request: ModifyPolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): ModifyPolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyPolicyAdvancedConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyPolicyAdvancedConfig(request: ModifyPolicyAdvancedConfigRequest): ModifyPolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyAdvancedConfigWithOptions(request, runtime);
}

model ModifyVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  vpcCidrTableList?: string(name='VpcCidrTableList'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  vpcFirewallName?: string(name='VpcFirewallName'),
}

model ModifyVpcFirewallCenConfigureResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallCenConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallCenConfigureResponseBody(name='body'),
}

async function modifyVpcFirewallCenConfigureWithOptions(request: ModifyVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallCenConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallCenConfigure(request: ModifyVpcFirewallCenConfigureRequest): ModifyVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallCenConfigureWithOptions(request, runtime);
}

model ModifyVpcFirewallCenSwitchStatusRequest {
  firewallSwitch?: string(name='FirewallSwitch'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model ModifyVpcFirewallCenSwitchStatusResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallCenSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallCenSwitchStatusResponseBody(name='body'),
}

async function modifyVpcFirewallCenSwitchStatusWithOptions(request: ModifyVpcFirewallCenSwitchStatusRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallCenSwitchStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallCenSwitchStatus', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallCenSwitchStatus(request: ModifyVpcFirewallCenSwitchStatusRequest): ModifyVpcFirewallCenSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallCenSwitchStatusWithOptions(request, runtime);
}

model ModifyVpcFirewallConfigureRequest {
  lang?: string(name='Lang'),
  localVpcCidrTableList?: string(name='LocalVpcCidrTableList'),
  memberUid?: string(name='MemberUid'),
  peerVpcCidrTableList?: string(name='PeerVpcCidrTableList'),
  vpcFirewallId?: string(name='VpcFirewallId'),
  vpcFirewallName?: string(name='VpcFirewallName'),
}

model ModifyVpcFirewallConfigureResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallConfigureResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallConfigureResponseBody(name='body'),
}

async function modifyVpcFirewallConfigureWithOptions(request: ModifyVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallConfigure', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallConfigure(request: ModifyVpcFirewallConfigureRequest): ModifyVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallConfigureWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction'),
  aclUuid?: string(name='AclUuid'),
  applicationName?: string(name='ApplicationName'),
  description?: string(name='Description'),
  destPort?: string(name='DestPort'),
  destPortGroup?: string(name='DestPortGroup'),
  destPortType?: string(name='DestPortType'),
  destination?: string(name='Destination'),
  destinationType?: string(name='DestinationType'),
  lang?: string(name='Lang'),
  proto?: string(name='Proto'),
  source?: string(name='Source'),
  sourceType?: string(name='SourceType'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model ModifyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallControlPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallControlPolicyResponseBody(name='body'),
}

async function modifyVpcFirewallControlPolicyWithOptions(request: ModifyVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallControlPolicy', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallControlPolicy(request: ModifyVpcFirewallControlPolicyRequest): ModifyVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyPositionRequest {
  lang?: string(name='Lang'),
  newOrder?: string(name='NewOrder'),
  oldOrder?: string(name='OldOrder'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model ModifyVpcFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallControlPolicyPositionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallControlPolicyPositionResponseBody(name='body'),
}

async function modifyVpcFirewallControlPolicyPositionWithOptions(request: ModifyVpcFirewallControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyPositionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallControlPolicyPosition', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallControlPolicyPosition(request: ModifyVpcFirewallControlPolicyPositionRequest): ModifyVpcFirewallControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyPositionWithOptions(request, runtime);
}

model ModifyVpcFirewallDefaultIPSConfigRequest {
  basicRules?: string(name='BasicRules'),
  enableAllPatch?: string(name='EnableAllPatch'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  runMode?: string(name='RunMode'),
  sourceIp?: string(name='SourceIp'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model ModifyVpcFirewallDefaultIPSConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallDefaultIPSConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

async function modifyVpcFirewallDefaultIPSConfigWithOptions(request: ModifyVpcFirewallDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallDefaultIPSConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallDefaultIPSConfig', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallDefaultIPSConfig(request: ModifyVpcFirewallDefaultIPSConfigRequest): ModifyVpcFirewallDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallDefaultIPSConfigWithOptions(request, runtime);
}

model ModifyVpcFirewallSwitchStatusRequest {
  firewallSwitch?: string(name='FirewallSwitch'),
  lang?: string(name='Lang'),
  memberUid?: string(name='MemberUid'),
  vpcFirewallId?: string(name='VpcFirewallId'),
}

model ModifyVpcFirewallSwitchStatusResponseBody = {
  module?: string(name='Module'),
  requestId?: string(name='RequestId'),
}

model ModifyVpcFirewallSwitchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVpcFirewallSwitchStatusResponseBody(name='body'),
}

async function modifyVpcFirewallSwitchStatusWithOptions(request: ModifyVpcFirewallSwitchStatusRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallSwitchStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyVpcFirewallSwitchStatus', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyVpcFirewallSwitchStatus(request: ModifyVpcFirewallSwitchStatusRequest): ModifyVpcFirewallSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallSwitchStatusWithOptions(request, runtime);
}

model PutDisableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model PutDisableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutDisableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutDisableAllFwSwitchResponseBody(name='body'),
}

async function putDisableAllFwSwitchWithOptions(request: PutDisableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableAllFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutDisableAllFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putDisableAllFwSwitch(request: PutDisableAllFwSwitchRequest): PutDisableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableAllFwSwitchWithOptions(request, runtime);
}

model PutDisableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList'),
  lang?: string(name='Lang'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
  sourceIp?: string(name='SourceIp'),
}

model PutDisableFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutDisableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutDisableFwSwitchResponseBody(name='body'),
}

async function putDisableFwSwitchWithOptions(request: PutDisableFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutDisableFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putDisableFwSwitch(request: PutDisableFwSwitchRequest): PutDisableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableFwSwitchWithOptions(request, runtime);
}

model PutEnableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId'),
  lang?: string(name='Lang'),
  sourceIp?: string(name='SourceIp'),
}

model PutEnableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutEnableAllFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutEnableAllFwSwitchResponseBody(name='body'),
}

async function putEnableAllFwSwitchWithOptions(request: PutEnableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableAllFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutEnableAllFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putEnableAllFwSwitch(request: PutEnableAllFwSwitchRequest): PutEnableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableAllFwSwitchWithOptions(request, runtime);
}

model PutEnableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList'),
  lang?: string(name='Lang'),
  regionList?: [ string ](name='RegionList'),
  resourceTypeList?: [ string ](name='ResourceTypeList'),
  sourceIp?: string(name='SourceIp'),
}

model PutEnableFwSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model PutEnableFwSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: PutEnableFwSwitchResponseBody(name='body'),
}

async function putEnableFwSwitchWithOptions(request: PutEnableFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableFwSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PutEnableFwSwitch', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function putEnableFwSwitch(request: PutEnableFwSwitchRequest): PutEnableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableFwSwitchWithOptions(request, runtime);
}

model ResetVpcFirewallRuleHitCountRequest {
  aclUuid?: string(name='AclUuid'),
  lang?: string(name='Lang'),
}

model ResetVpcFirewallRuleHitCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetVpcFirewallRuleHitCountResponse = {
  headers: map[string]string(name='headers'),
  body: ResetVpcFirewallRuleHitCountResponseBody(name='body'),
}

async function resetVpcFirewallRuleHitCountWithOptions(request: ResetVpcFirewallRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetVpcFirewallRuleHitCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResetVpcFirewallRuleHitCount', '2017-12-07', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resetVpcFirewallRuleHitCount(request: ResetVpcFirewallRuleHitCountRequest): ResetVpcFirewallRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetVpcFirewallRuleHitCountWithOptions(request, runtime);
}

