/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  @endpointMap = {
    'ap-southeast-1' = 'cloudfw.ap-southeast-1.aliyuncs.com',
    'cn-hangzhou' = 'cloudfw.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudfw', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAddressBookRequest {
  ackClusterConnectorId?: string(name='AckClusterConnectorId', example='ac-7c1bad6c3cc84c33baab1'),
  ackLabels?: [ 
    {
      key?: string(name='Key', example='app'),
      value?: string(name='Value', example='storage-operator'),
    }
  ](name='AckLabels'),
  ackNamespaces?: [ string ](name='AckNamespaces'),
  addressList?: string(name='AddressList', description='The addresses that you want to add to the address book. Separate multiple addresses with commas (,).

>  If you set GroupType to `ip`, `port` or `domain`, you must specify AddressList.

*   If you set GroupType to `ip`, you must add IP addresses to the address book. Example: 192.0.XX.XX/32,192.0.XX.XX/24.
*   If you set GroupType to `port`, you must add port numbers or port ranges to the address book. Example: 80,100/200.
*   If you set GroupType to `domain`, you must add domain names to the address book. Example: example.com,aliyundoc.com.', example='192.0.XX.XX/32, 192.0.XX.XX/24'),
  autoAddTagEcs?: string(name='AutoAddTagEcs', description='Specifies whether to automatically add public IP addresses of ECS instances to the address book if the instances match the specified tags. Valid values:

*   **1**: yes
*   **0** (default): no', example='1'),
  description?: string(name='Description', description='The description of the address book.

This parameter is required.', example='sz-001'),
  groupName?: string(name='GroupName', description='The name of the address book.

This parameter is required.', example='sz-001'),
  groupType?: string(name='GroupType', description='The type of the address book. Valid values:

*   **ip**: IP address book
*   **domain**: domain address book
*   **port**: port address book
*   **tag**: ECS tag-based address book

This parameter is required.', example='ip'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of the ECS tag.', example='TXY'),
      tagValue?: string(name='TagValue', description='The value of the ECS tag.', example='1'),
    }
  ](name='TagList', description='The ECS tags that you want to match.'),
  tagRelation?: string(name='TagRelation', description='The logical relation among the ECS tags that you want to match. Valid values:

*   **and** (default): Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book.
*   **or**: The public IP addresses of ECS instances that match one of the specified tags can be added to the address book.', example='and'),
}

model AddAddressBookResponseBody = {
  groupUuid?: string(name='GroupUuid', description='The UUID of the returned address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2****'),
}

model AddAddressBookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddAddressBookResponseBody(name='body'),
}

/**
 * @summary Creates an address book for access control. Supported address book types are IP address books, Elastic Compute Service (ECS) tag-based address books, port address books, and domain address books. An ECS tag-based address book includes the public IP addresses of the ECS instances that have specific tags.
 *
 * @description You can call the AddAddressBook operation to create an address book for access control. The address book can be an IP address book, an ECS tag-based address book, a port address book, or a domain address book.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddAddressBookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddAddressBookResponse
 */
async function addAddressBookWithOptions(request: AddAddressBookRequest, runtime: Util.RuntimeOptions): AddAddressBookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ackClusterConnectorId)) {
    query['AckClusterConnectorId'] = request.ackClusterConnectorId;
  }
  if (!Util.isUnset(request.ackLabels)) {
    query['AckLabels'] = request.ackLabels;
  }
  if (!Util.isUnset(request.ackNamespaces)) {
    query['AckNamespaces'] = request.ackNamespaces;
  }
  if (!Util.isUnset(request.addressList)) {
    query['AddressList'] = request.addressList;
  }
  if (!Util.isUnset(request.autoAddTagEcs)) {
    query['AutoAddTagEcs'] = request.autoAddTagEcs;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.tagRelation)) {
    query['TagRelation'] = request.tagRelation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAddressBook',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an address book for access control. Supported address book types are IP address books, Elastic Compute Service (ECS) tag-based address books, port address books, and domain address books. An ECS tag-based address book includes the public IP addresses of the ECS instances that have specific tags.
 *
 * @description You can call the AddAddressBook operation to create an address book for access control. The address book can be an IP address book, an ECS tag-based address book, a port address book, or a domain address book.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddAddressBookRequest
 * @return AddAddressBookResponse
 */
async function addAddressBook(request: AddAddressBookRequest): AddAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAddressBookWithOptions(request, runtime);
}

model AddControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.

This parameter is required.', example='accept'),
  applicationName?: string(name='ApplicationName', description='The application type supported by the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**
*   **ANY**

> The value of this parameter is based on the value of Proto. If Proto is set to TCP, you can set ApplicationName to any valid value. If Proto is set to UDP, ICMP, or ANY, you can set ApplicationName only to ANY. You must specify at least one of the ApplicationNameList and ApplicationName parameters.', example='ANY', deprecated=true),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.'),
  description?: string(name='Description', description='The description of the access control policy.

This parameter is required.', example='Allows traffic'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. Valid values:

*   If Proto is set to ICMP, DestPort is automatically left empty.

> If Proto is set to ICMP, access control does not take effect on the destination port.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to group, DestPort is empty.

> If DestPortType is set to group, you do not need to specify the destination port number. All ports on which the access control policy takes effect are included in the destination port address book.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to port, the value of DestPort is the destination port number.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.

> If DestPortType is set to group, you must specify the name of the destination port address book.', example='my_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy.

Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy.

Valid values:

*   If DestinationType is set to net, the value of this parameter is a CIDR block.

    Example: 1.2.XX.XX/24

*   If DestinationType is set to group, the value of this parameter is an address book name.

    Example: db_group

*   If DestinationType is set to domain, the value of this parameter is a domain name.

    Example: \\\\*.aliyuncs.com

*   If DestinationType is set to location, the value of this parameter is a location.

    Example: ["BJ11", "ZB"]

This parameter is required.', example='192.0.XX.XX/24'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: location

This parameter is required.', example='net'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic

This parameter is required.', example='in'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='FQDN'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694764800'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy.

Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='6'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  newOrder?: string(name='NewOrder', description='The priority of the access control policy. The priority value starts from 1. A smaller priority value indicates a higher priority.

This parameter is required.', example='1'),
  proto?: string(name='Proto', description='The protocol type supported by the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**

This parameter is required.', example='ANY'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: enables the access control policy.
*   **false**: disables the access control policy.', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If you set RepeatType to `Permanent`, `None`, or `Daily`, leave this parameter empty. Example: [].
*   If you set RepeatType to Weekly, you must specify this parameter. Example: [0, 6].

>  If you set RepeatType to Weekly, the fields in the value of this parameter cannot be repeated.

*   If you set RepeatType to `Monthly`, you must specify this parameter. Example: [1, 31].

>  If you set RepeatType to Monthly, the fields in the value of this parameter cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If SourceType is set to net, the value of this parameter is a CIDR block.

    Example: 1.1.XX.XX/24

*   If SourceType is set to group, the value of this parameter is an address book name.

    Example: db_group

*   If SourceType is set to location, the value of this parameter is a location.

    Example: ["BJ11", "ZB"]

This parameter is required.', example='192.0.XX.XX/24'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location

This parameter is required.', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694761200'),
}

model AddControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy that is created on the Internet firewall.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model AddControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddControlPolicyResponseBody(name='body'),
}

/**
 * @summary Creates an access control policy.
 *
 * @description You can call the AddControlPolicy operation to create an access control policy to allow, block, or monitor traffic that reaches Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddControlPolicyResponse
 */
async function addControlPolicyWithOptions(request: AddControlPolicyRequest, runtime: Util.RuntimeOptions): AddControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an access control policy.
 *
 * @description You can call the AddControlPolicy operation to create an access control policy to allow, block, or monitor traffic that reaches Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddControlPolicyRequest
 * @return AddControlPolicyResponse
 */
async function addControlPolicy(request: AddControlPolicyRequest): AddControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addControlPolicyWithOptions(request, runtime);
}

model AddDnsFirewallPolicyRequest {
  aclAction?: string(name='AclAction', description='This parameter is required.', example='log'),
  description?: string(name='Description', description='This parameter is required.', example='test'),
  destination?: string(name='Destination', description='This parameter is required.', example='db_group'),
  destinationType?: string(name='DestinationType', description='This parameter is required.', example='domain'),
  direction?: string(name='Direction', example='out'),
  ipVersion?: string(name='IpVersion', description='This parameter is required.', example='4'),
  lang?: string(name='Lang', example='zh'),
  priority?: string(name='Priority', description='This parameter is required.', example='1'),
  release?: string(name='Release', description='This parameter is required.', example='true'),
  source?: string(name='Source', description='This parameter is required.', example='192.168.0.223/32'),
  sourceIp?: string(name='SourceIp', example='140.205.118.97'),
  sourceType?: string(name='SourceType', description='This parameter is required.', example='net'),
}

model AddDnsFirewallPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', example='f88dae6f-XXX-XXX-613de9ab2be8'),
  requestId?: string(name='RequestId', example='71209DFE-XXX-XXX-52B4A4E9DA3B'),
}

model AddDnsFirewallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDnsFirewallPolicyResponseBody(name='body'),
}

/**
 * @summary 添加DNS防火墙ACL
 *
 * @param request AddDnsFirewallPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddDnsFirewallPolicyResponse
 */
async function addDnsFirewallPolicyWithOptions(request: AddDnsFirewallPolicyRequest, runtime: Util.RuntimeOptions): AddDnsFirewallPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDnsFirewallPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加DNS防火墙ACL
 *
 * @param request AddDnsFirewallPolicyRequest
 * @return AddDnsFirewallPolicyResponse
 */
async function addDnsFirewallPolicy(request: AddDnsFirewallPolicyRequest): AddDnsFirewallPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDnsFirewallPolicyWithOptions(request, runtime);
}

model AddInstanceMembersRequest {
  members?: [ 
    {
      memberDesc?: string(name='MemberDesc', description='The remarks of the member. The value must be 1 to 256 characters in length.', example='renewal'),
      memberUid?: long(name='MemberUid', description='The UID of the member. You can add up to 20 members to Cloud Firewall at a time.

This parameter is required.', example='258039427902****'),
    }
  ](name='Members', description='The members.

This parameter is required.'),
}

model AddInstanceMembersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B40A54DF-C142-44F7-8441-B31C1EADB36E'),
}

model AddInstanceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddInstanceMembersResponseBody(name='body'),
}

/**
 * @summary Adds members to Cloud Firewall.
 *
 * @description You can call this operation to add members to Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddInstanceMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddInstanceMembersResponse
 */
async function addInstanceMembersWithOptions(request: AddInstanceMembersRequest, runtime: Util.RuntimeOptions): AddInstanceMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.members)) {
    query['Members'] = request.members;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddInstanceMembers',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds members to Cloud Firewall.
 *
 * @description You can call this operation to add members to Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request AddInstanceMembersRequest
 * @return AddInstanceMembersResponse
 */
async function addInstanceMembers(request: AddInstanceMembersRequest): AddInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return addInstanceMembersWithOptions(request, runtime);
}

model AddPrivateDnsDomainNameRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='cfw-xxx'),
  domainNameList?: [ string ](name='DomainNameList', description='This parameter is required.'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-shenzhen'),
}

model AddPrivateDnsDomainNameResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
}

model AddPrivateDnsDomainNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddPrivateDnsDomainNameResponseBody(name='body'),
}

/**
 * @summary 添加私网DNS域名
 *
 * @param request AddPrivateDnsDomainNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddPrivateDnsDomainNameResponse
 */
async function addPrivateDnsDomainNameWithOptions(request: AddPrivateDnsDomainNameRequest, runtime: Util.RuntimeOptions): AddPrivateDnsDomainNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceId)) {
    query['AccessInstanceId'] = request.accessInstanceId;
  }
  if (!Util.isUnset(request.domainNameList)) {
    query['DomainNameList'] = request.domainNameList;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddPrivateDnsDomainName',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 添加私网DNS域名
 *
 * @param request AddPrivateDnsDomainNameRequest
 * @return AddPrivateDnsDomainNameResponse
 */
async function addPrivateDnsDomainName(request: AddPrivateDnsDomainNameRequest): AddPrivateDnsDomainNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return addPrivateDnsDomainNameWithOptions(request, runtime);
}

model BatchCopyVpcFirewallControlPolicyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  sourceVpcFirewallId?: string(name='SourceVpcFirewallId', description='The ID of the policy group of the source VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the IDs of policy groups.

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
  targetVpcFirewallId?: string(name='TargetVpcFirewallId', description='The ID of the policy group of the destination VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a VBR, or a CCN instance.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the IDs of policy groups.

This parameter is required.', example='vfw-e37d3a04cf79446a****'),
}

model BatchCopyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model BatchCopyVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCopyVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Copies all access control policies from a policy group of a source virtual private cloud (VPC) firewall to a policy group of a destination VPC firewall.
 *
 * @description You can call the BatchCopyVpcFirewallControlPolicy operation to copy all access control policies from a policy group of a source VPC firewall to a policy group of a destination VPC firewall.  
 * Before you call this operation, we recommend that you back up access control policies. For more information about how to back up an access control policy, see [Back up an access control policy](https://www.alibabacloud.com/help/en/cloud-firewall/latest/back-up-and-roll-back-an-access-control-policy).  
 * After you call this operation, all the access control policies in the policy group of the destination VPC firewall are replaced.  
 * The policy groups of the source VPC firewall and the destination VPC firewall must belong to the same Alibaba Cloud account.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. When the number of calls to this operation per second exceeds the limit, throttling is triggered. Throttling may affect your business. We recommend that you take note of the limit on this operation.
 *
 * @param request BatchCopyVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchCopyVpcFirewallControlPolicyResponse
 */
async function batchCopyVpcFirewallControlPolicyWithOptions(request: BatchCopyVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): BatchCopyVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.sourceVpcFirewallId)) {
    query['SourceVpcFirewallId'] = request.sourceVpcFirewallId;
  }
  if (!Util.isUnset(request.targetVpcFirewallId)) {
    query['TargetVpcFirewallId'] = request.targetVpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchCopyVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Copies all access control policies from a policy group of a source virtual private cloud (VPC) firewall to a policy group of a destination VPC firewall.
 *
 * @description You can call the BatchCopyVpcFirewallControlPolicy operation to copy all access control policies from a policy group of a source VPC firewall to a policy group of a destination VPC firewall.  
 * Before you call this operation, we recommend that you back up access control policies. For more information about how to back up an access control policy, see [Back up an access control policy](https://www.alibabacloud.com/help/en/cloud-firewall/latest/back-up-and-roll-back-an-access-control-policy).  
 * After you call this operation, all the access control policies in the policy group of the destination VPC firewall are replaced.  
 * The policy groups of the source VPC firewall and the destination VPC firewall must belong to the same Alibaba Cloud account.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. When the number of calls to this operation per second exceeds the limit, throttling is triggered. Throttling may affect your business. We recommend that you take note of the limit on this operation.
 *
 * @param request BatchCopyVpcFirewallControlPolicyRequest
 * @return BatchCopyVpcFirewallControlPolicyResponse
 */
async function batchCopyVpcFirewallControlPolicy(request: BatchCopyVpcFirewallControlPolicyRequest): BatchCopyVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchCopyVpcFirewallControlPolicyWithOptions(request, runtime);
}

model BatchDeleteVpcFirewallControlPolicyRequest {
  aclUuidList?: [ string ](name='AclUuidList', description='The UUIDs of access control policies.

This parameter is required.'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model BatchDeleteVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model BatchDeleteVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Deletes multiple access control policies for a virtual private cloud (VPC) firewall at a time.
 *
 * @param request BatchDeleteVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return BatchDeleteVpcFirewallControlPolicyResponse
 */
async function batchDeleteVpcFirewallControlPolicyWithOptions(request: BatchDeleteVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): BatchDeleteVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuidList)) {
    query['AclUuidList'] = request.aclUuidList;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes multiple access control policies for a virtual private cloud (VPC) firewall at a time.
 *
 * @param request BatchDeleteVpcFirewallControlPolicyRequest
 * @return BatchDeleteVpcFirewallControlPolicyResponse
 */
async function batchDeleteVpcFirewallControlPolicy(request: BatchDeleteVpcFirewallControlPolicyRequest): BatchDeleteVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchDeleteVpcFirewallControlPolicyWithOptions(request, runtime);
}

model CreateAckClusterConnectorRequest {
  clusterId?: string(name='ClusterId', description='This parameter is required.', example='cb0f5640b1b2d404cad6ba21509d7847b'),
  connectorName?: string(name='ConnectorName', description='This parameter is required.', example='ack-cluster-connector-name'),
  memberUid?: string(name='MemberUid', example='135809047715****'),
  primaryVswitchId?: string(name='PrimaryVswitchId', description='This parameter is required.', example='vsw-2zerfbbje7dvnbii2****'),
  primaryVswitchIp?: string(name='PrimaryVswitchIp', example='10.100.1.1'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  standbyVswitchId?: string(name='StandbyVswitchId', example='vsw-2ze2gtlfozrab01cfo****'),
  standbyVswitchIp?: string(name='StandbyVswitchIp', example='10.100.2.1'),
  ttl?: string(name='Ttl', description='This parameter is required.', example='30'),
}

model CreateAckClusterConnectorResponseBody = {
  ackClusterConnector?: {
    ackClientHostIp?: string(name='AckClientHostIp', example='10.40.32.240'),
    clusterId?: string(name='ClusterId', example='cb0f5640b1b2d404cad6ba21509d7847b'),
    clusterName?: string(name='ClusterName', example='ack-cluster-name'),
    connectorHealthCheckStatus?: string(name='ConnectorHealthCheckStatus', example='healthy'),
    connectorId?: string(name='ConnectorId', example='ac-7c1bad6c3cc84c33baab'),
    connectorName?: string(name='ConnectorName', example='ack-cluster-connector-name'),
    connectorStatus?: string(name='ConnectorStatus', example='ready'),
    createTime?: string(name='CreateTime', example='1724982259'),
    memberUid?: string(name='MemberUid', example='135809047715****'),
    primaryVswitchId?: string(name='PrimaryVswitchId', example='vsw-2zerfbbje7dvnbii2****'),
    primaryVswitchIp?: string(name='PrimaryVswitchIp', example='10.100.1.1'),
    primaryVswitchZoneId?: string(name='PrimaryVswitchZoneId', example='cn-hangzhou-g'),
    regionNo?: string(name='RegionNo', example='cn-shanghai'),
    standbyVswitchId?: string(name='StandbyVswitchId', example='vsw-2ze2gtlfozrab01cfo****'),
    standbyVswitchIp?: string(name='StandbyVswitchIp', example='10.100.2.1'),
    standbyVswitchZoneId?: string(name='StandbyVswitchZoneId', example='cn-hangzhou-h'),
    taskId?: string(name='TaskId', example='task-c92d4544ef7b6a42'),
    ttl?: int32(name='Ttl', example='30'),
    vpcId?: string(name='VpcId', example='vpc-j6cvhdscntzuvr0x****'),
  }(name='AckClusterConnector'),
  requestId?: string(name='RequestId', example='0DC783F1-B3A7-578D-8A63-*****'),
}

model CreateAckClusterConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAckClusterConnectorResponseBody(name='body'),
}

/**
 * @summary 创建ACK集群连接器
 *
 * @param request CreateAckClusterConnectorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAckClusterConnectorResponse
 */
async function createAckClusterConnectorWithOptions(request: CreateAckClusterConnectorRequest, runtime: Util.RuntimeOptions): CreateAckClusterConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.connectorName)) {
    query['ConnectorName'] = request.connectorName;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.primaryVswitchId)) {
    query['PrimaryVswitchId'] = request.primaryVswitchId;
  }
  if (!Util.isUnset(request.primaryVswitchIp)) {
    query['PrimaryVswitchIp'] = request.primaryVswitchIp;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.standbyVswitchId)) {
    query['StandbyVswitchId'] = request.standbyVswitchId;
  }
  if (!Util.isUnset(request.standbyVswitchIp)) {
    query['StandbyVswitchIp'] = request.standbyVswitchIp;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAckClusterConnector',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建ACK集群连接器
 *
 * @param request CreateAckClusterConnectorRequest
 * @return CreateAckClusterConnectorResponse
 */
async function createAckClusterConnector(request: CreateAckClusterConnectorRequest): CreateAckClusterConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAckClusterConnectorWithOptions(request, runtime);
}

model CreateAclCheckRequest {
  aclType?: string(name='AclType', description='This parameter is required.', example='Internet'),
  checkNames?: [ string ](name='CheckNames'),
  lang?: string(name='Lang', example='zh'),
}

model CreateAclCheckResponseBody = {
  requestId?: string(name='RequestId', example='4FB718F0-CC04-5A12-B17B-188CFC3F****'),
  taskIds?: [ string ](name='TaskIds'),
}

model CreateAclCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAclCheckResponseBody(name='body'),
}

/**
 * @summary 创建ACL检查
 *
 * @param request CreateAclCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAclCheckResponse
 */
async function createAclCheckWithOptions(request: CreateAclCheckRequest, runtime: Util.RuntimeOptions): CreateAclCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclType)) {
    query['AclType'] = request.aclType;
  }
  if (!Util.isUnset(request.checkNames)) {
    query['CheckNames'] = request.checkNames;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAclCheck',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建ACL检查
 *
 * @param request CreateAclCheckRequest
 * @return CreateAclCheckResponse
 */
async function createAclCheck(request: CreateAclCheckRequest): CreateAclCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAclCheckWithOptions(request, runtime);
}

model CreateDownloadTaskRequest {
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  taskData?: string(name='TaskData', description='The query condition of the download task.', example='{\\\\"SearchItem\\\\":\\\\"\\\\",\\\\"UserType\\\\":\\\\"buy\\\\",\\\\"IpVersion\\\\":\\\\"4\\\\"}'),
  taskType?: string(name='TaskType', description='The type of the task. For more information about task types, see the descriptions in the "DescribeDownloadTaskType" topic.', example='InternetFirewallAsset'),
  timeZone?: string(name='TimeZone', description='The time zone of the time information in the downloaded file. The value must be an identifier of a time zone in the Internet Assigned Numbers Authority (IANA) database. The default value is Asia/Shanghai, which indicates UTC+8.', example='Asia/Shanghai'),
}

model CreateDownloadTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7F333E0-7B70-54DA-A307-4B2B49DEE923'),
  status?: string(name='Status', description='The status of the task. Valid values:

finish: The task finished. You can query the task to obtain the download link of the file.

start: The task start.

error: An error occurred.

expire: The task file is invalid and cannot be downloaded.', example='start'),
  taskId?: long(name='TaskId', description='The unique ID of the task.', example='132'),
  taskName?: string(name='TaskName', description='The name of the file download task.', example='Internet Boundary Firewall Assets - IPv4'),
}

model CreateDownloadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDownloadTaskResponseBody(name='body'),
}

/**
 * @summary Creates a file download task.
 *
 * @param request CreateDownloadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDownloadTaskResponse
 */
async function createDownloadTaskWithOptions(request: CreateDownloadTaskRequest, runtime: Util.RuntimeOptions): CreateDownloadTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.taskData)) {
    query['TaskData'] = request.taskData;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  if (!Util.isUnset(request.timeZone)) {
    query['TimeZone'] = request.timeZone;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDownloadTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a file download task.
 *
 * @param request CreateDownloadTaskRequest
 * @return CreateDownloadTaskResponse
 */
async function createDownloadTask(request: CreateDownloadTaskRequest): CreateDownloadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDownloadTaskWithOptions(request, runtime);
}

model CreateNatFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.

This parameter is required.', example='log'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.

This parameter is required.'),
  description?: string(name='Description', description='The description of the access control policy.

This parameter is required.', example='allow'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. Valid values:

*   If Proto is set to ICMP, DestPort is automatically left empty.

> If Proto is set to ICMP, access control does not take effect on the destination port.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to group, DestPort is empty.

> If DestPortType is set to group, you do not need to specify the destination port number. All ports on which the access control policy takes effect are included in the destination port address book.

*   If Proto is set to TCP, UDP, or ANY and DestPortType is set to port, the value of DestPort is the destination port number.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.

> If DestPortType is set to group, you must specify the name of the destination port address book.', example='my_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy.

Valid values:

*   If DestinationType is set to net, the value of this parameter is a CIDR block.

    Example: 1.2.XX.XX/24

*   If DestinationType is set to group, the value of this parameter is an address book.

    Example: db_group

*   If DestinationType is set to domain, the value of this parameter is a domain name.

    Example: \\\\*.aliyuncs.com

*   If DestinationType is set to location, the value of this parameter is a location.

    Example: ["BJ11", "ZB"]

This parameter is required.', example='XX.XX.XX.XX/24'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name

This parameter is required.', example='net'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid value:

*   **out**: outbound.

This parameter is required.', example='out'),
  domainResolveType?: int32(name='DomainResolveType', description='The domain name resolution method of the access control policy. Valid values:

*   **0**: fully qualified domain name (FQDN)-based resolution
*   **1**: Domain Name System (DNS)-based dynamic resolution
*   **2**: FQDN and DNS-based dynamic resolution', example='0'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of StartTime.

>  If RepeatType is set to Permanent, EndTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694764800'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy. Valid values:

*   **4**: IPv4 (default)', example='4'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngx-xxxxxxx'),
  newOrder?: string(name='NewOrder', description='The priority of the access control policy. The priority value starts from 1. A small priority value indicates a high priority.

This parameter is required.', example='1'),
  proto?: string(name='Proto', description='The protocol type in the access control policy.

Valid values:

*   ANY: all types of protocols.
*   TCP
*   UDP
*   ICMP

>  If the destination address is a threat intelligence address book of the domain name type or a cloud service address book, you can set Proto only to TCP and set ApplicationNameList to HTTP, HTTPS, SMTP, SMTPS, or SSL.

This parameter is required.', example='ANY'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If RepeatType is set to `Permanent`, `None`, or `Daily`, RepeatDays is left empty. Example: [].
*   If RepeatType is set to Weekly, RepeatDays must be specified. Example: [0, 6].

>  If RepeatType is set to Weekly, the fields in the value of RepeatDays cannot be repeated.

*   If RepeatType is set to `Monthly`, RepeatDays must be specified. Example: [1, 31].

>  If RepeatType is set to Monthly, the fields in the value of RepeatDays cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of RepeatStartTime.

>  If RepeatType is set to Permanent or None, RepeatEndTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of RepeatEndTime.

>  If RepeatType is set to Permanent or None, RepeatStartTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy.

Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block.

    Example: 10.2.4.0/24

*   If **SourceType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group

This parameter is required.', example='192.168.0.25/32'),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy.

Valid values:

*   **net**: source CIDR block
*   **group**: source address book

This parameter is required.', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of EndTime.

>  If RepeatType is set to Permanent, StartTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694761200'),
}

model CreateNatFirewallControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.

>  To modify an access control policy, you must specify the unique ID of the policy. You can call the DescribeNatFirewallControlPolicy operation to obtain the ID.', example='6504d2fb-ab36-49c3-92a6-822a56549783'),
  requestId?: string(name='RequestId', description='The request ID.', example='0DC783F1-B3A7-578D-8A63-687CC9B82C0A'),
}

model CreateNatFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Creates an access control policy for a NAT firewall.
 *
 * @description You can call this operation to create a policy that allows, denies, or monitors the traffic that passes through the NAT firewall.
 *
 * @param request CreateNatFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNatFirewallControlPolicyResponse
 */
async function createNatFirewallControlPolicyWithOptions(request: CreateNatFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): CreateNatFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an access control policy for a NAT firewall.
 *
 * @description You can call this operation to create a policy that allows, denies, or monitors the traffic that passes through the NAT firewall.
 *
 * @param request CreateNatFirewallControlPolicyRequest
 * @return CreateNatFirewallControlPolicyResponse
 */
async function createNatFirewallControlPolicy(request: CreateNatFirewallControlPolicyRequest): CreateNatFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatFirewallControlPolicyWithOptions(request, runtime);
}

model CreateNatFirewallPreCheckRequest {
  lang?: string(name='Lang', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='This parameter is required.', example='ngw-uf69hlxv5c817iqrk****'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-2zeiljdml8pble168****'),
}

model CreateNatFirewallPreCheckResponseBody = {
  preCheckId?: string(name='PreCheckId', example='2122'),
  requestId?: string(name='RequestId', example='A426611F-04FA-5205-8D04-4F6DCF09****'),
}

model CreateNatFirewallPreCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNatFirewallPreCheckResponseBody(name='body'),
}

/**
 * @summary 创建NAT防火墙预检查
 *
 * @param request CreateNatFirewallPreCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNatFirewallPreCheckResponse
 */
async function createNatFirewallPreCheckWithOptions(request: CreateNatFirewallPreCheckRequest, runtime: Util.RuntimeOptions): CreateNatFirewallPreCheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.natGatewayId)) {
    body['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.regionNo)) {
    body['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.vpcId)) {
    body['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateNatFirewallPreCheck',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建NAT防火墙预检查
 *
 * @param request CreateNatFirewallPreCheckRequest
 * @return CreateNatFirewallPreCheckResponse
 */
async function createNatFirewallPreCheck(request: CreateNatFirewallPreCheckRequest): CreateNatFirewallPreCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNatFirewallPreCheckWithOptions(request, runtime);
}

model CreatePrivateDnsEndpointRequest {
  accessInstanceName?: string(name='AccessInstanceName', description='This parameter is required.'),
  firewallType?: [ string ](name='FirewallType', description='This parameter is required.'),
  ipProtocol?: string(name='IpProtocol', example='UDP'),
  memberUid?: long(name='MemberUid', example='258039427902****'),
  port?: int32(name='Port', example='80'),
  primaryDns?: string(name='PrimaryDns', example='1.1.1.1'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-uf6b0dkyryer8******'),
  primaryVSwitchIp?: string(name='PrimaryVSwitchIp', example='10.1.1.1'),
  privateDnsType?: string(name='PrivateDnsType', description='This parameter is required.', example='Custom'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  standbyDns?: string(name='StandbyDns', example='1.1.1.2'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-8vb6jk75wfcwn******'),
  standbyVSwitchIp?: string(name='StandbyVSwitchIp', example='10.2.2.2'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-uf6b5lyul0x******'),
}

model CreatePrivateDnsEndpointResponseBody = {
  accessInstanceId?: string(name='AccessInstanceId', example='pd-12345'),
  requestId?: string(name='RequestId', description='Id of the request', example='850A84D6************00090125EEB1'),
  taskId?: string(name='TaskId', example='132'),
}

model CreatePrivateDnsEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePrivateDnsEndpointResponseBody(name='body'),
}

/**
 * @summary 创建私网DNS终端节点
 *
 * @param request CreatePrivateDnsEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePrivateDnsEndpointResponse
 */
async function createPrivateDnsEndpointWithOptions(request: CreatePrivateDnsEndpointRequest, runtime: Util.RuntimeOptions): CreatePrivateDnsEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceName)) {
    query['AccessInstanceName'] = request.accessInstanceName;
  }
  if (!Util.isUnset(request.firewallType)) {
    query['FirewallType'] = request.firewallType;
  }
  if (!Util.isUnset(request.ipProtocol)) {
    query['IpProtocol'] = request.ipProtocol;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.primaryDns)) {
    query['PrimaryDns'] = request.primaryDns;
  }
  if (!Util.isUnset(request.primaryVSwitchId)) {
    query['PrimaryVSwitchId'] = request.primaryVSwitchId;
  }
  if (!Util.isUnset(request.primaryVSwitchIp)) {
    query['PrimaryVSwitchIp'] = request.primaryVSwitchIp;
  }
  if (!Util.isUnset(request.privateDnsType)) {
    query['PrivateDnsType'] = request.privateDnsType;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.standbyDns)) {
    query['StandbyDns'] = request.standbyDns;
  }
  if (!Util.isUnset(request.standbyVSwitchId)) {
    query['StandbyVSwitchId'] = request.standbyVSwitchId;
  }
  if (!Util.isUnset(request.standbyVSwitchIp)) {
    query['StandbyVSwitchIp'] = request.standbyVSwitchIp;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePrivateDnsEndpoint',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建私网DNS终端节点
 *
 * @param request CreatePrivateDnsEndpointRequest
 * @return CreatePrivateDnsEndpointResponse
 */
async function createPrivateDnsEndpoint(request: CreatePrivateDnsEndpointRequest): CreatePrivateDnsEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPrivateDnsEndpointWithOptions(request, runtime);
}

model CreateSecurityProxyRequest {
  firewallSwitch?: string(name='FirewallSwitch', description='The status of the NAT firewall. Valid values:

*   **open**: enabled
*   **close**: disabled', example='close'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-bp1okz6k7s4n4mnk5f1g3'),
  natRouteEntryList?: [ 
    {
      destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the default route.

This parameter is required.', example='0.0.0.0/0'),
      nextHopId?: string(name='NextHopId', description='The next hop of the original NAT gateway.

This parameter is required.', example='ngw-bp1okz6k7s4n4mnk5f1g3'),
      nextHopType?: string(name='NextHopType', description='The network type of the next hop. Set the value to NatGateway.

This parameter is required.', example='NatGateway'),
      routeTableId?: string(name='RouteTableId', description='The route table to which the default route of the NAT gateway belongs.

This parameter is required.', example='vtb-2ze13wrgz7wsu9yiqeffg'),
    }
  ](name='NatRouteEntryList', description='The routes to be switched to the NAT gateway.

This parameter is required.'),
  proxyName?: string(name='ProxyName', description='The name of the NAT firewall. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (_). However, it cannot start with an underscore.

This parameter is required.', example='nat-idmp-fir'),
  regionNo?: string(name='RegionNo', description='The region ID of the virtual private cloud (VPC).

>  For more information about Cloud Firewall supported regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).

This parameter is required.', example='cn-hangzhou'),
  strictMode?: int32(name='StrictMode', description='Specifies whether to enable the strict mode. Valid values:

*   1: yes
*   0: no', example='0'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.

This parameter is required.', example='vpc-uf6b5lyul0xfgv74i01ph'),
  vswitchAuto?: string(name='VswitchAuto', description='The mode of the vSwitch that you want to use. Valid values:

*   **true**: automatic
*   **false**: manual', example='true'),
  vswitchCidr?: string(name='VswitchCidr', description='The CIDR block of the vSwitch.', example='0.0.0.0/0'),
  vswitchId?: string(name='VswitchId', description='The ID of the vSwitch. This parameter is required if you set the VswitchAuto parameter to true.', example='vsw-bp1sqg9wms9w9y1uxcs1x'),
}

model CreateSecurityProxyResponseBody = {
  proxyId?: string(name='ProxyId', description='The ID of the NAT firewall.', example='proxy-nat97ac4d7cc3834a5daf40'),
  requestId?: string(name='RequestId', description='The request ID.', example='15FCCC52-1E23-57AE-B5EF-3E00A3DC3CAB'),
}

model CreateSecurityProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecurityProxyResponseBody(name='body'),
}

/**
 * @summary Creates a NAT firewall.
 *
 * @param request CreateSecurityProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSecurityProxyResponse
 */
async function createSecurityProxyWithOptions(request: CreateSecurityProxyRequest, runtime: Util.RuntimeOptions): CreateSecurityProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallSwitch)) {
    query['FirewallSwitch'] = request.firewallSwitch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natRouteEntryList)) {
    query['NatRouteEntryList'] = request.natRouteEntryList;
  }
  if (!Util.isUnset(request.proxyName)) {
    query['ProxyName'] = request.proxyName;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.strictMode)) {
    query['StrictMode'] = request.strictMode;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchAuto)) {
    query['VswitchAuto'] = request.vswitchAuto;
  }
  if (!Util.isUnset(request.vswitchCidr)) {
    query['VswitchCidr'] = request.vswitchCidr;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecurityProxy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a NAT firewall.
 *
 * @param request CreateSecurityProxyRequest
 * @return CreateSecurityProxyResponse
 */
async function createSecurityProxy(request: CreateSecurityProxyRequest): CreateSecurityProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityProxyWithOptions(request, runtime);
}

model CreateSlsLogDispatchRequest {
  slsRegionId?: string(name='SlsRegionId', description='The region ID of the Simple Log Service project.', example='ap-southeast-1'),
  ttl?: long(name='Ttl', description='The log retention period. Unit: days.', example='20'),
}

model CreateSlsLogDispatchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850A84D6************00090125EEB1'),
}

model CreateSlsLogDispatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSlsLogDispatchResponseBody(name='body'),
}

/**
 * @summary Create Cloud Firewall SLS Log Delivery
 *
 * @param request CreateSlsLogDispatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSlsLogDispatchResponse
 */
async function createSlsLogDispatchWithOptions(request: CreateSlsLogDispatchRequest, runtime: Util.RuntimeOptions): CreateSlsLogDispatchResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.slsRegionId)) {
    body['SlsRegionId'] = request.slsRegionId;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateSlsLogDispatch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Cloud Firewall SLS Log Delivery
 *
 * @param request CreateSlsLogDispatchRequest
 * @return CreateSlsLogDispatchResponse
 */
async function createSlsLogDispatch(request: CreateSlsLogDispatchRequest): CreateSlsLogDispatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSlsLogDispatchWithOptions(request, runtime);
}

model CreateTrFirewallV2Request {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-4xbjup276au29r****'),
  firewallDescription?: string(name='FirewallDescription', description='The description of the firewall.', example='vfw-sz'),
  firewallName?: string(name='FirewallName', description='The name of the firewall.', example='cfw_test2'),
  firewallSubnetCidr?: string(name='FirewallSubnetCidr', description='The subnet CIDR block of the VPC in which the ENI of the firewall is stored in automatic mode.', example='10.0.1.0/24'),
  firewallVpcCidr?: string(name='FirewallVpcCidr', description='The CIDR block that is allocated to the VPC created for the VPC firewall in automatic mode.', example='10.0.0.0/16'),
  firewallVpcId?: string(name='FirewallVpcId', description='The ID of the VPC in which the ENI associated with the VPC firewall is created in manual mode.', example='vpc-wz9r5qvryn0lg3atb****'),
  firewallVswitchId?: string(name='FirewallVswitchId', description='The ID of the vSwitch that is used to create the ENI in manual mode.', example='vsw-uf6ydz3vqj77mr5l6****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  regionNo?: string(name='RegionNo', description='The region ID of the route router.', example='cn-hangzhou'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed'),
  trAttachmentMasterCidr?: string(name='TrAttachmentMasterCidr', description='The primary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.3.0/24'),
  trAttachmentMasterZone?: string(name='TrAttachmentMasterZone', description='The primary zone for the vSwitch.', example='cn-chengdu-a'),
  trAttachmentSlaveCidr?: string(name='TrAttachmentSlaveCidr', description='The secondary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.0.16/28'),
  trAttachmentSlaveZone?: string(name='TrAttachmentSlaveZone', description='The secondary zone for the vSwitch.', example='cn-chengdu-b'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-m5etmb2q7e0mxcur****'),
}

model CreateTrFirewallV2ResponseBody = {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-37e22bf0d9b34870****'),
  requestId?: string(name='RequestId', description='The request ID.', example='822B9125-6E1A-551C-8EAF-6E7AE7444B00'),
}

model CreateTrFirewallV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrFirewallV2ResponseBody(name='body'),
}

/**
 * @summary Creates a virtual private cloud (VPC) firewall for a transit router.
 *
 * @param request CreateTrFirewallV2Request
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTrFirewallV2Response
 */
async function createTrFirewallV2WithOptions(request: CreateTrFirewallV2Request, runtime: Util.RuntimeOptions): CreateTrFirewallV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.firewallDescription)) {
    query['FirewallDescription'] = request.firewallDescription;
  }
  if (!Util.isUnset(request.firewallName)) {
    query['FirewallName'] = request.firewallName;
  }
  if (!Util.isUnset(request.firewallSubnetCidr)) {
    query['FirewallSubnetCidr'] = request.firewallSubnetCidr;
  }
  if (!Util.isUnset(request.firewallVpcCidr)) {
    query['FirewallVpcCidr'] = request.firewallVpcCidr;
  }
  if (!Util.isUnset(request.firewallVpcId)) {
    query['FirewallVpcId'] = request.firewallVpcId;
  }
  if (!Util.isUnset(request.firewallVswitchId)) {
    query['FirewallVswitchId'] = request.firewallVswitchId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.routeMode)) {
    query['RouteMode'] = request.routeMode;
  }
  if (!Util.isUnset(request.trAttachmentMasterCidr)) {
    query['TrAttachmentMasterCidr'] = request.trAttachmentMasterCidr;
  }
  if (!Util.isUnset(request.trAttachmentMasterZone)) {
    query['TrAttachmentMasterZone'] = request.trAttachmentMasterZone;
  }
  if (!Util.isUnset(request.trAttachmentSlaveCidr)) {
    query['TrAttachmentSlaveCidr'] = request.trAttachmentSlaveCidr;
  }
  if (!Util.isUnset(request.trAttachmentSlaveZone)) {
    query['TrAttachmentSlaveZone'] = request.trAttachmentSlaveZone;
  }
  if (!Util.isUnset(request.transitRouterId)) {
    query['TransitRouterId'] = request.transitRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrFirewallV2',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a virtual private cloud (VPC) firewall for a transit router.
 *
 * @param request CreateTrFirewallV2Request
 * @return CreateTrFirewallV2Response
 */
async function createTrFirewallV2(request: CreateTrFirewallV2Request): CreateTrFirewallV2Response {
  var runtime = new Util.RuntimeOptions{};
  return createTrFirewallV2WithOptions(request, runtime);
}

model CreateTrFirewallV2RoutePolicyRequest {
  destCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-2ze9epancaw8t4sha****'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
    }
  ](name='DestCandidateList', description='The secondary traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-f8ce36689b224f77****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  policyDescription?: string(name='PolicyDescription', description='The description of the traffic redirection instance.', example='test'),
  policyName?: string(name='PolicyName', description='The name of the traffic redirection instance.', example='TEST_VPC_FW'),
  policyType?: string(name='PolicyType', description='The type of the traffic redirection scenario of the VPC firewall. Valid values:

*   **fullmesh**: interconnected instances
*   **one_to_one**: instance to instance
*   **end_to_end**: instance to instances', example='fullmesh'),
  srcCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-2ze9epancaw8t4sha****'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
    }
  ](name='SrcCandidateList', description='The primary traffic redirection instances.'),
}

model CreateTrFirewallV2RoutePolicyShrinkRequest {
  destCandidateListShrink?: string(name='DestCandidateList', description='The secondary traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-f8ce36689b224f77****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  policyDescription?: string(name='PolicyDescription', description='The description of the traffic redirection instance.', example='test'),
  policyName?: string(name='PolicyName', description='The name of the traffic redirection instance.', example='TEST_VPC_FW'),
  policyType?: string(name='PolicyType', description='The type of the traffic redirection scenario of the VPC firewall. Valid values:

*   **fullmesh**: interconnected instances
*   **one_to_one**: instance to instance
*   **end_to_end**: instance to instances', example='fullmesh'),
  srcCandidateListShrink?: string(name='SrcCandidateList', description='The primary traffic redirection instances.'),
}

model CreateTrFirewallV2RoutePolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C91D68BA-A0BE-51BF-A0F1-1CB5C57FE58D'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-8ebed27e13e14ce2****'),
}

model CreateTrFirewallV2RoutePolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrFirewallV2RoutePolicyResponseBody(name='body'),
}

/**
 * @summary Creates a routing policy for a VPC firewall of a transit router.
 *
 * @param tmpReq CreateTrFirewallV2RoutePolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTrFirewallV2RoutePolicyResponse
 */
async function createTrFirewallV2RoutePolicyWithOptions(tmpReq: CreateTrFirewallV2RoutePolicyRequest, runtime: Util.RuntimeOptions): CreateTrFirewallV2RoutePolicyResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTrFirewallV2RoutePolicyShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destCandidateList)) {
    request.destCandidateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destCandidateList, 'DestCandidateList', 'json');
  }
  if (!Util.isUnset(tmpReq.srcCandidateList)) {
    request.srcCandidateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcCandidateList, 'SrcCandidateList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destCandidateListShrink)) {
    query['DestCandidateList'] = request.destCandidateListShrink;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.policyDescription)) {
    query['PolicyDescription'] = request.policyDescription;
  }
  if (!Util.isUnset(request.policyName)) {
    query['PolicyName'] = request.policyName;
  }
  if (!Util.isUnset(request.policyType)) {
    query['PolicyType'] = request.policyType;
  }
  if (!Util.isUnset(request.srcCandidateListShrink)) {
    query['SrcCandidateList'] = request.srcCandidateListShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrFirewallV2RoutePolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a routing policy for a VPC firewall of a transit router.
 *
 * @param request CreateTrFirewallV2RoutePolicyRequest
 * @return CreateTrFirewallV2RoutePolicyResponse
 */
async function createTrFirewallV2RoutePolicy(request: CreateTrFirewallV2RoutePolicyRequest): CreateTrFirewallV2RoutePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrFirewallV2RoutePolicyWithOptions(request, runtime);
}

model CreateVpcFirewallCenConfigureRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.

This parameter is required.', example='cen-x5jayxou71ad73****'),
  firewallSwitch?: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: After you create the VPC firewall, the VPC firewall is automatically enabled. This is the default value.
*   **close**: After you create the VPC firewall, the VPC firewall is disabled. You can call the [ModifyVpcFirewallCenSwitchStatus](https://help.aliyun.com/document_detail/345780.html) operation to manually enable the VPC firewall.

This parameter is required.', example='open'),
  firewallVSwitchCidrBlock?: string(name='FirewallVSwitchCidrBlock', description='The CIDR block of the vSwitch that is automatically created for the VPC firewall. You must specify a CIDR block for the Cloud_Firewall_VSWITCH VPC that is automatically created for the VPC firewall for traffic redirection. The CIDR block does not conflict with your network plan. The subnet mask of the CIDR block must be less than or equal to 29 bits in length. The CIDR block of the vSwitch must be within the network segment of the VPC.

If you do not specify a value, the CIDR block 10.219.219.216/29 is automatically allocated.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region.'),
  firewallVpcCidrBlock?: string(name='FirewallVpcCidrBlock', description='The CIDR block of the VPC that is automatically created for the VPC firewall. You must specify a CIDR block for the Cloud_Firewall_VPC VPC that is automatically created for the VPC firewall for traffic redirection. The subnet mask of the CIDR block must be less than or equal to 28 bits in length.

If you do not specify a value, the CIDR block 10.0.0.0/8 is automatically allocated.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region.', example='10.0.0.0/8'),
  firewallVpcStandbyZoneId?: string(name='FirewallVpcStandbyZoneId', description='The ID of the backup availability zone to which the firewall belongs. The firewall will automatically switch to the backup availability zone to continue running only if the primary availability zone service is unavailable.
If this parameter is not filled, the backup availability zone for the firewall will be automatically assigned.
> This parameter is only effective when creating a VPC firewall for the first time in this CEN region.', example='cn-hangzhou-b'),
  firewallVpcZoneId?: string(name='FirewallVpcZoneId', description='The ID of the zone to which the vSwitch belongs. If your service is latency-sensitive, you can specify the same zone for the vSwitch of the firewall and the vSwitch of your business VPC to minimize latency.

If you do not specify a value, a zone is automatically assigned for the vSwitch.

>  This parameter takes effect only when you create a VPC firewall for the first time in the current CEN instance and region. For more information about zones that are supported by each region, see [Query zones](https://help.aliyun.com/document_detail/36064.html).', example='cn-hangzhou-a'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC for which you want to create the VPC firewall.

This parameter is required.', example='vpc-bp10zlifxh6j0232w****'),
  vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that is used to associate with the elastic network interface (ENI) required by the VPC firewall.', example='vsw-qzeaol304m***'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.

This parameter is required.', example='Test instance'),
  vpcRegion?: string(name='VpcRegion', description='The ID of the region to which the VPC belongs.

> For more information about the regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).

This parameter is required.', example='cn-hangzhou'),
}

model CreateVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125h4j6'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
}

model CreateVpcFirewallCenConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
 * @summary Creates a virtual private cloud (VPC) firewall to protect traffic between a specified VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the CreateVpcFirewallCenConfigure operation to create a VPC firewall. The VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. The VPC firewall cannot protect mutual access traffic between VBRs, between CCN instances, or between VBRs and CCN instances. For more information, see [VPC firewall limits](https://help.aliyun.com/document_detail/172295.html).
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallCenConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallCenConfigureResponse
 */
async function createVpcFirewallCenConfigureWithOptions(request: CreateVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.firewallSwitch)) {
    query['FirewallSwitch'] = request.firewallSwitch;
  }
  if (!Util.isUnset(request.firewallVSwitchCidrBlock)) {
    query['FirewallVSwitchCidrBlock'] = request.firewallVSwitchCidrBlock;
  }
  if (!Util.isUnset(request.firewallVpcCidrBlock)) {
    query['FirewallVpcCidrBlock'] = request.firewallVpcCidrBlock;
  }
  if (!Util.isUnset(request.firewallVpcStandbyZoneId)) {
    query['FirewallVpcStandbyZoneId'] = request.firewallVpcStandbyZoneId;
  }
  if (!Util.isUnset(request.firewallVpcZoneId)) {
    query['FirewallVpcZoneId'] = request.firewallVpcZoneId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.networkInstanceId)) {
    query['NetworkInstanceId'] = request.networkInstanceId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  if (!Util.isUnset(request.vpcRegion)) {
    query['VpcRegion'] = request.vpcRegion;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallCenConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a virtual private cloud (VPC) firewall to protect traffic between a specified VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the CreateVpcFirewallCenConfigure operation to create a VPC firewall. The VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. The VPC firewall cannot protect mutual access traffic between VBRs, between CCN instances, or between VBRs and CCN instances. For more information, see [VPC firewall limits](https://help.aliyun.com/document_detail/172295.html).
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallCenConfigureRequest
 * @return CreateVpcFirewallCenConfigureResponse
 */
async function createVpcFirewallCenConfigure(request: CreateVpcFirewallCenConfigureRequest): CreateVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallCenConfigureWithOptions(request, runtime);
}

model CreateVpcFirewallCenManualConfigureRequest {
  cenId?: string(name='CenId', description='This parameter is required.', example='cen-37nddhri7jf0d2****'),
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='258039427902****'),
  vSwitchId?: string(name='VSwitchId', description='This parameter is required.', example='vsw-qzeaol304m***'),
  vpcFirewallName?: string(name='VpcFirewallName', description='This parameter is required.'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-8vbwbo90rq0anm6t****'),
}

model CreateVpcFirewallCenManualConfigureResponseBody = {
  requestId?: string(name='RequestId', example='B14757D0-4640-4B44-AC67-7F558F****'),
  vpcFirewallId?: string(name='VpcFirewallId', example='vfw-m5e7dbc4y****'),
}

model CreateVpcFirewallCenManualConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallCenManualConfigureResponseBody(name='body'),
}

/**
 * @summary 创建VPC防火墙手动配置
 *
 * @param request CreateVpcFirewallCenManualConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallCenManualConfigureResponse
 */
async function createVpcFirewallCenManualConfigureWithOptions(request: CreateVpcFirewallCenManualConfigureRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallCenManualConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallCenManualConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建VPC防火墙手动配置
 *
 * @param request CreateVpcFirewallCenManualConfigureRequest
 * @return CreateVpcFirewallCenManualConfigureResponse
 */
async function createVpcFirewallCenManualConfigure(request: CreateVpcFirewallCenManualConfigureRequest): CreateVpcFirewallCenManualConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallCenManualConfigureWithOptions(request, runtime);
}

model CreateVpcFirewallConfigureRequest {
  firewallSwitch?: string(name='FirewallSwitch', description='The status of the VPC firewall after you create the firewall. Valid values:

*   **open**: After you create the VPC firewall, the VPC firewall is automatically enabled. This is the default value.
*   **close**: After you create the VPC firewall, the VPC firewall is disabled. To enable the firewall, you can call the [ModifyVpcFirewallSwitchStatus](https://help.aliyun.com/document_detail/342935.html) operation.

This parameter is required.', example='open'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English.', example='zh'),
  localVpcCidrTableList?: string(name='LocalVpcCidrTableList', description='The CIDR blocks of the local VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the local VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the local VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the local VPC.

This parameter is required.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]'),
  localVpcId?: string(name='LocalVpcId', description='The ID of the local VPC.

This parameter is required.', example='vpc-8vbwbo90rq0anm6t****'),
  localVpcRegion?: string(name='LocalVpcRegion', description='The region ID of the local VPC.

>  For more information about the regions in which Cloud Firewall is available, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).

This parameter is required.', example='cn-hangzhou'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  peerVpcCidrTableList?: string(name='PeerVpcCidrTableList', description='The CIDR blocks of the peer VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the peer VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the peer VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the peer VPC.

This parameter is required.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]'),
  peerVpcId?: string(name='PeerVpcId', description='The ID of the peer VPC.

This parameter is required.', example='vpc-wb8vbo90rq0anm6t****'),
  peerVpcRegion?: string(name='PeerVpcRegion', description='The region ID of the peer VPC.

>  For more information about Cloud Firewall supported regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).

This parameter is required.', example='cn-shanghai'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.

This parameter is required.', example='my-vpc-firewall'),
}

model CreateVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850A84D6-0DE4-4797-A1E8-00090125h4j6'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
}

model CreateVpcFirewallConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallConfigureResponseBody(name='body'),
}

/**
 * @summary Creates a Virtual Private Cloud (VPC) firewall to protect traffic between two VPCs that are connected by using an Express Connect.
 *
 * @description You can call this operation to create a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. The VPC firewall does not control the mutual access traffic between VPCs that reside in different regions or belong to different Alibaba Cloud accounts. The firewall also does not control the mutual access traffic between VPCs and virtual border routers (VBRs). For more information, see [VPC firewall limits](https://help.aliyun.com/document_detail/172295.html).
 * ### [](#qps)QPS limit
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallConfigureResponse
 */
async function createVpcFirewallConfigureWithOptions(request: CreateVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallSwitch)) {
    query['FirewallSwitch'] = request.firewallSwitch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localVpcCidrTableList)) {
    query['LocalVpcCidrTableList'] = request.localVpcCidrTableList;
  }
  if (!Util.isUnset(request.localVpcId)) {
    query['LocalVpcId'] = request.localVpcId;
  }
  if (!Util.isUnset(request.localVpcRegion)) {
    query['LocalVpcRegion'] = request.localVpcRegion;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.peerVpcCidrTableList)) {
    query['PeerVpcCidrTableList'] = request.peerVpcCidrTableList;
  }
  if (!Util.isUnset(request.peerVpcId)) {
    query['PeerVpcId'] = request.peerVpcId;
  }
  if (!Util.isUnset(request.peerVpcRegion)) {
    query['PeerVpcRegion'] = request.peerVpcRegion;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a Virtual Private Cloud (VPC) firewall to protect traffic between two VPCs that are connected by using an Express Connect.
 *
 * @description You can call this operation to create a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. The VPC firewall does not control the mutual access traffic between VPCs that reside in different regions or belong to different Alibaba Cloud accounts. The firewall also does not control the mutual access traffic between VPCs and virtual border routers (VBRs). For more information, see [VPC firewall limits](https://help.aliyun.com/document_detail/172295.html).
 * ### [](#qps)QPS limit
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallConfigureRequest
 * @return CreateVpcFirewallConfigureResponse
 */
async function createVpcFirewallConfigure(request: CreateVpcFirewallConfigureRequest): CreateVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallConfigureWithOptions(request, runtime);
}

model CreateVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

- **accept**: allows the traffic.
- **drop**: blocks the traffic.
- **log**: monitors the traffic.

This parameter is required.', example='accept'),
  applicationName?: string(name='ApplicationName', description='The type of the applications that the access control policy supports. Valid values:

- **FTP**
- **HTTP**
- **HTTPS**
- **MySQL**
- **SMTP**
- **SMTPS**
- **RDP**
- **VNC**
- **SSH**
- **Redis**
- **MQTT**
- **MongoDB**
- **Memcache**
- **SSL**
- **ANY**: all types of applications', example='HTTP', deprecated=true),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.'),
  description?: string(name='Description', description='The description of the access control policy.

This parameter is required.', example='test'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy. 

>  If **DestPortType** is set to `port`, you must specify this parameter.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy. 

>  If **DestPortType** is set to `group`, you must specify this parameter.', example='my_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

- **port**: port
- **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Valid values:

- If **DestinationType** is set to `net`, the value of **Destination** must be a CIDR block.
- If **DestinationType** is set to `group`, the value of **Destination** must be an address book.
- If **DestinationType** is set to `domain`, the value of **Destination** must be a domain name.

This parameter is required.', example='10.2.XX.XX/24'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

- **net**: CIDR block
- **group**: address book
- **domain**: domain name

This parameter is required.', example='net'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='DNS'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694764800'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

- **zh**: Chinese (default)
- **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  newOrder?: string(name='NewOrder', description='The priority of the access control policy. 

The priority value starts from 1. A smaller priority value indicates a higher priority.

This parameter is required.', example='1'),
  proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

- **ANY** (If you are not sure about the protocol type, you can set this parameter to ANY.)
- **TCP**
- **UDP**
- **ICMP**

This parameter is required.', example='TCP'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values: 

- **true**: enables the access control policy.
- **false**: disables the access control policy.', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If you set RepeatType to `Permanent`, `None`, or `Daily`, leave this parameter empty. Example: [].
*   If you set RepeatType to Weekly, you must specify this parameter. Example: [0, 6].

>  If you set RepeatType to Weekly, the fields in the value of this parameter cannot be repeated.

*   If you set RepeatType to `Monthly`, you must specify this parameter. Example: [1, 31].

>  If you set RepeatType to Monthly, the fields in the value of this parameter cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. 

- If SourceType is set to `net`, the value of Source must be a CIDR block.
- If SourceType is set to `group`, the value of Source must be an address book.

This parameter is required.', example='10.2.XX.XX/24'),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

- **net**: CIDR block
- **group**: address book

This parameter is required.', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694761200'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The ID of the policy group in which you want to create the access control policy. 

- If a VPC firewall protects the traffic between two VPCs that are connected by using a CEN instance, the value of this parameter must be the ID of the CEN instance.
- If a VPC firewall protects the traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallAclGroupList](https://www.alibabacloud.com/help/en/cloud-firewall/latest/describevpcfirewallaclgrouplist) operation to query the IDs.

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
}

model CreateVpcFirewallControlPolicyResponseBody = {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model CreateVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Creates an access control policy in a specified policy group for a virtual private cloud (VPC) firewall.
 *
 * @description You can call the CreateVpcFirewallControlPolicy operation to create an access control policy in a specified policy group for a VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallControlPolicyResponse
 */
async function createVpcFirewallControlPolicyWithOptions(request: CreateVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates an access control policy in a specified policy group for a virtual private cloud (VPC) firewall.
 *
 * @description You can call the CreateVpcFirewallControlPolicy operation to create an access control policy in a specified policy group for a VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateVpcFirewallControlPolicyRequest
 * @return CreateVpcFirewallControlPolicyResponse
 */
async function createVpcFirewallControlPolicy(request: CreateVpcFirewallControlPolicyRequest): CreateVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallControlPolicyWithOptions(request, runtime);
}

model CreateVpcFirewallPrecheckRequest {
  cenId?: string(name='CenId', example='cen-iv8m2lj2fqg1xt****'),
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='128599825273****'),
  networkInstanceType?: string(name='NetworkInstanceType', example='cen_tr_firewall'),
  region?: string(name='Region', example='cn-chengdu'),
  transitRouterId?: string(name='TransitRouterId', example='tr-t4n16htuv1jalj9cq****'),
  vpcId?: string(name='VpcId', example='vpc-bp132e2wpu9o6qth****'),
}

model CreateVpcFirewallPrecheckResponseBody = {
  precheckId?: string(name='PrecheckId', example='4197'),
  requestId?: string(name='RequestId', example='C5BE1AA4-934A-5085-89CC-9AD1CAC3****'),
}

model CreateVpcFirewallPrecheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallPrecheckResponseBody(name='body'),
}

/**
 * @summary 创建VPC防火墙开墙前置任务
 *
 * @param request CreateVpcFirewallPrecheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallPrecheckResponse
 */
async function createVpcFirewallPrecheckWithOptions(request: CreateVpcFirewallPrecheckRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallPrecheckResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.networkInstanceType)) {
    query['NetworkInstanceType'] = request.networkInstanceType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.transitRouterId)) {
    query['TransitRouterId'] = request.transitRouterId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallPrecheck',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建VPC防火墙开墙前置任务
 *
 * @param request CreateVpcFirewallPrecheckRequest
 * @return CreateVpcFirewallPrecheckResponse
 */
async function createVpcFirewallPrecheck(request: CreateVpcFirewallPrecheckRequest): CreateVpcFirewallPrecheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallPrecheckWithOptions(request, runtime);
}

model CreateVpcFirewallTaskRequest {
  content?: string(name='Content', example='test'),
  lang?: string(name='Lang', example='zh'),
  priority?: string(name='Priority', example='1'),
  taskAction?: string(name='TaskAction', description='This parameter is required.', example='sync'),
}

model CreateVpcFirewallTaskResponseBody = {
  module?: string(name='Module', example='ips_server'),
  requestId?: string(name='RequestId', example='53252B14-BF7C-5A2D-9750-56F827EB****'),
}

model CreateVpcFirewallTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVpcFirewallTaskResponseBody(name='body'),
}

/**
 * @summary 创建VPC防火墙资产同步任务
 *
 * @param request CreateVpcFirewallTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVpcFirewallTaskResponse
 */
async function createVpcFirewallTaskWithOptions(request: CreateVpcFirewallTaskRequest, runtime: Util.RuntimeOptions): CreateVpcFirewallTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.taskAction)) {
    query['TaskAction'] = request.taskAction;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateVpcFirewallTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建VPC防火墙资产同步任务
 *
 * @param request CreateVpcFirewallTaskRequest
 * @return CreateVpcFirewallTaskResponse
 */
async function createVpcFirewallTask(request: CreateVpcFirewallTaskRequest): CreateVpcFirewallTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVpcFirewallTaskWithOptions(request, runtime);
}

model DeleteAckClusterConnectorRequest {
  connectorId?: string(name='ConnectorId', description='This parameter is required.', example='ac-7c1bad6c3cc84c33baab'),
}

model DeleteAckClusterConnectorResponseBody = {
  requestId?: string(name='RequestId', example='133173B9-8010-5DF5-8B93-********'),
}

model DeleteAckClusterConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAckClusterConnectorResponseBody(name='body'),
}

/**
 * @summary 删除ACK集群连接器
 *
 * @param request DeleteAckClusterConnectorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAckClusterConnectorResponse
 */
async function deleteAckClusterConnectorWithOptions(request: DeleteAckClusterConnectorRequest, runtime: Util.RuntimeOptions): DeleteAckClusterConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectorId)) {
    query['ConnectorId'] = request.connectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAckClusterConnector',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除ACK集群连接器
 *
 * @param request DeleteAckClusterConnectorRequest
 * @return DeleteAckClusterConnectorResponse
 */
async function deleteAckClusterConnector(request: DeleteAckClusterConnectorRequest): DeleteAckClusterConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAckClusterConnectorWithOptions(request, runtime);
}

model DeleteAclBackupDataRequest {
  backUpTime?: string(name='BackUpTime', description='This parameter is required.', example='1743683400'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='192.0.XX.XX'),
}

model DeleteAclBackupDataResponseBody = {
  requestId?: string(name='RequestId', example='75E60025-43C5-5635-B7B7-272C5246****'),
}

model DeleteAclBackupDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAclBackupDataResponseBody(name='body'),
}

/**
 * @summary 删除ACL备份
 *
 * @param request DeleteAclBackupDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAclBackupDataResponse
 */
async function deleteAclBackupDataWithOptions(request: DeleteAclBackupDataRequest, runtime: Util.RuntimeOptions): DeleteAclBackupDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.backUpTime)) {
    query['BackUpTime'] = request.backUpTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAclBackupData',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除ACL备份
 *
 * @param request DeleteAclBackupDataRequest
 * @return DeleteAclBackupDataResponse
 */
async function deleteAclBackupData(request: DeleteAclBackupDataRequest): DeleteAclBackupDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAclBackupDataWithOptions(request, runtime);
}

model DeleteAddressBookRequest {
  groupUuid?: string(name='GroupUuid', description='The ID of the address book.

To delete the address book, you must provide the ID of the address book. You can call the DescribeAddressBook operation to query the ID.

This parameter is required.', example='0657ab9d-fe8b-4174-b2a6-6baf358e****'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model DeleteAddressBookResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model DeleteAddressBookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAddressBookResponseBody(name='body'),
}

/**
 * @summary Deletes an address book for access control.
 *
 * @description You can call the DeleteAddressBook operation to delete an address book for access control.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteAddressBookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAddressBookResponse
 */
async function deleteAddressBookWithOptions(request: DeleteAddressBookRequest, runtime: Util.RuntimeOptions): DeleteAddressBookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupUuid)) {
    query['GroupUuid'] = request.groupUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAddressBook',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an address book for access control.
 *
 * @description You can call the DeleteAddressBook operation to delete an address book for access control.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteAddressBookRequest
 * @return DeleteAddressBookResponse
 */
async function deleteAddressBook(request: DeleteAddressBookRequest): DeleteAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAddressBookWithOptions(request, runtime);
}

model DeleteControlPolicyRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

To delete an access control policy, you must specify the UUID of the policy. You can call the [DescribeControlPolicy](https://help.aliyun.com/document_detail/138866.html) operation to query the UUID.

This parameter is required.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **in**: inbound.
*   **out**: outbound.', example='in'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the traffic.', example='192.0.XX.XX', deprecated=true),
}

model DeleteControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model DeleteControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteControlPolicyResponseBody(name='body'),
}

/**
 * @summary Deletes an access control policy.
 *
 * @description You can call the DeleteControlPolicy operation to delete an access control policy that applies to inbound or outbound traffic.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteControlPolicyResponse
 */
async function deleteControlPolicyWithOptions(request: DeleteControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an access control policy.
 *
 * @description You can call the DeleteControlPolicy operation to delete an access control policy that applies to inbound or outbound traffic.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteControlPolicyRequest
 * @return DeleteControlPolicyResponse
 */
async function deleteControlPolicy(request: DeleteControlPolicyRequest): DeleteControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyWithOptions(request, runtime);
}

model DeleteControlPolicyTemplateRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='en'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='61.178.12.52'),
  templateId?: string(name='TemplateId', description='The ID of the access control policy template.

This parameter is required.', example='719ce620-ae23-4e42-9f93-9191b4400b55'),
}

model DeleteControlPolicyTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4E7F94C7-781F-5192-86CF-DB085013C810'),
}

model DeleteControlPolicyTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteControlPolicyTemplateResponseBody(name='body'),
}

/**
 * @summary Deletes an access control policy template.
 *
 * @param request DeleteControlPolicyTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteControlPolicyTemplateResponse
 */
async function deleteControlPolicyTemplateWithOptions(request: DeleteControlPolicyTemplateRequest, runtime: Util.RuntimeOptions): DeleteControlPolicyTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.templateId)) {
    query['TemplateId'] = request.templateId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteControlPolicyTemplate',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an access control policy template.
 *
 * @param request DeleteControlPolicyTemplateRequest
 * @return DeleteControlPolicyTemplateResponse
 */
async function deleteControlPolicyTemplate(request: DeleteControlPolicyTemplateRequest): DeleteControlPolicyTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteControlPolicyTemplateWithOptions(request, runtime);
}

model DeleteDnsFirewallPolicyRequest {
  aclUuid?: string(name='AclUuid', description='This parameter is required.', example='498946f4-c98a-45c0-9038-635c******'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='140.210.39.***'),
}

model DeleteDnsFirewallPolicyResponseBody = {
  requestId?: string(name='RequestId', example='32314C1E-82CF-582C-853A-B1773F******'),
}

model DeleteDnsFirewallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDnsFirewallPolicyResponseBody(name='body'),
}

/**
 * @summary 删除DNS防火墙规则
 *
 * @param request DeleteDnsFirewallPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDnsFirewallPolicyResponse
 */
async function deleteDnsFirewallPolicyWithOptions(request: DeleteDnsFirewallPolicyRequest, runtime: Util.RuntimeOptions): DeleteDnsFirewallPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDnsFirewallPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除DNS防火墙规则
 *
 * @param request DeleteDnsFirewallPolicyRequest
 * @return DeleteDnsFirewallPolicyResponse
 */
async function deleteDnsFirewallPolicy(request: DeleteDnsFirewallPolicyRequest): DeleteDnsFirewallPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDnsFirewallPolicyWithOptions(request, runtime);
}

model DeleteDownloadTaskRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  taskId?: string(name='TaskId', description='The ID of the file download task.', example='4376'),
}

model DeleteDownloadTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='064022A8-F415-572C-B3C1-657152833F11'),
}

model DeleteDownloadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDownloadTaskResponseBody(name='body'),
}

/**
 * @summary Deletes file download tasks.
 *
 * @description You can call this operation to delete file download tasks and delete the files.
 * **
 * **Warning** Both tasks and involved files are deleted. You can no longer download the involved files by using the download links. This operation is irreversible. Proceed with caution.
 *
 * @param request DeleteDownloadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDownloadTaskResponse
 */
async function deleteDownloadTaskWithOptions(request: DeleteDownloadTaskRequest, runtime: Util.RuntimeOptions): DeleteDownloadTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDownloadTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes file download tasks.
 *
 * @description You can call this operation to delete file download tasks and delete the files.
 * **
 * **Warning** Both tasks and involved files are deleted. You can no longer download the involved files by using the download links. This operation is irreversible. Proceed with caution.
 *
 * @param request DeleteDownloadTaskRequest
 * @return DeleteDownloadTaskResponse
 */
async function deleteDownloadTask(request: DeleteDownloadTaskRequest): DeleteDownloadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDownloadTaskWithOptions(request, runtime);
}

model DeleteFirewallV2RoutePoliciesRequest {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-d5ba592ac6c84aff****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-2d06d3568fd74d60****'),
}

model DeleteFirewallV2RoutePoliciesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='22B6B889-4E9F-56B3-AF3D-53749C477D1D'),
}

model DeleteFirewallV2RoutePoliciesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFirewallV2RoutePoliciesResponseBody(name='body'),
}

/**
 * @summary Deletes routing policies for a virtual private cloud (VPC) firewall of a transit router.
 *
 * @param request DeleteFirewallV2RoutePoliciesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFirewallV2RoutePoliciesResponse
 */
async function deleteFirewallV2RoutePoliciesWithOptions(request: DeleteFirewallV2RoutePoliciesRequest, runtime: Util.RuntimeOptions): DeleteFirewallV2RoutePoliciesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicyId)) {
    query['TrFirewallRoutePolicyId'] = request.trFirewallRoutePolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFirewallV2RoutePolicies',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes routing policies for a virtual private cloud (VPC) firewall of a transit router.
 *
 * @param request DeleteFirewallV2RoutePoliciesRequest
 * @return DeleteFirewallV2RoutePoliciesResponse
 */
async function deleteFirewallV2RoutePolicies(request: DeleteFirewallV2RoutePoliciesRequest): DeleteFirewallV2RoutePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFirewallV2RoutePoliciesWithOptions(request, runtime);
}

model DeleteInstanceMembersRequest {
  memberUids?: [ long ](name='MemberUids', description='The UIDs of the members.

This parameter is required.', example='1234123412341234'),
}

model DeleteInstanceMembersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='03E8AA70-0CC9-42EA-97AA-EA68377930B4'),
}

model DeleteInstanceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteInstanceMembersResponseBody(name='body'),
}

/**
 * @summary Removes members from Cloud Firewall.
 *
 * @description You can call this operation to remove up to 20 members from Cloud Firewall at a time. Separate multiple members with commas (,). After a member is removed, Cloud Firewall can no longer access the cloud resources of the member. Proceed with caution. Before you call this operation, call the [DescribeInstanceMembers](https://help.aliyun.com/document_detail/271704.html) operation to obtain the information about the members that are added to Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteInstanceMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteInstanceMembersResponse
 */
async function deleteInstanceMembersWithOptions(request: DeleteInstanceMembersRequest, runtime: Util.RuntimeOptions): DeleteInstanceMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberUids)) {
    query['MemberUids'] = request.memberUids;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteInstanceMembers',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Removes members from Cloud Firewall.
 *
 * @description You can call this operation to remove up to 20 members from Cloud Firewall at a time. Separate multiple members with commas (,). After a member is removed, Cloud Firewall can no longer access the cloud resources of the member. Proceed with caution. Before you call this operation, call the [DescribeInstanceMembers](https://help.aliyun.com/document_detail/271704.html) operation to obtain the information about the members that are added to Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteInstanceMembersRequest
 * @return DeleteInstanceMembersResponse
 */
async function deleteInstanceMembers(request: DeleteInstanceMembersRequest): DeleteInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceMembersWithOptions(request, runtime);
}

model DeleteIpsPrivateAssocRequest {
  lang?: string(name='Lang', example='zh'),
  resourceId?: string(name='ResourceId', example='ngw-c5vhmjdfp5t****'),
}

model DeleteIpsPrivateAssocResponseBody = {
  requestId?: string(name='RequestId', example='133173B9-8010-5DF5*****'),
}

model DeleteIpsPrivateAssocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteIpsPrivateAssocResponseBody(name='body'),
}

/**
 * @summary 创建IPS私网关联信息
 *
 * @param request DeleteIpsPrivateAssocRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteIpsPrivateAssocResponse
 */
async function deleteIpsPrivateAssocWithOptions(request: DeleteIpsPrivateAssocRequest, runtime: Util.RuntimeOptions): DeleteIpsPrivateAssocResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIpsPrivateAssoc',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建IPS私网关联信息
 *
 * @param request DeleteIpsPrivateAssocRequest
 * @return DeleteIpsPrivateAssocResponse
 */
async function deleteIpsPrivateAssoc(request: DeleteIpsPrivateAssocRequest): DeleteIpsPrivateAssocResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpsPrivateAssocWithOptions(request, runtime);
}

model DeleteNatFirewallControlPolicyRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

To delete an access control policy, you must provide the ID of the policy. You can call the DescribeNatFirewallControlPolicy operation to query the UUIDs of access control policies.

This parameter is required.', example='b6c8f905-2eb6-442a-ba35-9416e9dbb2c5'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **out**: outbound traffic

This parameter is required.', example='out'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-xxxxxx'),
}

model DeleteNatFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='31306869-C4BC-56F3-BBE6-C377CF9C8E1C'),
}

model DeleteNatFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Deletes an access control policy that is created for a NAT firewall.
 *
 * @description You can use this operation to delete an outbound access control policy that is created for a NAT firewall.
 *
 * @param request DeleteNatFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNatFirewallControlPolicyResponse
 */
async function deleteNatFirewallControlPolicyWithOptions(request: DeleteNatFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteNatFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an access control policy that is created for a NAT firewall.
 *
 * @description You can use this operation to delete an outbound access control policy that is created for a NAT firewall.
 *
 * @param request DeleteNatFirewallControlPolicyRequest
 * @return DeleteNatFirewallControlPolicyResponse
 */
async function deleteNatFirewallControlPolicy(request: DeleteNatFirewallControlPolicyRequest): DeleteNatFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatFirewallControlPolicyWithOptions(request, runtime);
}

model DeleteNatFirewallControlPolicyBatchRequest {
  aclUuidList?: [ string ](name='AclUuidList', description='The UUIDs of access control policies.

This parameter is required.'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **out**: outbound traffic', example='out'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-uf6j0426ap74vd6vrb676'),
}

model DeleteNatFirewallControlPolicyBatchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='450D47F5-956E-543E-8502-2F71C8C54E72'),
}

model DeleteNatFirewallControlPolicyBatchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNatFirewallControlPolicyBatchResponseBody(name='body'),
}

/**
 * @summary Deletes access control policies that are created for a NAT firewall at a time.
 *
 * @param request DeleteNatFirewallControlPolicyBatchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNatFirewallControlPolicyBatchResponse
 */
async function deleteNatFirewallControlPolicyBatchWithOptions(request: DeleteNatFirewallControlPolicyBatchRequest, runtime: Util.RuntimeOptions): DeleteNatFirewallControlPolicyBatchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuidList)) {
    query['AclUuidList'] = request.aclUuidList;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNatFirewallControlPolicyBatch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes access control policies that are created for a NAT firewall at a time.
 *
 * @param request DeleteNatFirewallControlPolicyBatchRequest
 * @return DeleteNatFirewallControlPolicyBatchResponse
 */
async function deleteNatFirewallControlPolicyBatch(request: DeleteNatFirewallControlPolicyBatchRequest): DeleteNatFirewallControlPolicyBatchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNatFirewallControlPolicyBatchWithOptions(request, runtime);
}

model DeletePrivateDnsAllDomainNameRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
}

model DeletePrivateDnsAllDomainNameResponseBody = {
  requestId?: string(name='RequestId', example='B2841452-CB8D-4F7D-B247-38E1CF****'),
}

model DeletePrivateDnsAllDomainNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateDnsAllDomainNameResponseBody(name='body'),
}

/**
 * @summary 清空私网DNS域名
 *
 * @param request DeletePrivateDnsAllDomainNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePrivateDnsAllDomainNameResponse
 */
async function deletePrivateDnsAllDomainNameWithOptions(request: DeletePrivateDnsAllDomainNameRequest, runtime: Util.RuntimeOptions): DeletePrivateDnsAllDomainNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceId)) {
    query['AccessInstanceId'] = request.accessInstanceId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateDnsAllDomainName',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 清空私网DNS域名
 *
 * @param request DeletePrivateDnsAllDomainNameRequest
 * @return DeletePrivateDnsAllDomainNameResponse
 */
async function deletePrivateDnsAllDomainName(request: DeletePrivateDnsAllDomainNameRequest): DeletePrivateDnsAllDomainNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateDnsAllDomainNameWithOptions(request, runtime);
}

model DeletePrivateDnsDomainNameRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  domainNameList?: [ string ](name='DomainNameList', description='This parameter is required.'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-shanghai'),
}

model DeletePrivateDnsDomainNameResponseBody = {
  requestId?: string(name='RequestId', example='850A84D6-0DE4-4797-A1E8-0009012****'),
}

model DeletePrivateDnsDomainNameResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateDnsDomainNameResponseBody(name='body'),
}

/**
 * @summary 删除私网DNS域名
 *
 * @param request DeletePrivateDnsDomainNameRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePrivateDnsDomainNameResponse
 */
async function deletePrivateDnsDomainNameWithOptions(request: DeletePrivateDnsDomainNameRequest, runtime: Util.RuntimeOptions): DeletePrivateDnsDomainNameResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceId)) {
    query['AccessInstanceId'] = request.accessInstanceId;
  }
  if (!Util.isUnset(request.domainNameList)) {
    query['DomainNameList'] = request.domainNameList;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateDnsDomainName',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除私网DNS域名
 *
 * @param request DeletePrivateDnsDomainNameRequest
 * @return DeletePrivateDnsDomainNameResponse
 */
async function deletePrivateDnsDomainName(request: DeletePrivateDnsDomainNameRequest): DeletePrivateDnsDomainNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateDnsDomainNameWithOptions(request, runtime);
}

model DeletePrivateDnsEndpointRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
}

model DeletePrivateDnsEndpointResponseBody = {
  requestId?: string(name='RequestId', example='822B9125-6E1A-551C-8EAF-6E7****'),
}

model DeletePrivateDnsEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePrivateDnsEndpointResponseBody(name='body'),
}

/**
 * @summary 删除私网DNS终端节点
 *
 * @param request DeletePrivateDnsEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePrivateDnsEndpointResponse
 */
async function deletePrivateDnsEndpointWithOptions(request: DeletePrivateDnsEndpointRequest, runtime: Util.RuntimeOptions): DeletePrivateDnsEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceId)) {
    query['AccessInstanceId'] = request.accessInstanceId;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePrivateDnsEndpoint',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除私网DNS终端节点
 *
 * @param request DeletePrivateDnsEndpointRequest
 * @return DeletePrivateDnsEndpointResponse
 */
async function deletePrivateDnsEndpoint(request: DeletePrivateDnsEndpointRequest): DeletePrivateDnsEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePrivateDnsEndpointWithOptions(request, runtime);
}

model DeleteSecurityProxyRequest {
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  proxyId?: string(name='ProxyId', description='The ID of the NAT firewall.

This parameter is required.', example='proxy-nat00ab412ef93d4275a6b5'),
}

model DeleteSecurityProxyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='7447795A-39AB-52CB-8F92-128DF4898F36'),
}

model DeleteSecurityProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecurityProxyResponseBody(name='body'),
}

/**
 * @summary Deletes a NAT firewall.
 *
 * @param request DeleteSecurityProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSecurityProxyResponse
 */
async function deleteSecurityProxyWithOptions(request: DeleteSecurityProxyRequest, runtime: Util.RuntimeOptions): DeleteSecurityProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecurityProxy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a NAT firewall.
 *
 * @param request DeleteSecurityProxyRequest
 * @return DeleteSecurityProxyResponse
 */
async function deleteSecurityProxy(request: DeleteSecurityProxyRequest): DeleteSecurityProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityProxyWithOptions(request, runtime);
}

model DeleteTrFirewallV2Request {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-99bc4f0fc88b4d00****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
}

model DeleteTrFirewallV2ResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='A774E66E-B170-59FC-9AAF-3068B15E991F'),
}

model DeleteTrFirewallV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrFirewallV2ResponseBody(name='body'),
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request DeleteTrFirewallV2Request
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTrFirewallV2Response
 */
async function deleteTrFirewallV2WithOptions(request: DeleteTrFirewallV2Request, runtime: Util.RuntimeOptions): DeleteTrFirewallV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrFirewallV2',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request DeleteTrFirewallV2Request
 * @return DeleteTrFirewallV2Response
 */
async function deleteTrFirewallV2(request: DeleteTrFirewallV2Request): DeleteTrFirewallV2Response {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrFirewallV2WithOptions(request, runtime);
}

model DeleteVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallIdList?: [ string ](name='VpcFirewallIdList', description='The instance IDs of VPC firewalls.

This parameter is required.'),
}

model DeleteVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model DeleteVpcFirewallCenConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DeleteVpcFirewallCenConfigure operation to delete a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallCenConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVpcFirewallCenConfigureResponse
 */
async function deleteVpcFirewallCenConfigureWithOptions(request: DeleteVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallIdList)) {
    query['VpcFirewallIdList'] = request.vpcFirewallIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcFirewallCenConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DeleteVpcFirewallCenConfigure operation to delete a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallCenConfigureRequest
 * @return DeleteVpcFirewallCenConfigureResponse
 */
async function deleteVpcFirewallCenConfigure(request: DeleteVpcFirewallCenConfigureRequest): DeleteVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallCenConfigureWithOptions(request, runtime);
}

model DeleteVpcFirewallConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallIdList?: [ string ](name='VpcFirewallIdList', description='The instance IDs of VPC firewalls.

This parameter is required.'),
}

model DeleteVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6j3'),
}

model DeleteVpcFirewallConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcFirewallConfigureResponseBody(name='body'),
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall that controls traffic between two VPCs. The VPCs are connected by using an Express Connect circuit.
 *
 * @description You can call the DeleteVpcFirewallConfigure operation to delete a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVpcFirewallConfigureResponse
 */
async function deleteVpcFirewallConfigureWithOptions(request: DeleteVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallIdList)) {
    query['VpcFirewallIdList'] = request.vpcFirewallIdList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcFirewallConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a virtual private cloud (VPC) firewall that controls traffic between two VPCs. The VPCs are connected by using an Express Connect circuit.
 *
 * @description You can call the DeleteVpcFirewallConfigure operation to delete a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallConfigureRequest
 * @return DeleteVpcFirewallConfigureResponse
 */
async function deleteVpcFirewallConfigure(request: DeleteVpcFirewallConfigureRequest): DeleteVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallConfigureWithOptions(request, runtime);
}

model DeleteVpcFirewallControlPolicyRequest {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy. 

To delete an access control policy, you must provide the ID of the policy. You can call the **DescribeVpcFirewallControlPolicy** operation to query the ID.

This parameter is required.', example='00281255-d220-4db1-8f4f-c4df2214****'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values: 

- **zh**: Chinese
- **en**: English', example='zh'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The ID of the group to which the access control policy belongs. You can call the **DescribeVpcFirewallAclGroupList** operation to query the ID.  

Valid values:

- If the VPC firewall is used to protect a CEN instance, the value of this parameter is the ID of the CEN instance.  

Example: cen-ervw0g12b5jbw****
- If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the ID of the VPC firewall.  

Example: vfw-a42bbb7b887148c9****

This parameter is required.', example='vfw-a42bbb7b887148c91****'),
}

model DeleteVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model DeleteVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Deletes an access control policy from a specific policy group for a virtual private cloud (VPC) firewall.
 *
 * @description You can call the DeleteVpcFirewallControlPolicy operation to delete an access control policy from a specific policy group for a VPC firewall. Different access control policies are used for the VPC firewall that is used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewall that is used to protect each Express Connect circuit. 
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVpcFirewallControlPolicyResponse
 */
async function deleteVpcFirewallControlPolicyWithOptions(request: DeleteVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DeleteVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes an access control policy from a specific policy group for a virtual private cloud (VPC) firewall.
 *
 * @description You can call the DeleteVpcFirewallControlPolicy operation to delete an access control policy from a specific policy group for a VPC firewall. Different access control policies are used for the VPC firewall that is used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewall that is used to protect each Express Connect circuit. 
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteVpcFirewallControlPolicyRequest
 * @return DeleteVpcFirewallControlPolicyResponse
 */
async function deleteVpcFirewallControlPolicy(request: DeleteVpcFirewallControlPolicyRequest): DeleteVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeACLProtectTrendRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp that is accurate to seconds.', example='1670397599'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='This parameter is deprecated.', example='223.95.87.130'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp that is accurate to seconds.', example='1677050306'),
}

model DescribeACLProtectTrendResponseBody = {
  inProtectCnt?: long(name='InProtectCnt', description='The number of internal requests that are blocked by the ACL feature.', example='100'),
  interVPCProtectCnt?: long(name='InterVPCProtectCnt', description='This parameter is deprecated.', example='0'),
  interval?: int32(name='Interval', description='The interval for returning data. Unit: seconds.', example='86400'),
  outProtectCnt?: long(name='OutProtectCnt', description='The number of external requests that are blocked by the ACL feature.', example='200'),
  requestId?: string(name='RequestId', description='The request ID.', example='9063AB86-6FFA-5B2D-A16D-697C966DECA3'),
  totalProtectCnt?: long(name='TotalProtectCnt', description='The total number of requests that are blocked by the ACL feature.', example='300'),
  trendList?: [ 
    {
      protectCnt?: int32(name='ProtectCnt', description='The number of requests that are blocked by ACL on the current day.', example='100'),
      time?: long(name='Time', description='The UNIX timestamp at midnight (00:00:00) of each day, which indicates the date of the current day. Unit: seconds.', example='1697299200'),
    }
  ](name='TrendList', description='The statistics on the requests that are blocked by the ACL feature.'),
}

model DescribeACLProtectTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeACLProtectTrendResponseBody(name='body'),
}

/**
 * @summary Queries the statistics on the requests that are blocked by the access control list (ACL) feature.
 *
 * @param request DescribeACLProtectTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeACLProtectTrendResponse
 */
async function describeACLProtectTrendWithOptions(request: DescribeACLProtectTrendRequest, runtime: Util.RuntimeOptions): DescribeACLProtectTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeACLProtectTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the statistics on the requests that are blocked by the access control list (ACL) feature.
 *
 * @param request DescribeACLProtectTrendRequest
 * @return DescribeACLProtectTrendResponse
 */
async function describeACLProtectTrend(request: DescribeACLProtectTrendRequest): DescribeACLProtectTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeACLProtectTrendWithOptions(request, runtime);
}

model DescribeAITrafficAnalysisStatusResponseBody = {
  requestId?: string(name='RequestId', example='4E7F94C7-781F-5192-86CF-DB085****'),
  status?: string(name='Status', example='open'),
}

model DescribeAITrafficAnalysisStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAITrafficAnalysisStatusResponseBody(name='body'),
}

/**
 * @summary 查询AI流量分析开启状态
 *
 * @param request DescribeAITrafficAnalysisStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAITrafficAnalysisStatusResponse
 */
async function describeAITrafficAnalysisStatusWithOptions(runtime: Util.RuntimeOptions): DescribeAITrafficAnalysisStatusResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeAITrafficAnalysisStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询AI流量分析开启状态
 *
 * @return DescribeAITrafficAnalysisStatusResponse
 */
async function describeAITrafficAnalysisStatus(): DescribeAITrafficAnalysisStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAITrafficAnalysisStatusWithOptions(runtime);
}

model DescribeAccessInstanceRegionListRequest {
  accessInstanceStatus?: string(name='AccessInstanceStatus', example='ready'),
  accessInstanceType?: string(name='AccessInstanceType', example='AckClusterConnector'),
}

model DescribeAccessInstanceRegionListResponseBody = {
  regionNoList?: [ string ](name='RegionNoList'),
  requestId?: string(name='RequestId', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model DescribeAccessInstanceRegionListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessInstanceRegionListResponseBody(name='body'),
}

/**
 * @summary 查询接入实例地域列表
 *
 * @param request DescribeAccessInstanceRegionListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccessInstanceRegionListResponse
 */
async function describeAccessInstanceRegionListWithOptions(request: DescribeAccessInstanceRegionListRequest, runtime: Util.RuntimeOptions): DescribeAccessInstanceRegionListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessInstanceRegionList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入实例地域列表
 *
 * @param request DescribeAccessInstanceRegionListRequest
 * @return DescribeAccessInstanceRegionListResponse
 */
async function describeAccessInstanceRegionList(request: DescribeAccessInstanceRegionListRequest): DescribeAccessInstanceRegionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessInstanceRegionListWithOptions(request, runtime);
}

model DescribeAccessInstanceTaskRequest {
  accessInstanceId?: string(name='AccessInstanceId', example='pdi-3bc2f91695ee48bd9377'),
  accessInstanceType?: string(name='AccessInstanceType', example='AckClusterConnector'),
  lang?: string(name='Lang', example='zh'),
  regionNo?: string(name='RegionNo', example='cn-beijing'),
  taskId?: string(name='TaskId', example='task-c92d4544ef7b6a42'),
}

model DescribeAccessInstanceTaskResponseBody = {
  isFound?: boolean(name='IsFound', example='true'),
  requestId?: string(name='RequestId', example='15FCCC52-1E23-57AE-B5EF-3E00A3******'),
  taskFinishTimestamp?: long(name='TaskFinishTimestamp', example='17151381075'),
  taskId?: string(name='TaskId', example='3c9d576f-fce0-4caa-9116-15033509bdb6'),
  taskName?: string(name='TaskName'),
  taskStartTimestamp?: long(name='TaskStartTimestamp', example='17151361285'),
  taskStatus?: string(name='TaskStatus', example='running'),
  taskSteps?: [ 
    {
      stepName?: string(name='StepName'),
      stepProgress?: string(name='StepProgress', example='100%'),
      stepStatus?: string(name='StepStatus', example='finished'),
    }
  ](name='TaskSteps'),
}

model DescribeAccessInstanceTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessInstanceTaskResponseBody(name='body'),
}

/**
 * @summary 查询接入实例任务
 *
 * @param request DescribeAccessInstanceTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccessInstanceTaskResponse
 */
async function describeAccessInstanceTaskWithOptions(request: DescribeAccessInstanceTaskRequest, runtime: Util.RuntimeOptions): DescribeAccessInstanceTaskResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessInstanceTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入实例任务
 *
 * @param request DescribeAccessInstanceTaskRequest
 * @return DescribeAccessInstanceTaskResponse
 */
async function describeAccessInstanceTask(request: DescribeAccessInstanceTaskRequest): DescribeAccessInstanceTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessInstanceTaskWithOptions(request, runtime);
}

model DescribeAccessInstanceVSwitchListRequest {
  memberUid?: long(name='MemberUid', example='135809047715****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  vSwitchId?: string(name='VSwitchId', example='vsw-qzeaol304m***'),
  vpcId?: string(name='VpcId', example='vpc-uf6b5lyul0x******'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model DescribeAccessInstanceVSwitchListResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='450D47F5-956E-543E-8502-2F71C8C54E72'),
  totalCount?: long(name='TotalCount', example='1'),
  zones?: [ 
    {
      vSwitchList?: [ 
        {
          availableIpAddressCount?: long(name='AvailableIpAddressCount', example='254'),
          cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
          firewallVSwitch?: boolean(name='FirewallVSwitch', example='false'),
          vSwitchId?: string(name='VSwitchId', example='vsw-qzeaol304m***'),
          vSwitchName?: string(name='VSwitchName', example='ManagedVSW'),
          vpcId?: string(name='VpcId', example='vpc-uf6b5lyul0x******'),
        }
      ](name='VSwitchList'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
    }
  ](name='Zones'),
}

model DescribeAccessInstanceVSwitchListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessInstanceVSwitchListResponseBody(name='body'),
}

/**
 * @summary 查询接入实例的交换机列表
 *
 * @param request DescribeAccessInstanceVSwitchListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccessInstanceVSwitchListResponse
 */
async function describeAccessInstanceVSwitchListWithOptions(request: DescribeAccessInstanceVSwitchListRequest, runtime: Util.RuntimeOptions): DescribeAccessInstanceVSwitchListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessInstanceVSwitchList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入实例的交换机列表
 *
 * @param request DescribeAccessInstanceVSwitchListRequest
 * @return DescribeAccessInstanceVSwitchListResponse
 */
async function describeAccessInstanceVSwitchList(request: DescribeAccessInstanceVSwitchListRequest): DescribeAccessInstanceVSwitchListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessInstanceVSwitchListWithOptions(request, runtime);
}

model DescribeAccessInstanceVpcListRequest {
  memberUid?: long(name='MemberUid', example='135809047715****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  vpcId?: string(name='VpcId', example='vpc-j6cvhdscntzuvr0x****'),
}

model DescribeAccessInstanceVpcListResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='450D47F5-956E-543E-8502-2F71C8C54E72'),
  totalCount?: long(name='TotalCount', example='10'),
  vpcList?: [ 
    {
      firewallVpc?: boolean(name='FirewallVpc', example='false'),
      vpcId?: string(name='VpcId', example='vpc-2ze1t4irqj0fljlbb****'),
      vpcName?: string(name='VpcName', example='Cloud_Firewall_VPC'),
    }
  ](name='VpcList'),
}

model DescribeAccessInstanceVpcListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessInstanceVpcListResponseBody(name='body'),
}

/**
 * @summary 查询接入实例VPC列表
 *
 * @param request DescribeAccessInstanceVpcListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccessInstanceVpcListResponse
 */
async function describeAccessInstanceVpcListWithOptions(request: DescribeAccessInstanceVpcListRequest, runtime: Util.RuntimeOptions): DescribeAccessInstanceVpcListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessInstanceVpcList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入实例VPC列表
 *
 * @param request DescribeAccessInstanceVpcListRequest
 * @return DescribeAccessInstanceVpcListResponse
 */
async function describeAccessInstanceVpcList(request: DescribeAccessInstanceVpcListRequest): DescribeAccessInstanceVpcListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessInstanceVpcListWithOptions(request, runtime);
}

model DescribeAccessInstanceZoneListRequest {
  accessInstanceType?: string(name='AccessInstanceType', example='AckClusterConnector'),
  lang?: string(name='Lang', example='zh'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
}

model DescribeAccessInstanceZoneListResponseBody = {
  requestId?: string(name='RequestId', example='31306819-C4BC-56F3-BBE6-*****'),
  zoneList?: [ string ](name='ZoneList'),
  zones?: [ 
    {
      localName?: string(name='LocalName'),
      zoneId?: string(name='ZoneId', example='cn-beijing-g'),
    }
  ](name='Zones'),
}

model DescribeAccessInstanceZoneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAccessInstanceZoneListResponseBody(name='body'),
}

/**
 * @summary 查询接入实例支持的可用区列表
 *
 * @param request DescribeAccessInstanceZoneListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAccessInstanceZoneListResponse
 */
async function describeAccessInstanceZoneListWithOptions(request: DescribeAccessInstanceZoneListRequest, runtime: Util.RuntimeOptions): DescribeAccessInstanceZoneListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAccessInstanceZoneList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入实例支持的可用区列表
 *
 * @param request DescribeAccessInstanceZoneListRequest
 * @return DescribeAccessInstanceZoneListResponse
 */
async function describeAccessInstanceZoneList(request: DescribeAccessInstanceZoneListRequest): DescribeAccessInstanceZoneListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessInstanceZoneListWithOptions(request, runtime);
}

model DescribeAckClusterConnectorRequest {
  connectorId?: string(name='ConnectorId', description='This parameter is required.', example='ac-7c1bad6c3cc84c33baab'),
  lang?: string(name='Lang', example='zh'),
}

model DescribeAckClusterConnectorResponseBody = {
  ackClusterConnector?: {
    clusterId?: string(name='ClusterId', example='c857d908016794125883a9ee8196cba17'),
    clusterName?: string(name='ClusterName', example='ack-cluster-name'),
    connectorHealthCheckStatus?: string(name='ConnectorHealthCheckStatus', example='healthy'),
    connectorId?: string(name='ConnectorId', example='ac-7c1bad6c3cc84c33baab'),
    connectorName?: string(name='ConnectorName', example='ack-cluster-connector-name'),
    connectorStatus?: string(name='ConnectorStatus', example='ready'),
    createTime?: string(name='CreateTime', example='1724982259'),
    memberUid?: string(name='MemberUid', example='135809047715****'),
    primaryVswitchId?: string(name='PrimaryVswitchId', example='vsw-2zerfbbje7dvnbii2****'),
    primaryVswitchIp?: string(name='PrimaryVswitchIp', example='10.100.1.1'),
    primaryVswitchZoneId?: string(name='PrimaryVswitchZoneId', example='cn-beijing-g'),
    regionNo?: string(name='RegionNo', example='cn-beijing'),
    standbyVswitchId?: string(name='StandbyVswitchId', example='vsw-2ze2gtlfozrab01cfo****'),
    standbyVswitchIp?: string(name='StandbyVswitchIp', example='10.100.2.1'),
    standbyVswitchZoneId?: string(name='StandbyVswitchZoneId', example='cn-beijing-h'),
    ttl?: int32(name='Ttl', example='30'),
    unhealthyReason?: string(name='UnhealthyReason', example='The ACK cluster status is unavailable.'),
    vpcId?: string(name='VpcId', example='vpc-j6cvhdscntzuvr0x****'),
  }(name='AckClusterConnector'),
  requestId?: string(name='RequestId', example='45E2E720-D2B4-506F-B682-1FCBE971****'),
}

model DescribeAckClusterConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAckClusterConnectorResponseBody(name='body'),
}

/**
 * @summary 查询指定ACK集群连接器
 *
 * @param request DescribeAckClusterConnectorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAckClusterConnectorResponse
 */
async function describeAckClusterConnectorWithOptions(request: DescribeAckClusterConnectorRequest, runtime: Util.RuntimeOptions): DescribeAckClusterConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectorId)) {
    query['ConnectorId'] = request.connectorId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAckClusterConnector',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询指定ACK集群连接器
 *
 * @param request DescribeAckClusterConnectorRequest
 * @return DescribeAckClusterConnectorResponse
 */
async function describeAckClusterConnector(request: DescribeAckClusterConnectorRequest): DescribeAckClusterConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAckClusterConnectorWithOptions(request, runtime);
}

model DescribeAckClusterConnectorsRequest {
  clusterId?: string(name='ClusterId', example='0E0C30C977463****'),
  connectorName?: string(name='ConnectorName', example='test'),
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='135809047715****'),
  pageNo?: string(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: string(name='PageSize', description='This parameter is required.', example='10'),
  regionNo?: string(name='RegionNo', example='cn-shenzhen'),
  vpcId?: string(name='VpcId', example='vpc-uf6b5lyul0x******'),
}

model DescribeAckClusterConnectorsResponseBody = {
  ackClusterConnectors?: [ 
    {
      clusterId?: string(name='ClusterId', example='f9b9815a5280****'),
      clusterName?: string(name='ClusterName', example='TestClusterA'),
      connectorHealthCheckStatus?: string(name='ConnectorHealthCheckStatus', example='healthy'),
      connectorId?: string(name='ConnectorId', example='connector-7ff4df316c9a458d****'),
      connectorName?: string(name='ConnectorName', example='test'),
      connectorStatus?: string(name='ConnectorStatus', example='ready'),
      createTime?: string(name='CreateTime', example='1760493347'),
      groupUuids?: [ string ](name='GroupUuids'),
      memberUid?: string(name='MemberUid', example='159663371500****'),
      primaryVswitchId?: string(name='PrimaryVswitchId', example='vsw-2ze2gtlfozrab01cfo****'),
      primaryVswitchIp?: string(name='PrimaryVswitchIp', example='10.100.2.XXX'),
      primaryVswitchZoneId?: string(name='PrimaryVswitchZoneId', example='cn-beijing-g'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
      standbyVswitchId?: string(name='StandbyVswitchId', example='vsw-2zerfbbje7dvnbii2****'),
      standbyVswitchIp?: string(name='StandbyVswitchIp', example='10.100.1.XXX'),
      standbyVswitchZoneId?: string(name='StandbyVswitchZoneId', example='cn-beijing-h'),
      ttl?: int32(name='Ttl', example='30'),
      unhealthyReason?: string(name='UnhealthyReason'),
      vpcId?: string(name='VpcId', example='vpc-j6cvhdscntzuvr0x****'),
    }
  ](name='AckClusterConnectors'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='E7F333E0-7B70-54DA-A307-4B2B49DE****'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeAckClusterConnectorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAckClusterConnectorsResponseBody(name='body'),
}

/**
 * @summary 批量查询ACK集群连接器列表
 *
 * @param request DescribeAckClusterConnectorsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAckClusterConnectorsResponse
 */
async function describeAckClusterConnectorsWithOptions(request: DescribeAckClusterConnectorsRequest, runtime: Util.RuntimeOptions): DescribeAckClusterConnectorsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.connectorName)) {
    query['ConnectorName'] = request.connectorName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAckClusterConnectors',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询ACK集群连接器列表
 *
 * @param request DescribeAckClusterConnectorsRequest
 * @return DescribeAckClusterConnectorsResponse
 */
async function describeAckClusterConnectors(request: DescribeAckClusterConnectorsRequest): DescribeAckClusterConnectorsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAckClusterConnectorsWithOptions(request, runtime);
}

model DescribeAckClusterNamespacesRequest {
  connectorId?: string(name='ConnectorId', description='This parameter is required.', example='ac-7c1bad6c3cc84c33baab'),
}

model DescribeAckClusterNamespacesResponseBody = {
  ackNamespaces?: [ string ](name='AckNamespaces'),
  requestId?: string(name='RequestId', example='133173B9-8010-5DF5-8B93-********'),
}

model DescribeAckClusterNamespacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAckClusterNamespacesResponseBody(name='body'),
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群命名空间
 *
 * @param request DescribeAckClusterNamespacesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAckClusterNamespacesResponse
 */
async function describeAckClusterNamespacesWithOptions(request: DescribeAckClusterNamespacesRequest, runtime: Util.RuntimeOptions): DescribeAckClusterNamespacesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectorId)) {
    query['ConnectorId'] = request.connectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAckClusterNamespaces',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群命名空间
 *
 * @param request DescribeAckClusterNamespacesRequest
 * @return DescribeAckClusterNamespacesResponse
 */
async function describeAckClusterNamespaces(request: DescribeAckClusterNamespacesRequest): DescribeAckClusterNamespacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAckClusterNamespacesWithOptions(request, runtime);
}

model DescribeAckClusterPodLabelsRequest {
  connectorId?: string(name='ConnectorId', description='This parameter is required.', example='ac-7c1bad6c3cc84c33baab'),
}

model DescribeAckClusterPodLabelsResponseBody = {
  ackLabels?: [ 
    {
      key?: string(name='Key', example='app'),
      value?: string(name='Value', example='storage-operator'),
    }
  ](name='AckLabels'),
  requestId?: string(name='RequestId', example='6169C0A4-B91A-5D48-AE4D-B9432D15****'),
}

model DescribeAckClusterPodLabelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAckClusterPodLabelsResponseBody(name='body'),
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群标签
 *
 * @param request DescribeAckClusterPodLabelsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAckClusterPodLabelsResponse
 */
async function describeAckClusterPodLabelsWithOptions(request: DescribeAckClusterPodLabelsRequest, runtime: Util.RuntimeOptions): DescribeAckClusterPodLabelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectorId)) {
    query['ConnectorId'] = request.connectorId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAckClusterPodLabels',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群标签
 *
 * @param request DescribeAckClusterPodLabelsRequest
 * @return DescribeAckClusterPodLabelsResponse
 */
async function describeAckClusterPodLabels(request: DescribeAckClusterPodLabelsRequest): DescribeAckClusterPodLabelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAckClusterPodLabelsWithOptions(request, runtime);
}

model DescribeAckClustersRequest {
  clusterId?: string(name='ClusterId', example='cb0f5640b1b2d404cad6ba21509d7847b'),
  clusterName?: string(name='ClusterName', example='ack-cluster-name'),
  clusterSpec?: string(name='ClusterSpec', example='ack.pro.small'),
  connectorStatus?: string(name='ConnectorStatus', example='ready'),
  memberUid?: string(name='MemberUid', example='135809047715****'),
  pageNo?: string(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: string(name='PageSize', description='This parameter is required.', example='10'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
}

model DescribeAckClustersResponseBody = {
  clusters?: [ 
    {
      clusterId?: string(name='ClusterId', example='cb0f5640b1b2d404cad6ba21509d7847b'),
      clusterName?: string(name='ClusterName', example='ack-cluster-name'),
      clusterSpec?: string(name='ClusterSpec', example='ack.pro.small'),
      clusterType?: string(name='ClusterType', example='ManagedKubernetes'),
      memberUid?: string(name='MemberUid', example='135809047715****'),
      network?: string(name='Network', example='terway-eniip'),
      profile?: string(name='Profile', example='Default'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      state?: string(name='State', example='running'),
      vpcId?: string(name='VpcId', example='vpc-2vcg932hsxsxuqbgl****'),
    }
  ](name='Clusters'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='C5DDD596-1191-5F36-A504-8733045A****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeAckClustersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAckClustersResponseBody(name='body'),
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群，查询符合条件的ACK集群（例如指定集群类型、集群规格）列表信息
 *
 * @param request DescribeAckClustersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAckClustersResponse
 */
async function describeAckClustersWithOptions(request: DescribeAckClustersRequest, runtime: Util.RuntimeOptions): DescribeAckClustersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clusterId)) {
    query['ClusterId'] = request.clusterId;
  }
  if (!Util.isUnset(request.clusterName)) {
    query['ClusterName'] = request.clusterName;
  }
  if (!Util.isUnset(request.clusterSpec)) {
    query['ClusterSpec'] = request.clusterSpec;
  }
  if (!Util.isUnset(request.connectorStatus)) {
    query['ConnectorStatus'] = request.connectorStatus;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAckClusters',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询阿里云K8S容器服务（ACK）集群，查询符合条件的ACK集群（例如指定集群类型、集群规格）列表信息
 *
 * @param request DescribeAckClustersRequest
 * @return DescribeAckClustersResponse
 */
async function describeAckClusters(request: DescribeAckClustersRequest): DescribeAckClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAckClustersWithOptions(request, runtime);
}

model DescribeAclAppsRequest {
  aclType?: string(name='AclType', description='This parameter is required.', example='VPC'),
  lang?: string(name='Lang', example='zh'),
  pageNo?: int32(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  popular?: int32(name='Popular', example='1'),
  protocols?: [ string ](name='Protocols'),
}

model DescribeAclAppsResponseBody = {
  aclApps?: [ 
    {
      appId?: int32(name='AppId', example='1.0'),
      appName?: string(name='AppName', example='test'),
      popular?: int32(name='Popular', example='1'),
      protocols?: [ string ](name='Protocols'),
      riskLevel?: int32(name='RiskLevel', example='1'),
      supportFqdn?: int32(name='SupportFqdn', example='1'),
    }
  ](name='AclApps'),
  requestId?: string(name='RequestId', example='9063AB86-6FFA-5B2D-A16D-697C966D****'),
  totalCount?: long(name='TotalCount', example='20'),
}

model DescribeAclAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclAppsResponseBody(name='body'),
}

/**
 * @summary 批量查询访问控制应用
 *
 * @param request DescribeAclAppsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclAppsResponse
 */
async function describeAclAppsWithOptions(request: DescribeAclAppsRequest, runtime: Util.RuntimeOptions): DescribeAclAppsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclApps',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询访问控制应用
 *
 * @param request DescribeAclAppsRequest
 * @return DescribeAclAppsResponse
 */
async function describeAclApps(request: DescribeAclAppsRequest): DescribeAclAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclAppsWithOptions(request, runtime);
}

model DescribeAclCheckRequest {
  lang?: string(name='Lang', example='zh'),
  pageNo?: int32(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  taskId?: string(name='TaskId', description='This parameter is required.', example='132'),
}

model DescribeAclCheckResponseBody = {
  checkRecord?: {
    aclTotalCount?: long(name='AclTotalCount', example='10'),
    acls?: [ 
      {
        acl?: {
          aclAction?: string(name='AclAction', example='log'),
          aclUuid?: string(name='AclUuid', example='997b38e0-01fa-4db7-8d30-02ebf6fdb747'),
          addressList?: [ string ](name='AddressList'),
          addressListCount?: int32(name='AddressListCount', example='1'),
          addresses?: [ 
            {
              address?: string(name='Address', example='192.0.XX.XX/32'),
              note?: string(name='Note'),
            }
          ](name='Addresses'),
          applicationId?: string(name='ApplicationId', example='plugin_idp4_ciam'),
          applicationName?: string(name='ApplicationName', example='ANY'),
          applicationNameList?: [ string ](name='ApplicationNameList'),
          autoAddTagEcs?: int32(name='AutoAddTagEcs', example='0'),
          createTime?: long(name='CreateTime', example='1761062400'),
          description?: string(name='Description', example='test_policy'),
          destPort?: string(name='DestPort', example='80/80'),
          destPortGroup?: string(name='DestPortGroup', example='my_port_group'),
          destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
          destPortType?: string(name='DestPortType', example='port'),
          destination?: string(name='Destination', example='kms.cn-shanghai.aliyuncs.com'),
          destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
          destinationGroupType?: string(name='DestinationGroupType', example='domain'),
          destinationType?: string(name='DestinationType', example='domain'),
          direction?: string(name='Direction', example='out'),
          dnsResult?: string(name='DnsResult', example='192.0.XX.XX'),
          dnsResultTime?: long(name='DnsResultTime', example='1579261141'),
          domainResolveType?: int32(name='DomainResolveType', example='FQDN'),
          endTime?: long(name='EndTime', example='1758334822'),
          groupName?: string(name='GroupName'),
          groupType?: string(name='GroupType', example='ip'),
          groupUuid?: string(name='GroupUuid', example='b91d86c3-2b52-4534-aae9-8d0339b12a48'),
          hitLastTime?: long(name='HitLastTime', example='1579261141'),
          hitTimes?: long(name='HitTimes', example='1'),
          ipVersion?: int32(name='IpVersion', example='4'),
          modifyTime?: long(name='ModifyTime', example='1761062400'),
          natGatewayId?: string(name='NatGatewayId', example='ngw-2ze4w62zbdkwjmoqeokgl'),
          order?: int32(name='Order', example='1'),
          proto?: string(name='Proto', example='TCP'),
          referenceCount?: int32(name='ReferenceCount', example='1'),
          release?: string(name='Release', example='true'),
          repeatDays?: [ long ](name='RepeatDays'),
          repeatEndTime?: string(name='RepeatEndTime', example='23:30'),
          repeatStartTime?: string(name='RepeatStartTime', example='08:00'),
          repeatType?: string(name='RepeatType', example='Permanent'),
          source?: string(name='Source', example='172.28.7.167'),
          sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
          sourceGroupType?: string(name='SourceGroupType', example='ip'),
          sourceType?: string(name='SourceType', example='group'),
          spreadCnt?: int32(name='SpreadCnt', example='10'),
          startTime?: long(name='StartTime', example='1730318400'),
          tagList?: [ 
            {
              tagKey?: string(name='TagKey', example='ss'),
              tagValue?: string(name='TagValue', example='tfTestAcc0'),
            }
          ](name='TagList'),
          tagRelation?: string(name='TagRelation', example='or'),
          vpcFirewallId?: string(name='VpcFirewallId', example='vfw-925514970c2c4bcab222'),
        }(name='Acl'),
        aclAssessmentDetail?: string(name='AclAssessmentDetail'),
        aclStatus?: string(name='AclStatus', example='Pending'),
      }
    ](name='Acls'),
    checkName?: string(name='CheckName', example='PolicyHitCountZero'),
    description?: string(name='Description'),
    lastCheckTime?: string(name='LastCheckTime', example='1724982259'),
    level?: string(name='Level', example='High'),
    recordAssessmentDetail?: string(name='RecordAssessmentDetail'),
    taskId?: string(name='TaskId', example='task-c92d4544ef7b6a42'),
  }(name='CheckRecord'),
  requestId?: string(name='RequestId', example='25E655B0-CAED-53D4-8054-F983126****'),
}

model DescribeAclCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclCheckResponseBody(name='body'),
}

/**
 * @summary 查询ACL检查详情
 *
 * @param request DescribeAclCheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclCheckResponse
 */
async function describeAclCheckWithOptions(request: DescribeAclCheckRequest, runtime: Util.RuntimeOptions): DescribeAclCheckResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclCheck',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询ACL检查详情
 *
 * @param request DescribeAclCheckRequest
 * @return DescribeAclCheckResponse
 */
async function describeAclCheck(request: DescribeAclCheckRequest): DescribeAclCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclCheckWithOptions(request, runtime);
}

model DescribeAclCheckQuotaRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeAclCheckQuotaResponseBody = {
  quota?: {
    availableQuota?: long(name='AvailableQuota', example='500'),
    consumedQuota?: long(name='ConsumedQuota', example='1500'),
    totalQuota?: long(name='TotalQuota', example='2000'),
    updateTime?: string(name='UpdateTime', example='1724982259'),
  }(name='Quota'),
  requestId?: string(name='RequestId', example='7D5483BF-2262-586D-8706-BDDB8B42****'),
}

model DescribeAclCheckQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclCheckQuotaResponseBody(name='body'),
}

/**
 * @summary 查询NAT防火墙预检查结果
 *
 * @param request DescribeAclCheckQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclCheckQuotaResponse
 */
async function describeAclCheckQuotaWithOptions(request: DescribeAclCheckQuotaRequest, runtime: Util.RuntimeOptions): DescribeAclCheckQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclCheckQuota',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询NAT防火墙预检查结果
 *
 * @param request DescribeAclCheckQuotaRequest
 * @return DescribeAclCheckQuotaResponse
 */
async function describeAclCheckQuota(request: DescribeAclCheckQuotaRequest): DescribeAclCheckQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclCheckQuotaWithOptions(request, runtime);
}

model DescribeAclChecksRequest {
  aclType?: string(name='AclType', description='This parameter is required.', example='VPC'),
  lang?: string(name='Lang', example='zh'),
}

model DescribeAclChecksResponseBody = {
  checkRecords?: {
    aclType?: string(name='AclType', example='Internet'),
    records?: [ 
      {
        aclPendingCount?: long(name='AclPendingCount', example='1'),
        aclTotalCount?: long(name='AclTotalCount', example='10'),
        checkName?: string(name='CheckName', example='AddressBookDomainValid'),
        checkStatus?: string(name='CheckStatus', example='Checked'),
        checkType?: string(name='CheckType', example='AddressBookGather'),
        lastCheckTime?: string(name='LastCheckTime', example='1724982259'),
        level?: string(name='Level', example='Medium'),
        taskId?: string(name='TaskId', example='task-c92d4544ef7b6a42'),
      }
    ](name='Records'),
  }(name='CheckRecords'),
  requestId?: string(name='RequestId', example='9AABB1B7-C81F-5158-9EF9-B2DD5D3D****'),
}

model DescribeAclChecksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclChecksResponseBody(name='body'),
}

/**
 * @summary 批量查询ACL检查条目
 *
 * @param request DescribeAclChecksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclChecksResponse
 */
async function describeAclChecksWithOptions(request: DescribeAclChecksRequest, runtime: Util.RuntimeOptions): DescribeAclChecksResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclChecks',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询ACL检查条目
 *
 * @param request DescribeAclChecksRequest
 * @return DescribeAclChecksResponse
 */
async function describeAclChecks(request: DescribeAclChecksRequest): DescribeAclChecksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclChecksWithOptions(request, runtime);
}

model DescribeAclRuleCountRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='27.151.85.XX'),
}

model DescribeAclRuleCountResponseBody = {
  internetInAclCount?: int32(name='InternetInAclCount', example='2'),
  internetOutAclCount?: int32(name='InternetOutAclCount', example='3'),
  natInAclCount?: int32(name='NatInAclCount', example='0'),
  natOutAclCount?: int32(name='NatOutAclCount', example='2'),
  requestId?: string(name='RequestId', example='27936D6C-1B7A-5A5A-B9E4-FBEBBDAA****'),
  totalAclCount?: int32(name='TotalAclCount', example='8'),
  vpcAclCount?: int32(name='VpcAclCount', example='3'),
}

model DescribeAclRuleCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclRuleCountResponseBody(name='body'),
}

/**
 * @summary 获取总ACL配置数
 *
 * @param request DescribeAclRuleCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclRuleCountResponse
 */
async function describeAclRuleCountWithOptions(request: DescribeAclRuleCountRequest, runtime: Util.RuntimeOptions): DescribeAclRuleCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclRuleCount',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取总ACL配置数
 *
 * @param request DescribeAclRuleCountRequest
 * @return DescribeAclRuleCountResponse
 */
async function describeAclRuleCount(request: DescribeAclRuleCountRequest): DescribeAclRuleCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclRuleCountWithOptions(request, runtime);
}

model DescribeAclWhitelistRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='101.36.65.XX'),
}

model DescribeAclWhitelistResponseBody = {
  domainGroupUseDns?: boolean(name='DomainGroupUseDns', example='true'),
  natDomainGroupUseDns?: boolean(name='NatDomainGroupUseDns', example='false'),
  requestId?: string(name='RequestId', example='7D45133B-DBC0-506B-9DF9-AB0735D3****'),
  supportMessageType?: boolean(name='SupportMessageType', example='true'),
  vpcDomainGroupUseDns?: boolean(name='VpcDomainGroupUseDns', example='false'),
}

model DescribeAclWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAclWhitelistResponseBody(name='body'),
}

/**
 * @summary 获取ACL白名单
 *
 * @param request DescribeAclWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAclWhitelistResponse
 */
async function describeAclWhitelistWithOptions(request: DescribeAclWhitelistRequest, runtime: Util.RuntimeOptions): DescribeAclWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAclWhitelist',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取ACL白名单
 *
 * @param request DescribeAclWhitelistRequest
 * @return DescribeAclWhitelistResponse
 */
async function describeAclWhitelist(request: DescribeAclWhitelistRequest): DescribeAclWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAclWhitelistWithOptions(request, runtime);
}

model DescribeAddressBookRequest {
  containPort?: string(name='ContainPort', description='The port that is included in the address book. This parameter takes effect only when the **GroupType** parameter is set to **port**.', example='80'),
  currentPage?: string(name='CurrentPage', description='The page number.

Pages start from page 1. Default value: 1.', example='1'),
  groupType?: string(name='GroupType', description='The type of the address book. Valid values:

*   **ip**: IP address book
*   **domain**: domain address book
*   **port**: port address book
*   **tag**: Elastic Compute Service (ECS) tag-based address book
*   **allCloud**: cloud service address book
*   **threat**: threat intelligence address book
*   **ipv6**: IPv6 address book
>  If you do not specify a type, the domain address books and ECS tag-based address books are queried.', example='ip'),
  lang?: string(name='Lang', description='The language of the content within the request. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries per page.

Default value: 10. Maximum value: 50.', example='10'),
  query?: string(name='Query', description='The query condition that is used to search for the address book.', example='192.0.XX.XX'),
}

model DescribeAddressBookResponseBody = {
  acls?: [ 
    {
      ackClusterConnectorId?: string(name='AckClusterConnectorId', example='ac-7c1bad6c3cc84c33baab1'),
      ackClusterConnectorName?: string(name='AckClusterConnectorName', example='ACK集群连接器'),
      ackLabels?: [ 
        {
          key?: string(name='Key', example='app'),
          value?: string(name='Value', example='storage-operator'),
        }
      ](name='AckLabels'),
      ackNamespaces?: [ string ](name='AckNamespaces'),
      addressList?: [ string ](name='AddressList', description='The addresses in the address book.'),
      addressListCount?: int32(name='AddressListCount', description='The number of addresses in the address book.', example='2'),
      addresses?: [ 
        {
          address?: string(name='Address', description='Address information in the address book.', example='192.168.0.1/32'),
          note?: string(name='Note', description='Single address description.', example='description'),
        }
      ](name='Addresses', description='A list of addresses in the address book, each with a single address description.'),
      autoAddTagEcs?: int32(name='AutoAddTagEcs', description='Indicates whether the public IP addresses of ECS instances are automatically added to the address book if the instances match the specified tags. The setting takes effect on both newly purchased ECS instances whose tag settings are complete and ECS instances whose tag settings are modified. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
      description?: string(name='Description', description='The description of the address book.', example='my address book'),
      groupName?: string(name='GroupName', description='The name of the address book.', example='demo_address_book'),
      groupType?: string(name='GroupType', description='The type of the address book. Valid values:

*   **ip**: IP address book
*   **domain**: domain address book
*   **port**: port address book
*   **tag**: ECS tag-based address book
*   **allCloud**: cloud service address book
*   **threat**: threat intelligence address book', example='ip'),
      groupUuid?: string(name='GroupUuid', description='The UUID of the address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
      referenceCount?: int32(name='ReferenceCount', description='The number of times that the address book is referenced.', example='3'),
      regionNo?: string(name='RegionNo', example='cn-beijing'),
      tagList?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the ECS tag.', example='company'),
          tagValue?: string(name='TagValue', description='The value of the ECS tag.', example='admin'),
        }
      ](name='TagList', description='The details about the ECS tags that can be automatically added to the address book.'),
      tagRelation?: string(name='TagRelation', description='The logical relationship among ECS tags. Valid values:

*   **and**: Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book.
*   **or**: The public IP addresses of ECS instances that match any of the specified tags can be added to the address book.', example='and'),
    }
  ](name='Acls', description='The information about the address book.'),
  pageNo?: string(name='PageNo', description='The page number.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID.', example='B36F150A-1E27-43AA-B72C-D2AC712F09DA'),
  totalCount?: string(name='TotalCount', description='The total number of the returned address books.', example='100'),
}

model DescribeAddressBookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAddressBookResponseBody(name='body'),
}

/**
 * @summary Queries the details about an address book for an access control policy.
 *
 * @description You can call this operation to query the details about an address book for an access control policy.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeAddressBookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAddressBookResponse
 */
async function describeAddressBookWithOptions(request: DescribeAddressBookRequest, runtime: Util.RuntimeOptions): DescribeAddressBookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.containPort)) {
    query['ContainPort'] = request.containPort;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.groupType)) {
    query['GroupType'] = request.groupType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.query)) {
    query['Query'] = request.query;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAddressBook',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about an address book for an access control policy.
 *
 * @description You can call this operation to query the details about an address book for an access control policy.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeAddressBookRequest
 * @return DescribeAddressBookResponse
 */
async function describeAddressBook(request: DescribeAddressBookRequest): DescribeAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAddressBookWithOptions(request, runtime);
}

model DescribeAssetListRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Valid values: 1 to 50.

This parameter is required.', example='1'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='4'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: long(name='MemberUid', description='The UID of the member that is added to Cloud Firewall.', example='258039427902****'),
  newResourceTag?: string(name='NewResourceTag', description='The time when the asset was added. Valid values:

*   **discovered in 1 hour**: within one hour.
*   **discovered in 1 day**: within one day.
*   **discovered in 7 days**: within seven days.', example='discovered in 1 hour'),
  outStatistic?: string(name='OutStatistic', description='Whether to query external traffic information.', example='true'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Valid values: 1 to 50.

This parameter is required.', example='10'),
  regionNo?: string(name='RegionNo', description='The region ID of your Cloud Firewall.

> For more information about the regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-hangzhou'),
  resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **BastionHostEgressIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance or a Classic Load Balancer (CLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance or a CLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EIP'),
  searchItem?: string(name='SearchItem', description='The instance ID or IP address of the asset.', example='192.0.XX.XX'),
  sensitiveStatus?: string(name='SensitiveStatus', description='Data leakage detection activation status.', example='open'),
  sgStatus?: string(name='SgStatus', description='The status of the security group policy. Valid values:

*   **pass**: delivered
*   **block**: undelivered
*   **unsupport**: unsupported

> If you do not specify this parameter, the assets on which security group policies in all states take effect are queried.', example='pass'),
  status?: string(name='Status', description='The status of the firewall. Valid values:

*   **open**: The firewall is enabled.
*   **opening**: The firewall is being enabled.
*   **closed**: The firewall is disabled.
*   **closing**: The firewall is being disabled.

> If you do not specify this parameter, the assets that are configured for firewalls in all states are queried.', example='open'),
  type?: string(name='Type', description='This parameter is deprecated.', example='eip'),
  userType?: string(name='UserType', description='The edition of Cloud Firewall. Valid values:

*   **buy**: a paid edition (default)
*   **free**: Free Edition', example='buy'),
}

model DescribeAssetListResponseBody = {
  assets?: [ 
    {
      aliUid?: long(name='AliUid', description='The UID of the Alibaba Cloud account.

>  The value of this parameter indicates the management account to which the member is added.', example='158039427902****'),
      bindInstanceId?: string(name='BindInstanceId', description='The ID of the cloud resource with which the asset is associated.', example='i-8vbdrjrxzt78****'),
      bindInstanceName?: string(name='BindInstanceName', description='The instance name of the asset.', example='instance01'),
      createTimeStamp?: string(name='CreateTimeStamp', description='The timestamp when the asset is added to Cloud Firewall.', example='2023-02-28 10:29:58'),
      internetAddress?: string(name='InternetAddress', description='The public IP address of the server.', example='192.0.XX.XX'),
      intranetAddress?: string(name='IntranetAddress', description='The internal IP address of the server.', example='192.168.XX.XX'),
      ipVersion?: int32(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='4'),
      last7DayOutTrafficBytes?: long(name='Last7DayOutTrafficBytes', description='Outbound traffic in the last 7 days.', example='0'),
      memberUid?: long(name='MemberUid', description='The UID of the member.', example='258039427902****'),
      name?: string(name='Name', description='The instance name of the asset that is protected by Cloud Firewall.', example='instance01'),
      newResourceTag?: string(name='NewResourceTag', description='The time when the asset was added. Valid values:

*   **discovered in 1 hour**: within one hour.
*   **discovered in 1 day**: within one day.
*   **discovered in 7 days**: within seven days.', example='discovered in 1 hour'),
      note?: string(name='Note', description='The remarks of the asset. Valid values:

*   **REGION_NOT_SUPPORT**: The region is not supported.
*   **NETWORK_NOT_SUPPORT**: The network is not supported.', example='REGION_NOT_SUPPORT'),
      protectStatus?: string(name='ProtectStatus', description='The status of the firewall. Valid values:

*   **open**: enabled.
*   **opening**: being enabled.
*   **closed**: disabled.
*   **closing**: being disabled.', example='open'),
      regionID?: string(name='RegionID', description='The ID of the region in which the asset resides.', example='cn-hangzhou'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether the firewall is supported in the region in which the asset resides. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resourceInstanceId?: string(name='ResourceInstanceId', description='The instance ID of the asset.', example='i-8vbdrjrxzt78****'),
      resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **BastionHostEgressIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EIP'),
      riskLevel?: string(name='RiskLevel', description='The risk level of the asset. Valid values:

*   **low**: low
*   **middle**: medium
*   **hight**: high

>  The value of this parameter is returned only when the UserType parameter is set to free.', example='low'),
      sensitiveDataStatus?: string(name='SensitiveDataStatus', description='Data leakage detection enabled status.', example='open'),
      sgStatus?: string(name='SgStatus', description='The status of the security group policy. Valid values:

*   **pass**: applied
*   **block**: not applied
*   **unsupport**: unsupported', example='block'),
      sgStatusTime?: long(name='SgStatusTime', description='The time when the status of the security group was last checked. The value is a UNIX timestamp. Unit: seconds.', example='1615082937'),
      syncStatus?: string(name='SyncStatus', description='Indicates whether traffic redirection is supported for the asset. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      type?: string(name='Type', description='This parameter is deprecated.', example='eip'),
    }
  ](name='Assets', description='The assets that are protected by Cloud Firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: int32(name='TotalCount', description='The total number of the assets that are protected by Cloud Firewall.', example='12'),
}

model DescribeAssetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAssetListResponseBody(name='body'),
}

/**
 * @summary Queries the assets that are protected by Cloud Firewall.
 *
 * @description You can call the DescribeAssetList operation to query the assets that are protected by Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeAssetListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAssetListResponse
 */
async function describeAssetListWithOptions(request: DescribeAssetListRequest, runtime: Util.RuntimeOptions): DescribeAssetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.newResourceTag)) {
    query['NewResourceTag'] = request.newResourceTag;
  }
  if (!Util.isUnset(request.outStatistic)) {
    query['OutStatistic'] = request.outStatistic;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  if (!Util.isUnset(request.sensitiveStatus)) {
    query['SensitiveStatus'] = request.sensitiveStatus;
  }
  if (!Util.isUnset(request.sgStatus)) {
    query['SgStatus'] = request.sgStatus;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the assets that are protected by Cloud Firewall.
 *
 * @description You can call the DescribeAssetList operation to query the assets that are protected by Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeAssetListRequest
 * @return DescribeAssetListResponse
 */
async function describeAssetList(request: DescribeAssetListRequest): DescribeAssetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetListWithOptions(request, runtime);
}

model DescribeAssetRiskListRequest {
  ipAddrList?: [ string ](name='IpAddrList', description='The IP addresses to query. Separate the IP addresses with commas (,). You can specify up to 20 IP addresses at a time.

> 

*   Example IPv4 address: 47.97.XX.XX.

*   Example IPv6 address: 2001:db8:ffff:ffff:ffff:XXXX:ffff.'),
  ipVersion?: int32(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4** (default): IPv4
*   **6**: IPv6

This parameter is required.', example='4'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='47.100.XX.XX'),
}

model DescribeAssetRiskListResponseBody = {
  assetList?: [ 
    {
      ip?: string(name='Ip', description='The IP address of the server.', example='39.108.XX.XX'),
      ipVersion?: long(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='4'),
      reason?: string(name='Reason', description='The reason for the risk.', example='other'),
      riskLevel?: string(name='RiskLevel', description='The risk level. Valid values:

*   **low**
*   **middle**
*   **high**', example='low'),
    }
  ](name='AssetList', description='The details of the assets.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='443C5781-1C03-5FCD-8EC5-FB9C0B9AC396'),
  totalCount?: long(name='TotalCount', description='The total number of entries returned.', example='12'),
}

model DescribeAssetRiskListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAssetRiskListResponseBody(name='body'),
}

/**
 * @summary Queries the risk levels of assets.
 *
 * @param request DescribeAssetRiskListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAssetRiskListResponse
 */
async function describeAssetRiskListWithOptions(request: DescribeAssetRiskListRequest, runtime: Util.RuntimeOptions): DescribeAssetRiskListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipAddrList)) {
    query['IpAddrList'] = request.ipAddrList;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetRiskList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the risk levels of assets.
 *
 * @param request DescribeAssetRiskListRequest
 * @return DescribeAssetRiskListResponse
 */
async function describeAssetRiskList(request: DescribeAssetRiskListRequest): DescribeAssetRiskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetRiskListWithOptions(request, runtime);
}

model DescribeAssetStatisticRequest {
  lang?: string(name='Lang', description='The language of the content within the request. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='112.239.XX.XX'),
}

model DescribeAssetStatisticResponseBody = {
  generalInstanceSpecStatistic?: {
    cfwGeneralInstanceRegionStatistic?: [ 
      {
        memberList?: [ string ](name='MemberList'),
        regionNo?: string(name='RegionNo', example='cn-hangzhou'),
      }
    ](name='CfwGeneralInstanceRegionStatistic'),
    totalCfwGeneralInstanceCnt?: int32(name='TotalCfwGeneralInstanceCnt', example='1'),
    totalCfwGeneralInstanceUsedCnt?: int32(name='TotalCfwGeneralInstanceUsedCnt', example='1'),
    totalGeneralInstanceUsedCnt?: int32(name='TotalGeneralInstanceUsedCnt', example='1'),
    totalNatGeneralInstanceCnt?: int32(name='TotalNatGeneralInstanceCnt', example='1'),
    totalNatGeneralInstanceUsedCnt?: int32(name='TotalNatGeneralInstanceUsedCnt', example='1'),
    totalVfwGeneralInstanceUsedCnt?: int32(name='TotalVfwGeneralInstanceUsedCnt', example='1'),
  }(name='GeneralInstanceSpecStatistic'),
  requestId?: string(name='RequestId', description='The request ID.', example='850A84******25g4d2'),
  resourceSpecStatistic?: {
    ipNumSpec?: int32(name='IpNumSpec', description='The number of public IP addresses that can be protected.', example='20'),
    ipNumUsed?: int32(name='IpNumUsed', description='The number of public IP addresses that are protected.', example='10'),
    sensitiveDataIpNumSpec?: long(name='SensitiveDataIpNumSpec', description='The number of public IP addresses that can enable data leakage detection.', example='0'),
    sensitiveDataIpNumUsed?: long(name='SensitiveDataIpNumUsed', description='The number of public IP addresses that enabled data leakage detection.', example='0'),
  }(name='ResourceSpecStatistic', description='The statistics on specifications.'),
}

model DescribeAssetStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAssetStatisticResponseBody(name='body'),
}

/**
 * @summary Queries statistics on the assets that are protected by Cloud Firewall.
 *
 * @param request DescribeAssetStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAssetStatisticResponse
 */
async function describeAssetStatisticWithOptions(request: DescribeAssetStatisticRequest, runtime: Util.RuntimeOptions): DescribeAssetStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAssetStatistic',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries statistics on the assets that are protected by Cloud Firewall.
 *
 * @param request DescribeAssetStatisticRequest
 * @return DescribeAssetStatisticResponse
 */
async function describeAssetStatistic(request: DescribeAssetStatisticRequest): DescribeAssetStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAssetStatisticWithOptions(request, runtime);
}

model DescribeCfwRiskLevelSummaryRequest {
  instanceType?: string(name='InstanceType', description='The instance type.', example='EcsEIP'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  regionId?: string(name='RegionId', description='The region ID of your Cloud Firewall.

>  For more information about Cloud Firewall supported regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-shanghai'),
}

model DescribeCfwRiskLevelSummaryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1F30435-FA0A-52DA-A5DE-C16FD6C171DA'),
  riskList?: [ 
    {
      level?: string(name='Level', description='The risk levels. Valid values:

*   **medium**', example='medium'),
      num?: string(name='Num', description='The number of at-risk Elastic Compute Service (ECS) instances.', example='50'),
      type?: string(name='Type', description='The type.', example='ResourceNotProtected'),
    }
  ](name='RiskList', description='The list of risks.'),
}

model DescribeCfwRiskLevelSummaryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCfwRiskLevelSummaryResponseBody(name='body'),
}

/**
 * @summary Queries the firewall risk level.
 *
 * @param request DescribeCfwRiskLevelSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCfwRiskLevelSummaryResponse
 */
async function describeCfwRiskLevelSummaryWithOptions(request: DescribeCfwRiskLevelSummaryRequest, runtime: Util.RuntimeOptions): DescribeCfwRiskLevelSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCfwRiskLevelSummary',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the firewall risk level.
 *
 * @param request DescribeCfwRiskLevelSummaryRequest
 * @return DescribeCfwRiskLevelSummaryResponse
 */
async function describeCfwRiskLevelSummary(request: DescribeCfwRiskLevelSummaryRequest): DescribeCfwRiskLevelSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCfwRiskLevelSummaryWithOptions(request, runtime);
}

model DescribeClearAuthInfoResponseBody = {
  endTime?: int32(name='EndTime', example='1755964800'),
  leftTimes?: int32(name='LeftTimes', example='20'),
  requestId?: string(name='RequestId', example='8DDEE254-5639-5548-82D1-AAAC7347****'),
}

model DescribeClearAuthInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClearAuthInfoResponseBody(name='body'),
}

/**
 * @summary 获取清空授权信息
 *
 * @param request DescribeClearAuthInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeClearAuthInfoResponse
 */
async function describeClearAuthInfoWithOptions(runtime: Util.RuntimeOptions): DescribeClearAuthInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeClearAuthInfo',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取清空授权信息
 *
 * @return DescribeClearAuthInfoResponse
 */
async function describeClearAuthInfo(): DescribeClearAuthInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClearAuthInfoWithOptions(runtime);
}

model DescribeControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.

>  If you do not specify this parameter, access control policies of all action types are queried.', example='accept'),
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.

This parameter is required.', example='1'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

>  If you do not specify this parameter, access control policies that have descriptions are queried.', example='test'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported. The value of this parameter varies based on the value of the DestinationType parameter.

*   If you set DestinationType to `net`, the value of Destination is a CIDR block. Example: 10.0.3.0/24.
*   If you set DestinationType to `domain`, the value of Destination is a domain name. Example: aliyun.
*   If you set DestinationType to `group`, the value of Destination is the name of an address book. Example: db_group.
*   If you set DestinationType to `location`, the value of Destination is the name of a location. For more information about location codes, see AddControlPolicy. Example: ["BJ11", "ZB"].

>  If you do not specify this parameter, access control policies of all destination address types are queried.', example='192.0.XX.XX'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policies apply. Valid values:

*   **in**: inbound.
*   **out**: outbound.', example='in'),
  ipVersion?: string(name='IpVersion', description='The IP version of the address in the access control policy. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='6'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

This parameter is required.', example='10'),
  proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

* **TCP**
* **UDP**
* **ICMP**
* **ANY**: all types of protocols

>  If you do not specify this parameter, access control policies of all protocol types are queried.', example='TCP'),
  release?: string(name='Release', description='Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**: The access control policy is enabled.
*   **false**: The access control policy is disabled.', example='true'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported. The value of this parameter depends on the value of the SourceType parameter.

*   If SourceType is set to `net`, the value of Source must be a CIDR block. Example: 192.0.XX.XX/24.
*   If SourceType is set to `group`, the value of Source must be the name of an address book. Example: db_group. If the db_group address book does not contain addresses, all source addresses are queried.
*   If SourceType is set to `location`, the value of Source must be a location. Example: beijing.

>  If you do not specify this parameter, access control policies of all source address types are queried.', example='192.0.XX.XX'),
}

model DescribeControlPolicyResponseBody = {
  pageNo?: string(name='PageNo', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='10'),
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****'),
      applicationId?: string(name='ApplicationId', description='The application ID in the access control policy.', example='10***'),
      applicationName?: string(name='ApplicationName', description='The application type supported by the access control policy. We recommend that you specify ApplicationNameList. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL**
*   **VNC**
*   **ANY**: all types of applications', example='HTTP'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.'),
      createTime?: long(name='CreateTime', description='The time when the access control policy was created.', example='1761062400'),
      description?: string(name='Description', description='The description of the access control policy.', example='test'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='The ports in the destination port address book.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. The value of this parameter varies based on the value of DestinationType.

*   If the value of **DestinationType** is **net**, the value of Destination is a CIDR block. Example: 192.0.XX.XX/24.
*   If the value of **DestinationType** is **domain**, the value of Destination is a domain name. Example: aliyuncs.com.
*   If the value of **DestinationType** is **group**, the value of Destination is the name of an address book. Example: db_group.
*   If the value of **DestinationType** is **location**, the value of Destination is the name of a location. For more information about location codes, see AddControlPolicy. Example: ["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='The CIDR blocks in the destination address book.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more IP addresses
*   **tag**: an ECS tag-based address book that includes the IP addresses of the ECS instances with one or more specific tags
*   **domain**: an address book that includes one or more domain names
*   **threat**: an address book that includes one or more malicious IP addresses or domain names
*   **backsrc**: an address book that includes one or more back-to-origin addresses of Anti-DDoS Pro or Anti-DDoS Premium instances or WAF instances', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: location', example='net'),
      direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in'),
      dnsResult?: string(name='DnsResult', description='The DNS resolution results.', example='192.0.XX.XX,192.0.XX.XX', deprecated=true),
      dnsResultTime?: long(name='DnsResultTime', description='The time when the Domain Name System (DNS) resolution was performed. The value is a timestamp. Unit: seconds.', example='1579261141'),
      domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='FQDN'),
      endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a timestamp. Unit: seconds. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If RepeatType is set to Permanent, this parameter is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694764800'),
      hitLastTime?: long(name='HitLastTime', description='The time when the access control policy was last hit. The value is a timestamp. Unit: seconds.', example='1579261141'),
      hitTimes?: long(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      ipVersion?: int32(name='IpVersion', description='The IP version used in the access control policy. Valid values:

*   **4**: IPv4
*   **6**: IPv6', example='6'),
      modifyTime?: long(name='ModifyTime', description='The time when the access control policy was modified.', example='1761062400'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1'),
      proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**', example='TCP'),
      release?: string(name='Release', description='The status of the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
      repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If RepeatType is set to `Permanent`, `None`, or `Daily`, this parameter is left empty. Example: [].
*   If RepeatType is set to Weekly, this parameter must be specified. Example: [0, 6].

>  If RepeatType is set to Weekly, the fields in the value of RepeatDays cannot be repeated.

*   If RepeatType is set to `Monthly`, this parameter must be specified. Example: [1, 31].

>  If RepeatType is set to Monthly, the fields in the value of RepeatDays cannot be repeated.'),
      repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If RepeatType is set to Permanent or None, this parameter is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='23:30'),
      repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If RepeatType is set to Permanent or None, this parameter is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='08:00'),
      repeatType?: string(name='RepeatType', description='The recurrence type based on which the access control policy takes effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of Source is a CIDR block. Example: 192.0.XX.XX/24.
*   If **SourceType** is set to `group`, the value of Source is the name of an address book. Example: db_group.
*   If **SourceType** is set to `location`, the value of Source is a location. For more information about location codes, see [AddControlPolicy](https://help.aliyun.com/document_detail/138867.html). Example: ["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='The CIDR blocks in the source address book.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more IP addresses
*   **tag**: an Elastic Compute Service (ECS) tag-based address book that includes the IP addresses of the ECS instances with one or more specific tags
*   **domain**: an address book that includes one or more domain names
*   **threat**: an address book that includes one or more malicious IP addresses or domain names
*   **backsrc**: an address book that includes one or more back-to-origin addresses of Anti-DDoS Pro or Anti-DDoS Premium instances or Web Application Firewall (WAF) instances', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location', example='net'),
      spreadCnt?: int32(name='SpreadCnt', description='The total quota consumed by the returned access control policies, which is the sum of the quota consumed by each policy. The quota that is consumed by an access control policy is calculated by using the following formula: Quota that is consumed by an access control policy = Number of source addresses (number of CIDR blocks or regions) × Number of destination addresses (number of CIDR blocks, regions, or domain names) × Number of port ranges × Number of applications.', example='10,000'),
      startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a timestamp. Unit: seconds. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If RepeatType is set to Permanent, this parameter is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694761200'),
    }
  ](name='Policys', description='The information about the access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2****'),
  totalCount?: string(name='TotalCount', description='The total number of the returned access control policies.', example='100'),
}

model DescribeControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeControlPolicyResponseBody(name='body'),
}

/**
 * @summary Queries the details about all access control policies.
 *
 * @description You can call the DescribeControlPolicy operation to query the details about access control policies by page.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeControlPolicyResponse
 */
async function describeControlPolicyWithOptions(request: DescribeControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about all access control policies.
 *
 * @description You can call the DescribeControlPolicy operation to query the details about access control policies by page.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeControlPolicyRequest
 * @return DescribeControlPolicyResponse
 */
async function describeControlPolicy(request: DescribeControlPolicyRequest): DescribeControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeControlPolicyWithOptions(request, runtime);
}

model DescribeCtrlInstanceMemberAccountsResponseBody = {
  instanceMemberCount?: long(name='InstanceMemberCount', example='3'),
  maxInstanceMemberNum?: long(name='MaxInstanceMemberNum', example='1000'),
  requestId?: string(name='RequestId', example='9CC69FDA-69F6-585B-9262-A306F425****'),
}

model DescribeCtrlInstanceMemberAccountsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCtrlInstanceMemberAccountsResponseBody(name='body'),
}

/**
 * @summary 获取成员账号列表
 *
 * @param request DescribeCtrlInstanceMemberAccountsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCtrlInstanceMemberAccountsResponse
 */
async function describeCtrlInstanceMemberAccountsWithOptions(runtime: Util.RuntimeOptions): DescribeCtrlInstanceMemberAccountsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCtrlInstanceMemberAccounts',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取成员账号列表
 *
 * @return DescribeCtrlInstanceMemberAccountsResponse
 */
async function describeCtrlInstanceMemberAccounts(): DescribeCtrlInstanceMemberAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCtrlInstanceMemberAccountsWithOptions(runtime);
}

model DescribeDefaultIPSConfigRequest {
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
}

model DescribeDefaultIPSConfigResponseBody = {
  basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
  ctiRules?: int32(name='CtiRules', description='Indicates whether threat intelligence is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
  maxSdl?: long(name='MaxSdl', description='The maximum amount of traffic that can be processed by the sensitive data leak detection feature each day.', example='10'),
  patchRules?: int32(name='PatchRules', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
  requestId?: string(name='RequestId', description='The request ID.', example='133173B9-8010-5DF5-8B93-********'),
  ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose
*   **2**: medium
*   **3**: strict', example='3'),
  runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
}

model DescribeDefaultIPSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDefaultIPSConfigResponseBody(name='body'),
}

/**
 * @summary Queries the default intrusion prevention system (IPS) configurations.
 *
 * @param request DescribeDefaultIPSConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDefaultIPSConfigResponse
 */
async function describeDefaultIPSConfigWithOptions(request: DescribeDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): DescribeDefaultIPSConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefaultIPSConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the default intrusion prevention system (IPS) configurations.
 *
 * @param request DescribeDefaultIPSConfigRequest
 * @return DescribeDefaultIPSConfigResponse
 */
async function describeDefaultIPSConfig(request: DescribeDefaultIPSConfigRequest): DescribeDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefaultIPSConfigWithOptions(request, runtime);
}

model DescribeDnsFirewallPolicyRequest {
  aclAction?: string(name='AclAction', example='accept'),
  aclUuid?: string(name='AclUuid', example='b6c8f905-2eb6-442a-ba35-9416e****'),
  currentPage?: string(name='CurrentPage', description='This parameter is required.', example='1'),
  description?: string(name='Description', example='test'),
  destination?: string(name='Destination', example='10.2.XX.XX/24'),
  ipVersion?: string(name='IpVersion', example='4'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: string(name='PageSize', description='This parameter is required.', example='10'),
  release?: string(name='Release', example='true'),
  source?: string(name='Source', example='192.0.XX.XX/24'),
  sourceIp?: string(name='SourceIp', example='140.205.118.XXX'),
}

model DescribeDnsFirewallPolicyResponseBody = {
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  policys?: [ 
    {
      aclAction?: string(name='AclAction', example='accept'),
      aclUuid?: string(name='AclUuid', example='01281255-d220-4db1-8f4f-c4df221a****'),
      description?: string(name='Description', example='test'),
      destination?: string(name='Destination', example='x.x.x.x/32'),
      destinationAddrs?: [ string ](name='DestinationAddrs'),
      destinationGroupType?: string(name='DestinationGroupType', example='ip'),
      destinationType?: string(name='DestinationType', example='net'),
      direction?: string(name='Direction', example='in'),
      hitLastTime?: long(name='HitLastTime', example='1579261141'),
      hitTimes?: long(name='HitTimes', example='100'),
      ipVersion?: int32(name='IpVersion', example='6'),
      priority?: int32(name='Priority', example='110'),
      release?: string(name='Release', example='true'),
      source?: string(name='Source', example='192.0.XX.XX/24'),
      sourceAddrs?: [ string ](name='SourceAddrs'),
      sourceGroupType?: string(name='SourceGroupType', example='ip'),
      sourceType?: string(name='SourceType', example='net'),
    }
  ](name='Policys'),
  requestId?: string(name='RequestId', example='0A4ACDE9-9F9F-56C1-B3B7-60971BA1****'),
  totalCount?: string(name='TotalCount', example='10'),
}

model DescribeDnsFirewallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDnsFirewallPolicyResponseBody(name='body'),
}

/**
 * @summary 获取DNS防火墙ACL列表
 *
 * @param request DescribeDnsFirewallPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDnsFirewallPolicyResponse
 */
async function describeDnsFirewallPolicyWithOptions(request: DescribeDnsFirewallPolicyRequest, runtime: Util.RuntimeOptions): DescribeDnsFirewallPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDnsFirewallPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取DNS防火墙ACL列表
 *
 * @param request DescribeDnsFirewallPolicyRequest
 * @return DescribeDnsFirewallPolicyResponse
 */
async function describeDnsFirewallPolicy(request: DescribeDnsFirewallPolicyRequest): DescribeDnsFirewallPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsFirewallPolicyWithOptions(request, runtime);
}

model DescribeDomainResolveRequest {
  domain?: string(name='Domain', description='The domain name whose DNS record you want to query.

This parameter is required.', example='www.aliyundoc.com'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall. Valid values:

*   **4**: IPv4 (default)
*   **6**: IPv6', example='6'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model DescribeDomainResolveResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  resolveResult?: {
    ipAddrs?: string(name='IpAddrs', description='The IP address to which the domain name is resolved. Multiple IP addresses are separated by commas (,).', example='11.1.X.X,12.1.X.X'),
    updateTime?: long(name='UpdateTime', description='The time when the domain name was resolved. The value of this parameter is a timestamp. Unit: seconds.', example='1579091739'),
  }(name='ResolveResult', description='The details about the DNS record of the domain name.'),
}

model DescribeDomainResolveResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDomainResolveResponseBody(name='body'),
}

/**
 * @deprecated OpenAPI DescribeDomainResolve is deprecated
 *
 * @summary Queries Domain Name System (DNS) records.
 *
 * @description You can use this operation to query the DNS record of a domain name. This operation can retrieve DNS records only from Alibaba Cloud DNS. Before you can call this operation, make sure that your domain name is hosted on Alibaba Cloud DNS.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeDomainResolveRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDomainResolveResponse
 */
// Deprecated
async function describeDomainResolveWithOptions(request: DescribeDomainResolveRequest, runtime: Util.RuntimeOptions): DescribeDomainResolveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainResolve',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @deprecated OpenAPI DescribeDomainResolve is deprecated
 *
 * @summary Queries Domain Name System (DNS) records.
 *
 * @description You can use this operation to query the DNS record of a domain name. This operation can retrieve DNS records only from Alibaba Cloud DNS. Before you can call this operation, make sure that your domain name is hosted on Alibaba Cloud DNS.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeDomainResolveRequest
 * @return DescribeDomainResolveResponse
 */
// Deprecated
async function describeDomainResolve(request: DescribeDomainResolveRequest): DescribeDomainResolveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainResolveWithOptions(request, runtime);
}

model DescribeDownloadTaskRequest {
  currentPage?: string(name='CurrentPage', description='The page number.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10'),
  taskType?: string(name='TaskType', description='The type of the task. For more information about task types, see the descriptions in the "DescribeDownloadTaskType" topic. If you do not specify this parameter, all files are queried by default.', example='InternetFirewallAsset'),
}

model DescribeDownloadTaskResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3F2BED13-F3D0-5984-80D6-D5F298CFEA88'),
  tasks?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the task was created. The value is a UNIX timestamp. Unit: seconds.', example='1706595827'),
      expireTime?: long(name='ExpireTime', description='The time when the task expires. The value is a UNIX timestamp. Unit: seconds.', example='1714371828'),
      fileSize?: string(name='FileSize', description='The size of the file.', example='24.04KB'),
      fileURL?: string(name='FileURL', description='The URL of the OSS file.', example='https://cfw-table-download-cn.oss-cn-hangzhou.aliyuncs.com/%E4%BA%92%E8%81%94%E7%BD%91%E8%BE%B9%E7%95%8C%E9%98%B2%E7%81%AB%E5%A2%99%E8%B5%84%E4%BA%A7-IPv4_1069.csv?Expires=1708583913&OSSAccessKeyId=****&Signature=******%3D'),
      status?: string(name='Status', description='The status of the task. Valid values:

*   **finish**
*   **start**
*   **error**
*   **expire**: The task file is invalid and cannot be downloaded.', example='finish'),
      taskId?: string(name='TaskId', description='The task ID.', example='1111'),
      taskName?: string(name='TaskName', description='The name of the task.', example='Internet Boundary Firewall Assets - IPv4'),
      taskType?: string(name='TaskType', description='The type of the task.', example='InternetFirewallAsset'),
    }
  ](name='Tasks', description='The tasks.'),
  totalCount?: int32(name='TotalCount', description='The total number of tasks.', example='132'),
}

model DescribeDownloadTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadTaskResponseBody(name='body'),
}

/**
 * @summary Queries file download tasks, including the task information and download URLs.
 *
 * @param request DescribeDownloadTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDownloadTaskResponse
 */
async function describeDownloadTaskWithOptions(request: DescribeDownloadTaskRequest, runtime: Util.RuntimeOptions): DescribeDownloadTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries file download tasks, including the task information and download URLs.
 *
 * @param request DescribeDownloadTaskRequest
 * @return DescribeDownloadTaskResponse
 */
async function describeDownloadTask(request: DescribeDownloadTaskRequest): DescribeDownloadTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadTaskWithOptions(request, runtime);
}

model DescribeDownloadTaskTypeRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Pages start from page 1. Default value: **1**.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10'),
  taskType?: string(name='TaskType', description='The type of the task.', example='InternetFirewallAsset'),
}

model DescribeDownloadTaskTypeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B835494C-D093-5524-BBDE-BD272077B40E'),
  taskTypeArray?: [ 
    {
      taskName?: string(name='TaskName', description='The name of the task type.', example='Internet Boundary Firewall Assets'),
      taskType?: string(name='TaskType', description='The type of the task.', example='InternetFirewallAsset'),
    }
  ](name='TaskTypeArray', description='The task types.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='3'),
}

model DescribeDownloadTaskTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDownloadTaskTypeResponseBody(name='body'),
}

/**
 * @summary Queries the types of download tasks. The type corresponds to the TaskType fields in the download task-related operations.
 *
 * @param request DescribeDownloadTaskTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDownloadTaskTypeResponse
 */
async function describeDownloadTaskTypeWithOptions(request: DescribeDownloadTaskTypeRequest, runtime: Util.RuntimeOptions): DescribeDownloadTaskTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDownloadTaskType',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the types of download tasks. The type corresponds to the TaskType fields in the download task-related operations.
 *
 * @param request DescribeDownloadTaskTypeRequest
 * @return DescribeDownloadTaskTypeResponse
 */
async function describeDownloadTaskType(request: DescribeDownloadTaskTypeRequest): DescribeDownloadTaskTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDownloadTaskTypeWithOptions(request, runtime);
}

model DescribeFirewallDropStatisticsResponseBody = {
  aclDropCnt?: long(name='AclDropCnt', example='20'),
  ipsDropCnt?: long(name='IpsDropCnt', example='20'),
  requestId?: string(name='RequestId', example='BEA1D173-D5DB-582E-9637-438D5CE3****'),
  totalDropCnt?: long(name='TotalDropCnt', example='50'),
  vulnDropCnt?: long(name='VulnDropCnt', example='10'),
}

model DescribeFirewallDropStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFirewallDropStatisticsResponseBody(name='body'),
}

/**
 * @summary 获取防火墙DROP数据统计
 *
 * @param request DescribeFirewallDropStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFirewallDropStatisticsResponse
 */
async function describeFirewallDropStatisticsWithOptions(runtime: Util.RuntimeOptions): DescribeFirewallDropStatisticsResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeFirewallDropStatistics',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取防火墙DROP数据统计
 *
 * @return DescribeFirewallDropStatisticsResponse
 */
async function describeFirewallDropStatistics(): DescribeFirewallDropStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFirewallDropStatisticsWithOptions(runtime);
}

model DescribeFirewallTaskRequest {
  childInstanceId?: string(name='ChildInstanceId', example='vfw-tr-cd6000c588214403****'),
  lang?: string(name='Lang', example='zh'),
  taskId?: string(name='TaskId', example='199431783'),
  taskType?: string(name='TaskType', example='VPC'),
}

model DescribeFirewallTaskResponseBody = {
  isFound?: boolean(name='IsFound', example='false'),
  requestId?: string(name='RequestId', example='7D5483BF-2262-586D-8706-BDDB8B42****'),
  taskFinishTimestamp?: string(name='TaskFinishTimestamp', example='17151381075'),
  taskId?: long(name='TaskId', example='189997648'),
  taskName?: string(name='TaskName', example='egressgw'),
  taskStartTimestamp?: string(name='TaskStartTimestamp', example='17151361285'),
  taskStatus?: string(name='TaskStatus', example='init'),
  taskSteps?: [ 
    {
      stepInfo?: string(name='StepInfo', example='abcd'),
      stepName?: string(name='StepName', example='Create Firewall'),
      stepProgress?: string(name='StepProgress', example='80'),
      stepStatus?: string(name='StepStatus', example='init'),
    }
  ](name='TaskSteps'),
  taskWaitingTime?: string(name='TaskWaitingTime', example='30'),
}

model DescribeFirewallTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFirewallTaskResponseBody(name='body'),
}

/**
 * @summary 获取防火墙任务
 *
 * @param request DescribeFirewallTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFirewallTaskResponse
 */
async function describeFirewallTaskWithOptions(request: DescribeFirewallTaskRequest, runtime: Util.RuntimeOptions): DescribeFirewallTaskResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childInstanceId)) {
    query['ChildInstanceId'] = request.childInstanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.taskType)) {
    query['TaskType'] = request.taskType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFirewallTask',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取防火墙任务
 *
 * @param request DescribeFirewallTaskRequest
 * @return DescribeFirewallTaskResponse
 */
async function describeFirewallTask(request: DescribeFirewallTaskRequest): DescribeFirewallTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFirewallTaskWithOptions(request, runtime);
}

model DescribeFirewallVSwitchRequest {
  firewallId?: string(name='FirewallId', example='vfw-tr-5b202e7f0be64611****'),
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='102910763545****'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  regionNo?: string(name='RegionNo', example='cn-beijing'),
  vpcId?: string(name='VpcId', example='vpc-uf6b5lyul0x******'),
  vswitchId?: string(name='VswitchId', example='vsw-bp1sqg9w******'),
}

model DescribeFirewallVSwitchResponseBody = {
  requestId?: string(name='RequestId', example='A1562A68-99FA-5D6B-BD5B-2F959F25****'),
  totalCount?: int32(name='TotalCount', example='20'),
  vswitchList?: [ 
    {
      availableIpCount?: string(name='AvailableIpCount', example='10'),
      cidrBlock?: string(name='CidrBlock', example='192.168.0.XX/16'),
      firewallCount?: string(name='FirewallCount', example='10'),
      firewallList?: [ 
        {
          firewallId?: string(name='FirewallId', example='vfw-tr-37145c8f5ede45e9****'),
          firewallName?: string(name='FirewallName', example='test-Firewall'),
        }
      ](name='FirewallList'),
      memberUid?: string(name='MemberUid', example='184480249330****'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
      vpcId?: string(name='VpcId', example='vpc-2zeez7gymz5r4pi****am'),
      vswitchId?: string(name='VswitchId', example='vsw-bp10qla9mgi42eo****'),
      vswitchName?: string(name='VswitchName', example='vsw-test'),
      zoneId?: string(name='ZoneId', example='cn-shanghai-b'),
    }
  ](name='VswitchList'),
}

model DescribeFirewallVSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeFirewallVSwitchResponseBody(name='body'),
}

/**
 * @summary 获取防火墙创建的交换机
 *
 * @param request DescribeFirewallVSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeFirewallVSwitchResponse
 */
async function describeFirewallVSwitchWithOptions(request: DescribeFirewallVSwitchRequest, runtime: Util.RuntimeOptions): DescribeFirewallVSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vswitchId)) {
    query['VswitchId'] = request.vswitchId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFirewallVSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取防火墙创建的交换机
 *
 * @param request DescribeFirewallVSwitchRequest
 * @return DescribeFirewallVSwitchResponse
 */
async function describeFirewallVSwitch(request: DescribeFirewallVSwitchRequest): DescribeFirewallVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFirewallVSwitchWithOptions(request, runtime);
}

model DescribeInstanceMembersRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Default value: **1**.', example='1'),
  memberDesc?: string(name='MemberDesc', description='The remarks of the member. The remarks must be 1 to 256 characters in length.', example='renewal'),
  memberDisplayName?: string(name='MemberDisplayName', description='The name of the member.', example='cloudfirewall_2'),
  memberUid?: string(name='MemberUid', description='The UID of the member.', example='258039427902****'),
  pageSize?: string(name='PageSize', description='The number of entries per page.

Default value: **20**.', example='20'),
}

model DescribeInstanceMembersResponseBody = {
  members?: [ 
    {
      createTime?: int32(name='CreateTime', description='The time when the member was added to Cloud Firewall. The value is a timestamp. Unit: seconds.', example='1615189819'),
      memberDesc?: string(name='MemberDesc', description='The remarks of the member.', example='renewal'),
      memberDisplayName?: string(name='MemberDisplayName', description='The name of the member.', example='cloudfirewall_2'),
      memberStatus?: string(name='MemberStatus', description='The status of the member. Valid values:

*   **normal**
*   **deleting**', example='normal'),
      memberUid?: long(name='MemberUid', description='The UID of the member.', example='258039427902****'),
      modifyTime?: int32(name='ModifyTime', description='The time when the member was last modified. The value is a timestamp. Unit: seconds.', example='1615189819'),
    }
  ](name='Members', description='The information about the member.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of the members.', example='20'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='A531AE1A-FBA2-48B6-BAB8-84D02BD409EE'),
}

model DescribeInstanceMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceMembersResponseBody(name='body'),
}

/**
 * @summary Queries the information about members in Cloud Firewall.
 *
 * @description You can use this operation to query the information about members in Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeInstanceMembersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceMembersResponse
 */
async function describeInstanceMembersWithOptions(request: DescribeInstanceMembersRequest, runtime: Util.RuntimeOptions): DescribeInstanceMembersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.memberDesc)) {
    query['MemberDesc'] = request.memberDesc;
  }
  if (!Util.isUnset(request.memberDisplayName)) {
    query['MemberDisplayName'] = request.memberDisplayName;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceMembers',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about members in Cloud Firewall.
 *
 * @description You can use this operation to query the information about members in Cloud Firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeInstanceMembersRequest
 * @return DescribeInstanceMembersResponse
 */
async function describeInstanceMembers(request: DescribeInstanceMembersRequest): DescribeInstanceMembersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMembersWithOptions(request, runtime);
}

model DescribeInstanceRiskLevelsRequest {
  instances?: [ 
    {
      instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='vipcloudfw-cn-7mz2fj8nm0u'),
      internetIp?: [ string ](name='InternetIp', description='The public IP addresses of instances.'),
      intranetIp?: string(name='IntranetIp', description='The private IP address of the instance.', example='172.17.XX.XX'),
      uuid?: string(name='Uuid', description='The UUID of the instance.', example='181ad081-e4f2-4e3e-b925-03b67f648397'),
    }
  ](name='Instances', description='The information about the instances.'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='en'),
}

model DescribeInstanceRiskLevelsResponseBody = {
  instanceRisks?: [ 
    {
      details?: [ 
        {
          ip?: string(name='Ip', description='The IP addresses of servers.', example='203.107.XX.XX'),
          level?: string(name='Level', description='The risk levels. Valid values:

*   **medium**', example='medium'),
          type?: string(name='Type', description='The type.', example='ResourceNotProtected'),
        }
      ](name='Details', description='The risk levels of the Elastic Compute Service (ECS) instance.'),
      instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='vipcloudfw-cn-7mz2fj8nm0u'),
      level?: string(name='Level', description='The risk levels. Valid values:

*   **medium**', example='medium'),
    }
  ](name='InstanceRisks', description='The information about the instances.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9AABB1B7-C81F-5158-9EF9-B2DD5D3DA014'),
}

model DescribeInstanceRiskLevelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInstanceRiskLevelsResponseBody(name='body'),
}

/**
 * @summary Queries the risk levels of instances.
 *
 * @param request DescribeInstanceRiskLevelsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceRiskLevelsResponse
 */
async function describeInstanceRiskLevelsWithOptions(request: DescribeInstanceRiskLevelsRequest, runtime: Util.RuntimeOptions): DescribeInstanceRiskLevelsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instances)) {
    query['Instances'] = request.instances;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceRiskLevels',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the risk levels of instances.
 *
 * @param request DescribeInstanceRiskLevelsRequest
 * @return DescribeInstanceRiskLevelsResponse
 */
async function describeInstanceRiskLevels(request: DescribeInstanceRiskLevelsRequest): DescribeInstanceRiskLevelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceRiskLevelsWithOptions(request, runtime);
}

model DescribeInternetDropTrafficTrendRequest {
  direction?: string(name='Direction', example='out'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1756346821'),
  lang?: string(name='Lang', example='zh'),
  sourceCode?: string(name='SourceCode', description='This parameter is required.', example='yundun'),
  sourceIp?: string(name='SourceIp', example='120.136.21.XXX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1749176793'),
}

model DescribeInternetDropTrafficTrendResponseBody = {
  dataList?: [ 
    {
      aclDrop?: long(name='AclDrop', example='12'),
      dataTime?: string(name='DataTime', example='2018-08-25 12:00:00'),
      dropRatio?: string(name='DropRatio', example='1'),
      dropRing?: long(name='DropRing', example='0'),
      dropRingRatio?: string(name='DropRingRatio', example='1'),
      dropSession?: long(name='DropSession', example='12'),
      ipsDrop?: long(name='IpsDrop', example='5'),
      ringDataTime?: string(name='RingDataTime', example='2018-08-25 12:00:00'),
      ringTime?: long(name='RingTime', example='1724982259'),
      time?: long(name='Time', example='1659405600'),
      totalSession?: long(name='TotalSession', example='10'),
    }
  ](name='DataList'),
  dropSessionMax?: long(name='DropSessionMax', example='8090'),
  ratioAverage?: string(name='RatioAverage', example='12.34'),
  requestId?: string(name='RequestId', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  ringRatioAverage?: string(name='RingRatioAverage', example='1.23'),
}

model DescribeInternetDropTrafficTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInternetDropTrafficTrendResponseBody(name='body'),
}

/**
 * @summary 获取互联网方向删除会话趋势图
 *
 * @param request DescribeInternetDropTrafficTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInternetDropTrafficTrendResponse
 */
async function describeInternetDropTrafficTrendWithOptions(request: DescribeInternetDropTrafficTrendRequest, runtime: Util.RuntimeOptions): DescribeInternetDropTrafficTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceCode)) {
    query['SourceCode'] = request.sourceCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInternetDropTrafficTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取互联网方向删除会话趋势图
 *
 * @param request DescribeInternetDropTrafficTrendRequest
 * @return DescribeInternetDropTrafficTrendResponse
 */
async function describeInternetDropTrafficTrend(request: DescribeInternetDropTrafficTrendRequest): DescribeInternetDropTrafficTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInternetDropTrafficTrendWithOptions(request, runtime);
}

model DescribeInternetOpenIpRequest {
  assetsInstanceId?: string(name='AssetsInstanceId', description='The instance ID.', example='i-uf6faknmuby7ezht****'),
  assetsInstanceName?: string(name='AssetsInstanceName', description='The instance name.', example='launch-advisor-2023****'),
  assetsType?: string(name='AssetsType', description='The asset type of the instance.', example='EcsEIP'),
  currentPage?: string(name='CurrentPage', description='The page number.

This parameter is required.', example='1'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1663640336'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries per page.

This parameter is required.', example='10'),
  port?: string(name='Port', description='The port number.', example='80'),
  publicIp?: string(name='PublicIp', description='The public IP address of the instance.', example='203.0.113.1'),
  regionNo?: string(name='RegionNo', description='The region ID of the instance.', example='cn-shanghai'),
  riskLevel?: string(name='RiskLevel', description='The risk level. If you leave this parameter empty, all risk levels are queried. Valid values:

*   **3**: high risk
*   **2**: medium risk
*   **1**: low risk
*   **0**: no risk', example='2'),
  serviceName?: string(name='ServiceName', description='The application.', example='SSH'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1681957629'),
}

model DescribeInternetOpenIpResponseBody = {
  dataList?: [ 
    {
      aclRecommendDetail?: string(name='AclRecommendDetail', description='The reason why recommended intelligent policies are unavailable. Valid values:

*   No recommended intelligent policies are available.
*   This feature is available only to some users.
*   The policy configuration has been modified. No recommended intelligent policies are available.
*   The recommended intelligent policies have been configured. No new recommended intelligent policies are available.', example='No recommended intelligent policies are available.'),
      assetsInstanceId?: string(name='AssetsInstanceId', description='The instance ID.', example='i-bp1ix9w22kv6aew9****'),
      assetsName?: string(name='AssetsName', description='The instance name.', example='launch-advisor-2023****'),
      assetsType?: string(name='AssetsType', description='The asset type of the instance.', example='EcsEIP'),
      detailNum?: int32(name='DetailNum', description='The total number of ports.', example='5'),
      hasAclRecommend?: boolean(name='HasAclRecommend', description='Specifies whether an access control policy is recommended. Valid values:

*   **true**
*   **false**', example='true'),
      inBytes?: long(name='InBytes', description='The inbound network throughput, which indicates the total number of bytes that are sent inbound. Unit: bytes.', example='235'),
      memberUid?: long(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='14151892****7022'),
      outBytes?: long(name='OutBytes', description='The outbound network throughput, which indicates the total number of bytes that are sent outbound. Unit: bytes.', example='1123'),
      portList?: [ string ](name='PortList', description='The list of ports.'),
      publicIp?: string(name='PublicIp', description='The public IP address of the instance.', example='203.0.113.1'),
      regionNo?: string(name='RegionNo', description='The region ID of the instance.', example='cn-shenzhen'),
      riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **3**: high risk
*   **2**: medium risk
*   **1**: low risk
*   **0**: no risk', example='3'),
      riskReason?: string(name='RiskReason', description='The reason for the risk.', example='Previous traffic is all malicious traffic.'),
      serviceNameList?: [ string ](name='ServiceNameList', description='The list of applications.'),
      srcIpCnt?: long(name='SrcIpCnt', description='Number of source IPs.', example='22'),
      totalBytes?: long(name='TotalBytes', description='The total inbound and outbound network throughput, which indicates the total number of bytes that are sent inbound and outbound. Unit: bytes.', example='253023143'),
      totalReplyBytes?: long(name='TotalReplyBytes', description='Outbound traffic in the last 7 days.', example='100000'),
      trafficPercent1Day?: string(name='TrafficPercent1Day', description='For detailed traffic information, see the TotalBytes field.', example='0'),
      trafficPercent30Day?: string(name='TrafficPercent30Day', description='For detailed traffic information, see the TotalBytes field.', example='0'),
      trafficPercent7Day?: string(name='TrafficPercent7Day', description='For detailed traffic information, see the TotalBytes field.', example='0'),
      unknownReason?: [ string ](name='UnknownReason', description='Reasons for not analyzing the protocol when the protocol is identified as Unknown.'),
    }
  ](name='DataList', description='The data returned.'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='40'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The request ID.', example='6B780BD6-282C-51A9-A8E6-59F636BAFA54'),
}

model DescribeInternetOpenIpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInternetOpenIpResponseBody(name='body'),
}

/**
 * @summary Queries the IP addresses that are open to the Internet.
 *
 * @param request DescribeInternetOpenIpRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInternetOpenIpResponse
 */
async function describeInternetOpenIpWithOptions(request: DescribeInternetOpenIpRequest, runtime: Util.RuntimeOptions): DescribeInternetOpenIpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetsInstanceId)) {
    query['AssetsInstanceId'] = request.assetsInstanceId;
  }
  if (!Util.isUnset(request.assetsInstanceName)) {
    query['AssetsInstanceName'] = request.assetsInstanceName;
  }
  if (!Util.isUnset(request.assetsType)) {
    query['AssetsType'] = request.assetsType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.publicIp)) {
    query['PublicIp'] = request.publicIp;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInternetOpenIp',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the IP addresses that are open to the Internet.
 *
 * @param request DescribeInternetOpenIpRequest
 * @return DescribeInternetOpenIpResponse
 */
async function describeInternetOpenIp(request: DescribeInternetOpenIpRequest): DescribeInternetOpenIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInternetOpenIpWithOptions(request, runtime);
}

model DescribeInternetOpenPortRequest {
  currentPage?: string(name='CurrentPage', example='1'),
  endTime?: string(name='EndTime', example='1748358644'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: string(name='PageSize', example='10'),
  port?: string(name='Port', example='80'),
  riskLevel?: string(name='RiskLevel', example='3'),
  serviceName?: string(name='ServiceName', example='SMB'),
  serviceNameFuzzy?: string(name='ServiceNameFuzzy', example='SMB'),
  sourceIp?: string(name='SourceIp', example='114.242.33.XXX'),
  startTime?: string(name='StartTime', example='1735264800'),
  suggestLevel?: string(name='SuggestLevel', example='10'),
}

model DescribeInternetOpenPortResponseBody = {
  dataList?: [ 
    {
      detailNum?: int32(name='DetailNum', example='5'),
      inBytes?: long(name='InBytes', example='1456536639.0'),
      outBytes?: long(name='OutBytes', example='117200.0'),
      port?: int32(name='Port', example='80'),
      probRisk?: string(name='ProbRisk', example='test'),
      probRiskDesc?: string(name='ProbRiskDesc', example='desc'),
      protocol?: string(name='Protocol', example='tcp'),
      publicIpNum?: int32(name='PublicIpNum', example='10'),
      riskLevel?: int32(name='RiskLevel', example='3'),
      riskReason?: string(name='RiskReason', example='test'),
      serviceNameList?: [ string ](name='ServiceNameList'),
      suggestLevel?: int32(name='SuggestLevel', example='20'),
      totalBytes?: long(name='TotalBytes', example='621404'),
      trafficPercent1Day?: string(name='TrafficPercent1Day', example='10'),
      trafficPercent30Day?: string(name='TrafficPercent30Day', example='48'),
      trafficPercent7Day?: string(name='TrafficPercent7Day', example='30'),
      unknownReason?: [ string ](name='UnknownReason'),
    }
  ](name='DataList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='39'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='F3637663-991B-547F-9163-1A5AC367****'),
}

model DescribeInternetOpenPortResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInternetOpenPortResponseBody(name='body'),
}

/**
 * @summary 获取互联网开放端口
 *
 * @param request DescribeInternetOpenPortRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInternetOpenPortResponse
 */
async function describeInternetOpenPortWithOptions(request: DescribeInternetOpenPortRequest, runtime: Util.RuntimeOptions): DescribeInternetOpenPortResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceNameFuzzy)) {
    query['ServiceNameFuzzy'] = request.serviceNameFuzzy;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.suggestLevel)) {
    query['SuggestLevel'] = request.suggestLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInternetOpenPort',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取互联网开放端口
 *
 * @param request DescribeInternetOpenPortRequest
 * @return DescribeInternetOpenPortResponse
 */
async function describeInternetOpenPort(request: DescribeInternetOpenPortRequest): DescribeInternetOpenPortResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInternetOpenPortWithOptions(request, runtime);
}

model DescribeInternetOpenServiceRequest {
  currentPage?: string(name='CurrentPage', example='1'),
  endTime?: string(name='EndTime', example='1753804800'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: string(name='PageSize', example='10'),
  port?: string(name='Port', example='3389'),
  riskLevel?: string(name='RiskLevel', example='2'),
  serviceName?: string(name='ServiceName', example='SMB'),
  serviceNameFuzzy?: string(name='ServiceNameFuzzy', example='SMB'),
  sourceIp?: string(name='SourceIp', example='122.200.64.XXX'),
  startTime?: string(name='StartTime', example='1755742107'),
  suggestLevel?: string(name='SuggestLevel', example='10'),
}

model DescribeInternetOpenServiceResponseBody = {
  dataList?: [ 
    {
      detailNum?: int32(name='DetailNum', example='5'),
      inBytes?: long(name='InBytes', example='447458.0'),
      outBytes?: long(name='OutBytes', example='1123'),
      portList?: [ string ](name='PortList'),
      probRisk?: string(name='ProbRisk', example='test'),
      probRiskDesc?: string(name='ProbRiskDesc', example='test'),
      protocol?: string(name='Protocol', example='tcp'),
      publicIpNum?: int32(name='PublicIpNum', example='3'),
      riskLevel?: int32(name='RiskLevel', example='3'),
      riskReason?: string(name='RiskReason', example='test'),
      serviceName?: int32(name='ServiceName', example='SMB'),
      suggestLevel?: int32(name='SuggestLevel', example='20'),
      totalBytes?: long(name='TotalBytes', example='621404'),
      trafficPercent1Day?: string(name='TrafficPercent1Day', example='0'),
      trafficPercent30Day?: string(name='TrafficPercent30Day', example='0'),
      trafficPercent7Day?: string(name='TrafficPercent7Day', example='77'),
      unknownReason?: [ string ](name='UnknownReason'),
    }
  ](name='DataList'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='PageInfo'),
  requestId?: string(name='RequestId', example='99A65AA0-C5B5-5092-BFCF-8111B436****'),
}

model DescribeInternetOpenServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInternetOpenServiceResponseBody(name='body'),
}

/**
 * @summary 获取互联网开放服务
 *
 * @param request DescribeInternetOpenServiceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInternetOpenServiceResponse
 */
async function describeInternetOpenServiceWithOptions(request: DescribeInternetOpenServiceRequest, runtime: Util.RuntimeOptions): DescribeInternetOpenServiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.serviceName)) {
    query['ServiceName'] = request.serviceName;
  }
  if (!Util.isUnset(request.serviceNameFuzzy)) {
    query['ServiceNameFuzzy'] = request.serviceNameFuzzy;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.suggestLevel)) {
    query['SuggestLevel'] = request.suggestLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInternetOpenService',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取互联网开放服务
 *
 * @param request DescribeInternetOpenServiceRequest
 * @return DescribeInternetOpenServiceResponse
 */
async function describeInternetOpenService(request: DescribeInternetOpenServiceRequest): DescribeInternetOpenServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInternetOpenServiceWithOptions(request, runtime);
}

model DescribeInternetTrafficTrendRequest {
  direction?: string(name='Direction', description='The direction of the internet traffic.

Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1674958929'),
  lang?: string(name='Lang', description='The language of the content in the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceCode?: string(name='SourceCode', description='The source code.

This parameter is required.', example='yundun'),
  sourceIp?: string(name='SourceIp', description='The IP address of the access source.', example='101.80.171.196', deprecated=true),
  srcPrivateIP?: string(name='SrcPrivateIP', description='The private IP address of the source.', example='10.100.134.60'),
  srcPublicIP?: string(name='SrcPublicIP', description='The public IP address of the source.', example='47.112.210.136'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1670307484'),
  trafficType?: string(name='TrafficType', description='The type of the traffic that is captured. Valid values:

*   **max** (default): peak traffic
*   **avg**: average traffic', example='max'),
}

model DescribeInternetTrafficTrendResponseBody = {
  avgInBps?: long(name='AvgInBps', description='The average inbound network throughput, which indicates the average number of bits that are sent inbound per second. Unit: bit/s.', example='6114152'),
  avgOutBps?: long(name='AvgOutBps', description='The average outbound network throughput, which indicates the average number of bits that are sent outbound per second. Unit: bit/s.', example='70148993'),
  avgSession?: long(name='AvgSession', description='The average number of requests.', example='79013'),
  avgTotalBps?: long(name='AvgTotalBps', description='The total average inbound and outbound network throughput, which indicates the average number of bits that are sent inbound and outbound per second. Unit: bit/s.', example='2306'),
  dataList?: [ 
    {
      inBps?: long(name='InBps', description='The inbound network throughput, which indicates the number of bits that are sent inbound per second. Unit: bit/s.', example='187'),
      inBytes?: long(name='InBytes', description='The inbound network throughput, which indicates the total number of bytes that are sent inbound. Unit: bytes.', example='235'),
      inPps?: long(name='InPps', description='The inbound network throughput, which indicates the number of packets that are sent inbound per second. Unit: packets per second (pps).', example='2'),
      newConn?: long(name='NewConn', description='The number of new connections.', example='27'),
      outBps?: long(name='OutBps', description='The outbound network throughput, which indicates the number of bits that are sent outbound per second. Unit: bit/s.', example='45'),
      outBytes?: long(name='OutBytes', description='The outbound network throughput, which indicates the total number of bytes that are sent outbound. Unit: bytes.', example='1123'),
      outPps?: long(name='OutPps', description='The outbound network throughput, which indicates the number of packets that are sent outbound per second. Unit: pps.', example='2'),
      sessionCount?: long(name='SessionCount', description='The number of requests.', example='27'),
      time?: int32(name='Time', description='The time when traffic is generated. The value is a UNIX timestamp. Unit: seconds.

If processing is not complete at this point in time, -1 is returned for all other fields.', example='1659405600'),
      totalBps?: long(name='TotalBps', description='The total outbound and inbound network throughput, which indicates the total number of bits that are sent inbound and outbound per second. Unit: bit/s.', example='323'),
    }
  ](name='DataList', description='The statistics on traffic.'),
  maxBandwidthTime?: long(name='MaxBandwidthTime', description='The timestamp generated when the bandwidth reaches the peak value. The value is a UNIX timestamp. Unit: seconds.', example='1672736400'),
  maxDayExceedBytes?: long(name='MaxDayExceedBytes', description='The maximum volume of excess traffic allowed per day.', example='873'),
  maxInBps?: long(name='MaxInBps', description='The maximum inbound network throughput, which indicates the maximum number of bits that are sent inbound per second. Unit: bit/s.', example='10275643'),
  maxOutBps?: long(name='MaxOutBps', description='The maximum outbound network throughput, which indicates the maximum number of bits that are sent outbound per second. Unit: bit/s.', example='395188'),
  maxSession?: long(name='MaxSession', description='The number of requests during the peak hour of the network throughout.', example='931641'),
  maxTotalBps?: long(name='MaxTotalBps', description='The total maximum inbound and outbound network throughput, which indicates the maximum number of bits that are sent inbound and outbound per second. Unit: bit/s.', example='89783147'),
  requestId?: string(name='RequestId', description='The request ID.', example='C7E837BE-0379-565E-B7B4-DE595C8D337C'),
  totalBytes?: long(name='TotalBytes', description='The total inbound and outbound network throughput, which indicates the total number of bytes that are sent inbound and outbound. Unit: bytes.', example='963227674958'),
  totalExceedBytes?: long(name='TotalExceedBytes', description='The total volume of excess traffic.', example='4243873'),
  totalInBytes?: long(name='TotalInBytes', description='The inbound network throughput, which indicates the total number of bytes that are sent inbound. Unit: bytes.', example='41536824243873'),
  totalOutBytes?: long(name='TotalOutBytes', description='The outbound network throughput, which indicates the total number of bytes that are sent outbound. Unit: bytes.', example='2660894567178'),
  totalSession?: long(name='TotalSession', description='The total number of requests.', example='1061449'),
}

model DescribeInternetTrafficTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInternetTrafficTrendResponseBody(name='body'),
}

/**
 * @summary Queries the trends of Internet traffic.
 *
 * @param request DescribeInternetTrafficTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInternetTrafficTrendResponse
 */
async function describeInternetTrafficTrendWithOptions(request: DescribeInternetTrafficTrendRequest, runtime: Util.RuntimeOptions): DescribeInternetTrafficTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceCode)) {
    query['SourceCode'] = request.sourceCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.srcPrivateIP)) {
    query['SrcPrivateIP'] = request.srcPrivateIP;
  }
  if (!Util.isUnset(request.srcPublicIP)) {
    query['SrcPublicIP'] = request.srcPublicIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.trafficType)) {
    query['TrafficType'] = request.trafficType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInternetTrafficTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the trends of Internet traffic.
 *
 * @param request DescribeInternetTrafficTrendRequest
 * @return DescribeInternetTrafficTrendResponse
 */
async function describeInternetTrafficTrend(request: DescribeInternetTrafficTrendRequest): DescribeInternetTrafficTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInternetTrafficTrendWithOptions(request, runtime);
}

model DescribeInvadeEventListRequest {
  assetsIP?: string(name='AssetsIP', description='The IP address of the affected asset.', example='10.0.XX.XX'),
  assetsInstanceId?: string(name='AssetsInstanceId', description='The ID of the instance.', example='ins_1321_asedb_****'),
  assetsInstanceName?: string(name='AssetsInstanceName', description='The name of the instance.', example='ECS_test'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds. If you do not specify this parameter, the query ends at the current time.', example='1656837360'),
  eventKey?: string(name='EventKey', description='The ID of the breach awareness event.', example='69d189e2-ec17-4676-a2fe-02969234****'),
  eventName?: string(name='EventName', description='The name of the breach awareness event.', example='event_test'),
  eventUuid?: string(name='EventUuid', description='The UUID of the breach awareness event.', example='fadd-dfdd-****'),
  isIgnore?: string(name='IsIgnore', description='Specifies whether the breach awareness event is ignored. Valid values:

*   **true**: The breach awareness event is ignored.
*   **false**: The breach awareness event is not ignored.', example='true'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: long(name='MemberUid', description='The ID of the member.', example='135809047715****'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 10.', example='1'),
  processStatusList?: [ int32 ](name='ProcessStatusList', description='The handling status of breach awareness events.'),
  riskLevel?: [ int32 ](name='RiskLevel', description='The risk levels.'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds. If you do not specify this parameter, the query starts from 30 days before the current time.', example='1656750960'),
}

model DescribeInvadeEventListResponseBody = {
  eventList?: [ 
    {
      assetsInstanceId?: string(name='AssetsInstanceId', description='The ID of the affected asset.', example='i-ECS****'),
      assetsInstanceName?: string(name='AssetsInstanceName', description='The name of the affected asset.', example='ECS_test'),
      assetsType?: string(name='AssetsType', description='The type of the affected asset. Valid values:

*   **BastionHostIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an elastic network interface (ENI)
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of a Server Load Balancer (SLB) instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the high-availability virtual IP address (HAVIP)', example='EcsPublicIp'),
      eventKey?: string(name='EventKey', description='The ID of the breach awareness event.', example='69d189e2-ec17-4676-a2fe-02969234****'),
      eventName?: string(name='EventName', description='The name of the breach awareness event.', example='event_test'),
      eventSrc?: string(name='EventSrc', description='The type of the breach awareness event. Valid values:

*   **IPS**: intrusion prevention event
*   **offline**: disconnection event', example='IPS'),
      eventUuid?: string(name='EventUuid', description='The UUID of the breach awareness event.', example='fadd-dfdd-****'),
      firstTime?: int32(name='FirstTime', description='The time when the breach awareness event first occurred. The value is a UNIX timestamp. Unit: seconds.', example='1656750960'),
      isIgnore?: boolean(name='IsIgnore', description='Indicates whether the breach awareness event is ignored. Valid values:

*   **true**: The breach awareness event is ignored.
*   **false**: The breach awareness event is not ignored.', example='true'),
      lastTime?: int32(name='LastTime', description='The time when the breach awareness event last occurred. The value is a UNIX timestamp. Unit: seconds.', example='1656837360'),
      memberUid?: string(name='MemberUid', description='The ID of the member.', example='135809047715****'),
      privateIP?: string(name='PrivateIP', description='The private IP address of the affected asset.', example='192.168.XX.XX'),
      processStatus?: int32(name='ProcessStatus', description='The handling status of the breach awareness event. Valid values:

*   **0**: unhandled
*   **20**: handled', example='20'),
      publicIP?: string(name='PublicIP', description='The public IP address of the affected asset.', example='198.51.XX.XX'),
      publicIpType?: string(name='PublicIpType', description='The type of the affected asset. Valid values:

*   **BastionHostIP**: the egress IP address of a bastion host
*   **BastionHostIngressIP**: the ingress IP address of a bastion host
*   **EcsEIP**: the EIP of an ECS instance
*   **EcsPublicIP**: the public IP address of an ECS instance
*   **EIP**: the EIP
*   **EniEIP**: the EIP of an ENI
*   **NatEIP**: the EIP of a NAT gateway
*   **SlbEIP**: the EIP of an SLB instance
*   **SlbPublicIP**: the public IP address of an SLB instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **HAVIP**: the HAVIP', example='EcsPublicIp'),
      riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
    }
  ](name='EventList', description='An array that consists of breach awareness events.'),
  highLevelPercent?: int32(name='HighLevelPercent', description='The percentage of high-risk events.', example='40'),
  lowLevelPercent?: int32(name='LowLevelPercent', description='The percentage of low-risk events.', example='20'),
  middleLevelPercent?: int32(name='MiddleLevelPercent', description='The percentage of medium-risk events.', example='40'),
  pageInfo?: {
    currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of breach awareness events.', example='40'),
  }(name='PageInfo', description='The pagination information.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
}

model DescribeInvadeEventListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvadeEventListResponseBody(name='body'),
}

/**
 * @summary Queries the information about the breach awareness events of a firewall.
 *
 * @param request DescribeInvadeEventListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInvadeEventListResponse
 */
async function describeInvadeEventListWithOptions(request: DescribeInvadeEventListRequest, runtime: Util.RuntimeOptions): DescribeInvadeEventListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetsIP)) {
    query['AssetsIP'] = request.assetsIP;
  }
  if (!Util.isUnset(request.assetsInstanceId)) {
    query['AssetsInstanceId'] = request.assetsInstanceId;
  }
  if (!Util.isUnset(request.assetsInstanceName)) {
    query['AssetsInstanceName'] = request.assetsInstanceName;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventKey)) {
    query['EventKey'] = request.eventKey;
  }
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.eventUuid)) {
    query['EventUuid'] = request.eventUuid;
  }
  if (!Util.isUnset(request.isIgnore)) {
    query['IsIgnore'] = request.isIgnore;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.processStatusList)) {
    query['ProcessStatusList'] = request.processStatusList;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvadeEventList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about the breach awareness events of a firewall.
 *
 * @param request DescribeInvadeEventListRequest
 * @return DescribeInvadeEventListResponse
 */
async function describeInvadeEventList(request: DescribeInvadeEventListRequest): DescribeInvadeEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvadeEventListWithOptions(request, runtime);
}

model DescribeInvadeEventNameListRequest {
  endTime?: string(name='EndTime', example='1738780437'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='36.112.73.XXX'),
  startTime?: string(name='StartTime', example='1757620800'),
}

model DescribeInvadeEventNameListResponseBody = {
  eventNameList?: [ 
    {
      eventKey?: string(name='EventKey', example='CActivity'),
      eventName?: string(name='EventName'),
    }
  ](name='EventNameList'),
  nameList?: [ string ](name='NameList'),
  requestId?: string(name='RequestId', example='6ABAA264-E7B5-5D66-8FC3-9253100****'),
}

model DescribeInvadeEventNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvadeEventNameListResponseBody(name='body'),
}

/**
 * @summary 获取漏洞名称列表
 *
 * @param request DescribeInvadeEventNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInvadeEventNameListResponse
 */
async function describeInvadeEventNameListWithOptions(request: DescribeInvadeEventNameListRequest, runtime: Util.RuntimeOptions): DescribeInvadeEventNameListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvadeEventNameList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取漏洞名称列表
 *
 * @param request DescribeInvadeEventNameListRequest
 * @return DescribeInvadeEventNameListResponse
 */
async function describeInvadeEventNameList(request: DescribeInvadeEventNameListRequest): DescribeInvadeEventNameListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvadeEventNameListWithOptions(request, runtime);
}

model DescribeInvadeEventStatisticRequest {
  endTime?: string(name='EndTime', example='1774713600'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='52.130.200.XXX'),
  startTime?: string(name='StartTime', example='1746151757'),
}

model DescribeInvadeEventStatisticResponseBody = {
  highOpenEventCnt?: int32(name='HighOpenEventCnt', example='1'),
  lowOpenEventCnt?: int32(name='LowOpenEventCnt', example='1'),
  middleOpenEventCnt?: int32(name='MiddleOpenEventCnt', example='0'),
  requestId?: string(name='RequestId', example='1530A01A-6901-5B72-AB88-28B6E96B****'),
  totalOpenEventCnt?: int32(name='TotalOpenEventCnt', example='2'),
}

model DescribeInvadeEventStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeInvadeEventStatisticResponseBody(name='body'),
}

/**
 * @summary 获取漏洞事件统计
 *
 * @param request DescribeInvadeEventStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInvadeEventStatisticResponse
 */
async function describeInvadeEventStatisticWithOptions(request: DescribeInvadeEventStatisticRequest, runtime: Util.RuntimeOptions): DescribeInvadeEventStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInvadeEventStatistic',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取漏洞事件统计
 *
 * @param request DescribeInvadeEventStatisticRequest
 * @return DescribeInvadeEventStatisticResponse
 */
async function describeInvadeEventStatistic(request: DescribeInvadeEventStatisticRequest): DescribeInvadeEventStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInvadeEventStatisticWithOptions(request, runtime);
}

model DescribeLogStoreInfoResponseBody = {
  logStoreName?: string(name='LogStoreName', description='The name of the SLS LogStore in the log service.', example='xxx-logstore'),
  projectName?: string(name='ProjectName', description='The Project name of the log service.', example='project-xxx-cn-hangzhou'),
  quota?: long(name='Quota', description='Available log storage capacity. Unit: Byte.', example='50000000'),
  regionId?: string(name='RegionId', description='The region ID for log delivery.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The ID of this request.', example='C6C3B72B********E95FB0A161'),
  ttl?: int32(name='Ttl', description='Log storage duration. Unit: days.', example='20'),
  used?: long(name='Used', description='Used storage capacity. Unit: Byte.

> The statistics of the log service have a delay of approximately two hours.', example='0'),
}

model DescribeLogStoreInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeLogStoreInfoResponseBody(name='body'),
}

/**
 * @summary Get Log Service Information
 *
 * @param request DescribeLogStoreInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeLogStoreInfoResponse
 */
async function describeLogStoreInfoWithOptions(runtime: Util.RuntimeOptions): DescribeLogStoreInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeLogStoreInfo',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Log Service Information
 *
 * @return DescribeLogStoreInfoResponse
 */
async function describeLogStoreInfo(): DescribeLogStoreInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreInfoWithOptions(runtime);
}

model DescribeNatAclPageStatusRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='en'),
}

model DescribeNatAclPageStatusResponseBody = {
  detail?: string(name='Detail', description='Extra error information.', example='proxy_not_exist'),
  natAclPageEnable?: boolean(name='NatAclPageEnable', description='Indicates whether pagination for access control policies for NAT firewalls is supported.', example='True'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B97F9AD7-A2DB-5F8F-9206-DF89DE0AC9E8'),
}

model DescribeNatAclPageStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatAclPageStatusResponseBody(name='body'),
}

/**
 * @summary Queries the pagination status of NAT firewalls.
 *
 * @param request DescribeNatAclPageStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatAclPageStatusResponse
 */
async function describeNatAclPageStatusWithOptions(request: DescribeNatAclPageStatusRequest, runtime: Util.RuntimeOptions): DescribeNatAclPageStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatAclPageStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the pagination status of NAT firewalls.
 *
 * @param request DescribeNatAclPageStatusRequest
 * @return DescribeNatAclPageStatusResponse
 */
async function describeNatAclPageStatus(request: DescribeNatAclPageStatusRequest): DescribeNatAclPageStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatAclPageStatusWithOptions(request, runtime);
}

model DescribeNatFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='303f0697-2a21-4e43-b142-4a77adf7b358'),
  currentPage?: string(name='CurrentPage', description='The page number.', example='1'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

> If you do not specify this parameter, the descriptions of all policies are queried.', example='test'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported. The value of this parameter varies based on the value of the DestinationType parameter.

*   If DestinationType is set to `net`, the value of Destination must be a CIDR block. Example: 10.0.3.0/24.
*   If DestinationType is set to `domain`, the value of Destination must be a domain name. Example: aliyun.
*   If DestinationType is set to `group`, the value of Destination must be the name of an address book. Example: db_group.
*   If DestinationType is set to `location`, the value of Destination is a location. For more information about location codes, see [AddControlPolicy](https://help.aliyun.com/document_detail/474128.html). Example: ["BJ11", "ZB"].

> If you do not specify this parameter, all types of destination addresses are queried.', example='x.x.x.x/32'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **out**: outbound traffic

This parameter is required.', example='out'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-xxxxxx'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  proto?: string(name='Proto', description='The type of the protocol in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all types of protocols

> If you do not specify this parameter, access control policies of all protocol types are queried.', example='ANY'),
  release?: string(name='Release', description='Specifies whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported. The value of this parameter varies based on the value of the SourceType parameter.

*   If SourceType is set to `net`, the value of Source must be a CIDR block. Example: 192.0.XX.XX/24.
*   If SourceType is set to `group`, the value of Source must be the name of an address book. Example: db_group. If the db_group address book does not contain addresses, all source addresses are queried.
*   If SourceType is set to `location`, the value of Source must be a location. Example: beijing.

> If you do not specify this parameter, all types of source addresses are queried.', example='1.1.1.1/32'),
}

model DescribeNatFirewallControlPolicyResponseBody = {
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='00281255-d220-4db1-8f4f-c4df221a****'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.'),
      createTime?: long(name='CreateTime', description='The time when the access control policy was created.', example='1761062400'),
      description?: string(name='Description', description='The description of the access control policy.', example='test'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='The ports in the destination port address book.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. The value of this parameter varies based on the value of DestinationType. Valid values:

*   If the value of **DestinationType** is **net**, the value of this parameter is a CIDR block. Example: 192.0.XX.XX/24.
*   If the value of **DestinationType** is **domain**, the value of this parameter is a domain name. Example: aliyuncs.com.
*   If the value of **DestinationType** is **group**, the value of this parameter is the name of an address book. Example: db_group.
*   If the value of **DestinationType** is **location**, the value of this parameter is a location. For more information about location codes, see [AddControlPolicy](https://help.aliyun.com/document_detail/138867.html). Example: ["BJ11", "ZB"].', example='x.x.x.x/32'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='The CIDR blocks in the destination address book.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more CIDR blocks
*   **domain**: an address book that includes one or more domain names', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: location', example='net'),
      dnsResult?: string(name='DnsResult', description='The DNS resolution result.', example='111.0.XX.XX,112.0.XX.XX'),
      dnsResultTime?: long(name='DnsResultTime', description='The time when the Domain Name System (DNS) resolution was performed. The value is a UNIX timestamp. Unit: seconds.', example='1579261141'),
      domainResolveType?: int32(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

*   **0**: fully qualified domain name (FQDN)-based resolution
*   **1**: DNS-based dynamic resolution
*   **2**: FQDN and DNS-based dynamic resolution', example='1'),
      endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If RepeatType is set to Permanent, this parameter is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694764800'),
      hitLastTime?: long(name='HitLastTime', description='The time when the access control policy was last hit. The value is a UNIX timestamp. Unit: seconds.', example='1579261141'),
      hitTimes?: long(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      modifyTime?: long(name='ModifyTime', description='The time when the access control policy was modified.', example='1761062400'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1'),
      proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**', example='TCP'),
      release?: string(name='Release', description='The status of the access control policy. By default, an access control policy is enabled after it is created. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
      repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If RepeatType is set to `Permanent`, `None`, or `Daily`, the value of this parameter is an empty array. Example: [].
*   If RepeatType is set to Weekly, this parameter must be specified. Example: [0, 6].

>  If RepeatType is set to Weekly, the fields in the value of this parameter cannot be repeated.

*   If RepeatType is set to `Monthly`, this parameter must be specified. Example: [1, 31].

>  If RepeatType is set to Monthly, the fields in the value of this parameter cannot be repeated.'),
      repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The end time must be on the hour or on the half hour, and at least 30 minutes later than the start time.

>  If RepeatType is set to Permanent or None, this parameter is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='23:30'),
      repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If RepeatType is set to Permanent or None, this parameter is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='08:00'),
      repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If the value of **SourceType** is `net`, the value of this parameter is a CIDR block. Example: 192.0.XX.XX/24.
*   If the value of **SourceType** is `group`, the value of this parameter is the name of an address book. Example: db_group.
*   If the value of **SourceType** is `location`, the value of this parameter is a location. For more information about location codes, see [AddControlPolicy](https://help.aliyun.com/document_detail/138867.html). Example: ["BJ11", "ZB"].', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='The CIDR blocks in the source address book.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address book in the access control policy. The value is fixed as **ip**. The value indicates an address book that includes one or more CIDR blocks.', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location', example='net'),
      spreadCnt?: string(name='SpreadCnt', description='The total quota consumed by the returned access control policies, which is the sum of the quota consumed by each policy. The quota that is consumed by an access control policy is calculated by using the following formula: Quota that is consumed by an access control policy = Number of source addresses (number of CIDR blocks or regions) × Number of destination addresses (number of CIDR blocks, regions, or domain names) × Number of port ranges × Number of applications.', example='10,000'),
      startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The start time must be on the hour or on the half hour, and at least 30 minutes earlier than the end time.

>  If RepeatType is set to Permanent, this parameter is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, this parameter must be specified.', example='1694761200'),
    }
  ](name='Policys', description='The information about the access control policies.'),
  requestId?: string(name='RequestId', description='The request ID.', example='F183567D-8A52-5BAE-9472-F1C427378C28'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='28'),
}

model DescribeNatFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Queries the information about all access control policies that are created for NAT firewalls.
 *
 * @description You can use this operation to query the information about all access control policies that are created for NAT firewalls by page.
 *
 * @param request DescribeNatFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallControlPolicyResponse
 */
async function describeNatFirewallControlPolicyWithOptions(request: DescribeNatFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about all access control policies that are created for NAT firewalls.
 *
 * @description You can use this operation to query the information about all access control policies that are created for NAT firewalls by page.
 *
 * @param request DescribeNatFirewallControlPolicyRequest
 * @return DescribeNatFirewallControlPolicyResponse
 */
async function describeNatFirewallControlPolicy(request: DescribeNatFirewallControlPolicyRequest): DescribeNatFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeNatFirewallDropTrafficTrendRequest {
  endTime?: long(name='EndTime', example='1758334822'),
  sourceIp?: string(name='SourceIp', example='122.190.56.XXX'),
  startTime?: long(name='StartTime', example='1740968766'),
}

model DescribeNatFirewallDropTrafficTrendResponseBody = {
  dataList?: [ 
    {
      dropSession?: long(name='DropSession', example='10'),
      time?: long(name='Time', example='1659405600'),
      totalSession?: long(name='TotalSession', example='153188'),
    }
  ](name='DataList'),
  dropSessionMax?: long(name='DropSessionMax', example='62436'),
  dropSessionMaxTime?: string(name='DropSessionMaxTime', example='1525662720'),
  requestId?: string(name='RequestId', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
}

model DescribeNatFirewallDropTrafficTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallDropTrafficTrendResponseBody(name='body'),
}

/**
 * @summary 概览页-nat防火墙拦截趋势
 *
 * @param request DescribeNatFirewallDropTrafficTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallDropTrafficTrendResponse
 */
async function describeNatFirewallDropTrafficTrendWithOptions(request: DescribeNatFirewallDropTrafficTrendRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallDropTrafficTrendResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallDropTrafficTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 概览页-nat防火墙拦截趋势
 *
 * @param request DescribeNatFirewallDropTrafficTrendRequest
 * @return DescribeNatFirewallDropTrafficTrendResponse
 */
async function describeNatFirewallDropTrafficTrend(request: DescribeNatFirewallDropTrafficTrendRequest): DescribeNatFirewallDropTrafficTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallDropTrafficTrendWithOptions(request, runtime);
}

model DescribeNatFirewallListRequest {
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:
*   **zh** (default)
*   **en**', example='zh'),
  memberUid?: long(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='147783******'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='nat-bp123456g******'),
  pageNo?: long(name='PageNo', description='The page number.', example='1'),
  pageSize?: long(name='PageSize', description='The number of entries per page.

Default value: **10**.**** Maximum value: **50**.', example='10'),
  proxyId?: string(name='ProxyId', description='The ID of the NAT firewall.', example='proxy-nat97a******'),
  proxyName?: string(name='ProxyName', description='The name of the NAT firewall. The name must be 4 to 50 characters in length, and can contain letters, digits, and underscores (_). The name cannot start with an underscore.', example='proxy-******'),
  regionNo?: string(name='RegionNo', description='The region ID of the virtual private cloud (VPC).', example='cn-hangzhou'),
  status?: string(name='Status', description='The status of the NAT firewall. Valid values:

*   configuring
*   deleting
*   normal
*   abnormal
*   opening
*   closing
*   closed', example='normal'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
}

model DescribeNatFirewallListResponseBody = {
  natFirewallList?: [ 
    {
      aliUid?: long(name='AliUid', description='The UID of the Alibaba Cloud account.

>  The value of this parameter indicates the management account to which the member is added.', example='19106481******'),
      errorDetail?: string(name='ErrorDetail', description='The cause of the error.', example='Create Failed.'),
      memberUid?: long(name='MemberUid', description='The UID of the member in Cloud Firewall.', example='19106481******'),
      natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-uf6tnblxip4qcxg******'),
      natGatewayName?: string(name='NatGatewayName', description='The name of the NAT gateway.', example='nat-******'),
      natRouteEntryList?: [ 
        {
          destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the default route.', example='0.0.0.0/0'),
          nextHopId?: string(name='NextHopId', description='The next hop of the original NAT gateway.', example='ngw-2ze0s284r9atg5******'),
          nextHopType?: string(name='NextHopType', description='The network type of the next hop. The value is fixed as NatGateway.', example='NatGateway'),
          routeTableId?: string(name='RouteTableId', description='The route table to which the default route of the NAT gateway belongs.', example='vtb-bp18o0gb******'),
        }
      ](name='NatRouteEntryList', description='The default route entries of the NAT gateway.'),
      proxyId?: string(name='ProxyId', description='The ID of the NAT firewall.', example='proxy-nat30******'),
      proxyName?: string(name='ProxyName', description='The name of the NAT firewall.', example='proxy-******'),
      proxyStatus?: string(name='ProxyStatus', description='The status of the NAT firewall. Valid values:

*   configuring
*   deleting
*   normal
*   abnormal
*   opening
*   closing
*   closed', example='normal'),
      regionId?: string(name='RegionId', description='The region ID of your Cloud Firewall.

>  For more information about the supported regions of Cloud Firewall, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-qingdao'),
      strictMode?: int32(name='StrictMode', description='Indicates whether the strict mode is enabled. Valid values: 1, which specifies yes, and 0, which specifies no.', example='0'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-2ze26ya******'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='vpc-******'),
    }
  ](name='NatFirewallList', description='The NAT firewalls.'),
  requestId?: string(name='RequestId', description='The request ID.', example='15FCCC52-1E23-57AE-B5EF-3E00A3******'),
  totalCount?: int32(name='TotalCount', description='The total number of NAT firewalls.', example='10'),
}

model DescribeNatFirewallListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallListResponseBody(name='body'),
}

/**
 * @summary Queries details of NAT firewalls.
 *
 * @param request DescribeNatFirewallListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallListResponse
 */
async function describeNatFirewallListWithOptions(request: DescribeNatFirewallListRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.proxyName)) {
    query['ProxyName'] = request.proxyName;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries details of NAT firewalls.
 *
 * @param request DescribeNatFirewallListRequest
 * @return DescribeNatFirewallListResponse
 */
async function describeNatFirewallList(request: DescribeNatFirewallListRequest): DescribeNatFirewallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallListWithOptions(request, runtime);
}

model DescribeNatFirewallPolicyPriorUsedRequest {
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **out**: outbound traffic

This parameter is required.', example='out'),
  ipVersion?: string(name='IpVersion', description='The IP version supported by the access control policy. Valid values:

*   **4**: IPv4 (default)', example='4'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-xxxxxx'),
}

model DescribeNatFirewallPolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority for the access control policy.', example='28'),
  requestId?: string(name='RequestId', description='The request ID.', example='BCDF3907-1011-5504-B015-CC7603C0E6B6'),
  start?: int32(name='Start', description='The highest priority for the access control policy.', example='1'),
}

model DescribeNatFirewallPolicyPriorUsedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallPolicyPriorUsedResponseBody(name='body'),
}

/**
 * @summary Queries the priority range of access control policies that are created for a NAT firewall.
 *
 * @description You can use this operation to query the priority range of access control policies that are created for a NAT firewall.
 *
 * @param request DescribeNatFirewallPolicyPriorUsedRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallPolicyPriorUsedResponse
 */
async function describeNatFirewallPolicyPriorUsedWithOptions(request: DescribeNatFirewallPolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallPolicyPriorUsedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallPolicyPriorUsed',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the priority range of access control policies that are created for a NAT firewall.
 *
 * @description You can use this operation to query the priority range of access control policies that are created for a NAT firewall.
 *
 * @param request DescribeNatFirewallPolicyPriorUsedRequest
 * @return DescribeNatFirewallPolicyPriorUsedResponse
 */
async function describeNatFirewallPolicyPriorUsed(request: DescribeNatFirewallPolicyPriorUsedRequest): DescribeNatFirewallPolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallPolicyPriorUsedWithOptions(request, runtime);
}

model DescribeNatFirewallQuotaRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='113.132.26.XXX'),
}

model DescribeNatFirewallQuotaResponseBody = {
  exceptionCount?: long(name='ExceptionCount', example='1'),
  requestId?: string(name='RequestId', example='F98BAA59-5863-5B61-8FD4-C5E96813****'),
  totalCount?: long(name='TotalCount', example='6'),
  unprotectedCount?: long(name='UnprotectedCount', example='20'),
  usedCount?: long(name='UsedCount', example='10'),
}

model DescribeNatFirewallQuotaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallQuotaResponseBody(name='body'),
}

/**
 * @summary 获取NAT防火墙配额
 *
 * @param request DescribeNatFirewallQuotaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallQuotaResponse
 */
async function describeNatFirewallQuotaWithOptions(request: DescribeNatFirewallQuotaRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallQuotaResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallQuota',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取NAT防火墙配额
 *
 * @param request DescribeNatFirewallQuotaRequest
 * @return DescribeNatFirewallQuotaResponse
 */
async function describeNatFirewallQuota(request: DescribeNatFirewallQuotaRequest): DescribeNatFirewallQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallQuotaWithOptions(request, runtime);
}

model DescribeNatFirewallTrafficTrendRequest {
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp that is accurate to seconds.', example='1739330580'),
  interval?: long(name='Interval', description='The time interval between the data entries to return. Unit: seconds. Valid values:

*   **60**: 1 minute
*   **1800**: 30 minutes', example='60'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-xxxxxx'),
  srcPrivateIP?: string(name='SrcPrivateIP', description='The private IP address of the source.', example='10.100.134.60'),
  srcPublicIP?: string(name='SrcPublicIP', description='The public IP address of the source.', example='47.112.210.136'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1739326980'),
}

model DescribeNatFirewallTrafficTrendResponseBody = {
  dataList?: [ 
    {
      maxInBps?: long(name='MaxInBps', description='The maximum inbound network throughput, which indicates the maximum number of bits that are sent inbound per second. Unit: bit/s.', example='18038632'),
      maxOutBps?: long(name='MaxOutBps', description='The maximum outbound network throughput, which indicates the maximum number of bits that are sent outbound per second. Unit: bit/s.', example='122596487'),
      maxTotalBps?: long(name='MaxTotalBps', description='The total maximum inbound and outbound network throughput, which indicates the maximum number of bits that are sent inbound and outbound per second. Unit: bit/s.', example='66953194'),
      trafficTime?: long(name='TrafficTime', description='The time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1734418980'),
    }
  ](name='DataList', description='The statistics on traffic.'),
  maxInBps?: long(name='MaxInBps', description='The maximum inbound network throughput, which indicates the maximum number of bits that are sent inbound per second. Unit: bit/s.', example='18038632'),
  maxOutBps?: long(name='MaxOutBps', description='The maximum outbound network throughput, which indicates the maximum number of bits that are sent outbound per second. Unit: bit/s.', example='122596487'),
  maxTotalBps?: long(name='MaxTotalBps', description='The total maximum inbound and outbound network throughput, which indicates the maximum number of bits that are sent inbound and outbound per second. Unit: bit/s.', example='66953194'),
  requestId?: string(name='RequestId', description='Id of the request', example='87F23A3A-6F57-59C3-8237-A090D0613D71'),
}

model DescribeNatFirewallTrafficTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNatFirewallTrafficTrendResponseBody(name='body'),
}

/**
 * @summary 概览页-NAT流量趋势
 *
 * @param request DescribeNatFirewallTrafficTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNatFirewallTrafficTrendResponse
 */
async function describeNatFirewallTrafficTrendWithOptions(request: DescribeNatFirewallTrafficTrendRequest, runtime: Util.RuntimeOptions): DescribeNatFirewallTrafficTrendResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNatFirewallTrafficTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 概览页-NAT流量趋势
 *
 * @param request DescribeNatFirewallTrafficTrendRequest
 * @return DescribeNatFirewallTrafficTrendResponse
 */
async function describeNatFirewallTrafficTrend(request: DescribeNatFirewallTrafficTrendRequest): DescribeNatFirewallTrafficTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNatFirewallTrafficTrendWithOptions(request, runtime);
}

model DescribeNetworkInstanceListRequest {
  cenId?: string(name='CenId', example='cen-x5jayxou71ad73****'),
  connectType?: string(name='ConnectType', example='expressconnect'),
  lang?: string(name='Lang', example='zh'),
}

model DescribeNetworkInstanceListResponseBody = {
  networkInstanceList?: [ 
    {
      networkInstanceId?: string(name='NetworkInstanceId', example='vpc-m5ewlqkuf7or****'),
      networkInstanceName?: string(name='NetworkInstanceName', example='vpc-test'),
      networkInstanceType?: string(name='NetworkInstanceType', example='vpc'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
    }
  ](name='NetworkInstanceList'),
  requestId?: string(name='RequestId', example='D2373503-3921-59F2-93A6-3DA7FB7****'),
  totalCount?: int32(name='TotalCount', example='21'),
}

model DescribeNetworkInstanceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkInstanceListResponseBody(name='body'),
}

/**
 * @summary 获取网络实例列表
 *
 * @param request DescribeNetworkInstanceListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkInstanceListResponse
 */
async function describeNetworkInstanceListWithOptions(request: DescribeNetworkInstanceListRequest, runtime: Util.RuntimeOptions): DescribeNetworkInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInstanceList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网络实例列表
 *
 * @param request DescribeNetworkInstanceListRequest
 * @return DescribeNetworkInstanceListResponse
 */
async function describeNetworkInstanceList(request: DescribeNetworkInstanceListRequest): DescribeNetworkInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInstanceListWithOptions(request, runtime);
}

model DescribeNetworkInstanceRelationListRequest {
  connectType?: string(name='ConnectType', example='cen'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus', example='notconfigured'),
  lang?: string(name='Lang', example='zh'),
  networkInstanceId?: string(name='NetworkInstanceId'),
  peerNetworkInstanceId?: string(name='PeerNetworkInstanceId'),
}

model DescribeNetworkInstanceRelationListResponseBody = {
  networkInstanceList?: [ 
    {
      associatedCen?: [ 
        {
          attachmentId?: string(name='AttachmentId'),
          attachmentName?: string(name='AttachmentName'),
          cenId?: string(name='CenId'),
          cenName?: string(name='CenName'),
          transitRouterType?: string(name='TransitRouterType'),
        }
      ](name='AssociatedCen'),
      connectType?: string(name='ConnectType', example='cen'),
      networkInstanceId?: string(name='NetworkInstanceId', example='vpc-2vcwfqbrh4kr****'),
      networkInstanceName?: string(name='NetworkInstanceName', example='vpc-test'),
      networkInstanceType?: string(name='NetworkInstanceType', example='VPC'),
      peerNetworkInstanceList?: [ 
        {
          associatedCen?: [ 
            {
              attachmentId?: string(name='AttachmentId'),
              attachmentName?: string(name='AttachmentName'),
              cenId?: string(name='CenId'),
              cenName?: string(name='CenName'),
              transitRouterType?: string(name='TransitRouterType'),
            }
          ](name='AssociatedCen'),
          networkInstanceId?: string(name='NetworkInstanceId', example='vpc-dsf232d****'),
          networkInstanceName?: string(name='NetworkInstanceName', example='vpc-test'),
          networkInstanceType?: string(name='NetworkInstanceType', example='vpc'),
          regionNo?: string(name='RegionNo', example='cn-shenzhen'),
        }
      ](name='PeerNetworkInstanceList'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
    }
  ](name='NetworkInstanceList'),
  requestId?: string(name='RequestId', example='284FF89D-4F70-546F-8EF6-77E0A530****'),
  totalCount?: int32(name='TotalCount', example='12'),
}

model DescribeNetworkInstanceRelationListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkInstanceRelationListResponseBody(name='body'),
}

/**
 * @summary 获取网络实例关系列表
 *
 * @param request DescribeNetworkInstanceRelationListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkInstanceRelationListResponse
 */
async function describeNetworkInstanceRelationListWithOptions(request: DescribeNetworkInstanceRelationListRequest, runtime: Util.RuntimeOptions): DescribeNetworkInstanceRelationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectType)) {
    query['ConnectType'] = request.connectType;
  }
  if (!Util.isUnset(request.firewallConfigureStatus)) {
    query['FirewallConfigureStatus'] = request.firewallConfigureStatus;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.networkInstanceId)) {
    query['NetworkInstanceId'] = request.networkInstanceId;
  }
  if (!Util.isUnset(request.peerNetworkInstanceId)) {
    query['PeerNetworkInstanceId'] = request.peerNetworkInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkInstanceRelationList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网络实例关系列表
 *
 * @param request DescribeNetworkInstanceRelationListRequest
 * @return DescribeNetworkInstanceRelationListResponse
 */
async function describeNetworkInstanceRelationList(request: DescribeNetworkInstanceRelationListRequest): DescribeNetworkInstanceRelationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInstanceRelationListWithOptions(request, runtime);
}

model DescribeNetworkTrafficTopRatioRequest {
  appName?: string(name='AppName', example='HTTP'),
  assetIP?: string(name='AssetIP', example='192.0.XX.XX'),
  assetRegion?: string(name='AssetRegion', example='cn-beijing'),
  dataType?: string(name='DataType', description='This parameter is required.', example='in_src_ip'),
  direction?: string(name='Direction', example='in'),
  dstIP?: string(name='DstIP', example='39.144.124.XXX'),
  dstPort?: string(name='DstPort', example='8080'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1757433863'),
  ipProperty?: string(name='IpProperty', example='proxy'),
  isp?: string(name='Isp'),
  lang?: string(name='Lang', example='zh'),
  location?: string(name='Location'),
  ruleResult?: string(name='RuleResult', example='1'),
  sort?: string(name='Sort', example='in_bytes'),
  sourceCode?: string(name='SourceCode', description='This parameter is required.', example='yundun'),
  sourceIp?: string(name='SourceIp', example='60.12.220.XXX'),
  srcIP?: string(name='SrcIP', example='172.16.169.XXX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1749176793'),
}

model DescribeNetworkTrafficTopRatioResponseBody = {
  dataCount?: int32(name='DataCount', example='1'),
  dataList?: [ 
    {
      dataName?: string(name='DataName', example='test'),
      dataValue?: string(name='DataValue', example='12'),
    }
  ](name='DataList'),
  dataType?: string(name='DataType', example='in_src_ip'),
  requestId?: string(name='RequestId', example='C05D58A1-28A9-563A-BB59-5F7D1867****'),
}

model DescribeNetworkTrafficTopRatioResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeNetworkTrafficTopRatioResponseBody(name='body'),
}

/**
 * @summary 获取网络流量TOP环比
 *
 * @param request DescribeNetworkTrafficTopRatioRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeNetworkTrafficTopRatioResponse
 */
async function describeNetworkTrafficTopRatioWithOptions(request: DescribeNetworkTrafficTopRatioRequest, runtime: Util.RuntimeOptions): DescribeNetworkTrafficTopRatioResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.assetIP)) {
    query['AssetIP'] = request.assetIP;
  }
  if (!Util.isUnset(request.assetRegion)) {
    query['AssetRegion'] = request.assetRegion;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.dstIP)) {
    query['DstIP'] = request.dstIP;
  }
  if (!Util.isUnset(request.dstPort)) {
    query['DstPort'] = request.dstPort;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.ipProperty)) {
    query['IpProperty'] = request.ipProperty;
  }
  if (!Util.isUnset(request.isp)) {
    query['Isp'] = request.isp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.location)) {
    query['Location'] = request.location;
  }
  if (!Util.isUnset(request.ruleResult)) {
    query['RuleResult'] = request.ruleResult;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.sourceCode)) {
    query['SourceCode'] = request.sourceCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.srcIP)) {
    query['SrcIP'] = request.srcIP;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkTrafficTopRatio',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取网络流量TOP环比
 *
 * @param request DescribeNetworkTrafficTopRatioRequest
 * @return DescribeNetworkTrafficTopRatioResponse
 */
async function describeNetworkTrafficTopRatio(request: DescribeNetworkTrafficTopRatioRequest): DescribeNetworkTrafficTopRatioResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkTrafficTopRatioWithOptions(request, runtime);
}

model DescribeOpenIpAccessSrcStatRequest {
  currentPage?: string(name='CurrentPage', example='1'),
  dstIp?: string(name='DstIp', example='47.100.102.XXX'),
  lang?: string(name='Lang', example='zh'),
  pageSize?: string(name='PageSize', example='10'),
  sourceIp?: string(name='SourceIp', example='47.100.XX.XX'),
}

model DescribeOpenIpAccessSrcStatResponseBody = {
  requestId?: string(name='RequestId', example='0DC783F1-B3A7-578D-8A63-*****'),
  statList?: [ 
    {
      abnormalSrcIp?: long(name='AbnormalSrcIp', example='12'),
      app?: string(name='App', example='HTTP'),
      normalSrcIp?: long(name='NormalSrcIp', example='21'),
      port?: string(name='Port', example='6163'),
    }
  ](name='StatList'),
  totalCount?: int32(name='TotalCount', example='20'),
}

model DescribeOpenIpAccessSrcStatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOpenIpAccessSrcStatResponseBody(name='body'),
}

/**
 * @summary 获取公网IP通过的源状态
 *
 * @param request DescribeOpenIpAccessSrcStatRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOpenIpAccessSrcStatResponse
 */
async function describeOpenIpAccessSrcStatWithOptions(request: DescribeOpenIpAccessSrcStatRequest, runtime: Util.RuntimeOptions): DescribeOpenIpAccessSrcStatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dstIp)) {
    query['DstIp'] = request.dstIp;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOpenIpAccessSrcStat',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取公网IP通过的源状态
 *
 * @param request DescribeOpenIpAccessSrcStatRequest
 * @return DescribeOpenIpAccessSrcStatResponse
 */
async function describeOpenIpAccessSrcStat(request: DescribeOpenIpAccessSrcStatRequest): DescribeOpenIpAccessSrcStatResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpenIpAccessSrcStatWithOptions(request, runtime);
}

model DescribeOutgoingAssetListRequest {
  assetsRegion?: string(name='AssetsRegion', example='cn-beijing'),
  currentPage?: string(name='CurrentPage', example='1'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1736438400'),
  groupName?: string(name='GroupName', example='subscribe'),
  IPType?: string(name='IPType', example='NatPrivate'),
  lang?: string(name='Lang', example='zh'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-bp123456g******'),
  natGatewayName?: string(name='NatGatewayName', example='ngw-test'),
  order?: string(name='Order', example='desc'),
  pageSize?: string(name='PageSize', example='10'),
  privateIP?: string(name='PrivateIP', example='10.200.33.XXX'),
  publicIP?: string(name='PublicIP', example='47.116.70.XXX'),
  resourceType?: string(name='ResourceType', example='NatEIP'),
  securityRisk?: string(name='SecurityRisk', example='risk'),
  sort?: string(name='Sort', example='InBytes'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1743647114'),
}

model DescribeOutgoingAssetListResponseBody = {
  assetList?: [ 
    {
      assetInstanceId?: string(name='AssetInstanceId', example='i-8vbcmllue4d94nto****'),
      assetInstanceName?: string(name='AssetInstanceName', example='test'),
      assetsRegion?: string(name='AssetsRegion', example='cn-hangzhou'),
      groupName?: string(name='GroupName', example='subscribe'),
      inBytes?: long(name='InBytes', example='244438.0'),
      ipsHitCnt?: long(name='IpsHitCnt', example='12'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-bp1utx6wj4x9qu9tl****'),
      natGatewayName?: string(name='NatGatewayName', example='ngw-test'),
      outBytes?: long(name='OutBytes', example='100'),
      outgoingDomainCnt?: long(name='OutgoingDomainCnt', example='10'),
      outgoingDstIPCnt?: long(name='OutgoingDstIPCnt', example='12'),
      privateIP?: string(name='PrivateIP', example='10.21.242XXX'),
      privateIPList?: [ string ](name='PrivateIPList'),
      publicIP?: string(name='PublicIP', example='47.96.181.XXX'),
      resourceType?: string(name='ResourceType', example='EcsPublicIP'),
      securityRisk?: string(name='SecurityRisk', example='risk'),
      sessionCount?: long(name='SessionCount', example='2'),
      totalBytes?: long(name='TotalBytes', example='12498767'),
    }
  ](name='AssetList'),
  requestId?: string(name='RequestId', example='7A515672-FAAE-584F-B51C-B2586E****'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeOutgoingAssetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingAssetListResponseBody(name='body'),
}

/**
 * @summary 获取外联资产列表
 *
 * @param request DescribeOutgoingAssetListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingAssetListResponse
 */
async function describeOutgoingAssetListWithOptions(request: DescribeOutgoingAssetListRequest, runtime: Util.RuntimeOptions): DescribeOutgoingAssetListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetsRegion)) {
    query['AssetsRegion'] = request.assetsRegion;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.IPType)) {
    query['IPType'] = request.IPType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.natGatewayName)) {
    query['NatGatewayName'] = request.natGatewayName;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIP)) {
    query['PrivateIP'] = request.privateIP;
  }
  if (!Util.isUnset(request.publicIP)) {
    query['PublicIP'] = request.publicIP;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityRisk)) {
    query['SecurityRisk'] = request.securityRisk;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingAssetList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取外联资产列表
 *
 * @param request DescribeOutgoingAssetListRequest
 * @return DescribeOutgoingAssetListResponse
 */
async function describeOutgoingAssetList(request: DescribeOutgoingAssetListRequest): DescribeOutgoingAssetListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingAssetListWithOptions(request, runtime);
}

model DescribeOutgoingDestinationIPRequest {
  applicationName?: string(name='ApplicationName', description='The application type in the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**

>  The value of this parameter depends on the value of Proto. If you set Proto to TCP, you can set ApplicationNameList to any valid value. If you specify both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.', example='FTP'),
  categoryId?: string(name='CategoryId', description='The ID of the service to which the destination IP address belongs. This parameter is left empty by default. Valid values:

*   **All**: all services
*   **RiskDomain**: risky domain names
*   **RiskIP**: risky IP addresses
*   **AliYun**: Alibaba Cloud services
*   **NotAliYun**: third-party services', example='All'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1'),
  dstIP?: string(name='DstIP', description='The destination IP address in the outbound connection that is initiated to access a domain name.', example='10.0.XX.XX'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1656923760'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  order?: string(name='Order', description='The method that you want to use to sort the query results. Valid values:

*   **asc**
*   **desc** (default)', example='desc'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 10.', example='10'),
  port?: string(name='Port', description='The port number.', example='80'),
  privateIP?: string(name='PrivateIP', description='The private IP address of the ECS instance that initiates the outbound connection.', example='192.168.XX.XX'),
  publicIP?: string(name='PublicIP', description='The public IP address of the Elastic Compute Service (ECS) instance that initiates the outbound connection.', example='192.0.XX.XX'),
  sort?: string(name='Sort', description='The field based on which you want to sort the query results. Valid values:

*   **SessionCount** (default): the number of requests.
*   **TotalBytes**: the total volume of traffic.', example='SessionCount'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1656837360'),
  tagIdNew?: string(name='TagIdNew', description='The ID of the tag. Valid values:

*   **AliYun**: Alibaba Cloud service
*   **RiskDomain**: risky domain name
*   **RiskIP**: risky IP address
*   **TrustedDomain**: trusted website
*   **AliPay**: Alipay
*   **DingDing**: DingTalk
*   **WeChat**: WeChat
*   **QQ**: Tencent QQ
*   **SecurityService**: security service
*   **Microsoft**: Microsoft
*   **Amazon**: Amazon Web Services (AWS)
*   **Pan**: cloud disk
*   **Map**: map
*   **Code**: code hosting
*   **SystemService**: system service
*   **Taobao**: Taobao
*   **Google**: Google
*   **ThirdPartyService**: third-party service
*   **FirstFlow**: the first time
*   **Downloader**: malicious download
*   **Alexa Top1M**: popular website
*   **Miner**: mining pool
*   **Intelligence**: threat intelligence
*   **DDoS**: DDoS trojan
*   **Ransomware**: ransomware
*   **Spyware**: spyware
*   **Rogue**: rogue software
*   **Botnet**: botnet
*   **Suspicious**: suspicious website
*   **C\\\\&C**: command and control (C\\\\&C)
*   **Gang**: gang
*   **CVE**: Common Vulnerabilities and Exposures (CVE)
*   **Backdoor**: webshell
*   **Phishing**: phishing website
*   **APT**: advanced persistent threat (APT) attack
*   **Supply Chain Attack**: supply chain attack
*   **Malicious software**: malware', example='AliYun'),
}

model DescribeOutgoingDestinationIPResponseBody = {
  dstIPList?: [ 
    {
      aclCoverage?: string(name='AclCoverage', description='Indicates whether an access control policy is configured. Valid values:

*   **Uncovered**: no
*   **FullCoverage**: yes', example='Uncovered'),
      aclRecommendDetail?: string(name='AclRecommendDetail', description='The suggestion to configure an access control policy.', example='Allows the traffic.'),
      aclStatus?: string(name='AclStatus', description='The status of the access control policy. Valid values:

*   **normal**: healthy
*   **Abnormal**: unhealthy', example='Normal'),
      addressGroupList?: [ 
        {
          addressGroupName?: string(name='AddressGroupName', description='The name of the address book.', example='IP address book'),
          addressGroupUUID?: string(name='AddressGroupUUID', description='The UUID of the address book.', example='f04ac7ce-628b-4cb7-be61-310222b7****'),
        }
      ](name='AddressGroupList', description='The information about the address book.'),
      applicationPortList?: [ 
        {
          applicationName?: string(name='ApplicationName', description='The application type used in the access control policy. Valid values:

*   **FTP**
*   **HTTP**
*   **HTTPS**
*   **Memcache**
*   **MongoDB**
*   **MQTT**
*   **MySQL**
*   **RDP**
*   **Redis**
*   **SMTP**
*   **SMTPS**
*   **SSH**
*   **SSL_No_Cert**
*   **SSL**
*   **VNC**

>  The value of this parameter depends on the value of the Proto parameter. If you set Proto to TCP, you can set ApplicationNameList to any valid value. If you configure both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.', example='HTTP'),
          port?: int32(name='Port', description='The application port.', example='80'),
          unknownReason?: [ string ](name='UnknownReason', description='List of reasons for failing to analyze the protocol when it is identified as Unknown.'),
        }
      ](name='ApplicationPortList', description='The application ports.

>  Only the first 100 application ports are displayed.'),
      assetCount?: long(name='AssetCount', description='The outbound asset count.', example='20'),
      categoryClassId?: string(name='CategoryClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
      categoryId?: string(name='CategoryId', description='The ID of the service type. Valid values:

*   **Aliyun**: Alibaba Cloud services
*   **NotAliyun**: third-party services', example='Aliyun'),
      categoryName?: string(name='CategoryName', description='The type of the service to which the destination IP address belongs. Valid values:

*   **Alibaba Cloud services**
*   **Third-party services**', example='Alibaba Cloud services'),
      dstIP?: string(name='DstIP', description='The destination IP addresses in outbound connections.', example='10.0.XX.XX'),
      groupName?: string(name='GroupName', description='The name of the group to which the access control policy belongs.', example='Rule_test'),
      hasAcl?: string(name='HasAcl', description='Indicates whether an access control policy is configured. Valid values:

*   **true**
*   **false**', example='true'),
      hasAclRecommend?: boolean(name='HasAclRecommend', description='Indicates whether an access control policy is recommended. Valid values:

*   **true**
*   **false**', example='true'),
      inBytes?: long(name='InBytes', description='The inbound traffic. Unit: bytes.', example='472'),
      isMarkNormal?: boolean(name='IsMarkNormal', description='Indicates whether the destination IP address is added to a whitelist. Valid values:

*   **true**
*   **false**', example='true'),
      locationName?: string(name='LocationName', description='Location name.', example='Qingdao, Shandong'),
      outBytes?: long(name='OutBytes', description='The outbound traffic. Unit: bytes.', example='965'),
      privateAssetCount?: long(name='PrivateAssetCount', description='The outbound private asset count.', example='20'),
      ruleId?: string(name='RuleId', description='The UUID of the access control policy.', example='fadsfd-dfadf-df****'),
      ruleName?: string(name='RuleName', description='The name of the access control policy.', example='Default rule'),
      securityReason?: string(name='SecurityReason', description='The reason why the domain name is secure.', example='Intelligent policy: The destination domain name belongs to Alibaba Cloud Computing Co., Ltd. The domain name mainly provides services for Alibaba Cloud. No security risks are found, and you can add the domain name to the whitelist.'),
      securitySuggest?: string(name='SecuritySuggest', description='The suggestion to handle the traffic of the domain name in outbound connections. Valid values:

*   **pass**: allow
*   **alert**: deny
*   **drop**: monitor', example='pass'),
      sessionCount?: long(name='SessionCount', description='The number of requests.', example='4'),
      tagList?: [ 
        {
          classId?: string(name='ClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
          riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low.
*   **2**: medium.
*   **3**: high.', example='1'),
          tagDescribe?: string(name='TagDescribe', description='The description of the tag.', example='Tag that indicates traffic is allowed'),
          tagId?: string(name='TagId', description='The ID of the tag.', example='AliYun'),
          tagName?: string(name='TagName', description='The name of the tag.', example='Tag that indicates traffic is allowed'),
        }
      ](name='TagList', description='The tags.'),
      totalBytes?: string(name='TotalBytes', description='The total traffic. Unit: bytes', example='800'),
    }
  ](name='DstIPList', description='The IP addresses in outbound connections.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  totalCount?: int32(name='TotalCount', description='The total number of destination IP addresses in outbound connections.', example='50'),
}

model DescribeOutgoingDestinationIPResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingDestinationIPResponseBody(name='body'),
}

/**
 * @summary Get details of outgoing destination IPs
 *
 * @param request DescribeOutgoingDestinationIPRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingDestinationIPResponse
 */
async function describeOutgoingDestinationIPWithOptions(request: DescribeOutgoingDestinationIPRequest, runtime: Util.RuntimeOptions): DescribeOutgoingDestinationIPResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dstIP)) {
    query['DstIP'] = request.dstIP;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.privateIP)) {
    query['PrivateIP'] = request.privateIP;
  }
  if (!Util.isUnset(request.publicIP)) {
    query['PublicIP'] = request.publicIP;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tagIdNew)) {
    query['TagIdNew'] = request.tagIdNew;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingDestinationIP',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get details of outgoing destination IPs
 *
 * @param request DescribeOutgoingDestinationIPRequest
 * @return DescribeOutgoingDestinationIPResponse
 */
async function describeOutgoingDestinationIP(request: DescribeOutgoingDestinationIPRequest): DescribeOutgoingDestinationIPResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingDestinationIPWithOptions(request, runtime);
}

model DescribeOutgoingDomainRequest {
  categoryId?: string(name='CategoryId', description='The type of the service. This parameter is empty by default. Valid values:

*   **All**: all services
*   **RiskDomain**: risky domain names
*   **RiskIP**: risky IP addresses
*   **AliYun**: Alibaba Cloud services
*   **NotAliYun**: third-party services', example='All'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Default value: 1.', example='1'),
  dataType?: string(name='DataType', description='The source of traffic for statistics. Valid values:

*   **internet** (default): the Internet firewall.
*   **nat**: NAT firewalls.', example='nat'),
  domain?: string(name='Domain', description='The domain name in outbound connections.', example='www.aliyundoc.com'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1656750960'),
  isAITraffic?: string(name='IsAITraffic', description='Specifies whether to collect statistics only on AI service access traffic. Valid values:

*   **true**
*   **false** (default)', example='true'),
  lang?: string(name='Lang', description='The language of the content within the request. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  order?: string(name='Order', description='The method that you want to use to sort the query results. Valid values:

*   **asc**
*   **desc** (default)', example='desc'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 6. Maximum value: 100.', example='10'),
  publicIP?: string(name='PublicIP', description='The public IP address of the Elastic Compute Service (ECS) instance that initiates outbound connections.', example='192.0.XX.XX'),
  sort?: string(name='Sort', description='The field based on which you want to sort the query results. Valid values:

*   **SessionCount** (default): the number of requests.
*   **TotalBytes**: the total volume of traffic.', example='SessionCount'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1656664560'),
  tagIdNew?: string(name='TagIdNew', description='The ID of the tag. Valid values:

*   **AliYun**: Alibaba Cloud service
*   **RiskDomain**: risky domain name
*   **RiskIP**: risky IP address
*   **TrustedDomain**: trusted website
*   **AliPay**: Alipay
*   **DingDing**: DingTalk
*   **WeChat**: WeChat
*   **QQ**: Tencent QQ
*   **SecurityService**: security service
*   **Microsoft**: Microsoft
*   **Amazon**: Amazon Web Services (AWS)
*   **Pan**: cloud disk
*   **Map**: map
*   **Code**: code hosting
*   **SystemService**: system service
*   **Taobao**: Taobao
*   **Google**: Google
*   **ThirdPartyService**: third-party service
*   **FirstFlow**: the first time when an outbound connection is initiated
*   **Downloader**: malicious download
*   **Alexa Top1M**: popular website
*   **Miner**: mining pool
*   **Intelligence**: threat intelligence
*   **DDoS**: DDoS trojan
*   **Ransomware**: ransomware
*   **Spyware**: spyware
*   **Rogue**: rogue software
*   **Botnet**: botnet
*   **Suspicious**: suspicious website
*   **C\\\\&C**: command and control (C\\\\&C)
*   **Gang**: gang
*   **CVE**: Common Vulnerabilities and Exposures (CVE)
*   **Backdoor**: webshell
*   **Phishing**: phishing website
*   **APT**: advanced persistent threat (APT) attack
*   **Supply Chain Attack**: supply chain attack
*   **Malicious software**: malware', example='AliYun'),
}

model DescribeOutgoingDomainResponseBody = {
  domainList?: [ 
    {
      aclCoverage?: string(name='AclCoverage', description='Indicates whether an access control policy is configured. Valid values:

*   **Uncovered**: no
*   **FullCoverage**: yes', example='Uncovered'),
      aclRecommendDetail?: string(name='AclRecommendDetail', description='The suggestion in an access control policy.', example='Allows the traffic.'),
      aclStatus?: string(name='AclStatus', description='The state of the access control policy. Valid values:

*   **normal**: healthy
*   **abnormal**: unhealthy', example='Normal'),
      addressGroupName?: string(name='AddressGroupName', description='The name of the address book.', example='The address book for outbound connections'),
      addressGroupUUID?: string(name='AddressGroupUUID', description='The UUID of the address book.', example='fdad-fdafa-dafa-dfa****'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.'),
      assetCount?: long(name='AssetCount', description='The outbound asset count.', example='20'),
      business?: string(name='Business', description='The website service.', example='Alibaba Cloud'),
      categoryClassId?: string(name='CategoryClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
      categoryId?: string(name='CategoryId', description='The type ID of the service to which the domain name belongs. Valid values:

*   **Aliyun**: Alibaba Cloud services
*   **NotAliyun**: third-party services', example='Aliyun'),
      categoryName?: string(name='CategoryName', description='The type of the service to which the domain name belongs. Valid values:

*   **Alibaba Cloud services**
*   **Third-party services**', example='Alibaba Cloud services'),
      domain?: string(name='Domain', description='The domain name in outbound connections.', example='www.aliyundoc.com'),
      groupName?: string(name='GroupName', description='The name of the group to which the access control policy belongs.', example='Group of addresses in outbound connections'),
      hasAcl?: string(name='HasAcl', description='Indicates whether an `access control policy` is configured for the domain name. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      hasAclRecommend?: boolean(name='HasAclRecommend', description='Indicates whether an access control policy is recommended. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      inBytes?: long(name='InBytes', description='The volume of inbound traffic.', example='3214'),
      isMarkNormal?: boolean(name='IsMarkNormal', description='Indicates whether the domain name is marked as normal. Valid values:

*   **true**: normal
*   **false**: abnormal', example='true'),
      organization?: string(name='Organization', description='The name of the organization.', example='Alibaba Cloud Computing Co., Ltd.'),
      outBytes?: long(name='OutBytes', description='The volume of outbound traffic.', example='4582'),
      privateAssetCount?: long(name='PrivateAssetCount', description='The outbound private asset count.', example='20'),
      ruleId?: string(name='RuleId', description='The ID of the access control policy.', example='add-dfadf-f****'),
      ruleName?: string(name='RuleName', description='The name of the access control policy.', example='Default rule'),
      securityReason?: string(name='SecurityReason', description='The reason why the domain name is secure.', example='Intelligent policy: The destination domain name belongs to Alibaba Cloud Computing Co., Ltd. The domain name mainly provides services for Alibaba Cloud. No security risks are found, and you can add the domain name to the whitelist.'),
      securitySuggest?: string(name='SecuritySuggest', description='The suggestion to handle the traffic of the domain name in outbound connections. Valid values:

*   **pass**: allow
*   **alert**: monitor
*   **drop**: deny', example='pass'),
      sessionCount?: long(name='SessionCount', description='The number of requests.', example='12'),
      tagList?: [ 
        {
          classId?: string(name='ClassId', description='The type of the tag. Valid values:

*   **Suspicious**
*   **Malicious**
*   **Trusted**', example='Trusted'),
          riskLevel?: int32(name='RiskLevel', description='The risk level. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='3'),
          tagDescribe?: string(name='TagDescribe', description='The description of the tag.', example='Tag indicating that the domain name is added to the whitelist'),
          tagId?: string(name='TagId', description='The ID of the tag.', example='AliYun'),
          tagName?: string(name='TagName', description='The name of the tag.', example='Tag indicating that the domain name is added to the whitelist'),
        }
      ](name='TagList', description='An array that consists of tags.'),
      totalBytes?: string(name='TotalBytes', description='The total volume of traffic. Unit: bytes.', example='800'),
    }
  ](name='DomainList', description='The domain names in outbound connections.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  totalCount?: int32(name='TotalCount', description='The total number of the domain names in outbound connections.', example='132'),
}

model DescribeOutgoingDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingDomainResponseBody(name='body'),
}

/**
 * @summary Queries the information about the domain names in outbound connections.
 *
 * @param request DescribeOutgoingDomainRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingDomainResponse
 */
async function describeOutgoingDomainWithOptions(request: DescribeOutgoingDomainRequest, runtime: Util.RuntimeOptions): DescribeOutgoingDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.isAITraffic)) {
    query['IsAITraffic'] = request.isAITraffic;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.publicIP)) {
    query['PublicIP'] = request.publicIP;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tagIdNew)) {
    query['TagIdNew'] = request.tagIdNew;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingDomain',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about the domain names in outbound connections.
 *
 * @param request DescribeOutgoingDomainRequest
 * @return DescribeOutgoingDomainResponse
 */
async function describeOutgoingDomain(request: DescribeOutgoingDomainRequest): DescribeOutgoingDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingDomainWithOptions(request, runtime);
}

model DescribeOutgoingDomainDetailRequest {
  aclCoverage?: string(name='AclCoverage', example='FullCoverage'),
  currentPage?: string(name='CurrentPage', example='1'),
  domain?: string(name='Domain', example='example.com'),
  domainList?: [ string ](name='DomainList'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1733450528'),
  IPType?: string(name='IPType', example='NatPrivate'),
  lang?: string(name='Lang', example='zh'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-uf62zzi7000bca7zn****'),
  order?: string(name='Order', example='desc'),
  pageSize?: string(name='PageSize', example='10'),
  privateIP?: string(name='PrivateIP', example='10.210.0.XXX'),
  publicIP?: string(name='PublicIP', example='47.96.181.XXX'),
  sort?: string(name='Sort', example='OutBytes'),
  sourceIp?: string(name='SourceIp', example='121.15.137.XXX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1753617600'),
  tagId?: string(name='TagId', example='FirstFlow'),
}

model DescribeOutgoingDomainDetailResponseBody = {
  applicationNameList?: [ string ](name='ApplicationNameList'),
  assetList?: [ 
    {
      aclCoverage?: string(name='AclCoverage', example='FullCoverage'),
      domain?: string(name='Domain', example='example.com'),
      firstTime?: int32(name='FirstTime', example='1738548990'),
      inBytes?: long(name='InBytes', example='244438.0'),
      ipsHitCnt?: long(name='IpsHitCnt', example='32'),
      lastTime?: int32(name='LastTime', example='1739326614'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-bp1utx6wj4x9qu9tl****'),
      natGatewayName?: string(name='NatGatewayName', example='ngw-test'),
      outBytes?: long(name='OutBytes', example='100'),
      privateIP?: string(name='PrivateIP', example='10.21.242XXX'),
      publicIP?: string(name='PublicIP', example='47.96.181.XXX'),
      regionNo?: string(name='RegionNo', example='cn-beijing'),
      resourceInstanceId?: string(name='ResourceInstanceId', example='i-uf63wjhyoohc1g4z****'),
      resourceInstanceName?: string(name='ResourceInstanceName', example='test'),
      resourceType?: string(name='ResourceType', example='NatEIP'),
      ruleId?: string(name='RuleId', example='08a58465-ff4d-4c47-8782-eb008301****'),
      ruleName?: string(name='RuleName', example='test'),
      sessionCount?: long(name='SessionCount', example='10'),
      tagList?: [ 
        {
          classId?: string(name='ClassId', example='3'),
          riskLevel?: int32(name='RiskLevel', example='0'),
          tagDescribe?: string(name='TagDescribe', example='test'),
          tagId?: string(name='TagId', example='FirstFlow'),
          tagName?: string(name='TagName', example='test'),
        }
      ](name='TagList'),
      totalBytes?: string(name='TotalBytes', example='321120825843'),
      vpcId?: string(name='VpcId', example='vpc-9dp16jgwgyvn****'),
    }
  ](name='AssetList'),
  requestId?: string(name='RequestId', example='98AF5888-9606-59CF-888F-032A9ED0****'),
  totalCount?: int32(name='TotalCount', example='8'),
}

model DescribeOutgoingDomainDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingDomainDetailResponseBody(name='body'),
}

/**
 * @summary 获取外联域名详情
 *
 * @param request DescribeOutgoingDomainDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingDomainDetailResponse
 */
async function describeOutgoingDomainDetailWithOptions(request: DescribeOutgoingDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeOutgoingDomainDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclCoverage)) {
    query['AclCoverage'] = request.aclCoverage;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.domainList)) {
    query['DomainList'] = request.domainList;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.IPType)) {
    query['IPType'] = request.IPType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.privateIP)) {
    query['PrivateIP'] = request.privateIP;
  }
  if (!Util.isUnset(request.publicIP)) {
    query['PublicIP'] = request.publicIP;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingDomainDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取外联域名详情
 *
 * @param request DescribeOutgoingDomainDetailRequest
 * @return DescribeOutgoingDomainDetailResponse
 */
async function describeOutgoingDomainDetail(request: DescribeOutgoingDomainDetailRequest): DescribeOutgoingDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingDomainDetailWithOptions(request, runtime);
}

model DescribeOutgoingStatisticRequest {
  endTime?: string(name='EndTime', description='This parameter is required.', example='1734920543'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='117.32.136.XXX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1746554400'),
}

model DescribeOutgoingStatisticResponseBody = {
  ignoreAssetCount?: int32(name='IgnoreAssetCount', example='0'),
  ignoreDomainCount?: int32(name='IgnoreDomainCount', example='10'),
  ignoreDstIPCount?: int32(name='IgnoreDstIPCount', example='0'),
  privateRiskAssetCount?: long(name='PrivateRiskAssetCount', example='0'),
  privateTotalAssetCount?: long(name='PrivateTotalAssetCount', example='0'),
  requestId?: string(name='RequestId', example='E2BD70F4-48BF-5EFD-B103-F0763E27*****'),
  riskAssetCount?: int32(name='RiskAssetCount', example='0'),
  riskDomainCount?: int32(name='RiskDomainCount', example='1'),
  riskDstIPCount?: int32(name='RiskDstIPCount', example='1'),
  subscribeAssetCount?: int32(name='SubscribeAssetCount', example='0'),
  subscribeDomainCount?: int32(name='SubscribeDomainCount', example='10'),
  subscribeDstIPCount?: int32(name='SubscribeDstIPCount', example='10'),
  totalAssetCount?: int32(name='TotalAssetCount', example='13'),
  totalDomainCount?: int32(name='TotalDomainCount', example='10'),
  totalDstIPCount?: int32(name='TotalDstIPCount', example='107'),
  totalProtocolCount?: int32(name='TotalProtocolCount', example='10'),
  uncoveredAclDomain?: int32(name='UncoveredAclDomain', example='0'),
  uncoveredAclDstIP?: int32(name='UncoveredAclDstIP', example='10'),
  unknownProtocolRadio?: string(name='UnknownProtocolRadio', example='20.13'),
}

model DescribeOutgoingStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingStatisticResponseBody(name='body'),
}

/**
 * @summary 获取外联统计
 *
 * @param request DescribeOutgoingStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingStatisticResponse
 */
async function describeOutgoingStatisticWithOptions(request: DescribeOutgoingStatisticRequest, runtime: Util.RuntimeOptions): DescribeOutgoingStatisticResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingStatistic',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取外联统计
 *
 * @param request DescribeOutgoingStatisticRequest
 * @return DescribeOutgoingStatisticResponse
 */
async function describeOutgoingStatistic(request: DescribeOutgoingStatisticRequest): DescribeOutgoingStatisticResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingStatisticWithOptions(request, runtime);
}

model DescribeOutgoingTagRequest {
  dstType?: string(name='DstType', example='Domain'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1749003483'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='60.179.226.XXX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1743646544'),
  tagId?: string(name='TagId', example='103208'),
}

model DescribeOutgoingTagResponseBody = {
  requestId?: string(name='RequestId', example='B532203E-813B-5BEB-B75B-315E1D08****'),
  tagList?: [ 
    {
      classId?: string(name='ClassId', example='Trusted'),
      riskLevel?: int32(name='RiskLevel', example='0'),
      tagDescribe?: string(name='TagDescribe', example='test describe'),
      tagId?: string(name='TagId', example='tag-6833388d18cc****'),
      tagName?: string(name='TagName', example='test tag'),
    }
  ](name='TagList'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeOutgoingTagResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeOutgoingTagResponseBody(name='body'),
}

/**
 * @summary 获取外联标签
 *
 * @param request DescribeOutgoingTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeOutgoingTagResponse
 */
async function describeOutgoingTagWithOptions(request: DescribeOutgoingTagRequest, runtime: Util.RuntimeOptions): DescribeOutgoingTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstType)) {
    query['DstType'] = request.dstType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tagId)) {
    query['TagId'] = request.tagId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOutgoingTag',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取外联标签
 *
 * @param request DescribeOutgoingTagRequest
 * @return DescribeOutgoingTagResponse
 */
async function describeOutgoingTag(request: DescribeOutgoingTagRequest): DescribeOutgoingTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOutgoingTagWithOptions(request, runtime);
}

model DescribePageDocumentsRequest {
  lang?: string(name='Lang', example='zh'),
  pageName?: string(name='PageName', description='This parameter is required.', example='overview'),
  sourceCode?: string(name='SourceCode', description='This parameter is required.', example='yundun'),
  sourceIp?: string(name='SourceIp', example='223.167.221.XXX'),
  tabName?: string(name='TabName', description='This parameter is required.', example='internet'),
}

model DescribePageDocumentsResponseBody = {
  docs?: [ 
    {
      title?: string(name='Title', example='test'),
      url?: string(name='Url', example='https://notify-center-test.ybaobx.com/webhook/arms'),
    }
  ](name='Docs'),
  imageUrl?: string(name='ImageUrl', example='https://img.alicdn.com/tfs/TB1E4FCAuT2gK0jSZFvXXXnFXXa-3399-662.png'),
  module?: string(name='Module', example='sg_server'),
  more?: {
    title?: string(name='Title', example='test'),
    url?: string(name='Url', example='https://zjysfy.womanhospital.cn/pub/hos/0/noneBackGround.png'),
  }(name='More'),
  requestId?: string(name='RequestId', example='7C81E1AD-08C0-5E09-853B-FDC77B90****'),
}

model DescribePageDocumentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePageDocumentsResponseBody(name='body'),
}

/**
 * @summary 获取文档
 *
 * @param request DescribePageDocumentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePageDocumentsResponse
 */
async function describePageDocumentsWithOptions(request: DescribePageDocumentsRequest, runtime: Util.RuntimeOptions): DescribePageDocumentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageName)) {
    query['PageName'] = request.pageName;
  }
  if (!Util.isUnset(request.sourceCode)) {
    query['SourceCode'] = request.sourceCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tabName)) {
    query['TabName'] = request.tabName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePageDocuments',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取文档
 *
 * @param request DescribePageDocumentsRequest
 * @return DescribePageDocumentsResponse
 */
async function describePageDocuments(request: DescribePageDocumentsRequest): DescribePageDocumentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePageDocumentsWithOptions(request, runtime);
}

model DescribePolicyAdvancedConfigRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model DescribePolicyAdvancedConfigResponseBody = {
  internetSwitch?: string(name='InternetSwitch', description='Indicates whether the strict mode is enabled for the access control policy. Valid values:

*   **on**: The strict mode is enabled.
*   **off**: The strict mode is disabled.', example='off'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model DescribePolicyAdvancedConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePolicyAdvancedConfigResponseBody(name='body'),
}

/**
 * @summary Queries whether the strict mode is enabled for an access control policy.
 *
 * @description You can call the DescribePolicyAdvancedConfig operation to query whether the strict mode is enabled for an access control policy.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribePolicyAdvancedConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePolicyAdvancedConfigResponse
 */
async function describePolicyAdvancedConfigWithOptions(request: DescribePolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): DescribePolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyAdvancedConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries whether the strict mode is enabled for an access control policy.
 *
 * @description You can call the DescribePolicyAdvancedConfig operation to query whether the strict mode is enabled for an access control policy.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribePolicyAdvancedConfigRequest
 * @return DescribePolicyAdvancedConfigResponse
 */
async function describePolicyAdvancedConfig(request: DescribePolicyAdvancedConfigRequest): DescribePolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyAdvancedConfigWithOptions(request, runtime);
}

model DescribePolicyPriorUsedRequest {
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **in**: inbound.
*   **out**: outbound.

This parameter is required.', example='in'),
  ipVersion?: string(name='IpVersion', description='The IP version of the asset that is protected by Cloud Firewall.

Valid values:

*   **4** (default): IPv4.
*   **6**: IPv6.', example='6'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model DescribePolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority of existing access control policies.

>  The value -1 indicates the lowest priority.', example='150'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  start?: int32(name='Start', description='The highest priority of existing access control policies.

>  The value 0 indicates the highest priority.', example='-1'),
}

model DescribePolicyPriorUsedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePolicyPriorUsedResponseBody(name='body'),
}

/**
 * @summary Queries the priority range of access control policies.
 *
 * @description You can call this operation to query the priority range of the access control policies that match specific query conditions.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribePolicyPriorUsedRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePolicyPriorUsedResponse
 */
async function describePolicyPriorUsedWithOptions(request: DescribePolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribePolicyPriorUsedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePolicyPriorUsed',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the priority range of access control policies.
 *
 * @description You can call this operation to query the priority range of the access control policies that match specific query conditions.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribePolicyPriorUsedRequest
 * @return DescribePolicyPriorUsedResponse
 */
async function describePolicyPriorUsed(request: DescribePolicyPriorUsedRequest): DescribePolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePolicyPriorUsedWithOptions(request, runtime);
}

model DescribePostpayTrafficDetailRequest {
  currentPage?: long(name='CurrentPage', description='The page number. Default value: 1.', example='1'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify a value in the YYYYMMDD format.

This parameter is required.', example='20230130'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  order?: string(name='Order', description='The field based on which you want to sort the query results. Valid values:

*   **resourceId**
*   **trafficDay**', example='resourceId'),
  pageSize?: long(name='PageSize', description='The number of entries per page. Default value: 10. Maximum value: 50.', example='10'),
  regionNo?: string(name='RegionNo', description='The region ID.', example='cn-beijing'),
  searchItem?: string(name='SearchItem', description='The instance ID or the IP address of the asset.', example='192.0.XX.XX'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify a value in the YYYYMMDD format.

This parameter is required.', example='20230101'),
  trafficType?: string(name='TrafficType', description='The traffic type. This parameter is required. Valid values:

*   **EIP_TRAFFIC**: traffic for the Internet firewall.
*   **NatGateway_TRAFFIC**: traffic for NAT firewalls.
*   **VPC_TRAFFIC**: traffic for virtual private cloud (VPC) firewalls.

This parameter is required.', example='EIP_TRAFFIC'),
}

model DescribePostpayTrafficDetailResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0525EADE-C112-5702-A5BC-0E2F6F94DB23'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='132'),
  trafficList?: [ 
    {
      inBytes?: long(name='InBytes', description='The inbound network throughput, which indicates the total number of bytes that are received Unit: bytes.', example='1115096939'),
      instanceId?: string(name='InstanceId', description='The instance ID of the asset.', example='i-8vb2d7c9mtn0bo9qcraq'),
      instanceType?: string(name='InstanceType', description='The asset type. This value takes effect only for the Internet firewall.', example='EcsPublicIP'),
      outBytes?: long(name='OutBytes', description='The outbound network throughput, which indicates the total number of bytes that are sent. Unit: bytes.', example='100000000'),
      protectionDuration?: long(name='ProtectionDuration', description='Protection duration. Unit: hours.', example='20'),
      regionNo?: string(name='RegionNo', description='The region ID.', example='cn-beijing'),
      resourceId?: string(name='ResourceId', description='The resource ID. The resource ID for the Internet firewall is the public IP address that is protected the Internet firewall, and the resource ID for a NAT firewall is the instance ID of the NAT firewall.', example='39.106.146.214'),
      totalBytes?: long(name='TotalBytes', description='The total inbound and outbound network throughput, which indicates the total number of bytes that are received and sent. Unit: bytes.', example='1215096939'),
      trafficDay?: string(name='TrafficDay', description='The date on which the statistics are collected.', example='20231001'),
      trafficType?: string(name='TrafficType', description='The traffic type. Valid values:

*   **EIP_TRAFFIC**: traffic for the Internet firewall
*   **NatGateway_TRAFFIC**: traffic for NAT firewalls
*   **VPC_TRAFFIC**: traffic for VPC firewalls', example='EIP_TRAFFIC'),
    }
  ](name='TrafficList', description='The statistics on traffic.'),
}

model DescribePostpayTrafficDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePostpayTrafficDetailResponseBody(name='body'),
}

/**
 * @summary Queries the details of traffic billed based on the pay-as-you-go billing method.
 *
 * @description If you use Cloud Firewall that uses the pay-as-you-go billing method, you can call this operation to query traffic details accurate to the granularity of specific resource instances. If you use Cloud Firewall that uses the subscription billing method, you can call this operation to query the overall traffic details.
 *
 * @param request DescribePostpayTrafficDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePostpayTrafficDetailResponse
 */
async function describePostpayTrafficDetailWithOptions(request: DescribePostpayTrafficDetailRequest, runtime: Util.RuntimeOptions): DescribePostpayTrafficDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.searchItem)) {
    query['SearchItem'] = request.searchItem;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.trafficType)) {
    query['TrafficType'] = request.trafficType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePostpayTrafficDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of traffic billed based on the pay-as-you-go billing method.
 *
 * @description If you use Cloud Firewall that uses the pay-as-you-go billing method, you can call this operation to query traffic details accurate to the granularity of specific resource instances. If you use Cloud Firewall that uses the subscription billing method, you can call this operation to query the overall traffic details.
 *
 * @param request DescribePostpayTrafficDetailRequest
 * @return DescribePostpayTrafficDetailResponse
 */
async function describePostpayTrafficDetail(request: DescribePostpayTrafficDetailRequest): DescribePostpayTrafficDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostpayTrafficDetailWithOptions(request, runtime);
}

model DescribePostpayTrafficTotalRequest {
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
}

model DescribePostpayTrafficTotalResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='826B6280-9704-5643-97B1-6B47AC3F027A'),
  totalAssets?: long(name='TotalAssets', description='The total number of assets protected all types of firewalls.', example='132'),
  totalBillTraffic?: long(name='TotalBillTraffic', description='The volume of burstable protected traffic for which fees are generated. Unit: bytes.', example='2320274874426'),
  totalInternetAssets?: long(name='TotalInternetAssets', description='The total number of assets protected by the Internet firewall.', example='128'),
  totalInternetTraffic?: long(name='TotalInternetTraffic', description='The total traffic for the Internet firewall. If you use Cloud Firewall that uses the subscription billing method, this parameter indicates the total volume of burstable protected traffic on the Internet boundary. Unit: bytes.', example='2320274874426'),
  totalNatAssets?: long(name='TotalNatAssets', description='The total number of assets protected by NAT firewalls.', example='1'),
  totalNatTraffic?: long(name='TotalNatTraffic', description='The total traffic for NAT firewalls. If you use Cloud Firewall that uses the subscription billing method, this parameter indicates the total volume of burstable protected traffic on the NAT boundary. Unit: bytes.', example='560646279'),
  totalSdlBillTraffic?: long(name='TotalSdlBillTraffic', description='Data Leak Detection Total Fee Flow.', example='22879916142'),
  totalSdlFreeTraffic?: long(name='TotalSdlFreeTraffic', description='Data Leak Detection Total free usage traffic.', example='0'),
  totalTraffic?: long(name='TotalTraffic', description='The total volume of traffic. If you use Cloud Firewall that uses the subscription billing method, this parameter indicates the total volume of burstable protected traffic. Unit: bytes.', example='2320274874426'),
  totalVpcAssets?: long(name='TotalVpcAssets', description='The total number of assets protected by virtual private cloud (VPC) firewalls.', example='3'),
  totalVpcTraffic?: long(name='TotalVpcTraffic', description='The total traffic for VPC firewalls. If you use Cloud Firewall that uses the subscription billing method, this parameter indicates the total volume of burstable protected traffic on the VPC boundary. Unit: bytes.', example='2320274874426'),
}

model DescribePostpayTrafficTotalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePostpayTrafficTotalResponseBody(name='body'),
}

/**
 * @summary Queries the total volume of traffic that is billed based on the pay-as-you-go billing method, including all firewalls within the current account.
 *
 * @description You can call this operation to query statistics of the current Cloud Firewall from the date of purchase.
 *
 * @param request DescribePostpayTrafficTotalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePostpayTrafficTotalResponse
 */
async function describePostpayTrafficTotalWithOptions(request: DescribePostpayTrafficTotalRequest, runtime: Util.RuntimeOptions): DescribePostpayTrafficTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePostpayTrafficTotal',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the total volume of traffic that is billed based on the pay-as-you-go billing method, including all firewalls within the current account.
 *
 * @description You can call this operation to query statistics of the current Cloud Firewall from the date of purchase.
 *
 * @param request DescribePostpayTrafficTotalRequest
 * @return DescribePostpayTrafficTotalResponse
 */
async function describePostpayTrafficTotal(request: DescribePostpayTrafficTotalRequest): DescribePostpayTrafficTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostpayTrafficTotalWithOptions(request, runtime);
}

model DescribePostpayUserInternetStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-zsk39m******'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
}

model DescribePostpayUserInternetStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='0DC783F1-B3A7-578D-8A63-*****'),
  status?: string(name='Status', description='The status of the Internet Firewall feature. Valid values:

*   **open**: enabled
*   **init**: being enabled
*   **closed**: disabled', example='open'),
  unprotectedDate?: long(name='UnprotectedDate', description='The number of days during which no asset is added to the Internet Firewall feature for protection. This parameter is valid only when the value of Status is open.', example='20'),
}

model DescribePostpayUserInternetStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePostpayUserInternetStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of the Internet Firewall feature in Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserInternetStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePostpayUserInternetStatusResponse
 */
async function describePostpayUserInternetStatusWithOptions(request: DescribePostpayUserInternetStatusRequest, runtime: Util.RuntimeOptions): DescribePostpayUserInternetStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePostpayUserInternetStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status of the Internet Firewall feature in Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserInternetStatusRequest
 * @return DescribePostpayUserInternetStatusResponse
 */
async function describePostpayUserInternetStatus(request: DescribePostpayUserInternetStatusRequest): DescribePostpayUserInternetStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostpayUserInternetStatusWithOptions(request, runtime);
}

model DescribePostpayUserNatStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-zsk39m******'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
}

model DescribePostpayUserNatStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='6B780BD6-282C-51A9-A8E6-59F636******'),
  status?: string(name='Status', description='The status of the NAT Firewall feature. Valid values:

*   **open**: enabled
*   **init**: being enabled
*   **closed**: disabled', example='open'),
  unprotectedDate?: long(name='UnprotectedDate', description='The number of days during which no asset is added to the NAT Firewall feature for protection. This parameter is valid only when the value of Status is open.', example='20'),
}

model DescribePostpayUserNatStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePostpayUserNatStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of the NAT Firewall feature in Cloud Firewall that use the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserNatStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePostpayUserNatStatusResponse
 */
async function describePostpayUserNatStatusWithOptions(request: DescribePostpayUserNatStatusRequest, runtime: Util.RuntimeOptions): DescribePostpayUserNatStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePostpayUserNatStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status of the NAT Firewall feature in Cloud Firewall that use the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserNatStatusRequest
 * @return DescribePostpayUserNatStatusResponse
 */
async function describePostpayUserNatStatus(request: DescribePostpayUserNatStatusRequest): DescribePostpayUserNatStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostpayUserNatStatusWithOptions(request, runtime);
}

model DescribePostpayUserVpcStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-************'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
}

model DescribePostpayUserVpcStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='7447795A-39AB-52CB-8F92-128DF******'),
  status?: string(name='Status', description='The status of the VPC Firewall feature. Valid values:

*   **open**: enabled
*   **init**: being enabled
*   **closed**: disabled', example='open'),
  unprotectedDate?: long(name='UnprotectedDate', description='The number of days during which no asset is added to the VPC Firewall feature for protection. This parameter is valid only when the value of Status is open.', example='20'),
}

model DescribePostpayUserVpcStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePostpayUserVpcStatusResponseBody(name='body'),
}

/**
 * @summary Queries the status of the virtual private cloud (VPC) Firewall feature in Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserVpcStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePostpayUserVpcStatusResponse
 */
async function describePostpayUserVpcStatusWithOptions(request: DescribePostpayUserVpcStatusRequest, runtime: Util.RuntimeOptions): DescribePostpayUserVpcStatusResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePostpayUserVpcStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the status of the virtual private cloud (VPC) Firewall feature in Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request DescribePostpayUserVpcStatusRequest
 * @return DescribePostpayUserVpcStatusResponse
 */
async function describePostpayUserVpcStatus(request: DescribePostpayUserVpcStatusRequest): DescribePostpayUserVpcStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePostpayUserVpcStatusWithOptions(request, runtime);
}

model DescribePrefixListsRequest {
  regionNo?: string(name='RegionNo', description='The region ID of the instance.

This parameter is required.', example='cn-shenzhen'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='47.100.XX.XX'),
}

model DescribePrefixListsResponseBody = {
  prefixList?: [ 
    {
      addressFamily?: string(name='AddressFamily', description='The IP address family of the prefix list. Valid values:

*   IPv4
*   IPv6', example='IPv4'),
      associationCount?: int32(name='AssociationCount', description='The number of associated resources.', example='2'),
      creationTime?: string(name='CreationTime', description='The creation time.', example='2023-10-16T08:31:06Z'),
      description?: string(name='Description', description='The description.', example='TCP_14900-14911'),
      maxEntries?: int32(name='MaxEntries', description='The maximum number of entries in the prefix list.', example='20'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-uf64nco3ujjqchx6aaji'),
      prefixListName?: string(name='PrefixListName', description='The name of the prefix list.', example='participant-name'),
    }
  ](name='PrefixList', description='Details about the prefix lists.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='67FD76C2-C493-5815-8107-643FD7AB77C7'),
}

model DescribePrefixListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrefixListsResponseBody(name='body'),
}

/**
 * @summary Queries prefix lists.
 *
 * @param request DescribePrefixListsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrefixListsResponse
 */
async function describePrefixListsWithOptions(request: DescribePrefixListsRequest, runtime: Util.RuntimeOptions): DescribePrefixListsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrefixLists',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries prefix lists.
 *
 * @param request DescribePrefixListsRequest
 * @return DescribePrefixListsResponse
 */
async function describePrefixLists(request: DescribePrefixListsRequest): DescribePrefixListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrefixListsWithOptions(request, runtime);
}

model DescribePrivateDnsDomainNameListRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  domainName?: string(name='DomainName', example='example.com'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
}

model DescribePrivateDnsDomainNameListResponseBody = {
  domainNameList?: [ string ](name='DomainNameList'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='822B9125-6E1A-551C-8EAF-6E7AE74****'),
  totalCount?: long(name='TotalCount', example='132'),
}

model DescribePrivateDnsDomainNameListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateDnsDomainNameListResponseBody(name='body'),
}

/**
 * @summary 查询私网DNS域名列表
 *
 * @param request DescribePrivateDnsDomainNameListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrivateDnsDomainNameListResponse
 */
async function describePrivateDnsDomainNameListWithOptions(request: DescribePrivateDnsDomainNameListRequest, runtime: Util.RuntimeOptions): DescribePrivateDnsDomainNameListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrivateDnsDomainNameList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询私网DNS域名列表
 *
 * @param request DescribePrivateDnsDomainNameListRequest
 * @return DescribePrivateDnsDomainNameListResponse
 */
async function describePrivateDnsDomainNameList(request: DescribePrivateDnsDomainNameListRequest): DescribePrivateDnsDomainNameListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrivateDnsDomainNameListWithOptions(request, runtime);
}

model DescribePrivateDnsEndpointDetailRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
}

model DescribePrivateDnsEndpointDetailResponseBody = {
  accessInstanceId?: string(name='AccessInstanceId', example='pd-12345'),
  accessInstanceName?: string(name='AccessInstanceName'),
  aliUid?: long(name='AliUid', example='119898001566xxxx'),
  endpointId?: string(name='EndpointId', example='ep-1nmi412c28c374****'),
  firewallType?: [ string ](name='FirewallType'),
  gmtCreate?: long(name='GmtCreate', example='1715075765'),
  ipProtocol?: string(name='IpProtocol', example='tcp'),
  memberUid?: long(name='MemberUid', example='258039427902****'),
  port?: int32(name='Port', example='80'),
  primaryDns?: string(name='PrimaryDns', example='1.1.1.1'),
  primaryVSwitchId?: string(name='PrimaryVSwitchId', example='vsw-8vbno9zxz8j9qiot****'),
  primaryVSwitchIp?: string(name='PrimaryVSwitchIp', example='10.1.1.1'),
  primaryZoneId?: string(name='PrimaryZoneId', example='cn-shenzhen-d'),
  privateDnsType?: string(name='PrivateDnsType', example='Custom'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='4E7F94C7-781F-5192-86CF-DB0850****'),
  standbyDns?: string(name='StandbyDns', example='1.1.1.2'),
  standbyVSwitchId?: string(name='StandbyVSwitchId', example='vsw-8vb6jk75wfcwnuq****'),
  standbyVSwitchIp?: string(name='StandbyVSwitchIp', example='10.1.1.2'),
  standbyZoneId?: string(name='StandbyZoneId', example='cn-shenzhen-e'),
  status?: string(name='Status', example='normal'),
  taskId?: string(name='TaskId', example='132'),
  vpcId?: string(name='VpcId', example='vpc-uf6b5lyul0x******'),
}

model DescribePrivateDnsEndpointDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateDnsEndpointDetailResponseBody(name='body'),
}

/**
 * @summary 查询私网DNS终端节点详情
 *
 * @param request DescribePrivateDnsEndpointDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrivateDnsEndpointDetailResponse
 */
async function describePrivateDnsEndpointDetailWithOptions(request: DescribePrivateDnsEndpointDetailRequest, runtime: Util.RuntimeOptions): DescribePrivateDnsEndpointDetailResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrivateDnsEndpointDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询私网DNS终端节点详情
 *
 * @param request DescribePrivateDnsEndpointDetailRequest
 * @return DescribePrivateDnsEndpointDetailResponse
 */
async function describePrivateDnsEndpointDetail(request: DescribePrivateDnsEndpointDetailRequest): DescribePrivateDnsEndpointDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrivateDnsEndpointDetailWithOptions(request, runtime);
}

model DescribePrivateDnsEndpointListRequest {
  accessInstanceId?: string(name='AccessInstanceId', example='pd-12345'),
  accessInstanceName?: string(name='AccessInstanceName'),
  firewallType?: string(name='FirewallType', example='vpc'),
  memberUid?: long(name='MemberUid', example='135809047715****'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
  status?: string(name='Status', example='normal'),
  vpcId?: string(name='VpcId', example='vpc-8vbwbo90rq0anm6t****'),
}

model DescribePrivateDnsEndpointListResponseBody = {
  accessInstanceList?: [ 
    {
      accessInstanceId?: string(name='AccessInstanceId', example='123'),
      accessInstanceName?: string(name='AccessInstanceName', example='test'),
      aliUid?: long(name='AliUid', example='1379490574415****'),
      domainNameCount?: long(name='DomainNameCount', example='3'),
      firewallType?: [ string ](name='FirewallType'),
      gmtCreate?: long(name='GmtCreate', example='1715075765'),
      ipProtocol?: int32(name='IpProtocol', example='tcp'),
      memberUid?: long(name='MemberUid', example='1844802493****'),
      port?: int32(name='Port', example='443'),
      primaryDns?: string(name='PrimaryDns', example='1.1.1.1'),
      privateDnsType?: string(name='PrivateDnsType', example='Custom'),
      regionNo?: string(name='RegionNo', example='cn-hangzhou'),
      standbyDns?: string(name='StandbyDns', example='1.1.1.2'),
      status?: int32(name='Status', example='normal'),
      taskId?: string(name='TaskId', example='123'),
      vpcId?: string(name='VpcId', example='vpc-2zelphbaourpun****'),
    }
  ](name='AccessInstanceList'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='850A84D6-0DE4-4797-A1E8-00090****'),
  totalCount?: long(name='TotalCount', example='3'),
}

model DescribePrivateDnsEndpointListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePrivateDnsEndpointListResponseBody(name='body'),
}

/**
 * @summary 查询私网DNS终端节点列表
 *
 * @param request DescribePrivateDnsEndpointListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribePrivateDnsEndpointListResponse
 */
async function describePrivateDnsEndpointListWithOptions(request: DescribePrivateDnsEndpointListRequest, runtime: Util.RuntimeOptions): DescribePrivateDnsEndpointListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePrivateDnsEndpointList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询私网DNS终端节点列表
 *
 * @param request DescribePrivateDnsEndpointListRequest
 * @return DescribePrivateDnsEndpointListResponse
 */
async function describePrivateDnsEndpointList(request: DescribePrivateDnsEndpointListRequest): DescribePrivateDnsEndpointListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrivateDnsEndpointListWithOptions(request, runtime);
}

model DescribeRegionInfoRequest {
  lang?: string(name='Lang', example='zh'),
  sourceCode?: string(name='SourceCode', description='This parameter is required.', example='yundun'),
  sourceIp?: string(name='SourceIp', example='59.82.59.XX'),
}

model DescribeRegionInfoResponseBody = {
  dataList?: [ 
    {
      regionId?: string(name='RegionId', example='cn-shanghai'),
      regionName?: string(name='RegionName'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId', example='25E655B0-CAED-53D4-8054-F983126****'),
  totalCount?: int32(name='TotalCount', example='8'),
}

model DescribeRegionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionInfoResponseBody(name='body'),
}

/**
 * @summary 获取地域信息
 *
 * @param request DescribeRegionInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRegionInfoResponse
 */
async function describeRegionInfoWithOptions(request: DescribeRegionInfoRequest, runtime: Util.RuntimeOptions): DescribeRegionInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceCode)) {
    query['SourceCode'] = request.sourceCode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegionInfo',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取地域信息
 *
 * @param request DescribeRegionInfoRequest
 * @return DescribeRegionInfoResponse
 */
async function describeRegionInfo(request: DescribeRegionInfoRequest): DescribeRegionInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionInfoWithOptions(request, runtime);
}

model DescribeResourceTypeAutoEnableRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeResourceTypeAutoEnableResponseBody = {
  requestId?: string(name='RequestId', example='7447795A-39AB-52CB-8F92-128DF******'),
  resourceTypeAutoEnable?: map[string]boolean(name='ResourceTypeAutoEnable'),
}

model DescribeResourceTypeAutoEnableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeResourceTypeAutoEnableResponseBody(name='body'),
}

/**
 * @summary 查询资产类型默认引流
 *
 * @param request DescribeResourceTypeAutoEnableRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeResourceTypeAutoEnableResponse
 */
async function describeResourceTypeAutoEnableWithOptions(request: DescribeResourceTypeAutoEnableRequest, runtime: Util.RuntimeOptions): DescribeResourceTypeAutoEnableResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceTypeAutoEnable',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询资产类型默认引流
 *
 * @param request DescribeResourceTypeAutoEnableRequest
 * @return DescribeResourceTypeAutoEnableResponse
 */
async function describeResourceTypeAutoEnable(request: DescribeResourceTypeAutoEnableRequest): DescribeResourceTypeAutoEnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceTypeAutoEnableWithOptions(request, runtime);
}

model DescribeRiskEventGroupRequest {
  attackApp?: [ string ](name='AttackApp', description='The names of the attacked applications. Set the value in the `["AttackApp1","AttackApp2"]` format.', example='["MySql","DNS"]'),
  attackAppCategory?: [ string ](name='AttackAppCategory', description='A list of categories of attacked applications, expressed in the format ["AttackAppCategory1","AttackAppCategory2"].'),
  attackType?: string(name='AttackType', description='The attack type of the intrusion events. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leak
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: trojan backdoor
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell

> If you do not specify this parameter, the intrusion events of all attack types are queried.', example='1'),
  buyVersion?: long(name='BuyVersion', description='The edition of Cloud Firewall that you purchase. Valid values:

*   **2**: Premium Edition
*   **3**: Enterprise Edition
*   **4**: Ultimate Edition
*   **10**: Cloud Firewall that uses the pay-as-you-go billing method', example='10'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  dataType?: string(name='DataType', description='The type of the risk events.\\\\
Set the value to **session**, which indicates intrusion events.

This parameter is required.', example='session'),
  direction?: string(name='Direction', description='The direction of the traffic for the intrusion events. Valid values:

*   **in**: inbound
*   **out**: outbound

> If you do not specify this parameter, the intrusion events that are recorded for both inbound and outbound traffic are queried.', example='in'),
  dstIP?: string(name='DstIP', description='The destination IP address to query. If you specify this parameter, all intrusion events with the specified destination IP address are queried.', example='192.0.XX.XX'),
  dstNetworkInstanceId?: string(name='DstNetworkInstanceId', description='The ID of the destination VPC.

> If the FirewallType parameter is set to VpcFirewall, you must specify this parameter.', example='vpc-uf6e9a9zyokj2ywuo****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1534408267'),
  eventName?: string(name='EventName', description='The name of the intrusion event.', example='Webshell communication'),
  firewallType?: string(name='FirewallType', description='The type of the firewall. Valid values:

*   **VpcFirewall**: virtual private cloud (VPC) firewall
*   **InternetFirewall**: Internet firewall (default)', example='InternetFirewall'),
  isOnlyPrivateAssoc?: string(name='IsOnlyPrivateAssoc', description='Whether to query only the data that has completed private network tracing.', example='true'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  noLocation?: string(name='NoLocation', description='Specifies whether to query the information about the geographical locations of IP addresses.

*   **true**: does not query the information about the geographical locations of IP addresses.
*   **false**: queries the information about the geographical locations of IP addresses. This is the default value.', example='false'),
  order?: string(name='Order', description='The order in which you want to sort the results. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: **6**. Maximum value: **10**.', example='6'),
  ruleResult?: string(name='RuleResult', description='The status of the firewall. Valid values:

*   **1**: alerting
*   **2**: blocking

> If you do not specify this parameter, all intrusion events that are detected by the firewall are queried, regardless of the firewall status.', example='1'),
  ruleSource?: string(name='RuleSource', description='The module of the rule that is used to detect the intrusion events. Valid values:

*   **1**: basic protection
*   **2**: virtual patching
*   **4**: threat intelligence

> If you do not specify this parameter, the intrusion events that are detected by all rules are queried.', example='1'),
  sort?: string(name='Sort', description='The field based on which you want to sort the results. Valid values:

*   **VulLevel**: The results are sorted based on the risk level field. This is the default value.
*   **LastTime**: The results are sorted based on the most recent occurrence time.', example='LastTime'),
  srcIP?: string(name='SrcIP', description='The source IP address to query. If you specify this parameter, all intrusion events with the specified source IP address are queried.', example='192.0.XX.XX'),
  srcNetworkInstanceId?: string(name='SrcNetworkInstanceId', description='The ID of the source VPC.

> If the FirewallType parameter is set to VpcFirewall, you must specify this parameter.', example='vpc-uf6e9a9zyokj2ywuo****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1534408189'),
  vulLevel?: string(name='VulLevel', description='The risk level of the intrusion events. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high

> If you do not specify this parameter, the intrusion events that are at all risk levels are queried.', example='1'),
}

model DescribeRiskEventGroupResponseBody = {
  dataList?: [ 
    {
      attackApp?: string(name='AttackApp', description='The name of the attacked application.', example='MySql'),
      attackType?: int32(name='AttackType', description='The attack type of the intrusion event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leak
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: trojan backdoor
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell', example='1'),
      description?: string(name='Description', description='The description of the intrusion event.', example='Path traversal attacks are detected in the web access requests over HTTP.'),
      direction?: string(name='Direction', description='The direction of the traffic for the intrusion event. Valid values:

*   **in**: inbound
*   **out**: outbound', example='in'),
      dstIP?: string(name='DstIP', description='The destination IP address that is included in the intrusion event.', example='192.0.XX.XX'),
      eventCount?: int32(name='EventCount', description='The number of intrusion events.', example='100'),
      eventId?: string(name='EventId', description='The ID of the intrusion event.', example='2b58efae-4c4b-4d96-9544-a586fb1f****'),
      eventName?: string(name='EventName', description='The name of the intrusion event.', example='Path traversal attack'),
      firstEventTime?: int32(name='FirstEventTime', description='The time when the intrusion event was first detected. The value is a UNIX timestamp. Unit: seconds.', example='1534408189'),
      IPLocationInfo?: {
        cityId?: string(name='CityId', description='The ID of the city to which the IP address belongs.', example='510100'),
        cityName?: string(name='CityName', description='The name of the city to which the IP address belongs.', example='Chengdu, Sichuan Province'),
        countryId?: string(name='CountryId', description='The ID of the country to which the IP address belongs.', example='CN'),
        countryName?: string(name='CountryName', description='The name of the country to which the IP address belongs.', example='China'),
      }(name='IPLocationInfo', description='The geographical information about the IP address. The value is a struct that contains the following parameters: **CityId**, **CityName**, **CountryId**, and **CountryName**.\\\\
****************'),
      lastEventTime?: int32(name='LastEventTime', description='The time when the intrusion event was last detected. The value is a UNIX timestamp. Unit: seconds.', example='1534408267'),
      resourcePrivateIPList?: [ 
        {
          regionNo?: string(name='RegionNo', description='The ID of the region to which the private IP address belongs.', example='cn-hangzhou'),
          resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of the instance that uses the private IP address.', example='i-wz92jf4scg2zb74p****'),
          resourceInstanceName?: string(name='ResourceInstanceName', description='The name of the instance that uses the private IP address.', example='LD-shenzhen-zy****'),
          resourcePrivateIP?: string(name='ResourcePrivateIP', description='The private IP address.', example='10.255.XX.XX'),
        }
      ](name='ResourcePrivateIPList', description='The information about the private IP address in the intrusion event. The value is an array that contains the following parameters: **RegionNo**, **ResourceInstanceId**, **ResourceInstanceName**, and **ResourcePrivateIP**.\\\\
****************'),
      resourceType?: string(name='ResourceType', description='The type of the public IP address in the intrusion event. Valid values:

*   **EIP**: the elastic IP address (EIP)
*   **EcsPublicIP**: the public IP address of an Elastic Compute Service (ECS) instance
*   **EcsEIP**: the EIP of an ECS instance
*   **NatPublicIP**: the public IP address of a NAT gateway
*   **NatEIP**: the EIP of a NAT gateway', example='EcsPublicIP'),
      ruleId?: string(name='RuleId', description='The ID of the rule that is used to detect the intrusion event.', example='1000****'),
      ruleResult?: int32(name='RuleResult', description='The status of the firewall. Valid values:

*   **1**: alerting
*   **2**: blocking', example='2'),
      ruleSource?: int32(name='RuleSource', description='The module of the rule that is used to detect the intrusion event. Valid values:

*   **1**: basic protection
*   **2**: virtual patching
*   **4**: threat intelligence', example='1'),
      srcIP?: string(name='SrcIP', description='The source IP address that is included in the intrusion event.', example='192.0.XX.XX'),
      srcIPTag?: string(name='SrcIPTag', description='The tag added to the source IP address. The tag helps identify whether the source IP address is a back-to-origin IP address for a cloud service.', example='WAF Back-to-origin Address', deprecated=true),
      srcIPTags?: [ string ](name='SrcIPTags'),
      srcPrivateIPList?: [ string ](name='SrcPrivateIPList', description='An array that consists of the source private IP addresses in the intrusion event.'),
      tag?: string(name='Tag', description='The tag added to the threat intelligence that is provided for major events.', example='Threat intelligence provided for major events'),
      vpcDstInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.', example='i-wz92jf4scg2zb74p****'),
        ecsInstanceName?: string(name='EcsInstanceName', description='The name of the ECS instance.', example='LD-shenzhen-zy****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC.', example='vpc-uf6e9a9zyokj2ywuo****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the VPC.', example='VPC-SH-TX****'),
        regionNo?: string(name='RegionNo', description='The ID of the region in which the destination VPC resides.', example='cn-hangzhou'),
      }(name='VpcDstInfo', description='The information about the destination VPC of the intrusion event. The value is a struct that contains the following parameters: **EcsInstanceId**, **EcsInstanceName**, **NetworkInstanceId**, **NetworkInstanceName**, and **RegionNo**.\\\\
********************'),
      vpcSrcInfo?: {
        ecsInstanceId?: string(name='EcsInstanceId', description='The ID of the ECS instance.', example='i-wz92jf4scg2zb74p****'),
        ecsInstanceName?: string(name='EcsInstanceName', description='The name of the ECS instance.', example='LD-shenzhen-zy****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC.', example='vpc-uf6e9a9zyokj2ywuo****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the VPC.', example='VPC-SH-TX****'),
        regionNo?: string(name='RegionNo', description='The ID of the region in which the source VPC resides.', example='cn-hangzhou'),
      }(name='VpcSrcInfo', description='The information about the source VPC of the intrusion event. The value is a struct that contains the following parameters: **EcsInstanceId**, **EcsInstanceName**, **NetworkInstanceId**, **NetworkInstanceName**, and **RegionNo**.\\\\
********************'),
      vulLevel?: int32(name='VulLevel', description='The risk level of the intrusion event. Valid values:

*   **1**: low
*   **2**: medium
*   **3**: high', example='1'),
    }
  ](name='DataList', description='An array that consists of the details of the intrusion events.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B14757D0-4640-4B44-AC67-7F558FE7E6EF'),
  totalCount?: int32(name='TotalCount', description='The total number of risk events.', example='20'),
}

model DescribeRiskEventGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventGroupResponseBody(name='body'),
}

/**
 * @summary Queries the details of intrusion events.
 *
 * @description You can call the DescribeRiskEventGroup operation to query and download the details of intrusion events. We recommend that you query the details of 5 to 10 intrusion events at a time. If you do not need to query the geographical information about IP addresses, you can set the NoLocation parameter to true to prevent query timeout.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeRiskEventGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskEventGroupResponse
 */
async function describeRiskEventGroupWithOptions(request: DescribeRiskEventGroupRequest, runtime: Util.RuntimeOptions): DescribeRiskEventGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attackApp)) {
    query['AttackApp'] = request.attackApp;
  }
  if (!Util.isUnset(request.attackAppCategory)) {
    query['AttackAppCategory'] = request.attackAppCategory;
  }
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.buyVersion)) {
    query['BuyVersion'] = request.buyVersion;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.dstIP)) {
    query['DstIP'] = request.dstIP;
  }
  if (!Util.isUnset(request.dstNetworkInstanceId)) {
    query['DstNetworkInstanceId'] = request.dstNetworkInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventName)) {
    query['EventName'] = request.eventName;
  }
  if (!Util.isUnset(request.firewallType)) {
    query['FirewallType'] = request.firewallType;
  }
  if (!Util.isUnset(request.isOnlyPrivateAssoc)) {
    query['IsOnlyPrivateAssoc'] = request.isOnlyPrivateAssoc;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.noLocation)) {
    query['NoLocation'] = request.noLocation;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleResult)) {
    query['RuleResult'] = request.ruleResult;
  }
  if (!Util.isUnset(request.ruleSource)) {
    query['RuleSource'] = request.ruleSource;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.srcIP)) {
    query['SrcIP'] = request.srcIP;
  }
  if (!Util.isUnset(request.srcNetworkInstanceId)) {
    query['SrcNetworkInstanceId'] = request.srcNetworkInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vulLevel)) {
    query['VulLevel'] = request.vulLevel;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskEventGroup',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of intrusion events.
 *
 * @description You can call the DescribeRiskEventGroup operation to query and download the details of intrusion events. We recommend that you query the details of 5 to 10 intrusion events at a time. If you do not need to query the geographical information about IP addresses, you can set the NoLocation parameter to true to prevent query timeout.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeRiskEventGroupRequest
 * @return DescribeRiskEventGroupResponse
 */
async function describeRiskEventGroup(request: DescribeRiskEventGroupRequest): DescribeRiskEventGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskEventGroupWithOptions(request, runtime);
}

model DescribeRiskEventPayloadRequest {
  dstIP?: string(name='DstIP', description='The destination IP address to query. If you specify this parameter, all intrusion events with the specified destination IP address are queried.', example='203.0.113.2'),
  dstVpcId?: string(name='DstVpcId', description='The ID of the destination VPC to query. If you specify this parameter, all intrusion events that contain the specified ID of the destination VPC are queried.', example='vpc-uf6jr1klwqb60dyn2****'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a timestamp. Unit: seconds.

This parameter is required.', example='1681288980'),
  firewallType?: string(name='FirewallType', description='The type of the firewall. Valid values:

*   **VpcFirewall**: virtual private cloud (VPC) firewall
*   **InternetFirewall** (default): Internet firewall', example='InternetFirewall'),
  publicIP?: string(name='PublicIP', description='The public IP address. If you specify this parameter, all intrusion events that contain the specified public IP address are queried.', example='203.0.113.3'),
  srcIP?: string(name='SrcIP', description='The source IP address to query. If you specify this parameter, all intrusion events from the specified source IP address are queried.', example='203.0.113.1'),
  srcVpcId?: string(name='SrcVpcId', description='The ID of the source VPC to query. If you specify this parameter, all intrusion events that contain the specified ID of the source VPC are queried.', example='vpc-wz9j2lqyo15udw5nt****'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a timestamp. Unit: seconds.

This parameter is required.', example='1669533617'),
  UUID?: string(name='UUID', description='The UUID of the intrusion event.

This parameter is required.', example='e62c25e0-1073-46bd-9567-b8f12b3d****'),
}

model DescribeRiskEventPayloadResponseBody = {
  dstIP?: string(name='DstIP', description='The destination IP address of the intrusion event.', example='203.0.113.1'),
  dstPort?: int32(name='DstPort', description='The destination port of the intrusion event.', example='8080'),
  dstVpcId?: string(name='DstVpcId', description='The destination VPC ID of the intrusion event.', example='vpc-bp10w5nb30r4jzfyc****'),
  hitContentType?: int32(name='HitContentType', description='Type of the hit.', example='1'),
  hitTo?: int32(name='HitTo', description='The position where the hit ends.', example='67'),
  parsedContent?: string(name='ParsedContent', description='Hit payload.', example='2f636f6d706f7365722f73656e645f656d61696c3f746f3d6d61667740776f66736f7961792675726c3d687474703a2f2f302e302e302e303a31323334352f692f6431366530312f313664622f673670772f'),
  payload?: string(name='Payload', description='The attack payload of the intrusion event.', example='302902010004067075626c6963a01c0204036a5f43020100020100300e300c06082b060102010101000500'),
  payloadLen?: int32(name='PayloadLen', description='The length of the attack payload of the intrusion event.', example='457'),
  proto?: string(name='Proto', description='The protocol type of intrusion event. Valid values:

*   **TCP**
*   **UDP**', example='TCP'),
  realIp?: string(name='RealIp', description='The HTTP X-Real-IP field.', example='203.0.113.3'),
  requestId?: string(name='RequestId', description='The request ID.', example='68055BA4-D8BD-5611-AC49-C651E619A12E'),
  srcIP?: string(name='SrcIP', description='The source IP address of the intrusion event.', example='203.0.113.2'),
  srcPort?: int32(name='SrcPort', description='The source port of the intrusion event.', example='54360'),
  srcVpcId?: string(name='SrcVpcId', description='The source VPC ID of the intrusion event.', example='vpc-t4nlt09olhpazpoeg****'),
  XForwardFor?: string(name='XForwardFor', description='The HTTP X-Forwarded-For field.', example='203.0.113.4'),
}

model DescribeRiskEventPayloadResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventPayloadResponseBody(name='body'),
}

/**
 * @summary Queries the attack payloads of intrusion events.
 *
 * @param request DescribeRiskEventPayloadRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskEventPayloadResponse
 */
async function describeRiskEventPayloadWithOptions(request: DescribeRiskEventPayloadRequest, runtime: Util.RuntimeOptions): DescribeRiskEventPayloadResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dstIP)) {
    query['DstIP'] = request.dstIP;
  }
  if (!Util.isUnset(request.dstVpcId)) {
    query['DstVpcId'] = request.dstVpcId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.firewallType)) {
    query['FirewallType'] = request.firewallType;
  }
  if (!Util.isUnset(request.publicIP)) {
    query['PublicIP'] = request.publicIP;
  }
  if (!Util.isUnset(request.srcIP)) {
    query['SrcIP'] = request.srcIP;
  }
  if (!Util.isUnset(request.srcVpcId)) {
    query['SrcVpcId'] = request.srcVpcId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.UUID)) {
    query['UUID'] = request.UUID;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskEventPayload',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the attack payloads of intrusion events.
 *
 * @param request DescribeRiskEventPayloadRequest
 * @return DescribeRiskEventPayloadResponse
 */
async function describeRiskEventPayload(request: DescribeRiskEventPayloadRequest): DescribeRiskEventPayloadResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskEventPayloadWithOptions(request, runtime);
}

model DescribeRiskEventTopAttackAssetRequest {
  attackApp?: [ string ](name='AttackApp'),
  attackType?: string(name='AttackType', example='3'),
  buyVersion?: string(name='BuyVersion', example='10'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1742955867'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='125.33.253.XX'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1754273436'),
}

model DescribeRiskEventTopAttackAssetResponseBody = {
  assets?: [ 
    {
      attackCnt?: int32(name='AttackCnt', example='12'),
      dropCnt?: int32(name='DropCnt', example='8'),
      ip?: string(name='Ip', example='10.3.54.XXX'),
      regionNo?: string(name='RegionNo', example='cn-chengdu'),
      resourceInstanceId?: string(name='ResourceInstanceId', example='i-8vbdrjrxzt78****'),
      resourceInstanceName?: string(name='ResourceInstanceName', example='test_resource'),
      resourceType?: string(name='ResourceType', example='EcsPublicIP'),
    }
  ](name='Assets'),
  requestId?: string(name='RequestId', example='B9BF7C33-9A23-5096-8568-A3DACAF0****'),
}

model DescribeRiskEventTopAttackAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskEventTopAttackAssetResponseBody(name='body'),
}

/**
 * @summary 获取Top风险事件资产
 *
 * @param request DescribeRiskEventTopAttackAssetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskEventTopAttackAssetResponse
 */
async function describeRiskEventTopAttackAssetWithOptions(request: DescribeRiskEventTopAttackAssetRequest, runtime: Util.RuntimeOptions): DescribeRiskEventTopAttackAssetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attackApp)) {
    query['AttackApp'] = request.attackApp;
  }
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.buyVersion)) {
    query['BuyVersion'] = request.buyVersion;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskEventTopAttackAsset',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Top风险事件资产
 *
 * @param request DescribeRiskEventTopAttackAssetRequest
 * @return DescribeRiskEventTopAttackAssetResponse
 */
async function describeRiskEventTopAttackAsset(request: DescribeRiskEventTopAttackAssetRequest): DescribeRiskEventTopAttackAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskEventTopAttackAssetWithOptions(request, runtime);
}

model DescribeRiskSecurityGroupDetailRequest {
  instanceId?: string(name='InstanceId', example='sg-2vc0p803vgxumn6r****'),
  instanceName?: string(name='InstanceName', example='test-instance-name'),
  lang?: string(name='Lang', example='zh'),
  pageNo?: string(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: string(name='PageSize', description='This parameter is required.', example='10'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  ruleUuid?: string(name='RuleUuid', example='3b1adf8d-1949-4c8e-809b-fb92ee11****'),
  sourceIp?: string(name='SourceIp', example='220.189.117.XXX'),
}

model DescribeRiskSecurityGroupDetailResponseBody = {
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='33C94306-2064-5A06-9645-01419967****'),
  riskSgDetail?: [ 
    {
      ecsCount?: int32(name='EcsCount', example='10'),
      ecsInfo?: [ 
        {
          ecsInstanceId?: string(name='EcsInstanceId', example='i-bp1gra23yai47d8e****'),
          ecsInstanceName?: string(name='EcsInstanceName', example='tyf_test'),
          privateIp?: string(name='PrivateIp', example='172.24.121.XXX'),
          publicIp?: string(name='PublicIp', example='47.107.141.XXX'),
        }
      ](name='EcsInfo'),
      instanceId?: string(name='InstanceId', example='sg-2vc0p803vgxumn6r****'),
      instanceName?: string(name='InstanceName', example='test-instance-name'),
      regionNo?: string(name='RegionNo', example='cn-shanghai'),
      riskLevel?: string(name='RiskLevel', example='high'),
      ruleInfo?: [ 
        {
          description?: string(name='Description', example='test'),
          riskLevel?: string(name='RiskLevel', example='high'),
          ruleName?: string(name='RuleName', example='test'),
          ruleStatus?: string(name='RuleStatus', example='enable'),
          ruleUuid?: string(name='RuleUuid', example='4c1e72c9-6690-408b-9048-065f0f10****'),
          suggestion?: string(name='Suggestion', example='test'),
        }
      ](name='RuleInfo'),
      vpcId?: string(name='VpcId', example='vpc-8vbuzirdl3w1r7exw****'),
    }
  ](name='RiskSgDetail'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeRiskSecurityGroupDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRiskSecurityGroupDetailResponseBody(name='body'),
}

/**
 * @summary 获取风险安全组详情
 *
 * @param request DescribeRiskSecurityGroupDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeRiskSecurityGroupDetailResponse
 */
async function describeRiskSecurityGroupDetailWithOptions(request: DescribeRiskSecurityGroupDetailRequest, runtime: Util.RuntimeOptions): DescribeRiskSecurityGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceName)) {
    query['InstanceName'] = request.instanceName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.ruleUuid)) {
    query['RuleUuid'] = request.ruleUuid;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRiskSecurityGroupDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取风险安全组详情
 *
 * @param request DescribeRiskSecurityGroupDetailRequest
 * @return DescribeRiskSecurityGroupDetailResponse
 */
async function describeRiskSecurityGroupDetail(request: DescribeRiskSecurityGroupDetailRequest): DescribeRiskSecurityGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRiskSecurityGroupDetailWithOptions(request, runtime);
}

model DescribeSecurityModeRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='218.108.54.XX'),
}

model DescribeSecurityModeResponseBody = {
  module?: string(name='Module', example='sg_server', deprecated=true),
  requestId?: string(name='RequestId', example='C6D68A02-54D5-5F5C-A8AA-6D6C2874****'),
  securityMode?: int32(name='SecurityMode', example='1'),
}

model DescribeSecurityModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityModeResponseBody(name='body'),
}

/**
 * @summary 获取安全模式
 *
 * @param request DescribeSecurityModeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityModeResponse
 */
async function describeSecurityModeWithOptions(request: DescribeSecurityModeRequest, runtime: Util.RuntimeOptions): DescribeSecurityModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityMode',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取安全模式
 *
 * @param request DescribeSecurityModeRequest
 * @return DescribeSecurityModeResponse
 */
async function describeSecurityMode(request: DescribeSecurityModeRequest): DescribeSecurityModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityModeWithOptions(request, runtime);
}

model DescribeSecurityProxyRequest {
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='258039427902****'),
  natGatewayId?: string(name='NatGatewayId', example='ngw-zm0h3c1exm5bifuorg8c5'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='10'),
  proxyId?: string(name='ProxyId', example='proxy-nat80d763eb0dee4eacaec9'),
  proxyName?: string(name='ProxyName', example='nat-idmp-fir'),
  regionNo?: string(name='RegionNo', example='cn-hangzhou'),
  status?: string(name='Status', example='normal'),
  vpcId?: string(name='VpcId', example='vpc-8vbwbo90rq0anm6t****'),
}

model DescribeSecurityProxyResponseBody = {
  proxyList?: [ 
    {
      cidrBlock?: string(name='CidrBlock', example='192.168.0.0/16'),
      detail?: string(name='Detail', example='“”'),
      memberUid?: string(name='MemberUid', example='1797733170015112'),
      natGatewayId?: string(name='NatGatewayId', example='ngw-2zex8sf4s5vus8rq3rjqo'),
      natGatewayName?: string(name='NatGatewayName', example='ecs-slb-eip-waf'),
      proxyId?: string(name='ProxyId', example='proxy-nat4921f192b6cf438d93f8'),
      proxyName?: string(name='ProxyName', example='nat-idmp-fir'),
      regionNo?: string(name='RegionNo', example='ap-southeast-1'),
      snatIpList?: [ string ](name='SnatIpList'),
      status?: string(name='Status', example='normal'),
      strictMode?: int32(name='StrictMode', example='0'),
      vSwitchId?: string(name='VSwitchId', example='vsw-5gu2qqfmjmwl8ktzgfekl'),
      vpcId?: string(name='VpcId', example='vpc-wz9xn35tq33hunzvpu0se'),
      vpcName?: string(name='VpcName', example='vpc-bp1kw9igsq0yyzeanqamx'),
    }
  ](name='ProxyList'),
  requestId?: string(name='RequestId', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeSecurityProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecurityProxyResponseBody(name='body'),
}

/**
 * @summary 获取正向代理
 *
 * @param request DescribeSecurityProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSecurityProxyResponse
 */
async function describeSecurityProxyWithOptions(request: DescribeSecurityProxyRequest, runtime: Util.RuntimeOptions): DescribeSecurityProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.proxyName)) {
    query['ProxyName'] = request.proxyName;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecurityProxy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取正向代理
 *
 * @param request DescribeSecurityProxyRequest
 * @return DescribeSecurityProxyResponse
 */
async function describeSecurityProxy(request: DescribeSecurityProxyRequest): DescribeSecurityProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityProxyWithOptions(request, runtime);
}

model DescribeSignatureLibVersionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C50C2A9-4BBB-5504-8ADA-C41A79B8C946'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='132'),
  version?: [ 
    {
      type?: string(name='Type', description='The type.

Valid values:

*   ips

    <!-- -->

    :

    <!-- -->

    Basic Rules and Virtual Patching

    <!-- -->

    .

*   intelligence

    <!-- -->

    :

    <!-- -->

    Threat Intelligence

    <!-- -->', example='ips'),
      updateTime?: long(name='UpdateTime', description='Update time.', example='1741067915'),
      version?: string(name='Version', description='The version number.', example='IPS-2307-02'),
    }
  ](name='Version', description='The version information.'),
}

model DescribeSignatureLibVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSignatureLibVersionResponseBody(name='body'),
}

/**
 * @summary Queries the information about signature library versions.
 *
 * @param request DescribeSignatureLibVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSignatureLibVersionResponse
 */
async function describeSignatureLibVersionWithOptions(runtime: Util.RuntimeOptions): DescribeSignatureLibVersionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeSignatureLibVersion',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about signature library versions.
 *
 * @return DescribeSignatureLibVersionResponse
 */
async function describeSignatureLibVersion(): DescribeSignatureLibVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignatureLibVersionWithOptions(runtime);
}

model DescribeSlsAnalyzeOpenStatusRequest {
  lang?: string(name='Lang', example='zh'),
}

model DescribeSlsAnalyzeOpenStatusResponseBody = {
  openStatus?: string(name='OpenStatus', example='false'),
  requestId?: string(name='RequestId', example='6CC01A2B-92FB-535C-9415-9A951C20****'),
}

model DescribeSlsAnalyzeOpenStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSlsAnalyzeOpenStatusResponseBody(name='body'),
}

/**
 * @summary 获取SLS开启状态
 *
 * @param request DescribeSlsAnalyzeOpenStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSlsAnalyzeOpenStatusResponse
 */
async function describeSlsAnalyzeOpenStatusWithOptions(request: DescribeSlsAnalyzeOpenStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsAnalyzeOpenStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsAnalyzeOpenStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取SLS开启状态
 *
 * @param request DescribeSlsAnalyzeOpenStatusRequest
 * @return DescribeSlsAnalyzeOpenStatusResponse
 */
async function describeSlsAnalyzeOpenStatus(request: DescribeSlsAnalyzeOpenStatusRequest): DescribeSlsAnalyzeOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsAnalyzeOpenStatusWithOptions(request, runtime);
}

model DescribeThreatIntelligenceSwitchResponseBody = {
  categoryList?: [ 
    {
      action?: string(name='Action', example='alert'),
      categoryDescribe?: string(name='CategoryDescribe'),
      categoryId?: string(name='CategoryId', example='3000037'),
      categoryName?: string(name='CategoryName'),
      categoryParentId?: string(name='CategoryParentId', example='123'),
      enableStatus?: long(name='EnableStatus', example='1'),
    }
  ](name='CategoryList'),
  requestId?: string(name='RequestId', example='6B8E0379-2629-59A1-B811-96F3E****'),
  totalCount?: long(name='TotalCount', example='24'),
}

model DescribeThreatIntelligenceSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeThreatIntelligenceSwitchResponseBody(name='body'),
}

/**
 * @summary 查询威胁情报配置的信息
 *
 * @param request DescribeThreatIntelligenceSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeThreatIntelligenceSwitchResponse
 */
async function describeThreatIntelligenceSwitchWithOptions(runtime: Util.RuntimeOptions): DescribeThreatIntelligenceSwitchResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeThreatIntelligenceSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询威胁情报配置的信息
 *
 * @return DescribeThreatIntelligenceSwitchResponse
 */
async function describeThreatIntelligenceSwitch(): DescribeThreatIntelligenceSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeThreatIntelligenceSwitchWithOptions(runtime);
}

model DescribeTrFirewallPolicyBackUpAssociationListRequest {
  candidateList?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-wz9grb8ng3y7h7lf2****'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
    }
  ](name='CandidateList', description='The traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-8b268ce1b26e4c68****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-5dcafb12ff794a56****'),
}

model DescribeTrFirewallPolicyBackUpAssociationListShrinkRequest {
  candidateListShrink?: string(name='CandidateList', description='The traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-8b268ce1b26e4c68****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-5dcafb12ff794a56****'),
}

model DescribeTrFirewallPolicyBackUpAssociationListResponseBody = {
  policyAssociationBackupConfigs?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-wz9grb8ng3y7h7lf2****'),
      candidateName?: string(name='CandidateName', description='The name of the traffic redirection instance.', example='test'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
      currentRouteTableId?: string(name='CurrentRouteTableId', description='The route table that is used after traffic redirection.', example='vtb-wz9898grickmh5j09****'),
      originalRouteTableId?: string(name='OriginalRouteTableId', description='The ID of the route table.', example='vtb-wz9slp3s7m4qrzvnq****'),
    }
  ](name='PolicyAssociationBackupConfigs', description='The route tables.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C264A756-9B48-57E3-B312-716941E146C6'),
}

model DescribeTrFirewallPolicyBackUpAssociationListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrFirewallPolicyBackUpAssociationListResponseBody(name='body'),
}

/**
 * @summary Queries information about the transit routers that are associated with a virtual private cloud (VPC) firewall created for a transit router.
 *
 * @param tmpReq DescribeTrFirewallPolicyBackUpAssociationListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrFirewallPolicyBackUpAssociationListResponse
 */
async function describeTrFirewallPolicyBackUpAssociationListWithOptions(tmpReq: DescribeTrFirewallPolicyBackUpAssociationListRequest, runtime: Util.RuntimeOptions): DescribeTrFirewallPolicyBackUpAssociationListResponse {
  Util.validateModel(tmpReq);
  var request = new DescribeTrFirewallPolicyBackUpAssociationListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.candidateList)) {
    request.candidateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.candidateList, 'CandidateList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.candidateListShrink)) {
    query['CandidateList'] = request.candidateListShrink;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicyId)) {
    query['TrFirewallRoutePolicyId'] = request.trFirewallRoutePolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrFirewallPolicyBackUpAssociationList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries information about the transit routers that are associated with a virtual private cloud (VPC) firewall created for a transit router.
 *
 * @param request DescribeTrFirewallPolicyBackUpAssociationListRequest
 * @return DescribeTrFirewallPolicyBackUpAssociationListResponse
 */
async function describeTrFirewallPolicyBackUpAssociationList(request: DescribeTrFirewallPolicyBackUpAssociationListRequest): DescribeTrFirewallPolicyBackUpAssociationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrFirewallPolicyBackUpAssociationListWithOptions(request, runtime);
}

model DescribeTrFirewallV2RoutePolicyListRequest {
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: 1.', example='1'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-d5ba592ac6c84aff****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  policyId?: string(name='PolicyId', description='The ID of the routing policy.', example='policy-7b66257c14e141fb****'),
}

model DescribeTrFirewallV2RoutePolicyListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='95EB5F3A-67FE-5780-92BD-5ECBA772AB7E'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
  trFirewallRoutePolicies?: [ 
    {
      destCandidateList?: [ 
        {
          candidateId?: string(name='CandidateId', description='The ID of the secondary traffic redirection instance.', example='vpc-2ze9epancaw8t4sha****'),
          candidateType?: string(name='CandidateType', description='The type of the secondary traffic redirection instance.', example='VPC'),
        }
      ](name='DestCandidateList', description='The secondary traffic redirection instances.'),
      policyDescription?: string(name='PolicyDescription', description='The description of the routing policy.', example='test'),
      policyName?: string(name='PolicyName', description='The name of the routing policy.', example='TEST_VPC_FW'),
      policyStatus?: string(name='PolicyStatus', description='The status of the routing policy. Valid values:

*   creating: The policy is being created.
*   deleting: The policy is being deleted.
*   opening: The policy is being enabled.
*   opened: The policy is enabled.
*   closing: The policy is being disabled.
*   closed: The policy is disabled.', example='opened'),
      policyType?: string(name='PolicyType', description='The type of the traffic redirection scenario of the VPC firewall. Valid values:

*   **fullmesh**: interconnected instances
*   **one_to_one**: instance to instance
*   **end_to_end**: instance to instances', example='fullmesh'),
      srcCandidateList?: [ 
        {
          candidateId?: string(name='CandidateId', description='The ID of the primary traffic redirection instance.', example='vpc-2ze9epancaw8t4sha****'),
          candidateType?: string(name='CandidateType', description='The type of the primary traffic redirection instance.', example='VPC'),
        }
      ](name='SrcCandidateList', description='The primary traffic redirection instances.'),
      trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-7b66257c14e141fb****'),
    }
  ](name='TrFirewallRoutePolicies', description='The routing policies.'),
}

model DescribeTrFirewallV2RoutePolicyListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrFirewallV2RoutePolicyListResponseBody(name='body'),
}

/**
 * @summary Queries the routing policies of a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request DescribeTrFirewallV2RoutePolicyListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrFirewallV2RoutePolicyListResponse
 */
async function describeTrFirewallV2RoutePolicyListWithOptions(request: DescribeTrFirewallV2RoutePolicyListRequest, runtime: Util.RuntimeOptions): DescribeTrFirewallV2RoutePolicyListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.policyId)) {
    query['PolicyId'] = request.policyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrFirewallV2RoutePolicyList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the routing policies of a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request DescribeTrFirewallV2RoutePolicyListRequest
 * @return DescribeTrFirewallV2RoutePolicyListResponse
 */
async function describeTrFirewallV2RoutePolicyList(request: DescribeTrFirewallV2RoutePolicyListRequest): DescribeTrFirewallV2RoutePolicyListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrFirewallV2RoutePolicyListWithOptions(request, runtime);
}

model DescribeTrFirewallsV2DetailRequest {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-a5a6b89f46764928****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
}

model DescribeTrFirewallsV2DetailResponseBody = {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-37nddhri7jf0d2****'),
  firewallDescription?: string(name='FirewallDescription', description='The description of the VPC firewall.', example='VPC Firewall'),
  firewallEniId?: string(name='FirewallEniId', description='The ID of the Elastic Network Interface (ENI) with which the VPC firewall is associated.', example='eni-uf621u00nafypeex****'),
  firewallEniVpcId?: string(name='FirewallEniVpcId', description='The ID of the VPC to which the ENI is attached.', example='vpc-2zeppcci782zeh2bk****'),
  firewallEniVswitchId?: string(name='FirewallEniVswitchId', description='The ID of the vSwitch with which the ENI is associated.', example='vsw-uf6ptq1kl1c1d9pw9****'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-9c7c711abdfa4d80****'),
  firewallName?: string(name='FirewallName', description='The name of the VPC firewall.', example='cloudfirewall-manual'),
  firewallStatus?: string(name='FirewallStatus', description='The status of the VPC firewall. Valid values:

*   Creating
*   Deleting
*   Ready', example='Ready'),
  firewallSubnetCidr?: string(name='FirewallSubnetCidr', description='The subnet CIDR block of the VPC in which the ENI of the firewall is stored in automatic mode.', example='10.0.1.0/24'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
  firewallVpcCidr?: string(name='FirewallVpcCidr', description='The CIDR block that is allocated to the VPC created for the VPC firewall in automatic mode.', example='10.0.0.0/16'),
  regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-shanghai'),
  requestId?: string(name='RequestId', description='The request ID.', example='7E53A7FB-3EB9-5E33-8E50-B8F417D1E02B'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed'),
  trAttachmentMasterCidr?: string(name='TrAttachmentMasterCidr', description='The primary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.2.0/24'),
  trAttachmentMasterZone?: string(name='TrAttachmentMasterZone', description='In automatic mode, the primary availability zone of the subnet in the firewall VPC used for connecting to TR.', example='cn-hangzhou-h'),
  trAttachmentSlaveCidr?: string(name='TrAttachmentSlaveCidr', description='The secondary subnet CIDR block that the VPC uses to connect to the transit router in automatic mode.', example='10.0.3.0/24'),
  trAttachmentSlaveZone?: string(name='TrAttachmentSlaveZone', description='In automatic mode, the backup availability zone for the subnet used to connect TR in the firewall VPC.', example='cn-hangzhou-i'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-wz9y8sgug8b1xb416****'),
}

model DescribeTrFirewallsV2DetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrFirewallsV2DetailResponseBody(name='body'),
}

/**
 * @summary Queries the details of the virtual private cloud (VPC) firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2DetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrFirewallsV2DetailResponse
 */
async function describeTrFirewallsV2DetailWithOptions(request: DescribeTrFirewallsV2DetailRequest, runtime: Util.RuntimeOptions): DescribeTrFirewallsV2DetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrFirewallsV2Detail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details of the virtual private cloud (VPC) firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2DetailRequest
 * @return DescribeTrFirewallsV2DetailResponse
 */
async function describeTrFirewallsV2Detail(request: DescribeTrFirewallsV2DetailRequest): DescribeTrFirewallsV2DetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrFirewallsV2DetailWithOptions(request, runtime);
}

model DescribeTrFirewallsV2ListRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-rig0t5zi96crkl****'),
  currentPage?: int32(name='CurrentPage', description='The page number. Default value: **1**.', example='1'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-f1799baa9e254651****'),
  firewallName?: string(name='FirewallName', description='The name of the VPC firewall.', example='test'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

>  If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  ownerId?: string(name='OwnerId'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-hangzhou'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode

>  If you do not specify this parameter, VPC firewalls in all routing modes are queried.', example='managed'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-uf6egtvyaedvt20xl****'),
}

model DescribeTrFirewallsV2ListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1471E2EC-F706-5F11-A79B-BD583ACB8297'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='6'),
  vpcTrFirewalls?: [ 
    {
      aclConfig?: {
        strictMode?: int32(name='StrictMode', description='Whether to enable strict mode
- 1: Enable strict mode
- 0: Disable strict mode', example='1'),
      }(name='AclConfig', description='ACL engine mode.'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-03f8s0z052ka3v****'),
      cenName?: string(name='CenName', description='The name of the CEN instance.', example='cen_swas'),
      cloudFirewallVpcOrderType?: string(name='CloudFirewallVpcOrderType', description='The party responsible for the TR fees generated by the VPC firewall. Values:

- **PayByCloudFirewall**: Fees are borne by the Cloud Firewall.
- **PayByCenOwner**: Fees are borne by the account to which the CEN instance belongs.', example='PayByCenOwner'),
      firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-99bc4f0fc88b4d00****'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not created.
*   **configured**: The VPC firewall is created but is not enabled.
*   **creating**: The VPC firewall is being created.
*   **opening**: The VPC firewall is being enabled.
*   **deleting**: The VPC firewall is being deleted.

>  If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose.
*   **2**: medium.
*   **3**: strict.', example='3'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='1'),
      }(name='IpsConfig', description='The intrusion prevention system (IPS) configurations.'),
      ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='171761785151****'),
      precheckStatus?: string(name='PrecheckStatus', description='Indicates whether the VPC firewall can be automatically enabled. Valid values:

*   **passed**: yes
*   **failed**: no
*   **unknown**', example='passed'),
      protectedResource?: {
        count?: int32(name='Count', description='The number of protected resources.', example='1'),
        ecrList?: [ string ](name='EcrList', description='The protected express connect routers.'),
        peerTrList?: [ string ](name='PeerTrList', description='The protected peer transit routers.'),
        vbrList?: [ string ](name='VbrList', description='The protected virtual border routers (VBRs).'),
        vpcList?: [ string ](name='VpcList', description='The protected VPCs.'),
        vpnList?: [ string ](name='VpnList', description='The protected VPN gateways.'),
      }(name='ProtectedResource', description='The protected resources.'),
      regionNo?: string(name='RegionNo', description='The region ID of the transit router.', example='cn-hangzhou'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **RegionDisable**: VPC Firewall is not supported in the region of the network instance. You cannot create a VPC firewall for the network instance.
*   **Empty string**: You can create a VPC firewall for the network instance.', example='RegionDisable'),
      routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **managed**: automatic mode
*   **manual**: manual mode', example='managed'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-2vcmhjs88nil55fvu****'),
      unprotectedResource?: {
        count?: int32(name='Count', description='The number of unprotected resources.', example='1'),
        ecrList?: [ string ](name='EcrList', description='The unprotected express connect routers.'),
        peerTrList?: [ string ](name='PeerTrList', description='The unprotected peer transit routers.'),
        vbrList?: [ string ](name='VbrList', description='The unprotected VBRs.'),
        vpcList?: [ string ](name='VpcList', description='The unprotected VPCs.'),
        vpnList?: [ string ](name='VpnList', description='The unprotected VPN gateways.'),
      }(name='UnprotectedResource', description='The unprotected resources.'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='test'),
    }
  ](name='VpcTrFirewalls', description='The VPC firewalls.'),
}

model DescribeTrFirewallsV2ListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrFirewallsV2ListResponseBody(name='body'),
}

/**
 * @summary Queries the virtual private cloud (VPC) firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2ListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrFirewallsV2ListResponse
 */
async function describeTrFirewallsV2ListWithOptions(request: DescribeTrFirewallsV2ListRequest, runtime: Util.RuntimeOptions): DescribeTrFirewallsV2ListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.firewallName)) {
    query['FirewallName'] = request.firewallName;
  }
  if (!Util.isUnset(request.firewallSwitchStatus)) {
    query['FirewallSwitchStatus'] = request.firewallSwitchStatus;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.routeMode)) {
    query['RouteMode'] = request.routeMode;
  }
  if (!Util.isUnset(request.transitRouterId)) {
    query['TransitRouterId'] = request.transitRouterId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrFirewallsV2List',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the virtual private cloud (VPC) firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2ListRequest
 * @return DescribeTrFirewallsV2ListResponse
 */
async function describeTrFirewallsV2List(request: DescribeTrFirewallsV2ListRequest): DescribeTrFirewallsV2ListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrFirewallsV2ListWithOptions(request, runtime);
}

model DescribeTrFirewallsV2RouteListRequest {
  currentPage?: string(name='CurrentPage', description='The page number. Default value: 1.', example='1'),
  firewallId?: string(name='FirewallId', description='The instance ID of the virtual private cloud (VPC) firewall.', example='vfw-tr-8bcfa0f2f12d411e****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries per page. Default value: 10.', example='10'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-7d5c672e37ee4175****'),
}

model DescribeTrFirewallsV2RouteListResponseBody = {
  firewallRouteDetailList?: [ 
    {
      trFirewallRouteDestination?: string(name='TrFirewallRouteDestination', description='The destination address of the route.', example='192.168.10.0/25'),
      trFirewallRouteNexthop?: string(name='TrFirewallRouteNexthop', description='The ID of the next hop for the route.', example='tr-attach-hnxab1y0pxn16p****'),
      trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-04ecbbc6720d4f90****'),
      trFirewallRouteTableId?: string(name='TrFirewallRouteTableId', description='The ID of the route table to which the route entry belongs.', example='vtb-2zeockxxxorv0mnhz****'),
    }
  ](name='FirewallRouteDetailList', description='The route tables of Cloud Firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ABF190A2-B4D0-53F6-995A-5690A721F91C'),
}

model DescribeTrFirewallsV2RouteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrFirewallsV2RouteListResponseBody(name='body'),
}

/**
 * @summary Queries the route tables of the VPC firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2RouteListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTrFirewallsV2RouteListResponse
 */
async function describeTrFirewallsV2RouteListWithOptions(request: DescribeTrFirewallsV2RouteListRequest, runtime: Util.RuntimeOptions): DescribeTrFirewallsV2RouteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicyId)) {
    query['TrFirewallRoutePolicyId'] = request.trFirewallRoutePolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrFirewallsV2RouteList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the route tables of the VPC firewalls that are created for transit routers.
 *
 * @param request DescribeTrFirewallsV2RouteListRequest
 * @return DescribeTrFirewallsV2RouteListResponse
 */
async function describeTrFirewallsV2RouteList(request: DescribeTrFirewallsV2RouteListRequest): DescribeTrFirewallsV2RouteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrFirewallsV2RouteListWithOptions(request, runtime);
}

model DescribeUnprotectedVulnTrendRequest {
  endTime?: string(name='EndTime', example='1754878752'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='112.15.190.XX'),
  startTime?: string(name='StartTime', example='1740623016'),
}

model DescribeUnprotectedVulnTrendResponseBody = {
  curProtectedCnt?: int32(name='CurProtectedCnt', example='7'),
  curUnprotectedCnt?: int32(name='CurUnprotectedCnt', example='8'),
  dataList?: [ 
    {
      protectedVulnCnt?: int32(name='ProtectedVulnCnt', example='3'),
      time?: long(name='Time', example='1525833105'),
      unprotectedVulnCnt?: int32(name='UnprotectedVulnCnt', example='2'),
    }
  ](name='DataList'),
  endTime?: long(name='EndTime', example='1731551104'),
  interval?: int32(name='Interval', example='60'),
  requestId?: string(name='RequestId', example='05BEF2B5-EAAA-509D-9824-E3C7DC17****'),
  startTime?: long(name='StartTime', example='1749434787'),
}

model DescribeUnprotectedVulnTrendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUnprotectedVulnTrendResponseBody(name='body'),
}

/**
 * @summary 获取未保护漏洞趋势
 *
 * @param request DescribeUnprotectedVulnTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUnprotectedVulnTrendResponse
 */
async function describeUnprotectedVulnTrendWithOptions(request: DescribeUnprotectedVulnTrendRequest, runtime: Util.RuntimeOptions): DescribeUnprotectedVulnTrendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUnprotectedVulnTrend',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取未保护漏洞趋势
 *
 * @param request DescribeUnprotectedVulnTrendRequest
 * @return DescribeUnprotectedVulnTrendResponse
 */
async function describeUnprotectedVulnTrend(request: DescribeUnprotectedVulnTrendRequest): DescribeUnprotectedVulnTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUnprotectedVulnTrendWithOptions(request, runtime);
}

model DescribeUserAlarmConfigRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='59.82.135.XXX'),
}

model DescribeUserAlarmConfigResponseBody = {
  alarmConfig?: [ 
    {
      alarmHour?: int32(name='AlarmHour', example='0'),
      alarmNotify?: int32(name='AlarmNotify', example='1'),
      alarmPeriod?: int32(name='AlarmPeriod', example='30'),
      alarmType?: string(name='AlarmType', example='bandwidth'),
      alarmValue?: string(name='AlarmValue', example='80'),
      alarmWeekDay?: int32(name='AlarmWeekDay', example='0'),
    }
  ](name='AlarmConfig'),
  alarmLang?: string(name='AlarmLang', example='zh'),
  contactConfig?: [ 
    {
      email?: string(name='Email', example='1530811****@qq.com'),
      mobilePhone?: string(name='MobilePhone'),
      name?: string(name='Name', example='1531123****'),
      status?: int32(name='Status', example='1'),
    }
  ](name='ContactConfig'),
  defaultContact?: {
    email?: string(name='Email', example='1530811****@qq.com'),
    mobilePhone?: string(name='MobilePhone', example='1531123****'),
    name?: string(name='Name'),
    status?: string(name='Status', example='0'),
  }(name='DefaultContact'),
  notifyConfig?: [ 
    {
      notifyType?: string(name='NotifyType', example='mail'),
      notifyValue?: string(name='NotifyValue', example='0'),
    }
  ](name='NotifyConfig'),
  requestId?: string(name='RequestId', example='9D250177-4F11-58B8-9AFE-A4624FF1****'),
}

model DescribeUserAlarmConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserAlarmConfigResponseBody(name='body'),
}

/**
 * @summary 获取用户告警配置
 *
 * @param request DescribeUserAlarmConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserAlarmConfigResponse
 */
async function describeUserAlarmConfigWithOptions(request: DescribeUserAlarmConfigRequest, runtime: Util.RuntimeOptions): DescribeUserAlarmConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserAlarmConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户告警配置
 *
 * @param request DescribeUserAlarmConfigRequest
 * @return DescribeUserAlarmConfigResponse
 */
async function describeUserAlarmConfig(request: DescribeUserAlarmConfigRequest): DescribeUserAlarmConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserAlarmConfigWithOptions(request, runtime);
}

model DescribeUserAssetIPTrafficInfoRequest {
  assetIP?: string(name='AssetIP', description='The IP address of the asset.

This parameter is required.', example='192.0.XX.XX'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  trafficTime?: string(name='TrafficTime', description='The time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1656923760'),
}

model DescribeUserAssetIPTrafficInfoResponseBody = {
  endTime?: long(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656923760'),
  inBps?: long(name='InBps', description='The network throughput, which indicates the inbound traffic rate. Unit: bit/s.', example='4520'),
  inPps?: long(name='InPps', description='The inbound network throughput, which indicates the number of packets that are sent inbound per second. Unit: packets per second (pps).', example='233'),
  newConn?: long(name='NewConn', description='The new connection creation rate.', example='43'),
  outBps?: long(name='OutBps', description='The network throughput, which indicates the outbound traffic rate. Unit: bit/s.', example='4180'),
  outPps?: long(name='OutPps', description='The outbound network throughput, which indicates the number of packets that are sent outbound per second. Unit: pps.', example='224'),
  requestId?: string(name='RequestId', description='The request ID.', example='F0F82705-CFC7-5F83-86C8-A063892F****'),
  sessionCount?: long(name='SessionCount', description='The number of requests.', example='50'),
  startTime?: long(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.', example='1656837360'),
}

model DescribeUserAssetIPTrafficInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserAssetIPTrafficInfoResponseBody(name='body'),
}

/**
 * @summary Queries the information about the traffic of a specified asset that belongs to your Alibaba Cloud account.
 *
 * @param request DescribeUserAssetIPTrafficInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserAssetIPTrafficInfoResponse
 */
async function describeUserAssetIPTrafficInfoWithOptions(request: DescribeUserAssetIPTrafficInfoRequest, runtime: Util.RuntimeOptions): DescribeUserAssetIPTrafficInfoResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserAssetIPTrafficInfo',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about the traffic of a specified asset that belongs to your Alibaba Cloud account.
 *
 * @param request DescribeUserAssetIPTrafficInfoRequest
 * @return DescribeUserAssetIPTrafficInfoResponse
 */
async function describeUserAssetIPTrafficInfo(request: DescribeUserAssetIPTrafficInfoRequest): DescribeUserAssetIPTrafficInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserAssetIPTrafficInfoWithOptions(request, runtime);
}

model DescribeUserBuyVersionRequest {
  instanceId?: string(name='InstanceId', description='Instance ID. If the Instance ID is provided, the query will be based on this ID. If not provided, the latest instance will be queried by default.', example='cfw_elasticity_public_cn-*******'),
}

model DescribeUserBuyVersionResponseBody = {
  ackClusterConnectorQuota?: long(name='AckClusterConnectorQuota', example='5'),
  aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account that is used to purchase Cloud Firewall.', example='119898001566xxxx'),
  defaultBandwidth?: long(name='DefaultBandwidth', example='1000'),
  expire?: long(name='Expire', description='The time when Cloud Firewall expires.

>  The value is a timestamp in milliseconds.

>  If you use Cloud Firewall that uses the pay-as-you-go billing method, ignore this parameter.', example='1726934400000'),
  extensionBandwidth?: long(name='ExtensionBandwidth', example='1000'),
  generalInstance?: long(name='GeneralInstance', example='10'),
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.

>  If you use a trial of Cloud Firewall, ignore this parameter.', example='vipcloudfw-cn-xxxxx'),
  instanceStatus?: string(name='InstanceStatus', description='The status of Cloud Firewall. Valid values:

*   **normal**: Cloud Firewall is running as expected.
*   **init**: Cloud Firewall is being initialized.
*   **deleting**: Cloud Firewall is being deleted.
*   **abnormal**: An exception occurs in Cloud Firewall.
*   **free**: Cloud Firewall is invalid.', example='normal'),
  internetBandwidth?: long(name='InternetBandwidth', description='The peak Internet traffic that can be protected.', example='3000'),
  ipNumber?: long(name='IpNumber', description='The number of public IP addresses that can be protected.

>  This parameter takes effect only for Cloud Firewall that uses the subscription billing method.', example='63'),
  logStatus?: boolean(name='LogStatus', description='Indicates whether log delivery is enabled. Valid values:

*   **true**
*   **false**', example='true'),
  logStorage?: long(name='LogStorage', description='The log storage capacity.

>  This parameter takes effect only for Cloud Firewall that uses the subscription billing method.', example='3000'),
  majorVersion?: long(name='MajorVersion', example='1'),
  maxOverflow?: long(name='MaxOverflow', description='The status of the burstable protected traffic feature. Valid values:

*   **1000000**: enabled.
*   **0**: disabled.

>  This parameter takes effect only for Cloud Firewall that uses the subscription billing method.', example='0'),
  natBandwidth?: long(name='NatBandwidth', description='The peak traffic of NAT private network that can be protected.', example='3000'),
  privateDnsConnectorQuota?: long(name='PrivateDnsConnectorQuota', example='5'),
  requestId?: string(name='RequestId', description='The request ID.', example='F71B03EE-xxxxx-91D79CC6AA1A'),
  sdl?: long(name='Sdl', example='1'),
  startTime?: long(name='StartTime', description='The time when Cloud Firewall was activated.

>  The value is a timestamp in milliseconds.', example='1692504764000'),
  temporaryBandwidth?: long(name='TemporaryBandwidth', example='1000'),
  threatIntelligence?: long(name='ThreatIntelligence', example='1'),
  userStatus?: boolean(name='UserStatus', description='Indicates whether Cloud Firewall is valid. Valid values:

*   **true**
*   **false**', example='true'),
  version?: int32(name='Version', description='The edition of Cloud Firewall. Valid values:

*   **2**: Premium Edition.
*   **3**: Enterprise Edition.
*   **4**: Ultimate Edition.
*   **10**: Cloud Firewall that uses the pay-as-you-go billing method.', example='2'),
  vpcBandwidth?: long(name='VpcBandwidth', description='The peak cross-VPC traffic that can be protected.', example='3000'),
  vpcNumber?: long(name='VpcNumber', description='The number of virtual private clouds (VPCs) that can be protected.

>  This parameter takes effect only for Cloud Firewall that uses the subscription billing method.', example='21'),
}

model DescribeUserBuyVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserBuyVersionResponseBody(name='body'),
}

/**
 * @summary Queries the edition information about Cloud Firewall.
 *
 * @description You can call this operation to query the edition information about Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeUserBuyVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserBuyVersionResponse
 */
async function describeUserBuyVersionWithOptions(request: DescribeUserBuyVersionRequest, runtime: Util.RuntimeOptions): DescribeUserBuyVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserBuyVersion',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the edition information about Cloud Firewall.
 *
 * @description You can call this operation to query the edition information about Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeUserBuyVersionRequest
 * @return DescribeUserBuyVersionResponse
 */
async function describeUserBuyVersion(request: DescribeUserBuyVersionRequest): DescribeUserBuyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBuyVersionWithOptions(request, runtime);
}

model DescribeUserIPSWhitelistRequest {
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='47.100.XX.XX'),
}

model DescribeUserIPSWhitelistResponseBody = {
  ipv6Whitelists?: [ 
    {
      direction?: long(name='Direction', example='1'),
      listType?: long(name='ListType', example='0'),
      listValue?: string(name='ListValue', example='2408:400a:81a:7900:a77d:ea36:fcbf:de40/128'),
      whiteListValue?: [ string ](name='WhiteListValue'),
      whiteType?: long(name='WhiteType', example='2'),
    }
  ](name='Ipv6Whitelists'),
  requestId?: string(name='RequestId', example='04F788A5-6A47-5EA9-AC30-CA4DB98AD520'),
  whitelists?: [ 
    {
      direction?: long(name='Direction', example='1'),
      listType?: long(name='ListType', example='1'),
      listValue?: string(name='ListValue', example='10.10.200.4/32,10.10.200.25/32'),
      whiteListValue?: [ string ](name='WhiteListValue'),
      whiteType?: long(name='WhiteType', example='1'),
    }
  ](name='Whitelists'),
}

model DescribeUserIPSWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserIPSWhitelistResponseBody(name='body'),
}

/**
 * @summary 获取用户IPS白名单
 *
 * @param request DescribeUserIPSWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeUserIPSWhitelistResponse
 */
async function describeUserIPSWhitelistWithOptions(request: DescribeUserIPSWhitelistRequest, runtime: Util.RuntimeOptions): DescribeUserIPSWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserIPSWhitelist',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户IPS白名单
 *
 * @param request DescribeUserIPSWhitelistRequest
 * @return DescribeUserIPSWhitelistResponse
 */
async function describeUserIPSWhitelist(request: DescribeUserIPSWhitelistRequest): DescribeUserIPSWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserIPSWhitelistWithOptions(request, runtime);
}

model DescribeVpcFirewallAccessDetailRequest {
  assetIP?: string(name='AssetIP', example='192.0.XX.XX'),
  currentPage?: string(name='CurrentPage', example='1'),
  direction?: string(name='Direction', example='in'),
  endTime?: string(name='EndTime', description='This parameter is required.', example='1729042555'),
  IPProtocol?: string(name='IPProtocol', example='tcp'),
  lang?: string(name='Lang', example='zh'),
  order?: string(name='Order', example='desc'),
  pageSize?: string(name='PageSize', example='10'),
  peerAssetIP?: string(name='PeerAssetIP', example='10.125.1.XX'),
  peerAssetInstanceId?: string(name='PeerAssetInstanceId', example='i-123451'),
  peerAssetInstanceName?: string(name='PeerAssetInstanceName', example='ecs22'),
  peerVpcId?: string(name='PeerVpcId', example='vpc-90rq0anm6t8vbwbo****'),
  port?: string(name='Port', example='80'),
  riskLevel?: string(name='RiskLevel', example='3'),
  sort?: string(name='Sort', example='InBytes'),
  startTime?: string(name='StartTime', description='This parameter is required.', example='1655778046'),
  vpcId?: string(name='VpcId', description='This parameter is required.', example='vpc-2ze4xj5kmb5udb****'),
}

model DescribeVpcFirewallAccessDetailResponseBody = {
  dataList?: [ 
    {
      inBytes?: long(name='InBytes', example='17845821669.0'),
      outBytes?: long(name='OutBytes', example='1123'),
      peerAssetIP?: string(name='PeerAssetIP', example='10.125.1.XX'),
      peerAssetInstanceId?: string(name='PeerAssetInstanceId', example='i-123451'),
      peerAssetInstanceName?: string(name='PeerAssetInstanceName', example='test'),
      peerVpcId?: string(name='PeerVpcId', example='vpc-123411'),
      regionNo?: string(name='RegionNo', example='cn-shenzhen'),
      sessionCount?: long(name='SessionCount', example='27'),
      peerVpcName?: string(name='peerVpcName', example='vpc-test'),
    }
  ](name='DataList'),
  requestId?: string(name='RequestId', example='8EAC2347-E85A-5DFF-9F49-B8E1BAFB****'),
  totalCount?: int32(name='TotalCount', example='9'),
}

model DescribeVpcFirewallAccessDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallAccessDetailResponseBody(name='body'),
}

/**
 * @summary 获取VPC防火墙通过详情
 *
 * @param request DescribeVpcFirewallAccessDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallAccessDetailResponse
 */
async function describeVpcFirewallAccessDetailWithOptions(request: DescribeVpcFirewallAccessDetailRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallAccessDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.assetIP)) {
    query['AssetIP'] = request.assetIP;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.IPProtocol)) {
    query['IPProtocol'] = request.IPProtocol;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.peerAssetIP)) {
    query['PeerAssetIP'] = request.peerAssetIP;
  }
  if (!Util.isUnset(request.peerAssetInstanceId)) {
    query['PeerAssetInstanceId'] = request.peerAssetInstanceId;
  }
  if (!Util.isUnset(request.peerAssetInstanceName)) {
    query['PeerAssetInstanceName'] = request.peerAssetInstanceName;
  }
  if (!Util.isUnset(request.peerVpcId)) {
    query['PeerVpcId'] = request.peerVpcId;
  }
  if (!Util.isUnset(request.port)) {
    query['Port'] = request.port;
  }
  if (!Util.isUnset(request.riskLevel)) {
    query['RiskLevel'] = request.riskLevel;
  }
  if (!Util.isUnset(request.sort)) {
    query['Sort'] = request.sort;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallAccessDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取VPC防火墙通过详情
 *
 * @param request DescribeVpcFirewallAccessDetailRequest
 * @return DescribeVpcFirewallAccessDetailResponse
 */
async function describeVpcFirewallAccessDetail(request: DescribeVpcFirewallAccessDetailRequest): DescribeVpcFirewallAccessDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallAccessDetailWithOptions(request, runtime);
}

model DescribeVpcFirewallAclGroupListRequest {
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  firewallConfigureStatus?: string(name='FirewallConfigureStatus', description='Specifies whether VPC firewalls are configured. Valid values:

*   **notconfigured**: VPC firewalls are not configured.
*   **configured**: VPC firewalls are configured.
*   If you do not specify this parameter, the access control policies of all VPC firewalls are queried.', example='configured'),
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-5b202e7f0be64611****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10'),
}

model DescribeVpcFirewallAclGroupListResponseBody = {
  aclGroupList?: [ 
    {
      aclConfig?: {
        strictMode?: int32(name='StrictMode', description='Specifies Whether strict mode is enabled. Valid values:
*   1: yes
*   0: no', example='1'),
      }(name='AclConfig', description='ACL engine mode.'),
      aclGroupId?: string(name='AclGroupId', description='The ID of the policy group.

Valid values:

*   If the VPC firewall is used to protect a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\\\*\\\\*\\\\*\\\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\\\*\\\\*\\\\*\\\\*', example='vfw-a42bbb7b887148c9****'),
      aclGroupName?: string(name='AclGroupName', description='The name of the policy group. Valid values:

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter is the name of the CEN instance.
*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the instance name of the VPC firewall.', example='group_test'),
      aclRuleCount?: int32(name='AclRuleCount', description='The number of access control policies in the policy group.', example='9'),
      isDefault?: boolean(name='IsDefault', description='Whether it is the default firewall. Values:

*   **true**: It is the default firewall.
*   **false**: It is not the default firewall.', example='true'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
    }
  ](name='AclGroupList', description='The information about the access control policy groups.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: int32(name='TotalCount', description='The total number of the policy groups that are returned.', example='1'),
}

model DescribeVpcFirewallAclGroupListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallAclGroupListResponseBody(name='body'),
}

/**
 * @summary Queries the information about all policy groups of access control policies that are created for virtual private cloud (VPC) firewalls.
 *
 * @description You can call the DescribeVpcFirewallAclGroupList operation to query the information about all policy groups of access control policies that are created for VPC firewalls.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallAclGroupListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallAclGroupListResponse
 */
async function describeVpcFirewallAclGroupListWithOptions(request: DescribeVpcFirewallAclGroupListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallAclGroupListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallConfigureStatus)) {
    query['FirewallConfigureStatus'] = request.firewallConfigureStatus;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallAclGroupList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about all policy groups of access control policies that are created for virtual private cloud (VPC) firewalls.
 *
 * @description You can call the DescribeVpcFirewallAclGroupList operation to query the information about all policy groups of access control policies that are created for VPC firewalls.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallAclGroupListRequest
 * @return DescribeVpcFirewallAclGroupListResponse
 */
async function describeVpcFirewallAclGroupList(request: DescribeVpcFirewallAclGroupListRequest): DescribeVpcFirewallAclGroupListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallAclGroupListWithOptions(request, runtime);
}

model DescribeVpcFirewallCenDetailRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC for which the VPC firewall is created.', example='vpc-2zefk9fbn8j7v585g****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](https://help.aliyun.com/document_detail/345777.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model DescribeVpcFirewallCenDetailResponseBody = {
  connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **cen**, which indicates CEN instances.', example='cen'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: enabled
*   **closed**: disabled
*   **notconfigured**: not configured', example='opened'),
  firewallVpc?: {
    allowConfiguration?: int32(name='AllowConfiguration', description='Indicates whether you can specify a CIDR block when you create a VPC firewall for a Basic Edition transit router of a CEN instance. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
    standbyZoneId?: string(name='StandbyZoneId', description='Firewall backup availability zone ID.', example='cn-hangzhou-k'),
    vpcCidr?: string(name='VpcCidr', description='The CIDR block of the VPC.', example='10.0.0.0/8'),
    vpcId?: string(name='VpcId', description='The VPC ID.', example='vpc-bp1245k5oagy2bp74****'),
    vswitchCidr?: string(name='VswitchCidr', description='The CIDR block of the vSwitch.', example='10.0.0.1/24'),
    vswitchId?: string(name='VswitchId', description='The vSwitch ID.', example='vsw-bp1sqg9wms9wxcs1****'),
    vswitchZoneId?: string(name='VswitchZoneId', description='The availability zone ID of the virtual switch.', example='cn-hangzhou-i'),
    zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-i'),
  }(name='FirewallVpc', description='The firewall VPC.'),
  localVpc?: {
    attachmentId?: string(name='AttachmentId', description='The ID of the connection between two network instances.', example='tr-attach-sxig7bye51fid5****'),
    attachmentName?: string(name='AttachmentName', description='The name of the connection between two network instances.', example='Local test'),
    defendCidrList?: [ string ](name='DefendCidrList', description='An array consisting of the CIDR blocks that are protected by the VPC firewall.'),
    eniList?: [ 
      {
        eniId?: string(name='EniId', description='The ID of the ENI that belongs to the VPC.', example='eni-8vbhfosfqv2rff42****'),
        eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the ENI that belongs to the VPC.', example='192.168.XX.XX'),
        eniVSwitchId?: string(name='EniVSwitchId', description='The ID of the vSwitch to which the ENI is connected.', example='vsw-wz9viido7j436b0n1****'),
      }
    ](name='EniList', description='The Elastic Network Interfaces (ENIs).'),
    manualVSwitchId?: string(name='ManualVSwitchId', description='The ID of the specified vSwitch when the routing mode is manual.', example='vsw-zeq4o875u****'),
    networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the VPC for which the VPC firewall is created.', example='vpc-2zefk9fbn8j7v585g****'),
    networkInstanceName?: string(name='NetworkInstanceName', description='The name of the network instance.', example='Test VPC'),
    networkInstanceType?: string(name='NetworkInstanceType', description='The type of the network instance. The value is fixed as **VPC**.', example='VPC'),
    ownerId?: string(name='OwnerId', description='The UID of the Alibaba Cloud account to which the VPC belongs.', example='158039427902****'),
    regionNo?: string(name='RegionNo', description='The ID of the region in which the VPC resides.', example='cn-hangzhou'),
    routeMode?: string(name='RouteMode', description='The routing mode. Valid values:

*   auto: automatic mode
*   manual: manual mode', example='auto'),
    supportManualMode?: string(name='SupportManualMode', description='Indicates whether the manual routing mode is supported. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
    transitRouterId?: string(name='TransitRouterId', description='The instance ID of the CEN transit router.', example='tr-2zetwxskej633l3u1****'),
    transitRouterType?: string(name='TransitRouterType', description='The edition of the CEN transit router. Valid values:

*   **Basic**: Basic Edition
*   **Enterprise**: Enterprise Edition', example='Basic'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries for the VPC.'),
        routeTableId?: string(name='RouteTableId', description='The route table ID of the VPC.', example='vtb-1234'),
      }
    ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
    vpcName?: string(name='VpcName', description='The name of the VPC.', example='Test instance'),
  }(name='LocalVpc', description='The details about the VPC.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125g4d2'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
}

model DescribeVpcFirewallCenDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallCenDetailResponseBody(name='body'),
}

/**
 * @summary Queries the details about a virtual private cloud (VPC) firewall. The VPC firewall protects access traffic between a VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DescribeVpcFirewallCenDetail operation to query the details about a VPC firewall. The VPC firewall protects access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallCenDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallCenDetailResponse
 */
async function describeVpcFirewallCenDetailWithOptions(request: DescribeVpcFirewallCenDetailRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallCenDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.networkInstanceId)) {
    query['NetworkInstanceId'] = request.networkInstanceId;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallCenDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about a virtual private cloud (VPC) firewall. The VPC firewall protects access traffic between a VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DescribeVpcFirewallCenDetail operation to query the details about a VPC firewall. The VPC firewall protects access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallCenDetailRequest
 * @return DescribeVpcFirewallCenDetailResponse
 */
async function describeVpcFirewallCenDetail(request: DescribeVpcFirewallCenDetailRequest): DescribeVpcFirewallCenDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallCenDetailWithOptions(request, runtime);
}

model DescribeVpcFirewallCenListRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-x5jayxou71ad73****'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Pages start from page 1. Default value: 1.', example='1'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured but is not enabled.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account. The member is also an Alibaba Cloud account.', example='258039427902****'),
  networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the network instance.', example='vpc-8vbwbo90rq0anm6t****'),
  ownerId?: string(name='OwnerId'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: 10. Maximum value: 50.', example='10'),
  regionNo?: string(name='RegionNo', description='The region ID of the VPC.

> For more information about the regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-hangzhou'),
  routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **auto**: automatic mode
*   **manual**: manual mode

> If you do not specify this parameter, VPC firewalls in all routing modes are queried.', example='auto'),
  transitRouterType?: string(name='TransitRouterType', description='The type of the transit router. Valid values:

*   **Basic**: Basic Edition transit router
*   **Enterprise**: Enterprise Edition transit router', example='Basic'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
}

model DescribeVpcFirewallCenListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k8g2'),
  totalCount?: int32(name='TotalCount', description='The total number of VPC firewalls.', example='10'),
  vpcFirewalls?: [ 
    {
      aclConfig?: {
        strictMode?: int32(name='StrictMode', description='Specifies whether to enable the strict mode. Valid values:

*   1: yes
*   0: no', example='1'),
      }(name='AclConfig', description='ACL engine mode.'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-x5jayxou71ad73****'),
      cenName?: string(name='CenName', description='The name of the CEN instance.', example='Test CEN instance'),
      connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as cen, which indicates a CEN instance.', example='cen'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose.
*   **2**: medium.
*   **3**: strict.', example='1'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
      }(name='IpsConfig', description='The intrusion prevention system (IPS) configurations.'),
      localVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether the VPC is granted the required permissions. The value is fixed as **authorized**, which indicates that the VPC is granted the required permissions.', example='authorized'),
        defendCidrList?: [ string ](name='DefendCidrList', description='An array consisting of the CIDR blocks that are protected by the VPC firewall.'),
        manualVSwitchId?: string(name='ManualVSwitchId', description='The ID of the specified vSwitch when the routing mode is manual.', example='vsw-zeq4o875u****'),
        networkInstanceId?: string(name='NetworkInstanceId', description='The ID of the network instance.', example='vpc-2zefk9fbn8j7v585g****'),
        networkInstanceName?: string(name='NetworkInstanceName', description='The name of the network instance.', example='Test VPC'),
        networkInstanceType?: string(name='NetworkInstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**', example='VPC'),
        ownerId?: long(name='OwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the VPC.', example='cn-hangzhou'),
        routeMode?: string(name='RouteMode', description='The routing mode of the VPC firewall. Valid values:

*   **auto**: automatic mode
*   **manual**: manual mode', example='auto'),
        supportManualMode?: string(name='SupportManualMode', description='Indicates whether the manual routing mode is supported. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
        transitRouterType?: string(name='TransitRouterType', description='The edition of the CEN transit router. Valid values:

*   **Basic**: Basic Edition transit router
*   **Enterprise**: Enterprise Edition transit router', example='Basic'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries for the VPC.'),
            routeTableId?: string(name='RouteTableId', description='The route table ID of the VPC.', example='vtb-1234'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the VPC.', example='Test instance'),
      }(name='LocalVpc', description='The details about the VPC.'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is manged by your Alibaba Cloud account. The member is also an Alibaba Cloud account.', example='258039427902****'),
      precheckStatus?: string(name='PrecheckStatus', description='Indicates whether the VPC firewall can be automatically enabled to protect VPC traffic based on route learning. Valid values:

*   **passed**: The VPC firewall can be automatically enabled.
*   **failed**: The VPC firewall cannot be automatically enabled.
*   **unknown**: The VPC firewall is in an unknown state.', example='failed'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **Unauthorized**: Cloud Firewall is not authorized to access the VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **RegionDisable**: VPC Firewall is not supported in the region of the VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **OpsDisable**: You are not allowed to create the VPC firewall.
*   **VbrNotSupport**: The VPC firewall cannot be created for a VBR that is attached to the CEN instance.
*   Empty string: You can create a VPC firewall for the network instance.', example='Unauthorized'),
      vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
    }
  ](name='VpcFirewalls', description='The information about the VPC firewalls.'),
}

model DescribeVpcFirewallCenListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallCenListResponseBody(name='body'),
}

/**
 * @summary Queries virtual private cloud (VPC) firewalls. Each VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DescribeVpcFirewallCenList operation to query VPC firewalls. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallCenListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallCenListResponse
 */
async function describeVpcFirewallCenListWithOptions(request: DescribeVpcFirewallCenListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallCenListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cenId)) {
    query['CenId'] = request.cenId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallSwitchStatus)) {
    query['FirewallSwitchStatus'] = request.firewallSwitchStatus;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.networkInstanceId)) {
    query['NetworkInstanceId'] = request.networkInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.routeMode)) {
    query['RouteMode'] = request.routeMode;
  }
  if (!Util.isUnset(request.transitRouterType)) {
    query['TransitRouterType'] = request.transitRouterType;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallCenList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries virtual private cloud (VPC) firewalls. Each VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the DescribeVpcFirewallCenList operation to query VPC firewalls. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallCenListRequest
 * @return DescribeVpcFirewallCenListResponse
 */
async function describeVpcFirewallCenList(request: DescribeVpcFirewallCenListRequest): DescribeVpcFirewallCenListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallCenListWithOptions(request, runtime);
}

model DescribeVpcFirewallCenSummaryListRequest {
  currentPage?: string(name='CurrentPage', example='1'),
  lang?: string(name='Lang', example='zh'),
  memberUid?: string(name='MemberUid', example='135809047715****'),
  pageSize?: string(name='PageSize', example='10'),
  transitRouterType?: string(name='TransitRouterType', example='Basic'),
}

model DescribeVpcFirewallCenSummaryListResponseBody = {
  cenList?: [ 
    {
      cenId?: string(name='CenId', example='cen-maqfw3abcmjy56****'),
      cenName?: string(name='CenName', example='test'),
      regionNoList?: [ string ](name='RegionNoList'),
    }
  ](name='CenList'),
  requestId?: string(name='RequestId', example='432D6CCA-5186-5B91-A2B8-10C8994B****'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model DescribeVpcFirewallCenSummaryListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallCenSummaryListResponseBody(name='body'),
}

/**
 * @summary 获取VPC的CEN列表
 *
 * @param request DescribeVpcFirewallCenSummaryListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallCenSummaryListResponse
 */
async function describeVpcFirewallCenSummaryListWithOptions(request: DescribeVpcFirewallCenSummaryListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallCenSummaryListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.transitRouterType)) {
    query['TransitRouterType'] = request.transitRouterType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallCenSummaryList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取VPC的CEN列表
 *
 * @param request DescribeVpcFirewallCenSummaryListRequest
 * @return DescribeVpcFirewallCenSummaryListResponse
 */
async function describeVpcFirewallCenSummaryList(request: DescribeVpcFirewallCenSummaryListRequest): DescribeVpcFirewallCenSummaryListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallCenSummaryListWithOptions(request, runtime);
}

model DescribeVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: blocks the traffic.
*   **log**: monitors the traffic.

> If you do not specify this parameter, access control policies are queried based on all actions.', example='accept'),
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.', example='4037fbf7-3e39-4634-92a4-d0155247****'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.', example='1'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.', example='test'),
  destination?: string(name='Destination', description='The destination address in the access control policy. Fuzzy match is supported.

> The value of this parameter can be a CIDR block or an address book name.', example='192.0.XX.XX/24'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Maximum value: 50.', example='10'),
  proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all protocol types

> If you do not specify this parameter, access control policies of all protocol types are queried.', example='TCP'),
  release?: string(name='Release', description='The status of the access control policy. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. Fuzzy match is supported.

> The value of this parameter can be a CIDR block or an address book name.', example='192.0.XX.XX/24'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. Valid values:

*   If the VPC firewall protects the traffic between two VPCs that are connected by using a CEN instance, the value of this parameter must be the ID of the CEN instance.
*   If the VPC firewall protects the traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the ID.

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
}

model DescribeVpcFirewallControlPolicyResponseBody = {
  policys?: [ 
    {
      aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
      aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.', example='4037fbf7-3e39-4634-92a4-d0155247****'),
      applicationId?: string(name='ApplicationId', description='The application ID in the access control policy.', example='10**'),
      applicationName?: string(name='ApplicationName', description='The application types supported by the access control policy. We recommend that you specify ApplicationNameList. Valid values:

*   **HTTP**
*   **HTTPS**
*   **MySQL**
*   **SMTP**
*   **SMTPS**
*   **RDP**
*   **VNC**
*   **SSH**
*   **Redis**
*   **MQTT**
*   **MongoDB**
*   **Memcache**
*   **SSL**
*   **ANY**: all application types', example='HTTP'),
      applicationNameList?: [ string ](name='ApplicationNameList', description='The application types supported by the access control policy.'),
      createTime?: long(name='CreateTime', description='The time when the access control policy was created. The value is a UNIX timestamp. Unit: seconds.', example='1761062400'),
      description?: string(name='Description', description='The description of the access control policy.', example='test'),
      destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
      destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
      destPortGroupPorts?: [ string ](name='DestPortGroupPorts', description='The ports in the destination port address book of the access control policy.'),
      destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
      destination?: string(name='Destination', description='The destination address in the access control policy. Valid values:

*   If **DestinationType** is set to `net`, the value of this parameter is a CIDR block.
*   If **DestinationType** is set to `domain`, the value of this parameter is a domain name.
*   If **DestinationType** is set to `group`, the value of this parameter is an address book name.', example='192.0.XX.XX/24'),
      destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs', description='The CIDR blocks in the destination address book of the access control policy.'),
      destinationGroupType?: string(name='DestinationGroupType', description='The type of the destination address book in the access control policy. Valid values:

*   **ip**: an address book that includes one or more CIDR blocks
*   **domain**: an address book that includes one or more domain names', example='ip'),
      destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name', example='net'),
      domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='FQDN'),
      endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of StartTime.

>  If RepeatType is set to Permanent, EndTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, EndTime must be specified.', example='1694764800'),
      hitLastTime?: long(name='HitLastTime', description='The time when the access control policy was last hit. The value is a UNIX timestamp. Unit: seconds.', example='1579261141'),
      hitTimes?: long(name='HitTimes', description='The number of hits for the access control policy.', example='100'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
      modifyTime?: long(name='ModifyTime', description='The time when the access control policy was modified. The value is a UNIX timestamp. Unit: seconds.', example='1761062400'),
      order?: int32(name='Order', description='The priority of the access control policy.

The priority value starts from 1. A smaller priority value indicates a higher priority.', example='1'),
      proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **TCP**
*   **UDP**
*   **ICMP**
*   **ANY**: all protocol types', example='TCP'),
      release?: string(name='Release', description='Indicates whether the access control policy is enabled. By default, an access control policy is enabled after it is created. Valid values:

*   **true**
*   **false**', example='true'),
      repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If RepeatType is set to `Permanent`, `None`, or `Daily`, RepeatDays is left empty. Example: [].
*   If RepeatType is set to Weekly, RepeatDays must be specified. Example: [0, 6].

>  If RepeatType is set to Weekly, the fields in the value of RepeatDays cannot be repeated.

*   If RepeatType is set to `Monthly`, RepeatDays must be specified. Example: [1, 31].

>  If RepeatType is set to Monthly, the fields in the value of RepeatDays cannot be repeated.'),
      repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of RepeatStartTime.

>  If RepeatType is set to Permanent or None, RepeatEndTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, RepeatEndTime must be specified.', example='23:30'),
      repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of RepeatEndTime.

>  If RepeatType is set to Permanent or None, RepeatStartTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='08:00'),
      repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
      source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of this parameter is a CIDR block.
*   If **SourceType** is set to `group`, the value of this parameter is an address book name.', example='192.0.XX.XX/24'),
      sourceGroupCidrs?: [ string ](name='SourceGroupCidrs', description='The CIDR blocks in the source address book of the access control policy.'),
      sourceGroupType?: string(name='SourceGroupType', description='The type of the source address book in the access control policy. The value is fixed as **ip**. The value indicates an address book that includes one or more CIDR blocks.', example='ip'),
      sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net'),
      spreadCnt?: long(name='SpreadCnt', description='The total quota consumed by the returned access control policies, which is the sum of the quota consumed by each policy. The quota that is consumed by an access control policy is calculated by using the following formula: Quota that is consumed by an access control policy = Number of source addresses × Number of destination addresses (number of CIDR blocks or domain names) × Number of applications × Number of port ranges.', example='10,000'),
      startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of EndTime.

>  If RepeatType is set to Permanent, StartTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, StartTime must be specified.', example='1694761200'),
    }
  ](name='Policys', description='The details of the access control policies.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  totalCount?: string(name='TotalCount', description='The total number of access control policies returned.', example='20'),
}

model DescribeVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Queries the information about the access control policies for a specified virtual private cloud (VPC) firewall.
 *
 * @description You can call the DescribeVpcFirewallControlPolicy operation to query the information about all access control policies that are created for a specified VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallControlPolicyResponse
 */
async function describeVpcFirewallControlPolicyWithOptions(request: DescribeVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about the access control policies for a specified virtual private cloud (VPC) firewall.
 *
 * @description You can call the DescribeVpcFirewallControlPolicy operation to query the information about all access control policies that are created for a specified VPC firewall. Different access control policies are used when a VPC firewall is used to protect traffic between two VPCs that are connected by using a Cloud Enterprise Network (CEN) instance or an Express Connect circuit.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallControlPolicyRequest
 * @return DescribeVpcFirewallControlPolicyResponse
 */
async function describeVpcFirewallControlPolicy(request: DescribeVpcFirewallControlPolicyRequest): DescribeVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallControlPolicyWithOptions(request, runtime);
}

model DescribeVpcFirewallDefaultIPSConfigRequest {
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. Valid values:

*   If the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. You can call the [DescribeVpcFirewallCenList](https://help.aliyun.com/document_detail/345777.html) operation to query the IDs of CEN instances.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall. You can call the [DescribeVpcFirewallList](https://help.aliyun.com/document_detail/342932.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model DescribeVpcFirewallDefaultIPSConfigResponseBody = {
  basicRules?: int32(name='BasicRules', description='Indicates whether basic policies are enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125adf1'),
  ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose.
*   **2**: medium.
*   **3**: strict.', example='1'),
  runMode?: int32(name='RunMode', description='The mode of the intrusion prevention system (IPS). Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
}

model DescribeVpcFirewallDefaultIPSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

/**
 * @summary Queries the intrusion prevention configurations of a virtual private cloud (VPC) firewall.
 *
 * @description You can call the DescribeVpcFirewallDefaultIPSConfig operation to query the intrusion prevention configurations of a VPC firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallDefaultIPSConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallDefaultIPSConfigResponse
 */
async function describeVpcFirewallDefaultIPSConfigWithOptions(request: DescribeVpcFirewallDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallDefaultIPSConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallDefaultIPSConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the intrusion prevention configurations of a virtual private cloud (VPC) firewall.
 *
 * @description You can call the DescribeVpcFirewallDefaultIPSConfig operation to query the intrusion prevention configurations of a VPC firewall.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallDefaultIPSConfigRequest
 * @return DescribeVpcFirewallDefaultIPSConfigResponse
 */
async function describeVpcFirewallDefaultIPSConfig(request: DescribeVpcFirewallDefaultIPSConfigRequest): DescribeVpcFirewallDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallDefaultIPSConfigWithOptions(request, runtime);
}

model DescribeVpcFirewallDetailRequest {
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  localVpcId?: string(name='LocalVpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****'),
  peerVpcId?: string(name='PeerVpcId', description='The ID of the peer VPC.', example='vpc-90rq0anm6t8vbwbo****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

>  You can call the [DescribeVpcFirewallList](https://help.aliyun.com/document_detail/342932.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model DescribeVpcFirewallDetailResponseBody = {
  bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.', example='2'),
  connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **expressconnect**, which indicates Express Connect circuits.', example='expressconnect'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured.', example='opened'),
  localVpc?: {
    eniId?: string(name='EniId', description='The ID of the ENI for the local VPC.', example='eni-8vbhfosfqv2rff42****'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the elastic network interface (ENI) for the local VPC.', example='192.168.XX.XX'),
    regionNo?: string(name='RegionNo', description='The region ID of the local VPC.', example='cn-hangzhou'),
    routerInterfaceId?: string(name='RouterInterfaceId', description='The router interface ID of the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the local VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries of the local VPC.'),
        routeTableId?: string(name='RouteTableId', description='The ID of the route table for the local VPC.', example='vtb-1234'),
      }
    ](name='VpcCidrTableList', description='The CIDR blocks of the local VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****'),
    vpcName?: string(name='VpcName', description='The name of the local VPC.', example='Vitasoy'),
  }(name='LocalVpc', description='The details about the local VPC.'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  peerVpc?: {
    eniId?: string(name='EniId', description='The ID of the ENI for the peer VPC.', example='eni-8vbhfosfqv2rff42****'),
    eniPrivateIpAddress?: string(name='EniPrivateIpAddress', description='The private IP address of the ENI for the peer VPC.', example='192.168.XX.XX'),
    regionNo?: string(name='RegionNo', description='The region ID of the peer VPC.', example='cn-hangzhou'),
    routerInterfaceId?: string(name='RouterInterfaceId', description='The router interface ID of the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
    vpcCidrTableList?: [ 
      {
        routeEntryList?: [ 
          {
            destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the peer VPC.', example='192.168.XX.XX/24'),
            nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
          }
        ](name='RouteEntryList', description='The route entries of the peer VPC.'),
        routeTableId?: string(name='RouteTableId', description='The ID of the route table for the peer VPC.', example='vtb-1256'),
      }
    ](name='VpcCidrTableList', description='The CIDR blocks of the peer VPC.'),
    vpcId?: string(name='VpcId', description='The ID of the peer VPC.', example='vpc-90rq0anm6t8vbwbo****'),
    vpcName?: string(name='VpcName', description='The name of the peer VPC.', example='zcy_prod'),
  }(name='PeerVpc', description='The details about the peer VPC.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125g4d2'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='tf-test'),
}

model DescribeVpcFirewallDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallDetailResponseBody(name='body'),
}

/**
 * @summary Queries the details about a virtual private cloud (VPC) firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the DescribeVpcFirewallDetail operation to query the details about a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.  
 * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://www.alibabacloud.com/help/en/cloud-firewall/latest/createvpcfirewallconfigure) operation.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallDetailResponse
 */
async function describeVpcFirewallDetailWithOptions(request: DescribeVpcFirewallDetailRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localVpcId)) {
    query['LocalVpcId'] = request.localVpcId;
  }
  if (!Util.isUnset(request.peerVpcId)) {
    query['PeerVpcId'] = request.peerVpcId;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallDetail',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about a virtual private cloud (VPC) firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the DescribeVpcFirewallDetail operation to query the details about a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.  
 * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://www.alibabacloud.com/help/en/cloud-firewall/latest/createvpcfirewallconfigure) operation.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallDetailRequest
 * @return DescribeVpcFirewallDetailResponse
 */
async function describeVpcFirewallDetail(request: DescribeVpcFirewallDetailRequest): DescribeVpcFirewallDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallDetailWithOptions(request, runtime);
}

model DescribeVpcFirewallIPSWhitelistRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  memberUid?: long(name='MemberUid', description='The UID of the member in Cloud Firewall.', example='1766185894104675'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

This parameter is required.', example='vfw-3547deab1c9b4190a53f'),
}

model DescribeVpcFirewallIPSWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B5EE02F9-4F21-56CA-AA49-F9F8D69483C1'),
  whitelists?: [ 
    {
      listType?: long(name='ListType', description='The type of the list. Valid values:

*   **1**: user-defined
*   **2**: address book', example='1'),
      listValue?: string(name='ListValue', description='The entries in the list.', example='10.10.200.4/32,10.10.200.25/32'),
      vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-57431e9abe424852a578'),
      whiteListValue?: [ string ](name='WhiteListValue', description='An array of entries in the list.'),
      whiteType?: long(name='WhiteType', description='The type of the whitelist. Valid values:

*   **1**: destination
*   **2**: source', example='1'),
    }
  ](name='Whitelists', description='The details of the IPS whitelist of the VPC firewall.'),
}

model DescribeVpcFirewallIPSWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallIPSWhitelistResponseBody(name='body'),
}

/**
 * @summary Queries the IPS whitelist of a virtual private cloud (VPC) firewall.
 *
 * @param request DescribeVpcFirewallIPSWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallIPSWhitelistResponse
 */
async function describeVpcFirewallIPSWhitelistWithOptions(request: DescribeVpcFirewallIPSWhitelistRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallIPSWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallIPSWhitelist',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the IPS whitelist of a virtual private cloud (VPC) firewall.
 *
 * @param request DescribeVpcFirewallIPSWhitelistRequest
 * @return DescribeVpcFirewallIPSWhitelistResponse
 */
async function describeVpcFirewallIPSWhitelist(request: DescribeVpcFirewallIPSWhitelistRequest): DescribeVpcFirewallIPSWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallIPSWhitelistWithOptions(request, runtime);
}

model DescribeVpcFirewallListRequest {
  connectSubType?: string(name='ConnectSubType', description='The sub-type of the connection. Valid values:

*   **vpc2vpc**: Express Connect connection
*   **vpcpeer**: peer connection', example='vpcpeer'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return.

Pages start from page **1**. Default value: **1**.', example='1'),
  firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.
*   **configured**: The VPC firewall is configured.

> If you do not specify this parameter, VPC firewalls in all states are queried.', example='opened'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page.

Default value: **10**. Maximum value: **50**.', example='10'),
  peerUid?: string(name='PeerUid', description='The UID of the Alibaba Cloud account to which the peer VPC belongs.', example='258039427902****'),
  regionNo?: string(name='RegionNo', description='The region ID of the VPC.

> For more information about the regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-hangzhou'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
}

model DescribeVpcFirewallListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k8g2'),
  totalCount?: int32(name='TotalCount', description='The total number of VPC firewalls.', example='10'),
  vpcFirewalls?: [ 
    {
      aclConfig?: {
        strictMode?: int32(name='StrictMode', description='Specifies whether to enable the strict mode. Valid values:

*   1: yes
*   0: no

This parameter is required.', example='1'),
      }(name='AclConfig', description='ACL engine mode.'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth of the Express Connect circuit. Unit: Mbit/s.', example='2'),
      connectSubType?: string(name='ConnectSubType', description='The sub-type of the connection. Valid values:

*   **vpc2vpc**: Express Connect connection
*   **vpcpeer**: peer connection', example='vpcpeer'),
      connectType?: string(name='ConnectType', description='The connection type of the VPC firewall. The value is fixed as **expressconnect**, which indicates an Express Connect connection.', example='expressconnect'),
      firewallSwitchStatus?: string(name='FirewallSwitchStatus', description='The status of the VPC firewall. Valid values:

*   **opened**: The VPC firewall is enabled.
*   **closed**: The VPC firewall is disabled.
*   **notconfigured**: The VPC firewall is not configured.', example='opened'),
      ipsConfig?: {
        basicRules?: int32(name='BasicRules', description='Indicates whether basic protection is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        enableAllPatch?: int32(name='EnableAllPatch', description='Indicates whether virtual patching is enabled. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
        ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose
*   **2**: medium
*   **3**: strict', example='1'),
        runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode', example='0'),
      }(name='IpsConfig', description='The intrusion prevention system (IPS) configurations.'),
      localVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether Cloud Firewall is authorized to access the local VPC. The value is fixed as authorized, which indicates that Cloud Firewall is authorized to access the local VPC.', example='authorized'),
        ownerId?: long(name='OwnerId', description='The UID of the Alibaba Cloud account to which the local VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the local VPC.', example='cn-hangzhou'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the local VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the local VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries of the local VPC.'),
            routeTableId?: string(name='RouteTableId', description='The ID of the route table for the local VPC.', example='vtb-1234'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the local VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the local VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the local VPC.', example='Test instance'),
      }(name='LocalVpc', description='The details about the local VPC.'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
      peerVpc?: {
        authorizationStatus?: string(name='AuthorizationStatus', description='Indicates whether Cloud Firewall is authorized to access the peer VPC. The value is fixed as **authorized**, which indicates that Cloud Firewall is authorized to access the peer VPC.', example='authorized'),
        ownerId?: long(name='OwnerId', description='The UID of the Alibaba Cloud account to which the peer VPC belongs.', example='158039427902****'),
        regionNo?: string(name='RegionNo', description='The region ID of the peer VPC.', example='cn-hangzhou'),
        vpcCidrTableList?: [ 
          {
            routeEntryList?: [ 
              {
                destinationCidr?: string(name='DestinationCidr', description='The destination CIDR block of the peer VPC.', example='192.168.XX.XX/24'),
                nextHopInstanceId?: string(name='NextHopInstanceId', description='The instance ID of the next hop for the peer VPC.', example='vrt-m5eb5me6c3l5sezae****'),
              }
            ](name='RouteEntryList', description='An array that consists of the route entries of the peer VPC.'),
            routeTableId?: string(name='RouteTableId', description='The ID of the route table for the peer VPC.', example='vtb-1256'),
          }
        ](name='VpcCidrTableList', description='An array that consists of the CIDR blocks of the peer VPC.'),
        vpcId?: string(name='VpcId', description='The ID of the peer VPC.', example='vpc-8vbwbo90rq0anm6t****'),
        vpcName?: string(name='VpcName', description='The name of the peer VPC.', example='Test VPC 2'),
      }(name='PeerVpc', description='The details about the peer VPC.'),
      regionStatus?: string(name='RegionStatus', description='Indicates whether you can create a VPC firewall in a specified region. Valid values:

*   **enable**: yes
*   **disable**: no', example='enable'),
      resultCode?: string(name='ResultCode', description='The result code of the operation that creates the VPC firewall. Valid values:

*   **Unauthorized**: Cloud Firewall is not authorized to access a VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **RegionDisable**: VPC Firewall is not supported in the region of a VPC for which the VPC firewall is created, and the VPC firewall cannot be created.
*   **Empty string**: You can create a VPC firewall for the network instance.', example='Unauthorized'),
      vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.', example='vfw-m5e7dbc4y****'),
      vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.', example='Test firewall'),
    }
  ](name='VpcFirewalls', description='The information about the VPC firewalls.'),
}

model DescribeVpcFirewallListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallListResponseBody(name='body'),
}

/**
 * @summary Queries the details about virtual private cloud (VPC) firewalls by page. Each VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the DescribeVpcFirewallList operation to query the details about VPC firewalls by page. Each VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallListResponse
 */
async function describeVpcFirewallListWithOptions(request: DescribeVpcFirewallListRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectSubType)) {
    query['ConnectSubType'] = request.connectSubType;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.firewallSwitchStatus)) {
    query['FirewallSwitchStatus'] = request.firewallSwitchStatus;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.peerUid)) {
    query['PeerUid'] = request.peerUid;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the details about virtual private cloud (VPC) firewalls by page. Each VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the DescribeVpcFirewallList operation to query the details about VPC firewalls by page. Each VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 * ### Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallListRequest
 * @return DescribeVpcFirewallListResponse
 */
async function describeVpcFirewallList(request: DescribeVpcFirewallListRequest): DescribeVpcFirewallListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallListWithOptions(request, runtime);
}

model DescribeVpcFirewallPolicyPriorUsedRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The ID of the access control policy group. You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the ID.

*   If the VPC firewall is used to protect a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\\\*\\\\*\\\\*\\\\*.

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter is the ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\\\*\\\\*\\\\*\\\\*.

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
}

model DescribeVpcFirewallPolicyPriorUsedResponseBody = {
  end?: int32(name='End', description='The lowest priority for the access control policies.', example='150'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
  start?: int32(name='Start', description='The highest priority for the access control policies.', example='1'),
}

model DescribeVpcFirewallPolicyPriorUsedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallPolicyPriorUsedResponseBody(name='body'),
}

/**
 * @summary Queries the priority range of access control policies that are created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can call this operation to query the priority range of access control policies that are created for a VPC firewall in a specific policy group.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallPolicyPriorUsedRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallPolicyPriorUsedResponse
 */
async function describeVpcFirewallPolicyPriorUsedWithOptions(request: DescribeVpcFirewallPolicyPriorUsedRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallPolicyPriorUsedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallPolicyPriorUsed',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the priority range of access control policies that are created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can call this operation to query the priority range of access control policies that are created for a VPC firewall in a specific policy group.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DescribeVpcFirewallPolicyPriorUsedRequest
 * @return DescribeVpcFirewallPolicyPriorUsedResponse
 */
async function describeVpcFirewallPolicyPriorUsed(request: DescribeVpcFirewallPolicyPriorUsedRequest): DescribeVpcFirewallPolicyPriorUsedResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallPolicyPriorUsedWithOptions(request, runtime);
}

model DescribeVpcFirewallSummaryInfoRequest {
  lang?: string(name='Lang', example='zh'),
  userType?: string(name='UserType', example='buy'),
}

model DescribeVpcFirewallSummaryInfoResponseBody = {
  availableVpcFirewallQuota?: int32(name='AvailableVpcFirewallQuota', example='4'),
  cenExpressConnectVpcCount?: int32(name='CenExpressConnectVpcCount', example='7'),
  cenFirewallVpcCount?: int32(name='CenFirewallVpcCount', example='10'),
  cenTrVpcCount?: int32(name='CenTrVpcCount', example='13'),
  closedCenFirewallCount?: int32(name='ClosedCenFirewallCount', example='1'),
  closedExpressConnectFirewallCount?: int32(name='ClosedExpressConnectFirewallCount', example='10'),
  closedVpcFirewallCount?: int32(name='ClosedVpcFirewallCount', example='5'),
  configuredCenFirewallCount?: int32(name='ConfiguredCenFirewallCount', example='5'),
  configuredCenFirewallRegionCount?: int32(name='ConfiguredCenFirewallRegionCount', example='2'),
  configuredCenFirewallVpcCount?: int32(name='ConfiguredCenFirewallVpcCount', example='18'),
  configuredCenTrFirewallCount?: int32(name='ConfiguredCenTrFirewallCount', example='2'),
  configuredExpressConnectFirewallCount?: int32(name='ConfiguredExpressConnectFirewallCount', example='2'),
  configuredExpressConnectVpcCount?: int32(name='ConfiguredExpressConnectVpcCount', example='2'),
  configuredVpcFirewallCount?: int32(name='ConfiguredVpcFirewallCount', example='5'),
  configuredVpcFirewallVpcCount?: int32(name='ConfiguredVpcFirewallVpcCount', example='1'),
  expressConnectVpcCount?: int32(name='ExpressConnectVpcCount', example='2'),
  notConfiguredCenFirewallCount?: int32(name='NotConfiguredCenFirewallCount', example='0'),
  notConfiguredCenTrFirewallCount?: int32(name='NotConfiguredCenTrFirewallCount', example='6'),
  notConfiguredExpressConnectFirewallCount?: int32(name='NotConfiguredExpressConnectFirewallCount', example='7'),
  notConfiguredVpcFirewallCount?: int32(name='NotConfiguredVpcFirewallCount', example='12'),
  openedCenExpressConnectVpcCount?: int32(name='OpenedCenExpressConnectVpcCount', example='10'),
  openedCenFirewallCount?: int32(name='OpenedCenFirewallCount', example='4'),
  openedCenFirewallVpcCount?: int32(name='OpenedCenFirewallVpcCount', example='0'),
  openedCenTrFirewallVpcCount?: int32(name='OpenedCenTrFirewallVpcCount', example='4'),
  openedEcrCount?: int32(name='OpenedEcrCount', example='0'),
  openedExpressConnectFirewallCount?: int32(name='OpenedExpressConnectFirewallCount', example='15'),
  openedExpressConnectVpcCount?: int32(name='OpenedExpressConnectVpcCount', example='2'),
  openedPeerTrCount?: int32(name='OpenedPeerTrCount', example='3'),
  openedVbrCount?: int32(name='OpenedVbrCount', example='0'),
  openedVpcCount?: int32(name='OpenedVpcCount', example='17'),
  openedVpcFirewallCount?: int32(name='OpenedVpcFirewallCount', example='9'),
  openedVpnCount?: int32(name='OpenedVpnCount', example='6'),
  requestId?: string(name='RequestId', example='8AABEF64-7ABF-52CB-BA6C-0598E3DB****'),
  totalEcrCount?: int32(name='TotalEcrCount', example='2'),
  totalPeerTrCount?: int32(name='TotalPeerTrCount', example='6'),
  totalVbrCount?: int32(name='TotalVbrCount', example='5'),
  totalVpcCount?: int32(name='TotalVpcCount', example='2'),
  totalVpcFirewallQuota?: int32(name='TotalVpcFirewallQuota', example='5'),
  totalVpnCount?: int32(name='TotalVpnCount', example='1'),
}

model DescribeVpcFirewallSummaryInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcFirewallSummaryInfoResponseBody(name='body'),
}

/**
 * @summary 获取VPC防火墙总结信息
 *
 * @param request DescribeVpcFirewallSummaryInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcFirewallSummaryInfoResponse
 */
async function describeVpcFirewallSummaryInfoWithOptions(request: DescribeVpcFirewallSummaryInfoRequest, runtime: Util.RuntimeOptions): DescribeVpcFirewallSummaryInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcFirewallSummaryInfo',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取VPC防火墙总结信息
 *
 * @param request DescribeVpcFirewallSummaryInfoRequest
 * @return DescribeVpcFirewallSummaryInfoResponse
 */
async function describeVpcFirewallSummaryInfo(request: DescribeVpcFirewallSummaryInfoRequest): DescribeVpcFirewallSummaryInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcFirewallSummaryInfoWithOptions(request, runtime);
}

model DescribeVpcListLiteRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  regionNo?: string(name='RegionNo', description='The region ID of the VPC.

>  For more information about Cloud Firewall supported regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-shanghai'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='58.34.174.194'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-8vbwbo90rq0anm6t****'),
  vpcName?: string(name='VpcName', description='The name of the VPC.', example='vpc-shanghai'),
}

model DescribeVpcListLiteResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='55E56A55-D93A-5614-AE00-BE2F8077F891'),
  vpcList?: [ 
    {
      regionNo?: string(name='RegionNo', description='The region ID of the VPC.', example='cn-hangzhou'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-wz9dqhljd10fk0b4eh885'),
      vpcName?: string(name='VpcName', description='The name of the VPC.', example='Cloud_Firewall_VPC'),
    }
  ](name='VpcList', description='The information about the VPCs.'),
}

model DescribeVpcListLiteResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcListLiteResponseBody(name='body'),
}

/**
 * @summary Queries virtual private clouds (VPCs).
 *
 * @param request DescribeVpcListLiteRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcListLiteResponse
 */
async function describeVpcListLiteWithOptions(request: DescribeVpcListLiteRequest, runtime: Util.RuntimeOptions): DescribeVpcListLiteResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.vpcName)) {
    query['VpcName'] = request.vpcName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcListLite',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries virtual private clouds (VPCs).
 *
 * @param request DescribeVpcListLiteRequest
 * @return DescribeVpcListLiteResponse
 */
async function describeVpcListLite(request: DescribeVpcListLiteRequest): DescribeVpcListLiteResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcListLiteWithOptions(request, runtime);
}

model DescribeVpcZoneRequest {
  environment?: string(name='Environment', description='The environment. Valid values:

*   **VPC**
*   **TransitRouter**', example='VPC'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member in Cloud Firewall.', example='1415189284827022'),
  regionNo?: string(name='RegionNo', description='The region ID.

This parameter is required.', example='cn-shanghai'),
}

model DescribeVpcZoneResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='694DFBF3-C060-529F-92D0-7FC7E0DA1E21'),
  zoneList?: [ 
    {
      localName?: string(name='LocalName', description='The name of the zone.', example='Hangzhou Zone B'),
      zoneId?: string(name='ZoneId', description='The zone ID.', example='cn-hangzhou-b'),
      zoneType?: string(name='ZoneType', description='The zone type. Default value: AvailabilityZone. This value indicates Alibaba Cloud zones.', example='AvailabilityZone'),
    }
  ](name='ZoneList', description='The zones.'),
}

model DescribeVpcZoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVpcZoneResponseBody(name='body'),
}

/**
 * @summary Queries virtual private cloud (VPC) zones.
 *
 * @param request DescribeVpcZoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVpcZoneResponse
 */
async function describeVpcZoneWithOptions(request: DescribeVpcZoneRequest, runtime: Util.RuntimeOptions): DescribeVpcZoneResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.environment)) {
    query['Environment'] = request.environment;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVpcZone',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries virtual private cloud (VPC) zones.
 *
 * @param request DescribeVpcZoneRequest
 * @return DescribeVpcZoneResponse
 */
async function describeVpcZone(request: DescribeVpcZoneRequest): DescribeVpcZoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcZoneWithOptions(request, runtime);
}

model DescribeVulnerabilityProtectedListRequest {
  attackType?: string(name='AttackType', description='The attack type of the vulnerability prevention event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leakage
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: webshell
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell

>  If you do not specify this parameter, the intrusion events of all attack types are queried.', example='13'),
  buyVersion?: long(name='BuyVersion', description='The edition of Cloud Firewall. If you use Cloud Firewall that uses the pay-as-you-go billing method, set the value to 10. You do not need to specify this parameter for other editions.', example='10'),
  currentPage?: string(name='CurrentPage', description='The number of the page to return. Default value: 1.', example='1'),
  endTime?: string(name='EndTime', description='The end of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1646063922'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  order?: string(name='Order', description='The order in which you want to sort the queried information. Valid values:

*   **asc**: the ascending order.
*   **desc**: the descending order. This is the default value.', example='desc'),
  pageSize?: string(name='PageSize', description='The number of entries to return on each page. Maximum value: 50.', example='10'),
  ruleTag?: string(name='RuleTag'),
  sortKey?: string(name='SortKey', description='The sorting basis. Set the value to **attackCnt**, which indicates the number of attacks.', example='attackCnt'),
  sourceIp?: string(name='SourceIp', description='The IP address of the access source.', example='112.239.XX.XX', deprecated=true),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. The value is a UNIX timestamp. Unit: seconds.

This parameter is required.', example='1655778046'),
  userType?: string(name='UserType', description='The type of the user. Set the value to **buy**, which indicates user of a paid edition of Cloud Firewall.', example='buy'),
  vulnCveName?: string(name='VulnCveName', description='The Common Vulnerabilities and Exposures (CVE) ID of the vulnerability.', example='CVE-2022-2992'),
  vulnLevel?: string(name='VulnLevel', description='The risk level of the vulnerability. Valid values:

*   **high**
*   **medium**
*   **low**', example='medium'),
  vulnResource?: string(name='VulnResource', description='The number of assets that are affected by the vulnerability.', example='1'),
  vulnStatus?: string(name='VulnStatus', description='The status of vulnerability protection. Valid values:

*   **partProtected**: partially protected
*   **protected**: protected
*   **unProtected**: unprotected', example='protected'),
  vulnType?: string(name='VulnType', description='The type of the vulnerability. Valid values:

*   **App**: application vulnerability
*   **emg**: urgent vulnerability
*   **cms**: Web-CMS vulnerability', example='emg'),
}

model DescribeVulnerabilityProtectedListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D355C631-1537-59C5-A56E-F6C5037B99E5'),
  totalCount?: int32(name='TotalCount', description='The total number of vulnerabilities that are detected by Cloud Firewall.', example='5'),
  vulnList?: [ 
    {
      attackCnt?: int32(name='AttackCnt', description='The number of vulnerability attacks.', example='0'),
      attackType?: int32(name='AttackType', description='The attack type of the vulnerability prevention event. Valid values:

*   **1**: suspicious connection
*   **2**: command execution
*   **3**: brute-force attack
*   **4**: scanning
*   **5**: others
*   **6**: information leakage
*   **7**: DoS attack
*   **8**: buffer overflow attack
*   **9**: web attack
*   **10**: webshell
*   **11**: computer worm
*   **12**: mining
*   **13**: reverse shell', example='13'),
      basicRuleIds?: string(name='BasicRuleIds', description='The IDs of associated basic protection policies.', example='12,12'),
      cveId?: string(name='CveId', description='The CVE IDs.', example='12112131123, 1231123112'),
      firstTime?: long(name='FirstTime', description='The time when the first attack was launched.', example='1608687364'),
      highlightTag?: int32(name='HighlightTag', description='Indicates whether you need to pay special attention to the vulnerability. Valid values:

*   **0**: no
*   **1**: yes', example='0'),
      lastTime?: long(name='LastTime', description='The time when the last attack was launched.', example='1608687364'),
      memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='119384235299****'),
      needOpenBasicRule?: boolean(name='NeedOpenBasicRule', description='Indicates whether the basic protection policy that related to the vulnerability is enabled. Valid values:

*   **true**
*   **false**

>  If the value of this parameter is true, you must set the action of the basic protection policy related to the vulnerability to Block.', example='false'),
      needOpenBasicRuleUuids?: string(name='NeedOpenBasicRuleUuids', description='The UUIDs of the basic protection policies for which the action needs to be changed to Block.', example='UUID-1231231'),
      needOpenRunMode?: boolean(name='NeedOpenRunMode', description='Indicates whether Threat Engine Mode needs to be configured when you enable protection. Valid values:

*   **true**
*   **false**', example='true'),
      needOpenVirtualPatche?: boolean(name='NeedOpenVirtualPatche', description='Indicates whether the virtual patching policy that related to the vulnerability is enabled. Valid values:

*   **true**
*   **false**

>  If the value of this parameter is true, you must set the action of the virtual patching policy that related to the vulnerability to Block.', example='true'),
      needOpenVirtualPatcheUuids?: string(name='NeedOpenVirtualPatcheUuids', description='The UUIDs of the virtual patching policies for which the action needs to be changed to Block.', example='UUID-1231231234'),
      needRuleClass?: int32(name='NeedRuleClass', description='The type of the rule group. Valid values:

*   **1** (default): loose
*   **2**: medium
*   **3**: strict', example='1'),
      resourceCnt?: int32(name='ResourceCnt', description='The number of assets on which vulnerabilities are detected.', example='0'),
      resourceList?: [ 
        {
          eip?: string(name='Eip', description='The elastic IP address (EIP) that is associated with the instance.', example='203.107.XX.XX'),
          internetIp?: string(name='InternetIp', description='The public IP address of the instance.', example='47.96.XX.XX'),
          intranetIp?: string(name='IntranetIp', description='The private IP address of the instance.', example='192.168.XX.XX'),
          regionId?: string(name='RegionId', description='The region ID of your Cloud Firewall.

>  For more information about Cloud Firewall supported regions, see [Supported regions](https://help.aliyun.com/document_detail/195657.html).', example='cn-beijing'),
          resourceId?: string(name='ResourceId', description='The ID of the instance.', example='vfw-m5e7dbc4y****'),
          resourceName?: string(name='ResourceName', description='The name of the instance.', example='ECS'),
          resourceType?: string(name='ResourceType', description='The type of the asset. Valid values:

*   **SLB**
*   **EIP**
*   **ECS**', example='EIP'),
          vulnStatus?: string(name='VulnStatus', description='The status of the vulnerability prevention feature. Valid values:

*   **partProtected**: enabled for partial assets
*   **protected**: enabled
*   **unProtected**: disabled', example='protected'),
        }
      ](name='ResourceList', description='The assets on which the vulnerability is detected.'),
      ruleTag?: string(name='RuleTag'),
      virtualPatcheIds?: string(name='VirtualPatcheIds', description='The IDs of associated virtual patching policies.', example='13,13'),
      vulnKey?: string(name='VulnKey', description='The code of the vulnerability.', example='dedecms-archive.helper.php-vul'),
      vulnLevel?: string(name='VulnLevel', description='The risk level of the vulnerability. Valid values:

*   **high**
*   **medium**
*   **low**', example='high'),
      vulnName?: string(name='VulnName', description='The name of the vulnerability.', example='Deserialization vulnerability of arbitrary code execution in Fastjson 1.2.80 and earlier versions'),
      vulnStatus?: string(name='VulnStatus', description='The status of the vulnerability prevention feature. Valid values:

*   **partProtected**: enabled for partial assets
*   **protected**: enabled
*   **unProtected**: disabled', example='protected'),
      vulnType?: string(name='VulnType', description='The type of the vulnerability. Valid values:

*   **emg**: urgent vulnerability
*   **webcms**: Web-CMS vulnerability
*   **app**: application vulnerability', example='emg'),
    }
  ](name='VulnList', description='The vulnerabilities.'),
  zeroResourceCount?: int32(name='ZeroResourceCount', description='The number of assets on which no vulnerabilities are detected.', example='1'),
}

model DescribeVulnerabilityProtectedListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeVulnerabilityProtectedListResponseBody(name='body'),
}

/**
 * @summary Queries the vulnerabilities that are supported by Cloud Firewall.
 *
 * @param request DescribeVulnerabilityProtectedListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeVulnerabilityProtectedListResponse
 */
async function describeVulnerabilityProtectedListWithOptions(request: DescribeVulnerabilityProtectedListRequest, runtime: Util.RuntimeOptions): DescribeVulnerabilityProtectedListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attackType)) {
    query['AttackType'] = request.attackType;
  }
  if (!Util.isUnset(request.buyVersion)) {
    query['BuyVersion'] = request.buyVersion;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleTag)) {
    query['RuleTag'] = request.ruleTag;
  }
  if (!Util.isUnset(request.sortKey)) {
    query['SortKey'] = request.sortKey;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.userType)) {
    query['UserType'] = request.userType;
  }
  if (!Util.isUnset(request.vulnCveName)) {
    query['VulnCveName'] = request.vulnCveName;
  }
  if (!Util.isUnset(request.vulnLevel)) {
    query['VulnLevel'] = request.vulnLevel;
  }
  if (!Util.isUnset(request.vulnResource)) {
    query['VulnResource'] = request.vulnResource;
  }
  if (!Util.isUnset(request.vulnStatus)) {
    query['VulnStatus'] = request.vulnStatus;
  }
  if (!Util.isUnset(request.vulnType)) {
    query['VulnType'] = request.vulnType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeVulnerabilityProtectedList',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the vulnerabilities that are supported by Cloud Firewall.
 *
 * @param request DescribeVulnerabilityProtectedListRequest
 * @return DescribeVulnerabilityProtectedListResponse
 */
async function describeVulnerabilityProtectedList(request: DescribeVulnerabilityProtectedListRequest): DescribeVulnerabilityProtectedListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVulnerabilityProtectedListWithOptions(request, runtime);
}

model EnableSdlProtectedAssetRequest {
  ipList?: [ string ](name='IpList'),
  lang?: string(name='Lang', example='zh'),
}

model EnableSdlProtectedAssetResponseBody = {
  requestId?: string(name='RequestId', example='15FCCC52-1E23-57AE-B5EF-3E00A3******'),
}

model EnableSdlProtectedAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableSdlProtectedAssetResponseBody(name='body'),
}

/**
 * @summary 开启资产数据泄露保护
 *
 * @param request EnableSdlProtectedAssetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableSdlProtectedAssetResponse
 */
async function enableSdlProtectedAssetWithOptions(request: EnableSdlProtectedAssetRequest, runtime: Util.RuntimeOptions): EnableSdlProtectedAssetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipList)) {
    query['IpList'] = request.ipList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableSdlProtectedAsset',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开启资产数据泄露保护
 *
 * @param request EnableSdlProtectedAssetRequest
 * @return EnableSdlProtectedAssetResponse
 */
async function enableSdlProtectedAsset(request: EnableSdlProtectedAssetRequest): EnableSdlProtectedAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSdlProtectedAssetWithOptions(request, runtime);
}

model GetTlsInspectCertificateDownloadUrlRequest {
  caCertId?: string(name='CaCertId', description='This parameter is required.', example='C3E91391-16CD-1BFC-A133-******D429'),
}

model GetTlsInspectCertificateDownloadUrlResponseBody = {
  caCertId?: string(name='CaCertId'),
  downloadUrl?: string(name='DownloadUrl', example='https://cfw-tls-inspect-cn-hangzhou.oss-cn-hangzhou.aliyuncs.com/tls_cert%2F2025-08-13%2F1850****'),
  requestId?: string(name='RequestId', example='850A84D6-0DE4-4797-A1E8-******h4j6'),
}

model GetTlsInspectCertificateDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTlsInspectCertificateDownloadUrlResponseBody(name='body'),
}

/**
 * @summary 下载TLS证书
 *
 * @param request GetTlsInspectCertificateDownloadUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTlsInspectCertificateDownloadUrlResponse
 */
async function getTlsInspectCertificateDownloadUrlWithOptions(request: GetTlsInspectCertificateDownloadUrlRequest, runtime: Util.RuntimeOptions): GetTlsInspectCertificateDownloadUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caCertId)) {
    query['CaCertId'] = request.caCertId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetTlsInspectCertificateDownloadUrl',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 下载TLS证书
 *
 * @param request GetTlsInspectCertificateDownloadUrlRequest
 * @return GetTlsInspectCertificateDownloadUrlResponse
 */
async function getTlsInspectCertificateDownloadUrl(request: GetTlsInspectCertificateDownloadUrlRequest): GetTlsInspectCertificateDownloadUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTlsInspectCertificateDownloadUrlWithOptions(request, runtime);
}

model ListTlsInspectCACertificatesRequest {
  caCertId?: string(name='CaCertId', example='C3E91391-16CD-1BFC-A133-******D429'),
  currentPage?: int32(name='CurrentPage', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model ListTlsInspectCACertificatesResponseBody = {
  certificates?: [ 
    {
      algorithm?: string(name='Algorithm', example='RSA'),
      aliasName?: string(name='AliasName', example='rsa_ml_***_root'),
      caCertId?: string(name='CaCertId', example='2732BB48-2969-5716-B5D9-******CA85'),
      caCertType?: string(name='CaCertType', example='ROOT'),
      expirationTime?: long(name='ExpirationTime', example='1934***149'),
      keySize?: int32(name='KeySize', example='2048'),
      parentCaCertId?: string(name='ParentCaCertId', example='340BB48-2969-5716-B5D9-****ACA85'),
      signAlgorithm?: string(name='SignAlgorithm', example='SHA256WITHRSA'),
      status?: string(name='Status', example='ISSUE'),
    }
  ](name='Certificates'),
  requestId?: string(name='RequestId', example='CBF1E9B7-D6A0-4E9E-AD3E-******837D'),
  totalCount?: long(name='TotalCount', example='1'),
}

model ListTlsInspectCACertificatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTlsInspectCACertificatesResponseBody(name='body'),
}

/**
 * @summary 查询TLS检查证书
 *
 * @param request ListTlsInspectCACertificatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTlsInspectCACertificatesResponse
 */
async function listTlsInspectCACertificatesWithOptions(request: ListTlsInspectCACertificatesRequest, runtime: Util.RuntimeOptions): ListTlsInspectCACertificatesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caCertId)) {
    query['CaCertId'] = request.caCertId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTlsInspectCACertificates',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询TLS检查证书
 *
 * @param request ListTlsInspectCACertificatesRequest
 * @return ListTlsInspectCACertificatesResponse
 */
async function listTlsInspectCACertificates(request: ListTlsInspectCACertificatesRequest): ListTlsInspectCACertificatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTlsInspectCACertificatesWithOptions(request, runtime);
}

model ModifyAddressBookRequest {
  ackLabels?: [ 
    {
      key?: string(name='Key', example='app'),
      value?: string(name='Value', example='storage-operator'),
    }
  ](name='AckLabels'),
  ackNamespaces?: [ string ](name='AckNamespaces'),
  addressList?: string(name='AddressList', description='The addresses in the address book. Separate multiple addresses with commas (,). If you set GroupType to **ip**, **port**, or **domain**, you must specify this parameter.

*   If you set GroupType to **ip**, you must specify IP addresses for the address book. Example: 1.2.XX.XX/32,1.2.XX.XX/24.
*   If you set GroupType to **port**, you must specify port numbers or port ranges for the address book. Example: 80/80,100/200.
*   If you set GroupType to **domain**, you must specify domain names for the address book. Example: demo1.aliyun.com,demo2.aliyun.com.', example='192.0.XX.XX/32, 192.0.XX.XX/24'),
  autoAddTagEcs?: string(name='AutoAddTagEcs', description='Specifies whether to automatically add public IP addresses of Elastic Compute Service (ECS) instances to the address book if the instances match the specified tags. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  description?: string(name='Description', description='The description of the address book.

This parameter is required.', example='bj-001'),
  groupName?: string(name='GroupName', description='The name of the address book.

This parameter is required.', example='bj-001'),
  groupUuid?: string(name='GroupUuid', description='The ID of the address book.

>  To modify the address book, you must provide the ID of the address book. You can call the [DescribeAddressBook](https://help.aliyun.com/document_detail/138869.html) operation to query the ID.

This parameter is required.', example='0657ab9d-fe8b-4174-b2a6-6baf358e****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  modifyMode?: string(name='ModifyMode', description='Modification mode with the following values:

- **Cover**: Use the value of the AddressList parameter to overwrite the original address book.
- **Append**: After the original address book, append addresses using the value of the AddressList parameter.
- **Delete**: Delete addresses using the value of the AddressList parameter from the address book.

>When GroupType is **ip**, **ipv6**, **port**, or **domain**, if this parameter is not configured, the default is to use the **Cover** method to modify the address book.
>Notice: When GroupType is **tag**, this parameter must be empty.</notice>', example='Cover'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  tagList?: [ 
    {
      tagKey?: string(name='TagKey', description='The key of ECS tag N that you want to match.', example='TXY'),
      tagValue?: string(name='TagValue', description='The value of ECS tag N that you want to match.', example='1'),
    }
  ](name='TagList', description='The ECS tags that you want to match.'),
  tagRelation?: string(name='TagRelation', description='The logical relationship among ECS tags. Valid values:

*   **and**: Only the public IP addresses of ECS instances that match all the specified tags can be added to the address book.
*   **or**: The public IP addresses of ECS instances that match one of the specified tags can be added to the address book.', example='and'),
}

model ModifyAddressBookResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyAddressBookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAddressBookResponseBody(name='body'),
}

/**
 * @summary Modifies the address book that is specified in an access control policy.
 *
 * @description You can call the ModifyAddressBook operation to modify the address book that is configured for access control.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAddressBookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAddressBookResponse
 */
async function modifyAddressBookWithOptions(request: ModifyAddressBookRequest, runtime: Util.RuntimeOptions): ModifyAddressBookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ackLabels)) {
    query['AckLabels'] = request.ackLabels;
  }
  if (!Util.isUnset(request.ackNamespaces)) {
    query['AckNamespaces'] = request.ackNamespaces;
  }
  if (!Util.isUnset(request.addressList)) {
    query['AddressList'] = request.addressList;
  }
  if (!Util.isUnset(request.autoAddTagEcs)) {
    query['AutoAddTagEcs'] = request.autoAddTagEcs;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.groupUuid)) {
    query['GroupUuid'] = request.groupUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.modifyMode)) {
    query['ModifyMode'] = request.modifyMode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.tagList)) {
    query['TagList'] = request.tagList;
  }
  if (!Util.isUnset(request.tagRelation)) {
    query['TagRelation'] = request.tagRelation;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAddressBook',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the address book that is specified in an access control policy.
 *
 * @description You can call the ModifyAddressBook operation to modify the address book that is configured for access control.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyAddressBookRequest
 * @return ModifyAddressBookResponse
 */
async function modifyAddressBook(request: ModifyAddressBookRequest): ModifyAddressBookResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAddressBookWithOptions(request, runtime);
}

model ModifyControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='accept'),
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

>  To modify an access control policy, you must specify the UUID of the policy. You can call the [DescribeControlPolicy](https://help.aliyun.com/document_detail/138866.html) interface to query the UUID.

This parameter is required.', example='00281255-d220-4db1-8f4f-c4df221ad84c'),
  applicationName?: string(name='ApplicationName', description='The type of the application that the access control policy supports. Valid values:

*   **ANY**
*   **HTTP**
*   **HTTPS**
*   **MySQL**
*   **SMTP**
*   **SMTPS**
*   **RDP**
*   **VNC**
*   **SSH**
*   **Redis**
*   **MQTT**
*   **MongoDB**
*   **Memcache**
*   **SSL**

>  The value **ANY** indicates all types of applications.

>  You must specify one of the ApplicationNameList and ApplicationName parameters. If you configure both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.', example='HTTP', deprecated=true),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.

>  You must specify one of the ApplicationNameList and ApplicationName parameters. If you configure both ApplicationNameList and ApplicationName, only the value of ApplicationNameList is used.'),
  description?: string(name='Description', description='The description of the access control policy.', example='test'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to net, the value of **Destination** is a CIDR block. Example: 1.2.XX.XX/24.
*   If **DestinationType** is set to group, the value of **Destination** is an address book. Example: db_group.
*   If **DestinationType** is set to domain, the value of **Destination** is a domain name. Example: \\\\*.aliyuncs.com.
*   If **DestinationType** is set to location, the value of **Destination** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: ["BJ11", "ZB"].', example='192.0.XX.XX/24'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: location', example='net'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid values:

*   **in**: inbound traffic
*   **out**: outbound traffic', example='in'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='FQDN'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of StartTime.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694764800'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  proto?: string(name='Proto', description='The protocol type that the access control policy supports. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**

>  The value **ANY** indicates all types of applications.

>  If the traffic direction is outbound and the destination address is a threat intelligence address book of the domain name type or a cloud service address book, you can set Proto to TCP or ANY. If you set Proto to TCP, you can set ApplicationName to HTTP, HTTPS, SMTP, SMTPS, and SSL. If you set Proto to ANY, you can set ApplicationName to ANY.', example='TCP'),
  release?: string(name='Release', description='The status of the access control policy. Valid values:

*   true: enabled
*   false: disabled', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If you set RepeatType to `Permanent`, `None`, or `Daily`, the value of this parameter is an empty array. Example: []
*   If you set RepeatType to Weekly, you must specify this parameter. Example: [0, 6]

>  If you set RepeatType to Weekly, the fields in the value of this parameter cannot be repeated.

*   If you set RepeatType to `Monthly`, you must specify this parameter. Example: [1, 31]

>  If you set RepeatType to Monthly, the fields in the value of this parameter cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of RepeatStartTime.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of RepeatEndTime.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy.

*   If **SourceType** is set to net, the value of **Source** is a CIDR block. Example: 1.2.XX.XX/24.
*   If **SourceType** is set to group, the value of **Source** is an address book. Example: db_group.
*   If **SourceType** is set to location, the value of **Source** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: ["BJ11", "ZB"]', example='192.0.XX.XX/24'),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **location**: location', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of EndTime.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694761200'),
}

model ModifyControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyControlPolicyResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of an access control policy.
 *
 * @description You can call this operation to modify the configurations of an access control policy. The policy allows Cloud Firewall to allow, deny, or monitor the traffic that passes through Cloud Firewall.
 * ## [](#qps)Limit
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyControlPolicyResponse
 */
async function modifyControlPolicyWithOptions(request: ModifyControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of an access control policy.
 *
 * @description You can call this operation to modify the configurations of an access control policy. The policy allows Cloud Firewall to allow, deny, or monitor the traffic that passes through Cloud Firewall.
 * ## [](#qps)Limit
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyControlPolicyRequest
 * @return ModifyControlPolicyResponse
 */
async function modifyControlPolicy(request: ModifyControlPolicyRequest): ModifyControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyWithOptions(request, runtime);
}

model ModifyControlPolicyPositionRequest {
  direction?: string(name='Direction', description='The direction of the traffic to which the IPv4 access control policy applies. Valid values:

*   in: inbound traffic
*   out: outbound traffic

This parameter is required.', example='in'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   zh: Chinese (default)
*   en: English', example='zh'),
  newOrder?: string(name='NewOrder', description='The new priority of the IPv4 access control policy. You must specify a numeric value for this parameter. The value 1 indicates the highest priority. A larger value indicates a lower priority.

>  The new priority cannot exceed the priority range of the IPv4 access control policy. Otherwise, an error occurs when you call this operation. Before you call this operation, we recommend that you use the [DescribePolicyPriorUsed](https://help.aliyun.com/document_detail/138862.html) operation to query the priority range of the IPv4 access control policy in the specified direction.

This parameter is required.', example='1'),
  oldOrder?: string(name='OldOrder', description='The original priority of the IPv4 access control policy.

This parameter is required.', example='5'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model ModifyControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model ModifyControlPolicyPositionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyControlPolicyPositionResponseBody(name='body'),
}

/**
 * @summary Modifies the priority of an IPv4 access control policy for the Internet firewall. An IPv4 access control policy refers to a policy whose source IP address and destination IP address are IPv4 addresses.
 *
 * @description You can use this operation to modify the priority of an IPv4 access control policy for the Internet firewall. No API operations are provided for you to modify the priority of an IPv6 access control policy for the Internet firewall.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyControlPolicyPositionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyControlPolicyPositionResponse
 */
async function modifyControlPolicyPositionWithOptions(request: ModifyControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyPositionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  if (!Util.isUnset(request.oldOrder)) {
    query['OldOrder'] = request.oldOrder;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyControlPolicyPosition',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the priority of an IPv4 access control policy for the Internet firewall. An IPv4 access control policy refers to a policy whose source IP address and destination IP address are IPv4 addresses.
 *
 * @description You can use this operation to modify the priority of an IPv4 access control policy for the Internet firewall. No API operations are provided for you to modify the priority of an IPv6 access control policy for the Internet firewall.
 * ## [](#qps)Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyControlPolicyPositionRequest
 * @return ModifyControlPolicyPositionResponse
 */
async function modifyControlPolicyPosition(request: ModifyControlPolicyPositionRequest): ModifyControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyPositionWithOptions(request, runtime);
}

model ModifyControlPolicyPriorityRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

This parameter is required.', example='3770d603-3534-4878-b845-f00095ee5048'),
  order?: string(name='Order', description='The priority of the access control policy.

This parameter is required.', example='3'),
}

model ModifyControlPolicyPriorityResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='586F34E8-3F16-4C08-9FFC-8FFDC64B9D0D'),
}

model ModifyControlPolicyPriorityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyControlPolicyPriorityResponseBody(name='body'),
}

/**
 * @summary Modifies the priority of an access control policy.
 *
 * @param request ModifyControlPolicyPriorityRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyControlPolicyPriorityResponse
 */
async function modifyControlPolicyPriorityWithOptions(request: ModifyControlPolicyPriorityRequest, runtime: Util.RuntimeOptions): ModifyControlPolicyPriorityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.order)) {
    query['Order'] = request.order;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyControlPolicyPriority',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the priority of an access control policy.
 *
 * @param request ModifyControlPolicyPriorityRequest
 * @return ModifyControlPolicyPriorityResponse
 */
async function modifyControlPolicyPriority(request: ModifyControlPolicyPriorityRequest): ModifyControlPolicyPriorityResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyControlPolicyPriorityWithOptions(request, runtime);
}

model ModifyDefaultIPSConfigRequest {
  basicRules?: int32(name='BasicRules', description='Specifies whether to enable basic protection. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  ctiRules?: int32(name='CtiRules', description='Specifies whether to enable threat intelligence. Valid values:

*   **1**: yes
*   **0**: no', example='0'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  maxSdl?: long(name='MaxSdl', description='The maximum amount of traffic that can be processed by the sensitive data leak detection feature each day.', example='100'),
  patchRules?: int32(name='PatchRules', description='Specifies whether to enable virtual patching. Valid values:

*   **1**: yes
*   **0**: no', example='1'),
  ruleClass?: int32(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose
*   **2**: medium
*   **3**: strict', example='1'),
  runMode?: int32(name='RunMode', description='The mode of the IPS. Valid values:

*   **1**: block mode
*   **0**: monitor mode

This parameter is required.', example='0'),
}

model ModifyDefaultIPSConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='65885B52-00EC-5728-96******'),
}

model ModifyDefaultIPSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDefaultIPSConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the default configuration of the intrusion prevention system (IPS).
 *
 * @param request ModifyDefaultIPSConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDefaultIPSConfigResponse
 */
async function modifyDefaultIPSConfigWithOptions(request: ModifyDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): ModifyDefaultIPSConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.basicRules)) {
    query['BasicRules'] = request.basicRules;
  }
  if (!Util.isUnset(request.ctiRules)) {
    query['CtiRules'] = request.ctiRules;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.maxSdl)) {
    query['MaxSdl'] = request.maxSdl;
  }
  if (!Util.isUnset(request.patchRules)) {
    query['PatchRules'] = request.patchRules;
  }
  if (!Util.isUnset(request.ruleClass)) {
    query['RuleClass'] = request.ruleClass;
  }
  if (!Util.isUnset(request.runMode)) {
    query['RunMode'] = request.runMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDefaultIPSConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the default configuration of the intrusion prevention system (IPS).
 *
 * @param request ModifyDefaultIPSConfigRequest
 * @return ModifyDefaultIPSConfigResponse
 */
async function modifyDefaultIPSConfig(request: ModifyDefaultIPSConfigRequest): ModifyDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDefaultIPSConfigWithOptions(request, runtime);
}

model ModifyDnsFirewallPolicyRequest {
  aclAction?: string(name='AclAction', example='log'),
  aclUuid?: string(name='AclUuid', description='This parameter is required.', example='00281255-d220-4db1-8f4f-c4df22****'),
  description?: string(name='Description', example='test'),
  destination?: string(name='Destination', example='db_group'),
  destinationType?: string(name='DestinationType', example='net'),
  lang?: string(name='Lang', example='zh'),
  priority?: string(name='Priority', example='1'),
  release?: string(name='Release', example='true'),
  source?: string(name='Source'),
  sourceIp?: string(name='SourceIp', example='192.0.XX.XX'),
  sourceType?: string(name='SourceType', example='net'),
}

model ModifyDnsFirewallPolicyResponseBody = {
  requestId?: string(name='RequestId', example='9C50C2A9-4BBB-5504-8ADA-C41A79****'),
}

model ModifyDnsFirewallPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyDnsFirewallPolicyResponseBody(name='body'),
}

/**
 * @summary 修改DNS防火墙规则
 *
 * @param request ModifyDnsFirewallPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDnsFirewallPolicyResponse
 */
async function modifyDnsFirewallPolicyWithOptions(request: ModifyDnsFirewallPolicyRequest, runtime: Util.RuntimeOptions): ModifyDnsFirewallPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.priority)) {
    query['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDnsFirewallPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改DNS防火墙规则
 *
 * @param request ModifyDnsFirewallPolicyRequest
 * @return ModifyDnsFirewallPolicyResponse
 */
async function modifyDnsFirewallPolicy(request: ModifyDnsFirewallPolicyRequest): ModifyDnsFirewallPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDnsFirewallPolicyWithOptions(request, runtime);
}

model ModifyFirewallV2RoutePolicySwitchRequest {
  firewallId?: string(name='FirewallId', description='The instance ID of the virtual private cloud (VPC) firewall.', example='vfw-tr-5b202e7f0be64611****'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  shouldRecover?: string(name='ShouldRecover', description='Specifies whether to restore the traffic redirection configurations. Valid values:

*   true: roll back
*   false: withdraw', example='false'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-93684cc5caa44b2e****'),
  trFirewallRoutePolicySwitchStatus?: string(name='TrFirewallRoutePolicySwitchStatus', description='The status of the routing policy. Valid values:

*   open: enabled
*   close: disabled', example='open'),
}

model ModifyFirewallV2RoutePolicySwitchResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1F6D4A8D-EC01-5996-A61A-AA3B56490C00'),
}

model ModifyFirewallV2RoutePolicySwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFirewallV2RoutePolicySwitchResponseBody(name='body'),
}

/**
 * @summary Modifies the status of a routing policy.
 *
 * @param request ModifyFirewallV2RoutePolicySwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyFirewallV2RoutePolicySwitchResponse
 */
async function modifyFirewallV2RoutePolicySwitchWithOptions(request: ModifyFirewallV2RoutePolicySwitchRequest, runtime: Util.RuntimeOptions): ModifyFirewallV2RoutePolicySwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.shouldRecover)) {
    query['ShouldRecover'] = request.shouldRecover;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicyId)) {
    query['TrFirewallRoutePolicyId'] = request.trFirewallRoutePolicyId;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicySwitchStatus)) {
    query['TrFirewallRoutePolicySwitchStatus'] = request.trFirewallRoutePolicySwitchStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFirewallV2RoutePolicySwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the status of a routing policy.
 *
 * @param request ModifyFirewallV2RoutePolicySwitchRequest
 * @return ModifyFirewallV2RoutePolicySwitchResponse
 */
async function modifyFirewallV2RoutePolicySwitch(request: ModifyFirewallV2RoutePolicySwitchRequest): ModifyFirewallV2RoutePolicySwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFirewallV2RoutePolicySwitchWithOptions(request, runtime);
}

model ModifyInstanceMemberAttributesRequest {
  members?: [ 
    {
      memberDesc?: string(name='MemberDesc', description='The remarks of the member in Cloud Firewall.

This parameter is required.', example='renewal'),
      memberUid?: long(name='MemberUid', description='The UID of the member in Cloud Firewall.

This parameter is required.', example='123412341234****'),
    }
  ](name='Members', description='The members that to be modified.

This parameter is required.'),
}

model ModifyInstanceMemberAttributesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AB74E747-BA5C-492C-87DD-CEA67FCFFFE5'),
}

model ModifyInstanceMemberAttributesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyInstanceMemberAttributesResponseBody(name='body'),
}

/**
 * @summary Updates the information about members in Cloud Firewall.
 *
 * @description You can call the ModifyInstanceMemberAttributes operation to update the information about members in Cloud Firewall.  
 * ## Limits
 * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyInstanceMemberAttributesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyInstanceMemberAttributesResponse
 */
async function modifyInstanceMemberAttributesWithOptions(request: ModifyInstanceMemberAttributesRequest, runtime: Util.RuntimeOptions): ModifyInstanceMemberAttributesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.members)) {
    query['Members'] = request.members;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceMemberAttributes',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the information about members in Cloud Firewall.
 *
 * @description You can call the ModifyInstanceMemberAttributes operation to update the information about members in Cloud Firewall.  
 * ## Limits
 * You can call this operation up to 10 times per second for each account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyInstanceMemberAttributesRequest
 * @return ModifyInstanceMemberAttributesResponse
 */
async function modifyInstanceMemberAttributes(request: ModifyInstanceMemberAttributesRequest): ModifyInstanceMemberAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMemberAttributesWithOptions(request, runtime);
}

model ModifyIpsRulesToDefaultRequest {
  attackApp?: string(name='AttackApp', example='PHP'),
  firewallType?: string(name='FirewallType', example='InternetFirewall'),
  lang?: string(name='Lang', example='zh'),
  ruleType?: string(name='RuleType', description='This parameter is required.', example='customize'),
  rules?: string(name='Rules', example='[
  "uuid_1",
  "uuid_2"
]'),
  sourceIp?: string(name='SourceIp', example='140.205.118.XXX'),
}

model ModifyIpsRulesToDefaultResponseBody = {
  requestId?: string(name='RequestId', example='B713361D-62E2-5FF0-9D29-BBFAAF40****'),
}

model ModifyIpsRulesToDefaultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyIpsRulesToDefaultResponseBody(name='body'),
}

/**
 * @summary 修改IPS规则为默认
 *
 * @param request ModifyIpsRulesToDefaultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyIpsRulesToDefaultResponse
 */
async function modifyIpsRulesToDefaultWithOptions(request: ModifyIpsRulesToDefaultRequest, runtime: Util.RuntimeOptions): ModifyIpsRulesToDefaultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.attackApp)) {
    query['AttackApp'] = request.attackApp;
  }
  if (!Util.isUnset(request.firewallType)) {
    query['FirewallType'] = request.firewallType;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.rules)) {
    query['Rules'] = request.rules;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyIpsRulesToDefault',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改IPS规则为默认
 *
 * @param request ModifyIpsRulesToDefaultRequest
 * @return ModifyIpsRulesToDefaultResponse
 */
async function modifyIpsRulesToDefault(request: ModifyIpsRulesToDefaultRequest): ModifyIpsRulesToDefaultResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpsRulesToDefaultWithOptions(request, runtime);
}

model ModifyNatFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic. Valid values:

*   **accept**: allows the traffic.
*   **drop**: denies the traffic.
*   **log**: monitors the traffic.', example='log'),
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

To modify the configurations of an access control policy, you must provide the UUID of the policy. You can call the DescribeNatFirewallControlPolicy operation to query the UUIDs of access control policies.

This parameter is required.', example='61ab1c02-926a-4d1b-9ef7-595eed8c4226'),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The name of the application.'),
  description?: string(name='Description', description='The description of the access control policy. Fuzzy match is supported.

> If you do not specify this parameter, the descriptions of all policies are queried.', example='test'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.

> If **DestPortType** is set to `port`, you must specify this parameter.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_dest_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy. Valid values:

*   **port**: port
*   **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to net, the value of **Destination** is a CIDR block. Example: 1.2.3.4/24
*   If **DestinationType** is set to group, the value of **Destination** is an address book. Example: db_group
*   If **DestinationType** is set to domain, the value of **Destination** is a domain name. Example: \\\\*.aliyuncs.com
*   If **DestinationType** is set to location, the value of **Destination** is a location. For more information about the location codes, see the "AddControlPolicy" topic. Example: ["BJ11", "ZB"]', example='x.x.x.x/32'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name
*   **location**: destination location', example='net'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies. Valid value:

*   **out**: outbound.', example='out'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. Valid values:

*   **0**: Fully qualified domain name (FQDN)-based resolution
*   **1**: Domain Name System (DNS)-based dynamic resolution
*   **2**: FQDN and DNS-based dynamic resolution', example='0'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of StartTime.

>  If RepeatType is set to Permanent, EndTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, EndTime must be specified.', example='1694764800'),
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-xxxxxx'),
  proto?: string(name='Proto', description='The protocol type in the access control policy. Valid values:

*   **ANY**
*   **TCP**
*   **UDP**
*   **ICMP**

>  The value **ANY** indicates all types of applications.

>  If the destination address type is a threat intelligence address book of the domain name type or a cloud service address book, you can set Proto to TCP. If you set Proto to TCP, you can set application types to HTTP, HTTPS, SMTP, SMTPS, and SSL.', example='TCP'),
  release?: string(name='Release', description='The status of the access control policy. Valid values:

*   **true**: enabled
*   **false**: disabled', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If RepeatType is set to `Permanent`, `None`, or `Daily`, RepeatDays is left empty. Example: [].
*   If RepeatType is set to Weekly, RepeatDays must be specified. Example: [0, 6].

>  If RepeatType is set to Weekly, the fields in the value of RepeatDays cannot be repeated.

*   If RepeatType is set to `Monthly`, RepeatDays must be specified. Example: [1, 31].

>  If RepeatType is set to Monthly, the fields in the value of RepeatDays cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of RepeatStartTime.

>  If RepeatType is set to Permanent or None, RepeatEndTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, RepeatEndTime must be specified.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of RepeatEndTime.

>  If RepeatType is set to Permanent or None, RepeatStartTime is left empty. If RepeatType is set to Daily, Weekly, or Monthly, this parameter must be specified.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy. Valid values:

*   If **SourceType** is set to `net`, the value of this parameter is a CIDR block. Example: 10.2.XX.XX/24.
*   If **SourceType** is set to `group`, the value of this parameter is an address book name. Example: db_group.', example='192.168.0.25/32'),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy. Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of EndTime.

>  If RepeatType is set to Permanent, StartTime is left empty. If RepeatType is set to None, Daily, Weekly, or Monthly, StartTime must be specified.', example='1694761200'),
}

model ModifyNatFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3868197C-E6E8-52CD-8358-05E3308430E2'),
}

model ModifyNatFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of an access control policy that is created for a NAT firewall.
 *
 * @description You can use this operation to modify the configurations of an access control policy. The policy is used to allow, deny, or monitor traffic that reaches a NAT firewall.
 *
 * @param request ModifyNatFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNatFirewallControlPolicyResponse
 */
async function modifyNatFirewallControlPolicyWithOptions(request: ModifyNatFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyNatFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of an access control policy that is created for a NAT firewall.
 *
 * @description You can use this operation to modify the configurations of an access control policy. The policy is used to allow, deny, or monitor traffic that reaches a NAT firewall.
 *
 * @param request ModifyNatFirewallControlPolicyRequest
 * @return ModifyNatFirewallControlPolicyResponse
 */
async function modifyNatFirewallControlPolicy(request: ModifyNatFirewallControlPolicyRequest): ModifyNatFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatFirewallControlPolicyWithOptions(request, runtime);
}

model ModifyNatFirewallControlPolicyPositionRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

This parameter is required.', example='66961eea-e659-4225-84c9-9b6da76ec401'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

*   Set the value to **out**.', example='out'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.

This parameter is required.', example='ngw-xxxxxx'),
  newOrder?: int32(name='NewOrder', description='The new priority of the IPv4 access control policy. You must specify a numeric value for this parameter. The value 1 indicates the highest priority. A larger value indicates a lower priority.

> Make sure that the value of this parameter is within the priority range of existing IPv4 access control policies. Otherwise, an error occurs when you call this operation.

Before you call this operation, we recommend that you call the DescribeNatFirewallPolicyPriorUsed operation to query the priority range of the IPv4 access control policies in the specified traffic direction.

This parameter is required.', example='5'),
}

model ModifyNatFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='60617208-F5F7-5B44-BB1E-3AC1B6FCD627'),
}

model ModifyNatFirewallControlPolicyPositionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyNatFirewallControlPolicyPositionResponseBody(name='body'),
}

/**
 * @summary Modifies the priority of an access control policy that is created for a NAT firewall.
 *
 * @param request ModifyNatFirewallControlPolicyPositionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyNatFirewallControlPolicyPositionResponse
 */
async function modifyNatFirewallControlPolicyPositionWithOptions(request: ModifyNatFirewallControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyNatFirewallControlPolicyPositionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNatFirewallControlPolicyPosition',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the priority of an access control policy that is created for a NAT firewall.
 *
 * @param request ModifyNatFirewallControlPolicyPositionRequest
 * @return ModifyNatFirewallControlPolicyPositionResponse
 */
async function modifyNatFirewallControlPolicyPosition(request: ModifyNatFirewallControlPolicyPositionRequest): ModifyNatFirewallControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNatFirewallControlPolicyPositionWithOptions(request, runtime);
}

model ModifyObjectGroupOperationRequest {
  comment?: string(name='Comment', description='The remarks of the operation.', example='test'),
  direction?: string(name='Direction', description='The direction of the traffic to which the access control policy applies.

Valid values:

*   **in**: inbound.
*   **out**: outbound.

This parameter is required.', example='out'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  objectList?: [ string ](name='ObjectList', description='The operation objects.

This parameter is required.'),
  objectOperation?: string(name='ObjectOperation', description='The operation. Valid values:

*   **ignore**: adds the operation object to the whitelist.
*   **cancelIgnore**: removes the operation object from the whitelist.
*   **subscribe**: follows the operation object.
*   **unsubscribe**: unfollows the operation object.

This parameter is required.', example='ignore'),
  objectType?: string(name='ObjectType', description='The type of the operation object.

Valid values:

*   **assetsIp**: the asset IP address.
*   **destinationIp**: the destination IP address.
*   **destinationPort**: the destination port.
*   **destinationDomain**: the destination domain name.

This parameter is required.', example='destinationDomain'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='123.xxx.251.60'),
}

model ModifyObjectGroupOperationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='CB32593D************775F41D6ED84'),
}

model ModifyObjectGroupOperationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyObjectGroupOperationResponseBody(name='body'),
}

/**
 * @summary Modifies information about an operation on an object group.
 *
 * @param request ModifyObjectGroupOperationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyObjectGroupOperationResponse
 */
async function modifyObjectGroupOperationWithOptions(request: ModifyObjectGroupOperationRequest, runtime: Util.RuntimeOptions): ModifyObjectGroupOperationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.comment)) {
    query['Comment'] = request.comment;
  }
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.objectList)) {
    query['ObjectList'] = request.objectList;
  }
  if (!Util.isUnset(request.objectOperation)) {
    query['ObjectOperation'] = request.objectOperation;
  }
  if (!Util.isUnset(request.objectType)) {
    query['ObjectType'] = request.objectType;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyObjectGroupOperation',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies information about an operation on an object group.
 *
 * @param request ModifyObjectGroupOperationRequest
 * @return ModifyObjectGroupOperationResponse
 */
async function modifyObjectGroupOperation(request: ModifyObjectGroupOperationRequest): ModifyObjectGroupOperationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyObjectGroupOperationWithOptions(request, runtime);
}

model ModifyPolicyAdvancedConfigRequest {
  eips?: [ string ](name='Eips', description='The IP addresses. The versions of the IP addresses must be the same. You can specify a maximum of 100 IP addresses.'),
  internetSwitch?: string(name='InternetSwitch', description='Specifies whether to enable the strict mode for the access control policy. Valid values:

*   **on**: enables the strict mode.
*   **off**: disables the strict mode.

This parameter is required.', example='off'),
  lang?: string(name='Lang', description='The natural language of the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model ModifyPolicyAdvancedConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model ModifyPolicyAdvancedConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPolicyAdvancedConfigResponseBody(name='body'),
}

/**
 * @summary Enables or disables the strict mode for an access control policy.
 *
 * @description You can call the ModifyPolicyAdvancedConfig operation to enable or disable the strict mode for an access control policy.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyPolicyAdvancedConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPolicyAdvancedConfigResponse
 */
async function modifyPolicyAdvancedConfigWithOptions(request: ModifyPolicyAdvancedConfigRequest, runtime: Util.RuntimeOptions): ModifyPolicyAdvancedConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.eips)) {
    query['Eips'] = request.eips;
  }
  if (!Util.isUnset(request.internetSwitch)) {
    query['InternetSwitch'] = request.internetSwitch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPolicyAdvancedConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables the strict mode for an access control policy.
 *
 * @description You can call the ModifyPolicyAdvancedConfig operation to enable or disable the strict mode for an access control policy.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyPolicyAdvancedConfigRequest
 * @return ModifyPolicyAdvancedConfigResponse
 */
async function modifyPolicyAdvancedConfig(request: ModifyPolicyAdvancedConfigRequest): ModifyPolicyAdvancedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPolicyAdvancedConfigWithOptions(request, runtime);
}

model ModifyPrivateDnsEndpointRequest {
  accessInstanceId?: string(name='AccessInstanceId', description='This parameter is required.', example='pd-12345'),
  accessInstanceName?: string(name='AccessInstanceName', description='This parameter is required.'),
  primaryDns?: string(name='PrimaryDns', example='1.1.1.1'),
  privateDnsType?: string(name='PrivateDnsType', description='This parameter is required.', example='Custom'),
  regionNo?: string(name='RegionNo', description='This parameter is required.', example='cn-hangzhou'),
  standbyDns?: string(name='StandbyDns', example='1.1.1.2'),
}

model ModifyPrivateDnsEndpointResponseBody = {
  requestId?: string(name='RequestId', example='6B780BD6-282C-51A9-A8E6-59F636BAFA54'),
}

model ModifyPrivateDnsEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPrivateDnsEndpointResponseBody(name='body'),
}

/**
 * @summary 修改私网DNS终端节点
 *
 * @param request ModifyPrivateDnsEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPrivateDnsEndpointResponse
 */
async function modifyPrivateDnsEndpointWithOptions(request: ModifyPrivateDnsEndpointRequest, runtime: Util.RuntimeOptions): ModifyPrivateDnsEndpointResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accessInstanceId)) {
    query['AccessInstanceId'] = request.accessInstanceId;
  }
  if (!Util.isUnset(request.accessInstanceName)) {
    query['AccessInstanceName'] = request.accessInstanceName;
  }
  if (!Util.isUnset(request.primaryDns)) {
    query['PrimaryDns'] = request.primaryDns;
  }
  if (!Util.isUnset(request.privateDnsType)) {
    query['PrivateDnsType'] = request.privateDnsType;
  }
  if (!Util.isUnset(request.regionNo)) {
    query['RegionNo'] = request.regionNo;
  }
  if (!Util.isUnset(request.standbyDns)) {
    query['StandbyDns'] = request.standbyDns;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPrivateDnsEndpoint',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改私网DNS终端节点
 *
 * @param request ModifyPrivateDnsEndpointRequest
 * @return ModifyPrivateDnsEndpointResponse
 */
async function modifyPrivateDnsEndpoint(request: ModifyPrivateDnsEndpointRequest): ModifyPrivateDnsEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPrivateDnsEndpointWithOptions(request, runtime);
}

model ModifySensitiveSwitchRequest {
  lang?: string(name='Lang', example='zh'),
  sensitiveCategory?: string(name='SensitiveCategory', example='id_card'),
  switchStatus?: string(name='SwitchStatus', example='1'),
}

model ModifySensitiveSwitchResponseBody = {
  requestId?: string(name='RequestId', example='6169C0A4-B91A-5D48-AE4D-B9432D15****'),
}

model ModifySensitiveSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySensitiveSwitchResponseBody(name='body'),
}

/**
 * @summary 修改敏感数据开关
 *
 * @param request ModifySensitiveSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySensitiveSwitchResponse
 */
async function modifySensitiveSwitchWithOptions(request: ModifySensitiveSwitchRequest, runtime: Util.RuntimeOptions): ModifySensitiveSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sensitiveCategory)) {
    query['SensitiveCategory'] = request.sensitiveCategory;
  }
  if (!Util.isUnset(request.switchStatus)) {
    query['SwitchStatus'] = request.switchStatus;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySensitiveSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改敏感数据开关
 *
 * @param request ModifySensitiveSwitchRequest
 * @return ModifySensitiveSwitchResponse
 */
async function modifySensitiveSwitch(request: ModifySensitiveSwitchRequest): ModifySensitiveSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySensitiveSwitchWithOptions(request, runtime);
}

model ModifySlsDispatchStatusRequest {
  dispatchValue?: string(name='DispatchValue', example='internet_log'),
  enableStatus?: boolean(name='EnableStatus', example='true'),
  filterKeys?: string(name='FilterKeys', example='attack,acl'),
  newRegionId?: string(name='NewRegionId', example='cn-shanghai'),
}

model ModifySlsDispatchStatusResponseBody = {
  requestId?: string(name='RequestId', example='CE901E31-4AE9-579D-AC37-D2F1BB43****'),
}

model ModifySlsDispatchStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySlsDispatchStatusResponseBody(name='body'),
}

/**
 * @summary 修改SLS投递
 *
 * @param request ModifySlsDispatchStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySlsDispatchStatusResponse
 */
async function modifySlsDispatchStatusWithOptions(request: ModifySlsDispatchStatusRequest, runtime: Util.RuntimeOptions): ModifySlsDispatchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dispatchValue)) {
    query['DispatchValue'] = request.dispatchValue;
  }
  if (!Util.isUnset(request.enableStatus)) {
    query['EnableStatus'] = request.enableStatus;
  }
  if (!Util.isUnset(request.filterKeys)) {
    query['FilterKeys'] = request.filterKeys;
  }
  if (!Util.isUnset(request.newRegionId)) {
    query['NewRegionId'] = request.newRegionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySlsDispatchStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改SLS投递
 *
 * @param request ModifySlsDispatchStatusRequest
 * @return ModifySlsDispatchStatusResponse
 */
async function modifySlsDispatchStatus(request: ModifySlsDispatchStatusRequest): ModifySlsDispatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySlsDispatchStatusWithOptions(request, runtime);
}

model ModifyThreatIntelligenceSwitchRequest {
  categoryList?: [ 
    {
      action?: string(name='Action', example='alert'),
      categoryId?: string(name='CategoryId', example='IpOutThreatTorExit'),
      enableStatus?: string(name='EnableStatus', example='1'),
    }
  ](name='CategoryList'),
}

model ModifyThreatIntelligenceSwitchResponseBody = {
  requestId?: string(name='RequestId', example='850A84D6-0DE4-4797-A1E8-0009012****'),
}

model ModifyThreatIntelligenceSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyThreatIntelligenceSwitchResponseBody(name='body'),
}

/**
 * @summary 修改威胁情报配置的信息
 *
 * @param request ModifyThreatIntelligenceSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyThreatIntelligenceSwitchResponse
 */
async function modifyThreatIntelligenceSwitchWithOptions(request: ModifyThreatIntelligenceSwitchRequest, runtime: Util.RuntimeOptions): ModifyThreatIntelligenceSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.categoryList)) {
    query['CategoryList'] = request.categoryList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyThreatIntelligenceSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改威胁情报配置的信息
 *
 * @param request ModifyThreatIntelligenceSwitchRequest
 * @return ModifyThreatIntelligenceSwitchResponse
 */
async function modifyThreatIntelligenceSwitch(request: ModifyThreatIntelligenceSwitchRequest): ModifyThreatIntelligenceSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyThreatIntelligenceSwitchWithOptions(request, runtime);
}

model ModifyTrFirewallV2ConfigurationRequest {
  firewallId?: string(name='FirewallId', description='The instance ID of the VPC firewall.', example='vfw-tr-bcdf89d405ce4bd2****'),
  firewallName?: string(name='FirewallName', description='The instance name of the VPC firewall.', example='Test instance'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
}

model ModifyTrFirewallV2ConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A74C8FDD-2BEF-52D5-8B01-EB6FD94606F9'),
}

model ModifyTrFirewallV2ConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTrFirewallV2ConfigurationResponseBody(name='body'),
}

/**
 * @summary Modifies the configuration of a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request ModifyTrFirewallV2ConfigurationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyTrFirewallV2ConfigurationResponse
 */
async function modifyTrFirewallV2ConfigurationWithOptions(request: ModifyTrFirewallV2ConfigurationRequest, runtime: Util.RuntimeOptions): ModifyTrFirewallV2ConfigurationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.firewallName)) {
    query['FirewallName'] = request.firewallName;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTrFirewallV2Configuration',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configuration of a virtual private cloud (VPC) firewall that is created for a transit router.
 *
 * @param request ModifyTrFirewallV2ConfigurationRequest
 * @return ModifyTrFirewallV2ConfigurationResponse
 */
async function modifyTrFirewallV2Configuration(request: ModifyTrFirewallV2ConfigurationRequest): ModifyTrFirewallV2ConfigurationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrFirewallV2ConfigurationWithOptions(request, runtime);
}

model ModifyTrFirewallV2RoutePolicyScopeRequest {
  destCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-2ze9epancaw8t4shajuzi'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
    }
  ](name='DestCandidateList', description='The secondary traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the virtual private cloud (VPC) firewall.

This parameter is required.', example='vfw-tr-6520de0253bc4669bbd9'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*  **zh** (default): Chinese
*  **en**: English', example='zh'),
  shouldRecover?: string(name='ShouldRecover', description='Specifies whether to restore the traffic redirection configurations. Valid values:

*   true: roll back
*   false: withdraw', example='false'),
  srcCandidateList?: [ 
    {
      candidateId?: string(name='CandidateId', description='The ID of the traffic redirection instance.', example='vpc-2ze9epancaw8t4shajuzi'),
      candidateType?: string(name='CandidateType', description='The type of the traffic redirection instance.', example='VPC'),
    }
  ](name='SrcCandidateList', description='The primary traffic redirection instances.'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.

This parameter is required.', example='policy-4d724d0139df48f18091'),
}

model ModifyTrFirewallV2RoutePolicyScopeShrinkRequest {
  destCandidateListShrink?: string(name='DestCandidateList', description='The secondary traffic redirection instances.'),
  firewallId?: string(name='FirewallId', description='The instance ID of the virtual private cloud (VPC) firewall.

This parameter is required.', example='vfw-tr-6520de0253bc4669bbd9'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*  **zh** (default): Chinese
*  **en**: English', example='zh'),
  shouldRecover?: string(name='ShouldRecover', description='Specifies whether to restore the traffic redirection configurations. Valid values:

*   true: roll back
*   false: withdraw', example='false'),
  srcCandidateListShrink?: string(name='SrcCandidateList', description='The primary traffic redirection instances.'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.

This parameter is required.', example='policy-4d724d0139df48f18091'),
}

model ModifyTrFirewallV2RoutePolicyScopeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E7D4D635-0C70-5CEB-A609-851E94D51FBB'),
  trFirewallRoutePolicyId?: string(name='TrFirewallRoutePolicyId', description='The ID of the routing policy.', example='policy-4d724d0139df48f18091'),
}

model ModifyTrFirewallV2RoutePolicyScopeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTrFirewallV2RoutePolicyScopeResponseBody(name='body'),
}

/**
 * @summary Modifies the effective scope of the routing policy created for the VPC firewall for a transit router.
 *
 * @param tmpReq ModifyTrFirewallV2RoutePolicyScopeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyTrFirewallV2RoutePolicyScopeResponse
 */
async function modifyTrFirewallV2RoutePolicyScopeWithOptions(tmpReq: ModifyTrFirewallV2RoutePolicyScopeRequest, runtime: Util.RuntimeOptions): ModifyTrFirewallV2RoutePolicyScopeResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyTrFirewallV2RoutePolicyScopeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.destCandidateList)) {
    request.destCandidateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.destCandidateList, 'DestCandidateList', 'json');
  }
  if (!Util.isUnset(tmpReq.srcCandidateList)) {
    request.srcCandidateListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.srcCandidateList, 'SrcCandidateList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.destCandidateListShrink)) {
    query['DestCandidateList'] = request.destCandidateListShrink;
  }
  if (!Util.isUnset(request.firewallId)) {
    query['FirewallId'] = request.firewallId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.shouldRecover)) {
    query['ShouldRecover'] = request.shouldRecover;
  }
  if (!Util.isUnset(request.srcCandidateListShrink)) {
    query['SrcCandidateList'] = request.srcCandidateListShrink;
  }
  if (!Util.isUnset(request.trFirewallRoutePolicyId)) {
    query['TrFirewallRoutePolicyId'] = request.trFirewallRoutePolicyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTrFirewallV2RoutePolicyScope',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the effective scope of the routing policy created for the VPC firewall for a transit router.
 *
 * @param request ModifyTrFirewallV2RoutePolicyScopeRequest
 * @return ModifyTrFirewallV2RoutePolicyScopeResponse
 */
async function modifyTrFirewallV2RoutePolicyScope(request: ModifyTrFirewallV2RoutePolicyScopeRequest): ModifyTrFirewallV2RoutePolicyScopeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrFirewallV2RoutePolicyScopeWithOptions(request, runtime);
}

model ModifyUserIPSWhitelistRequest {
  direction?: long(name='Direction', example='1'),
  ipVersion?: string(name='IpVersion', example='ipv4'),
  lang?: string(name='Lang', example='zh'),
  listType?: long(name='ListType', example='2'),
  listValue?: string(name='ListValue', example='115.236.36.114/32'),
  sourceIp?: string(name='SourceIp', example='47.100.XX.XX'),
  whiteType?: long(name='WhiteType', example='2'),
}

model ModifyUserIPSWhitelistResponseBody = {
  requestId?: string(name='RequestId', example='36E89955-1E5D-5810-970C-74646F378085'),
}

model ModifyUserIPSWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserIPSWhitelistResponseBody(name='body'),
}

/**
 * @summary 修改用户IPS白名单
 *
 * @param request ModifyUserIPSWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyUserIPSWhitelistResponse
 */
async function modifyUserIPSWhitelistWithOptions(request: ModifyUserIPSWhitelistRequest, runtime: Util.RuntimeOptions): ModifyUserIPSWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.direction)) {
    query['Direction'] = request.direction;
  }
  if (!Util.isUnset(request.ipVersion)) {
    query['IpVersion'] = request.ipVersion;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.listValue)) {
    query['ListValue'] = request.listValue;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.whiteType)) {
    query['WhiteType'] = request.whiteType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserIPSWhitelist',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改用户IPS白名单
 *
 * @param request ModifyUserIPSWhitelistRequest
 * @return ModifyUserIPSWhitelistResponse
 */
async function modifyUserIPSWhitelist(request: ModifyUserIPSWhitelistRequest): ModifyUserIPSWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserIPSWhitelistWithOptions(request, runtime);
}

model ModifyUserSlsLogStorageTimeRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='vipcloudfw-cn-uqm3fz****'),
  storageTime?: int32(name='StorageTime', description='This parameter is required.', example='180'),
}

model ModifyUserSlsLogStorageTimeResponseBody = {
  requestId?: string(name='RequestId', example='337A4DBA-8A01-5E9C-99CA-84293E13****'),
}

model ModifyUserSlsLogStorageTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserSlsLogStorageTimeResponseBody(name='body'),
}

/**
 * @summary 修改用户日志存储时间
 *
 * @param request ModifyUserSlsLogStorageTimeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyUserSlsLogStorageTimeResponse
 */
async function modifyUserSlsLogStorageTimeWithOptions(request: ModifyUserSlsLogStorageTimeRequest, runtime: Util.RuntimeOptions): ModifyUserSlsLogStorageTimeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.storageTime)) {
    query['StorageTime'] = request.storageTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserSlsLogStorageTime',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改用户日志存储时间
 *
 * @param request ModifyUserSlsLogStorageTimeRequest
 * @return ModifyUserSlsLogStorageTimeResponse
 */
async function modifyUserSlsLogStorageTime(request: ModifyUserSlsLogStorageTimeRequest): ModifyUserSlsLogStorageTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserSlsLogStorageTimeWithOptions(request, runtime);
}

model ModifyVpcFirewallAclEngineModeRequest {
  memberUid?: string(name='MemberUid', example='258039427902****'),
  strictMode?: string(name='StrictMode', example='0'),
  vpcFirewallId?: string(name='VpcFirewallId', description='This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model ModifyVpcFirewallAclEngineModeResponseBody = {
  requestId?: string(name='RequestId', example='B14757D0-4640-4B44-AC67-7F558F****'),
}

model ModifyVpcFirewallAclEngineModeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallAclEngineModeResponseBody(name='body'),
}

/**
 * @summary 修改VPC防火墙ACL引擎模式
 *
 * @param request ModifyVpcFirewallAclEngineModeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallAclEngineModeResponse
 */
async function modifyVpcFirewallAclEngineModeWithOptions(request: ModifyVpcFirewallAclEngineModeRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallAclEngineModeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.strictMode)) {
    query['StrictMode'] = request.strictMode;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallAclEngineMode',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改VPC防火墙ACL引擎模式
 *
 * @param request ModifyVpcFirewallAclEngineModeRequest
 * @return ModifyVpcFirewallAclEngineModeResponse
 */
async function modifyVpcFirewallAclEngineMode(request: ModifyVpcFirewallAclEngineModeRequest): ModifyVpcFirewallAclEngineModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallAclEngineModeWithOptions(request, runtime);
}

model ModifyVpcFirewallCenConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](https://help.aliyun.com/document_detail/345777.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.

This parameter is required.', example='Test instance'),
}

model ModifyVpcFirewallCenConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6f8'),
}

model ModifyVpcFirewallCenConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallCenConfigureResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the ModifyVpcFirewallCenConfigure operation to modify the configurations of a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallCenConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallCenConfigureResponse
 */
async function modifyVpcFirewallCenConfigureWithOptions(request: ModifyVpcFirewallCenConfigureRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallCenConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallCenConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the ModifyVpcFirewallCenConfigure operation to modify the configurations of a VPC firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallCenConfigureRequest
 * @return ModifyVpcFirewallCenConfigureResponse
 */
async function modifyVpcFirewallCenConfigure(request: ModifyVpcFirewallCenConfigureRequest): ModifyVpcFirewallCenConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallCenConfigureWithOptions(request, runtime);
}

model ModifyVpcFirewallCenSwitchStatusRequest {
  firewallSwitch?: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: yes
*   **close**: no

This parameter is required.', example='open'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallCenList](https://help.aliyun.com/document_detail/345777.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model ModifyVpcFirewallCenSwitchStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125afj2'),
}

model ModifyVpcFirewallCenSwitchStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallCenSwitchStatusResponseBody(name='body'),
}

/**
 * @summary Enables or disables a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the ModifyVpcFirewallCenSwitchStatus operation to enable or disable a VPC firewall. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. After you enable the VPC firewall, the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. After you disable the VPC firewall, the VPC firewall no longer protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance.
 * Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallCenSwitchStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallCenSwitchStatusResponse
 */
async function modifyVpcFirewallCenSwitchStatusWithOptions(request: ModifyVpcFirewallCenSwitchStatusRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallCenSwitchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallSwitch)) {
    query['FirewallSwitch'] = request.firewallSwitch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallCenSwitchStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables a virtual private cloud (VPC) firewall. The VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a Cloud Enterprise Network (CEN) instance.
 *
 * @description You can call the ModifyVpcFirewallCenSwitchStatus operation to enable or disable a VPC firewall. A VPC firewall protects mutual access traffic between a specified VPC and a network instance that is attached to a CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. After you enable the VPC firewall, the VPC firewall protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance. After you disable the VPC firewall, the VPC firewall no longer protects mutual access traffic between a VPC and a specified network instance that is attached to a CEN instance.
 * Before you call this operation, make sure that you have created a VPC firewall by calling the [CreateVpcFirewallCenConfigure](https://help.aliyun.com/document_detail/345772.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallCenSwitchStatusRequest
 * @return ModifyVpcFirewallCenSwitchStatusResponse
 */
async function modifyVpcFirewallCenSwitchStatus(request: ModifyVpcFirewallCenSwitchStatusRequest): ModifyVpcFirewallCenSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallCenSwitchStatusWithOptions(request, runtime);
}

model ModifyVpcFirewallConfigureRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  localVpcCidrTableList?: string(name='LocalVpcCidrTableList', description='The CIDR blocks of the local VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the local VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the local VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the local VPC.

> You can call the [DescribeVpcFirewallDetail](https://help.aliyun.com/document_detail/342892.html) operation to query the CIDR blocks of local VPCs for VPC firewalls.

This parameter is required.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  peerVpcCidrTableList?: string(name='PeerVpcCidrTableList', description='The CIDR blocks of the peer VPC. The value is a JSON string that contains the following parameters:

*   **RouteTableId**: the ID of the route table for the peer VPC.
*   **RouteEntryList**: The value is a JSON string that contains the DestinationCidr and NextHopInstanceId parameters. The DestinationCidr parameter indicates the destination CIDR block of the peer VPC. The NextHopInstanceId parameter indicates the instance ID of the next hop for the peer VPC.

> You can call the [DescribeVpcFirewallDetail](https://help.aliyun.com/document_detail/342892.html) operation to query the CIDR blocks of peer VPCs for VPC firewalls.

This parameter is required.', example='[{"RouteTableId":"vtb-1234","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]},{"RouteTableId":"vtb-1235","RouteEntryList":[{"DestinationCidr":"192.168.XX.XX/24","NextHopInstanceId":"vrt-m5eb5me6c3l5sezae****"}]}]'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallList](https://help.aliyun.com/document_detail/342932.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
  vpcFirewallName?: string(name='VpcFirewallName', description='The instance name of the VPC firewall.

This parameter is required.', example='Test firewall'),
}

model ModifyVpcFirewallConfigureResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125k6f8'),
}

model ModifyVpcFirewallConfigureResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallConfigureResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of a virtual private cloud (VPC) firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the ModifyVpcFirewallConfigure operation to modify the configurations of a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallConfigureRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallConfigureResponse
 */
async function modifyVpcFirewallConfigureWithOptions(request: ModifyVpcFirewallConfigureRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallConfigureResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.localVpcCidrTableList)) {
    query['LocalVpcCidrTableList'] = request.localVpcCidrTableList;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.peerVpcCidrTableList)) {
    query['PeerVpcCidrTableList'] = request.peerVpcCidrTableList;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  if (!Util.isUnset(request.vpcFirewallName)) {
    query['VpcFirewallName'] = request.vpcFirewallName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallConfigure',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of a virtual private cloud (VPC) firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the ModifyVpcFirewallConfigure operation to modify the configurations of a VPC firewall. The VPC firewall controls traffic between two VPCs that are connected by using an Express Connect circuit. Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallConfigureRequest
 * @return ModifyVpcFirewallConfigureResponse
 */
async function modifyVpcFirewallConfigure(request: ModifyVpcFirewallConfigureRequest): ModifyVpcFirewallConfigureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallConfigureWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyRequest {
  aclAction?: string(name='AclAction', description='The action that Cloud Firewall performs on the traffic.

Valid values:

*   **accept**: allows the traffic.
*   **drop**: blocks the traffic.
*   **log**: monitors the traffic.', example='accept'),
  aclUuid?: string(name='AclUuid', description='The unique ID of the access control policy.

If you want to modify the configurations of an access control policy, you must provide the unique ID of the policy. You can call the [DescribeVpcFirewallControlPolicy](https://help.aliyun.com/document_detail/159758.html) operation to query the ID.

This parameter is required.', example='00281255-d220-4db1-8f4f-c4df221a****'),
  applicationName?: string(name='ApplicationName', description='The type of the application that the access control policy supports.

Valid values:

*   ANY: all application types
*   FTP
*   HTTP
*   HTTPS
*   MySQL
*   SMTP
*   SMTPS
*   RDP
*   VNC
*   SSH
*   Redis
*   MQTT
*   MongoDB
*   Memcache
*   SSL', example='HTTP', deprecated=true),
  applicationNameList?: [ string ](name='ApplicationNameList', description='The application names.'),
  description?: string(name='Description', description='The description of the access control policy.', example='test'),
  destPort?: string(name='DestPort', description='The destination port in the access control policy.', example='80'),
  destPortGroup?: string(name='DestPortGroup', description='The name of the destination port address book in the access control policy.', example='my_port_group'),
  destPortType?: string(name='DestPortType', description='The type of the destination port in the access control policy.

*   **port**: port
*   **group**: port address book', example='port'),
  destination?: string(name='Destination', description='The destination address in the access control policy.

*   If **DestinationType** is set to `net`, the value of this parameter must be a CIDR block.

    Example: 10.2.3.0/24

*   If **DestinationType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group

*   If **DestinationType** is set to `domain`, the value of this parameter must be a domain name.

    Example: \\\\*.aliyuncs.com', example='10.2.X.X/XX'),
  destinationType?: string(name='DestinationType', description='The type of the destination address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book
*   **domain**: domain name', example='net'),
  domainResolveType?: string(name='DomainResolveType', description='The domain name resolution method of the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

* **FQDN**: fully qualified domain name (FQDN)-based resolution
* **DNS**: DNS-based dynamic resolution
* **FQDN_AND_DNS**: FQDN and DNS-based dynamic resolution', example='FQDN'),
  endTime?: long(name='EndTime', description='The time when the access control policy stops taking effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of StartTime.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694764800'),
  lang?: string(name='Lang', description='The language of the content within the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  proto?: string(name='Proto', description='The protocol type in the access control policy.

Valid values:

*   ANY: all protocol types
*   TCP
*   UDP
*   ICMP', example='TCP'),
  release?: string(name='Release', description='Specifies whether to enable the access control policy. By default, an access control policy is enabled after the policy is created. Valid values:

*   **true**: enables the access control policy.
*   **false**: disables the access control policy.', example='true'),
  repeatDays?: [ long ](name='RepeatDays', description='The days of a week or of a month on which the access control policy takes effect.

*   If you set RepeatType to `Permanent`, `None`, or `Daily`, the value of this parameter is an empty array. Example: [].
*   If you set RepeatType to Weekly, you must specify this parameter. Example: [0, 6].

>  If you set RepeatType to Weekly, the fields in the value of this parameter cannot be repeated.

*   If you set RepeatType to `Monthly`, you must specify this parameter. Example: [1, 31].

>  If you set RepeatType to Monthly, the fields in the value of this parameter cannot be repeated.'),
  repeatEndTime?: string(name='RepeatEndTime', description='The point in time when the recurrence ends. Example: 23:30. The value must be on the hour or on the half hour, and at least 30 minutes later than the value of RepeatStartTime.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='23:30'),
  repeatStartTime?: string(name='RepeatStartTime', description='The point in time when the recurrence starts. Example: 08:00. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of RepeatEndTime.

>  If you set RepeatType to Permanent or None, leave this parameter empty. If you set RepeatType to Daily, Weekly, or Monthly, you must specify this parameter.', example='08:00'),
  repeatType?: string(name='RepeatType', description='The recurrence type for the access control policy to take effect. Valid values:

*   **Permanent** (default): The policy always takes effect.
*   **None**: The policy takes effect for only once.
*   **Daily**: The policy takes effect on a daily basis.
*   **Weekly**: The policy takes effect on a weekly basis.
*   **Monthly**: The policy takes effect on a monthly basis.', example='Permanent'),
  source?: string(name='Source', description='The source address in the access control policy.

Valid values:

*   If **SourceType** is set to `net`, the value of this parameter must be a CIDR block.

    Example: 10.2.4.0/24

*   If **SourceType** is set to `group`, the value of this parameter must be an address book name.

    Example: db_group', example='10.2.X.X/XX'),
  sourceType?: string(name='SourceType', description='The type of the source address in the access control policy.

Valid values:

*   **net**: CIDR block
*   **group**: address book', example='net'),
  startTime?: long(name='StartTime', description='The time when the access control policy starts to take effect. The value is a UNIX timestamp. Unit: seconds. The value must be on the hour or on the half hour, and at least 30 minutes earlier than the value of EndTime.

>  If you set RepeatType to Permanent, leave this parameter empty. If you set RepeatType to None, Daily, Weekly, or Monthly, you must specify this parameter.', example='1694761200'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall. You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the ID.

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter must be the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\\\*\\\\*\\\\*\\\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\\\*\\\\*\\\\*\\\\*

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
}

model ModifyVpcFirewallControlPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBF1E9B7-D6A0-4E9E-AD3E-2B47E6C2837D'),
}

model ModifyVpcFirewallControlPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallControlPolicyResponseBody(name='body'),
}

/**
 * @summary Modifies the configurations of an access control policy that is created for a virtual private cloud (VPC) firewall in a specified policy group.
 *
 * @description You can call the ModifyVpcFirewallControlPolicy operation to modify the configurations of an access control policy that is created for a VPC firewall in a specified policy group. Different access control policies are used for the VPC firewalls that are used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewalls that are used to protect each Express Connect circuit.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallControlPolicyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallControlPolicyResponse
 */
async function modifyVpcFirewallControlPolicyWithOptions(request: ModifyVpcFirewallControlPolicyRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclAction)) {
    query['AclAction'] = request.aclAction;
  }
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.applicationName)) {
    query['ApplicationName'] = request.applicationName;
  }
  if (!Util.isUnset(request.applicationNameList)) {
    query['ApplicationNameList'] = request.applicationNameList;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.destPort)) {
    query['DestPort'] = request.destPort;
  }
  if (!Util.isUnset(request.destPortGroup)) {
    query['DestPortGroup'] = request.destPortGroup;
  }
  if (!Util.isUnset(request.destPortType)) {
    query['DestPortType'] = request.destPortType;
  }
  if (!Util.isUnset(request.destination)) {
    query['Destination'] = request.destination;
  }
  if (!Util.isUnset(request.destinationType)) {
    query['DestinationType'] = request.destinationType;
  }
  if (!Util.isUnset(request.domainResolveType)) {
    query['DomainResolveType'] = request.domainResolveType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proto)) {
    query['Proto'] = request.proto;
  }
  if (!Util.isUnset(request.release)) {
    query['Release'] = request.release;
  }
  if (!Util.isUnset(request.repeatDays)) {
    query['RepeatDays'] = request.repeatDays;
  }
  if (!Util.isUnset(request.repeatEndTime)) {
    query['RepeatEndTime'] = request.repeatEndTime;
  }
  if (!Util.isUnset(request.repeatStartTime)) {
    query['RepeatStartTime'] = request.repeatStartTime;
  }
  if (!Util.isUnset(request.repeatType)) {
    query['RepeatType'] = request.repeatType;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.sourceType)) {
    query['SourceType'] = request.sourceType;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallControlPolicy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the configurations of an access control policy that is created for a virtual private cloud (VPC) firewall in a specified policy group.
 *
 * @description You can call the ModifyVpcFirewallControlPolicy operation to modify the configurations of an access control policy that is created for a VPC firewall in a specified policy group. Different access control policies are used for the VPC firewalls that are used to protect each Cloud Enterprise Network (CEN) instance and the VPC firewalls that are used to protect each Express Connect circuit.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallControlPolicyRequest
 * @return ModifyVpcFirewallControlPolicyResponse
 */
async function modifyVpcFirewallControlPolicy(request: ModifyVpcFirewallControlPolicyRequest): ModifyVpcFirewallControlPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyWithOptions(request, runtime);
}

model ModifyVpcFirewallControlPolicyPositionRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

If you want to modify the configurations of an access control policy, you must provide the UUID of the policy. You can call the [DescribeVpcFirewallControlPolicy](https://help.aliyun.com/document_detail/159758.html) operation to query the UUID.', example='2746d9ff-5d7c-449d-a2a9-ccaa15fe****'),
  lang?: string(name='Lang', description='The language of the content within the request and the response.

Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  newOrder?: string(name='NewOrder', description='The new priority of the access control policy.

>  For more information about the valid values of the new priority, see [DescribeVpcFirewallPolicyPriorUsed](https://help.aliyun.com/document_detail/474145.html).

This parameter is required.', example='1'),
  oldOrder?: string(name='OldOrder', description='The original priority of the access control policy.

> This parameter is not recommended. We recommend that you use the AclUuid parameter to specify the policy that you want to modify.', example='5'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The ID of the group to which the access control policy belongs. You can call the [DescribeVpcFirewallAclGroupList](https://help.aliyun.com/document_detail/159760.html) operation to query the ID.

Valid values:

*   If the VPC firewall is used to protect a CEN instance, the value of this parameter must be the ID of the CEN instance.

    Example: cen-ervw0g12b5jbw\\\\*\\\\*\\\\*\\\\*

*   If the VPC firewall is used to protect an Express Connect circuit, the value of this parameter must be the instance ID of the VPC firewall.

    Example: vfw-a42bbb7b887148c9\\\\*\\\\*\\\\*\\\\*

This parameter is required.', example='vfw-a42bbb7b887148c9****'),
}

model ModifyVpcFirewallControlPolicyPositionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='850A84D6-0DE4-4797-A1E8-00090125EEB1'),
}

model ModifyVpcFirewallControlPolicyPositionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallControlPolicyPositionResponseBody(name='body'),
}

/**
 * @summary Modifies the priority of an access control policy that is created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can use this operation to modify the priority of an access control policy that is created for a VPC firewall in a specific policy group.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallControlPolicyPositionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallControlPolicyPositionResponse
 */
async function modifyVpcFirewallControlPolicyPositionWithOptions(request: ModifyVpcFirewallControlPolicyPositionRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallControlPolicyPositionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.newOrder)) {
    query['NewOrder'] = request.newOrder;
  }
  if (!Util.isUnset(request.oldOrder)) {
    query['OldOrder'] = request.oldOrder;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallControlPolicyPosition',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the priority of an access control policy that is created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can use this operation to modify the priority of an access control policy that is created for a VPC firewall in a specific policy group.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallControlPolicyPositionRequest
 * @return ModifyVpcFirewallControlPolicyPositionResponse
 */
async function modifyVpcFirewallControlPolicyPosition(request: ModifyVpcFirewallControlPolicyPositionRequest): ModifyVpcFirewallControlPolicyPositionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallControlPolicyPositionWithOptions(request, runtime);
}

model ModifyVpcFirewallDefaultIPSConfigRequest {
  basicRules?: string(name='BasicRules', description='Specifies whether to enable basic protection. Valid values:

*   **1**: yes.
*   **0**: no.

This parameter is required.', example='1'),
  enableAllPatch?: string(name='EnableAllPatch', description='Specifies whether to enable virtual patching. Valid values:

*   **1**: yes.
*   **0**: no.

This parameter is required.', example='1'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  ruleClass?: string(name='RuleClass', description='The level of the rule group for the IPS. Valid values:

*   **1**: loose
*   **2**: medium
*   **3**: strict', example='1'),
  runMode?: string(name='RunMode', description='The mode of the intrusion prevention system (IPS). Valid values:

*   **1**: block mode.
*   **0**: monitor mode.

This parameter is required.', example='0'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

*   If the VPC firewall protects traffic between a VPC and a network instance that is attached to a Cloud Enterprise Network (CEN) instance, the value of this parameter is the ID of the CEN instance. The network instance can be a VPC, a virtual border router (VBR), or a Cloud Connect Network (CCN) instance. You can call the [DescribeVpcFirewallCenList](https://help.aliyun.com/document_detail/345777.html) operation to query the IDs of CEN instances.
*   If the VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit, the value of this parameter is the instance ID of the VPC firewall. You can call the [DescribeVpcFirewallList](https://help.aliyun.com/document_detail/342932.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model ModifyVpcFirewallDefaultIPSConfigResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='3B51B5BF-3C26-5009-ADAB-190E58DE4D6E'),
}

model ModifyVpcFirewallDefaultIPSConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallDefaultIPSConfigResponseBody(name='body'),
}

/**
 * @summary Modifies the intrusion prevention configurations of a virtual private cloud (VPC) firewall.
 *
 * @description You can call this operation to modify the intrusion prevention configurations of a VPC firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallDefaultIPSConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallDefaultIPSConfigResponse
 */
async function modifyVpcFirewallDefaultIPSConfigWithOptions(request: ModifyVpcFirewallDefaultIPSConfigRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallDefaultIPSConfigResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.basicRules)) {
    query['BasicRules'] = request.basicRules;
  }
  if (!Util.isUnset(request.enableAllPatch)) {
    query['EnableAllPatch'] = request.enableAllPatch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.ruleClass)) {
    query['RuleClass'] = request.ruleClass;
  }
  if (!Util.isUnset(request.runMode)) {
    query['RunMode'] = request.runMode;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallDefaultIPSConfig',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the intrusion prevention configurations of a virtual private cloud (VPC) firewall.
 *
 * @description You can call this operation to modify the intrusion prevention configurations of a VPC firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallDefaultIPSConfigRequest
 * @return ModifyVpcFirewallDefaultIPSConfigResponse
 */
async function modifyVpcFirewallDefaultIPSConfig(request: ModifyVpcFirewallDefaultIPSConfigRequest): ModifyVpcFirewallDefaultIPSConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallDefaultIPSConfigWithOptions(request, runtime);
}

model ModifyVpcFirewallIPSWhitelistRequest {
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  listType?: long(name='ListType', description='The type of the list. Valid values:

*   **1**: user-defined
*   **2**: address book

This parameter is required.', example='1'),
  listValue?: string(name='ListValue', description='The entry in the list.', example='10.130.0.0/20,10.130.17.11/32'),
  memberUid?: long(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='1415189284827022'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

This parameter is required.', example='vfw-d7b8ce273791475b9b0b'),
  whiteType?: long(name='WhiteType', description='The type of the whitelist. Valid values:

*   **1**: destination
*   **2**: source

This parameter is required.', example='1'),
}

model ModifyVpcFirewallIPSWhitelistResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2E8D49A-E5AA-5FF8-8822-25282DCF4BE8'),
}

model ModifyVpcFirewallIPSWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallIPSWhitelistResponseBody(name='body'),
}

/**
 * @summary Modifies the IPS whitelist of a virtual private cloud (VPC) firewall.
 *
 * @param request ModifyVpcFirewallIPSWhitelistRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallIPSWhitelistResponse
 */
async function modifyVpcFirewallIPSWhitelistWithOptions(request: ModifyVpcFirewallIPSWhitelistRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallIPSWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.listType)) {
    query['ListType'] = request.listType;
  }
  if (!Util.isUnset(request.listValue)) {
    query['ListValue'] = request.listValue;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  if (!Util.isUnset(request.whiteType)) {
    query['WhiteType'] = request.whiteType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallIPSWhitelist',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the IPS whitelist of a virtual private cloud (VPC) firewall.
 *
 * @param request ModifyVpcFirewallIPSWhitelistRequest
 * @return ModifyVpcFirewallIPSWhitelistResponse
 */
async function modifyVpcFirewallIPSWhitelist(request: ModifyVpcFirewallIPSWhitelistRequest): ModifyVpcFirewallIPSWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallIPSWhitelistWithOptions(request, runtime);
}

model ModifyVpcFirewallSwitchStatusRequest {
  firewallSwitch?: string(name='FirewallSwitch', description='Specifies whether to enable the VPC firewall. Valid values:

*   **open**: yes
*   **close**: no

This parameter is required.', example='open'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  memberUid?: string(name='MemberUid', description='The UID of the member that is managed by your Alibaba Cloud account.', example='258039427902****'),
  vpcFirewallId?: string(name='VpcFirewallId', description='The instance ID of the VPC firewall.

> You can call the [DescribeVpcFirewallList](https://help.aliyun.com/document_detail/342932.html) operation to query the instance IDs of VPC firewalls.

This parameter is required.', example='vfw-m5e7dbc4y****'),
}

model ModifyVpcFirewallSwitchStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='850A84D6-0DE4-4797-A1E8-00090125afj2'),
}

model ModifyVpcFirewallSwitchStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyVpcFirewallSwitchStatusResponseBody(name='body'),
}

/**
 * @summary Enables or disables a virtual private cloud (VPC) firewall. The VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the ModifyVpcFirewallSwitchStatus operation to enable or disable a VPC firewall. The VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit. After you enable the VPC firewall, the VPC firewall protects access traffic between two VPCs that are connected by using an Express Connect circuit. After you disable the VPC firewall, the VPC firewall no longer protects access traffic between two VPCs that are connected by using an Express Connect circuit.
 * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallSwitchStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyVpcFirewallSwitchStatusResponse
 */
async function modifyVpcFirewallSwitchStatusWithOptions(request: ModifyVpcFirewallSwitchStatusRequest, runtime: Util.RuntimeOptions): ModifyVpcFirewallSwitchStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.firewallSwitch)) {
    query['FirewallSwitch'] = request.firewallSwitch;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.memberUid)) {
    query['MemberUid'] = request.memberUid;
  }
  if (!Util.isUnset(request.vpcFirewallId)) {
    query['VpcFirewallId'] = request.vpcFirewallId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyVpcFirewallSwitchStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables a virtual private cloud (VPC) firewall. The VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit.
 *
 * @description You can call the ModifyVpcFirewallSwitchStatus operation to enable or disable a VPC firewall. The VPC firewall protects traffic between two VPCs that are connected by using an Express Connect circuit. After you enable the VPC firewall, the VPC firewall protects access traffic between two VPCs that are connected by using an Express Connect circuit. After you disable the VPC firewall, the VPC firewall no longer protects access traffic between two VPCs that are connected by using an Express Connect circuit.
 * Before you call the operation, make sure that you created a VPC firewall by calling the [CreateVpcFirewallConfigure](https://help.aliyun.com/document_detail/342893.html) operation.
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyVpcFirewallSwitchStatusRequest
 * @return ModifyVpcFirewallSwitchStatusResponse
 */
async function modifyVpcFirewallSwitchStatus(request: ModifyVpcFirewallSwitchStatusRequest): ModifyVpcFirewallSwitchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyVpcFirewallSwitchStatusWithOptions(request, runtime);
}

model PutDisableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='i-2ze8v2x5kd9qyvp2****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values: Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model PutDisableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutDisableAllFwSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDisableAllFwSwitchResponseBody(name='body'),
}

/**
 * @summary Turns off all firewall switches.
 *
 * @description You can call the PutDisableAllFwSwitch operation to turn off all firewall switches.
 * ## [](#qps-)QPS limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutDisableAllFwSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutDisableAllFwSwitchResponse
 */
async function putDisableAllFwSwitchWithOptions(request: PutDisableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableAllFwSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutDisableAllFwSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Turns off all firewall switches.
 *
 * @description You can call the PutDisableAllFwSwitch operation to turn off all firewall switches.
 * ## [](#qps-)QPS limits
 * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutDisableAllFwSwitchRequest
 * @return PutDisableAllFwSwitchResponse
 */
async function putDisableAllFwSwitch(request: PutDisableAllFwSwitchRequest): PutDisableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableAllFwSwitchWithOptions(request, runtime);
}

model PutDisableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList', description='The IP addresses.

>  You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["192.0.XX.XX","192.0.XX.XX"]'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  regionList?: [ string ](name='RegionList', description='The regions.

>  You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["cn-hangzhou","cn-shanghai"]'),
  resourceTypeList?: [ string ](name='ResourceTypeList', description='The types of the assets.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["EcsPublicIp","NatEip"]'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model PutDisableFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutDisableFwSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutDisableFwSwitchResponseBody(name='body'),
}

/**
 * @summary Disable a firewall for specific assets.
 *
 * @description You can call the PutDisableFwSwitch operation to disable a firewall for specific assets. After you disable the firewall, traffic does not pass through Cloud Firewall.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutDisableFwSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutDisableFwSwitchResponse
 */
async function putDisableFwSwitchWithOptions(request: PutDisableFwSwitchRequest, runtime: Util.RuntimeOptions): PutDisableFwSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipaddrList)) {
    query['IpaddrList'] = request.ipaddrList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionList)) {
    query['RegionList'] = request.regionList;
  }
  if (!Util.isUnset(request.resourceTypeList)) {
    query['ResourceTypeList'] = request.resourceTypeList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutDisableFwSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Disable a firewall for specific assets.
 *
 * @description You can call the PutDisableFwSwitch operation to disable a firewall for specific assets. After you disable the firewall, traffic does not pass through Cloud Firewall.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutDisableFwSwitchRequest
 * @return PutDisableFwSwitchResponse
 */
async function putDisableFwSwitch(request: PutDisableFwSwitchRequest): PutDisableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putDisableFwSwitchWithOptions(request, runtime);
}

model PutEnableAllFwSwitchRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of your Cloud Firewall.', example='i-2ze8v2x5kd9qyvp2****'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh**: Chinese (default)
*   **en**: English', example='zh'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.XX.XX', deprecated=true),
}

model PutEnableAllFwSwitchResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutEnableAllFwSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutEnableAllFwSwitchResponseBody(name='body'),
}

/**
 * @summary Enables a firewall for all public IP addresses within your Alibaba Cloud account.
 *
 * @description You can call the PutEnableAllFwSwitch operation to enable a firewall for all public IP addresses within your Alibaba Cloud account.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutEnableAllFwSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutEnableAllFwSwitchResponse
 */
async function putEnableAllFwSwitchWithOptions(request: PutEnableAllFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableAllFwSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutEnableAllFwSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables a firewall for all public IP addresses within your Alibaba Cloud account.
 *
 * @description You can call the PutEnableAllFwSwitch operation to enable a firewall for all public IP addresses within your Alibaba Cloud account.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutEnableAllFwSwitchRequest
 * @return PutEnableAllFwSwitchResponse
 */
async function putEnableAllFwSwitch(request: PutEnableAllFwSwitchRequest): PutEnableAllFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableAllFwSwitchWithOptions(request, runtime);
}

model PutEnableFwSwitchRequest {
  ipaddrList?: [ string ](name='IpaddrList', description='The IP addresses.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["192.0.X.X","192.0.X.X"]'),
  lang?: string(name='Lang', description='The language of the content within the response.

*   **zh**: Chinese
*   **en**: English', example='zh'),
  regionList?: [ string ](name='RegionList', description='The regions.

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["cn-hangzhou","cn-shanghai"]'),
  resourceTypeList?: [ string ](name='ResourceTypeList', description='The types of the assets.

Valid values:

*   BastionHostIP: the egress IP address of a bastion host
*   BastionHostIngressIP: the ingress IP address of a bastion host
*   EcsEIP: the elastic IP address (EIP) of an Elastic Compute Service (ECS) instance
*   EcsPublicIP: the public IP address of an ECS instance
*   EIP: the EIP
*   EniEIP: the EIP of an elastic network interface (ENI)
*   NatEIP: the EIP of a NAT gateway
*   SlbEIP: the EIP of a Server Load Balancer (SLB) instance
*   SlbPublicIP: the public IP address of an SLB instance
*   NatPublicIP: the public IP address of a NAT gateway
*   HAVIP: the high-availability virtual IP address (HAVIP)

> You must specify at least one of the IpaddrList, RegionList, and ResourceTypeList parameters.', example='["EcsPublicIp","NatEip"]'),
  sourceIp?: string(name='SourceIp', description='The source IP address of the request.', example='192.0.X.X', deprecated=true),
}

model PutEnableFwSwitchResponseBody = {
  abnormalResourceStatusList?: [ 
    {
      msg?: string(name='Msg', description='The message displayed when the asset is not synchronized to Cloud Firewall. Valid values:

*   cloudfirewall do not sync this ip address: This IP address is not synchronized to Cloud Firewall.', example='cloudfirewall do not sync this ip address'),
      resource?: string(name='Resource', description='The IP address of the asset.', example='203.0.113.0'),
      status?: string(name='Status', description='The status of the asset when it is not synchronized to Cloud Firewall. Valid values:

*   ip_not_sync: The asset is not synchronized.', example='ip_not_sync'),
    }
  ](name='AbnormalResourceStatusList', description='The status information of the asset when it is not synchronized to Cloud Firewall.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2841452-CB8D-4F7D-B247-38E1CF7334F8'),
}

model PutEnableFwSwitchResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PutEnableFwSwitchResponseBody(name='body'),
}

/**
 * @summary Enables firewalls for specific assets.
 *
 * @description You can call this operation to enable a firewall. After you enable a firewall, traffic passes through Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutEnableFwSwitchRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutEnableFwSwitchResponse
 */
async function putEnableFwSwitchWithOptions(request: PutEnableFwSwitchRequest, runtime: Util.RuntimeOptions): PutEnableFwSwitchResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ipaddrList)) {
    query['IpaddrList'] = request.ipaddrList;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.regionList)) {
    query['RegionList'] = request.regionList;
  }
  if (!Util.isUnset(request.resourceTypeList)) {
    query['ResourceTypeList'] = request.resourceTypeList;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PutEnableFwSwitch',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables firewalls for specific assets.
 *
 * @description You can call this operation to enable a firewall. After you enable a firewall, traffic passes through Cloud Firewall.
 * ## [](#qps-)Limits
 * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PutEnableFwSwitchRequest
 * @return PutEnableFwSwitchResponse
 */
async function putEnableFwSwitch(request: PutEnableFwSwitchRequest): PutEnableFwSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return putEnableFwSwitchWithOptions(request, runtime);
}

model ReleaseExpiredInstanceRequest {
  instanceId?: string(name='InstanceId', description='This parameter is required.', example='cfw-y3gpqq705****'),
}

model ReleaseExpiredInstanceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  releaseStatus?: string(name='ReleaseStatus', example='true'),
  requestId?: string(name='RequestId', example='9EC1DB0F-EE53-5D36-B5DA-71CB******'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseExpiredInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleaseExpiredInstanceResponseBody(name='body'),
}

/**
 * @summary 释放已过期的实例
 *
 * @param request ReleaseExpiredInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseExpiredInstanceResponse
 */
async function releaseExpiredInstanceWithOptions(request: ReleaseExpiredInstanceRequest, runtime: Util.RuntimeOptions): ReleaseExpiredInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseExpiredInstance',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 释放已过期的实例
 *
 * @param request ReleaseExpiredInstanceRequest
 * @return ReleaseExpiredInstanceResponse
 */
async function releaseExpiredInstance(request: ReleaseExpiredInstanceRequest): ReleaseExpiredInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseExpiredInstanceWithOptions(request, runtime);
}

model ReleasePostInstanceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the Cloud Firewall instance.', example='cfw_elasticity_public_cn-xxx'),
}

model ReleasePostInstanceResponseBody = {
  httpStatusCode?: int32(name='HttpStatusCode', description='The HTTP status code.', example='200'),
  releaseStatus?: boolean(name='ReleaseStatus', description='Indicates whether the release was successful. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID, which is used to locate and troubleshoot issues.', example='EE316A19-xxxx-5043-9DF1-C04458ABC570'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ReleasePostInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReleasePostInstanceResponseBody(name='body'),
}

/**
 * @summary Releases Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request ReleasePostInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleasePostInstanceResponse
 */
async function releasePostInstanceWithOptions(request: ReleasePostInstanceRequest, runtime: Util.RuntimeOptions): ReleasePostInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleasePostInstance',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Releases Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request ReleasePostInstanceRequest
 * @return ReleasePostInstanceResponse
 */
async function releasePostInstance(request: ReleasePostInstanceRequest): ReleasePostInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePostInstanceWithOptions(request, runtime);
}

model ResetNatFirewallRuleHitCountRequest {
  aclUuid?: string(name='AclUuid', description='The UUID of the access control policy.

This parameter is required.', example='3de3aed5-6de7-4ecd-9106-cfe994b9c49f'),
  lang?: string(name='Lang', description='The language of the content within the request and response. Valid values:

*   **zh** (default): Chinese
*   **en**: English', example='zh'),
  natGatewayId?: string(name='NatGatewayId', description='The ID of the NAT gateway.', example='ngw-zm0h3c1exm5bifuorg8c5'),
}

model ResetNatFirewallRuleHitCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5CAA0FFD-4B94-5BB9-8B0A-ECFC86A0E666'),
}

model ResetNatFirewallRuleHitCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetNatFirewallRuleHitCountResponseBody(name='body'),
}

/**
 * @summary Resets the number of NAT firewall hits.
 *
 * @param request ResetNatFirewallRuleHitCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetNatFirewallRuleHitCountResponse
 */
async function resetNatFirewallRuleHitCountWithOptions(request: ResetNatFirewallRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetNatFirewallRuleHitCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.natGatewayId)) {
    query['NatGatewayId'] = request.natGatewayId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetNatFirewallRuleHitCount',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Resets the number of NAT firewall hits.
 *
 * @param request ResetNatFirewallRuleHitCountRequest
 * @return ResetNatFirewallRuleHitCountResponse
 */
async function resetNatFirewallRuleHitCount(request: ResetNatFirewallRuleHitCountRequest): ResetNatFirewallRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetNatFirewallRuleHitCountWithOptions(request, runtime);
}

model ResetRuleHitCountRequest {
  aclUuid?: string(name='AclUuid', description='This parameter is required.', example='211fd804-30f5-470f-ab26-c465a4****'),
  lang?: string(name='Lang', example='zh'),
  sourceIp?: string(name='SourceIp', example='112.64.126.XXX'),
}

model ResetRuleHitCountResponseBody = {
  module?: string(name='Module', example='sg_server'),
  requestId?: string(name='RequestId', example='706B2093-CBA0-51B2-BEBF-58903FC6****'),
}

model ResetRuleHitCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetRuleHitCountResponseBody(name='body'),
}

/**
 * @summary 重置规则命中数
 *
 * @param request ResetRuleHitCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetRuleHitCountResponse
 */
async function resetRuleHitCountWithOptions(request: ResetRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetRuleHitCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.sourceIp)) {
    query['SourceIp'] = request.sourceIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetRuleHitCount',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重置规则命中数
 *
 * @param request ResetRuleHitCountRequest
 * @return ResetRuleHitCountResponse
 */
async function resetRuleHitCount(request: ResetRuleHitCountRequest): ResetRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetRuleHitCountWithOptions(request, runtime);
}

model ResetVpcFirewallRuleHitCountRequest {
  aclUuid?: string(name='AclUuid', description='The ID of the access control policy.

This parameter is required.', example='00281255-d220-4db1-8f4f-c4df221a****'),
  lang?: string(name='Lang', description='The natural language of the request and response. 

Valid values:

- **zh**: Chinese (default)
- **en**: English', example='zh'),
}

model ResetVpcFirewallRuleHitCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A918B4F6-482F-5A91-8F65-AFFFF1FC04EA'),
}

model ResetVpcFirewallRuleHitCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetVpcFirewallRuleHitCountResponseBody(name='body'),
}

/**
 * @summary Clears the count on hits of an access control policy that is created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can call the ResetVpcFirewallRuleHitCount operation to clear the count on hits of an access control policy that is created for a VPC firewall in a specific policy group.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ResetVpcFirewallRuleHitCountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetVpcFirewallRuleHitCountResponse
 */
async function resetVpcFirewallRuleHitCountWithOptions(request: ResetVpcFirewallRuleHitCountRequest, runtime: Util.RuntimeOptions): ResetVpcFirewallRuleHitCountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aclUuid)) {
    query['AclUuid'] = request.aclUuid;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetVpcFirewallRuleHitCount',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Clears the count on hits of an access control policy that is created for a virtual private cloud (VPC) firewall in a specific policy group.
 *
 * @description You can call the ResetVpcFirewallRuleHitCount operation to clear the count on hits of an access control policy that is created for a VPC firewall in a specific policy group.  
 * ## Limits
 * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ResetVpcFirewallRuleHitCountRequest
 * @return ResetVpcFirewallRuleHitCountResponse
 */
async function resetVpcFirewallRuleHitCount(request: ResetVpcFirewallRuleHitCountRequest): ResetVpcFirewallRuleHitCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetVpcFirewallRuleHitCountWithOptions(request, runtime);
}

model SwitchSecurityProxyRequest {
  lang?: string(name='Lang', description='The language of the content within the request and the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  proxyId?: string(name='ProxyId', description='The ID of the NAT firewall.

This parameter is required.', example='proxy-natbfd2fafbb77042308d1b'),
  switch?: string(name='Switch', description='Specifies whether to enable the NAT firewall. Valid values:

*   open: yes
*   close: no

This parameter is required.', example='open'),
}

model SwitchSecurityProxyResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='F1E55690-3ABA-58FA-90E3-593EF05B73ED'),
}

model SwitchSecurityProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchSecurityProxyResponseBody(name='body'),
}

/**
 * @summary Enables or disables a NAT firewall.
 *
 * @param request SwitchSecurityProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchSecurityProxyResponse
 */
async function switchSecurityProxyWithOptions(request: SwitchSecurityProxyRequest, runtime: Util.RuntimeOptions): SwitchSecurityProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.switch)) {
    query['Switch'] = request.switch;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchSecurityProxy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables or disables a NAT firewall.
 *
 * @param request SwitchSecurityProxyRequest
 * @return SwitchSecurityProxyResponse
 */
async function switchSecurityProxy(request: SwitchSecurityProxyRequest): SwitchSecurityProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchSecurityProxyWithOptions(request, runtime);
}

model UpdateAITrafficAnalysisStatusRequest {
  status?: string(name='Status', example='normal'),
}

model UpdateAITrafficAnalysisStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='4E7F94C7-781F-5192-86CF-DB085013C810'),
}

model UpdateAITrafficAnalysisStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAITrafficAnalysisStatusResponseBody(name='body'),
}

/**
 * @summary 修改AI流量分析开启状态
 *
 * @param request UpdateAITrafficAnalysisStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAITrafficAnalysisStatusResponse
 */
async function updateAITrafficAnalysisStatusWithOptions(request: UpdateAITrafficAnalysisStatusRequest, runtime: Util.RuntimeOptions): UpdateAITrafficAnalysisStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAITrafficAnalysisStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改AI流量分析开启状态
 *
 * @param request UpdateAITrafficAnalysisStatusRequest
 * @return UpdateAITrafficAnalysisStatusResponse
 */
async function updateAITrafficAnalysisStatus(request: UpdateAITrafficAnalysisStatusRequest): UpdateAITrafficAnalysisStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAITrafficAnalysisStatusWithOptions(request, runtime);
}

model UpdateAckClusterConnectorRequest {
  connectorId?: string(name='ConnectorId', description='This parameter is required.', example='ac-7c1bad6c3cc84c33baab'),
  connectorName?: string(name='ConnectorName', example='ack-cluster-connector-name'),
  ttl?: string(name='Ttl', example='30'),
}

model UpdateAckClusterConnectorResponseBody = {
  ackClusterConnector?: {
    clusterId?: string(name='ClusterId', example='c57ecf39ff32c415e8549a7df27a7e947'),
    clusterName?: string(name='ClusterName', example='ack-cluster-name'),
    connectorHealthCheckStatus?: string(name='ConnectorHealthCheckStatus', example='healthy'),
    connectorId?: string(name='ConnectorId', example='ac-7c1bad6c3cc84c33baab'),
    connectorName?: string(name='ConnectorName', example='ack-cluster-connector-name'),
    connectorStatus?: string(name='ConnectorStatus', example='ready'),
    createTime?: string(name='CreateTime', example='1724982259'),
    memberUid?: string(name='MemberUid', example='135809047715****'),
    primaryVswitchId?: string(name='PrimaryVswitchId', example='vsw-2zerfbbje7dvnbii2****'),
    primaryVswitchIp?: string(name='PrimaryVswitchIp', example='10.100.1.1'),
    primaryVswitchZoneId?: string(name='PrimaryVswitchZoneId', example='cn-beijing-g'),
    regionNo?: string(name='RegionNo', example='cn-beijing'),
    standbyVswitchId?: string(name='StandbyVswitchId', example='vsw-2ze2gtlfozrab01cfo****'),
    standbyVswitchIp?: string(name='StandbyVswitchIp', example='10.100.2.1'),
    standbyVswitchZoneId?: string(name='StandbyVswitchZoneId', example='cn-beijing-h'),
    ttl?: int32(name='Ttl', example='30'),
    vpcId?: string(name='VpcId', example='vpc-j6cvhdscntzuvr0x****'),
  }(name='AckClusterConnector'),
  requestId?: string(name='RequestId', example='5D16AADE-DA2E-5CAB-AA3B-AA197D97****'),
}

model UpdateAckClusterConnectorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAckClusterConnectorResponseBody(name='body'),
}

/**
 * @summary 修改ACK集群连接器
 *
 * @param request UpdateAckClusterConnectorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAckClusterConnectorResponse
 */
async function updateAckClusterConnectorWithOptions(request: UpdateAckClusterConnectorRequest, runtime: Util.RuntimeOptions): UpdateAckClusterConnectorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.connectorId)) {
    query['ConnectorId'] = request.connectorId;
  }
  if (!Util.isUnset(request.connectorName)) {
    query['ConnectorName'] = request.connectorName;
  }
  if (!Util.isUnset(request.ttl)) {
    query['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAckClusterConnector',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改ACK集群连接器
 *
 * @param request UpdateAckClusterConnectorRequest
 * @return UpdateAckClusterConnectorResponse
 */
async function updateAckClusterConnector(request: UpdateAckClusterConnectorRequest): UpdateAckClusterConnectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAckClusterConnectorWithOptions(request, runtime);
}

model UpdateAclCheckDetailStatusRequest {
  lang?: string(name='Lang', example='zh'),
  status?: string(name='Status', description='This parameter is required.', example='Pending'),
  taskId?: string(name='TaskId', description='This parameter is required.', example='task-c92d4544ef7b6a42'),
  uuid?: string(name='Uuid', description='This parameter is required.', example='bbbb43c9-a931-4d89-9939-86d509139a20'),
}

model UpdateAclCheckDetailStatusResponseBody = {
  checkRecord?: {
    acls?: [ 
      {
        acl?: {
          aclAction?: string(name='AclAction', example='log'),
          aclUuid?: string(name='AclUuid', example='1e8ed1b2-cebc-4b95-a9cc-0cb7ce2c0c2c'),
          addressList?: [ string ](name='AddressList'),
          addressListCount?: int32(name='AddressListCount', example='1'),
          applicationId?: string(name='ApplicationId', example='HTTP'),
          applicationName?: string(name='ApplicationName', example='ANY'),
          applicationNameList?: [ string ](name='ApplicationNameList'),
          autoAddTagEcs?: int32(name='AutoAddTagEcs', example='0'),
          createTime?: long(name='CreateTime', example='1761062400'),
          description?: string(name='Description', example='test_policy'),
          destPort?: string(name='DestPort', example='22/22'),
          destPortGroup?: string(name='DestPortGroup'),
          destPortGroupPorts?: [ string ](name='DestPortGroupPorts'),
          destPortType?: string(name='DestPortType', example='port'),
          destination?: string(name='Destination', example='kms.cn-shanghai.aliyuncs.com'),
          destinationGroupCidrs?: [ string ](name='DestinationGroupCidrs'),
          destinationGroupType?: string(name='DestinationGroupType', example='domain'),
          destinationType?: string(name='DestinationType', example='group'),
          direction?: string(name='Direction', example='in'),
          dnsResult?: string(name='DnsResult', example='192.168.0.1/32'),
          dnsResultTime?: long(name='DnsResultTime', example='1579261141'),
          domainResolveType?: int32(name='DomainResolveType', example='0'),
          endTime?: long(name='EndTime', example='1752754426'),
          groupName?: string(name='GroupName', example='subscribe'),
          groupType?: string(name='GroupType', example='port'),
          groupUuid?: string(name='GroupUuid', example='5a96a798-9b73-47f7-831e-1d7aa3c987a9'),
          hitLastTime?: long(name='HitLastTime', example='1579261141'),
          hitTimes?: long(name='HitTimes', example='1'),
          ipVersion?: int32(name='IpVersion', example='4'),
          modifyTime?: long(name='ModifyTime', example='1761062400'),
          natGatewayId?: string(name='NatGatewayId', example='ngw-gw85zno51npz7lgc04z89'),
          order?: int32(name='Order', example='desc'),
          proto?: string(name='Proto', example='ANY'),
          referenceCount?: int32(name='ReferenceCount', example='1'),
          release?: string(name='Release', example='true'),
          repeatDays?: [ long ](name='RepeatDays'),
          repeatEndTime?: string(name='RepeatEndTime', example='23:30'),
          repeatStartTime?: string(name='RepeatStartTime', example='08:00'),
          repeatType?: string(name='RepeatType', example='None'),
          source?: string(name='Source', example='10.71.94.24'),
          sourceGroupCidrs?: [ string ](name='SourceGroupCidrs'),
          sourceGroupType?: string(name='SourceGroupType', example='ip'),
          sourceType?: string(name='SourceType', example='net'),
          spreadCnt?: int32(name='SpreadCnt', example='10'),
          startTime?: long(name='StartTime', example='1736130347'),
          tagList?: [ 
            {
              tagKey?: string(name='TagKey', example='produce'),
              tagValue?: string(name='TagValue', example='tfTestAcc0'),
            }
          ](name='TagList'),
          tagRelation?: string(name='TagRelation', example='and'),
          vpcFirewallId?: string(name='VpcFirewallId', example='cen-cw4z051hr8x53qniv5'),
        }(name='Acl'),
        aclAssessmentDetail?: string(name='AclAssessmentDetail'),
        aclStatus?: string(name='AclStatus', example='configuring'),
      }
    ](name='Acls'),
    checkName?: string(name='CheckName', example='PolicyHitCountZero'),
    description?: string(name='Description', example='dwd_mysql_lingwan_faxing_chat_config_di'),
    lastCheckTime?: string(name='LastCheckTime', example='1724982259'),
    level?: string(name='Level', example='High'),
    policyTotalCount?: long(name='PolicyTotalCount', example='1'),
    recordAssessmentDetail?: string(name='RecordAssessmentDetail'),
    taskId?: string(name='TaskId', example='task-c92d4544ef7b6a42'),
  }(name='CheckRecord'),
  requestId?: string(name='RequestId', example='850A84D6************00090125EEB1'),
}

model UpdateAclCheckDetailStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAclCheckDetailStatusResponseBody(name='body'),
}

/**
 * @summary 修改ACL检查状态
 *
 * @param request UpdateAclCheckDetailStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAclCheckDetailStatusResponse
 */
async function updateAclCheckDetailStatusWithOptions(request: UpdateAclCheckDetailStatusRequest, runtime: Util.RuntimeOptions): UpdateAclCheckDetailStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAclCheckDetailStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改ACL检查状态
 *
 * @param request UpdateAclCheckDetailStatusRequest
 * @return UpdateAclCheckDetailStatusResponse
 */
async function updateAclCheckDetailStatus(request: UpdateAclCheckDetailStatusRequest): UpdateAclCheckDetailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAclCheckDetailStatusWithOptions(request, runtime);
}

model UpdatePostpayUserInternetStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-zsk39m******'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  operate?: string(name='Operate', description='The operation type.

*   Set the value to open.', example='open'),
}

model UpdatePostpayUserInternetStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='850A84D6-0DE4-4797-A1E8-000901******'),
}

model UpdatePostpayUserInternetStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePostpayUserInternetStatusResponseBody(name='body'),
}

/**
 * @summary Updates the status of the NAT firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserInternetStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePostpayUserInternetStatusResponse
 */
async function updatePostpayUserInternetStatusWithOptions(request: UpdatePostpayUserInternetStatusRequest, runtime: Util.RuntimeOptions): UpdatePostpayUserInternetStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operate)) {
    query['Operate'] = request.operate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePostpayUserInternetStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the status of the NAT firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserInternetStatusRequest
 * @return UpdatePostpayUserInternetStatusResponse
 */
async function updatePostpayUserInternetStatus(request: UpdatePostpayUserInternetStatusRequest): UpdatePostpayUserInternetStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePostpayUserInternetStatusWithOptions(request, runtime);
}

model UpdatePostpayUserNatStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-************'),
  lang?: string(name='Lang', description='The language of the content within the response. Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  operate?: string(name='Operate', description='The operation type.

*   Set the value to open.', example='open'),
}

model UpdatePostpayUserNatStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='850A84D6-0DE4-4797-A1E8-00090******'),
}

model UpdatePostpayUserNatStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePostpayUserNatStatusResponseBody(name='body'),
}

/**
 * @summary Updates the status of the NAT Firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserNatStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePostpayUserNatStatusResponse
 */
async function updatePostpayUserNatStatusWithOptions(request: UpdatePostpayUserNatStatusRequest, runtime: Util.RuntimeOptions): UpdatePostpayUserNatStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operate)) {
    query['Operate'] = request.operate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePostpayUserNatStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the status of the NAT Firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserNatStatusRequest
 * @return UpdatePostpayUserNatStatusResponse
 */
async function updatePostpayUserNatStatus(request: UpdatePostpayUserNatStatusRequest): UpdatePostpayUserNatStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePostpayUserNatStatusWithOptions(request, runtime);
}

model UpdatePostpayUserVpcStatusRequest {
  instanceId?: string(name='InstanceId', description='The instance ID of Cloud Firewall.', example='cfw_elasticity_public_cn-************'),
  lang?: string(name='Lang', description='The language of the content within the request and response.

Valid values:

*   **zh** (default)
*   **en**', example='zh'),
  operate?: string(name='Operate', description='The operation type.

*   Set the value to open.', example='open'),
}

model UpdatePostpayUserVpcStatusResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request', example='450D47F5-956E-543E-8502-2F71C8******'),
}

model UpdatePostpayUserVpcStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePostpayUserVpcStatusResponseBody(name='body'),
}

/**
 * @summary Updates the status of the virtual private cloud (VPC) Firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserVpcStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePostpayUserVpcStatusResponse
 */
async function updatePostpayUserVpcStatusWithOptions(request: UpdatePostpayUserVpcStatusRequest, runtime: Util.RuntimeOptions): UpdatePostpayUserVpcStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.operate)) {
    query['Operate'] = request.operate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePostpayUserVpcStatus',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the status of the virtual private cloud (VPC) Firewall feature for Cloud Firewall that uses the pay-as-you-go billing method.
 *
 * @param request UpdatePostpayUserVpcStatusRequest
 * @return UpdatePostpayUserVpcStatusResponse
 */
async function updatePostpayUserVpcStatus(request: UpdatePostpayUserVpcStatusRequest): UpdatePostpayUserVpcStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePostpayUserVpcStatusWithOptions(request, runtime);
}

model UpdateSecurityProxyRequest {
  lang?: string(name='Lang', example='zh'),
  proxyId?: string(name='ProxyId', description='This parameter is required.', example='proxy-natfdc73073e031****8e0d'),
  proxyName?: string(name='ProxyName', description='This parameter is required.', example='proxy_auto_heyuan'),
  strictMode?: int32(name='StrictMode', example='1'),
}

model UpdateSecurityProxyResponseBody = {
  module?: string(name='Module', example='ips_server'),
  requestId?: string(name='RequestId', example='9E2CCAB4-E789-5BC9-88DC-5CE0358E****'),
}

model UpdateSecurityProxyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSecurityProxyResponseBody(name='body'),
}

/**
 * @summary 更新安全正向代理
 *
 * @param request UpdateSecurityProxyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateSecurityProxyResponse
 */
async function updateSecurityProxyWithOptions(request: UpdateSecurityProxyRequest, runtime: Util.RuntimeOptions): UpdateSecurityProxyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.lang)) {
    query['Lang'] = request.lang;
  }
  if (!Util.isUnset(request.proxyId)) {
    query['ProxyId'] = request.proxyId;
  }
  if (!Util.isUnset(request.proxyName)) {
    query['ProxyName'] = request.proxyName;
  }
  if (!Util.isUnset(request.strictMode)) {
    query['StrictMode'] = request.strictMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateSecurityProxy',
    version = '2017-12-07',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新安全正向代理
 *
 * @param request UpdateSecurityProxyRequest
 * @return UpdateSecurityProxyResponse
 */
async function updateSecurityProxy(request: UpdateSecurityProxyRequest): UpdateSecurityProxyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSecurityProxyWithOptions(request, runtime);
}

