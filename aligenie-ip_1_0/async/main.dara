/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AliGenie';
  @version = 'ip_1.0';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddCartoonRequest {
  hotelId: string(name='HotelId', example='520a0***eb', position='Body'),
  startVideoMd5: string(name='StartVideoMd5', example='40c804***697', position='Body'),
  startVideoUrl: string(name='StartVideoUrl', example='https://***.mp4', position='Body'),
}

model AddCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddCartoonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCartoonResponseBody(name='body'),
}

async function addCartoon(request: AddCartoonRequest): AddCartoonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddCartoon', 'POST', '/v1.0/ip/addCartoon', 'json', true, 'form', request);
}

model AddCustomQARequest {
  answers?: [ string ](name='Answers', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
  keyWords?: [ string ](name='KeyWords', shrink='json', position='Body'),
  majorQuestion?: string(name='MajorQuestion', example='***', position='Body'),
  supplementaryQuestions?: [ string ](name='SupplementaryQuestions', shrink='json', position='Body'),
}

model AddCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddCustomQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomQAResponseBody(name='body'),
}

async function addCustomQA(request: AddCustomQARequest): AddCustomQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddCustomQA', 'POST', '/v1.0/ip/addCustomQA', 'json', true, 'form', request);
}

model AddCustomQAV2Request {
  answers: [ string ](name='Answers', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  keyWords?: [ string ](name='KeyWords', shrink='json', position='Body'),
  majorQuestion?: string(name='MajorQuestion', position='Body'),
  supplementaryQuestions?: [ string ](name='SupplementaryQuestions', shrink='json', position='Body'),
}

model AddCustomQAV2ResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FAFCD152-4791-5F2F-B0BE-2DC06FD4F05B'),
  result?: {
    answers?: string(name='Answers'),
    createTime?: string(name='CreateTime', example='2023-01-10 10:01:59'),
    hotelId?: string(name='HotelId', example='a7***83'),
    keyWords?: string(name='KeyWords'),
    lastOperator?: string(name='LastOperator', example='8xxx9'),
    majorQuestion?: string(name='MajorQuestion'),
    qaId?: string(name='QaId', description='qaID', example='1'),
    status?: int32(name='Status', example='0'),
    supplementaryQuestion?: string(name='SupplementaryQuestion'),
    updateTime?: string(name='UpdateTime', example='2023-01-10 10:01:59'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddCustomQAV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomQAV2ResponseBody(name='body'),
}

async function addCustomQAV2(request: AddCustomQAV2Request): AddCustomQAV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddCustomQAV2', 'POST', '/v1.0/ip/addQAV2', 'json', true, 'form', request);
}

model AddMessageTemplateRequest {
  templateDetail: string(name='TemplateDetail', example='这是${hotel}的一个测试模板', position='Body'),
  templateName: string(name='TemplateName', example='测试模板', position='Body'),
}

model AddMessageTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result', example='11'),
}

model AddMessageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddMessageTemplateResponseBody(name='body'),
}

async function addMessageTemplate(request: AddMessageTemplateRequest): AddMessageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddMessageTemplate', 'POST', '/v1.0/ip/addMessageTemplate', 'json', true, 'form', request);
}

model AddOrUpdateDisPlayModesRequest {
  hotelDeviceModeList: [ string ](name='HotelDeviceModeList', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
}

model AddOrUpdateDisPlayModesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateDisPlayModesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddOrUpdateDisPlayModesResponseBody(name='body'),
}

async function addOrUpdateDisPlayModes(request: AddOrUpdateDisPlayModesRequest): AddOrUpdateDisPlayModesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddOrUpdateDisPlayModes', 'POST', '/v1.0/ip/addOrUpdateDisPlayModes', 'json', true, 'form', request);
}

model AddOrUpdateHotelSettingRequest {
  hotelDeviceModeList?: [ string ](name='HotelDeviceModeList', shrink='json', position='Body'),
  hotelId?: string(name='HotelId', example='a7a3***013', position='Body'),
  hotelScreenSaver?: {
    screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='https://a****jpg'),
    screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
  }(name='HotelScreenSaver', shrink='json', position='Body'),
  nightMode?: {
    defaultBright?: string(name='DefaultBright'),
    defaultVolume?: string(name='DefaultVolume'),
    enable?: boolean(name='Enable', example='true'),
    end?: string(name='End', example='22:00'),
    standbyAction?: string(name='StandbyAction', example='screenoff'),
    start?: string(name='Start', example='7:00'),
  }(name='NightMode', shrink='json', position='Body'),
  settingType?: string(name='SettingType', example='SCREENSAVER', position='Body'),
  value?: string(name='Value', position='Body'),
}

model AddOrUpdateHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateHotelSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddOrUpdateHotelSettingResponseBody(name='body'),
}

async function addOrUpdateHotelSetting(request: AddOrUpdateHotelSettingRequest): AddOrUpdateHotelSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddOrUpdateHotelSetting', 'POST', '/v1.0/ip/addOrUpdateHotelSetting', 'json', true, 'form', request);
}

model AddOrUpdateScreenSaverRequest {
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
  hotelScreenSaver: {
    screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='xxx.png'),
    screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
  }(name='HotelScreenSaver', shrink='json', position='Body'),
}

model AddOrUpdateScreenSaverResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EED***9661'),
  result?: boolean(name='Result', example='True'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateScreenSaverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddOrUpdateScreenSaverResponseBody(name='body'),
}

async function addOrUpdateScreenSaver(request: AddOrUpdateScreenSaverRequest): AddOrUpdateScreenSaverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddOrUpdateScreenSaver', 'POST', '/v1.0/ip/addOrUpdateScreenSaver', 'json', true, 'form', request);
}

model AddOrUpdateWelcomeTextRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  musicUrl: string(name='MusicUrl', example='http://ailabsaicloudservice.alicdn.com/tmp/a.wav', position='Body'),
  welcomeText: string(name='WelcomeText', position='Body'),
}

model AddOrUpdateWelcomeTextResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateWelcomeTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddOrUpdateWelcomeTextResponseBody(name='body'),
}

async function addOrUpdateWelcomeText(request: AddOrUpdateWelcomeTextRequest): AddOrUpdateWelcomeTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddOrUpdateWelcomeText', 'POST', '/v1.0/ip/addOrUpdateWelcomeText', 'json', true, 'form', request);
}

model AuditHotelRequest {
  auditHotelReq: {
    auditOpinion?: string(name='AuditOpinion', example='同意'),
    hotelId: string(name='HotelId', example='80d84ea8ed9e422fbad52715c8fc56f1'),
    status: int32(name='Status', example='1'),
  }(name='AuditHotelReq', shrink='json', position='Query'),
}

model AuditHotelResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  result?: boolean(name='Result'),
}

model AuditHotelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuditHotelResponseBody(name='body'),
}

async function auditHotel(request: AuditHotelRequest): AuditHotelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AuditHotel', 'POST', '/v1.0/ip/auditHotel', 'json', false, 'json', request);
}

model BatchAddHotelRoomRequest {
  hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f', position='Body'),
  roomNoList: [ string ](name='RoomNoList', shrink='simple', position='Body'),
}

model BatchAddHotelRoomResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchAddHotelRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddHotelRoomResponseBody(name='body'),
}

async function batchAddHotelRoom(request: BatchAddHotelRoomRequest): BatchAddHotelRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchAddHotelRoom', 'POST', '/v1.0/ip/batchAddHotelRoom', 'json', true, 'form', request);
}

model BatchDeleteHotelRoomRequest {
  hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f', position='Body'),
  roomNoList: [ string ](name='RoomNoList', shrink='simple', position='Body'),
}

model BatchDeleteHotelRoomResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchDeleteHotelRoomResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchDeleteHotelRoomResponseBody(name='body'),
}

async function batchDeleteHotelRoom(request: BatchDeleteHotelRoomRequest): BatchDeleteHotelRoomResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchDeleteHotelRoom', 'POST', '/v1.0/ip/batchDeleteHotelRoom', 'json', true, 'form', request);
}

model CheckoutWithAKRequest {
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
}

model CheckoutWithAKResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CheckoutWithAKResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckoutWithAKResponseBody(name='body'),
}

async function checkoutWithAK(request: CheckoutWithAKRequest): CheckoutWithAKResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckoutWithAK', 'POST', '/v1.0/ip/checkoutWithAK', 'json', true, 'form', request);
}

model ChildAccountAuthRequest {
  account: string(name='Account', example='lee', position='Body'),
  appKey: string(name='AppKey', example='30471753', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  tbOpenId: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh', position='Body'),
}

model ChildAccountAuthResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3DB51A10-327C-58D3-91DF-3A5A471C51E7'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ChildAccountAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChildAccountAuthResponseBody(name='body'),
}

async function childAccountAuth(request: ChildAccountAuthRequest): ChildAccountAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ChildAccountAuth', 'POST', '/v1.0/ip/childAccountAuth', 'json', true, 'form', request);
}

model ControlRoomDeviceRequest {
  cmd: string(name='Cmd', example='thing.attribute.set
thing.attribute.adjust', position='Body'),
  deviceIndex?: int32(name='DeviceIndex', position='Body'),
  deviceNumber: string(name='DeviceNumber', example='INFRARED49122575595', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  properties: map[string]string(name='Properties', shrink='json', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
}

model ControlRoomDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: {
    message?: string(name='Message', example='success'),
    status?: int32(name='Status'),
  }(name='Result'),
}

model ControlRoomDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ControlRoomDeviceResponseBody(name='body'),
}

async function controlRoomDevice(request: ControlRoomDeviceRequest): ControlRoomDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ControlRoomDevice', 'POST', '/v1.0/ip/controlRoomDevice', 'json', true, 'form', request);
}

model CreateHotelRequest {
  appKey: string(name='AppKey', example='333566791', position='Body'),
  estOpenTime: string(name='EstOpenTime', example='2022-10-1 00:00:00', position='Body'),
  hotelAddress: string(name='HotelAddress', position='Body'),
  hotelEmail: string(name='HotelEmail', example='test@hotel.com', position='Body'),
  hotelName: string(name='HotelName', position='Body'),
  phoneNumber: string(name='PhoneNumber', example='13xxxxxxxx', position='Body'),
  relatedPk: string(name='RelatedPk', example='jTO****Rw', position='Body'),
  relatedPks?: [ string ](name='RelatedPks', description='酒店关联产品列表', shrink='json', position='Body'),
  remark?: string(name='Remark', example='test', position='Body'),
  roomNum: int32(name='RoomNum', example='100', position='Body'),
  tbOpenId: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh', position='Body'),
}

model CreateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: string(name='Result', example='5abfd9***2c38661'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateHotelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHotelResponseBody(name='body'),
}

async function createHotel(request: CreateHotelRequest): CreateHotelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHotel', 'POST', '/v1.0/ip/createHotel', 'json', true, 'form', request);
}

model CreateHotelAlarmRequest {
  hotelId: string(name='HotelId', example='cf2446fc9d144c85aaee4f9ae20a96e7', position='Body'),
  musicType?: string(name='MusicType', example='DOU_YIN', position='Body'),
  rooms: [ string ](name='Rooms', shrink='json', position='Body'),
  scheduleInfo: {
    once?: {
      day?: int32(name='Day', example='20'),
      hour?: int32(name='Hour', example='19'),
      minute?: int32(name='Minute', example='30'),
      month?: int32(name='Month', example='9'),
      year?: int32(name='Year', example='2022'),
    }(name='Once'),
    type: string(name='Type', description='ONCE, WEEKLY'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='30'),
    }(name='Weekly'),
  }(name='ScheduleInfo', shrink='json', position='Body'),
}

model CreateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***86881'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId', example='94'),
      deviceOpenId?: string(name='DeviceOpenId', example='Pvk***TA=='),
      failMsg?: string(name='FailMsg'),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId?: string(name='UserOpenId', example='mg***Qd'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateHotelAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateHotelAlarmResponseBody(name='body'),
}

async function createHotelAlarm(request: CreateHotelAlarmRequest): CreateHotelAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateHotelAlarm', 'POST', '/v1.0/ip/createHotelAlarm', 'json', true, 'form', request);
}

model CreateRcuSceneRequest {
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  sceneId: string(name='SceneId', example='yoga', position='Body'),
  sceneRelationExtDTO: {
    corpusList: [ string ](name='CorpusList'),
    description: string(name='Description'),
    icon: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
    name: string(name='Name'),
  }(name='SceneRelationExtDTO', shrink='json', position='Body'),
}

model CreateRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='844BA5CE-E30A-53CB-8A11-DE1F344C846D'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateRcuSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRcuSceneResponseBody(name='body'),
}

async function createRcuScene(request: CreateRcuSceneRequest): CreateRcuSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRcuScene', 'POST', '/v1.0/ip/createRcuScene', 'json', true, 'form', request);
}

model DeleteCartoonRequest {
  hotelId?: string(name='HotelId', example='a7***83', position='Body'),
}

model DeleteCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteCartoonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCartoonResponseBody(name='body'),
}

async function deleteCartoon(request: DeleteCartoonRequest): DeleteCartoonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCartoon', 'POST', '/v1.0/ip/deleteCartoon', 'json', true, 'form', request);
}

model DeleteCustomQARequest {
  customQAIds?: [ string ](name='CustomQAIds', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
}

model DeleteCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteCustomQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomQAResponseBody(name='body'),
}

async function deleteCustomQA(request: DeleteCustomQARequest): DeleteCustomQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCustomQA', 'POST', '/v1.0/ip/deleteCustomQA', 'json', true, 'form', request);
}

model DeleteHotelAlarmRequest {
  alarms: [ 
    {
      alarmId: long(name='AlarmId', example='5029'),
      deviceOpenId: string(name='DeviceOpenId', example='PvkB***TA=='),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId: string(name='UserOpenId', example='mgw/k***HQd'),
    }
  ](name='Alarms', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
}

model DeleteHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: int32(name='Result', example='1'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteHotelAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHotelAlarmResponseBody(name='body'),
}

async function deleteHotelAlarm(request: DeleteHotelAlarmRequest): DeleteHotelAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHotelAlarm', 'POST', '/v1.0/ip/deleteHotelAlarm', 'json', true, 'form', request);
}

model DeleteHotelSceneBookItemRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  id?: long(name='Id', example='11823', position='Body'),
  name?: string(name='Name', position='Body'),
}

model DeleteHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
}

model DeleteHotelSceneBookItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHotelSceneBookItemResponseBody(name='body'),
}

async function deleteHotelSceneBookItem(request: DeleteHotelSceneBookItemRequest): DeleteHotelSceneBookItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHotelSceneBookItem', 'POST', '/v1.0/ip/deleteHotelSceneBookItem', 'json', true, 'form', request);
}

model DeleteHotelSettingRequest {
  hotelId?: string(name='HotelId', example='af7***536', position='Body'),
  settingType?: string(name='SettingType', example='SCREENSAVER', position='Body'),
}

model DeleteHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67****BB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteHotelSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteHotelSettingResponseBody(name='body'),
}

async function deleteHotelSetting(request: DeleteHotelSettingRequest): DeleteHotelSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteHotelSetting', 'POST', '/v1.0/ip/deleteHotelSetting', 'json', true, 'form', request);
}

model DeleteMessageTemplateRequest {
  templateId?: long(name='TemplateId', example='234', position='Body'),
}

model DeleteMessageTemplateResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteMessageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMessageTemplateResponseBody(name='body'),
}

async function deleteMessageTemplate(request: DeleteMessageTemplateRequest): DeleteMessageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMessageTemplate', 'POST', '/v1.0/ip/deleteMessageTemplate', 'json', true, 'form', request);
}

model DeleteRcuSceneRequest {
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
  sceneId: string(name='SceneId', example='yoga', position='Body'),
}

model DeleteRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F61A7B7-409C-525D-AFDB-238A4E88925A'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteRcuSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRcuSceneResponseBody(name='body'),
}

async function deleteRcuScene(request: DeleteRcuSceneRequest): DeleteRcuSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRcuScene', 'POST', '/v1.0/ip/deleteRcuScene', 'json', true, 'form', request);
}

model DeviceControlRequest {
  payload?: {
    category: string(name='Category', example='aircondition'),
    cmd: string(name='Cmd', example='open'),
    deviceNumber: string(name='DeviceNumber', example='air_condition'),
    extendInfo?: string(name='ExtendInfo', example='{}'),
    location: string(name='Location', example='room'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='HOFF****my7Iw='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: {
    status?: string(name='Status', example='200'),
  }(name='Result'),
}

model DeviceControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeviceControlResponseBody(name='body'),
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeviceControl', 'POST', '/v1.0/ip/deviceControl', 'json', false, 'json', request);
}

model GetBasicInfoQARequest {
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
}

model GetBasicInfoQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: {
    checkInTime?: string(name='CheckInTime', example='11:11'),
    checkOutTime?: string(name='CheckOutTime', example='11:11'),
    hotelAddress?: string(name='HotelAddress'),
    hotelIntroduction?: string(name='HotelIntroduction'),
    hotelMember?: string(name='HotelMember'),
    hotelService?: string(name='HotelService'),
    parkingExpenses?: string(name='ParkingExpenses'),
    parkingPosition?: string(name='ParkingPosition'),
    phoneNumber?: string(name='PhoneNumber', example='123***'),
    wifiName?: string(name='WifiName'),
    wifiPassword?: string(name='WifiPassword'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetBasicInfoQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBasicInfoQAResponseBody(name='body'),
}

async function getBasicInfoQA(request: GetBasicInfoQARequest): GetBasicInfoQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBasicInfoQA', 'POST', '/v1.0/ip/getBasicInfoQA', 'json', true, 'form', request);
}

model GetCartoonRequest {
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
}

model GetCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    startVideoMd5?: string(name='StartVideoMd5', example='https://ai***.mp4'),
    startVideoUrl?: string(name='StartVideoUrl', example='40c8***97'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetCartoonResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCartoonResponseBody(name='body'),
}

async function getCartoon(request: GetCartoonRequest): GetCartoonResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCartoon', 'POST', '/v1.0/ip/getCartoon', 'json', true, 'form', request);
}

model GetHotelContactByGenieDeviceRequest {
  deviceInfo?: {
    encodeKey: string(name='EncodeKey', example='12**45'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='12**45'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1***2'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelContactByGenieDeviceResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: {
    expireAt?: string(name='ExpireAt', example='1649472283046'),
    gmtCreate?: string(name='GmtCreate', example='2022-07-21 20:02:12'),
    gmtModified?: string(name='GmtModified', example='2022-07-27 14:06:27'),
    hotelId?: string(name='HotelId', example='a7***83'),
    icon?: string(name='Icon', example='xxx.icon'),
    id?: long(name='Id', example='1'),
    name?: string(name='Name'),
    number?: string(name='Number', example='101'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type', example='group'),
    uuid?: string(name='Uuid', example='2E57***D45F9'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactByGenieDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelContactByGenieDeviceResponseBody(name='body'),
}

async function getHotelContactByGenieDevice(request: GetHotelContactByGenieDeviceRequest): GetHotelContactByGenieDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelContactByGenieDevice', 'POST', '/v1.0/ip/getHotelContactByGenieDevice', 'json', false, 'json', request);
}

model GetHotelContactByNumberRequest {
  number: string(name='Number', example='101', position='Body'),
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelContactByNumberResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    expireAt?: string(name='ExpireAt', example='1649316479098'),
    hotelId?: string(name='HotelId', example='a7***83'),
    icon?: string(name='Icon', example='xxx.icon'),
    name?: string(name='Name'),
    number?: string(name='Number', example='101'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type', example='group'),
    uuid?: string(name='Uuid', example='2E57***D45F9'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactByNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelContactByNumberResponseBody(name='body'),
}

async function getHotelContactByNumber(request: GetHotelContactByNumberRequest): GetHotelContactByNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelContactByNumber', 'POST', '/v1.0/ip/getHotelContactByNumber', 'json', true, 'form', request);
}

model GetHotelContactsRequest {
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelContactsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      expireAt?: string(name='ExpireAt', example='1649472283046'),
      hotelId?: string(name='HotelId', example='cf24***96e7'),
      icon?: string(name='Icon', example='xxx.icon'),
      name?: string(name='Name'),
      number?: string(name='Number', example='101'),
      status?: int32(name='Status', example='1'),
      type?: string(name='Type', example='group'),
      uuid?: string(name='Uuid', example='0862***A809'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelContactsResponseBody(name='body'),
}

async function getHotelContacts(request: GetHotelContactsRequest): GetHotelContactsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelContacts', 'POST', '/v1.0/ip/getHotelContacts', 'json', false, 'json', request);
}

model GetHotelHomeBackImageAndModesRequest {
  userInfo: {
    encodeKey: string(name='EncodeKey', example='1248494721591392955'),
    encodeType: string(name='EncodeType', example='PROJECT_ID'),
    id: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelHomeBackImageAndModesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='394450FC-9035-1B7C-8829-BC88832473FC'),
  result?: {
    backgroundImage?: string(name='BackgroundImage', example='https://ailabs.alibabausercontent.com/platform/3d4fe6d66ec49d9789635f66627f0339/welcome_audios/976210a6532150f49c2677a8b7dbc105/l6fspbhn.jpg'),
    hotelName?: string(name='HotelName', example='宣雍测试橙蜂酒店'),
    modeList?: [ 
      {
        cnName?: string(name='CnName', example='浪漫模式'),
        code?: string(name='Code', example='romantic'),
        icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/langman.png'),
      }
    ](name='ModeList'),
  }(name='Result'),
}

model GetHotelHomeBackImageAndModesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelHomeBackImageAndModesResponseBody(name='body'),
}

async function getHotelHomeBackImageAndModes(request: GetHotelHomeBackImageAndModesRequest): GetHotelHomeBackImageAndModesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelHomeBackImageAndModes', 'POST', '/v1.0/ip/getHotelHomeBackImageAndModes', 'json', false, 'json', request);
}

model GetHotelNoticeRequest {
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelNoticeResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: string(name='Result', example='test notice...'),
}

model GetHotelNoticeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelNoticeResponseBody(name='body'),
}

async function getHotelNotice(request: GetHotelNoticeRequest): GetHotelNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelNotice', 'POST', '/v1.0/ip/getHotelNotice', 'json', false, 'json', request);
}

model GetHotelNoticeV2Request {
  userInfo: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelNoticeV2ResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0D0C***67DB'),
  result?: {
    content?: string(name='Content'),
    hotelId?: string(name='HotelId', example='a7***83'),
    title?: string(name='Title'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelNoticeV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelNoticeV2ResponseBody(name='body'),
}

async function getHotelNoticeV2(request: GetHotelNoticeV2Request): GetHotelNoticeV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelNoticeV2', 'POST', '/v1.0/ip/getHotelNoticeV2', 'json', false, 'json', request);
}

model GetHotelOrderDetailRequest {
  payload: {
    orderNo: string(name='OrderNo', example='20220714150702000168270112410630'),
  }(name='Payload', shrink='json', position='Query'),
}

model GetHotelOrderDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6F579407-13C4-1708-AFA2-B657BE5FE8F5'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt', example='200'),
      gmtCreate?: long(name='GmtCreate', example='1659952892000'),
      itemUrl?: string(name='ItemUrl', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/weixiu/dianqilei/chuanglian.png'),
      name?: string(name='Name', example='窗帘'),
      quantity?: long(name='Quantity', example='1'),
    }
  ](name='Result'),
}

model GetHotelOrderDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelOrderDetailResponseBody(name='body'),
}

async function getHotelOrderDetail(request: GetHotelOrderDetailRequest): GetHotelOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelOrderDetail', 'POST', '/v1.0/ip/getHotelOrderDetail', 'json', false, 'json', request);
}

model GetHotelRoomDeviceRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Query'),
  roomNo: string(name='RoomNo', example='1211', position='Query'),
}

model GetHotelRoomDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='vrehvuifdsgrts'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion', example='1.0.0-release'),
      hotelId?: string(name='HotelId', example='af7***536'),
      mac?: string(name='Mac', example='aa:aa:aa:aa:aa:aa'),
      onlineStatus?: int32(name='OnlineStatus', example='1'),
      roomNo?: string(name='RoomNo', example='1211'),
      sn?: string(name='Sn', example='dsfdsfrgreg'),
    }
  ](name='Result'),
}

model GetHotelRoomDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelRoomDeviceResponseBody(name='body'),
}

async function getHotelRoomDevice(request: GetHotelRoomDeviceRequest): GetHotelRoomDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelRoomDevice', 'POST', '/v1.0/ip/getHotelRoomDevice', 'json', false, 'json', request);
}

model GetHotelSampleUtterancesRequest {
  userInfo?: {
    encodeKey: string(name='EncodeKey'),
    encodeType: string(name='EncodeType'),
    id: string(name='Id'),
    idType: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelSampleUtterancesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model GetHotelSampleUtterancesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelSampleUtterancesResponseBody(name='body'),
}

async function getHotelSampleUtterances(request: GetHotelSampleUtterancesRequest): GetHotelSampleUtterancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelSampleUtterances', 'POST', '/v1.0/ip/getHotelSampleUtterances', 'json', false, 'json', request);
}

model GetHotelSceneItemDetailRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  itemId?: long(name='ItemId', example='10336', position='Body'),
  name?: string(name='Name', position='Body'),
}

model GetHotelSceneItemDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    category?: string(name='Category', example='客用品类'),
    dialogueList?: [ 
      {
        createTime?: long(name='CreateTime', example='1666164774'),
        dialogueId?: string(name='DialogueId', example='336'),
        noAnswer?: string(name='NoAnswer'),
        noAnswerTemplate?: string(name='NoAnswerTemplate', example='4'),
        process?: int32(name='Process', example='0'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId', example='10336'),
        updateTime?: long(name='UpdateTime', example='1666164774'),
        yesAnswer?: string(name='YesAnswer'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate', example='4'),
      }
    ](name='DialogueList'),
    icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/zhijin.png'),
    id?: long(name='Id', example='10336'),
    name?: string(name='Name', example='擦鞋布'),
    price?: long(name='Price', example='170'),
    status?: string(name='Status', example='已添加'),
    type?: string(name='Type', example='GOODS'),
    updateTime?: long(name='UpdateTime', example='1666168828'),
  }(name='Result'),
}

model GetHotelSceneItemDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelSceneItemDetailResponseBody(name='body'),
}

async function getHotelSceneItemDetail(request: GetHotelSceneItemDetailRequest): GetHotelSceneItemDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelSceneItemDetail', 'POST', '/v1.0/ip/getHotelSceneItemDetail', 'json', true, 'form', request);
}

model GetHotelScreenSaverRequest {
  userInfo: {
    encodeKey: string(name='EncodeKey', example='1248494721591392955'),
    encodeType: string(name='EncodeType', example='PROJECT_ID'),
    id: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model GetHotelScreenSaverResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5F0467E1-19F2-1757-B6D0-B79917BA2E81'),
  result?: {
    picUrl?: string(name='PicUrl', example='https://ailabs.alibabausercontent.com/platform/3d4fe6d66ec49d9789635f66627f0339/welcome_audios/976210a6532150f49c2677a8b7dbc105/l6fspbhd.jpg'),
    styleCode?: string(name='StyleCode', example='common-weather'),
  }(name='Result'),
}

model GetHotelScreenSaverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelScreenSaverResponseBody(name='body'),
}

async function getHotelScreenSaver(request: GetHotelScreenSaverRequest): GetHotelScreenSaverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelScreenSaver', 'POST', '/v1.0/ip/getHotelScreenSaver', 'json', false, 'json', request);
}

model GetHotelScreenSaverStyleRequest {
  hotelId?: string(name='HotelId', example='af7***536', position='Body'),
}

model GetHotelScreenSaverStyleResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67**6FA'),
  result?: [ 
    {
      cnName?: string(name='CnName'),
      code?: string(name='Code', example='common-weather'),
      enName?: string(name='EnName', example='common-weather'),
      picUrl?: string(name='PicUrl', example='https://img.***.png'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelScreenSaverStyleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelScreenSaverStyleResponseBody(name='body'),
}

async function getHotelScreenSaverStyle(request: GetHotelScreenSaverStyleRequest): GetHotelScreenSaverStyleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelScreenSaverStyle', 'POST', '/v1.0/ip/getHotelScreenSaverStyle', 'json', true, 'form', request);
}

model GetHotelSettingRequest {
  hotelId?: string(name='HotelId', example='af7***536', position='Body'),
  settingType?: string(name='SettingType', example='SCREENSAVER', position='Body'),
}

model GetHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: {
    deleteToken?: long(name='DeleteToken', example='0'),
    extInfo?: string(name='ExtInfo', example='{}'),
    hotelDeviceModeList?: [ string ](name='HotelDeviceModeList'),
    hotelId?: string(name='HotelId', example='af7***536'),
    hotelScreenSaver?: {
      screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='https://a***png'),
      screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
    }(name='HotelScreenSaver'),
    nightMode?: {
      defaultBright?: string(name='DefaultBright', description='夜间模式下的默认亮度'),
      defaultVolume?: string(name='DefaultVolume', description='夜间模式下的默认音量'),
      enable?: boolean(name='Enable', example='true'),
      end?: string(name='End', example='22:00'),
      standbyAction?: string(name='StandbyAction', example='screenoff'),
      start?: string(name='Start', example='07:00'),
    }(name='NightMode'),
    settingType?: string(name='SettingType', example='SCREENSAVER'),
    value?: string(name='Value'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetHotelSettingResponseBody(name='body'),
}

async function getHotelSetting(request: GetHotelSettingRequest): GetHotelSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetHotelSetting', 'POST', '/v1.0/ip/getHotelSetting', 'json', true, 'form', request);
}

model GetRelationProductListRequest {
}

model GetRelationProductListResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      name?: string(name='Name'),
      pk?: string(name='Pk', example='jTOSl***l1odxImRw'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetRelationProductListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRelationProductListResponseBody(name='body'),
}

async function getRelationProductList(request: GetRelationProductListRequest): GetRelationProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRelationProductList', 'POST', '/v1.0/ip/getRelationProductList', 'json', false, 'json', request);
}

model GetUnionIdRequest {
  encodeKey: string(name='EncodeKey', example='125****0946', position='Body'),
  encodeType: string(name='EncodeType', example='HOTEL', position='Body'),
  id: string(name='Id', example='62a319****abdc', position='Body'),
  idType: string(name='IdType', example='DEVICE_ID', position='Body'),
}

model GetUnionIdResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      organizationId?: string(name='OrganizationId', example='4325***765'),
      unionId?: string(name='UnionId', example='8bh2****8s8'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetUnionIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUnionIdResponseBody(name='body'),
}

async function getUnionId(request: GetUnionIdRequest): GetUnionIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetUnionId', 'POST', '/v1.0/ip/getUnionId', 'json', true, 'form', request);
}

model GetWelcomeTextAndMusicRequest {
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
}

model GetWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    hotelId?: string(name='HotelId', example='a7***83'),
    musicUrl?: string(name='MusicUrl', example='http://ailabsaicloudservice.alicdn.com/tmp/a.wav'),
    text?: string(name='Text'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetWelcomeTextAndMusicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWelcomeTextAndMusicResponseBody(name='body'),
}

async function getWelcomeTextAndMusic(request: GetWelcomeTextAndMusicRequest): GetWelcomeTextAndMusicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetWelcomeTextAndMusic', 'POST', '/v1.0/ip/getWelcomeTextAndMusic', 'json', true, 'form', request);
}

model HotelQrBindRequest {
  clientId: string(name='ClientId', example='xxxxxx', position='Body'),
  code: string(name='Code', example='freuisghrtiesnvfkdsvbfuidslnvfs', position='Body'),
  extInfo?: string(name='ExtInfo', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
}

model HotelQrBindResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73****9-175A-1324-8202-9FAAB*****A'),
  result?: {
    openDeviceInfo?: {
      encodeKey?: string(name='EncodeKey', example='123'),
      encodeType?: string(name='EncodeType', example='HOTEL'),
      id?: string(name='Id', example='xxxxxxx'),
      idType?: string(name='IdType', example='OPEN_ID'),
      organizationId?: string(name='OrganizationId', example='aaaaaaaa'),
    }(name='OpenDeviceInfo'),
    openUserInfo?: {
      encodeKey?: string(name='EncodeKey', example='123'),
      encodeType?: string(name='EncodeType', example='HOTEL'),
      id?: string(name='Id', example='xxxxxx'),
      idType?: string(name='IdType', example='OPEN_ID'),
      organizationId?: string(name='OrganizationId', example='aaaaaaaa'),
    }(name='OpenUserInfo'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model HotelQrBindResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: HotelQrBindResponseBody(name='body'),
}

async function hotelQrBind(request: HotelQrBindRequest): HotelQrBindResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotelQrBind', 'POST', '/v1.0/ip/hotelQrBind', 'json', true, 'form', request);
}

model ImportHotelConfigRequest {
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  importHotelConfig: {
    rcuCustomScenes?: [ 
      {
        corpusList: [ string ](name='CorpusList'),
        description?: string(name='Description'),
        icon?: string(name='Icon'),
        name: string(name='Name'),
        sceneId: string(name='SceneId'),
      }
    ](name='RcuCustomScenes'),
  }(name='ImportHotelConfig', shrink='json', position='Body'),
}

model ImportHotelConfigResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportHotelConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportHotelConfigResponseBody(name='body'),
}

async function importHotelConfig(request: ImportHotelConfigRequest): ImportHotelConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImportHotelConfig', 'POST', '/v1.0/ip/importHotelConfig', 'json', true, 'form', request);
}

model ImportRoomControlDevicesRequest {
  enableInfraredDeviceImport?: string(name='EnableInfraredDeviceImport', position='Body'),
  hotelId: string(name='HotelId', example='vdgrefds', position='Body'),
  locationDevices: [ 
    {
      devices?: [ 
        {
          aliasList?: [ string ](name='AliasList'),
          brand?: string(name='Brand'),
          city?: string(name='City'),
          connectType?: string(name='ConnectType'),
          deviceName: string(name='DeviceName'),
          dn?: string(name='Dn'),
          infraredId?: string(name='InfraredId'),
          infraredIndex?: string(name='InfraredIndex'),
          infraredVersion?: string(name='InfraredVersion'),
          multiKeySwitchExt?: {
            switchList?: [ 
              {
                aliasList?: [ string ](name='AliasList'),
                category?: string(name='Category'),
                deviceIndex?: int32(name='DeviceIndex'),
                deviceName?: string(name='DeviceName'),
                location?: string(name='Location'),
              }
            ](name='SwitchList'),
          }(name='MultiKeySwitchExt'),
          name: string(name='Name', example='light'),
          number?: string(name='Number', example='night_light'),
          pk?: string(name='Pk'),
          province?: string(name='Province'),
          serviceProvider?: string(name='ServiceProvider'),
        }
      ](name='Devices'),
      location: string(name='Location', example='room'),
      locationName?: string(name='LocationName'),
    }
  ](name='LocationDevices', shrink='json', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
}

model ImportRoomControlDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsfregtre'),
  result?: int32(name='Result', example='10'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportRoomControlDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportRoomControlDevicesResponseBody(name='body'),
}

async function importRoomControlDevices(request: ImportRoomControlDevicesRequest): ImportRoomControlDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImportRoomControlDevices', 'POST', '/v1.0/ip/importRoomControlDevices', 'json', true, 'form', request);
}

model ImportRoomGenieScenesRequest {
  hotelId: string(name='HotelId', example='a7a3***013', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
  sceneList?: [ 
    {
      actions: [ 
        {
          attributeValues?: [ 
            {
              attributeName: string(name='AttributeName', example='powerstate'),
              attributeValue: string(name='AttributeValue', example='1'),
            }
          ](name='AttributeValues'),
          device?: {
            category: string(name='Category', example='light'),
            deviceIndex?: int32(name='DeviceIndex', example='0'),
            deviceNumber: string(name='DeviceNumber', example='3c5d2ab8f9ec'),
            type?: int32(name='Type', example='1'),
          }(name='Device'),
          reply?: string(name='Reply'),
          type?: int32(name='Type'),
        }
      ](name='Actions'),
      description?: string(name='Description'),
      display: boolean(name='Display', example='true'),
      icon?: string(name='Icon', example='http://xxx.com/yyy.png'),
      sceneName: string(name='SceneName'),
      triggerLogical: int32(name='TriggerLogical', example='1'),
      triggers: [ 
        {
          attributeValues?: [ 
            {
              attributeName: string(name='AttributeName'),
              attributeValue: string(name='AttributeValue'),
            }
          ](name='AttributeValues'),
          corpusList?: [ string ](name='CorpusList'),
          device?: {
            category: string(name='Category'),
            deviceIndex?: string(name='DeviceIndex'),
            deviceNumber: string(name='DeviceNumber'),
          }(name='Device'),
          type: int32(name='Type', example='1'),
        }
      ](name='Triggers'),
    }
  ](name='SceneList', shrink='json', position='Body'),
}

model ImportRoomGenieScenesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportRoomGenieScenesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportRoomGenieScenesResponseBody(name='body'),
}

async function importRoomGenieScenes(request: ImportRoomGenieScenesRequest): ImportRoomGenieScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ImportRoomGenieScenes', 'POST', '/v1.0/ip/importRoomGenieScenes', 'json', true, 'form', request);
}

model InsertHotelSceneBookItemRequest {
  addHotelSceneItemReq: {
    icon: string(name='Icon', description='icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
    name: string(name='Name', example='青椒肉丝'),
    price: long(name='Price', example='1250'),
    type: string(name='Type', example='FOOD'),
  }(name='AddHotelSceneItemReq', description='addHotelSceneItemReq', shrink='json', position='Query'),
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
}

model InsertHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='36FB***80C2'),
  result?: boolean(name='Result', example='true'),
}

model InsertHotelSceneBookItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InsertHotelSceneBookItemResponseBody(name='body'),
}

async function insertHotelSceneBookItem(request: InsertHotelSceneBookItemRequest): InsertHotelSceneBookItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InsertHotelSceneBookItem', 'POST', '/v1.0/ip/insertHotelSceneBookItem', 'json', true, 'form', request);
}

model InvokeRobotPushRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  pushType: string(name='PushType', example='GET', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
}

model InvokeRobotPushResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model InvokeRobotPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InvokeRobotPushResponseBody(name='body'),
}

async function invokeRobotPush(request: InvokeRobotPushRequest): InvokeRobotPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvokeRobotPush', 'POST', '/v1.0/ip/invokeRobotPush', 'json', true, 'form', request);
}

model ListAllProvincesRequest {
}

model ListAllProvincesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='00534880-4397-5134-B212-1030B7A37C27'),
  result?: [ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListAllProvincesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAllProvincesResponseBody(name='body'),
}

async function listAllProvinces(request: ListAllProvincesRequest): ListAllProvincesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAllProvinces', 'POST', '/v1.0/ip/listAllProvinces', 'json', false, 'json', request);
}

model ListCitiesByProvinceRequest {
  province: string(name='Province', position='Body'),
}

model ListCitiesByProvinceResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='860194F7-9593-50EA-8E53-BCEC0D325A00'),
  result?: [ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListCitiesByProvinceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCitiesByProvinceResponseBody(name='body'),
}

async function listCitiesByProvince(request: ListCitiesByProvinceRequest): ListCitiesByProvinceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCitiesByProvince', 'POST', '/v1.0/ip/listCitiesByProvince', 'json', true, 'form', request);
}

model ListCustomQARequest {
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  keyword?: string(name='Keyword', example='***', position='Body'),
  page: {
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='10'),
  }(name='Page', shrink='json', position='Body'),
}

model ListCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='21'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      answers?: string(name='Answers', example='22;11'),
      createTime?: string(name='CreateTime', example='2023-01-10 10:01:59'),
      customQAId?: string(name='CustomQAId', example='111'),
      hotelId?: string(name='HotelId', example='a7***83'),
      keyWords?: string(name='KeyWords', example='22;11'),
      majorQuestion?: string(name='MajorQuestion', example='***'),
      status?: int32(name='Status', example='0'),
      supplementaryQuestion?: string(name='SupplementaryQuestion', example='22;11'),
      updateTime?: string(name='UpdateTime', example='2023-01-10 10:01:59'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListCustomQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCustomQAResponseBody(name='body'),
}

async function listCustomQA(request: ListCustomQARequest): ListCustomQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCustomQA', 'POST', '/v1.0/ip/listCustomQA', 'json', true, 'form', request);
}

model ListDialogueTemplateRequest {
  hotelId: string(name='HotelId', description='hotelId', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
}

model ListDialogueTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      templateDetail?: {
        firstDialogueTemplate?: {
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer', example='${goodsName}${price}元，请问需要服务员送来吗？'),
          zeroPriceNoAnswer?: string(name='ZeroPriceNoAnswer', example='对不起，暂时不提供此物品。'),
          zeroPriceYesAnswer?: string(name='ZeroPriceYesAnswer', example='好的，服务员会尽快送来。'),
        }(name='FirstDialogueTemplate'),
        secondDialogueTemplate?: {
          nonzeroPriceNoAnswer?: string(name='NonzeroPriceNoAnswer', example='好的，已取消。'),
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer', example='好的，服务员会尽快送来${goodsName}'),
        }(name='SecondDialogueTemplate'),
      }(name='TemplateDetail'),
      templateId?: long(name='TemplateId', example='4'),
      templateName?: string(name='TemplateName', example='物品多轮模板'),
      type?: string(name='Type', example='GOODS'),
    }
  ](name='Result'),
}

model ListDialogueTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDialogueTemplateResponseBody(name='body'),
}

async function listDialogueTemplate(request: ListDialogueTemplateRequest): ListDialogueTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDialogueTemplate', 'POST', '/v1.0/ip/listDialogueTemplate', 'json', true, 'form', request);
}

model ListHotelAlarmRequest {
  hotelId?: string(name='HotelId', example='a7a3***013', position='Body'),
  rooms?: [ string ](name='Rooms', shrink='json', position='Body'),
}

model ListHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId', example='5039'),
      deviceOpenId?: string(name='DeviceOpenId', example='PvkB****VVTA=='),
      scheduleInfo?: {
        once?: {
          day?: int32(name='Day', example='20'),
          hour?: int32(name='Hour', example='10'),
          minute?: int32(name='Minute', example='30'),
          month?: int32(name='Month', example='9'),
          year?: int32(name='Year', example='2022'),
        }(name='Once'),
        type?: string(name='Type', description='ONCE, WEEKLY', example='ONCE'),
        weekly?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour', example='10'),
          minute?: int32(name='Minute', example='0'),
        }(name='Weekly'),
      }(name='ScheduleInfo'),
      userOpenId?: string(name='UserOpenId', example='mgw/k***HQd'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListHotelAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelAlarmResponseBody(name='body'),
}

async function listHotelAlarm(request: ListHotelAlarmRequest): ListHotelAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelAlarm', 'POST', '/v1.0/ip/getHotelAlarmList', 'json', true, 'form', request);
}

model ListHotelControlDeviceRequest {
  userInfo?: {
    encodeKey: string(name='EncodeKey'),
    encodeType: string(name='EncodeType'),
    id: string(name='Id'),
    idType: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model ListHotelControlDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model ListHotelControlDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelControlDeviceResponseBody(name='body'),
}

async function listHotelControlDevice(request: ListHotelControlDeviceRequest): ListHotelControlDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelControlDevice', 'POST', '/v1.0/ip/listHotelControlDevice', 'json', false, 'json', request);
}

model ListHotelInfoRequest {
}

model ListHotelInfoResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      authAccount?: [ 
        {
          userName?: string(name='UserName', example='leetest'),
        }
      ](name='AuthAccount'),
      hotelAddress?: string(name='HotelAddress'),
      hotelId?: string(name='HotelId', example='cf2446fc9d144c85aaee4f9ae20a96e7'),
      hotelName?: string(name='HotelName'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListHotelInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelInfoResponseBody(name='body'),
}

async function listHotelInfo(request: ListHotelInfoRequest): ListHotelInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelInfo', 'POST', '/v1.0/ip/listHotelInfo', 'json', false, 'json', request);
}

model ListHotelMessageTemplateRequest {
}

model ListHotelMessageTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      auditMark?: string(name='AuditMark', example='不通过'),
      auditStatus?: string(name='AuditStatus', example='COMMIT'),
      templateDetail?: string(name='TemplateDetail', example='这是${hotel}的一个测试模板'),
      templateId?: long(name='TemplateId', example='1'),
      templateName?: string(name='TemplateName', example='测试模板'),
    }
  ](name='Result'),
}

model ListHotelMessageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelMessageTemplateResponseBody(name='body'),
}

async function listHotelMessageTemplate(request: ListHotelMessageTemplateRequest): ListHotelMessageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelMessageTemplate', 'POST', '/v1.0/ip/listHotelMessageTemplate', 'json', false, 'json', request);
}

model ListHotelOrderRequest {
  payload: {
    page: {
      pageNumber: long(name='PageNumber', example='1'),
      pageSize: long(name='PageSize', example='10'),
    }(name='Page'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', example='1248494721591392955'),
    encodeType: string(name='EncodeType', example='PROJECT_ID'),
    id: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model ListHotelOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='21'),
    totalPage?: int32(name='TotalPage', example='7'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='07F61FDA-606F-10A0-8ED0-C6CE62710A48'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt', example='21.5'),
      gmtCreate?: long(name='GmtCreate', example='1659952892000'),
      orderNo?: string(name='OrderNo', example='20220808180132000114508555527711'),
      quantity?: long(name='Quantity', example='12'),
      roomNo?: string(name='RoomNo', example='2001'),
      status?: string(name='Status', example='INIT'),
      type?: string(name='Type', example='REPAIR'),
      typeIconUrl?: string(name='TypeIconUrl', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingfenlei/shebeiweixiu.png'),
      typeName?: string(name='TypeName', example='设备维修'),
    }
  ](name='Result'),
}

model ListHotelOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelOrderResponseBody(name='body'),
}

async function listHotelOrder(request: ListHotelOrderRequest): ListHotelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelOrder', 'POST', '/v1.0/ip/listHotelOrder', 'json', false, 'json', request);
}

model ListHotelRoomsRequest {
  hotelAdminRoom?: {
    roomNo?: string(name='RoomNo'),
  }(name='HotelAdminRoom', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f', position='Body'),
}

model ListHotelRoomsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
      roomNo?: string(name='RoomNo', example='102'),
    }
  ](name='Result'),
}

model ListHotelRoomsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelRoomsResponseBody(name='body'),
}

async function listHotelRooms(request: ListHotelRoomsRequest): ListHotelRoomsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelRooms', 'POST', '/v1.0/ip/listHotelRooms', 'json', true, 'form', request);
}

model ListHotelSceneBookItemsRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  page: {
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='10'),
  }(name='Page', shrink='json', position='Query'),
  type: string(name='Type', example='FOOD', position='Body'),
}

model ListHotelSceneBookItemsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext', example='True'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        icon?: string(name='Icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
        id?: long(name='Id', example='11824'),
        name?: string(name='Name', example='青椒肉丝'),
        price?: long(name='Price', example='1850'),
        status?: string(name='Status', example='已添加'),
        type?: string(name='Type', example='FOOD'),
        updateTime?: long(name='UpdateTime', example='1666161803'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneBookItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelSceneBookItemsResponseBody(name='body'),
}

async function listHotelSceneBookItems(request: ListHotelSceneBookItemsRequest): ListHotelSceneBookItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelSceneBookItems', 'POST', '/v1.0/ip/listHotelSceneBookItems', 'json', true, 'form', request);
}

model ListHotelSceneItemRequest {
  payload: {
    type: string(name='Type', example='GOODS'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', example='1248494721591392955'),
    encodeType: string(name='EncodeType', example='PROJECT_ID'),
    id: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model ListHotelSceneItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
    totalPage?: int32(name='TotalPage', example='6'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='CEADB586-51CB-1B6B-95BD-AB85A7A08E97'),
  result?: {
    secondCategoryList?: [ 
      {
        itemList?: [ 
          {
            category?: string(name='Category', example='客用品类'),
            icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
            id?: string(name='Id', example='152860'),
            name?: string(name='Name', example='棉签'),
            price?: long(name='Price', example='1'),
            residueLimit?: long(name='ResidueLimit'),
            status?: string(name='Status', example='已添加'),
            type?: string(name='Type', example='GOODS'),
          }
        ](name='ItemList'),
        secondCategoryName?: string(name='SecondCategoryName', example='客用品类'),
      }
    ](name='SecondCategoryList'),
  }(name='Result'),
}

model ListHotelSceneItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelSceneItemResponseBody(name='body'),
}

async function listHotelSceneItem(request: ListHotelSceneItemRequest): ListHotelSceneItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelSceneItem', 'POST', '/v1.0/ip/listHotelSceneItem', 'json', false, 'json', request);
}

model ListHotelSceneItemsRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  listHotelSceneReq: {
    category?: string(name='Category', example='客用品类'),
    keywords?: string(name='Keywords', example='棉签'),
    page: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
    }(name='Page'),
    status?: string(name='Status', example='已添加'),
    type: string(name='Type', example='GOODS'),
  }(name='ListHotelSceneReq', description='ListHotelSceneReq', shrink='json', position='Query'),
}

model ListHotelSceneItemsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext', example='False'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        beyondLimitReply?: string(name='BeyondLimitReply'),
        category?: string(name='Category', example='客用品类'),
        deliveryMethod?: string(name='DeliveryMethod'),
        icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
        id?: long(name='Id', description='id', example='10336'),
        limitNumber?: int32(name='LimitNumber'),
        limitSwitch?: int32(name='LimitSwitch'),
        name?: string(name='Name', example='棉签'),
        paymentMethod?: string(name='PaymentMethod'),
        price?: long(name='Price', example='160'),
        robotName?: string(name='RobotName'),
        status?: string(name='Status', example='已添加'),
        type?: string(name='Type', example='GOODS'),
        updateTime?: long(name='UpdateTime', example='1666163226'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelSceneItemsResponseBody(name='body'),
}

async function listHotelSceneItems(request: ListHotelSceneItemsRequest): ListHotelSceneItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelSceneItems', 'POST', '/v1.0/ip/listHotelSceneItems', 'json', true, 'form', request);
}

model ListHotelServiceCategoryRequest {
  payload: {
    type: string(name='Type', example='HOTEL_SERVICE'),
  }(name='Payload', shrink='json', position='Query'),
}

model ListHotelServiceCategoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5373C821-65D2-1764-B9F9-951914937FF5'),
  result?: [ 
    {
      code?: string(name='Code', example='GOODS'),
      desc?: string(name='Desc', example='生活及洗漱用品'),
      icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingfenlei/wupintianjia.png'),
      name?: string(name='Name', example='物品添加'),
      type?: string(name='Type', example='HOTEL_SERVICE'),
    }
  ](name='Result'),
}

model ListHotelServiceCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelServiceCategoryResponseBody(name='body'),
}

async function listHotelServiceCategory(request: ListHotelServiceCategoryRequest): ListHotelServiceCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotelServiceCategory', 'POST', '/v1.0/ip/listHotelServiceCategory', 'json', false, 'json', request);
}

model ListHotelsRequest {
  hotelRequest?: {
    hotelId?: string(name='HotelId'),
  }(name='HotelRequest', shrink='json', position='Query'),
  page: {
    pageNumber: int32(name='PageNumber', example='1'),
    pageSize: int32(name='PageSize', example='10'),
  }(name='Page', shrink='json', position='Query'),
  status: int32(name='Status', example='1', position='Body'),
}

model ListHotelsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId'),
  result?: {
    hotelInfoList?: [ 
      {
        accountNames?: [ string ](name='AccountNames'),
        createTime?: long(name='CreateTime', example='1654568802000'),
        hotelAddress?: string(name='HotelAddress', example='酒店地址'),
        hotelId?: string(name='HotelId', example='73ab1b03018d4da69b5bef17095f569b'),
        hotelName?: string(name='HotelName', example='酒店名称'),
        industryType?: string(name='IndustryType', example='酒店'),
        phoneNumber?: string(name='PhoneNumber', example='13312340987'),
        relatedProductName?: string(name='RelatedProductName', example='测试产品'),
        roomNum?: int32(name='RoomNum', example='12'),
        status?: int32(name='Status', example='1'),
      }
    ](name='HotelInfoList'),
    page?: {
      hasNext?: boolean(name='HasNext'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
  }(name='Result'),
}

model ListHotelsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListHotelsResponseBody(name='body'),
}

async function listHotels(request: ListHotelsRequest): ListHotelsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListHotels', 'POST', '/v1.0/ip/listHotels', 'json', true, 'form', request);
}

model ListInfraredDeviceBrandsRequest {
  category: string(name='Category', position='Body'),
  serviceProvider?: string(name='ServiceProvider', position='Body'),
}

model ListInfraredDeviceBrandsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='860194F7-9593-50EA-8E53-BCEC0D325A00'),
  result?: map[string][ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListInfraredDeviceBrandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInfraredDeviceBrandsResponseBody(name='body'),
}

async function listInfraredDeviceBrands(request: ListInfraredDeviceBrandsRequest): ListInfraredDeviceBrandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInfraredDeviceBrands', 'POST', '/v1.0/ip/listInfraredDeviceBrands', 'json', true, 'form', request);
}

model ListInfraredRemoteControllersRequest {
  brand?: string(name='Brand', position='Body'),
  category: string(name='Category', position='Body'),
  city?: string(name='City', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  province?: string(name='Province', position='Body'),
  serviceProvider?: string(name='ServiceProvider', position='Body'),
}

model ListInfraredRemoteControllersResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0C90A059-3653-5356-A78E-8A6BDA606155'),
  result?: [ 
    {
      index?: int32(name='Index', example='1'),
      rid?: long(name='Rid', example='3747'),
      version?: string(name='Version', example='4'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListInfraredRemoteControllersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInfraredRemoteControllersResponseBody(name='body'),
}

async function listInfraredRemoteControllers(request: ListInfraredRemoteControllersRequest): ListInfraredRemoteControllersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInfraredRemoteControllers', 'POST', '/v1.0/ip/listInfraredRemoteControllers', 'json', true, 'form', request);
}

model ListSTBServiceProvidersRequest {
  city: string(name='City', position='Body'),
  province: string(name='Province', position='Body'),
}

model ListSTBServiceProvidersResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1036C376-7A37-5A73-BE8B-C6DB40107EC1'),
  result?: map[string][ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListSTBServiceProvidersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSTBServiceProvidersResponseBody(name='body'),
}

async function listSTBServiceProviders(request: ListSTBServiceProvidersRequest): ListSTBServiceProvidersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSTBServiceProviders', 'POST', '/v1.0/ip/listSTBServiceProviders', 'json', true, 'form', request);
}

model ListSceneCategoryRequest {
  hotelId: string(name='HotelId', description='hotelId', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  type: string(name='Type', example='REPAIR', position='Body'),
}

model ListSceneCategoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='0EC7*726E'),
  result?: [ string ](name='Result'),
}

model ListSceneCategoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSceneCategoryResponseBody(name='body'),
}

async function listSceneCategory(request: ListSceneCategoryRequest): ListSceneCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSceneCategory', 'POST', '/v1.0/ip/listSceneCategory', 'json', true, 'form', request);
}

model ListServiceQARequest {
  active?: boolean(name='Active', example='true', position='Body'),
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  keyword?: string(name='Keyword', example='***', position='Body'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page', shrink='json', position='Body'),
}

model ListServiceQAResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      active?: boolean(name='Active', example='true'),
      answer?: string(name='Answer', example='***'),
      gmtModified?: string(name='GmtModified', example='2022-07-27 14:06:27'),
      question?: string(name='Question'),
      serviceQAId?: long(name='ServiceQAId', example='1'),
      templates?: string(name='Templates'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListServiceQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceQAResponseBody(name='body'),
}

async function listServiceQA(request: ListServiceQARequest): ListServiceQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceQA', 'POST', '/v1.0/ip/listServiceQA', 'json', true, 'form', request);
}

model ListTicketsRequest {
  endTime?: string(name='EndTime', example='2022-09-14 14:23:00', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  isDesc?: boolean(name='IsDesc', example='true', position='Body'),
  isNeedCallback?: boolean(name='IsNeedCallback', example='false', position='Body'),
  isNeedCharges?: boolean(name='IsNeedCharges', example='false', position='Body'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page', shrink='json', position='Body'),
  roomNo?: string(name='RoomNo', example='1211', position='Body'),
  sortField?: string(name='SortField', example='gmtCalled', position='Body'),
  startTime?: string(name='StartTime', example='2022-04-08 09:39:00', position='Body'),
  status?: string(name='Status', example='waiting', position='Body'),
  type?: string(name='Type', example='""', position='Body'),
}

model ListTicketsResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='5'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      action?: boolean(name='Action', example='false'),
      assignedHandler?: string(name='AssignedHandler', example='***'),
      chargesRemark?: string(name='ChargesRemark', example='***'),
      completeRemark?: string(name='CompleteRemark', example='***'),
      dialogs?: [ 
        {
          answer?: string(name='Answer'),
          question?: string(name='Question'),
        }
      ](name='Dialogs'),
      gmtCalled?: string(name='GmtCalled', example='2023-01-09 00:00:00'),
      gmtCreate?: string(name='GmtCreate', example='2023-01-09 00:00:00'),
      gmtDelayed?: string(name='GmtDelayed', example='2023-01-09 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-01-09 00:00:00'),
      groupKey?: string(name='GroupKey', example='2023***93975'),
      id?: long(name='Id', example='45'),
      isAcceptedCharges?: boolean(name='IsAcceptedCharges', example='false'),
      isDelayed?: boolean(name='IsDelayed', example='true'),
      isNeedCallback?: boolean(name='IsNeedCallback', example='false'),
      isNeedCharges?: boolean(name='IsNeedCharges', example='false'),
      operations?: [ map[string]any ](name='Operations'),
      remark?: string(name='Remark', example='***'),
      roomNo?: string(name='RoomNo', example='101'),
      status?: string(name='Status', example='waiting'),
      type?: string(name='Type', example='""'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListTicketsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTicketsResponseBody(name='body'),
}

async function listTickets(request: ListTicketsRequest): ListTicketsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTickets', 'POST', '/v1.0/ip/listTickets', 'json', true, 'form', request);
}

model PageGetHotelRoomDevicesRequest {
  hotelId: string(name='HotelId', example='a7***83', position='Body'),
  pageNumber: int32(name='PageNumber', example='1', position='Body'),
  pageSize: int32(name='PageSize', example='10', position='Body'),
}

model PageGetHotelRoomDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  page?: {
    end?: int32(name='End', example='4'),
    hasNext?: boolean(name='HasNext', example='False'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    start?: int32(name='Start', example='0'),
    total?: int32(name='Total', example='5'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='4EFBDDF4-B19D-526C-8C3D-CD8AB51974EE'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion', example='V21.10.00.313'),
      hotelId?: string(name='HotelId', example='a7***83'),
      mac?: string(name='Mac', example='b4:xx:xx:xx:65:2b'),
      onlineStatus?: int32(name='OnlineStatus', example='1'),
      roomNo?: string(name='RoomNo', example='2001'),
      sn?: string(name='Sn', example='1200xxx048'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PageGetHotelRoomDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PageGetHotelRoomDevicesResponseBody(name='body'),
}

async function pageGetHotelRoomDevices(request: PageGetHotelRoomDevicesRequest): PageGetHotelRoomDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PageGetHotelRoomDevices', 'POST', '/v1.0/ip/pageGetHotelRoomDevices', 'json', true, 'form', request);
}

model PmsEventReportRequest {
  payload: string(name='Payload', position='Body'),
}

model PmsEventReportResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PmsEventReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PmsEventReportResponseBody(name='body'),
}

async function pmsEventReport(request: PmsEventReportRequest): PmsEventReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PmsEventReport', 'POST', '/v1.0/ip/pmsEventReport', 'json', true, 'form', request);
}

model PushHotelMessageRequest {
  pushHotelMessageReq: {
    hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
    paramMap?: map[string]string(name='ParamMap'),
    roomNo: string(name='RoomNo', example='102'),
    templateId: long(name='TemplateId', example='1'),
  }(name='PushHotelMessageReq', description='pushHotelMessageReq', shrink='json', position='Query'),
}

model PushHotelMessageResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushHotelMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushHotelMessageResponseBody(name='body'),
}

async function pushHotelMessage(request: PushHotelMessageRequest): PushHotelMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushHotelMessage', 'POST', '/v1.0/ip/pushHotelMessage', 'json', false, 'json', request);
}

model PushVoiceBoxCommandsRequest {
  commands: [ 
    {
      commandDomain: string(name='CommandDomain'),
      commandName: string(name='CommandName'),
      payload?: string(name='Payload'),
    }
  ](name='Commands', shrink='json', position='Body'),
  hotelId: string(name='HotelId', position='Body'),
  roomNo: string(name='RoomNo', position='Body'),
}

model PushVoiceBoxCommandsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model PushVoiceBoxCommandsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushVoiceBoxCommandsResponseBody(name='body'),
}

async function pushVoiceBoxCommands(request: PushVoiceBoxCommandsRequest): PushVoiceBoxCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushVoiceBoxCommands', 'POST', '/v1.0/ip/pushVoiceBoxCommands', 'json', true, 'form', request);
}

model PushWelcomeRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
  welcomeMusicUrl?: string(name='WelcomeMusicUrl', example='http://ailabsaicloudservice.alicdn.com/tmp/a.wav', position='Body'),
  welcomeText: string(name='WelcomeText', position='Body'),
}

model PushWelcomeResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PushWelcomeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushWelcomeResponseBody(name='body'),
}

async function pushWelcome(request: PushWelcomeRequest): PushWelcomeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushWelcome', 'POST', '/v1.0/ip/pushWelcome', 'json', true, 'form', request);
}

model PushWelcomeTextAndMusicRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
  templateVariable?: map[string]string(name='TemplateVariable', shrink='json', position='Body'),
}

model PushWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PushWelcomeTextAndMusicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushWelcomeTextAndMusicResponseBody(name='body'),
}

async function pushWelcomeTextAndMusic(request: PushWelcomeTextAndMusicRequest): PushWelcomeTextAndMusicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushWelcomeTextAndMusic', 'POST', '/v1.0/ip/pushWelcomeTextAndMusic', 'json', true, 'form', request);
}

model QueryDeviceStatusRequest {
  payload?: {
    locationDevices?: [ 
      {
        deviceNumber?: string(name='DeviceNumber', example='night_light'),
        deviceType?: string(name='DeviceType', example='light'),
        location?: string(name='Location', example='room'),
      }
    ](name='LocationDevices'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model QueryDeviceStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsgrefds'),
  result?: [ map[string]string ](name='Result'),
}

model QueryDeviceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceStatusResponseBody(name='body'),
}

async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDeviceStatus', 'POST', '/v1.0/ip/queryDeviceStatus', 'json', false, 'json', request);
}

model QueryHotelRoomDetailRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  mac?: string(name='Mac', example='38:c8:**:**:f5:22', position='Body'),
  roomNo?: string(name='RoomNo', example='1211', position='Body'),
  sn?: string(name='Sn', description='设备sn信息
注：若在mac uuid sn全都输入的情况下 按照输入正确的内容查询 若全输入都是正确的 则 按照 uuid > mac > sn 优先级查询
传入mac uuid sn其中一个 则酒店id和房间号可不传', example='280**28', position='Body'),
  uuid?: string(name='Uuid', example='588***96j5WU', position='Body'),
}

model QueryHotelRoomDetailResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    authAccounts?: [ 
      {
        accountName?: string(name='AccountName'),
        authTime?: string(name='AuthTime', example='2023-01-01 12:00:00'),
      }
    ](name='AuthAccounts'),
    connectType?: string(name='ConnectType', example='rcu'),
    creatorAccountName?: string(name='CreatorAccountName'),
    deviceInfos?: [ 
      {
        activeTime?: string(name='ActiveTime', example='2023-01-01 12:00:00'),
        deviceName?: string(name='DeviceName'),
        firmwareVersion?: string(name='FirmwareVersion', example='6.1.8-RS-20230425.1806'),
        mac?: string(name='Mac', example='fa:03:23:58:c3:00'),
        onlineStatus?: int32(name='OnlineStatus', example='1'),
        sn?: string(name='Sn', example='sag42dlz4qf'),
        uuid?: string(name='Uuid', example='41c95c18a0a643bcb58edf438877def5'),
      }
    ](name='DeviceInfos'),
    hotelId?: string(name='HotelId', example='a7***83'),
    hotelName?: string(name='HotelName'),
    otherService?: {
      openCall?: boolean(name='OpenCall', example='false'),
      unhandleTickets?: int32(name='UnhandleTickets', example='0'),
    }(name='OtherService'),
    roomControlInfo?: {
      appId?: long(name='AppId', example='78'),
      appName?: string(name='AppName', example='app'),
      deviceInfos?: [ 
        {
          categoryEnName?: string(name='CategoryEnName', example='light'),
          categoryId?: long(name='CategoryId', example='3'),
          categoryName?: string(name='CategoryName'),
          deviceConnectType?: string(name='DeviceConnectType', example='rcu'),
          deviceCount?: int32(name='DeviceCount', example='4'),
          deviceId?: string(name='DeviceId', example='readLight'),
          deviceName?: string(name='DeviceName'),
          locationEnName?: string(name='LocationEnName', example='room'),
          locationId?: long(name='LocationId', example='1'),
          locationName?: string(name='LocationName'),
          productKey?: string(name='ProductKey', example='a1ueWGP6W2L'),
        }
      ](name='DeviceInfos'),
      rcuUrl?: string(name='RcuUrl', example='http://www.xxx.com'),
      templateId?: long(name='TemplateId', example='1170'),
      templateName?: string(name='TemplateName'),
    }(name='RoomControlInfo'),
    roomNo?: string(name='RoomNo', example='2001'),
    roomServiceInfo?: {
      bookServiceCnt?: int32(name='BookServiceCnt', example='0'),
      goodsServiceCnt?: int32(name='GoodsServiceCnt', example='10'),
      repairServiceCnt?: int32(name='RepairServiceCnt', example='10'),
      roomServiceCnt?: int32(name='RoomServiceCnt', example='12'),
    }(name='RoomServiceInfo'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model QueryHotelRoomDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryHotelRoomDetailResponseBody(name='body'),
}

async function queryHotelRoomDetail(request: QueryHotelRoomDetailRequest): QueryHotelRoomDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryHotelRoomDetail', 'POST', '/v1.0/ip/queryHotelRoomDetail', 'json', true, 'form', request);
}

model QueryRoomControlDevicesRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Query'),
  roomNo: string(name='RoomNo', example='1211', position='Query'),
}

model QueryRoomControlDevicesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsgfdscvre'),
  result?: [ 
    {
      devices?: [ 
        {
          aliasList?: [ string ](name='AliasList'),
          connectType?: string(name='ConnectType'),
          dn?: string(name='DN'),
          deviceName?: string(name='DeviceName'),
          deviceStatus?: string(name='DeviceStatus'),
          multiKeySwitchExt?: {
            switchList?: [ 
              {
                aliasList?: [ string ](name='AliasList'),
                category?: string(name='Category'),
                deviceIndex?: int32(name='DeviceIndex'),
                deviceName?: string(name='DeviceName'),
                deviceStatus?: string(name='DeviceStatus'),
                elementCode?: string(name='ElementCode'),
                location?: string(name='Location'),
              }
            ](name='SwitchList'),
          }(name='MultiKeySwitchExt'),
          name?: string(name='Name', example='light'),
          number?: string(name='Number', example='night_light'),
          pk?: string(name='PK'),
        }
      ](name='Devices'),
      location?: string(name='Location', example='room'),
      locationName?: string(name='LocationName'),
    }
  ](name='Result'),
}

model QueryRoomControlDevicesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRoomControlDevicesResponseBody(name='body'),
}

async function queryRoomControlDevices(request: QueryRoomControlDevicesRequest): QueryRoomControlDevicesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryRoomControlDevices', 'POST', '/v1.0/ip/queryRoomControlDevices', 'json', false, 'json', request);
}

model QueryRoomControlDevicesAndStatusRequest {
  hotelId?: string(name='HotelId', example='af7***536', position='Body'),
  roomNo?: string(name='RoomNo', example='1211', position='Body'),
}

model QueryRoomControlDevicesAndStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67***6FA'),
  result?: [ 
    {
      devices?: [ 
        {
          aliasList?: [ string ](name='AliasList'),
          brand?: string(name='Brand'),
          city?: string(name='City'),
          connectType?: string(name='ConnectType', example='rcu'),
          deviceName?: string(name='DeviceName'),
          deviceStatus?: string(name='DeviceStatus', example='{"powerstate": "1"}'),
          dn?: string(name='Dn', example='3c5d***9ec'),
          infraredId?: string(name='InfraredId', example='9**7'),
          infraredIndex?: string(name='InfraredIndex', example='2'),
          infraredVersion?: string(name='InfraredVersion', example='3.0'),
          multiKeySwitchExt?: {
            switchList?: [ 
              {
                aliasList?: [ string ](name='AliasList'),
                category?: string(name='Category', example='light'),
                deviceIndex?: int32(name='DeviceIndex', example='1'),
                deviceName?: string(name='DeviceName'),
                deviceStatus?: string(name='DeviceStatus', example='{
      "powerstate": "0"
}'),
                elementCode?: string(name='ElementCode', example='e2'),
                location?: string(name='Location', example='room'),
                status?: map[string]string(name='Status'),
                tags?: [ string ](name='Tags'),
              }
            ](name='SwitchList'),
          }(name='MultiKeySwitchExt'),
          name?: string(name='Name', example='light'),
          number?: string(name='Number', example='night_light'),
          pk?: string(name='Pk', example='50255129'),
          province?: string(name='Province'),
          serviceProvider?: string(name='ServiceProvider'),
          status?: map[string]string(name='Status'),
        }
      ](name='Devices'),
      location?: string(name='Location', example='room'),
      locationName?: string(name='LocationName'),
      roomNo?: string(name='RoomNo', example='1211'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model QueryRoomControlDevicesAndStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryRoomControlDevicesAndStatusResponseBody(name='body'),
}

async function queryRoomControlDevicesAndStatus(request: QueryRoomControlDevicesAndStatusRequest): QueryRoomControlDevicesAndStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryRoomControlDevicesAndStatus', 'POST', '/v1.0/ip/queryRoomControlDevicesAndStatus', 'json', true, 'form', request);
}

model QuerySceneListRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  sceneStates?: [ int32 ](name='SceneStates', shrink='json', position='Body'),
  sceneTypes?: [ string ](name='SceneTypes', shrink='json', position='Body'),
  templateInfoIds?: [ string ](name='TemplateInfoIds', shrink='json', position='Body'),
}

model QuerySceneListResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FAFCD152-4791-5F2F-B0BE-2DC06FD4F05B'),
  results?: [ 
    {
      icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
      sceneId?: string(name='SceneId', example='73'),
      sceneName?: string(name='SceneName'),
      sceneSource?: string(name='SceneSource', example='external'),
      sceneState?: int32(name='SceneState', example='1'),
      sceneType?: string(name='SceneType', example='common'),
      templateInfoDTOList?: [ 
        {
          description?: string(name='Description'),
          id?: long(name='Id', example='6962'),
          name?: string(name='Name', example='101'),
        }
      ](name='TemplateInfoDTOList'),
      unavailableReason?: string(name='UnavailableReason'),
    }
  ](name='Results'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model QuerySceneListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySceneListResponseBody(name='body'),
}

async function querySceneList(request: QuerySceneListRequest): QuerySceneListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySceneList', 'POST', '/v1.0/ip/querySceneList', 'json', true, 'form', request);
}

model RemoveChildAccountAuthRequest {
  appKey: string(name='AppKey', example='30**53', position='Body'),
  childAccountName: string(name='ChildAccountName', example='tbxxxx', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  tbOpenId: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh', position='Body'),
}

model RemoveChildAccountAuthResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B***F34E'),
  result?: boolean(name='Result', example='True'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model RemoveChildAccountAuthResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveChildAccountAuthResponseBody(name='body'),
}

async function removeChildAccountAuth(request: RemoveChildAccountAuthRequest): RemoveChildAccountAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveChildAccountAuth', 'POST', '/v1.0/ip/removeChildAccountAuth', 'json', true, 'form', request);
}

model RemoveHotelRequest {
  appKey: string(name='AppKey', description='appkey', example='30193305', position='Body'),
  hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f', position='Body'),
  tbOpenId: string(name='TbOpenId', example='AAEVK***UE3d3Z2ETwh', position='Body'),
}

model RemoveHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model RemoveHotelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveHotelResponseBody(name='body'),
}

async function removeHotel(request: RemoveHotelRequest): RemoveHotelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveHotel', 'POST', '/v1.0/ip/removeHotel', 'json', true, 'form', request);
}

model ResetWelcomeTextAndMusicRequest {
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
}

model ResetWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ResetWelcomeTextAndMusicResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetWelcomeTextAndMusicResponseBody(name='body'),
}

async function resetWelcomeTextAndMusic(request: ResetWelcomeTextAndMusicRequest): ResetWelcomeTextAndMusicResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResetWelcomeTextAndMusic', 'POST', '/v1.0/ip/resetWelcomeTextAndMusic', 'json', true, 'form', request);
}

model RoomCheckOutRequest {
  deviceInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  userInfo?: {
    encodeKey: string(name='EncodeKey', example='123'),
    encodeType: string(name='EncodeType', example='HOTEL'),
    id: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model RoomCheckOutResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='dsvrevd'),
  result?: boolean(name='Result', example='true'),
}

model RoomCheckOutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RoomCheckOutResponseBody(name='body'),
}

async function roomCheckOut(request: RoomCheckOutRequest): RoomCheckOutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RoomCheckOut', 'POST', '/v1.0/ip/roomCheckOut', 'json', false, 'json', request);
}

model SubmitHotelOrderRequest {
  payload: {
    itemList: [ 
      {
        itemId: long(name='ItemId', example='152860'),
        quantity: long(name='Quantity', example='2'),
      }
    ](name='ItemList'),
    type: string(name='Type', example='GOODS'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', example='1248494721591392955'),
    encodeType: string(name='EncodeType', example='PROJECT_ID'),
    id: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo', shrink='json', position='Query'),
}

model SubmitHotelOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='CCCF2E86-D9B5-12A6-AD25-8A06933D2B0F'),
  result?: string(name='Result', example='20220809104752000114671478353329'),
  statusCode?: int32(name='StatusCode'),
}

model SubmitHotelOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitHotelOrderResponseBody(name='body'),
}

async function submitHotelOrder(request: SubmitHotelOrderRequest): SubmitHotelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SubmitHotelOrder', 'POST', '/v1.0/ip/submitHotelOrder', 'json', false, 'json', request);
}

model SyncDeviceStatusWithAkRequest {
  categoryCnName?: string(name='CategoryCnName', position='Body'),
  categoryEnName: string(name='CategoryEnName', example='light', position='Body'),
  deviceName?: string(name='DeviceName', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  location: string(name='Location', example='room', position='Body'),
  locationCnName?: string(name='LocationCnName', position='Body'),
  number: string(name='Number', example='bedLight', position='Body'),
  roomNo: string(name='RoomNo', example='1211', position='Body'),
  switch: int32(name='Switch', example='1', position='Body'),
  fanSpeed?: string(name='fanSpeed', position='Body'),
  mode?: string(name='mode', position='Body'),
  roomTemperature?: string(name='roomTemperature', position='Body'),
  temperature?: string(name='temperature', position='Body'),
  value?: int32(name='value', position='Body'),
}

model SyncDeviceStatusWithAkResponseBody = {
  message?: string(name='Message', example='success'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
  requestId?: string(name='requestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
}

model SyncDeviceStatusWithAkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SyncDeviceStatusWithAkResponseBody(name='body'),
}

async function syncDeviceStatusWithAk(request: SyncDeviceStatusWithAkRequest): SyncDeviceStatusWithAkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncDeviceStatusWithAk', 'POST', '/v1.0/ip/syncDeviceStatusWithAk', 'json', true, 'form', request);
}

model UpdateBasicInfoQARequest {
  checkInTime: string(name='CheckInTime', example='11:11', position='Body'),
  checkOutTime: string(name='CheckOutTime', example='11:11', position='Body'),
  hotelAddress: string(name='HotelAddress', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  hotelIntroduction?: string(name='HotelIntroduction', position='Body'),
  hotelMember?: string(name='HotelMember', position='Body'),
  hotelService?: string(name='HotelService', position='Body'),
  parkingExpenses: string(name='ParkingExpenses', position='Body'),
  parkingPosition: string(name='ParkingPosition', position='Body'),
  phoneNumber: string(name='PhoneNumber', example='123***', position='Body'),
  wifiName: string(name='WifiName', position='Body'),
  wifiPassword: string(name='WifiPassword', position='Body'),
}

model UpdateBasicInfoQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateBasicInfoQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateBasicInfoQAResponseBody(name='body'),
}

async function updateBasicInfoQA(request: UpdateBasicInfoQARequest): UpdateBasicInfoQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateBasicInfoQA', 'POST', '/v1.0/ip/updateBasicInfoQA', 'json', true, 'form', request);
}

model UpdateCustomQARequest {
  answers?: [ string ](name='Answers', shrink='json', position='Body'),
  customQAId: string(name='CustomQAId', example='1', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  keyWords?: [ string ](name='KeyWords', shrink='json', position='Body'),
  majorQuestion?: string(name='MajorQuestion', example='***', position='Body'),
  supplementaryQuestions?: [ string ](name='SupplementaryQuestions', shrink='json', position='Body'),
}

model UpdateCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***BB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateCustomQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomQAResponseBody(name='body'),
}

async function updateCustomQA(request: UpdateCustomQARequest): UpdateCustomQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateCustomQA', 'POST', '/v1.0/ip/updateCustomQA', 'json', true, 'form', request);
}

model UpdateHotelRequest {
  appKey: string(name='AppKey', example='31342884', position='Body'),
  estOpenTime?: string(name='EstOpenTime', example='2022-02-22 00:00:00', position='Body'),
  hotelAddress?: string(name='HotelAddress', position='Body'),
  hotelEmail?: string(name='HotelEmail', example='a*****@hotel.com', position='Body'),
  hotelId: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f', position='Body'),
  hotelName?: string(name='HotelName', position='Body'),
  phoneNumber?: string(name='PhoneNumber', example='130***', position='Body'),
  relatedPks?: [ string ](name='RelatedPks', shrink='json', position='Body'),
  remark?: string(name='Remark', position='Body'),
  roomNum?: int32(name='RoomNum', example='4', position='Body'),
  tbOpenId: string(name='TbOpenId', example='AAEVK***UE3d3Z2ETwh', position='Body'),
}

model UpdateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46C53AEB-B19C-5C42-B32E-A726979C126F'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateHotelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHotelResponseBody(name='body'),
}

async function updateHotel(request: UpdateHotelRequest): UpdateHotelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHotel', 'POST', '/v1.0/ip/updateHotel', 'json', true, 'form', request);
}

model UpdateHotelAlarmRequest {
  alarms: [ 
    {
      alarmId: long(name='AlarmId', example='1234567'),
      deviceOpenId: string(name='DeviceOpenId', example='Pvk***VTA=='),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId: string(name='UserOpenId', example='mgw/***dHQd'),
    }
  ](name='Alarms', shrink='json', position='Body'),
  hotelId: string(name='HotelId', example='a7a381a668bc485980bed3876a75e013', position='Body'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day', example='20'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='0'),
      month?: int32(name='Month', example='9'),
      year?: int32(name='Year', example='2022'),
    }(name='Once'),
    type?: string(name='Type', description='ONCE, WEEKLY', example='ONCE'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='0'),
    }(name='Weekly'),
  }(name='ScheduleInfo', shrink='json', position='Body'),
}

model UpdateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: int32(name='Result', example='1'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateHotelAlarmResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHotelAlarmResponseBody(name='body'),
}

async function updateHotelAlarm(request: UpdateHotelAlarmRequest): UpdateHotelAlarmResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHotelAlarm', 'POST', '/v1.0/ip/updateHotelAlarm', 'json', true, 'form', request);
}

model UpdateHotelSceneBookItemRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  updateHotelSceneBookReq: {
    icon: string(name='Icon', description='icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
    id?: long(name='Id', example='1'),
    name?: string(name='Name', example='青椒肉丝'),
    price: long(name='Price', example='1250'),
  }(name='UpdateHotelSceneBookReq', description='updateHotelSceneBookReq', shrink='json', position='Query'),
}

model UpdateHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
}

model UpdateHotelSceneBookItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHotelSceneBookItemResponseBody(name='body'),
}

async function updateHotelSceneBookItem(request: UpdateHotelSceneBookItemRequest): UpdateHotelSceneBookItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHotelSceneBookItem', 'POST', '/v1.0/ip/updateHotelSceneBookItem', 'json', true, 'form', request);
}

model UpdateHotelSceneItemRequest {
  hotelId: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1', position='Body'),
  updateHotelSceneOperateReq: {
    isUseTemplateAnswer: boolean(name='IsUseTemplateAnswer', example='true'),
    operateType: string(name='OperateType', example='OPEN'),
  }(name='UpdateHotelSceneOperateReq', description='updateHotelSceneReq', shrink='json', position='Query'),
  updateHotelSceneReq: {
    beyondLimitReply?: string(name='BeyondLimitReply'),
    deliveryMethod?: string(name='DeliveryMethod'),
    dialogueList: [ 
      {
        dialogueId?: string(name='DialogueId', example='335'),
        noAnswer?: string(name='NoAnswer', example='对不起，暂时不提供此物品'),
        noAnswerTemplate?: string(name='NoAnswerTemplate', example='4'),
        process?: int32(name='Process', example='0'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId', description='itemId', example='10337'),
        yesAnswer?: string(name='YesAnswer', example='纸巾1.5元，请问需要么？'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate', example='4'),
      }
    ](name='DialogueList'),
    icon: string(name='Icon', description='icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
    id?: long(name='Id', description='itemID', example='10337'),
    limitNumber?: long(name='LimitNumber'),
    limitSwitch?: int32(name='LimitSwitch'),
    name?: string(name='Name'),
    paymentMethod?: string(name='PaymentMethod'),
    price: long(name='Price', example='165'),
    robotName?: string(name='RobotName'),
    status: string(name='Status', example='已添加'),
  }(name='UpdateHotelSceneReq', description='UpdateHotelSceneReq', shrink='json', position='Query'),
}

model UpdateHotelSceneItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0D0C***67DB'),
  result?: boolean(name='Result', example='true'),
}

model UpdateHotelSceneItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateHotelSceneItemResponseBody(name='body'),
}

async function updateHotelSceneItem(request: UpdateHotelSceneItemRequest): UpdateHotelSceneItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateHotelSceneItem', 'POST', '/v1.0/ip/updateHotelSceneItem', 'json', true, 'form', request);
}

model UpdateMessageTemplateRequest {
  templateDetail?: string(name='TemplateDetail', position='Body'),
  templateId: long(name='TemplateId', example='123123', position='Body'),
  templateName?: string(name='TemplateName', position='Body'),
}

model UpdateMessageTemplateResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateMessageTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMessageTemplateResponseBody(name='body'),
}

async function updateMessageTemplate(request: UpdateMessageTemplateRequest): UpdateMessageTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMessageTemplate', 'POST', '/v1.0/ip/updateMessageTemplate', 'json', true, 'form', request);
}

model UpdateRcuSceneRequest {
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  sceneId: string(name='SceneId', example='yoga', position='Body'),
  sceneRelationExtDTO: {
    corpusList?: [ string ](name='CorpusList'),
    description?: string(name='Description'),
    icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
    name?: string(name='Name'),
  }(name='SceneRelationExtDTO', shrink='json', position='Body'),
}

model UpdateRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3A680F3A-6672-5A47-AB28-12BBCD80C679'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateRcuSceneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateRcuSceneResponseBody(name='body'),
}

async function updateRcuScene(request: UpdateRcuSceneRequest): UpdateRcuSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateRcuScene', 'POST', '/v1.0/ip/updateRcuScene', 'json', true, 'form', request);
}

model UpdateServiceQARequest {
  answer?: string(name='Answer', position='Body'),
  hotelId: string(name='HotelId', example='af7***536', position='Body'),
  serviceQAId?: long(name='ServiceQAId', example='1', position='Body'),
  isActive?: boolean(name='isActive', example='true', position='Body'),
}

model UpdateServiceQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67***6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateServiceQAResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateServiceQAResponseBody(name='body'),
}

async function updateServiceQA(request: UpdateServiceQARequest): UpdateServiceQAResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateServiceQA', 'POST', '/v1.0/ip/updateServiceQA', 'json', true, 'form', request);
}

model UpdateTicketRequest {
  groupKey: string(name='GroupKey', example='2023***93975', position='Body'),
  hotelId: string(name='HotelId', example='520a0c0***5eb', position='Body'),
  status: string(name='Status', example='waiting', position='Body'),
}

model UpdateTicketResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTicketResponseBody(name='body'),
}

async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateTicket', 'POST', '/v1.0/ip/updateTicket', 'json', true, 'form', request);
}

