/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddCartoonHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddCartoonRequest {
  hotelId?: string(name='HotelId', example='520a0***eb'),
  startVideoMd5?: string(name='StartVideoMd5', example='40c804***697'),
  startVideoUrl?: string(name='StartVideoUrl', example='https://***.mp4'),
}

model AddCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddCartoonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCartoonResponseBody(name='body'),
}

async function addCartoonWithOptions(request: AddCartoonRequest, headers: AddCartoonHeaders, runtime: Util.RuntimeOptions): AddCartoonResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.startVideoMd5)) {
    body['StartVideoMd5'] = request.startVideoMd5;
  }
  if (!Util.isUnset(request.startVideoUrl)) {
    body['StartVideoUrl'] = request.startVideoUrl;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddCartoon',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addCartoon`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCartoon(request: AddCartoonRequest): AddCartoonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddCartoonHeaders{};
  return addCartoonWithOptions(request, headers, runtime);
}

model AddCustomQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddCustomQARequest {
  answers?: [ string ](name='Answers'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
  keyWords?: [ string ](name='KeyWords'),
  majorQuestion?: string(name='MajorQuestion', example='***'),
  supplementaryQuestions?: [ string ](name='SupplementaryQuestions'),
}

model AddCustomQAShrinkRequest {
  answersShrink?: string(name='Answers'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
  keyWordsShrink?: string(name='KeyWords'),
  majorQuestion?: string(name='MajorQuestion', example='***'),
  supplementaryQuestionsShrink?: string(name='SupplementaryQuestions'),
}

model AddCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddCustomQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddCustomQAResponseBody(name='body'),
}

async function addCustomQAWithOptions(tmpReq: AddCustomQARequest, headers: AddCustomQAHeaders, runtime: Util.RuntimeOptions): AddCustomQAResponse {
  Util.validateModel(tmpReq);
  var request = new AddCustomQAShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.answers)) {
    request.answersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.answers, 'Answers', 'json');
  }
  if (!Util.isUnset(tmpReq.keyWords)) {
    request.keyWordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keyWords, 'KeyWords', 'json');
  }
  if (!Util.isUnset(tmpReq.supplementaryQuestions)) {
    request.supplementaryQuestionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.supplementaryQuestions, 'SupplementaryQuestions', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.answersShrink)) {
    body['Answers'] = request.answersShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.keyWordsShrink)) {
    body['KeyWords'] = request.keyWordsShrink;
  }
  if (!Util.isUnset(request.majorQuestion)) {
    body['MajorQuestion'] = request.majorQuestion;
  }
  if (!Util.isUnset(request.supplementaryQuestionsShrink)) {
    body['SupplementaryQuestions'] = request.supplementaryQuestionsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddCustomQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addCustomQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addCustomQA(request: AddCustomQARequest): AddCustomQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddCustomQAHeaders{};
  return addCustomQAWithOptions(request, headers, runtime);
}

model AddMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddMessageTemplateRequest {
  templateDetail?: string(name='TemplateDetail', example='这是${hotel}的一个测试模板'),
  templateName?: string(name='TemplateName', example='测试模板'),
}

model AddMessageTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result', example='11'),
}

model AddMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMessageTemplateResponseBody(name='body'),
}

async function addMessageTemplateWithOptions(request: AddMessageTemplateRequest, headers: AddMessageTemplateHeaders, runtime: Util.RuntimeOptions): AddMessageTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateDetail)) {
    body['TemplateDetail'] = request.templateDetail;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addMessageTemplate(request: AddMessageTemplateRequest): AddMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddMessageTemplateHeaders{};
  return addMessageTemplateWithOptions(request, headers, runtime);
}

model AddOrUpdateDisPlayModesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddOrUpdateDisPlayModesRequest {
  hotelDeviceModeList?: [ string ](name='HotelDeviceModeList'),
  hotelId?: string(name='HotelId', example='a7***83'),
}

model AddOrUpdateDisPlayModesShrinkRequest {
  hotelDeviceModeListShrink?: string(name='HotelDeviceModeList'),
  hotelId?: string(name='HotelId', example='a7***83'),
}

model AddOrUpdateDisPlayModesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateDisPlayModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddOrUpdateDisPlayModesResponseBody(name='body'),
}

async function addOrUpdateDisPlayModesWithOptions(tmpReq: AddOrUpdateDisPlayModesRequest, headers: AddOrUpdateDisPlayModesHeaders, runtime: Util.RuntimeOptions): AddOrUpdateDisPlayModesResponse {
  Util.validateModel(tmpReq);
  var request = new AddOrUpdateDisPlayModesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelDeviceModeList)) {
    request.hotelDeviceModeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelDeviceModeList, 'HotelDeviceModeList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelDeviceModeListShrink)) {
    body['HotelDeviceModeList'] = request.hotelDeviceModeListShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddOrUpdateDisPlayModes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addOrUpdateDisPlayModes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addOrUpdateDisPlayModes(request: AddOrUpdateDisPlayModesRequest): AddOrUpdateDisPlayModesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddOrUpdateDisPlayModesHeaders{};
  return addOrUpdateDisPlayModesWithOptions(request, headers, runtime);
}

model AddOrUpdateHotelSettingHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddOrUpdateHotelSettingRequest {
  hotelDeviceModeList?: [ string ](name='HotelDeviceModeList'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
  hotelScreenSaver?: {
    screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='https://a****jpg'),
    screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
  }(name='HotelScreenSaver'),
  nightMode?: {
    defaultBright?: string(name='DefaultBright'),
    defaultVolume?: string(name='DefaultVolume'),
    enable?: boolean(name='Enable', example='true'),
    end?: string(name='End', example='22:00'),
    standbyAction?: string(name='StandbyAction', example='screenoff'),
    start?: string(name='Start', example='7:00'),
  }(name='NightMode'),
  settingType?: string(name='SettingType', example='SCREENSAVER'),
  value?: string(name='Value'),
}

model AddOrUpdateHotelSettingShrinkRequest {
  hotelDeviceModeListShrink?: string(name='HotelDeviceModeList'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
  hotelScreenSaverShrink?: string(name='HotelScreenSaver'),
  nightModeShrink?: string(name='NightMode'),
  settingType?: string(name='SettingType', example='SCREENSAVER'),
  value?: string(name='Value'),
}

model AddOrUpdateHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateHotelSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddOrUpdateHotelSettingResponseBody(name='body'),
}

async function addOrUpdateHotelSettingWithOptions(tmpReq: AddOrUpdateHotelSettingRequest, headers: AddOrUpdateHotelSettingHeaders, runtime: Util.RuntimeOptions): AddOrUpdateHotelSettingResponse {
  Util.validateModel(tmpReq);
  var request = new AddOrUpdateHotelSettingShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelDeviceModeList)) {
    request.hotelDeviceModeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelDeviceModeList, 'HotelDeviceModeList', 'json');
  }
  if (!Util.isUnset(tmpReq.hotelScreenSaver)) {
    request.hotelScreenSaverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelScreenSaver, 'HotelScreenSaver', 'json');
  }
  if (!Util.isUnset(tmpReq.nightMode)) {
    request.nightModeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.nightMode, 'NightMode', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelDeviceModeListShrink)) {
    body['HotelDeviceModeList'] = request.hotelDeviceModeListShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.hotelScreenSaverShrink)) {
    body['HotelScreenSaver'] = request.hotelScreenSaverShrink;
  }
  if (!Util.isUnset(request.nightModeShrink)) {
    body['NightMode'] = request.nightModeShrink;
  }
  if (!Util.isUnset(request.settingType)) {
    body['SettingType'] = request.settingType;
  }
  if (!Util.isUnset(request.value)) {
    body['Value'] = request.value;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddOrUpdateHotelSetting',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addOrUpdateHotelSetting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addOrUpdateHotelSetting(request: AddOrUpdateHotelSettingRequest): AddOrUpdateHotelSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddOrUpdateHotelSettingHeaders{};
  return addOrUpdateHotelSettingWithOptions(request, headers, runtime);
}

model AddOrUpdateScreenSaverHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddOrUpdateScreenSaverRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  hotelScreenSaver?: {
    screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='xxx.png'),
    screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
  }(name='HotelScreenSaver'),
}

model AddOrUpdateScreenSaverShrinkRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  hotelScreenSaverShrink?: string(name='HotelScreenSaver'),
}

model AddOrUpdateScreenSaverResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4EED***9661'),
  result?: boolean(name='Result', example='True'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateScreenSaverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddOrUpdateScreenSaverResponseBody(name='body'),
}

async function addOrUpdateScreenSaverWithOptions(tmpReq: AddOrUpdateScreenSaverRequest, headers: AddOrUpdateScreenSaverHeaders, runtime: Util.RuntimeOptions): AddOrUpdateScreenSaverResponse {
  Util.validateModel(tmpReq);
  var request = new AddOrUpdateScreenSaverShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.hotelScreenSaver)) {
    request.hotelScreenSaverShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.hotelScreenSaver, 'HotelScreenSaver', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.hotelScreenSaverShrink)) {
    body['HotelScreenSaver'] = request.hotelScreenSaverShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddOrUpdateScreenSaver',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addOrUpdateScreenSaver`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addOrUpdateScreenSaver(request: AddOrUpdateScreenSaverRequest): AddOrUpdateScreenSaverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddOrUpdateScreenSaverHeaders{};
  return addOrUpdateScreenSaverWithOptions(request, headers, runtime);
}

model AddOrUpdateWelcomeTextHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddOrUpdateWelcomeTextRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  musicUrl?: string(name='MusicUrl', example='http://ailabsaicloudservice.alicdn.com/tmp/a.wav'),
  welcomeText?: string(name='WelcomeText'),
}

model AddOrUpdateWelcomeTextResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model AddOrUpdateWelcomeTextResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddOrUpdateWelcomeTextResponseBody(name='body'),
}

async function addOrUpdateWelcomeTextWithOptions(request: AddOrUpdateWelcomeTextRequest, headers: AddOrUpdateWelcomeTextHeaders, runtime: Util.RuntimeOptions): AddOrUpdateWelcomeTextResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.musicUrl)) {
    body['MusicUrl'] = request.musicUrl;
  }
  if (!Util.isUnset(request.welcomeText)) {
    body['WelcomeText'] = request.welcomeText;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddOrUpdateWelcomeText',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addOrUpdateWelcomeText`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addOrUpdateWelcomeText(request: AddOrUpdateWelcomeTextRequest): AddOrUpdateWelcomeTextResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddOrUpdateWelcomeTextHeaders{};
  return addOrUpdateWelcomeTextWithOptions(request, headers, runtime);
}

model AuditHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AuditHotelRequest {
  auditHotelReq?: {
    auditOpinion?: string(name='AuditOpinion', example='同意'),
    hotelId?: string(name='HotelId', example='80d84ea8ed9e422fbad52715c8fc56f1'),
    status?: int32(name='Status', example='1'),
  }(name='AuditHotelReq'),
}

model AuditHotelShrinkRequest {
  auditHotelReqShrink?: string(name='AuditHotelReq'),
}

model AuditHotelResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='RequestId'),
  result?: boolean(name='Result'),
}

model AuditHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuditHotelResponseBody(name='body'),
}

async function auditHotelWithOptions(tmpReq: AuditHotelRequest, headers: AuditHotelHeaders, runtime: Util.RuntimeOptions): AuditHotelResponse {
  Util.validateModel(tmpReq);
  var request = new AuditHotelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.auditHotelReq)) {
    request.auditHotelReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.auditHotelReq, 'AuditHotelReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.auditHotelReqShrink)) {
    query['AuditHotelReq'] = request.auditHotelReqShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuditHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/auditHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function auditHotel(request: AuditHotelRequest): AuditHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AuditHotelHeaders{};
  return auditHotelWithOptions(request, headers, runtime);
}

model BatchAddHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchAddHotelRoomRequest {
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchAddHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchAddHotelRoomResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchAddHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddHotelRoomResponseBody(name='body'),
}

async function batchAddHotelRoomWithOptions(tmpReq: BatchAddHotelRoomRequest, headers: BatchAddHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchAddHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchAddHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchAddHotelRoom(request: BatchAddHotelRoomRequest): BatchAddHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchAddHotelRoomHeaders{};
  return batchAddHotelRoomWithOptions(request, headers, runtime);
}

model BatchDeleteHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchDeleteHotelRoomRequest {
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchDeleteHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchDeleteHotelRoomResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchDeleteHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteHotelRoomResponseBody(name='body'),
}

async function batchDeleteHotelRoomWithOptions(tmpReq: BatchDeleteHotelRoomRequest, headers: BatchDeleteHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchDeleteHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchDeleteHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function batchDeleteHotelRoom(request: BatchDeleteHotelRoomRequest): BatchDeleteHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchDeleteHotelRoomHeaders{};
  return batchDeleteHotelRoomWithOptions(request, headers, runtime);
}

model CheckoutWithAKHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CheckoutWithAKRequest {
  hotelId?: string(name='HotelId', example='a7***83'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model CheckoutWithAKResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CheckoutWithAKResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CheckoutWithAKResponseBody(name='body'),
}

async function checkoutWithAKWithOptions(request: CheckoutWithAKRequest, headers: CheckoutWithAKHeaders, runtime: Util.RuntimeOptions): CheckoutWithAKResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckoutWithAK',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/checkoutWithAK`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkoutWithAK(request: CheckoutWithAKRequest): CheckoutWithAKResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CheckoutWithAKHeaders{};
  return checkoutWithAKWithOptions(request, headers, runtime);
}

model ChildAccountAuthHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ChildAccountAuthRequest {
  account?: string(name='Account', example='lee'),
  appKey?: string(name='AppKey', example='30471753'),
  hotelId?: string(name='HotelId', example='a7***83'),
  tbOpenId?: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh'),
}

model ChildAccountAuthResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3DB51A10-327C-58D3-91DF-3A5A471C51E7'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ChildAccountAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChildAccountAuthResponseBody(name='body'),
}

async function childAccountAuthWithOptions(request: ChildAccountAuthRequest, headers: ChildAccountAuthHeaders, runtime: Util.RuntimeOptions): ChildAccountAuthResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChildAccountAuth',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/childAccountAuth`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function childAccountAuth(request: ChildAccountAuthRequest): ChildAccountAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChildAccountAuthHeaders{};
  return childAccountAuthWithOptions(request, headers, runtime);
}

model ControlRoomDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ControlRoomDeviceRequest {
  cmd?: string(name='Cmd', example='thing.attribute.set
thing.attribute.adjust'),
  deviceIndex?: int32(name='DeviceIndex'),
  deviceNumber?: string(name='DeviceNumber', example='INFRARED49122575595'),
  hotelId?: string(name='HotelId', example='a7***83'),
  properties?: map[string]string(name='Properties'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model ControlRoomDeviceShrinkRequest {
  cmd?: string(name='Cmd', example='thing.attribute.set
thing.attribute.adjust'),
  deviceIndex?: int32(name='DeviceIndex'),
  deviceNumber?: string(name='DeviceNumber', example='INFRARED49122575595'),
  hotelId?: string(name='HotelId', example='a7***83'),
  propertiesShrink?: string(name='Properties'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model ControlRoomDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: {
    message?: string(name='Message', example='success'),
    status?: int32(name='Status'),
  }(name='Result'),
}

model ControlRoomDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ControlRoomDeviceResponseBody(name='body'),
}

async function controlRoomDeviceWithOptions(tmpReq: ControlRoomDeviceRequest, headers: ControlRoomDeviceHeaders, runtime: Util.RuntimeOptions): ControlRoomDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new ControlRoomDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.properties)) {
    request.propertiesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.properties, 'Properties', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.cmd)) {
    body['Cmd'] = request.cmd;
  }
  if (!Util.isUnset(request.deviceIndex)) {
    body['DeviceIndex'] = request.deviceIndex;
  }
  if (!Util.isUnset(request.deviceNumber)) {
    body['DeviceNumber'] = request.deviceNumber;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.propertiesShrink)) {
    body['Properties'] = request.propertiesShrink;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ControlRoomDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/controlRoomDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function controlRoomDevice(request: ControlRoomDeviceRequest): ControlRoomDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ControlRoomDeviceHeaders{};
  return controlRoomDeviceWithOptions(request, headers, runtime);
}

model CreateHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateHotelRequest {
  appKey?: string(name='AppKey', example='333566791'),
  estOpenTime?: string(name='EstOpenTime', example='2022-10-1 00:00:00'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail', example='test@hotel.com'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber', example='13xxxxxxxx'),
  relatedPk?: string(name='RelatedPk', example='jTO****Rw'),
  relatedPks?: [ string ](name='RelatedPks', description='酒店关联产品列表'),
  remark?: string(name='Remark', example='test'),
  roomNum?: int32(name='RoomNum', example='100'),
  tbOpenId?: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh'),
}

model CreateHotelShrinkRequest {
  appKey?: string(name='AppKey', example='333566791'),
  estOpenTime?: string(name='EstOpenTime', example='2022-10-1 00:00:00'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail', example='test@hotel.com'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber', example='13xxxxxxxx'),
  relatedPk?: string(name='RelatedPk', example='jTO****Rw'),
  relatedPksShrink?: string(name='RelatedPks', description='酒店关联产品列表'),
  remark?: string(name='Remark', example='test'),
  roomNum?: int32(name='RoomNum', example='100'),
  tbOpenId?: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh'),
}

model CreateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: string(name='Result', example='5abfd9***2c38661'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHotelResponseBody(name='body'),
}

async function createHotelWithOptions(tmpReq: CreateHotelRequest, headers: CreateHotelHeaders, runtime: Util.RuntimeOptions): CreateHotelResponse {
  Util.validateModel(tmpReq);
  var request = new CreateHotelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedPks)) {
    request.relatedPksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedPks, 'RelatedPks', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.estOpenTime)) {
    body['EstOpenTime'] = request.estOpenTime;
  }
  if (!Util.isUnset(request.hotelAddress)) {
    body['HotelAddress'] = request.hotelAddress;
  }
  if (!Util.isUnset(request.hotelEmail)) {
    body['HotelEmail'] = request.hotelEmail;
  }
  if (!Util.isUnset(request.hotelName)) {
    body['HotelName'] = request.hotelName;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.relatedPk)) {
    body['RelatedPk'] = request.relatedPk;
  }
  if (!Util.isUnset(request.relatedPksShrink)) {
    body['RelatedPks'] = request.relatedPksShrink;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['RoomNum'] = request.roomNum;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHotel(request: CreateHotelRequest): CreateHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateHotelHeaders{};
  return createHotelWithOptions(request, headers, runtime);
}

model CreateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateHotelAlarmRequest {
  hotelId?: string(name='HotelId', example='cf2446fc9d144c85aaee4f9ae20a96e7'),
  musicType?: string(name='MusicType', example='DOU_YIN'),
  rooms?: [ string ](name='Rooms'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day', example='20'),
      hour?: int32(name='Hour', example='19'),
      minute?: int32(name='Minute', example='30'),
      month?: int32(name='Month', example='9'),
      year?: int32(name='Year', example='2022'),
    }(name='Once'),
    type?: string(name='Type', description='ONCE, WEEKLY'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='30'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model CreateHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId', example='cf2446fc9d144c85aaee4f9ae20a96e7'),
  musicType?: string(name='MusicType', example='DOU_YIN'),
  roomsShrink?: string(name='Rooms'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model CreateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***86881'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId', example='94'),
      deviceOpenId?: string(name='DeviceOpenId', example='Pvk***TA=='),
      failMsg?: string(name='FailMsg'),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId?: string(name='UserOpenId', example='mg***Qd'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHotelAlarmResponseBody(name='body'),
}

async function createHotelAlarmWithOptions(tmpReq: CreateHotelAlarmRequest, headers: CreateHotelAlarmHeaders, runtime: Util.RuntimeOptions): CreateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new CreateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.musicType)) {
    body['MusicType'] = request.musicType;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createHotelAlarm(request: CreateHotelAlarmRequest): CreateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateHotelAlarmHeaders{};
  return createHotelAlarmWithOptions(request, headers, runtime);
}

model CreateRcuSceneHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateRcuSceneRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  sceneId?: string(name='SceneId', example='yoga'),
  sceneRelationExtDTO?: {
    corpusList?: [ string ](name='CorpusList'),
    description?: string(name='Description'),
    icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
    name?: string(name='Name'),
  }(name='SceneRelationExtDTO'),
}

model CreateRcuSceneShrinkRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  sceneId?: string(name='SceneId', example='yoga'),
  sceneRelationExtDTOShrink?: string(name='SceneRelationExtDTO'),
}

model CreateRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='844BA5CE-E30A-53CB-8A11-DE1F344C846D'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model CreateRcuSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateRcuSceneResponseBody(name='body'),
}

async function createRcuSceneWithOptions(tmpReq: CreateRcuSceneRequest, headers: CreateRcuSceneHeaders, runtime: Util.RuntimeOptions): CreateRcuSceneResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRcuSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sceneRelationExtDTO)) {
    request.sceneRelationExtDTOShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneRelationExtDTO, 'SceneRelationExtDTO', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.sceneRelationExtDTOShrink)) {
    body['SceneRelationExtDTO'] = request.sceneRelationExtDTOShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRcuScene',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createRcuScene`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRcuScene(request: CreateRcuSceneRequest): CreateRcuSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateRcuSceneHeaders{};
  return createRcuSceneWithOptions(request, headers, runtime);
}

model DeleteCartoonHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteCartoonRequest {
  hotelId?: string(name='HotelId', example='a7***83'),
}

model DeleteCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteCartoonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCartoonResponseBody(name='body'),
}

async function deleteCartoonWithOptions(request: DeleteCartoonRequest, headers: DeleteCartoonHeaders, runtime: Util.RuntimeOptions): DeleteCartoonResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCartoon',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteCartoon`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCartoon(request: DeleteCartoonRequest): DeleteCartoonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteCartoonHeaders{};
  return deleteCartoonWithOptions(request, headers, runtime);
}

model DeleteCustomQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteCustomQARequest {
  customQAIds?: [ string ](name='CustomQAIds'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
}

model DeleteCustomQAShrinkRequest {
  customQAIdsShrink?: string(name='CustomQAIds'),
  hotelId?: string(name='HotelId', example='a7a3***013'),
}

model DeleteCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteCustomQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCustomQAResponseBody(name='body'),
}

async function deleteCustomQAWithOptions(tmpReq: DeleteCustomQARequest, headers: DeleteCustomQAHeaders, runtime: Util.RuntimeOptions): DeleteCustomQAResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteCustomQAShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.customQAIds)) {
    request.customQAIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.customQAIds, 'CustomQAIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.customQAIdsShrink)) {
    body['CustomQAIds'] = request.customQAIdsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCustomQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteCustomQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCustomQA(request: DeleteCustomQARequest): DeleteCustomQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteCustomQAHeaders{};
  return deleteCustomQAWithOptions(request, headers, runtime);
}

model DeleteHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId', example='5029'),
      deviceOpenId?: string(name='DeviceOpenId', example='PvkB***TA=='),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId?: string(name='UserOpenId', example='mgw/k***HQd'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId', example='a7***83'),
}

model DeleteHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId', example='a7***83'),
}

model DeleteHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: int32(name='Result', example='1'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelAlarmResponseBody(name='body'),
}

async function deleteHotelAlarmWithOptions(tmpReq: DeleteHotelAlarmRequest, headers: DeleteHotelAlarmHeaders, runtime: Util.RuntimeOptions): DeleteHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHotelAlarm(request: DeleteHotelAlarmRequest): DeleteHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelAlarmHeaders{};
  return deleteHotelAlarmWithOptions(request, headers, runtime);
}

model DeleteHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelSceneBookItemRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  id?: long(name='Id', example='11823'),
  name?: string(name='Name'),
}

model DeleteHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
}

model DeleteHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelSceneBookItemResponseBody(name='body'),
}

async function deleteHotelSceneBookItemWithOptions(request: DeleteHotelSceneBookItemRequest, headers: DeleteHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): DeleteHotelSceneBookItemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHotelSceneBookItem(request: DeleteHotelSceneBookItemRequest): DeleteHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelSceneBookItemHeaders{};
  return deleteHotelSceneBookItemWithOptions(request, headers, runtime);
}

model DeleteHotelSettingHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelSettingRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  settingType?: string(name='SettingType', example='SCREENSAVER'),
}

model DeleteHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67****BB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteHotelSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelSettingResponseBody(name='body'),
}

async function deleteHotelSettingWithOptions(request: DeleteHotelSettingRequest, headers: DeleteHotelSettingHeaders, runtime: Util.RuntimeOptions): DeleteHotelSettingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.settingType)) {
    body['SettingType'] = request.settingType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelSetting',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelSetting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteHotelSetting(request: DeleteHotelSettingRequest): DeleteHotelSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelSettingHeaders{};
  return deleteHotelSettingWithOptions(request, headers, runtime);
}

model DeleteMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteMessageTemplateRequest {
  templateId?: long(name='TemplateId', example='234'),
}

model DeleteMessageTemplateResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteMessageTemplateResponseBody(name='body'),
}

async function deleteMessageTemplateWithOptions(request: DeleteMessageTemplateRequest, headers: DeleteMessageTemplateHeaders, runtime: Util.RuntimeOptions): DeleteMessageTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteMessageTemplate(request: DeleteMessageTemplateRequest): DeleteMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteMessageTemplateHeaders{};
  return deleteMessageTemplateWithOptions(request, headers, runtime);
}

model DeleteRcuSceneHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteRcuSceneRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  sceneId?: string(name='SceneId', example='yoga'),
}

model DeleteRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='4F61A7B7-409C-525D-AFDB-238A4E88925A'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model DeleteRcuSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteRcuSceneResponseBody(name='body'),
}

async function deleteRcuSceneWithOptions(request: DeleteRcuSceneRequest, headers: DeleteRcuSceneHeaders, runtime: Util.RuntimeOptions): DeleteRcuSceneResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRcuScene',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteRcuScene`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRcuScene(request: DeleteRcuSceneRequest): DeleteRcuSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteRcuSceneHeaders{};
  return deleteRcuSceneWithOptions(request, headers, runtime);
}

model DeviceControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeviceControlRequest {
  payload?: {
    category?: string(name='Category', example='aircondition'),
    cmd?: string(name='Cmd', example='open'),
    deviceNumber?: string(name='DeviceNumber', example='air_condition'),
    extendInfo?: string(name='ExtendInfo', example='{}'),
    location?: string(name='Location', example='room'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='HOFF****my7Iw='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo'),
}

model DeviceControlShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='43***28C-A810-5***-8747-EC226A086881'),
  result?: {
    status?: string(name='Status', example='200'),
  }(name='Result'),
}

model DeviceControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeviceControlResponseBody(name='body'),
}

async function deviceControlWithOptions(tmpReq: DeviceControlRequest, headers: DeviceControlHeaders, runtime: Util.RuntimeOptions): DeviceControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeviceControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeviceControl',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deviceControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeviceControlHeaders{};
  return deviceControlWithOptions(request, headers, runtime);
}

model GetBasicInfoQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetBasicInfoQARequest {
  hotelId?: string(name='HotelId', example='a7***83'),
}

model GetBasicInfoQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: {
    checkInTime?: string(name='CheckInTime', example='11:11'),
    checkOutTime?: string(name='CheckOutTime', example='11:11'),
    hotelAddress?: string(name='HotelAddress'),
    hotelIntroduction?: string(name='HotelIntroduction'),
    hotelMember?: string(name='HotelMember'),
    hotelService?: string(name='HotelService'),
    parkingExpenses?: string(name='ParkingExpenses'),
    parkingPosition?: string(name='ParkingPosition'),
    phoneNumber?: string(name='PhoneNumber', example='123***'),
    wifiName?: string(name='WifiName'),
    wifiPassword?: string(name='WifiPassword'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetBasicInfoQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBasicInfoQAResponseBody(name='body'),
}

async function getBasicInfoQAWithOptions(request: GetBasicInfoQARequest, headers: GetBasicInfoQAHeaders, runtime: Util.RuntimeOptions): GetBasicInfoQAResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetBasicInfoQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getBasicInfoQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBasicInfoQA(request: GetBasicInfoQARequest): GetBasicInfoQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetBasicInfoQAHeaders{};
  return getBasicInfoQAWithOptions(request, headers, runtime);
}

model GetCartoonHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetCartoonRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
}

model GetCartoonResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    startVideoMd5?: string(name='StartVideoMd5', example='https://ai***.mp4'),
    startVideoUrl?: string(name='StartVideoUrl', example='40c8***97'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetCartoonResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCartoonResponseBody(name='body'),
}

async function getCartoonWithOptions(request: GetCartoonRequest, headers: GetCartoonHeaders, runtime: Util.RuntimeOptions): GetCartoonResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetCartoon',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getCartoon`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCartoon(request: GetCartoonRequest): GetCartoonResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetCartoonHeaders{};
  return getCartoonWithOptions(request, headers, runtime);
}

model GetHotelContactByGenieDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelContactByGenieDeviceRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1***2'),
  }(name='UserInfo'),
}

model GetHotelContactByGenieDeviceShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelContactByGenieDeviceResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: {
    expireAt?: string(name='ExpireAt', example='1649472283046'),
    gmtCreate?: string(name='GmtCreate', example='2022-07-21 20:02:12'),
    gmtModified?: string(name='GmtModified', example='2022-07-27 14:06:27'),
    hotelId?: string(name='HotelId', example='a7***83'),
    icon?: string(name='Icon', example='xxx.icon'),
    id?: long(name='Id', example='1'),
    name?: string(name='Name'),
    number?: string(name='Number', example='101'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type', example='group'),
    uuid?: string(name='Uuid', example='2E57***D45F9'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactByGenieDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelContactByGenieDeviceResponseBody(name='body'),
}

async function getHotelContactByGenieDeviceWithOptions(tmpReq: GetHotelContactByGenieDeviceRequest, headers: GetHotelContactByGenieDeviceHeaders, runtime: Util.RuntimeOptions): GetHotelContactByGenieDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelContactByGenieDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelContactByGenieDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelContactByGenieDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelContactByGenieDevice(request: GetHotelContactByGenieDeviceRequest): GetHotelContactByGenieDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelContactByGenieDeviceHeaders{};
  return getHotelContactByGenieDeviceWithOptions(request, headers, runtime);
}

model GetHotelContactByNumberHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelContactByNumberRequest {
  number?: string(name='Number', example='101'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo'),
}

model GetHotelContactByNumberShrinkRequest {
  number?: string(name='Number', example='101'),
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelContactByNumberResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    expireAt?: string(name='ExpireAt', example='1649316479098'),
    hotelId?: string(name='HotelId', example='a7***83'),
    icon?: string(name='Icon', example='xxx.icon'),
    name?: string(name='Name'),
    number?: string(name='Number', example='101'),
    status?: int32(name='Status', example='1'),
    type?: string(name='Type', example='group'),
    uuid?: string(name='Uuid', example='2E57***D45F9'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactByNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelContactByNumberResponseBody(name='body'),
}

async function getHotelContactByNumberWithOptions(tmpReq: GetHotelContactByNumberRequest, headers: GetHotelContactByNumberHeaders, runtime: Util.RuntimeOptions): GetHotelContactByNumberResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelContactByNumberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.number)) {
    body['Number'] = request.number;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelContactByNumber',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelContactByNumber`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelContactByNumber(request: GetHotelContactByNumberRequest): GetHotelContactByNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelContactByNumberHeaders{};
  return getHotelContactByNumberWithOptions(request, headers, runtime);
}

model GetHotelContactsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelContactsRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo'),
}

model GetHotelContactsShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelContactsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      expireAt?: string(name='ExpireAt', example='1649472283046'),
      hotelId?: string(name='HotelId', example='cf24***96e7'),
      icon?: string(name='Icon', example='xxx.icon'),
      name?: string(name='Name'),
      number?: string(name='Number', example='101'),
      status?: int32(name='Status', example='1'),
      type?: string(name='Type', example='group'),
      uuid?: string(name='Uuid', example='0862***A809'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelContactsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelContactsResponseBody(name='body'),
}

async function getHotelContactsWithOptions(tmpReq: GetHotelContactsRequest, headers: GetHotelContactsHeaders, runtime: Util.RuntimeOptions): GetHotelContactsResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelContactsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelContacts',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelContacts`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelContacts(request: GetHotelContactsRequest): GetHotelContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelContactsHeaders{};
  return getHotelContactsWithOptions(request, headers, runtime);
}

model GetHotelHomeBackImageAndModesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelHomeBackImageAndModesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='1248494721591392955'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='394450FC-9035-1B7C-8829-BC88832473FC'),
  result?: {
    backgroundImage?: string(name='BackgroundImage', example='https://ailabs.alibabausercontent.com/platform/3d4fe6d66ec49d9789635f66627f0339/welcome_audios/976210a6532150f49c2677a8b7dbc105/l6fspbhn.jpg'),
    hotelName?: string(name='HotelName', example='宣雍测试橙蜂酒店'),
    modeList?: [ 
      {
        cnName?: string(name='CnName', example='浪漫模式'),
        code?: string(name='Code', example='romantic'),
        icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/langman.png'),
      }
    ](name='ModeList'),
  }(name='Result'),
}

model GetHotelHomeBackImageAndModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelHomeBackImageAndModesResponseBody(name='body'),
}

async function getHotelHomeBackImageAndModesWithOptions(tmpReq: GetHotelHomeBackImageAndModesRequest, headers: GetHotelHomeBackImageAndModesHeaders, runtime: Util.RuntimeOptions): GetHotelHomeBackImageAndModesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelHomeBackImageAndModesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelHomeBackImageAndModes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelHomeBackImageAndModes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelHomeBackImageAndModes(request: GetHotelHomeBackImageAndModesRequest): GetHotelHomeBackImageAndModesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelHomeBackImageAndModesHeaders{};
  return getHotelHomeBackImageAndModesWithOptions(request, headers, runtime);
}

model GetHotelNoticeHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelNoticeRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1'),
  }(name='UserInfo'),
}

model GetHotelNoticeShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelNoticeResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: string(name='Result', example='test notice...'),
}

model GetHotelNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelNoticeResponseBody(name='body'),
}

async function getHotelNoticeWithOptions(tmpReq: GetHotelNoticeRequest, headers: GetHotelNoticeHeaders, runtime: Util.RuntimeOptions): GetHotelNoticeResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelNoticeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelNotice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelNotice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelNotice(request: GetHotelNoticeRequest): GetHotelNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelNoticeHeaders{};
  return getHotelNoticeWithOptions(request, headers, runtime);
}

model GetHotelNoticeV2Headers {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelNoticeV2Request {
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo'),
}

model GetHotelNoticeV2ShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelNoticeV2ResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0D0C***67DB'),
  result?: {
    content?: string(name='Content'),
    hotelId?: string(name='HotelId', example='a7***83'),
    title?: string(name='Title'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelNoticeV2Response = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelNoticeV2ResponseBody(name='body'),
}

async function getHotelNoticeV2WithOptions(tmpReq: GetHotelNoticeV2Request, headers: GetHotelNoticeV2Headers, runtime: Util.RuntimeOptions): GetHotelNoticeV2Response {
  Util.validateModel(tmpReq);
  var request = new GetHotelNoticeV2ShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelNoticeV2',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelNoticeV2`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelNoticeV2(request: GetHotelNoticeV2Request): GetHotelNoticeV2Response {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelNoticeV2Headers{};
  return getHotelNoticeV2WithOptions(request, headers, runtime);
}

model GetHotelOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelOrderDetailRequest {
  payload?: {
    orderNo?: string(name='OrderNo', example='20220714150702000168270112410630'),
  }(name='Payload'),
}

model GetHotelOrderDetailShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model GetHotelOrderDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='6F579407-13C4-1708-AFA2-B657BE5FE8F5'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt', example='200'),
      gmtCreate?: long(name='GmtCreate', example='1659952892000'),
      itemUrl?: string(name='ItemUrl', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/weixiu/dianqilei/chuanglian.png'),
      name?: string(name='Name', example='窗帘'),
      quantity?: long(name='Quantity', example='1'),
    }
  ](name='Result'),
}

model GetHotelOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelOrderDetailResponseBody(name='body'),
}

async function getHotelOrderDetailWithOptions(tmpReq: GetHotelOrderDetailRequest, headers: GetHotelOrderDetailHeaders, runtime: Util.RuntimeOptions): GetHotelOrderDetailResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelOrderDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelOrderDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelOrderDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelOrderDetail(request: GetHotelOrderDetailRequest): GetHotelOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelOrderDetailHeaders{};
  return getHotelOrderDetailWithOptions(request, headers, runtime);
}

model GetHotelRoomDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelRoomDeviceRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model GetHotelRoomDeviceResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='vrehvuifdsgrts'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion', example='1.0.0-release'),
      hotelId?: string(name='HotelId', example='af7***536'),
      mac?: string(name='Mac', example='aa:aa:aa:aa:aa:aa'),
      onlineStatus?: int32(name='OnlineStatus', example='1'),
      roomNo?: string(name='RoomNo', example='1211'),
      sn?: string(name='Sn', example='dsfdsfrgreg'),
    }
  ](name='Result'),
}

model GetHotelRoomDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelRoomDeviceResponseBody(name='body'),
}

async function getHotelRoomDeviceWithOptions(request: GetHotelRoomDeviceRequest, headers: GetHotelRoomDeviceHeaders, runtime: Util.RuntimeOptions): GetHotelRoomDeviceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelRoomDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelRoomDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelRoomDevice(request: GetHotelRoomDeviceRequest): GetHotelRoomDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelRoomDeviceHeaders{};
  return getHotelRoomDeviceWithOptions(request, headers, runtime);
}

model GetHotelSampleUtterancesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSampleUtterancesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelSampleUtterancesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelSampleUtterancesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model GetHotelSampleUtterancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSampleUtterancesResponseBody(name='body'),
}

async function getHotelSampleUtterancesWithOptions(tmpReq: GetHotelSampleUtterancesRequest, headers: GetHotelSampleUtterancesHeaders, runtime: Util.RuntimeOptions): GetHotelSampleUtterancesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelSampleUtterancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSampleUtterances',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSampleUtterances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelSampleUtterances(request: GetHotelSampleUtterancesRequest): GetHotelSampleUtterancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSampleUtterancesHeaders{};
  return getHotelSampleUtterancesWithOptions(request, headers, runtime);
}

model GetHotelSceneItemDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSceneItemDetailRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  itemId?: long(name='ItemId', example='10336'),
  name?: string(name='Name'),
}

model GetHotelSceneItemDetailResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    category?: string(name='Category', example='客用品类'),
    dialogueList?: [ 
      {
        createTime?: long(name='CreateTime', example='1666164774'),
        dialogueId?: string(name='DialogueId', example='336'),
        noAnswer?: string(name='NoAnswer'),
        noAnswerTemplate?: string(name='NoAnswerTemplate', example='4'),
        process?: int32(name='Process', example='0'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId', example='10336'),
        updateTime?: long(name='UpdateTime', example='1666164774'),
        yesAnswer?: string(name='YesAnswer'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate', example='4'),
      }
    ](name='DialogueList'),
    icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/zhijin.png'),
    id?: long(name='Id', example='10336'),
    name?: string(name='Name', example='擦鞋布'),
    price?: long(name='Price', example='170'),
    status?: string(name='Status', example='已添加'),
    type?: string(name='Type', example='GOODS'),
    updateTime?: long(name='UpdateTime', example='1666168828'),
  }(name='Result'),
}

model GetHotelSceneItemDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSceneItemDetailResponseBody(name='body'),
}

async function getHotelSceneItemDetailWithOptions(request: GetHotelSceneItemDetailRequest, headers: GetHotelSceneItemDetailHeaders, runtime: Util.RuntimeOptions): GetHotelSceneItemDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.itemId)) {
    body['ItemId'] = request.itemId;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSceneItemDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSceneItemDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelSceneItemDetail(request: GetHotelSceneItemDetailRequest): GetHotelSceneItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSceneItemDetailHeaders{};
  return getHotelSceneItemDetailWithOptions(request, headers, runtime);
}

model GetHotelScreenSaverHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelScreenSaverRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='1248494721591392955'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelScreenSaverShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelScreenSaverResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5F0467E1-19F2-1757-B6D0-B79917BA2E81'),
  result?: {
    picUrl?: string(name='PicUrl', example='https://ailabs.alibabausercontent.com/platform/3d4fe6d66ec49d9789635f66627f0339/welcome_audios/976210a6532150f49c2677a8b7dbc105/l6fspbhd.jpg'),
    styleCode?: string(name='StyleCode', example='common-weather'),
  }(name='Result'),
}

model GetHotelScreenSaverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelScreenSaverResponseBody(name='body'),
}

async function getHotelScreenSaverWithOptions(tmpReq: GetHotelScreenSaverRequest, headers: GetHotelScreenSaverHeaders, runtime: Util.RuntimeOptions): GetHotelScreenSaverResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelScreenSaverShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelScreenSaver',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelScreenSaver`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelScreenSaver(request: GetHotelScreenSaverRequest): GetHotelScreenSaverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelScreenSaverHeaders{};
  return getHotelScreenSaverWithOptions(request, headers, runtime);
}

model GetHotelScreenSaverStyleHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelScreenSaverStyleRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
}

model GetHotelScreenSaverStyleResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67**6FA'),
  result?: [ 
    {
      cnName?: string(name='CnName'),
      code?: string(name='Code', example='common-weather'),
      enName?: string(name='EnName', example='common-weather'),
      picUrl?: string(name='PicUrl', example='https://img.***.png'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelScreenSaverStyleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelScreenSaverStyleResponseBody(name='body'),
}

async function getHotelScreenSaverStyleWithOptions(request: GetHotelScreenSaverStyleRequest, headers: GetHotelScreenSaverStyleHeaders, runtime: Util.RuntimeOptions): GetHotelScreenSaverStyleResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelScreenSaverStyle',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelScreenSaverStyle`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelScreenSaverStyle(request: GetHotelScreenSaverStyleRequest): GetHotelScreenSaverStyleResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelScreenSaverStyleHeaders{};
  return getHotelScreenSaverStyleWithOptions(request, headers, runtime);
}

model GetHotelSettingHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSettingRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  settingType?: string(name='SettingType', example='SCREENSAVER'),
}

model GetHotelSettingResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: {
    deleteToken?: long(name='DeleteToken', example='0'),
    extInfo?: string(name='ExtInfo', example='{}'),
    hotelDeviceModeList?: [ string ](name='HotelDeviceModeList'),
    hotelId?: string(name='HotelId', example='af7***536'),
    hotelScreenSaver?: {
      screenSaverPicUrl?: string(name='ScreenSaverPicUrl', example='https://a***png'),
      screenSaverStyle?: string(name='ScreenSaverStyle', example='common-weather'),
    }(name='HotelScreenSaver'),
    nightMode?: {
      defaultBright?: string(name='DefaultBright', description='夜间模式下的默认亮度'),
      defaultVolume?: string(name='DefaultVolume', description='夜间模式下的默认音量'),
      enable?: boolean(name='Enable', example='true'),
      end?: string(name='End', example='22:00'),
      standbyAction?: string(name='StandbyAction', example='screenoff'),
      start?: string(name='Start', example='07:00'),
    }(name='NightMode'),
    settingType?: string(name='SettingType', example='SCREENSAVER'),
    value?: string(name='Value'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetHotelSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSettingResponseBody(name='body'),
}

async function getHotelSettingWithOptions(request: GetHotelSettingRequest, headers: GetHotelSettingHeaders, runtime: Util.RuntimeOptions): GetHotelSettingResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.settingType)) {
    body['SettingType'] = request.settingType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSetting',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSetting`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getHotelSetting(request: GetHotelSettingRequest): GetHotelSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSettingHeaders{};
  return getHotelSettingWithOptions(request, headers, runtime);
}

model GetRelationProductListHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetRelationProductListResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      name?: string(name='Name'),
      pk?: string(name='Pk', example='jTOSl***l1odxImRw'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetRelationProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetRelationProductListResponseBody(name='body'),
}

async function getRelationProductListWithOptions(headers: GetRelationProductListHeaders, runtime: Util.RuntimeOptions): GetRelationProductListResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'GetRelationProductList',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getRelationProductList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRelationProductList(): GetRelationProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetRelationProductListHeaders{};
  return getRelationProductListWithOptions(headers, runtime);
}

model GetUnionIdHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetUnionIdRequest {
  encodeKey?: string(name='EncodeKey', example='125****0946'),
  encodeType?: string(name='EncodeType', example='HOTEL'),
  id?: string(name='Id', example='62a319****abdc'),
  idType?: string(name='IdType', example='DEVICE_ID'),
}

model GetUnionIdResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      organizationId?: string(name='OrganizationId', example='4325***765'),
      unionId?: string(name='UnionId', example='8bh2****8s8'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetUnionIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetUnionIdResponseBody(name='body'),
}

async function getUnionIdWithOptions(request: GetUnionIdRequest, headers: GetUnionIdHeaders, runtime: Util.RuntimeOptions): GetUnionIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.encodeKey)) {
    body['EncodeKey'] = request.encodeKey;
  }
  if (!Util.isUnset(request.encodeType)) {
    body['EncodeType'] = request.encodeType;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }
  if (!Util.isUnset(request.idType)) {
    body['IdType'] = request.idType;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetUnionId',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getUnionId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getUnionId(request: GetUnionIdRequest): GetUnionIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetUnionIdHeaders{};
  return getUnionIdWithOptions(request, headers, runtime);
}

model GetWelcomeTextAndMusicHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetWelcomeTextAndMusicRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
}

model GetWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    hotelId?: string(name='HotelId', example='a7***83'),
    musicUrl?: string(name='MusicUrl', example='http://ailabsaicloudservice.alicdn.com/tmp/a.wav'),
    text?: string(name='Text'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model GetWelcomeTextAndMusicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWelcomeTextAndMusicResponseBody(name='body'),
}

async function getWelcomeTextAndMusicWithOptions(request: GetWelcomeTextAndMusicRequest, headers: GetWelcomeTextAndMusicHeaders, runtime: Util.RuntimeOptions): GetWelcomeTextAndMusicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetWelcomeTextAndMusic',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getWelcomeTextAndMusic`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getWelcomeTextAndMusic(request: GetWelcomeTextAndMusicRequest): GetWelcomeTextAndMusicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetWelcomeTextAndMusicHeaders{};
  return getWelcomeTextAndMusicWithOptions(request, headers, runtime);
}

model HotelQrBindHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model HotelQrBindRequest {
  clientId?: string(name='ClientId', example='xxxxxx'),
  code?: string(name='Code', example='freuisghrtiesnvfkdsvbfuidslnvfs'),
  extInfo?: string(name='ExtInfo'),
  hotelId?: string(name='HotelId', example='a7***83'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model HotelQrBindResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73****9-175A-1324-8202-9FAAB*****A'),
  result?: {
    openDeviceInfo?: {
      encodeKey?: string(name='EncodeKey', example='123'),
      encodeType?: string(name='EncodeType', example='HOTEL'),
      id?: string(name='Id', example='xxxxxxx'),
      idType?: string(name='IdType', example='OPEN_ID'),
      organizationId?: string(name='OrganizationId', example='aaaaaaaa'),
    }(name='OpenDeviceInfo'),
    openUserInfo?: {
      encodeKey?: string(name='EncodeKey', example='123'),
      encodeType?: string(name='EncodeType', example='HOTEL'),
      id?: string(name='Id', example='xxxxxx'),
      idType?: string(name='IdType', example='OPEN_ID'),
      organizationId?: string(name='OrganizationId', example='aaaaaaaa'),
    }(name='OpenUserInfo'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model HotelQrBindResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: HotelQrBindResponseBody(name='body'),
}

async function hotelQrBindWithOptions(request: HotelQrBindRequest, headers: HotelQrBindHeaders, runtime: Util.RuntimeOptions): HotelQrBindResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.clientId)) {
    body['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.code)) {
    body['Code'] = request.code;
  }
  if (!Util.isUnset(request.extInfo)) {
    body['ExtInfo'] = request.extInfo;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'HotelQrBind',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/hotelQrBind`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function hotelQrBind(request: HotelQrBindRequest): HotelQrBindResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new HotelQrBindHeaders{};
  return hotelQrBindWithOptions(request, headers, runtime);
}

model ImportHotelConfigHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ImportHotelConfigRequest {
  hotelId?: string(name='HotelId', example='a7***83'),
  importHotelConfig?: {
    rcuCustomScenes?: [ 
      {
        corpusList?: [ string ](name='CorpusList'),
        description?: string(name='Description'),
        icon?: string(name='Icon'),
        name?: string(name='Name'),
        sceneId?: string(name='SceneId'),
      }
    ](name='RcuCustomScenes'),
  }(name='ImportHotelConfig'),
}

model ImportHotelConfigShrinkRequest {
  hotelId?: string(name='HotelId', example='a7***83'),
  importHotelConfigShrink?: string(name='ImportHotelConfig'),
}

model ImportHotelConfigResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportHotelConfigResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportHotelConfigResponseBody(name='body'),
}

async function importHotelConfigWithOptions(tmpReq: ImportHotelConfigRequest, headers: ImportHotelConfigHeaders, runtime: Util.RuntimeOptions): ImportHotelConfigResponse {
  Util.validateModel(tmpReq);
  var request = new ImportHotelConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.importHotelConfig)) {
    request.importHotelConfigShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.importHotelConfig, 'ImportHotelConfig', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.importHotelConfigShrink)) {
    body['ImportHotelConfig'] = request.importHotelConfigShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportHotelConfig',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/importHotelConfig`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importHotelConfig(request: ImportHotelConfigRequest): ImportHotelConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ImportHotelConfigHeaders{};
  return importHotelConfigWithOptions(request, headers, runtime);
}

model ImportRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ImportRoomControlDevicesRequest {
  enableInfraredDeviceImport?: string(name='EnableInfraredDeviceImport'),
  hotelId?: string(name='HotelId', example='vdgrefds'),
  locationDevices?: [ 
    {
      devices?: [ 
        {
          brand?: string(name='Brand'),
          city?: string(name='City'),
          connectType?: string(name='ConnectType'),
          deviceName?: string(name='DeviceName'),
          dn?: string(name='Dn'),
          infraredId?: string(name='InfraredId'),
          infraredIndex?: string(name='InfraredIndex'),
          infraredVersion?: string(name='InfraredVersion'),
          multiKeySwitchExt?: {
            switchList?: [ 
              {
                category?: string(name='Category'),
                deviceIndex?: int32(name='DeviceIndex'),
                deviceName?: string(name='DeviceName'),
                location?: string(name='Location'),
              }
            ](name='SwitchList'),
          }(name='MultiKeySwitchExt'),
          name?: string(name='Name', example='light'),
          number?: string(name='Number', example='night_light'),
          pk?: string(name='Pk'),
          province?: string(name='Province'),
          serviceProvider?: string(name='ServiceProvider'),
        }
      ](name='Devices'),
      location?: string(name='Location', example='room'),
      locationName?: string(name='LocationName'),
    }
  ](name='LocationDevices'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model ImportRoomControlDevicesShrinkRequest {
  enableInfraredDeviceImport?: string(name='EnableInfraredDeviceImport'),
  hotelId?: string(name='HotelId', example='vdgrefds'),
  locationDevicesShrink?: string(name='LocationDevices'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model ImportRoomControlDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsfregtre'),
  result?: int32(name='Result', example='10'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportRoomControlDevicesResponseBody(name='body'),
}

async function importRoomControlDevicesWithOptions(tmpReq: ImportRoomControlDevicesRequest, headers: ImportRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): ImportRoomControlDevicesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportRoomControlDevicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.locationDevices)) {
    request.locationDevicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDevices, 'LocationDevices', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.enableInfraredDeviceImport)) {
    body['EnableInfraredDeviceImport'] = request.enableInfraredDeviceImport;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.locationDevicesShrink)) {
    body['LocationDevices'] = request.locationDevicesShrink;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/importRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importRoomControlDevices(request: ImportRoomControlDevicesRequest): ImportRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ImportRoomControlDevicesHeaders{};
  return importRoomControlDevicesWithOptions(request, headers, runtime);
}

model ImportRoomGenieScenesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ImportRoomGenieScenesRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  roomNo?: string(name='RoomNo', example='1211'),
  sceneList?: [ 
    {
      actions?: [ 
        {
          attributeValues?: [ 
            {
              attributeName?: string(name='AttributeName', example='powerstate'),
              attributeValue?: string(name='AttributeValue', example='1'),
            }
          ](name='AttributeValues'),
          device?: {
            category?: string(name='Category', example='light'),
            deviceIndex?: int32(name='DeviceIndex', example='0'),
            deviceNumber?: string(name='DeviceNumber', example='3c5d2ab8f9ec'),
            type?: int32(name='Type', example='1'),
          }(name='Device'),
          reply?: string(name='Reply'),
          type?: int32(name='Type'),
        }
      ](name='Actions'),
      description?: string(name='Description'),
      display?: boolean(name='Display', example='true'),
      icon?: string(name='Icon', example='http://xxx.com/yyy.png'),
      sceneName?: string(name='SceneName'),
      triggerLogical?: int32(name='TriggerLogical', example='1'),
      triggers?: [ 
        {
          attributeValues?: [ 
            {
              attributeName?: string(name='AttributeName'),
              attributeValue?: string(name='AttributeValue'),
            }
          ](name='AttributeValues'),
          corpusList?: [ string ](name='CorpusList'),
          device?: {
            category?: string(name='Category'),
            deviceIndex?: string(name='DeviceIndex'),
            deviceNumber?: string(name='DeviceNumber'),
          }(name='Device'),
          type?: int32(name='Type', example='1'),
        }
      ](name='Triggers'),
    }
  ](name='SceneList'),
}

model ImportRoomGenieScenesShrinkRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  roomNo?: string(name='RoomNo', example='1211'),
  sceneListShrink?: string(name='SceneList'),
}

model ImportRoomGenieScenesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ImportRoomGenieScenesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportRoomGenieScenesResponseBody(name='body'),
}

async function importRoomGenieScenesWithOptions(tmpReq: ImportRoomGenieScenesRequest, headers: ImportRoomGenieScenesHeaders, runtime: Util.RuntimeOptions): ImportRoomGenieScenesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportRoomGenieScenesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sceneList)) {
    request.sceneListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneList, 'SceneList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }
  if (!Util.isUnset(request.sceneListShrink)) {
    body['SceneList'] = request.sceneListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportRoomGenieScenes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/importRoomGenieScenes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function importRoomGenieScenes(request: ImportRoomGenieScenesRequest): ImportRoomGenieScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ImportRoomGenieScenesHeaders{};
  return importRoomGenieScenesWithOptions(request, headers, runtime);
}

model InsertHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model InsertHotelSceneBookItemRequest {
  addHotelSceneItemReq?: {
    icon?: string(name='Icon', description='icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
    name?: string(name='Name', example='青椒肉丝'),
    price?: long(name='Price', example='1250'),
    type?: string(name='Type', example='FOOD'),
  }(name='AddHotelSceneItemReq', description='addHotelSceneItemReq'),
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
}

model InsertHotelSceneBookItemShrinkRequest {
  addHotelSceneItemReqShrink?: string(name='AddHotelSceneItemReq', description='addHotelSceneItemReq'),
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
}

model InsertHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='36FB***80C2'),
  result?: boolean(name='Result', example='true'),
}

model InsertHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertHotelSceneBookItemResponseBody(name='body'),
}

async function insertHotelSceneBookItemWithOptions(tmpReq: InsertHotelSceneBookItemRequest, headers: InsertHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): InsertHotelSceneBookItemResponse {
  Util.validateModel(tmpReq);
  var request = new InsertHotelSceneBookItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addHotelSceneItemReq)) {
    request.addHotelSceneItemReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addHotelSceneItemReq, 'AddHotelSceneItemReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.addHotelSceneItemReqShrink)) {
    query['AddHotelSceneItemReq'] = request.addHotelSceneItemReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/insertHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function insertHotelSceneBookItem(request: InsertHotelSceneBookItemRequest): InsertHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertHotelSceneBookItemHeaders{};
  return insertHotelSceneBookItemWithOptions(request, headers, runtime);
}

model InvokeRobotPushHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model InvokeRobotPushRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  pushType?: string(name='PushType', example='GET'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model InvokeRobotPushResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model InvokeRobotPushResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InvokeRobotPushResponseBody(name='body'),
}

async function invokeRobotPushWithOptions(request: InvokeRobotPushRequest, headers: InvokeRobotPushHeaders, runtime: Util.RuntimeOptions): InvokeRobotPushResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.pushType)) {
    body['PushType'] = request.pushType;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InvokeRobotPush',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/invokeRobotPush`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function invokeRobotPush(request: InvokeRobotPushRequest): InvokeRobotPushResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InvokeRobotPushHeaders{};
  return invokeRobotPushWithOptions(request, headers, runtime);
}

model ListAllProvincesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListAllProvincesResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='00534880-4397-5134-B212-1030B7A37C27'),
  result?: [ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListAllProvincesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListAllProvincesResponseBody(name='body'),
}

async function listAllProvincesWithOptions(headers: ListAllProvincesHeaders, runtime: Util.RuntimeOptions): ListAllProvincesResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListAllProvinces',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listAllProvinces`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listAllProvinces(): ListAllProvincesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListAllProvincesHeaders{};
  return listAllProvincesWithOptions(headers, runtime);
}

model ListCitiesByProvinceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCitiesByProvinceRequest {
  province?: string(name='Province'),
}

model ListCitiesByProvinceResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='860194F7-9593-50EA-8E53-BCEC0D325A00'),
  result?: [ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListCitiesByProvinceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCitiesByProvinceResponseBody(name='body'),
}

async function listCitiesByProvinceWithOptions(request: ListCitiesByProvinceRequest, headers: ListCitiesByProvinceHeaders, runtime: Util.RuntimeOptions): ListCitiesByProvinceResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.province)) {
    body['Province'] = request.province;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCitiesByProvince',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listCitiesByProvince`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCitiesByProvince(request: ListCitiesByProvinceRequest): ListCitiesByProvinceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCitiesByProvinceHeaders{};
  return listCitiesByProvinceWithOptions(request, headers, runtime);
}

model ListCustomQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListCustomQARequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  keyword?: string(name='Keyword', example='***'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page'),
}

model ListCustomQAShrinkRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  keyword?: string(name='Keyword', example='***'),
  pageShrink?: string(name='Page'),
}

model ListCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='21'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      answers?: string(name='Answers', example='22;11'),
      createTime?: string(name='CreateTime', example='2023-01-10 10:01:59'),
      customQAId?: string(name='CustomQAId', example='111'),
      hotelId?: string(name='HotelId', example='a7***83'),
      keyWords?: string(name='KeyWords', example='22;11'),
      majorQuestion?: string(name='MajorQuestion', example='***'),
      status?: int32(name='Status', example='0'),
      supplementaryQuestion?: string(name='SupplementaryQuestion', example='22;11'),
      updateTime?: string(name='UpdateTime', example='2023-01-10 10:01:59'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListCustomQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListCustomQAResponseBody(name='body'),
}

async function listCustomQAWithOptions(tmpReq: ListCustomQARequest, headers: ListCustomQAHeaders, runtime: Util.RuntimeOptions): ListCustomQAResponse {
  Util.validateModel(tmpReq);
  var request = new ListCustomQAShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageShrink)) {
    body['Page'] = request.pageShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListCustomQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listCustomQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCustomQA(request: ListCustomQARequest): ListCustomQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListCustomQAHeaders{};
  return listCustomQAWithOptions(request, headers, runtime);
}

model ListDialogueTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDialogueTemplateRequest {
  hotelId?: string(name='HotelId', description='hotelId', example='80d84ea8ed9e422fbad52715c8fc56f1'),
}

model ListDialogueTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='0EC7*726E'),
  result?: [ 
    {
      templateDetail?: {
        firstDialogueTemplate?: {
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer', example='${goodsName}${price}元，请问需要服务员送来吗？'),
          zeroPriceNoAnswer?: string(name='ZeroPriceNoAnswer', example='对不起，暂时不提供此物品。'),
          zeroPriceYesAnswer?: string(name='ZeroPriceYesAnswer', example='好的，服务员会尽快送来。'),
        }(name='FirstDialogueTemplate'),
        secondDialogueTemplate?: {
          nonzeroPriceNoAnswer?: string(name='NonzeroPriceNoAnswer', example='好的，已取消。'),
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer', example='好的，服务员会尽快送来${goodsName}'),
        }(name='SecondDialogueTemplate'),
      }(name='TemplateDetail'),
      templateId?: long(name='TemplateId', example='4'),
      templateName?: string(name='TemplateName', example='物品多轮模板'),
      type?: string(name='Type', example='GOODS'),
    }
  ](name='Result'),
}

model ListDialogueTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDialogueTemplateResponseBody(name='body'),
}

async function listDialogueTemplateWithOptions(request: ListDialogueTemplateRequest, headers: ListDialogueTemplateHeaders, runtime: Util.RuntimeOptions): ListDialogueTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDialogueTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listDialogueTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDialogueTemplate(request: ListDialogueTemplateRequest): ListDialogueTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDialogueTemplateHeaders{};
  return listDialogueTemplateWithOptions(request, headers, runtime);
}

model ListHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelAlarmRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  rooms?: [ string ](name='Rooms'),
}

model ListHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId', example='a7a3***013'),
  roomsShrink?: string(name='Rooms'),
}

model ListHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId', example='5039'),
      deviceOpenId?: string(name='DeviceOpenId', example='PvkB****VVTA=='),
      scheduleInfo?: {
        once?: {
          day?: int32(name='Day', example='20'),
          hour?: int32(name='Hour', example='10'),
          minute?: int32(name='Minute', example='30'),
          month?: int32(name='Month', example='9'),
          year?: int32(name='Year', example='2022'),
        }(name='Once'),
        type?: string(name='Type', description='ONCE, WEEKLY', example='ONCE'),
        weekly?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour', example='10'),
          minute?: int32(name='Minute', example='0'),
        }(name='Weekly'),
      }(name='ScheduleInfo'),
      userOpenId?: string(name='UserOpenId', example='mgw/k***HQd'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelAlarmResponseBody(name='body'),
}

async function listHotelAlarmWithOptions(tmpReq: ListHotelAlarmRequest, headers: ListHotelAlarmHeaders, runtime: Util.RuntimeOptions): ListHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelAlarmList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelAlarm(request: ListHotelAlarmRequest): ListHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelAlarmHeaders{};
  return listHotelAlarmWithOptions(request, headers, runtime);
}

model ListHotelControlDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelControlDeviceRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelControlDeviceShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelControlDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model ListHotelControlDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelControlDeviceResponseBody(name='body'),
}

async function listHotelControlDeviceWithOptions(tmpReq: ListHotelControlDeviceRequest, headers: ListHotelControlDeviceHeaders, runtime: Util.RuntimeOptions): ListHotelControlDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelControlDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelControlDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelControlDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelControlDevice(request: ListHotelControlDeviceRequest): ListHotelControlDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelControlDeviceHeaders{};
  return listHotelControlDeviceWithOptions(request, headers, runtime);
}

model ListHotelInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelInfoResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      authAccount?: [ 
        {
          userName?: string(name='UserName', example='leetest'),
        }
      ](name='AuthAccount'),
      hotelAddress?: string(name='HotelAddress'),
      hotelId?: string(name='HotelId', example='cf2446fc9d144c85aaee4f9ae20a96e7'),
      hotelName?: string(name='HotelName'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListHotelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelInfoResponseBody(name='body'),
}

async function listHotelInfoWithOptions(headers: ListHotelInfoHeaders, runtime: Util.RuntimeOptions): ListHotelInfoResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelInfo',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelInfo(): ListHotelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelInfoHeaders{};
  return listHotelInfoWithOptions(headers, runtime);
}

model ListHotelMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelMessageTemplateResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      auditMark?: string(name='AuditMark', example='不通过'),
      auditStatus?: string(name='AuditStatus', example='COMMIT'),
      templateDetail?: string(name='TemplateDetail', example='这是${hotel}的一个测试模板'),
      templateId?: long(name='TemplateId', example='1'),
      templateName?: string(name='TemplateName', example='测试模板'),
    }
  ](name='Result'),
}

model ListHotelMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelMessageTemplateResponseBody(name='body'),
}

async function listHotelMessageTemplateWithOptions(headers: ListHotelMessageTemplateHeaders, runtime: Util.RuntimeOptions): ListHotelMessageTemplateResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelMessageTemplate(): ListHotelMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelMessageTemplateHeaders{};
  return listHotelMessageTemplateWithOptions(headers, runtime);
}

model ListHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelOrderRequest {
  payload?: {
    page?: {
      pageNumber?: long(name='PageNumber', example='1'),
      pageSize?: long(name='PageSize', example='10'),
    }(name='Page'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='1248494721591392955'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='21'),
    totalPage?: int32(name='TotalPage', example='7'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='07F61FDA-606F-10A0-8ED0-C6CE62710A48'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt', example='21.5'),
      gmtCreate?: long(name='GmtCreate', example='1659952892000'),
      orderNo?: string(name='OrderNo', example='20220808180132000114508555527711'),
      quantity?: long(name='Quantity', example='12'),
      roomNo?: string(name='RoomNo', example='2001'),
      status?: string(name='Status', example='INIT'),
      type?: string(name='Type', example='REPAIR'),
      typeIconUrl?: string(name='TypeIconUrl', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingfenlei/shebeiweixiu.png'),
      typeName?: string(name='TypeName', example='设备维修'),
    }
  ](name='Result'),
}

model ListHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelOrderResponseBody(name='body'),
}

async function listHotelOrderWithOptions(tmpReq: ListHotelOrderRequest, headers: ListHotelOrderHeaders, runtime: Util.RuntimeOptions): ListHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelOrder(request: ListHotelOrderRequest): ListHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelOrderHeaders{};
  return listHotelOrderWithOptions(request, headers, runtime);
}

model ListHotelRoomsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelRoomsRequest {
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
}

model ListHotelRoomsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
      roomNo?: string(name='RoomNo', example='102'),
    }
  ](name='Result'),
}

model ListHotelRoomsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelRoomsResponseBody(name='body'),
}

async function listHotelRoomsWithOptions(request: ListHotelRoomsRequest, headers: ListHotelRoomsHeaders, runtime: Util.RuntimeOptions): ListHotelRoomsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelRooms',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelRooms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelRooms(request: ListHotelRoomsRequest): ListHotelRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelRoomsHeaders{};
  return listHotelRoomsWithOptions(request, headers, runtime);
}

model ListHotelSceneBookItemsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneBookItemsRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page'),
  type?: string(name='Type', example='FOOD'),
}

model ListHotelSceneBookItemsShrinkRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  pageShrink?: string(name='Page'),
  type?: string(name='Type', example='FOOD'),
}

model ListHotelSceneBookItemsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext', example='True'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        icon?: string(name='Icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
        id?: long(name='Id', example='11824'),
        name?: string(name='Name', example='青椒肉丝'),
        price?: long(name='Price', example='1850'),
        status?: string(name='Status', example='已添加'),
        type?: string(name='Type', example='FOOD'),
        updateTime?: long(name='UpdateTime', example='1666161803'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneBookItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneBookItemsResponseBody(name='body'),
}

async function listHotelSceneBookItemsWithOptions(tmpReq: ListHotelSceneBookItemsRequest, headers: ListHotelSceneBookItemsHeaders, runtime: Util.RuntimeOptions): ListHotelSceneBookItemsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneBookItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneBookItems',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneBookItems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelSceneBookItems(request: ListHotelSceneBookItemsRequest): ListHotelSceneBookItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneBookItemsHeaders{};
  return listHotelSceneBookItemsWithOptions(request, headers, runtime);
}

model ListHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemRequest {
  payload?: {
    type?: string(name='Type', example='GOODS'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='1248494721591392955'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelSceneItemShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelSceneItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
    totalPage?: int32(name='TotalPage', example='6'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='CEADB586-51CB-1B6B-95BD-AB85A7A08E97'),
  result?: {
    secondCategoryList?: [ 
      {
        itemList?: [ 
          {
            category?: string(name='Category', example='客用品类'),
            icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
            id?: string(name='Id', example='152860'),
            name?: string(name='Name', example='棉签'),
            price?: long(name='Price', example='1'),
            status?: string(name='Status', example='已添加'),
            type?: string(name='Type', example='GOODS'),
          }
        ](name='ItemList'),
        secondCategoryName?: string(name='SecondCategoryName', example='客用品类'),
      }
    ](name='SecondCategoryList'),
  }(name='Result'),
}

model ListHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemResponseBody(name='body'),
}

async function listHotelSceneItemWithOptions(tmpReq: ListHotelSceneItemRequest, headers: ListHotelSceneItemHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelSceneItem(request: ListHotelSceneItemRequest): ListHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemHeaders{};
  return listHotelSceneItemWithOptions(request, headers, runtime);
}

model ListHotelSceneItemsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemsRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  listHotelSceneReq?: {
    category?: string(name='Category', example='客用品类'),
    keywords?: string(name='Keywords', example='棉签'),
    page?: {
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
    }(name='Page'),
    status?: string(name='Status', example='已添加'),
    type?: string(name='Type', example='GOODS'),
  }(name='ListHotelSceneReq', description='ListHotelSceneReq'),
}

model ListHotelSceneItemsShrinkRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  listHotelSceneReqShrink?: string(name='ListHotelSceneReq', description='ListHotelSceneReq'),
}

model ListHotelSceneItemsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext', example='False'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        category?: string(name='Category', example='客用品类'),
        deliveryMethod?: string(name='DeliveryMethod'),
        icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
        id?: long(name='Id', description='id', example='10336'),
        name?: string(name='Name', example='棉签'),
        paymentMethod?: string(name='PaymentMethod'),
        price?: long(name='Price', example='160'),
        robotName?: string(name='RobotName'),
        status?: string(name='Status', example='已添加'),
        type?: string(name='Type', example='GOODS'),
        updateTime?: long(name='UpdateTime', example='1666163226'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemsResponseBody(name='body'),
}

async function listHotelSceneItemsWithOptions(tmpReq: ListHotelSceneItemsRequest, headers: ListHotelSceneItemsHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listHotelSceneReq)) {
    request.listHotelSceneReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listHotelSceneReq, 'ListHotelSceneReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.listHotelSceneReqShrink)) {
    query['ListHotelSceneReq'] = request.listHotelSceneReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItems',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelSceneItems(request: ListHotelSceneItemsRequest): ListHotelSceneItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemsHeaders{};
  return listHotelSceneItemsWithOptions(request, headers, runtime);
}

model ListHotelServiceCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelServiceCategoryRequest {
  payload?: {
    type?: string(name='Type', example='HOTEL_SERVICE'),
  }(name='Payload'),
}

model ListHotelServiceCategoryShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model ListHotelServiceCategoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='5373C821-65D2-1764-B9F9-951914937FF5'),
  result?: [ 
    {
      code?: string(name='Code', example='GOODS'),
      desc?: string(name='Desc', example='生活及洗漱用品'),
      icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingfenlei/wupintianjia.png'),
      name?: string(name='Name', example='物品添加'),
      type?: string(name='Type', example='HOTEL_SERVICE'),
    }
  ](name='Result'),
}

model ListHotelServiceCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelServiceCategoryResponseBody(name='body'),
}

async function listHotelServiceCategoryWithOptions(tmpReq: ListHotelServiceCategoryRequest, headers: ListHotelServiceCategoryHeaders, runtime: Util.RuntimeOptions): ListHotelServiceCategoryResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelServiceCategoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelServiceCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelServiceCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotelServiceCategory(request: ListHotelServiceCategoryRequest): ListHotelServiceCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelServiceCategoryHeaders{};
  return listHotelServiceCategoryWithOptions(request, headers, runtime);
}

model ListHotelsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelsRequest {
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page'),
  status?: int32(name='Status', example='1'),
}

model ListHotelsShrinkRequest {
  pageShrink?: string(name='Page'),
  status?: int32(name='Status', example='1'),
}

model ListHotelsResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId'),
  result?: {
    hotelInfoList?: [ 
      {
        accountNames?: [ string ](name='AccountNames'),
        createTime?: long(name='CreateTime', example='1654568802000'),
        hotelAddress?: string(name='HotelAddress', example='酒店地址'),
        hotelId?: string(name='HotelId', example='73ab1b03018d4da69b5bef17095f569b'),
        hotelName?: string(name='HotelName', example='酒店名称'),
        industryType?: string(name='IndustryType', example='酒店'),
        phoneNumber?: string(name='PhoneNumber', example='13312340987'),
        relatedProductName?: string(name='RelatedProductName', example='测试产品'),
        roomNum?: int32(name='RoomNum', example='12'),
        status?: int32(name='Status', example='1'),
      }
    ](name='HotelInfoList'),
    page?: {
      hasNext?: boolean(name='HasNext'),
      pageNumber?: int32(name='PageNumber', example='1'),
      pageSize?: int32(name='PageSize', example='10'),
      total?: int32(name='Total', example='23'),
      totalPage?: int32(name='TotalPage', example='3'),
    }(name='Page'),
  }(name='Result'),
}

model ListHotelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelsResponseBody(name='body'),
}

async function listHotelsWithOptions(tmpReq: ListHotelsRequest, headers: ListHotelsHeaders, runtime: Util.RuntimeOptions): ListHotelsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotels',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listHotels(request: ListHotelsRequest): ListHotelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelsHeaders{};
  return listHotelsWithOptions(request, headers, runtime);
}

model ListInfraredDeviceBrandsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListInfraredDeviceBrandsRequest {
  category?: string(name='Category'),
  serviceProvider?: string(name='ServiceProvider'),
}

model ListInfraredDeviceBrandsResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='860194F7-9593-50EA-8E53-BCEC0D325A00'),
  result?: map[string][ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListInfraredDeviceBrandsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInfraredDeviceBrandsResponseBody(name='body'),
}

async function listInfraredDeviceBrandsWithOptions(request: ListInfraredDeviceBrandsRequest, headers: ListInfraredDeviceBrandsHeaders, runtime: Util.RuntimeOptions): ListInfraredDeviceBrandsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.serviceProvider)) {
    body['ServiceProvider'] = request.serviceProvider;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInfraredDeviceBrands',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listInfraredDeviceBrands`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInfraredDeviceBrands(request: ListInfraredDeviceBrandsRequest): ListInfraredDeviceBrandsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListInfraredDeviceBrandsHeaders{};
  return listInfraredDeviceBrandsWithOptions(request, headers, runtime);
}

model ListInfraredRemoteControllersHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListInfraredRemoteControllersRequest {
  brand?: string(name='Brand'),
  category?: string(name='Category'),
  city?: string(name='City'),
  hotelId?: string(name='HotelId', example='af7***536'),
  province?: string(name='Province'),
  serviceProvider?: string(name='ServiceProvider'),
}

model ListInfraredRemoteControllersResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0C90A059-3653-5356-A78E-8A6BDA606155'),
  result?: [ 
    {
      index?: int32(name='Index', example='1'),
      rid?: long(name='Rid', example='3747'),
      version?: string(name='Version', example='4'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListInfraredRemoteControllersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInfraredRemoteControllersResponseBody(name='body'),
}

async function listInfraredRemoteControllersWithOptions(request: ListInfraredRemoteControllersRequest, headers: ListInfraredRemoteControllersHeaders, runtime: Util.RuntimeOptions): ListInfraredRemoteControllersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.brand)) {
    body['Brand'] = request.brand;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.city)) {
    body['City'] = request.city;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.province)) {
    body['Province'] = request.province;
  }
  if (!Util.isUnset(request.serviceProvider)) {
    body['ServiceProvider'] = request.serviceProvider;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListInfraredRemoteControllers',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listInfraredRemoteControllers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listInfraredRemoteControllers(request: ListInfraredRemoteControllersRequest): ListInfraredRemoteControllersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListInfraredRemoteControllersHeaders{};
  return listInfraredRemoteControllersWithOptions(request, headers, runtime);
}

model ListSTBServiceProvidersHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSTBServiceProvidersRequest {
  city?: string(name='City'),
  province?: string(name='Province'),
}

model ListSTBServiceProvidersResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1036C376-7A37-5A73-BE8B-C6DB40107EC1'),
  result?: map[string][ string ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListSTBServiceProvidersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSTBServiceProvidersResponseBody(name='body'),
}

async function listSTBServiceProvidersWithOptions(request: ListSTBServiceProvidersRequest, headers: ListSTBServiceProvidersHeaders, runtime: Util.RuntimeOptions): ListSTBServiceProvidersResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.city)) {
    body['City'] = request.city;
  }
  if (!Util.isUnset(request.province)) {
    body['Province'] = request.province;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSTBServiceProviders',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listSTBServiceProviders`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSTBServiceProviders(request: ListSTBServiceProvidersRequest): ListSTBServiceProvidersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSTBServiceProvidersHeaders{};
  return listSTBServiceProvidersWithOptions(request, headers, runtime);
}

model ListSceneCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSceneCategoryRequest {
  hotelId?: string(name='HotelId', description='hotelId', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  type?: string(name='Type', example='REPAIR'),
}

model ListSceneCategoryResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='RequestId', example='0EC7*726E'),
  result?: [ string ](name='Result'),
}

model ListSceneCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSceneCategoryResponseBody(name='body'),
}

async function listSceneCategoryWithOptions(request: ListSceneCategoryRequest, headers: ListSceneCategoryHeaders, runtime: Util.RuntimeOptions): ListSceneCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSceneCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listSceneCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listSceneCategory(request: ListSceneCategoryRequest): ListSceneCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSceneCategoryHeaders{};
  return listSceneCategoryWithOptions(request, headers, runtime);
}

model ListServiceQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListServiceQARequest {
  active?: boolean(name='Active', example='true'),
  hotelId?: string(name='HotelId', example='a7***83'),
  keyword?: string(name='Keyword', example='***'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page'),
}

model ListServiceQAShrinkRequest {
  active?: boolean(name='Active', example='true'),
  hotelId?: string(name='HotelId', example='a7***83'),
  keyword?: string(name='Keyword', example='***'),
  pageShrink?: string(name='Page'),
}

model ListServiceQAResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='12'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      active?: boolean(name='Active', example='true'),
      answer?: string(name='Answer', example='***'),
      gmtModified?: string(name='GmtModified', example='2022-07-27 14:06:27'),
      question?: string(name='Question'),
      serviceQAId?: long(name='ServiceQAId', example='1'),
      templates?: string(name='Templates'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListServiceQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListServiceQAResponseBody(name='body'),
}

async function listServiceQAWithOptions(tmpReq: ListServiceQARequest, headers: ListServiceQAHeaders, runtime: Util.RuntimeOptions): ListServiceQAResponse {
  Util.validateModel(tmpReq);
  var request = new ListServiceQAShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.active)) {
    body['Active'] = request.active;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.keyword)) {
    body['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.pageShrink)) {
    body['Page'] = request.pageShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListServiceQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listServiceQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listServiceQA(request: ListServiceQARequest): ListServiceQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListServiceQAHeaders{};
  return listServiceQAWithOptions(request, headers, runtime);
}

model ListTicketsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListTicketsRequest {
  endTime?: string(name='EndTime', example='2022-09-14 14:23:00'),
  hotelId?: string(name='HotelId', example='af7***536'),
  isDesc?: boolean(name='IsDesc', example='true'),
  isNeedCallback?: boolean(name='IsNeedCallback', example='false'),
  isNeedCharges?: boolean(name='IsNeedCharges', example='false'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
  }(name='Page'),
  roomNo?: string(name='RoomNo', example='1211'),
  sortField?: string(name='SortField', example='gmtCalled'),
  startTime?: string(name='StartTime', example='2022-04-08 09:39:00'),
  status?: string(name='Status', example='waiting'),
  type?: string(name='Type', example='""'),
}

model ListTicketsShrinkRequest {
  endTime?: string(name='EndTime', example='2022-09-14 14:23:00'),
  hotelId?: string(name='HotelId', example='af7***536'),
  isDesc?: boolean(name='IsDesc', example='true'),
  isNeedCallback?: boolean(name='IsNeedCallback', example='false'),
  isNeedCharges?: boolean(name='IsNeedCharges', example='false'),
  pageShrink?: string(name='Page'),
  roomNo?: string(name='RoomNo', example='1211'),
  sortField?: string(name='SortField', example='gmtCalled'),
  startTime?: string(name='StartTime', example='2022-04-08 09:39:00'),
  status?: string(name='Status', example='waiting'),
  type?: string(name='Type', example='""'),
}

model ListTicketsResponseBody = {
  message?: string(name='Message', example='success'),
  page?: {
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='5'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: [ 
    {
      action?: boolean(name='Action', example='false'),
      assignedHandler?: string(name='AssignedHandler', example='***'),
      chargesRemark?: string(name='ChargesRemark', example='***'),
      completeRemark?: string(name='CompleteRemark', example='***'),
      dialogs?: [ 
        {
          answer?: string(name='Answer'),
          question?: string(name='Question'),
        }
      ](name='Dialogs'),
      gmtCalled?: string(name='GmtCalled', example='2023-01-09 00:00:00'),
      gmtCreate?: string(name='GmtCreate', example='2023-01-09 00:00:00'),
      gmtDelayed?: string(name='GmtDelayed', example='2023-01-09 00:00:00'),
      gmtModified?: string(name='GmtModified', example='2023-01-09 00:00:00'),
      groupKey?: string(name='GroupKey', example='2023***93975'),
      id?: long(name='Id', example='45'),
      isAcceptedCharges?: boolean(name='IsAcceptedCharges', example='false'),
      isDelayed?: boolean(name='IsDelayed', example='true'),
      isNeedCallback?: boolean(name='IsNeedCallback', example='false'),
      isNeedCharges?: boolean(name='IsNeedCharges', example='false'),
      operations?: [ map[string]any ](name='Operations'),
      remark?: string(name='Remark', example='***'),
      roomNo?: string(name='RoomNo', example='101'),
      status?: string(name='Status', example='waiting'),
      type?: string(name='Type', example='""'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ListTicketsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTicketsResponseBody(name='body'),
}

async function listTicketsWithOptions(tmpReq: ListTicketsRequest, headers: ListTicketsHeaders, runtime: Util.RuntimeOptions): ListTicketsResponse {
  Util.validateModel(tmpReq);
  var request = new ListTicketsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.isDesc)) {
    body['IsDesc'] = request.isDesc;
  }
  if (!Util.isUnset(request.isNeedCallback)) {
    body['IsNeedCallback'] = request.isNeedCallback;
  }
  if (!Util.isUnset(request.isNeedCharges)) {
    body['IsNeedCharges'] = request.isNeedCharges;
  }
  if (!Util.isUnset(request.pageShrink)) {
    body['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }
  if (!Util.isUnset(request.sortField)) {
    body['SortField'] = request.sortField;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListTickets',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listTickets`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTickets(request: ListTicketsRequest): ListTicketsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListTicketsHeaders{};
  return listTicketsWithOptions(request, headers, runtime);
}

model PageGetHotelRoomDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PageGetHotelRoomDevicesRequest {
  hotelId?: string(name='HotelId', example='a7***83'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model PageGetHotelRoomDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  page?: {
    end?: int32(name='End', example='4'),
    hasNext?: boolean(name='HasNext', example='False'),
    pageNumber?: int32(name='PageNumber', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    start?: int32(name='Start', example='0'),
    total?: int32(name='Total', example='5'),
    totalPage?: int32(name='TotalPage', example='1'),
  }(name='Page'),
  requestId?: string(name='RequestId', example='4EFBDDF4-B19D-526C-8C3D-CD8AB51974EE'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion', example='V21.10.00.313'),
      hotelId?: string(name='HotelId', example='a7***83'),
      mac?: string(name='Mac', example='b4:xx:xx:xx:65:2b'),
      onlineStatus?: int32(name='OnlineStatus', example='1'),
      roomNo?: string(name='RoomNo', example='2001'),
      sn?: string(name='Sn', example='1200xxx048'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PageGetHotelRoomDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageGetHotelRoomDevicesResponseBody(name='body'),
}

async function pageGetHotelRoomDevicesWithOptions(request: PageGetHotelRoomDevicesRequest, headers: PageGetHotelRoomDevicesHeaders, runtime: Util.RuntimeOptions): PageGetHotelRoomDevicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageGetHotelRoomDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pageGetHotelRoomDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pageGetHotelRoomDevices(request: PageGetHotelRoomDevicesRequest): PageGetHotelRoomDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PageGetHotelRoomDevicesHeaders{};
  return pageGetHotelRoomDevicesWithOptions(request, headers, runtime);
}

model PushHotelMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushHotelMessageRequest {
  pushHotelMessageReq?: {
    hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
    paramMap?: map[string]string(name='ParamMap'),
    roomNo?: string(name='RoomNo', example='102'),
    templateId?: long(name='TemplateId', example='1'),
  }(name='PushHotelMessageReq', description='pushHotelMessageReq'),
}

model PushHotelMessageShrinkRequest {
  pushHotelMessageReqShrink?: string(name='PushHotelMessageReq', description='pushHotelMessageReq'),
}

model PushHotelMessageResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushHotelMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushHotelMessageResponseBody(name='body'),
}

async function pushHotelMessageWithOptions(tmpReq: PushHotelMessageRequest, headers: PushHotelMessageHeaders, runtime: Util.RuntimeOptions): PushHotelMessageResponse {
  Util.validateModel(tmpReq);
  var request = new PushHotelMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pushHotelMessageReq)) {
    request.pushHotelMessageReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pushHotelMessageReq, 'PushHotelMessageReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pushHotelMessageReqShrink)) {
    query['PushHotelMessageReq'] = request.pushHotelMessageReqShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushHotelMessage',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pushHotelMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushHotelMessage(request: PushHotelMessageRequest): PushHotelMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PushHotelMessageHeaders{};
  return pushHotelMessageWithOptions(request, headers, runtime);
}

model PushWelcomeTextAndMusicHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushWelcomeTextAndMusicRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  roomNo?: string(name='RoomNo', example='1211'),
  templateVariable?: map[string]string(name='TemplateVariable'),
}

model PushWelcomeTextAndMusicShrinkRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  roomNo?: string(name='RoomNo', example='1211'),
  templateVariableShrink?: string(name='TemplateVariable'),
}

model PushWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F7E2****B7C94'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model PushWelcomeTextAndMusicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushWelcomeTextAndMusicResponseBody(name='body'),
}

async function pushWelcomeTextAndMusicWithOptions(tmpReq: PushWelcomeTextAndMusicRequest, headers: PushWelcomeTextAndMusicHeaders, runtime: Util.RuntimeOptions): PushWelcomeTextAndMusicResponse {
  Util.validateModel(tmpReq);
  var request = new PushWelcomeTextAndMusicShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.templateVariable)) {
    request.templateVariableShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateVariable, 'TemplateVariable', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }
  if (!Util.isUnset(request.templateVariableShrink)) {
    body['TemplateVariable'] = request.templateVariableShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushWelcomeTextAndMusic',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pushWelcomeTextAndMusic`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function pushWelcomeTextAndMusic(request: PushWelcomeTextAndMusicRequest): PushWelcomeTextAndMusicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PushWelcomeTextAndMusicHeaders{};
  return pushWelcomeTextAndMusicWithOptions(request, headers, runtime);
}

model QueryDeviceStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryDeviceStatusRequest {
  payload?: {
    locationDevices?: [ 
      {
        deviceNumber?: string(name='DeviceNumber', example='night_light'),
        deviceType?: string(name='DeviceType', example='light'),
        location?: string(name='Location', example='room'),
      }
    ](name='LocationDevices'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo'),
}

model QueryDeviceStatusShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model QueryDeviceStatusResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsgrefds'),
  result?: [ map[string]string ](name='Result'),
}

model QueryDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatusResponseBody(name='body'),
}

async function queryDeviceStatusWithOptions(tmpReq: QueryDeviceStatusRequest, headers: QueryDeviceStatusHeaders, runtime: Util.RuntimeOptions): QueryDeviceStatusResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDeviceStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatus',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryDeviceStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDeviceStatusHeaders{};
  return queryDeviceStatusWithOptions(request, headers, runtime);
}

model QueryHotelRoomDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelRoomDetailRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  mac?: string(name='Mac', example='38:c8:**:**:f5:22'),
  roomNo?: string(name='RoomNo', example='1211'),
  sn?: string(name='Sn', description='设备sn信息
注：若在mac uuid sn全都输入的情况下 按照输入正确的内容查询 若全输入都是正确的 则 按照 uuid > mac > sn 优先级查询
传入mac uuid sn其中一个 则酒店id和房间号可不传', example='280**28'),
  uuid?: string(name='Uuid', example='588***96j5WU'),
}

model QueryHotelRoomDetailResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: {
    authAccounts?: [ 
      {
        accountName?: string(name='AccountName'),
        authTime?: string(name='AuthTime', example='2023-01-01 12:00:00'),
      }
    ](name='AuthAccounts'),
    connectType?: string(name='ConnectType', example='rcu'),
    creatorAccountName?: string(name='CreatorAccountName'),
    deviceInfos?: [ 
      {
        activeTime?: string(name='ActiveTime', example='2023-01-01 12:00:00'),
        deviceName?: string(name='DeviceName'),
        firmwareVersion?: string(name='FirmwareVersion', example='6.1.8-RS-20230425.1806'),
        mac?: string(name='Mac', example='fa:03:23:58:c3:00'),
        onlineStatus?: int32(name='OnlineStatus', example='1'),
        sn?: string(name='Sn', example='sag42dlz4qf'),
        uuid?: string(name='Uuid', example='41c95c18a0a643bcb58edf438877def5'),
      }
    ](name='DeviceInfos'),
    hotelId?: string(name='HotelId', example='a7***83'),
    hotelName?: string(name='HotelName'),
    otherService?: {
      openCall?: boolean(name='OpenCall', example='false'),
      unhandleTickets?: int32(name='UnhandleTickets', example='0'),
    }(name='OtherService'),
    roomControlInfo?: {
      appId?: long(name='AppId', example='78'),
      appName?: string(name='AppName', example='app'),
      deviceInfos?: [ 
        {
          categoryEnName?: string(name='CategoryEnName', example='light'),
          categoryId?: long(name='CategoryId', example='3'),
          categoryName?: string(name='CategoryName'),
          deviceConnectType?: string(name='DeviceConnectType', example='rcu'),
          deviceCount?: int32(name='DeviceCount', example='4'),
          deviceId?: string(name='DeviceId', example='readLight'),
          deviceName?: string(name='DeviceName'),
          locationEnName?: string(name='LocationEnName', example='room'),
          locationId?: long(name='LocationId', example='1'),
          locationName?: string(name='LocationName'),
          productKey?: string(name='ProductKey', example='a1ueWGP6W2L'),
        }
      ](name='DeviceInfos'),
      rcuUrl?: string(name='RcuUrl', example='http://www.xxx.com'),
      templateId?: long(name='TemplateId', example='1170'),
      templateName?: string(name='TemplateName'),
    }(name='RoomControlInfo'),
    roomNo?: string(name='RoomNo', example='2001'),
    roomServiceInfo?: {
      bookServiceCnt?: int32(name='BookServiceCnt', example='0'),
      goodsServiceCnt?: int32(name='GoodsServiceCnt', example='10'),
      repairServiceCnt?: int32(name='RepairServiceCnt', example='10'),
      roomServiceCnt?: int32(name='RoomServiceCnt', example='12'),
    }(name='RoomServiceInfo'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model QueryHotelRoomDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelRoomDetailResponseBody(name='body'),
}

async function queryHotelRoomDetailWithOptions(request: QueryHotelRoomDetailRequest, headers: QueryHotelRoomDetailHeaders, runtime: Util.RuntimeOptions): QueryHotelRoomDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.mac)) {
    body['Mac'] = request.mac;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }
  if (!Util.isUnset(request.sn)) {
    body['Sn'] = request.sn;
  }
  if (!Util.isUnset(request.uuid)) {
    body['Uuid'] = request.uuid;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelRoomDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelRoomDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHotelRoomDetail(request: QueryHotelRoomDetailRequest): QueryHotelRoomDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelRoomDetailHeaders{};
  return queryHotelRoomDetailWithOptions(request, headers, runtime);
}

model QueryRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryRoomControlDevicesRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  roomNo?: string(name='RoomNo', example='1211'),
}

model QueryRoomControlDevicesResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='fdsgfdscvre'),
  result?: [ 
    {
      devices?: [ 
        {
          connectType?: string(name='ConnectType'),
          DN?: string(name='DN'),
          deviceName?: string(name='DeviceName'),
          deviceStatus?: string(name='DeviceStatus'),
          multiKeySwitchExt?: {
            switchList?: [ 
              {
                category?: string(name='Category'),
                deviceIndex?: int32(name='DeviceIndex'),
                deviceName?: string(name='DeviceName'),
                deviceStatus?: string(name='DeviceStatus'),
                elementCode?: string(name='ElementCode'),
                location?: string(name='Location'),
              }
            ](name='SwitchList'),
          }(name='MultiKeySwitchExt'),
          name?: string(name='Name', example='light'),
          number?: string(name='Number', example='night_light'),
          PK?: string(name='PK'),
        }
      ](name='Devices'),
      location?: string(name='Location', example='room'),
      locationName?: string(name='LocationName'),
    }
  ](name='Result'),
}

model QueryRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRoomControlDevicesResponseBody(name='body'),
}

async function queryRoomControlDevicesWithOptions(request: QueryRoomControlDevicesRequest, headers: QueryRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): QueryRoomControlDevicesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRoomControlDevices(request: QueryRoomControlDevicesRequest): QueryRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryRoomControlDevicesHeaders{};
  return queryRoomControlDevicesWithOptions(request, headers, runtime);
}

model QuerySceneListHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QuerySceneListRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  sceneStates?: [ int32 ](name='SceneStates'),
  sceneTypes?: [ string ](name='SceneTypes'),
  templateInfoIds?: [ string ](name='TemplateInfoIds'),
}

model QuerySceneListShrinkRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
  sceneStatesShrink?: string(name='SceneStates'),
  sceneTypesShrink?: string(name='SceneTypes'),
  templateInfoIdsShrink?: string(name='TemplateInfoIds'),
}

model QuerySceneListResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='FAFCD152-4791-5F2F-B0BE-2DC06FD4F05B'),
  results?: [ 
    {
      icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
      sceneId?: string(name='SceneId', example='73'),
      sceneName?: string(name='SceneName'),
      sceneSource?: string(name='SceneSource', example='external'),
      sceneState?: int32(name='SceneState', example='1'),
      sceneType?: string(name='SceneType', example='common'),
      templateInfoDTOList?: [ 
        {
          description?: string(name='Description'),
          id?: long(name='Id', example='6962'),
          name?: string(name='Name', example='101'),
        }
      ](name='TemplateInfoDTOList'),
      unavailableReason?: string(name='UnavailableReason'),
    }
  ](name='Results'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model QuerySceneListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySceneListResponseBody(name='body'),
}

async function querySceneListWithOptions(tmpReq: QuerySceneListRequest, headers: QuerySceneListHeaders, runtime: Util.RuntimeOptions): QuerySceneListResponse {
  Util.validateModel(tmpReq);
  var request = new QuerySceneListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sceneStates)) {
    request.sceneStatesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneStates, 'SceneStates', 'json');
  }
  if (!Util.isUnset(tmpReq.sceneTypes)) {
    request.sceneTypesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneTypes, 'SceneTypes', 'json');
  }
  if (!Util.isUnset(tmpReq.templateInfoIds)) {
    request.templateInfoIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateInfoIds, 'TemplateInfoIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.sceneStatesShrink)) {
    body['SceneStates'] = request.sceneStatesShrink;
  }
  if (!Util.isUnset(request.sceneTypesShrink)) {
    body['SceneTypes'] = request.sceneTypesShrink;
  }
  if (!Util.isUnset(request.templateInfoIdsShrink)) {
    body['TemplateInfoIds'] = request.templateInfoIdsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QuerySceneList',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/querySceneList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySceneList(request: QuerySceneListRequest): QuerySceneListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QuerySceneListHeaders{};
  return querySceneListWithOptions(request, headers, runtime);
}

model RemoveChildAccountAuthHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RemoveChildAccountAuthRequest {
  appKey?: string(name='AppKey', example='30**53'),
  childAccountName?: string(name='ChildAccountName', example='tbxxxx'),
  hotelId?: string(name='HotelId', example='af7***536'),
  tbOpenId?: string(name='TbOpenId', example='AAEV***E3d3Z2ETwh'),
}

model RemoveChildAccountAuthResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='F12B***F34E'),
  result?: boolean(name='Result', example='True'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model RemoveChildAccountAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveChildAccountAuthResponseBody(name='body'),
}

async function removeChildAccountAuthWithOptions(request: RemoveChildAccountAuthRequest, headers: RemoveChildAccountAuthHeaders, runtime: Util.RuntimeOptions): RemoveChildAccountAuthResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.childAccountName)) {
    body['ChildAccountName'] = request.childAccountName;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveChildAccountAuth',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/removeChildAccountAuth`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeChildAccountAuth(request: RemoveChildAccountAuthRequest): RemoveChildAccountAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveChildAccountAuthHeaders{};
  return removeChildAccountAuthWithOptions(request, headers, runtime);
}

model RemoveHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RemoveHotelRequest {
  appKey?: string(name='AppKey', description='appkey', example='30193305'),
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  tbOpenId?: string(name='TbOpenId', example='AAEVK***UE3d3Z2ETwh'),
}

model RemoveHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model RemoveHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveHotelResponseBody(name='body'),
}

async function removeHotelWithOptions(request: RemoveHotelRequest, headers: RemoveHotelHeaders, runtime: Util.RuntimeOptions): RemoveHotelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/removeHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeHotel(request: RemoveHotelRequest): RemoveHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveHotelHeaders{};
  return removeHotelWithOptions(request, headers, runtime);
}

model ResetWelcomeTextAndMusicHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ResetWelcomeTextAndMusicRequest {
  hotelId?: string(name='HotelId', example='af7***536'),
}

model ResetWelcomeTextAndMusicResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model ResetWelcomeTextAndMusicResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ResetWelcomeTextAndMusicResponseBody(name='body'),
}

async function resetWelcomeTextAndMusicWithOptions(request: ResetWelcomeTextAndMusicRequest, headers: ResetWelcomeTextAndMusicHeaders, runtime: Util.RuntimeOptions): ResetWelcomeTextAndMusicResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ResetWelcomeTextAndMusic',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/resetWelcomeTextAndMusic`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetWelcomeTextAndMusic(request: ResetWelcomeTextAndMusicRequest): ResetWelcomeTextAndMusicResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ResetWelcomeTextAndMusicHeaders{};
  return resetWelcomeTextAndMusicWithOptions(request, headers, runtime);
}

model RoomCheckOutHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RoomCheckOutRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='123'),
    encodeType?: string(name='EncodeType', example='HOTEL'),
    id?: string(name='Id', example='rV/XSgPuxZjx/hN3iw8U+e8ou***lk1r43LWcVW6fvY1Rr4sEPFodpnA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='123'),
  }(name='UserInfo'),
}

model RoomCheckOutShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model RoomCheckOutResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='dsvrevd'),
  result?: boolean(name='Result', example='true'),
}

model RoomCheckOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RoomCheckOutResponseBody(name='body'),
}

async function roomCheckOutWithOptions(tmpReq: RoomCheckOutRequest, headers: RoomCheckOutHeaders, runtime: Util.RuntimeOptions): RoomCheckOutResponse {
  Util.validateModel(tmpReq);
  var request = new RoomCheckOutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoomCheckOut',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/roomCheckOut`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function roomCheckOut(request: RoomCheckOutRequest): RoomCheckOutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RoomCheckOutHeaders{};
  return roomCheckOutWithOptions(request, headers, runtime);
}

model SubmitHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SubmitHotelOrderRequest {
  payload?: {
    itemList?: [ 
      {
        itemId?: long(name='ItemId', example='152860'),
        quantity?: long(name='Quantity', example='2'),
      }
    ](name='ItemList'),
    type?: string(name='Type', example='GOODS'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', example='1248494721591392955'),
    encodeType?: string(name='EncodeType', example='PROJECT_ID'),
    id?: string(name='Id', example='mFU6VtVU+pgA8lx6rYMo7SPl11t+8b+8ALrn10MIPEdpK/HI9wELAEppYhPI1cYRDa4og8AMjAEBZKbLUwFjFA=='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SubmitHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model SubmitHotelOrderResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='CCCF2E86-D9B5-12A6-AD25-8A06933D2B0F'),
  result?: string(name='Result', example='20220809104752000114671478353329'),
}

model SubmitHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitHotelOrderResponseBody(name='body'),
}

async function submitHotelOrderWithOptions(tmpReq: SubmitHotelOrderRequest, headers: SubmitHotelOrderHeaders, runtime: Util.RuntimeOptions): SubmitHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/submitHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function submitHotelOrder(request: SubmitHotelOrderRequest): SubmitHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubmitHotelOrderHeaders{};
  return submitHotelOrderWithOptions(request, headers, runtime);
}

model SyncDeviceStatusWithAkHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SyncDeviceStatusWithAkRequest {
  categoryCnName?: string(name='CategoryCnName'),
  categoryEnName?: string(name='CategoryEnName', example='light'),
  deviceName?: string(name='DeviceName'),
  hotelId?: string(name='HotelId', example='af7***536'),
  location?: string(name='Location', example='room'),
  locationCnName?: string(name='LocationCnName'),
  number?: string(name='Number', example='bedLight'),
  roomNo?: string(name='RoomNo', example='1211'),
  switch?: int32(name='Switch', example='1'),
  fanSpeed?: string(name='fanSpeed'),
  mode?: string(name='mode'),
  roomTemperature?: string(name='roomTemperature'),
  temperature?: string(name='temperature'),
  value?: int32(name='value'),
}

model SyncDeviceStatusWithAkResponseBody = {
  message?: string(name='Message', example='success'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
  requestId?: string(name='requestId', example='F12B6147-5925-19E5-A3AD-E1EE1360F34E'),
}

model SyncDeviceStatusWithAkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SyncDeviceStatusWithAkResponseBody(name='body'),
}

async function syncDeviceStatusWithAkWithOptions(request: SyncDeviceStatusWithAkRequest, headers: SyncDeviceStatusWithAkHeaders, runtime: Util.RuntimeOptions): SyncDeviceStatusWithAkResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.categoryCnName)) {
    body['CategoryCnName'] = request.categoryCnName;
  }
  if (!Util.isUnset(request.categoryEnName)) {
    body['CategoryEnName'] = request.categoryEnName;
  }
  if (!Util.isUnset(request.deviceName)) {
    body['DeviceName'] = request.deviceName;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.locationCnName)) {
    body['LocationCnName'] = request.locationCnName;
  }
  if (!Util.isUnset(request.number)) {
    body['Number'] = request.number;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }
  if (!Util.isUnset(request.switch)) {
    body['Switch'] = request.switch;
  }
  if (!Util.isUnset(request.fanSpeed)) {
    body['fanSpeed'] = request.fanSpeed;
  }
  if (!Util.isUnset(request.mode)) {
    body['mode'] = request.mode;
  }
  if (!Util.isUnset(request.roomTemperature)) {
    body['roomTemperature'] = request.roomTemperature;
  }
  if (!Util.isUnset(request.temperature)) {
    body['temperature'] = request.temperature;
  }
  if (!Util.isUnset(request.value)) {
    body['value'] = request.value;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SyncDeviceStatusWithAk',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/syncDeviceStatusWithAk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function syncDeviceStatusWithAk(request: SyncDeviceStatusWithAkRequest): SyncDeviceStatusWithAkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SyncDeviceStatusWithAkHeaders{};
  return syncDeviceStatusWithAkWithOptions(request, headers, runtime);
}

model UpdateBasicInfoQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateBasicInfoQARequest {
  checkInTime?: string(name='CheckInTime', example='11:11'),
  checkOutTime?: string(name='CheckOutTime', example='11:11'),
  hotelAddress?: string(name='HotelAddress'),
  hotelId?: string(name='HotelId', example='af7***536'),
  hotelIntroduction?: string(name='HotelIntroduction'),
  hotelMember?: string(name='HotelMember'),
  hotelService?: string(name='HotelService'),
  parkingExpenses?: string(name='ParkingExpenses'),
  parkingPosition?: string(name='ParkingPosition'),
  phoneNumber?: string(name='PhoneNumber', example='123***'),
  wifiName?: string(name='WifiName'),
  wifiPassword?: string(name='WifiPassword'),
}

model UpdateBasicInfoQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateBasicInfoQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateBasicInfoQAResponseBody(name='body'),
}

async function updateBasicInfoQAWithOptions(request: UpdateBasicInfoQARequest, headers: UpdateBasicInfoQAHeaders, runtime: Util.RuntimeOptions): UpdateBasicInfoQAResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.checkInTime)) {
    body['CheckInTime'] = request.checkInTime;
  }
  if (!Util.isUnset(request.checkOutTime)) {
    body['CheckOutTime'] = request.checkOutTime;
  }
  if (!Util.isUnset(request.hotelAddress)) {
    body['HotelAddress'] = request.hotelAddress;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.hotelIntroduction)) {
    body['HotelIntroduction'] = request.hotelIntroduction;
  }
  if (!Util.isUnset(request.hotelMember)) {
    body['HotelMember'] = request.hotelMember;
  }
  if (!Util.isUnset(request.hotelService)) {
    body['HotelService'] = request.hotelService;
  }
  if (!Util.isUnset(request.parkingExpenses)) {
    body['ParkingExpenses'] = request.parkingExpenses;
  }
  if (!Util.isUnset(request.parkingPosition)) {
    body['ParkingPosition'] = request.parkingPosition;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.wifiName)) {
    body['WifiName'] = request.wifiName;
  }
  if (!Util.isUnset(request.wifiPassword)) {
    body['WifiPassword'] = request.wifiPassword;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateBasicInfoQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateBasicInfoQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateBasicInfoQA(request: UpdateBasicInfoQARequest): UpdateBasicInfoQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateBasicInfoQAHeaders{};
  return updateBasicInfoQAWithOptions(request, headers, runtime);
}

model UpdateCustomQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateCustomQARequest {
  answers?: [ string ](name='Answers'),
  customQAId?: string(name='CustomQAId', example='1'),
  hotelId?: string(name='HotelId', example='af7***536'),
  keyWords?: [ string ](name='KeyWords'),
  majorQuestion?: string(name='MajorQuestion', example='***'),
  supplementaryQuestions?: [ string ](name='SupplementaryQuestions'),
}

model UpdateCustomQAShrinkRequest {
  answersShrink?: string(name='Answers'),
  customQAId?: string(name='CustomQAId', example='1'),
  hotelId?: string(name='HotelId', example='af7***536'),
  keyWordsShrink?: string(name='KeyWords'),
  majorQuestion?: string(name='MajorQuestion', example='***'),
  supplementaryQuestionsShrink?: string(name='SupplementaryQuestions'),
}

model UpdateCustomQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C6***BB3E6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateCustomQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCustomQAResponseBody(name='body'),
}

async function updateCustomQAWithOptions(tmpReq: UpdateCustomQARequest, headers: UpdateCustomQAHeaders, runtime: Util.RuntimeOptions): UpdateCustomQAResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateCustomQAShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.answers)) {
    request.answersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.answers, 'Answers', 'json');
  }
  if (!Util.isUnset(tmpReq.keyWords)) {
    request.keyWordsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.keyWords, 'KeyWords', 'json');
  }
  if (!Util.isUnset(tmpReq.supplementaryQuestions)) {
    request.supplementaryQuestionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.supplementaryQuestions, 'SupplementaryQuestions', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.answersShrink)) {
    body['Answers'] = request.answersShrink;
  }
  if (!Util.isUnset(request.customQAId)) {
    body['CustomQAId'] = request.customQAId;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.keyWordsShrink)) {
    body['KeyWords'] = request.keyWordsShrink;
  }
  if (!Util.isUnset(request.majorQuestion)) {
    body['MajorQuestion'] = request.majorQuestion;
  }
  if (!Util.isUnset(request.supplementaryQuestionsShrink)) {
    body['SupplementaryQuestions'] = request.supplementaryQuestionsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCustomQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateCustomQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCustomQA(request: UpdateCustomQARequest): UpdateCustomQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateCustomQAHeaders{};
  return updateCustomQAWithOptions(request, headers, runtime);
}

model UpdateHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelRequest {
  appKey?: string(name='AppKey', example='31342884'),
  estOpenTime?: string(name='EstOpenTime', example='2022-02-22 00:00:00'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail', example='a*****@hotel.com'),
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber', example='130***'),
  relatedPks?: [ string ](name='RelatedPks'),
  remark?: string(name='Remark'),
  roomNum?: int32(name='RoomNum', example='4'),
  tbOpenId?: string(name='TbOpenId', example='AAEVK***UE3d3Z2ETwh'),
}

model UpdateHotelShrinkRequest {
  appKey?: string(name='AppKey', example='31342884'),
  estOpenTime?: string(name='EstOpenTime', example='2022-02-22 00:00:00'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail', example='a*****@hotel.com'),
  hotelId?: string(name='HotelId', example='e6dd44fd16084db8a60d69fd625d9f0f'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber', example='130***'),
  relatedPksShrink?: string(name='RelatedPks'),
  remark?: string(name='Remark'),
  roomNum?: int32(name='RoomNum', example='4'),
  tbOpenId?: string(name='TbOpenId', example='AAEVK***UE3d3Z2ETwh'),
}

model UpdateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='46C53AEB-B19C-5C42-B32E-A726979C126F'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelResponseBody(name='body'),
}

async function updateHotelWithOptions(tmpReq: UpdateHotelRequest, headers: UpdateHotelHeaders, runtime: Util.RuntimeOptions): UpdateHotelResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.relatedPks)) {
    request.relatedPksShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.relatedPks, 'RelatedPks', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.estOpenTime)) {
    body['EstOpenTime'] = request.estOpenTime;
  }
  if (!Util.isUnset(request.hotelAddress)) {
    body['HotelAddress'] = request.hotelAddress;
  }
  if (!Util.isUnset(request.hotelEmail)) {
    body['HotelEmail'] = request.hotelEmail;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.hotelName)) {
    body['HotelName'] = request.hotelName;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.relatedPksShrink)) {
    body['RelatedPks'] = request.relatedPksShrink;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['RoomNum'] = request.roomNum;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHotel(request: UpdateHotelRequest): UpdateHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelHeaders{};
  return updateHotelWithOptions(request, headers, runtime);
}

model UpdateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId', example='1234567'),
      deviceOpenId?: string(name='DeviceOpenId', example='Pvk***VTA=='),
      roomNo?: string(name='RoomNo', example='101'),
      userOpenId?: string(name='UserOpenId', example='mgw/***dHQd'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId', example='a7a381a668bc485980bed3876a75e013'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day', example='20'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='0'),
      month?: int32(name='Month', example='9'),
      year?: int32(name='Year', example='2022'),
    }(name='Once'),
    type?: string(name='Type', description='ONCE, WEEKLY', example='ONCE'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour', example='10'),
      minute?: int32(name='Minute', example='0'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model UpdateHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId', example='a7a381a668bc485980bed3876a75e013'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model UpdateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67BD9-175A-1324-8202-9FAABBB3E6FA'),
  result?: int32(name='Result', example='1'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelAlarmResponseBody(name='body'),
}

async function updateHotelAlarmWithOptions(tmpReq: UpdateHotelAlarmRequest, headers: UpdateHotelAlarmHeaders, runtime: Util.RuntimeOptions): UpdateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHotelAlarm(request: UpdateHotelAlarmRequest): UpdateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelAlarmHeaders{};
  return updateHotelAlarmWithOptions(request, headers, runtime);
}

model UpdateHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelSceneBookItemRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  updateHotelSceneBookReq?: {
    icon?: string(name='Icon', description='icon', example='https://ailabs.alibabausercontent.com/platform/28d7a91e3c05db3855725fc39e0387e7/welcome_audios/aa918294b6ca3aa115c51135bf9b80cb/l9f996sq.png'),
    id?: long(name='Id', example='1'),
    name?: string(name='Name', example='青椒肉丝'),
    price?: long(name='Price', example='1250'),
  }(name='UpdateHotelSceneBookReq', description='updateHotelSceneBookReq'),
}

model UpdateHotelSceneBookItemShrinkRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  updateHotelSceneBookReqShrink?: string(name='UpdateHotelSceneBookReq', description='updateHotelSceneBookReq'),
}

model UpdateHotelSceneBookItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7*726E'),
  result?: boolean(name='Result', example='true'),
}

model UpdateHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelSceneBookItemResponseBody(name='body'),
}

async function updateHotelSceneBookItemWithOptions(tmpReq: UpdateHotelSceneBookItemRequest, headers: UpdateHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): UpdateHotelSceneBookItemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelSceneBookItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateHotelSceneBookReq)) {
    request.updateHotelSceneBookReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneBookReq, 'UpdateHotelSceneBookReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.updateHotelSceneBookReqShrink)) {
    query['UpdateHotelSceneBookReq'] = request.updateHotelSceneBookReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHotelSceneBookItem(request: UpdateHotelSceneBookItemRequest): UpdateHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelSceneBookItemHeaders{};
  return updateHotelSceneBookItemWithOptions(request, headers, runtime);
}

model UpdateHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelSceneItemRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  updateHotelSceneOperateReq?: {
    isUseTemplateAnswer?: boolean(name='IsUseTemplateAnswer', example='true'),
    operateType?: string(name='OperateType', example='OPEN'),
  }(name='UpdateHotelSceneOperateReq', description='updateHotelSceneReq'),
  updateHotelSceneReq?: {
    deliveryMethod?: string(name='DeliveryMethod'),
    dialogueList?: [ 
      {
        dialogueId?: string(name='DialogueId', example='335'),
        noAnswer?: string(name='NoAnswer', example='对不起，暂时不提供此物品'),
        noAnswerTemplate?: string(name='NoAnswerTemplate', example='4'),
        process?: int32(name='Process', example='0'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId', description='itemId', example='10337'),
        yesAnswer?: string(name='YesAnswer', example='纸巾1.5元，请问需要么？'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate', example='4'),
      }
    ](name='DialogueList'),
    icon?: string(name='Icon', description='icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/jiudianmianban_fuwushangpintu/wupin/keyongpinlei/mianqian.png'),
    id?: long(name='Id', description='itemID', example='10337'),
    name?: string(name='Name'),
    paymentMethod?: string(name='PaymentMethod'),
    price?: long(name='Price', example='165'),
    robotName?: string(name='RobotName'),
    status?: string(name='Status', example='已添加'),
  }(name='UpdateHotelSceneReq', description='UpdateHotelSceneReq'),
}

model UpdateHotelSceneItemShrinkRequest {
  hotelId?: string(name='HotelId', description='hotelID', example='80d84ea8ed9e422fbad52715c8fc56f1'),
  updateHotelSceneOperateReqShrink?: string(name='UpdateHotelSceneOperateReq', description='updateHotelSceneReq'),
  updateHotelSceneReqShrink?: string(name='UpdateHotelSceneReq', description='UpdateHotelSceneReq'),
}

model UpdateHotelSceneItemResponseBody = {
  code?: int32(name='Code', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0D0C***67DB'),
  result?: boolean(name='Result', example='true'),
}

model UpdateHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelSceneItemResponseBody(name='body'),
}

async function updateHotelSceneItemWithOptions(tmpReq: UpdateHotelSceneItemRequest, headers: UpdateHotelSceneItemHeaders, runtime: Util.RuntimeOptions): UpdateHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateHotelSceneOperateReq)) {
    request.updateHotelSceneOperateReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneOperateReq, 'UpdateHotelSceneOperateReq', 'json');
  }
  if (!Util.isUnset(tmpReq.updateHotelSceneReq)) {
    request.updateHotelSceneReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneReq, 'UpdateHotelSceneReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.updateHotelSceneOperateReqShrink)) {
    query['UpdateHotelSceneOperateReq'] = request.updateHotelSceneOperateReqShrink;
  }
  if (!Util.isUnset(request.updateHotelSceneReqShrink)) {
    query['UpdateHotelSceneReq'] = request.updateHotelSceneReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateHotelSceneItem(request: UpdateHotelSceneItemRequest): UpdateHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelSceneItemHeaders{};
  return updateHotelSceneItemWithOptions(request, headers, runtime);
}

model UpdateMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateMessageTemplateRequest {
  templateDetail?: string(name='TemplateDetail'),
  templateId?: long(name='TemplateId', example='123123'),
  templateName?: string(name='TemplateName'),
}

model UpdateMessageTemplateResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='43***881'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateMessageTemplateResponseBody(name='body'),
}

async function updateMessageTemplateWithOptions(request: UpdateMessageTemplateRequest, headers: UpdateMessageTemplateHeaders, runtime: Util.RuntimeOptions): UpdateMessageTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateDetail)) {
    body['TemplateDetail'] = request.templateDetail;
  }
  if (!Util.isUnset(request.templateId)) {
    body['TemplateId'] = request.templateId;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateMessageTemplate(request: UpdateMessageTemplateRequest): UpdateMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateMessageTemplateHeaders{};
  return updateMessageTemplateWithOptions(request, headers, runtime);
}

model UpdateRcuSceneHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateRcuSceneRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  sceneId?: string(name='SceneId', example='yoga'),
  sceneRelationExtDTO?: {
    corpusList?: [ string ](name='CorpusList'),
    description?: string(name='Description'),
    icon?: string(name='Icon', example='https://ailabsaicloudservice.alicdn.com/hotel/icon/changjingmoshi/shuimian.png'),
    name?: string(name='Name'),
  }(name='SceneRelationExtDTO'),
}

model UpdateRcuSceneShrinkRequest {
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  sceneId?: string(name='SceneId', example='yoga'),
  sceneRelationExtDTOShrink?: string(name='SceneRelationExtDTO'),
}

model UpdateRcuSceneResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='3A680F3A-6672-5A47-AB28-12BBCD80C679'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateRcuSceneResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateRcuSceneResponseBody(name='body'),
}

async function updateRcuSceneWithOptions(tmpReq: UpdateRcuSceneRequest, headers: UpdateRcuSceneHeaders, runtime: Util.RuntimeOptions): UpdateRcuSceneResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateRcuSceneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sceneRelationExtDTO)) {
    request.sceneRelationExtDTOShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sceneRelationExtDTO, 'SceneRelationExtDTO', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.sceneId)) {
    body['SceneId'] = request.sceneId;
  }
  if (!Util.isUnset(request.sceneRelationExtDTOShrink)) {
    body['SceneRelationExtDTO'] = request.sceneRelationExtDTOShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateRcuScene',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateRcuScene`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateRcuScene(request: UpdateRcuSceneRequest): UpdateRcuSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateRcuSceneHeaders{};
  return updateRcuSceneWithOptions(request, headers, runtime);
}

model UpdateServiceQAHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateServiceQARequest {
  answer?: string(name='Answer'),
  hotelId?: string(name='HotelId', example='af7***536'),
  serviceQAId?: long(name='ServiceQAId', example='1'),
  isActive?: boolean(name='isActive', example='true'),
}

model UpdateServiceQAResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='73C67***6FA'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateServiceQAResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateServiceQAResponseBody(name='body'),
}

async function updateServiceQAWithOptions(request: UpdateServiceQARequest, headers: UpdateServiceQAHeaders, runtime: Util.RuntimeOptions): UpdateServiceQAResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.answer)) {
    body['Answer'] = request.answer;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.serviceQAId)) {
    body['ServiceQAId'] = request.serviceQAId;
  }
  if (!Util.isUnset(request.isActive)) {
    body['isActive'] = request.isActive;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateServiceQA',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateServiceQA`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateServiceQA(request: UpdateServiceQARequest): UpdateServiceQAResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateServiceQAHeaders{};
  return updateServiceQAWithOptions(request, headers, runtime);
}

model UpdateTicketHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateTicketRequest {
  groupKey?: string(name='GroupKey', example='2023***93975'),
  hotelId?: string(name='HotelId', example='520a0c0***5eb'),
  status?: string(name='Status', example='waiting'),
}

model UpdateTicketResponseBody = {
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='0EC7***726E'),
  result?: boolean(name='Result', example='true'),
  statusCode?: int32(name='StatusCode', example='200'),
}

model UpdateTicketResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateTicketResponseBody(name='body'),
}

async function updateTicketWithOptions(request: UpdateTicketRequest, headers: UpdateTicketHeaders, runtime: Util.RuntimeOptions): UpdateTicketResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.groupKey)) {
    body['GroupKey'] = request.groupKey;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTicket',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateTicket`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTicket(request: UpdateTicketRequest): UpdateTicketResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateTicketHeaders{};
  return updateTicketWithOptions(request, headers, runtime);
}

