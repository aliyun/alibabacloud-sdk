/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model DeviceControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeviceControlRequest {
  payload?: {
    category?: string(name='Category'),
    cmd?: string(name='Cmd'),
    current?: string(name='Current'),
    device?: string(name='Device'),
    deviceNumber?: string(name='DeviceNumber'),
    extendInfo?: string(name='ExtendInfo'),
    location?: string(name='Location'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model DeviceControlShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    status?: string(name='Status'),
  }(name='Result'),
}

model DeviceControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeviceControlResponseBody(name='body'),
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeviceControlHeaders{};
  return deviceControlWithOptions(request, headers, runtime);
}

async function deviceControlWithOptions(tmpReq: DeviceControlRequest, headers: DeviceControlHeaders, runtime: Util.RuntimeOptions): DeviceControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeviceControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeviceControl',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deviceControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelHomeBackImageAndModesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelHomeBackImageAndModesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    backgroundImage?: string(name='BackgroundImage'),
    hotelName?: string(name='HotelName'),
    modeList?: [ 
      {
        cnName?: string(name='CnName'),
        code?: string(name='Code'),
        icon?: string(name='Icon'),
      }
    ](name='ModeList'),
  }(name='Result'),
}

model GetHotelHomeBackImageAndModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelHomeBackImageAndModesResponseBody(name='body'),
}

async function getHotelHomeBackImageAndModes(request: GetHotelHomeBackImageAndModesRequest): GetHotelHomeBackImageAndModesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelHomeBackImageAndModesHeaders{};
  return getHotelHomeBackImageAndModesWithOptions(request, headers, runtime);
}

async function getHotelHomeBackImageAndModesWithOptions(tmpReq: GetHotelHomeBackImageAndModesRequest, headers: GetHotelHomeBackImageAndModesHeaders, runtime: Util.RuntimeOptions): GetHotelHomeBackImageAndModesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelHomeBackImageAndModesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelHomeBackImageAndModes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelHomeBackImageAndModes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelOrderDetailRequest {
  payload?: {
    orderNo?: string(name='OrderNo'),
  }(name='Payload'),
}

model GetHotelOrderDetailShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model GetHotelOrderDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      itemUrl?: string(name='ItemUrl'),
      name?: string(name='Name'),
      quantity?: long(name='Quantity'),
    }
  ](name='Result'),
}

model GetHotelOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelOrderDetailResponseBody(name='body'),
}

async function getHotelOrderDetail(request: GetHotelOrderDetailRequest): GetHotelOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelOrderDetailHeaders{};
  return getHotelOrderDetailWithOptions(request, headers, runtime);
}

async function getHotelOrderDetailWithOptions(tmpReq: GetHotelOrderDetailRequest, headers: GetHotelOrderDetailHeaders, runtime: Util.RuntimeOptions): GetHotelOrderDetailResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelOrderDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelOrderDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelOrderDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelSampleUtterancesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSampleUtterancesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelSampleUtterancesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelSampleUtterancesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model GetHotelSampleUtterancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSampleUtterancesResponseBody(name='body'),
}

async function getHotelSampleUtterances(request: GetHotelSampleUtterancesRequest): GetHotelSampleUtterancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSampleUtterancesHeaders{};
  return getHotelSampleUtterancesWithOptions(request, headers, runtime);
}

async function getHotelSampleUtterancesWithOptions(tmpReq: GetHotelSampleUtterancesRequest, headers: GetHotelSampleUtterancesHeaders, runtime: Util.RuntimeOptions): GetHotelSampleUtterancesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelSampleUtterancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSampleUtterances',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSampleUtterances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelScreenSaverHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelScreenSaverRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelScreenSaverShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelScreenSaverResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    picUrl?: string(name='PicUrl'),
    styleCode?: string(name='StyleCode'),
  }(name='Result'),
}

model GetHotelScreenSaverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelScreenSaverResponseBody(name='body'),
}

async function getHotelScreenSaver(request: GetHotelScreenSaverRequest): GetHotelScreenSaverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelScreenSaverHeaders{};
  return getHotelScreenSaverWithOptions(request, headers, runtime);
}

async function getHotelScreenSaverWithOptions(tmpReq: GetHotelScreenSaverRequest, headers: GetHotelScreenSaverHeaders, runtime: Util.RuntimeOptions): GetHotelScreenSaverResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelScreenSaverShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelScreenSaver',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelScreenSaver`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelControlDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelControlDeviceRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelControlDeviceShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelControlDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model ListHotelControlDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelControlDeviceResponseBody(name='body'),
}

async function listHotelControlDevice(request: ListHotelControlDeviceRequest): ListHotelControlDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelControlDeviceHeaders{};
  return listHotelControlDeviceWithOptions(request, headers, runtime);
}

async function listHotelControlDeviceWithOptions(tmpReq: ListHotelControlDeviceRequest, headers: ListHotelControlDeviceHeaders, runtime: Util.RuntimeOptions): ListHotelControlDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelControlDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelControlDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelControlDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelOrderRequest {
  payload?: {
    page?: {
      pageNumber?: long(name='PageNumber'),
      pageSize?: long(name='PageSize'),
    }(name='Page'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      orderNo?: string(name='OrderNo'),
      quantity?: long(name='Quantity'),
      roomNo?: string(name='RoomNo'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      typeIconUrl?: string(name='TypeIconUrl'),
      typeName?: string(name='TypeName'),
    }
  ](name='Result'),
}

model ListHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelOrderResponseBody(name='body'),
}

async function listHotelOrder(request: ListHotelOrderRequest): ListHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelOrderHeaders{};
  return listHotelOrderWithOptions(request, headers, runtime);
}

async function listHotelOrderWithOptions(tmpReq: ListHotelOrderRequest, headers: ListHotelOrderHeaders, runtime: Util.RuntimeOptions): ListHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelSceneItemShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelSceneItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: {
    secondCategoryList?: [ 
      {
        itemList?: [ 
          {
            category?: string(name='Category'),
            icon?: string(name='Icon'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            price?: long(name='Price'),
            status?: string(name='Status'),
            type?: string(name='Type'),
          }
        ](name='ItemList'),
        secondCategoryName?: string(name='SecondCategoryName'),
      }
    ](name='SecondCategoryList'),
  }(name='Result'),
}

model ListHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemResponseBody(name='body'),
}

async function listHotelSceneItem(request: ListHotelSceneItemRequest): ListHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemHeaders{};
  return listHotelSceneItemWithOptions(request, headers, runtime);
}

async function listHotelSceneItemWithOptions(tmpReq: ListHotelSceneItemRequest, headers: ListHotelSceneItemHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelServiceCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelServiceCategoryRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
}

model ListHotelServiceCategoryShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model ListHotelServiceCategoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      code?: string(name='Code'),
      desc?: string(name='Desc'),
      icon?: string(name='Icon'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model ListHotelServiceCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelServiceCategoryResponseBody(name='body'),
}

async function listHotelServiceCategory(request: ListHotelServiceCategoryRequest): ListHotelServiceCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelServiceCategoryHeaders{};
  return listHotelServiceCategoryWithOptions(request, headers, runtime);
}

async function listHotelServiceCategoryWithOptions(tmpReq: ListHotelServiceCategoryRequest, headers: ListHotelServiceCategoryHeaders, runtime: Util.RuntimeOptions): ListHotelServiceCategoryResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelServiceCategoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelServiceCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelServiceCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryDeviceStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryDeviceStatusRequest {
  payload?: {
    locationDevices?: [ 
      {
        deviceNumber?: string(name='DeviceNumber'),
        deviceType?: string(name='DeviceType'),
        location?: string(name='Location'),
      }
    ](name='LocationDevices'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryDeviceStatusShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model QueryDeviceStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model QueryDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatusResponseBody(name='body'),
}

async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDeviceStatusHeaders{};
  return queryDeviceStatusWithOptions(request, headers, runtime);
}

async function queryDeviceStatusWithOptions(tmpReq: QueryDeviceStatusRequest, headers: QueryDeviceStatusHeaders, runtime: Util.RuntimeOptions): QueryDeviceStatusResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDeviceStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatus',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryDeviceStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryHotelProductHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelProductRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryHotelProductShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model QueryHotelProductResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelId?: string(name='HotelId'),
    hotelName?: string(name='HotelName'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
  }(name='Result'),
}

model QueryHotelProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelProductResponseBody(name='body'),
}

async function queryHotelProduct(request: QueryHotelProductRequest): QueryHotelProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelProductHeaders{};
  return queryHotelProductWithOptions(request, headers, runtime);
}

async function queryHotelProductWithOptions(tmpReq: QueryHotelProductRequest, headers: QueryHotelProductHeaders, runtime: Util.RuntimeOptions): QueryHotelProductResponse {
  Util.validateModel(tmpReq);
  var request = new QueryHotelProductShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelProduct',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RoomCheckOutHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RoomCheckOutRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model RoomCheckOutShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model RoomCheckOutResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model RoomCheckOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RoomCheckOutResponseBody(name='body'),
}

async function roomCheckOut(request: RoomCheckOutRequest): RoomCheckOutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RoomCheckOutHeaders{};
  return roomCheckOutWithOptions(request, headers, runtime);
}

async function roomCheckOutWithOptions(tmpReq: RoomCheckOutRequest, headers: RoomCheckOutHeaders, runtime: Util.RuntimeOptions): RoomCheckOutResponse {
  Util.validateModel(tmpReq);
  var request = new RoomCheckOutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoomCheckOut',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/roomCheckOut`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SubmitHotelOrderRequest {
  payload?: {
    itemList?: [ 
      {
        itemId?: long(name='ItemId'),
        quantity?: long(name='Quantity'),
      }
    ](name='ItemList'),
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SubmitHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model SubmitHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SubmitHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitHotelOrderResponseBody(name='body'),
}

async function submitHotelOrder(request: SubmitHotelOrderRequest): SubmitHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubmitHotelOrderHeaders{};
  return submitHotelOrderWithOptions(request, headers, runtime);
}

async function submitHotelOrderWithOptions(tmpReq: SubmitHotelOrderRequest, headers: SubmitHotelOrderHeaders, runtime: Util.RuntimeOptions): SubmitHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/submitHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

