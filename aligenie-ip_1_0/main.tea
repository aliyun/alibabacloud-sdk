/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddMessageTemplateRequest {
  templateDetail?: string(name='TemplateDetail'),
  templateName?: string(name='TemplateName'),
}

model AddMessageTemplateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model AddMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMessageTemplateResponseBody(name='body'),
}

async function addMessageTemplate(request: AddMessageTemplateRequest): AddMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddMessageTemplateHeaders{};
  return addMessageTemplateWithOptions(request, headers, runtime);
}

async function addMessageTemplateWithOptions(request: AddMessageTemplateRequest, headers: AddMessageTemplateHeaders, runtime: Util.RuntimeOptions): AddMessageTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateDetail)) {
    body['TemplateDetail'] = request.templateDetail;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AuditHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AuditHotelRequest {
  auditHotelReq?: {
    auditOpinion?: string(name='AuditOpinion'),
    hotelId?: string(name='HotelId'),
    status?: int32(name='Status'),
  }(name='AuditHotelReq'),
}

model AuditHotelShrinkRequest {
  auditHotelReqShrink?: string(name='AuditHotelReq'),
}

model AuditHotelResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model AuditHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AuditHotelResponseBody(name='body'),
}

async function auditHotel(request: AuditHotelRequest): AuditHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AuditHotelHeaders{};
  return auditHotelWithOptions(request, headers, runtime);
}

async function auditHotelWithOptions(tmpReq: AuditHotelRequest, headers: AuditHotelHeaders, runtime: Util.RuntimeOptions): AuditHotelResponse {
  Util.validateModel(tmpReq);
  var request = new AuditHotelShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.auditHotelReq)) {
    request.auditHotelReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.auditHotelReq, 'AuditHotelReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.auditHotelReqShrink)) {
    query['AuditHotelReq'] = request.auditHotelReqShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AuditHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/auditHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchAddHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchAddHotelRoomRequest {
  hotelId?: string(name='HotelId'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchAddHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchAddHotelRoomResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchAddHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddHotelRoomResponseBody(name='body'),
}

async function batchAddHotelRoom(request: BatchAddHotelRoomRequest): BatchAddHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchAddHotelRoomHeaders{};
  return batchAddHotelRoomWithOptions(request, headers, runtime);
}

async function batchAddHotelRoomWithOptions(tmpReq: BatchAddHotelRoomRequest, headers: BatchAddHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchAddHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchAddHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchDeleteHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchDeleteHotelRoomRequest {
  hotelId?: string(name='HotelId'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchDeleteHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchDeleteHotelRoomResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchDeleteHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteHotelRoomResponseBody(name='body'),
}

async function batchDeleteHotelRoom(request: BatchDeleteHotelRoomRequest): BatchDeleteHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchDeleteHotelRoomHeaders{};
  return batchDeleteHotelRoomWithOptions(request, headers, runtime);
}

async function batchDeleteHotelRoomWithOptions(tmpReq: BatchDeleteHotelRoomRequest, headers: BatchDeleteHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchDeleteHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchDeleteHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ChildAccountAuthHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ChildAccountAuthRequest {
  account?: string(name='Account'),
  appKey?: string(name='AppKey'),
  hotelId?: string(name='HotelId'),
  tbOpenId?: string(name='TbOpenId'),
}

model ChildAccountAuthResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ChildAccountAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChildAccountAuthResponseBody(name='body'),
}

async function childAccountAuth(request: ChildAccountAuthRequest): ChildAccountAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ChildAccountAuthHeaders{};
  return childAccountAuthWithOptions(request, headers, runtime);
}

async function childAccountAuthWithOptions(request: ChildAccountAuthRequest, headers: ChildAccountAuthHeaders, runtime: Util.RuntimeOptions): ChildAccountAuthResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.account)) {
    body['Account'] = request.account;
  }
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChildAccountAuth',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/childAccountAuth`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateHotelRequest {
  appKey?: string(name='AppKey'),
  estOpenTime?: string(name='EstOpenTime'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber'),
  relatedPk?: string(name='RelatedPk'),
  remark?: string(name='Remark'),
  roomNum?: int32(name='RoomNum'),
  tbOpenId?: string(name='TbOpenId'),
}

model CreateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model CreateHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHotelResponseBody(name='body'),
}

async function createHotel(request: CreateHotelRequest): CreateHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateHotelHeaders{};
  return createHotelWithOptions(request, headers, runtime);
}

async function createHotelWithOptions(request: CreateHotelRequest, headers: CreateHotelHeaders, runtime: Util.RuntimeOptions): CreateHotelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.estOpenTime)) {
    body['EstOpenTime'] = request.estOpenTime;
  }
  if (!Util.isUnset(request.hotelAddress)) {
    body['HotelAddress'] = request.hotelAddress;
  }
  if (!Util.isUnset(request.hotelEmail)) {
    body['HotelEmail'] = request.hotelEmail;
  }
  if (!Util.isUnset(request.hotelName)) {
    body['HotelName'] = request.hotelName;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.relatedPk)) {
    body['RelatedPk'] = request.relatedPk;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['RoomNum'] = request.roomNum;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateHotelAlarmRequest {
  hotelId?: string(name='HotelId'),
  musicType?: string(name='MusicType'),
  rooms?: [ string ](name='Rooms'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
      month?: int32(name='Month'),
      year?: int32(name='Year'),
    }(name='Once'),
    type?: string(name='Type'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model CreateHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId'),
  musicType?: string(name='MusicType'),
  roomsShrink?: string(name='Rooms'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model CreateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      failMsg?: string(name='FailMsg'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model CreateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHotelAlarmResponseBody(name='body'),
}

async function createHotelAlarm(request: CreateHotelAlarmRequest): CreateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateHotelAlarmHeaders{};
  return createHotelAlarmWithOptions(request, headers, runtime);
}

async function createHotelAlarmWithOptions(tmpReq: CreateHotelAlarmRequest, headers: CreateHotelAlarmHeaders, runtime: Util.RuntimeOptions): CreateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new CreateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.musicType)) {
    body['MusicType'] = request.musicType;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId'),
}

model DeleteHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId'),
}

model DeleteHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model DeleteHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelAlarmResponseBody(name='body'),
}

async function deleteHotelAlarm(request: DeleteHotelAlarmRequest): DeleteHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelAlarmHeaders{};
  return deleteHotelAlarmWithOptions(request, headers, runtime);
}

async function deleteHotelAlarmWithOptions(tmpReq: DeleteHotelAlarmRequest, headers: DeleteHotelAlarmHeaders, runtime: Util.RuntimeOptions): DeleteHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelSceneBookItemRequest {
  hotelId?: string(name='HotelId'),
  id?: long(name='Id'),
}

model DeleteHotelSceneBookItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeleteHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelSceneBookItemResponseBody(name='body'),
}

async function deleteHotelSceneBookItem(request: DeleteHotelSceneBookItemRequest): DeleteHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelSceneBookItemHeaders{};
  return deleteHotelSceneBookItemWithOptions(request, headers, runtime);
}

async function deleteHotelSceneBookItemWithOptions(request: DeleteHotelSceneBookItemRequest, headers: DeleteHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): DeleteHotelSceneBookItemResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.id)) {
    body['Id'] = request.id;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeviceControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeviceControlRequest {
  payload?: {
    category?: string(name='Category'),
    cmd?: string(name='Cmd'),
    deviceNumber?: string(name='DeviceNumber'),
    extendInfo?: string(name='ExtendInfo'),
    location?: string(name='Location'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model DeviceControlShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    status?: string(name='Status'),
  }(name='Result'),
}

model DeviceControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeviceControlResponseBody(name='body'),
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeviceControlHeaders{};
  return deviceControlWithOptions(request, headers, runtime);
}

async function deviceControlWithOptions(tmpReq: DeviceControlRequest, headers: DeviceControlHeaders, runtime: Util.RuntimeOptions): DeviceControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeviceControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeviceControl',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deviceControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelHomeBackImageAndModesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelHomeBackImageAndModesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    backgroundImage?: string(name='BackgroundImage'),
    hotelName?: string(name='HotelName'),
    modeList?: [ 
      {
        cnName?: string(name='CnName'),
        code?: string(name='Code'),
        icon?: string(name='Icon'),
      }
    ](name='ModeList'),
  }(name='Result'),
}

model GetHotelHomeBackImageAndModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelHomeBackImageAndModesResponseBody(name='body'),
}

async function getHotelHomeBackImageAndModes(request: GetHotelHomeBackImageAndModesRequest): GetHotelHomeBackImageAndModesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelHomeBackImageAndModesHeaders{};
  return getHotelHomeBackImageAndModesWithOptions(request, headers, runtime);
}

async function getHotelHomeBackImageAndModesWithOptions(tmpReq: GetHotelHomeBackImageAndModesRequest, headers: GetHotelHomeBackImageAndModesHeaders, runtime: Util.RuntimeOptions): GetHotelHomeBackImageAndModesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelHomeBackImageAndModesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelHomeBackImageAndModes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelHomeBackImageAndModes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelNoticeHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelNoticeRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelNoticeShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelNoticeResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model GetHotelNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelNoticeResponseBody(name='body'),
}

async function getHotelNotice(request: GetHotelNoticeRequest): GetHotelNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelNoticeHeaders{};
  return getHotelNoticeWithOptions(request, headers, runtime);
}

async function getHotelNoticeWithOptions(tmpReq: GetHotelNoticeRequest, headers: GetHotelNoticeHeaders, runtime: Util.RuntimeOptions): GetHotelNoticeResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelNoticeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelNotice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelNotice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelOrderDetailRequest {
  payload?: {
    orderNo?: string(name='OrderNo'),
  }(name='Payload'),
}

model GetHotelOrderDetailShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model GetHotelOrderDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      itemUrl?: string(name='ItemUrl'),
      name?: string(name='Name'),
      quantity?: long(name='Quantity'),
    }
  ](name='Result'),
}

model GetHotelOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelOrderDetailResponseBody(name='body'),
}

async function getHotelOrderDetail(request: GetHotelOrderDetailRequest): GetHotelOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelOrderDetailHeaders{};
  return getHotelOrderDetailWithOptions(request, headers, runtime);
}

async function getHotelOrderDetailWithOptions(tmpReq: GetHotelOrderDetailRequest, headers: GetHotelOrderDetailHeaders, runtime: Util.RuntimeOptions): GetHotelOrderDetailResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelOrderDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelOrderDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelOrderDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelRoomDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelRoomDeviceRequest {
  hotelId?: string(name='HotelId'),
  roomNo?: string(name='RoomNo'),
}

model GetHotelRoomDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion'),
      hotelId?: string(name='HotelId'),
      mac?: string(name='Mac'),
      onlineStatus?: int32(name='OnlineStatus'),
      roomNo?: string(name='RoomNo'),
      sn?: string(name='Sn'),
    }
  ](name='Result'),
}

model GetHotelRoomDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelRoomDeviceResponseBody(name='body'),
}

async function getHotelRoomDevice(request: GetHotelRoomDeviceRequest): GetHotelRoomDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelRoomDeviceHeaders{};
  return getHotelRoomDeviceWithOptions(request, headers, runtime);
}

async function getHotelRoomDeviceWithOptions(request: GetHotelRoomDeviceRequest, headers: GetHotelRoomDeviceHeaders, runtime: Util.RuntimeOptions): GetHotelRoomDeviceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelRoomDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelRoomDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelSampleUtterancesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSampleUtterancesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelSampleUtterancesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelSampleUtterancesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model GetHotelSampleUtterancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSampleUtterancesResponseBody(name='body'),
}

async function getHotelSampleUtterances(request: GetHotelSampleUtterancesRequest): GetHotelSampleUtterancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSampleUtterancesHeaders{};
  return getHotelSampleUtterancesWithOptions(request, headers, runtime);
}

async function getHotelSampleUtterancesWithOptions(tmpReq: GetHotelSampleUtterancesRequest, headers: GetHotelSampleUtterancesHeaders, runtime: Util.RuntimeOptions): GetHotelSampleUtterancesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelSampleUtterancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSampleUtterances',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSampleUtterances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelSceneItemDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSceneItemDetailRequest {
  hotelId?: string(name='HotelId'),
  itemId?: long(name='ItemId'),
}

model GetHotelSceneItemDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    category?: string(name='Category'),
    dialogueList?: [ 
      {
        createTime?: long(name='CreateTime'),
        dialogueId?: string(name='DialogueId'),
        noAnswer?: string(name='NoAnswer'),
        noAnswerTemplate?: string(name='NoAnswerTemplate'),
        process?: int32(name='Process'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId'),
        updateTime?: long(name='UpdateTime'),
        yesAnswer?: string(name='YesAnswer'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate'),
      }
    ](name='DialogueList'),
    icon?: string(name='Icon'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    price?: long(name='Price'),
    status?: string(name='Status'),
    type?: string(name='Type'),
    updateTime?: long(name='UpdateTime'),
  }(name='Result'),
}

model GetHotelSceneItemDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSceneItemDetailResponseBody(name='body'),
}

async function getHotelSceneItemDetail(request: GetHotelSceneItemDetailRequest): GetHotelSceneItemDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSceneItemDetailHeaders{};
  return getHotelSceneItemDetailWithOptions(request, headers, runtime);
}

async function getHotelSceneItemDetailWithOptions(request: GetHotelSceneItemDetailRequest, headers: GetHotelSceneItemDetailHeaders, runtime: Util.RuntimeOptions): GetHotelSceneItemDetailResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.itemId)) {
    body['ItemId'] = request.itemId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSceneItemDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSceneItemDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelScreenSaverHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelScreenSaverRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelScreenSaverShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelScreenSaverResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    picUrl?: string(name='PicUrl'),
    styleCode?: string(name='StyleCode'),
  }(name='Result'),
}

model GetHotelScreenSaverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelScreenSaverResponseBody(name='body'),
}

async function getHotelScreenSaver(request: GetHotelScreenSaverRequest): GetHotelScreenSaverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelScreenSaverHeaders{};
  return getHotelScreenSaverWithOptions(request, headers, runtime);
}

async function getHotelScreenSaverWithOptions(tmpReq: GetHotelScreenSaverRequest, headers: GetHotelScreenSaverHeaders, runtime: Util.RuntimeOptions): GetHotelScreenSaverResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelScreenSaverShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelScreenSaver',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelScreenSaver`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ImportRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ImportRoomControlDevicesRequest {
  hotelId?: string(name='HotelId'),
  locationDevices?: [ 
    {
      devices?: [ 
        {
          deviceName?: string(name='DeviceName'),
          name?: string(name='Name'),
          number?: string(name='Number'),
        }
      ](name='Devices'),
      location?: string(name='Location'),
      locationName?: string(name='LocationName'),
    }
  ](name='LocationDevices'),
  roomNo?: string(name='RoomNo'),
}

model ImportRoomControlDevicesShrinkRequest {
  hotelId?: string(name='HotelId'),
  locationDevicesShrink?: string(name='LocationDevices'),
  roomNo?: string(name='RoomNo'),
}

model ImportRoomControlDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ImportRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportRoomControlDevicesResponseBody(name='body'),
}

async function importRoomControlDevices(request: ImportRoomControlDevicesRequest): ImportRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ImportRoomControlDevicesHeaders{};
  return importRoomControlDevicesWithOptions(request, headers, runtime);
}

async function importRoomControlDevicesWithOptions(tmpReq: ImportRoomControlDevicesRequest, headers: ImportRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): ImportRoomControlDevicesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportRoomControlDevicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.locationDevices)) {
    request.locationDevicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDevices, 'LocationDevices', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.locationDevicesShrink)) {
    body['LocationDevices'] = request.locationDevicesShrink;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/importRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model InsertHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model InsertHotelSceneBookItemRequest {
  addHotelSceneItemReq?: {
    icon?: string(name='Icon'),
    name?: string(name='Name'),
    price?: long(name='Price'),
    type?: string(name='Type'),
  }(name='AddHotelSceneItemReq'),
  hotelId?: string(name='HotelId'),
}

model InsertHotelSceneBookItemShrinkRequest {
  addHotelSceneItemReqShrink?: string(name='AddHotelSceneItemReq'),
  hotelId?: string(name='HotelId'),
}

model InsertHotelSceneBookItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model InsertHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InsertHotelSceneBookItemResponseBody(name='body'),
}

async function insertHotelSceneBookItem(request: InsertHotelSceneBookItemRequest): InsertHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new InsertHotelSceneBookItemHeaders{};
  return insertHotelSceneBookItemWithOptions(request, headers, runtime);
}

async function insertHotelSceneBookItemWithOptions(tmpReq: InsertHotelSceneBookItemRequest, headers: InsertHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): InsertHotelSceneBookItemResponse {
  Util.validateModel(tmpReq);
  var request = new InsertHotelSceneBookItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.addHotelSceneItemReq)) {
    request.addHotelSceneItemReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.addHotelSceneItemReq, 'AddHotelSceneItemReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.addHotelSceneItemReqShrink)) {
    query['AddHotelSceneItemReq'] = request.addHotelSceneItemReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'InsertHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/insertHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListDialogueTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListDialogueTemplateRequest {
  hotelId?: string(name='HotelId'),
}

model ListDialogueTemplateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      templateDetail?: {
        firstDialogueTemplate?: {
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer'),
          zeroPriceNoAnswer?: string(name='ZeroPriceNoAnswer'),
          zeroPriceYesAnswer?: string(name='ZeroPriceYesAnswer'),
        }(name='FirstDialogueTemplate'),
        secondDialogueTemplate?: {
          nonzeroPriceNoAnswer?: string(name='NonzeroPriceNoAnswer'),
          nonzeroPriceYesAnswer?: string(name='NonzeroPriceYesAnswer'),
        }(name='SecondDialogueTemplate'),
      }(name='TemplateDetail'),
      templateId?: long(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model ListDialogueTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDialogueTemplateResponseBody(name='body'),
}

async function listDialogueTemplate(request: ListDialogueTemplateRequest): ListDialogueTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListDialogueTemplateHeaders{};
  return listDialogueTemplateWithOptions(request, headers, runtime);
}

async function listDialogueTemplateWithOptions(request: ListDialogueTemplateRequest, headers: ListDialogueTemplateHeaders, runtime: Util.RuntimeOptions): ListDialogueTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListDialogueTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listDialogueTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelAlarmRequest {
  hotelId?: string(name='HotelId'),
  rooms?: [ string ](name='Rooms'),
}

model ListHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomsShrink?: string(name='Rooms'),
}

model ListHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      scheduleInfo?: {
        once?: {
          day?: int32(name='Day'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
          month?: int32(name='Month'),
          year?: int32(name='Year'),
        }(name='Once'),
        type?: string(name='Type'),
        weekly?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
        }(name='Weekly'),
      }(name='ScheduleInfo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ListHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelAlarmResponseBody(name='body'),
}

async function listHotelAlarm(request: ListHotelAlarmRequest): ListHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelAlarmHeaders{};
  return listHotelAlarmWithOptions(request, headers, runtime);
}

async function listHotelAlarmWithOptions(tmpReq: ListHotelAlarmRequest, headers: ListHotelAlarmHeaders, runtime: Util.RuntimeOptions): ListHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelAlarmList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelControlDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelControlDeviceRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelControlDeviceShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelControlDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model ListHotelControlDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelControlDeviceResponseBody(name='body'),
}

async function listHotelControlDevice(request: ListHotelControlDeviceRequest): ListHotelControlDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelControlDeviceHeaders{};
  return listHotelControlDeviceWithOptions(request, headers, runtime);
}

async function listHotelControlDeviceWithOptions(tmpReq: ListHotelControlDeviceRequest, headers: ListHotelControlDeviceHeaders, runtime: Util.RuntimeOptions): ListHotelControlDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelControlDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelControlDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelControlDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelInfoResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      authAccount?: [ 
        {
          userName?: string(name='UserName'),
        }
      ](name='AuthAccount'),
      hotelAddress?: string(name='HotelAddress'),
      hotelId?: string(name='HotelId'),
      hotelName?: string(name='HotelName'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ListHotelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelInfoResponseBody(name='body'),
}

async function listHotelInfo(): ListHotelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelInfoHeaders{};
  return listHotelInfoWithOptions(headers, runtime);
}

async function listHotelInfoWithOptions(headers: ListHotelInfoHeaders, runtime: Util.RuntimeOptions): ListHotelInfoResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelInfo',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelMessageTemplateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      auditMark?: string(name='AuditMark'),
      auditStatus?: string(name='AuditStatus'),
      templateDetail?: string(name='TemplateDetail'),
      templateId?: long(name='TemplateId'),
      templateName?: string(name='TemplateName'),
    }
  ](name='Result'),
}

model ListHotelMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelMessageTemplateResponseBody(name='body'),
}

async function listHotelMessageTemplate(): ListHotelMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelMessageTemplateHeaders{};
  return listHotelMessageTemplateWithOptions(headers, runtime);
}

async function listHotelMessageTemplateWithOptions(headers: ListHotelMessageTemplateHeaders, runtime: Util.RuntimeOptions): ListHotelMessageTemplateResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelOrderRequest {
  payload?: {
    page?: {
      pageNumber?: long(name='PageNumber'),
      pageSize?: long(name='PageSize'),
    }(name='Page'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      orderNo?: string(name='OrderNo'),
      quantity?: long(name='Quantity'),
      roomNo?: string(name='RoomNo'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      typeIconUrl?: string(name='TypeIconUrl'),
      typeName?: string(name='TypeName'),
    }
  ](name='Result'),
}

model ListHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelOrderResponseBody(name='body'),
}

async function listHotelOrder(request: ListHotelOrderRequest): ListHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelOrderHeaders{};
  return listHotelOrderWithOptions(request, headers, runtime);
}

async function listHotelOrderWithOptions(tmpReq: ListHotelOrderRequest, headers: ListHotelOrderHeaders, runtime: Util.RuntimeOptions): ListHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelRoomsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelRoomsRequest {
  hotelId?: string(name='HotelId'),
}

model ListHotelRoomsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      hotelId?: string(name='HotelId'),
      roomNo?: string(name='RoomNo'),
    }
  ](name='Result'),
}

model ListHotelRoomsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelRoomsResponseBody(name='body'),
}

async function listHotelRooms(request: ListHotelRoomsRequest): ListHotelRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelRoomsHeaders{};
  return listHotelRoomsWithOptions(request, headers, runtime);
}

async function listHotelRoomsWithOptions(request: ListHotelRoomsRequest, headers: ListHotelRoomsHeaders, runtime: Util.RuntimeOptions): ListHotelRoomsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelRooms',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelRooms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelSceneBookItemsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneBookItemsRequest {
  hotelId?: string(name='HotelId'),
  page?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
  }(name='Page'),
  type?: string(name='Type'),
}

model ListHotelSceneBookItemsShrinkRequest {
  hotelId?: string(name='HotelId'),
  pageShrink?: string(name='Page'),
  type?: string(name='Type'),
}

model ListHotelSceneBookItemsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext'),
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
      totalPage?: int32(name='TotalPage'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        icon?: string(name='Icon'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        price?: long(name='Price'),
        status?: string(name='Status'),
        type?: string(name='Type'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneBookItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneBookItemsResponseBody(name='body'),
}

async function listHotelSceneBookItems(request: ListHotelSceneBookItemsRequest): ListHotelSceneBookItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneBookItemsHeaders{};
  return listHotelSceneBookItemsWithOptions(request, headers, runtime);
}

async function listHotelSceneBookItemsWithOptions(tmpReq: ListHotelSceneBookItemsRequest, headers: ListHotelSceneBookItemsHeaders, runtime: Util.RuntimeOptions): ListHotelSceneBookItemsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneBookItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneBookItems',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneBookItems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelSceneItemShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelSceneItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: {
    secondCategoryList?: [ 
      {
        itemList?: [ 
          {
            category?: string(name='Category'),
            icon?: string(name='Icon'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            price?: long(name='Price'),
            status?: string(name='Status'),
            type?: string(name='Type'),
          }
        ](name='ItemList'),
        secondCategoryName?: string(name='SecondCategoryName'),
      }
    ](name='SecondCategoryList'),
  }(name='Result'),
}

model ListHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemResponseBody(name='body'),
}

async function listHotelSceneItem(request: ListHotelSceneItemRequest): ListHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemHeaders{};
  return listHotelSceneItemWithOptions(request, headers, runtime);
}

async function listHotelSceneItemWithOptions(tmpReq: ListHotelSceneItemRequest, headers: ListHotelSceneItemHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelSceneItemsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemsRequest {
  hotelId?: string(name='HotelId'),
  listHotelSceneReq?: {
    category?: string(name='Category'),
    keywords?: string(name='Keywords'),
    page?: {
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
    }(name='Page'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='ListHotelSceneReq'),
}

model ListHotelSceneItemsShrinkRequest {
  hotelId?: string(name='HotelId'),
  listHotelSceneReqShrink?: string(name='ListHotelSceneReq'),
}

model ListHotelSceneItemsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    page?: {
      hasNext?: boolean(name='HasNext'),
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
      totalPage?: int32(name='TotalPage'),
    }(name='Page'),
    sceneItemList?: [ 
      {
        category?: string(name='Category'),
        icon?: string(name='Icon'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        price?: long(name='Price'),
        status?: string(name='Status'),
        type?: string(name='Type'),
        updateTime?: long(name='UpdateTime'),
      }
    ](name='SceneItemList'),
  }(name='Result'),
}

model ListHotelSceneItemsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemsResponseBody(name='body'),
}

async function listHotelSceneItems(request: ListHotelSceneItemsRequest): ListHotelSceneItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemsHeaders{};
  return listHotelSceneItemsWithOptions(request, headers, runtime);
}

async function listHotelSceneItemsWithOptions(tmpReq: ListHotelSceneItemsRequest, headers: ListHotelSceneItemsHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listHotelSceneReq)) {
    request.listHotelSceneReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listHotelSceneReq, 'ListHotelSceneReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.listHotelSceneReqShrink)) {
    query['ListHotelSceneReq'] = request.listHotelSceneReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItems',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItems`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelServiceCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelServiceCategoryRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
}

model ListHotelServiceCategoryShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model ListHotelServiceCategoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      code?: string(name='Code'),
      desc?: string(name='Desc'),
      icon?: string(name='Icon'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model ListHotelServiceCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelServiceCategoryResponseBody(name='body'),
}

async function listHotelServiceCategory(request: ListHotelServiceCategoryRequest): ListHotelServiceCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelServiceCategoryHeaders{};
  return listHotelServiceCategoryWithOptions(request, headers, runtime);
}

async function listHotelServiceCategoryWithOptions(tmpReq: ListHotelServiceCategoryRequest, headers: ListHotelServiceCategoryHeaders, runtime: Util.RuntimeOptions): ListHotelServiceCategoryResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelServiceCategoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelServiceCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelServiceCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelsRequest {
  page?: {
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
  }(name='Page'),
  status?: int32(name='Status'),
}

model ListHotelsShrinkRequest {
  pageShrink?: string(name='Page'),
  status?: int32(name='Status'),
}

model ListHotelsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelInfoList?: [ 
      {
        accountNames?: [ string ](name='AccountNames'),
        createTime?: long(name='CreateTime'),
        hotelAddress?: string(name='HotelAddress'),
        hotelId?: string(name='HotelId'),
        hotelName?: string(name='HotelName'),
        industryType?: string(name='IndustryType'),
        phoneNumber?: string(name='PhoneNumber'),
        relatedProductName?: string(name='RelatedProductName'),
        roomNum?: int32(name='RoomNum'),
        status?: int32(name='Status'),
      }
    ](name='HotelInfoList'),
    page?: {
      hasNext?: boolean(name='HasNext'),
      pageNumber?: int32(name='PageNumber'),
      pageSize?: int32(name='PageSize'),
      total?: int32(name='Total'),
      totalPage?: int32(name='TotalPage'),
    }(name='Page'),
  }(name='Result'),
}

model ListHotelsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelsResponseBody(name='body'),
}

async function listHotels(request: ListHotelsRequest): ListHotelsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelsHeaders{};
  return listHotelsWithOptions(request, headers, runtime);
}

async function listHotelsWithOptions(tmpReq: ListHotelsRequest, headers: ListHotelsHeaders, runtime: Util.RuntimeOptions): ListHotelsResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotels',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotels`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListSceneCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListSceneCategoryRequest {
  hotelId?: string(name='HotelId'),
  type?: string(name='Type'),
}

model ListSceneCategoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model ListSceneCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListSceneCategoryResponseBody(name='body'),
}

async function listSceneCategory(request: ListSceneCategoryRequest): ListSceneCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListSceneCategoryHeaders{};
  return listSceneCategoryWithOptions(request, headers, runtime);
}

async function listSceneCategoryWithOptions(request: ListSceneCategoryRequest, headers: ListSceneCategoryHeaders, runtime: Util.RuntimeOptions): ListSceneCategoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListSceneCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listSceneCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PageGetHotelRoomDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PageGetHotelRoomDevicesRequest {
  hotelId?: string(name='HotelId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model PageGetHotelRoomDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  page?: {
    end?: int32(name='End'),
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    start?: int32(name='Start'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion'),
      hotelId?: string(name='HotelId'),
      mac?: string(name='Mac'),
      onlineStatus?: int32(name='OnlineStatus'),
      roomNo?: string(name='RoomNo'),
      sn?: string(name='Sn'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model PageGetHotelRoomDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PageGetHotelRoomDevicesResponseBody(name='body'),
}

async function pageGetHotelRoomDevices(request: PageGetHotelRoomDevicesRequest): PageGetHotelRoomDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PageGetHotelRoomDevicesHeaders{};
  return pageGetHotelRoomDevicesWithOptions(request, headers, runtime);
}

async function pageGetHotelRoomDevicesWithOptions(request: PageGetHotelRoomDevicesRequest, headers: PageGetHotelRoomDevicesHeaders, runtime: Util.RuntimeOptions): PageGetHotelRoomDevicesResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PageGetHotelRoomDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pageGetHotelRoomDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PushHotelMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushHotelMessageRequest {
  pushHotelMessageReq?: {
    hotelId?: string(name='HotelId'),
    paramMap?: map[string]string(name='ParamMap'),
    roomNo?: string(name='RoomNo'),
    templateId?: long(name='TemplateId'),
  }(name='PushHotelMessageReq'),
}

model PushHotelMessageShrinkRequest {
  pushHotelMessageReqShrink?: string(name='PushHotelMessageReq'),
}

model PushHotelMessageResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushHotelMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushHotelMessageResponseBody(name='body'),
}

async function pushHotelMessage(request: PushHotelMessageRequest): PushHotelMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PushHotelMessageHeaders{};
  return pushHotelMessageWithOptions(request, headers, runtime);
}

async function pushHotelMessageWithOptions(tmpReq: PushHotelMessageRequest, headers: PushHotelMessageHeaders, runtime: Util.RuntimeOptions): PushHotelMessageResponse {
  Util.validateModel(tmpReq);
  var request = new PushHotelMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pushHotelMessageReq)) {
    request.pushHotelMessageReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pushHotelMessageReq, 'PushHotelMessageReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pushHotelMessageReqShrink)) {
    query['PushHotelMessageReq'] = request.pushHotelMessageReqShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushHotelMessage',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pushHotelMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryDeviceStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryDeviceStatusRequest {
  payload?: {
    locationDevices?: [ 
      {
        deviceNumber?: string(name='DeviceNumber'),
        deviceType?: string(name='DeviceType'),
        location?: string(name='Location'),
      }
    ](name='LocationDevices'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryDeviceStatusShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model QueryDeviceStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model QueryDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatusResponseBody(name='body'),
}

async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDeviceStatusHeaders{};
  return queryDeviceStatusWithOptions(request, headers, runtime);
}

async function queryDeviceStatusWithOptions(tmpReq: QueryDeviceStatusRequest, headers: QueryDeviceStatusHeaders, runtime: Util.RuntimeOptions): QueryDeviceStatusResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDeviceStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatus',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryDeviceStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryHotelListByAkHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelListByAkResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelInfoForList?: [ 
      {
        accessMode?: string(name='AccessMode'),
        auditOpinion?: string(name='AuditOpinion'),
        createTime?: string(name='CreateTime'),
        estOpenTime?: string(name='EstOpenTime'),
        hotelAddress?: string(name='HotelAddress'),
        hotelEmail?: string(name='HotelEmail'),
        hotelId?: string(name='HotelId'),
        hotelName?: string(name='HotelName'),
        industryType?: string(name='IndustryType'),
        phoneNumber?: string(name='PhoneNumber'),
        relatedName?: string(name='RelatedName'),
        relatedPk?: string(name='RelatedPk'),
        remark?: string(name='Remark'),
        roomNum?: int32(name='RoomNum'),
        status?: int32(name='Status'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='HotelInfoForList'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model QueryHotelListByAkResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelListByAkResponseBody(name='body'),
}

async function queryHotelListByAk(): QueryHotelListByAkResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelListByAkHeaders{};
  return queryHotelListByAkWithOptions(headers, runtime);
}

async function queryHotelListByAkWithOptions(headers: QueryHotelListByAkHeaders, runtime: Util.RuntimeOptions): QueryHotelListByAkResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelListByAk',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelListByAk`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryHotelListByTbOpenIdHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelListByTbOpenIdRequest {
  appKey?: string(name='AppKey'),
  tbOpenId?: string(name='TbOpenId'),
}

model QueryHotelListByTbOpenIdResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelInfoForList?: [ 
      {
        accessMode?: string(name='AccessMode'),
        auditOpinion?: string(name='AuditOpinion'),
        createTime?: string(name='CreateTime'),
        estOpenTime?: string(name='EstOpenTime'),
        hotelAddress?: string(name='HotelAddress'),
        hotelEmail?: string(name='HotelEmail'),
        hotelId?: string(name='HotelId'),
        hotelName?: string(name='HotelName'),
        industryType?: string(name='IndustryType'),
        phoneNumber?: string(name='PhoneNumber'),
        relatedName?: string(name='RelatedName'),
        relatedPk?: string(name='RelatedPk'),
        remark?: string(name='Remark'),
        roomNum?: int32(name='RoomNum'),
        status?: int32(name='Status'),
        updateTime?: string(name='UpdateTime'),
      }
    ](name='HotelInfoForList'),
  }(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model QueryHotelListByTbOpenIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelListByTbOpenIdResponseBody(name='body'),
}

async function queryHotelListByTbOpenId(request: QueryHotelListByTbOpenIdRequest): QueryHotelListByTbOpenIdResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelListByTbOpenIdHeaders{};
  return queryHotelListByTbOpenIdWithOptions(request, headers, runtime);
}

async function queryHotelListByTbOpenIdWithOptions(request: QueryHotelListByTbOpenIdRequest, headers: QueryHotelListByTbOpenIdHeaders, runtime: Util.RuntimeOptions): QueryHotelListByTbOpenIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelListByTbOpenId',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelListByTbOpenId`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryHotelProductHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelProductRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryHotelProductShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model QueryHotelProductResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelId?: string(name='HotelId'),
    hotelName?: string(name='HotelName'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
  }(name='Result'),
}

model QueryHotelProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelProductResponseBody(name='body'),
}

async function queryHotelProduct(request: QueryHotelProductRequest): QueryHotelProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelProductHeaders{};
  return queryHotelProductWithOptions(request, headers, runtime);
}

async function queryHotelProductWithOptions(tmpReq: QueryHotelProductRequest, headers: QueryHotelProductHeaders, runtime: Util.RuntimeOptions): QueryHotelProductResponse {
  Util.validateModel(tmpReq);
  var request = new QueryHotelProductShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelProduct',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryRoomControlDevicesRequest {
  hotelId?: string(name='HotelId'),
  roomNo?: string(name='RoomNo'),
}

model QueryRoomControlDevicesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      devices?: [ 
        {
          deviceName?: string(name='DeviceName'),
          name?: string(name='Name'),
          number?: string(name='Number'),
        }
      ](name='Devices'),
      location?: string(name='Location'),
      locationName?: string(name='LocationName'),
    }
  ](name='Result'),
}

model QueryRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRoomControlDevicesResponseBody(name='body'),
}

async function queryRoomControlDevices(request: QueryRoomControlDevicesRequest): QueryRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryRoomControlDevicesHeaders{};
  return queryRoomControlDevicesWithOptions(request, headers, runtime);
}

async function queryRoomControlDevicesWithOptions(request: QueryRoomControlDevicesRequest, headers: QueryRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): QueryRoomControlDevicesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RemoveHotelRequest {
  appKey?: string(name='AppKey'),
  hotelId?: string(name='HotelId'),
  tbOpenId?: string(name='TbOpenId'),
}

model RemoveHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model RemoveHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveHotelResponseBody(name='body'),
}

async function removeHotel(request: RemoveHotelRequest): RemoveHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RemoveHotelHeaders{};
  return removeHotelWithOptions(request, headers, runtime);
}

async function removeHotelWithOptions(request: RemoveHotelRequest, headers: RemoveHotelHeaders, runtime: Util.RuntimeOptions): RemoveHotelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/removeHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RoomCheckOutHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RoomCheckOutRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model RoomCheckOutShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model RoomCheckOutResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model RoomCheckOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RoomCheckOutResponseBody(name='body'),
}

async function roomCheckOut(request: RoomCheckOutRequest): RoomCheckOutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RoomCheckOutHeaders{};
  return roomCheckOutWithOptions(request, headers, runtime);
}

async function roomCheckOutWithOptions(tmpReq: RoomCheckOutRequest, headers: RoomCheckOutHeaders, runtime: Util.RuntimeOptions): RoomCheckOutResponse {
  Util.validateModel(tmpReq);
  var request = new RoomCheckOutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoomCheckOut',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/roomCheckOut`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SubmitHotelOrderRequest {
  payload?: {
    itemList?: [ 
      {
        itemId?: long(name='ItemId'),
        quantity?: long(name='Quantity'),
      }
    ](name='ItemList'),
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SubmitHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model SubmitHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SubmitHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitHotelOrderResponseBody(name='body'),
}

async function submitHotelOrder(request: SubmitHotelOrderRequest): SubmitHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubmitHotelOrderHeaders{};
  return submitHotelOrderWithOptions(request, headers, runtime);
}

async function submitHotelOrderWithOptions(tmpReq: SubmitHotelOrderRequest, headers: SubmitHotelOrderHeaders, runtime: Util.RuntimeOptions): SubmitHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/submitHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHotelHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelRequest {
  appKey?: string(name='AppKey'),
  estOpenTime?: string(name='EstOpenTime'),
  hotelAddress?: string(name='HotelAddress'),
  hotelEmail?: string(name='HotelEmail'),
  hotelId?: string(name='HotelId'),
  hotelName?: string(name='HotelName'),
  phoneNumber?: string(name='PhoneNumber'),
  remark?: string(name='Remark'),
  roomNum?: int32(name='RoomNum'),
  tbOpenId?: string(name='TbOpenId'),
}

model UpdateHotelResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model UpdateHotelResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelResponseBody(name='body'),
}

async function updateHotel(request: UpdateHotelRequest): UpdateHotelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelHeaders{};
  return updateHotelWithOptions(request, headers, runtime);
}

async function updateHotelWithOptions(request: UpdateHotelRequest, headers: UpdateHotelHeaders, runtime: Util.RuntimeOptions): UpdateHotelResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.appKey)) {
    body['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.estOpenTime)) {
    body['EstOpenTime'] = request.estOpenTime;
  }
  if (!Util.isUnset(request.hotelAddress)) {
    body['HotelAddress'] = request.hotelAddress;
  }
  if (!Util.isUnset(request.hotelEmail)) {
    body['HotelEmail'] = request.hotelEmail;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.hotelName)) {
    body['HotelName'] = request.hotelName;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.roomNum)) {
    body['RoomNum'] = request.roomNum;
  }
  if (!Util.isUnset(request.tbOpenId)) {
    body['TbOpenId'] = request.tbOpenId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotel',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
      month?: int32(name='Month'),
      year?: int32(name='Year'),
    }(name='Once'),
    type?: string(name='Type'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model UpdateHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model UpdateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model UpdateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelAlarmResponseBody(name='body'),
}

async function updateHotelAlarm(request: UpdateHotelAlarmRequest): UpdateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelAlarmHeaders{};
  return updateHotelAlarmWithOptions(request, headers, runtime);
}

async function updateHotelAlarmWithOptions(tmpReq: UpdateHotelAlarmRequest, headers: UpdateHotelAlarmHeaders, runtime: Util.RuntimeOptions): UpdateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHotelSceneBookItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelSceneBookItemRequest {
  hotelId?: string(name='HotelId'),
  updateHotelSceneBookReq?: {
    icon?: string(name='Icon'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    price?: long(name='Price'),
  }(name='UpdateHotelSceneBookReq'),
}

model UpdateHotelSceneBookItemShrinkRequest {
  hotelId?: string(name='HotelId'),
  updateHotelSceneBookReqShrink?: string(name='UpdateHotelSceneBookReq'),
}

model UpdateHotelSceneBookItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UpdateHotelSceneBookItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelSceneBookItemResponseBody(name='body'),
}

async function updateHotelSceneBookItem(request: UpdateHotelSceneBookItemRequest): UpdateHotelSceneBookItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelSceneBookItemHeaders{};
  return updateHotelSceneBookItemWithOptions(request, headers, runtime);
}

async function updateHotelSceneBookItemWithOptions(tmpReq: UpdateHotelSceneBookItemRequest, headers: UpdateHotelSceneBookItemHeaders, runtime: Util.RuntimeOptions): UpdateHotelSceneBookItemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelSceneBookItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateHotelSceneBookReq)) {
    request.updateHotelSceneBookReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneBookReq, 'UpdateHotelSceneBookReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.updateHotelSceneBookReqShrink)) {
    query['UpdateHotelSceneBookReq'] = request.updateHotelSceneBookReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelSceneBookItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelSceneBookItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelSceneItemRequest {
  hotelId?: string(name='HotelId'),
  updateHotelSceneOperateReq?: {
    isUseTemplateAnswer?: boolean(name='IsUseTemplateAnswer'),
    operateType?: string(name='OperateType'),
  }(name='UpdateHotelSceneOperateReq'),
  updateHotelSceneReq?: {
    dialogueList?: [ 
      {
        dialogueId?: string(name='DialogueId'),
        noAnswer?: string(name='NoAnswer'),
        noAnswerTemplate?: string(name='NoAnswerTemplate'),
        process?: int32(name='Process'),
        question?: string(name='Question'),
        serviceId?: string(name='ServiceId'),
        yesAnswer?: string(name='YesAnswer'),
        yesAnswerTemplate?: string(name='YesAnswerTemplate'),
      }
    ](name='DialogueList'),
    icon?: string(name='Icon'),
    id?: long(name='Id'),
    price?: long(name='Price'),
    status?: string(name='Status'),
  }(name='UpdateHotelSceneReq'),
}

model UpdateHotelSceneItemShrinkRequest {
  hotelId?: string(name='HotelId'),
  updateHotelSceneOperateReqShrink?: string(name='UpdateHotelSceneOperateReq'),
  updateHotelSceneReqShrink?: string(name='UpdateHotelSceneReq'),
}

model UpdateHotelSceneItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model UpdateHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelSceneItemResponseBody(name='body'),
}

async function updateHotelSceneItem(request: UpdateHotelSceneItemRequest): UpdateHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelSceneItemHeaders{};
  return updateHotelSceneItemWithOptions(request, headers, runtime);
}

async function updateHotelSceneItemWithOptions(tmpReq: UpdateHotelSceneItemRequest, headers: UpdateHotelSceneItemHeaders, runtime: Util.RuntimeOptions): UpdateHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.updateHotelSceneOperateReq)) {
    request.updateHotelSceneOperateReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneOperateReq, 'UpdateHotelSceneOperateReq', 'json');
  }
  if (!Util.isUnset(tmpReq.updateHotelSceneReq)) {
    request.updateHotelSceneReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.updateHotelSceneReq, 'UpdateHotelSceneReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.updateHotelSceneOperateReqShrink)) {
    query['UpdateHotelSceneOperateReq'] = request.updateHotelSceneOperateReqShrink;
  }
  if (!Util.isUnset(request.updateHotelSceneReqShrink)) {
    query['UpdateHotelSceneReq'] = request.updateHotelSceneReqShrink;
  }

  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

