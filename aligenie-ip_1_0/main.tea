/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AddMessageTemplateRequest {
  templateDetail?: string(name='TemplateDetail'),
  templateName?: string(name='TemplateName'),
}

model AddMessageTemplateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: long(name='Result'),
}

model AddMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddMessageTemplateResponseBody(name='body'),
}

async function addMessageTemplate(request: AddMessageTemplateRequest): AddMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AddMessageTemplateHeaders{};
  return addMessageTemplateWithOptions(request, headers, runtime);
}

async function addMessageTemplateWithOptions(request: AddMessageTemplateRequest, headers: AddMessageTemplateHeaders, runtime: Util.RuntimeOptions): AddMessageTemplateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.templateDetail)) {
    body['TemplateDetail'] = request.templateDetail;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/addMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchAddHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchAddHotelRoomRequest {
  hotelId?: string(name='HotelId'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchAddHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchAddHotelRoomResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchAddHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchAddHotelRoomResponseBody(name='body'),
}

async function batchAddHotelRoom(request: BatchAddHotelRoomRequest): BatchAddHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchAddHotelRoomHeaders{};
  return batchAddHotelRoomWithOptions(request, headers, runtime);
}

async function batchAddHotelRoomWithOptions(tmpReq: BatchAddHotelRoomRequest, headers: BatchAddHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchAddHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchAddHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchAddHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchAddHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchDeleteHotelRoomHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model BatchDeleteHotelRoomRequest {
  hotelId?: string(name='HotelId'),
  roomNoList?: [ string ](name='RoomNoList'),
}

model BatchDeleteHotelRoomShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomNoListShrink?: string(name='RoomNoList'),
}

model BatchDeleteHotelRoomResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model BatchDeleteHotelRoomResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchDeleteHotelRoomResponseBody(name='body'),
}

async function batchDeleteHotelRoom(request: BatchDeleteHotelRoomRequest): BatchDeleteHotelRoomResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new BatchDeleteHotelRoomHeaders{};
  return batchDeleteHotelRoomWithOptions(request, headers, runtime);
}

async function batchDeleteHotelRoomWithOptions(tmpReq: BatchDeleteHotelRoomRequest, headers: BatchDeleteHotelRoomHeaders, runtime: Util.RuntimeOptions): BatchDeleteHotelRoomResponse {
  Util.validateModel(tmpReq);
  var request = new BatchDeleteHotelRoomShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.roomNoList)) {
    request.roomNoListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.roomNoList, 'RoomNoList', 'simple');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNoListShrink)) {
    body['RoomNoList'] = request.roomNoListShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchDeleteHotelRoom',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/batchDeleteHotelRoom`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateHotelAlarmRequest {
  hotelId?: string(name='HotelId'),
  musicType?: string(name='MusicType'),
  rooms?: [ string ](name='Rooms'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
      month?: int32(name='Month'),
      year?: int32(name='Year'),
    }(name='Once'),
    type?: string(name='Type'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model CreateHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId'),
  musicType?: string(name='MusicType'),
  roomsShrink?: string(name='Rooms'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model CreateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      failMsg?: string(name='FailMsg'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model CreateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateHotelAlarmResponseBody(name='body'),
}

async function createHotelAlarm(request: CreateHotelAlarmRequest): CreateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateHotelAlarmHeaders{};
  return createHotelAlarmWithOptions(request, headers, runtime);
}

async function createHotelAlarmWithOptions(tmpReq: CreateHotelAlarmRequest, headers: CreateHotelAlarmHeaders, runtime: Util.RuntimeOptions): CreateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new CreateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.musicType)) {
    body['MusicType'] = request.musicType;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/createHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId'),
}

model DeleteHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId'),
}

model DeleteHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model DeleteHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteHotelAlarmResponseBody(name='body'),
}

async function deleteHotelAlarm(request: DeleteHotelAlarmRequest): DeleteHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteHotelAlarmHeaders{};
  return deleteHotelAlarmWithOptions(request, headers, runtime);
}

async function deleteHotelAlarmWithOptions(tmpReq: DeleteHotelAlarmRequest, headers: DeleteHotelAlarmHeaders, runtime: Util.RuntimeOptions): DeleteHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deleteHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeviceControlHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeviceControlRequest {
  payload?: {
    category?: string(name='Category'),
    cmd?: string(name='Cmd'),
    deviceNumber?: string(name='DeviceNumber'),
    extendInfo?: string(name='ExtendInfo'),
    location?: string(name='Location'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model DeviceControlShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model DeviceControlResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    status?: string(name='Status'),
  }(name='Result'),
}

model DeviceControlResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeviceControlResponseBody(name='body'),
}

async function deviceControl(request: DeviceControlRequest): DeviceControlResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeviceControlHeaders{};
  return deviceControlWithOptions(request, headers, runtime);
}

async function deviceControlWithOptions(tmpReq: DeviceControlRequest, headers: DeviceControlHeaders, runtime: Util.RuntimeOptions): DeviceControlResponse {
  Util.validateModel(tmpReq);
  var request = new DeviceControlShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeviceControl',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/deviceControl`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelHomeBackImageAndModesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelHomeBackImageAndModesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelHomeBackImageAndModesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    backgroundImage?: string(name='BackgroundImage'),
    hotelName?: string(name='HotelName'),
    modeList?: [ 
      {
        cnName?: string(name='CnName'),
        code?: string(name='Code'),
        icon?: string(name='Icon'),
      }
    ](name='ModeList'),
  }(name='Result'),
}

model GetHotelHomeBackImageAndModesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelHomeBackImageAndModesResponseBody(name='body'),
}

async function getHotelHomeBackImageAndModes(request: GetHotelHomeBackImageAndModesRequest): GetHotelHomeBackImageAndModesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelHomeBackImageAndModesHeaders{};
  return getHotelHomeBackImageAndModesWithOptions(request, headers, runtime);
}

async function getHotelHomeBackImageAndModesWithOptions(tmpReq: GetHotelHomeBackImageAndModesRequest, headers: GetHotelHomeBackImageAndModesHeaders, runtime: Util.RuntimeOptions): GetHotelHomeBackImageAndModesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelHomeBackImageAndModesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelHomeBackImageAndModes',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelHomeBackImageAndModes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelNoticeHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelNoticeRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelNoticeShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelNoticeResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model GetHotelNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelNoticeResponseBody(name='body'),
}

async function getHotelNotice(request: GetHotelNoticeRequest): GetHotelNoticeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelNoticeHeaders{};
  return getHotelNoticeWithOptions(request, headers, runtime);
}

async function getHotelNoticeWithOptions(tmpReq: GetHotelNoticeRequest, headers: GetHotelNoticeHeaders, runtime: Util.RuntimeOptions): GetHotelNoticeResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelNoticeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelNotice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelNotice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelOrderDetailHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelOrderDetailRequest {
  payload?: {
    orderNo?: string(name='OrderNo'),
  }(name='Payload'),
}

model GetHotelOrderDetailShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model GetHotelOrderDetailResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      itemUrl?: string(name='ItemUrl'),
      name?: string(name='Name'),
      quantity?: long(name='Quantity'),
    }
  ](name='Result'),
}

model GetHotelOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelOrderDetailResponseBody(name='body'),
}

async function getHotelOrderDetail(request: GetHotelOrderDetailRequest): GetHotelOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelOrderDetailHeaders{};
  return getHotelOrderDetailWithOptions(request, headers, runtime);
}

async function getHotelOrderDetailWithOptions(tmpReq: GetHotelOrderDetailRequest, headers: GetHotelOrderDetailHeaders, runtime: Util.RuntimeOptions): GetHotelOrderDetailResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelOrderDetailShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelOrderDetail',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelOrderDetail`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelRoomDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelRoomDeviceRequest {
  hotelId?: string(name='HotelId'),
  roomNo?: string(name='RoomNo'),
}

model GetHotelRoomDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      firmwareVersion?: string(name='FirmwareVersion'),
      hotelId?: string(name='HotelId'),
      mac?: string(name='Mac'),
      onlineStatus?: int32(name='OnlineStatus'),
      roomNo?: string(name='RoomNo'),
      sn?: string(name='Sn'),
    }
  ](name='Result'),
}

model GetHotelRoomDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelRoomDeviceResponseBody(name='body'),
}

async function getHotelRoomDevice(request: GetHotelRoomDeviceRequest): GetHotelRoomDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelRoomDeviceHeaders{};
  return getHotelRoomDeviceWithOptions(request, headers, runtime);
}

async function getHotelRoomDeviceWithOptions(request: GetHotelRoomDeviceRequest, headers: GetHotelRoomDeviceHeaders, runtime: Util.RuntimeOptions): GetHotelRoomDeviceResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelRoomDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelRoomDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelSampleUtterancesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelSampleUtterancesRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelSampleUtterancesShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelSampleUtterancesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ string ](name='Result'),
}

model GetHotelSampleUtterancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelSampleUtterancesResponseBody(name='body'),
}

async function getHotelSampleUtterances(request: GetHotelSampleUtterancesRequest): GetHotelSampleUtterancesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelSampleUtterancesHeaders{};
  return getHotelSampleUtterancesWithOptions(request, headers, runtime);
}

async function getHotelSampleUtterancesWithOptions(tmpReq: GetHotelSampleUtterancesRequest, headers: GetHotelSampleUtterancesHeaders, runtime: Util.RuntimeOptions): GetHotelSampleUtterancesResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelSampleUtterancesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelSampleUtterances',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelSampleUtterances`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetHotelScreenSaverHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetHotelScreenSaverRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model GetHotelScreenSaverShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model GetHotelScreenSaverResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    picUrl?: string(name='PicUrl'),
    styleCode?: string(name='StyleCode'),
  }(name='Result'),
}

model GetHotelScreenSaverResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetHotelScreenSaverResponseBody(name='body'),
}

async function getHotelScreenSaver(request: GetHotelScreenSaverRequest): GetHotelScreenSaverResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetHotelScreenSaverHeaders{};
  return getHotelScreenSaverWithOptions(request, headers, runtime);
}

async function getHotelScreenSaverWithOptions(tmpReq: GetHotelScreenSaverRequest, headers: GetHotelScreenSaverHeaders, runtime: Util.RuntimeOptions): GetHotelScreenSaverResponse {
  Util.validateModel(tmpReq);
  var request = new GetHotelScreenSaverShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetHotelScreenSaver',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelScreenSaver`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ImportRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ImportRoomControlDevicesRequest {
  hotelId?: string(name='HotelId'),
  locationDevices?: [ 
    {
      devices?: [ 
        {
          deviceName?: string(name='DeviceName'),
          name?: string(name='Name'),
          number?: string(name='Number'),
        }
      ](name='Devices'),
      location?: string(name='Location'),
      locationName?: string(name='LocationName'),
    }
  ](name='LocationDevices'),
  roomNo?: string(name='RoomNo'),
}

model ImportRoomControlDevicesShrinkRequest {
  hotelId?: string(name='HotelId'),
  locationDevicesShrink?: string(name='LocationDevices'),
  roomNo?: string(name='RoomNo'),
}

model ImportRoomControlDevicesResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ImportRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ImportRoomControlDevicesResponseBody(name='body'),
}

async function importRoomControlDevices(request: ImportRoomControlDevicesRequest): ImportRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ImportRoomControlDevicesHeaders{};
  return importRoomControlDevicesWithOptions(request, headers, runtime);
}

async function importRoomControlDevicesWithOptions(tmpReq: ImportRoomControlDevicesRequest, headers: ImportRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): ImportRoomControlDevicesResponse {
  Util.validateModel(tmpReq);
  var request = new ImportRoomControlDevicesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.locationDevices)) {
    request.locationDevicesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.locationDevices, 'LocationDevices', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.locationDevicesShrink)) {
    body['LocationDevices'] = request.locationDevicesShrink;
  }
  if (!Util.isUnset(request.roomNo)) {
    body['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ImportRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/importRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelAlarmRequest {
  hotelId?: string(name='HotelId'),
  rooms?: [ string ](name='Rooms'),
}

model ListHotelAlarmShrinkRequest {
  hotelId?: string(name='HotelId'),
  roomsShrink?: string(name='Rooms'),
}

model ListHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      scheduleInfo?: {
        once?: {
          day?: int32(name='Day'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
          month?: int32(name='Month'),
          year?: int32(name='Year'),
        }(name='Once'),
        type?: string(name='Type'),
        weekly?: {
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          hour?: int32(name='Hour'),
          minute?: int32(name='Minute'),
        }(name='Weekly'),
      }(name='ScheduleInfo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ListHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelAlarmResponseBody(name='body'),
}

async function listHotelAlarm(request: ListHotelAlarmRequest): ListHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelAlarmHeaders{};
  return listHotelAlarmWithOptions(request, headers, runtime);
}

async function listHotelAlarmWithOptions(tmpReq: ListHotelAlarmRequest, headers: ListHotelAlarmHeaders, runtime: Util.RuntimeOptions): ListHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.rooms)) {
    request.roomsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.rooms, 'Rooms', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomsShrink)) {
    body['Rooms'] = request.roomsShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/getHotelAlarmList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelControlDeviceHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelControlDeviceRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelControlDeviceShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelControlDeviceResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model ListHotelControlDeviceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelControlDeviceResponseBody(name='body'),
}

async function listHotelControlDevice(request: ListHotelControlDeviceRequest): ListHotelControlDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelControlDeviceHeaders{};
  return listHotelControlDeviceWithOptions(request, headers, runtime);
}

async function listHotelControlDeviceWithOptions(tmpReq: ListHotelControlDeviceRequest, headers: ListHotelControlDeviceHeaders, runtime: Util.RuntimeOptions): ListHotelControlDeviceResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelControlDeviceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelControlDevice',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelControlDevice`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelInfoHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelInfoResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      authAccount?: [ 
        {
          userName?: string(name='UserName'),
        }
      ](name='AuthAccount'),
      hotelAddress?: string(name='HotelAddress'),
      hotelId?: string(name='HotelId'),
      hotelName?: string(name='HotelName'),
    }
  ](name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model ListHotelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelInfoResponseBody(name='body'),
}

async function listHotelInfo(): ListHotelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelInfoHeaders{};
  return listHotelInfoWithOptions(headers, runtime);
}

async function listHotelInfoWithOptions(headers: ListHotelInfoHeaders, runtime: Util.RuntimeOptions): ListHotelInfoResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelInfo',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelInfo`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelMessageTemplateHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelMessageTemplateResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      auditMark?: string(name='AuditMark'),
      auditStatus?: string(name='AuditStatus'),
      templateDetail?: string(name='TemplateDetail'),
      templateId?: long(name='TemplateId'),
      templateName?: string(name='TemplateName'),
    }
  ](name='Result'),
}

model ListHotelMessageTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelMessageTemplateResponseBody(name='body'),
}

async function listHotelMessageTemplate(): ListHotelMessageTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelMessageTemplateHeaders{};
  return listHotelMessageTemplateWithOptions(headers, runtime);
}

async function listHotelMessageTemplateWithOptions(headers: ListHotelMessageTemplateHeaders, runtime: Util.RuntimeOptions): ListHotelMessageTemplateResponse {
  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
  };
  var params = new OpenApi.Params{
    action = 'ListHotelMessageTemplate',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelMessageTemplate`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelOrderRequest {
  payload?: {
    page?: {
      pageNumber?: long(name='PageNumber'),
      pageSize?: long(name='PageSize'),
    }(name='Page'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      applyAmt?: long(name='ApplyAmt'),
      gmtCreate?: long(name='GmtCreate'),
      orderNo?: string(name='OrderNo'),
      quantity?: long(name='Quantity'),
      roomNo?: string(name='RoomNo'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      typeIconUrl?: string(name='TypeIconUrl'),
      typeName?: string(name='TypeName'),
    }
  ](name='Result'),
}

model ListHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelOrderResponseBody(name='body'),
}

async function listHotelOrder(request: ListHotelOrderRequest): ListHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelOrderHeaders{};
  return listHotelOrderWithOptions(request, headers, runtime);
}

async function listHotelOrderWithOptions(tmpReq: ListHotelOrderRequest, headers: ListHotelOrderHeaders, runtime: Util.RuntimeOptions): ListHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelRoomsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelRoomsRequest {
  hotelId?: string(name='HotelId'),
}

model ListHotelRoomsResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      hotelId?: string(name='HotelId'),
      roomNo?: string(name='RoomNo'),
    }
  ](name='Result'),
}

model ListHotelRoomsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelRoomsResponseBody(name='body'),
}

async function listHotelRooms(request: ListHotelRoomsRequest): ListHotelRoomsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelRoomsHeaders{};
  return listHotelRoomsWithOptions(request, headers, runtime);
}

async function listHotelRoomsWithOptions(request: ListHotelRoomsRequest, headers: ListHotelRoomsHeaders, runtime: Util.RuntimeOptions): ListHotelRoomsResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelRooms',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelRooms`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelSceneItemHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelSceneItemRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model ListHotelSceneItemShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model ListHotelSceneItemResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  page?: {
    hasNext?: boolean(name='HasNext'),
    pageNumber?: int32(name='PageNumber'),
    pageSize?: int32(name='PageSize'),
    total?: int32(name='Total'),
    totalPage?: int32(name='TotalPage'),
  }(name='Page'),
  requestId?: string(name='RequestId'),
  result?: {
    secondCategoryList?: [ 
      {
        itemList?: [ 
          {
            category?: string(name='Category'),
            icon?: string(name='Icon'),
            id?: string(name='Id'),
            name?: string(name='Name'),
            price?: long(name='Price'),
            status?: string(name='Status'),
            type?: string(name='Type'),
          }
        ](name='ItemList'),
        secondCategoryName?: string(name='SecondCategoryName'),
      }
    ](name='SecondCategoryList'),
  }(name='Result'),
}

model ListHotelSceneItemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelSceneItemResponseBody(name='body'),
}

async function listHotelSceneItem(request: ListHotelSceneItemRequest): ListHotelSceneItemResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelSceneItemHeaders{};
  return listHotelSceneItemWithOptions(request, headers, runtime);
}

async function listHotelSceneItemWithOptions(tmpReq: ListHotelSceneItemRequest, headers: ListHotelSceneItemHeaders, runtime: Util.RuntimeOptions): ListHotelSceneItemResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelSceneItemShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelSceneItem',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelSceneItem`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListHotelServiceCategoryHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListHotelServiceCategoryRequest {
  payload?: {
    type?: string(name='Type'),
  }(name='Payload'),
}

model ListHotelServiceCategoryShrinkRequest {
  payloadShrink?: string(name='Payload'),
}

model ListHotelServiceCategoryResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      code?: string(name='Code'),
      desc?: string(name='Desc'),
      icon?: string(name='Icon'),
      name?: string(name='Name'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model ListHotelServiceCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListHotelServiceCategoryResponseBody(name='body'),
}

async function listHotelServiceCategory(request: ListHotelServiceCategoryRequest): ListHotelServiceCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListHotelServiceCategoryHeaders{};
  return listHotelServiceCategoryWithOptions(request, headers, runtime);
}

async function listHotelServiceCategoryWithOptions(tmpReq: ListHotelServiceCategoryRequest, headers: ListHotelServiceCategoryHeaders, runtime: Util.RuntimeOptions): ListHotelServiceCategoryResponse {
  Util.validateModel(tmpReq);
  var request = new ListHotelServiceCategoryShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListHotelServiceCategory',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/listHotelServiceCategory`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PushHotelMessageHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushHotelMessageRequest {
  pushHotelMessageReq?: {
    hotelId?: string(name='HotelId'),
    paramMap?: map[string]string(name='ParamMap'),
    roomNo?: string(name='RoomNo'),
    templateId?: long(name='TemplateId'),
  }(name='PushHotelMessageReq'),
}

model PushHotelMessageShrinkRequest {
  pushHotelMessageReqShrink?: string(name='PushHotelMessageReq'),
}

model PushHotelMessageResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushHotelMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PushHotelMessageResponseBody(name='body'),
}

async function pushHotelMessage(request: PushHotelMessageRequest): PushHotelMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PushHotelMessageHeaders{};
  return pushHotelMessageWithOptions(request, headers, runtime);
}

async function pushHotelMessageWithOptions(tmpReq: PushHotelMessageRequest, headers: PushHotelMessageHeaders, runtime: Util.RuntimeOptions): PushHotelMessageResponse {
  Util.validateModel(tmpReq);
  var request = new PushHotelMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.pushHotelMessageReq)) {
    request.pushHotelMessageReqShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.pushHotelMessageReq, 'PushHotelMessageReq', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.pushHotelMessageReqShrink)) {
    query['PushHotelMessageReq'] = request.pushHotelMessageReqShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PushHotelMessage',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/pushHotelMessage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryDeviceStatusHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryDeviceStatusRequest {
  payload?: {
    locationDevices?: [ 
      {
        deviceNumber?: string(name='DeviceNumber'),
        deviceType?: string(name='DeviceType'),
        location?: string(name='Location'),
      }
    ](name='LocationDevices'),
    properties?: map[string]string(name='Properties'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryDeviceStatusShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model QueryDeviceStatusResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ map[string]string ](name='Result'),
}

model QueryDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDeviceStatusResponseBody(name='body'),
}

async function queryDeviceStatus(request: QueryDeviceStatusRequest): QueryDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryDeviceStatusHeaders{};
  return queryDeviceStatusWithOptions(request, headers, runtime);
}

async function queryDeviceStatusWithOptions(tmpReq: QueryDeviceStatusRequest, headers: QueryDeviceStatusHeaders, runtime: Util.RuntimeOptions): QueryDeviceStatusResponse {
  Util.validateModel(tmpReq);
  var request = new QueryDeviceStatusShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDeviceStatus',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryDeviceStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryHotelProductHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryHotelProductRequest {
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model QueryHotelProductShrinkRequest {
  userInfoShrink?: string(name='UserInfo'),
}

model QueryHotelProductResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    hotelId?: string(name='HotelId'),
    hotelName?: string(name='HotelName'),
    productKey?: string(name='ProductKey'),
    productName?: string(name='ProductName'),
  }(name='Result'),
}

model QueryHotelProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHotelProductResponseBody(name='body'),
}

async function queryHotelProduct(request: QueryHotelProductRequest): QueryHotelProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryHotelProductHeaders{};
  return queryHotelProductWithOptions(request, headers, runtime);
}

async function queryHotelProductWithOptions(tmpReq: QueryHotelProductRequest, headers: QueryHotelProductHeaders, runtime: Util.RuntimeOptions): QueryHotelProductResponse {
  Util.validateModel(tmpReq);
  var request = new QueryHotelProductShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHotelProduct',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryHotelProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryRoomControlDevicesHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model QueryRoomControlDevicesRequest {
  hotelId?: string(name='HotelId'),
  roomNo?: string(name='RoomNo'),
}

model QueryRoomControlDevicesResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      devices?: [ 
        {
          deviceName?: string(name='DeviceName'),
          name?: string(name='Name'),
          number?: string(name='Number'),
        }
      ](name='Devices'),
      location?: string(name='Location'),
      locationName?: string(name='LocationName'),
    }
  ](name='Result'),
}

model QueryRoomControlDevicesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRoomControlDevicesResponseBody(name='body'),
}

async function queryRoomControlDevices(request: QueryRoomControlDevicesRequest): QueryRoomControlDevicesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new QueryRoomControlDevicesHeaders{};
  return queryRoomControlDevicesWithOptions(request, headers, runtime);
}

async function queryRoomControlDevicesWithOptions(request: QueryRoomControlDevicesRequest, headers: QueryRoomControlDevicesHeaders, runtime: Util.RuntimeOptions): QueryRoomControlDevicesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.hotelId)) {
    query['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.roomNo)) {
    query['RoomNo'] = request.roomNo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRoomControlDevices',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/queryRoomControlDevices`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RoomCheckOutHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model RoomCheckOutRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='DeviceInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model RoomCheckOutShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  userInfoShrink?: string(name='UserInfo'),
}

model RoomCheckOutResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model RoomCheckOutResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RoomCheckOutResponseBody(name='body'),
}

async function roomCheckOut(request: RoomCheckOutRequest): RoomCheckOutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new RoomCheckOutHeaders{};
  return roomCheckOutWithOptions(request, headers, runtime);
}

async function roomCheckOutWithOptions(tmpReq: RoomCheckOutRequest, headers: RoomCheckOutHeaders, runtime: Util.RuntimeOptions): RoomCheckOutResponse {
  Util.validateModel(tmpReq);
  var request = new RoomCheckOutShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoomCheckOut',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/roomCheckOut`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model SubmitHotelOrderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SubmitHotelOrderRequest {
  payload?: {
    itemList?: [ 
      {
        itemId?: long(name='ItemId'),
        quantity?: long(name='Quantity'),
      }
    ](name='ItemList'),
    type?: string(name='Type'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey'),
    encodeType?: string(name='EncodeType'),
    id?: string(name='Id'),
    idType?: string(name='IdType'),
    organizationId?: string(name='OrganizationId'),
  }(name='UserInfo'),
}

model SubmitHotelOrderShrinkRequest {
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo'),
}

model SubmitHotelOrderResponseBody = {
  code?: int32(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model SubmitHotelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitHotelOrderResponseBody(name='body'),
}

async function submitHotelOrder(request: SubmitHotelOrderRequest): SubmitHotelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SubmitHotelOrderHeaders{};
  return submitHotelOrderWithOptions(request, headers, runtime);
}

async function submitHotelOrderWithOptions(tmpReq: SubmitHotelOrderRequest, headers: SubmitHotelOrderHeaders, runtime: Util.RuntimeOptions): SubmitHotelOrderResponse {
  Util.validateModel(tmpReq);
  var request = new SubmitHotelOrderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitHotelOrder',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/submitHotelOrder`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateHotelAlarmHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateHotelAlarmRequest {
  alarms?: [ 
    {
      alarmId?: long(name='AlarmId'),
      deviceOpenId?: string(name='DeviceOpenId'),
      roomNo?: string(name='RoomNo'),
      userOpenId?: string(name='UserOpenId'),
    }
  ](name='Alarms'),
  hotelId?: string(name='HotelId'),
  scheduleInfo?: {
    once?: {
      day?: int32(name='Day'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
      month?: int32(name='Month'),
      year?: int32(name='Year'),
    }(name='Once'),
    type?: string(name='Type'),
    weekly?: {
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      hour?: int32(name='Hour'),
      minute?: int32(name='Minute'),
    }(name='Weekly'),
  }(name='ScheduleInfo'),
}

model UpdateHotelAlarmShrinkRequest {
  alarmsShrink?: string(name='Alarms'),
  hotelId?: string(name='HotelId'),
  scheduleInfoShrink?: string(name='ScheduleInfo'),
}

model UpdateHotelAlarmResponseBody = {
  extentions?: map[string]any(name='Extentions'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: int32(name='Result'),
  statusCode?: int32(name='StatusCode'),
}

model UpdateHotelAlarmResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateHotelAlarmResponseBody(name='body'),
}

async function updateHotelAlarm(request: UpdateHotelAlarmRequest): UpdateHotelAlarmResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateHotelAlarmHeaders{};
  return updateHotelAlarmWithOptions(request, headers, runtime);
}

async function updateHotelAlarmWithOptions(tmpReq: UpdateHotelAlarmRequest, headers: UpdateHotelAlarmHeaders, runtime: Util.RuntimeOptions): UpdateHotelAlarmResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateHotelAlarmShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.alarms)) {
    request.alarmsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.alarms, 'Alarms', 'json');
  }
  if (!Util.isUnset(tmpReq.scheduleInfo)) {
    request.scheduleInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.scheduleInfo, 'ScheduleInfo', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.alarmsShrink)) {
    body['Alarms'] = request.alarmsShrink;
  }
  if (!Util.isUnset(request.hotelId)) {
    body['HotelId'] = request.hotelId;
  }
  if (!Util.isUnset(request.scheduleInfoShrink)) {
    body['ScheduleInfo'] = request.scheduleInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateHotelAlarm',
    version = 'ip_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/ip/updateHotelAlarm`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

