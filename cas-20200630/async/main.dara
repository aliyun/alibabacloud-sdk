/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cas';
  @version = '2020-06-30';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-hangzhou' = 'cas.aliyuncs.com',
    'ap-northeast-2-pop' = 'cas.aliyuncs.com',
    'ap-southeast-3' = 'cas.aliyuncs.com',
    'ap-southeast-5' = 'cas.aliyuncs.com',
    'cn-beijing' = 'cas.aliyuncs.com',
    'cn-beijing-finance-1' = 'cas.aliyuncs.com',
    'cn-beijing-finance-pop' = 'cas.aliyuncs.com',
    'cn-beijing-gov-1' = 'cas.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'cas.aliyuncs.com',
    'cn-chengdu' = 'cas.aliyuncs.com',
    'cn-edge-1' = 'cas.aliyuncs.com',
    'cn-fujian' = 'cas.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'cas.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'cas.aliyuncs.com',
    'cn-hangzhou-finance' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'cas.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'cas.aliyuncs.com',
    'cn-hangzhou-test-306' = 'cas.aliyuncs.com',
    'cn-hongkong' = 'cas.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'cas.aliyuncs.com',
    'cn-huhehaote' = 'cas.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'cas.aliyuncs.com',
    'cn-north-2-gov-1' = 'cas.aliyuncs.com',
    'cn-qingdao' = 'cas.aliyuncs.com',
    'cn-qingdao-nebula' = 'cas.aliyuncs.com',
    'cn-shanghai' = 'cas.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'cas.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'cas.aliyuncs.com',
    'cn-shanghai-finance-1' = 'cas.aliyuncs.com',
    'cn-shanghai-inner' = 'cas.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'cas.aliyuncs.com',
    'cn-shenzhen' = 'cas.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'cas.aliyuncs.com',
    'cn-shenzhen-inner' = 'cas.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'cas.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'cas.aliyuncs.com',
    'cn-wuhan' = 'cas.aliyuncs.com',
    'cn-wulanchabu' = 'cas.aliyuncs.com',
    'cn-yushanfang' = 'cas.aliyuncs.com',
    'cn-zhangbei' = 'cas.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'cas.aliyuncs.com',
    'cn-zhangjiakou' = 'cas.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'cas.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'cas.aliyuncs.com',
    'eu-west-1' = 'cas.aliyuncs.com',
    'eu-west-1-oxs' = 'cas.aliyuncs.com',
    'rus-west-1-pop' = 'cas.aliyuncs.com',
    'us-east-1' = 'cas.aliyuncs.com',
    'us-west-1' = 'cas.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateClientCertificateRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the client certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958', position='Query'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the client certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the client certificate must be the same with the encryption algorithm of the intermediate certificate authority (CA) certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA_2048, the key algorithm of the client certificate must be RSA_1024, RSA_2048, or RSA_4096.

> You can call the [DescribeCACertificate] operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048', position='Query'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the client certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958', position='Query'),
  commonName?: string(name='CommonName', description='The name of the client certificate user. In most cases, the user of a client certificate is an individual, a company, an organization, or an application. We recommend that you enter the common name of a user. Examples: Bob, Alibaba, Alibaba Cloud password platform, and Tmall Genie.', example='aliyun', position='Query'),
  country?: string(name='Country', description='The country in which the organization is located. Default value: CN.', example='CN', position='Query'),
  days?: int32(name='Days', description='The validity period of the client certificate. Unit: day. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters at the same time, the validity period of the client certificate is determined by the value of the **Days** parameter.

*   The validity period of the client certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/465954.html) operation to query the validity period of an intermediate CA certificate.', example='365', position='Query'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1', position='Query'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1', position='Query'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou', position='Query'),
  months?: int32(name='Months', description='The validity period of the client certificate. Unit: months.', example='1', position='Query'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT', position='Query'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

> You can call the [DescribeCACertificateList] operation to query the unique identifier of an intermediate CA certificate.', example='273ae6bb538d538c70c01f81jh2****', position='Query'),
  sanType?: int32(name='SanType', description='The type of the Subject Alternative Name (SAN) extension that is supported by the client certificate. Valid values:

*   **1**: an email address
*   **6**: a Uniform Resource Identifier (URI)', example='1', position='Query'),
  sanValue?: string(name='SanValue', description='The content of the extension. You can specify multiple SAN extensions. If you want to specify multiple SAN extensions, separate them with commas (,).', example='somebody@example.com', position='Query'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang', position='Query'),
  years?: int32(name='Years', description='The validity period of the client certificate. Unit: years.', example='5', position='Query'),
}

model CreateClientCertificateResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate.', example='190ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8C467B38-3910-447D-87BC-AC049166F216'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~CreateRootCACertificate~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~CreateRootCACertificate~~) operation. Only intermediate CA certificates can issue client certificates.
  * ## QPS limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateClientCertificate  CreateClientCertificateRequest
  * @return CreateClientCertificateResponse
 */
async function createClientCertificate(request: CreateClientCertificateRequest): CreateClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClientCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateClientCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the client certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958', position='Query'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the client certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the client certificate must be the same with the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA_2048, the key algorithm of the client certificate must be RSA_1024, RSA_2048, or RSA_4096.

>  You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048', position='Query'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the client certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958', position='Query'),
  commonName?: string(name='CommonName', description='The common name of the certificate. The value can contain letters.

>  If you specify the **CsrPemString** parameter, the value of the **CommonName** parameter is determined by the **CsrPemString** parameter.', example='aliyundoc.com', position='Query'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as **CN** and **US**.', example='CN', position='Query'),
  csr?: string(name='Csr', description='The content of the CSR file. You can generate a CSR file by using the OpenSSL tool or Keytool. For more information, see [How do I create a CSR file?](https://help.aliyun.com/document_detail/42218.html) You can also create a CSR file in the Certificate Management Service console. For more information, see [Create a CSR](https://help.aliyun.com/document_detail/313297.html).', example='-----BEGIN CERTIFICATE REQUEST-----   ...... -----END CERTIFICATE REQUEST-----', position='Query'),
  days?: int32(name='Days', description='The validity period of the client certificate. Unit: days. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters together, the validity period of the client certificate is determined by the value of the **Days** parameter.

*   The validity period of the client certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the validity period of an intermediate CA certificate.', example='365', position='Query'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1', position='Query'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1', position='Query'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou', position='Query'),
  months?: int32(name='Months', description='The validity period of the client certificate. Unit: months.', example='12', position='Query'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud Computing Co., Ltd.', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='Security', position='Query'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the client certificate is issued.

>  You can call the [DescribeCACertificateList](https://help.aliyun.com/document_detail/328095.html) operation to query the unique identifier of an intermediate CA certificate.', example='270ae6bb538d538c70c01f81fg3****', position='Query'),
  sanType?: int32(name='SanType', description='The type of the Subject Alternative Name (SAN) extension that is supported by the client certificate. Valid values:

*   **1**: an email address
*   **6**: a Uniform Resource Identifier (URI)', example='1', position='Query'),
  sanValue?: string(name='SanValue', description='The content of the extension. You can specify multiple SAN extensions. If you want to specify multiple SAN extensions, separate them with commas (,).', example='somebody@example.com', position='Query'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang', position='Query'),
  years?: int32(name='Years', description='The validity period of the client certificate. Unit: years.', example='1', position='Query'),
}

model CreateClientCertificateWithCsrResponseBody = {
  certKmcRep1?: string(name='CertKmcRep1'),
  certSignBufKmc?: string(name='CertSignBufKmc'),
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate.', example='200ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='31C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateClientCertificateWithCsrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateWithCsrResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](https://help.aliyun.com/document_detail/328093.html) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](https://help.aliyun.com/document_detail/328094.html) operation. Only intermediate CA certificates can be used to issue client certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateClientCertificateWithCsr  CreateClientCertificateWithCsrRequest
  * @return CreateClientCertificateWithCsrResponse
 */
async function createClientCertificateWithCsr(request: CreateClientCertificateWithCsrRequest): CreateClientCertificateWithCsrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClientCertificateWithCsr', 'POST', '/', 'json', false, 'json', request);
}

model CreateCustomCertificateRequest {
  apiPassthrough?: {
    extensions?: {
      criticals?: [ string ](name='Criticals', description='If it is a necessary parameter, the critical list contains the parameter name.'),
      extendedKeyUsages?: [ string ](name='ExtendedKeyUsages', description='The extended key usage.'),
      keyUsage?: {
        contentCommitment?: boolean(name='ContentCommitment', description='The original name of the parameter is NonRepudiation.', example='false'),
        dataEncipherment?: boolean(name='DataEncipherment', description='Specifies whether the key can be used for data encryption.', example='false'),
        decipherOnly?: boolean(name='DecipherOnly', description='Specifies whether the key can be used only for data decryption.', example='false'),
        digitalSignature?: boolean(name='DigitalSignature', description='Specifies whether the key can be used for digital signing. If you set this parameter to true, the private key of the certificate can be used to generate digital signatures, and the public key of the certificate can be used to verify digital signatures.', example='true'),
        encipherOnly?: boolean(name='EncipherOnly', description='Specifies whether the key can be used only for data encryption.', example='false'),
        keyAgreement?: boolean(name='KeyAgreement', description='Specifies whether the key can be used for key agreement.', example='false'),
        keyEncipherment?: boolean(name='KeyEncipherment', description='Specifies whether the key can be used for data encipherment.', example='false'),
        nonRepudiation?: boolean(name='NonRepudiation', description='Specifies whether the key can be used for non-repudiation. This parameter is renamed ContentCommitment in the X.509 standard.', example='false'),
      }(name='KeyUsage', description='The key usage.'),
      subjectAlternativeNames?: [ 
        {
          type: string(name='Type', description='The type of the alias. Valid values:

*   rfc822Name: email address
*   dNSName: domain name
*   uniformResourceIdentifier: URI
*   iPAddress: IP address

This parameter is required.', example='dNSName'),
          value?: string(name='Value', description='The alias that meets the requirement of a specified type.', example='rfc822Name:
exmaple@certqa.cn

dNSName:
www.certqa.cn

uniformResourceIdentifier:
acs:ecs:regionid:15619224785*****:instance/i-bp1bzvz55uz27hf*****

iPAddress:
127.0.0.1'),
        }
      ](name='SubjectAlternativeNames', description='The aliases of the entities.'),
    }(name='Extensions', description='The extensions of the certificate.'),
    serialNumber?: string(name='SerialNumber', description='The serial number MUST be a positive integer assigned by the CA to each certificate.', example='16889526086333'),
    subject?: {
      commonName?: string(name='CommonName', description='The common name of the certificate user.', example='Bob'),
      country?: string(name='Country', description='The code of the country. The value is an alpha-2 country code that complies with the ISO 3166-1 standard. For more information about country codes, visit <https://www.iso.org/obp/ui/#search/code/>.', example='CN'),
      customAttributes?: [ 
        {
          objectIdentifier?: string(name='ObjectIdentifier', description='Custom attribute type as:

- 2.5.4.6 : country
- 2.5.4.10 : organization
- 2.5.4.11 : organizational unit
- 2.5.4.12 : title
- 2.5.4.3 : common name
- 2.5.4.9 : street
- 2.5.4.5 : serial number
- 2.5.4.7 : locality
- 2.5.4.8 : state
- 1.3.6.1.4.1.37244.1.1 : Matter Operational Certificate - Node ID
- 1.3.6.1.4.1.37244.1.5 : Matter Operational Certificate - Fabric ID
- 1.3.6.1.4.1.37244.2.1 : Matter Device Attestation Certificate Vender ID (VID)
- 1.3.6.1.4.1.37244.2.2 : Matter Device Attestation Certificate Product ID (PID).', example='2.5.4.3'),
          value?: string(name='Value', description='Custom attribute value.', example='Aliyun'),
        }
      ](name='CustomAttributes', description='Customize the Subject attributes of the certificate.'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters.', example='Hangzhou'),
      organization?: string(name='Organization', description='The name of the organization.', example='XXX company'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization.', example='XXX department'),
      state?: string(name='State', description='The name of the province or state in which the organization associated with the certificate is located.', example='Zhejiang'),
    }(name='Subject', description='The name of the entity that uses the certificate.'),
  }(name='ApiPassthrough', description='The passthrough parameters.', position='Query'),
  csr: string(name='Csr', description='The content of the CSR. You can generate a CSR by using the OpenSSL tool or the Keytool tool. For more information, see [How do I create a CSR file?](https://help.aliyun.com/document_detail/42218.html)

This parameter is required.', example='-----BEGIN CERTIFICATE REQUEST-----
MIIBczCCARgCAQAwgYoxFDASBgNVBAMMC2FsaXl1bi50ZXN0MQ0wCwYDVQQ
...
...
...
vbIgMQIhAKHDWD6/WAMbtezAt4bysJ/BZIDz1jPWuUR5GV4TJ/mS
-----END CERTIFICATE REQUEST-----', position='Query'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1', position='Query'),
  immediately?: int32(name='Immediately', description='Specifies whether to immediately issue the certificate. Valid values:

*   0: asynchronously issues the certificate.
*   1: immediately issues the certificate.
*   2: immediately issues the certificate and returns the certificate chain.', example='0', position='Query'),
  parentIdentifier: string(name='ParentIdentifier', description='The identifier of the certificate.

This parameter is required.', example='1ed4068c-6f1b-6deb-8e32-3f8439a851cb', position='Query'),
  validity: string(name='Validity', description='The validity period of the certificate. The value cannot exceed the validity period of the certificate instance. Relative time and absolute time are supported.

Units of relative time: year, month, and day.

*   Use y to specify years.
*   Use m to specify months.
*   Use d to specify days.

Absolute time: Use Greenwich Mean Time (GMT). Format: `yyyy-MM-dd\\"T\\"HH:mm:ss\\"Z\\"`

*   Format of the end time: $NotAfter
*   Format of the start time and end time: $NotBefore/$NotAfter

This parameter is required.', example='Relative time:
 ● 1y
 ● 3m
 ● 7d
Absolute time: 
● 2006-01-02T15:04:05Z 
● 2006-01-02T15:04:05Z/2023-03-09T17:48:13Z', position='Query'),
}

model CreateCustomCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The content of the certificate. This parameter is returned only if Immediately is set to 1 or 2.', example='-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/
...
...
...
KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the certificate. This parameter is returned only if Immediately is set to 2.', example='-----BEGIN CERTIFICATE-----
MIIBfzCCATGgAwIBAgIUfI5kSdcO2S0+LkpdL3b2VUJG10YwBQYDK2VwMDUxCzAJ
...
...
...
ZYYG
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIBczCCARgCAQAwgYoxFDASBgNVBAMMC2FsaXl1bi50ZXN0MQ0wCwYDVQQ
...
...
...
KL5cUmF
-----END CERTIFICATE-----'),
  identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='12345678-1234-1234-1234-123456789ABC'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate. This parameter is returned only if Immediately is set to 1 or 2.', example='084bde9cd233f0ddae33adc438cfbbbd****'),
}

model CreateCustomCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomCertificateResponseBody(name='body'),
}

/**
  * @description By default, the name of the entity is obtained from the certificate signing request (CSR) of the certificate that you want to issue. If you specify a different name for the entity, the name of the entity in the CSR becomes invalid. The specified name is used to issue the certificate.
  * You must specify the key usage and extended key usage based on the certificate type. The following list describes common certificate types:
  * *   Server certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth
  * *   Client certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: clientAuth
  * *   Mutual Transport Layer Security (TLS) authentication certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth or clientAuth
  * *   Email certificate
  * Key usage: digitalSignature or contentCommitment
  * Extended key usage: emailProtection
  * Note: Compliant certificate authorities (CAs) are managed by third-party authorities. This operation is not supported for compliant CAs.
  * @param request  the request parameters of CreateCustomCertificate  CreateCustomCertificateRequest
  * @return CreateCustomCertificateResponse
 */
async function createCustomCertificate(request: CreateCustomCertificateRequest): CreateCustomCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCustomCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateRevokeClientCertificateRequest {
  identifier: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to revoke.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.

This parameter is required.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
}

model CreateRevokeClientCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateRevokeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRevokeClientCertificateResponseBody(name='body'),
}

/**
  * @description After a client certificate or a server certificate is revoked, the client or the server on which the certificate is installed cannot establish HTTPS connections with other devices.
  * After a client certificate or a server certificate is revoked, you can call the [DeleteClientCertificate](https://help.aliyun.com/document_detail/330880.html) operation to permanently delete the certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateRevokeClientCertificate  CreateRevokeClientCertificateRequest
  * @return CreateRevokeClientCertificateResponse
 */
async function createRevokeClientCertificate(request: CreateRevokeClientCertificateRequest): CreateRevokeClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRevokeClientCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateRootCACertificateRequest {
  algorithm: string(name='Algorithm', description='The key algorithm of the root CA certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the root CA certificate must be consistent with the **encryption algorithm** of the private root CA instance that you purchase. For example, if the **encryption algorithm** of the private root CA instance that you purchase is **RSA**, the key algorithm of the root CA certificate must be **RSA_1024**, **RSA_2048**, or **RSA_4096**.

This parameter is required.', example='RSA_2048', position='Query'),
  commonName: string(name='CommonName', description='The common name or abbreviation of the organization. The value can contain letters.

This parameter is required.', example='Alibaba', position='Query'),
  countryCode?: string(name='CountryCode', description='The code of the country or region in which the organization is located. You can enter an alpha-2 code. For example, you can use **CN** to indicate China and use **US** to indicate the United States.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN', position='Query'),
  locality: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters.

This parameter is required.', example='Hangzhou', position='Query'),
  organization: string(name='Organization', description='The name of the organization that is associated with the root CA certificate. You can enter the name of your enterprise or company. The value can contain letters.

This parameter is required.', example='Alibaba', position='Query'),
  organizationUnit: string(name='OrganizationUnit', description='The name of the department or branch in the organization. The value can contain letters.

This parameter is required.', example='Security', position='Query'),
  state: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The value can contain letters.

This parameter is required.', example='Zhejiang', position='Query'),
  years: int32(name='Years', description='The validity period of the root CA certificate. Unit: years.

>  We recommend that you set this parameter to a value from 5 to 10.

This parameter is required.', example='10', position='Query'),
}

model CreateRootCACertificateResponseBody = {
  certificate?: string(name='Certificate', description='The root CA certificate in the PEM format.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the root CA certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the root CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='6D9B4C5F-7140-5B41-924C-329181DC00C1'),
}

model CreateRootCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRootCACertificateResponseBody(name='body'),
}

/**
  * @description You can call the CreateRootCACertificate operation to create a self-signed root CA certificate. A root CA certificate is the trust anchor in a chain of trust for private certificates that are used within an enterprise. You must create a root CA certificate before you can use the root CA certificate to issue intermediate CA certificates. Then, you can use the intermediate CA certificates to issue client certificates and server certificates.
  * Before you call this operation, make sure that you have purchased a private root CA instance by using the [Certificate Management Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist). For more information, see [Create a private CA](https://help.aliyun.com/document_detail/208553.html).
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateRootCACertificate  CreateRootCACertificateRequest
  * @return CreateRootCACertificateResponse
 */
async function createRootCACertificate(request: CreateRootCACertificateRequest): CreateRootCACertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRootCACertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateServerCertificateRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the server certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958', position='Query'),
  algorithm: string(name='Algorithm', description='The key algorithm of the server certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the server certificate must be the same as the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA_2048, the key algorithm of the server certificate must be RSA_1024, RSA_2048, or RSA_4096.

>  You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the key algorithm of an intermediate CA certificate.

This parameter is required.', example='RSA_2048', position='Query'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the server certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958', position='Query'),
  commonName: string(name='CommonName', description='The name of the certificate user. The user of a server certificate is a server. We recommend that you enter the domain name or IP address of the server.

This parameter is required.', example='www.example.com', position='Query'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as CN or US.', example='CN', position='Query'),
  days?: int32(name='Days', description='The validity period of the server certificate. Unit: days. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters together, the validity period of the server certificate is determined by the value of the **Days** parameter.

*   The validity period of the server certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the validity period of an intermediate CA certificate.', example='365', position='Query'),
  domain?: string(name='Domain', description='The additional domain names and additional IP addresses of the server certificate. After you add additional domain names and additional IP addresses to a certificate, you can apply the certificate to the domain names and IP addresses.

Separate multiple domain names and multiple IP addresses with commas (,).', example='example.com', position='Query'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1', position='Query'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1', position='Query'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou', position='Query'),
  months?: int32(name='Months', description='The validity period of the server certificate. Unit: months.', example='12', position='Query'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT', position='Query'),
  parentIdentifier: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

>  You can call the [DescribeCACertificateList](https://help.aliyun.com/document_detail/328095.html) operation to query the unique identifier of an intermediate CA certificate.

This parameter is required.', example='271ae6bb538d538c70c01f81dg3****', position='Query'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang', position='Query'),
  years?: int32(name='Years', description='The validity period of the server certificate. Unit: years.', example='1', position='Query'),
}

model CreateServerCertificateResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the server certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateServerCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerCertificateResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](https://help.aliyun.com/document_detail/328093.html) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](https://help.aliyun.com/document_detail/328094.html) operation. Only intermediate CA certificates can be used to issue server certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateServerCertificate  CreateServerCertificateRequest
  * @return CreateServerCertificateResponse
 */
async function createServerCertificate(request: CreateServerCertificateRequest): CreateServerCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerCertificate', 'POST', '/', 'json', false, 'json', request);
}

model CreateServerCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the server certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958', position='Query'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the server certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the server certificate must be the same as the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA_2048, the key algorithm of the server certificate must be RSA_1024, RSA_2048, or RSA_4096.

>  You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048', position='Query'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the server certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958', position='Query'),
  commonName?: string(name='CommonName', description='The name of the certificate user. The user of a server certificate is a server. We recommend that you enter the domain name or IP address of the server.', example='mtcsq.com', position='Query'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as CN or US.', example='CN', position='Query'),
  csr: string(name='Csr', description='The content of the CSR.

You can generate a CSR by using the OpenSSL tool or the Keytool tool. For more information, see [How do I create a CSR file?](https://help.aliyun.com/document_detail/42218.html)

This parameter is required.', example='-----BEGIN CERTIFICATE REQUEST-----   ...... -----END CERTIFICATE REQUEST-----', position='Query'),
  days?: int32(name='Days', description='The validity period of the server certificate. Unit: days.

You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters at the same time, the validity period of the server certificate is determined by the value of the **Days** parameter.
*   The validity period of the server certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the validity period of an intermediate CA certificate.', example='365', position='Query'),
  domain?: string(name='Domain', description='The additional domain names or additional IP addresses of the server certificate. After you add additional domain names and additional IP addresses to a certificate, you can apply the certificate to the domain names and IP addresses.

You can specify multiple domain names and IP addresses. If you specify multiple domain names and IP addresses, separate them with commas (,).', example='example.com', position='Query'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1', position='Query'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1', position='Query'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou', position='Query'),
  months?: int32(name='Months', description='The validity period of the server certificate. Unit: months.', example='12', position='Query'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='ec server o', position='Query'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT', position='Query'),
  parentIdentifier: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

>  You can call the [DescribeCACertificateList](https://help.aliyun.com/document_detail/328095.html) operation to query the unique identifier of an intermediate CA certificate.

This parameter is required.', example='270oe6bb538d538c70c01f81hfd3****', position='Query'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang', position='Query'),
  years?: int32(name='Years', description='The validity period of the server certificate. Unit: years.', example='1', position='Query'),
}

model CreateServerCertificateWithCsrResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the server certificate.', example='180ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='55C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='084bde9cd233f0ddae33adc438cfbbbd****'),
  x509Certificate?: string(name='X509Certificate', description='The content of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateServerCertificateWithCsrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerCertificateWithCsrResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](https://help.aliyun.com/document_detail/328093.html) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](https://help.aliyun.com/document_detail/328094.html) operation. Only intermediate CA certificates can be used to issue server certificates.
  * @param request  the request parameters of CreateServerCertificateWithCsr  CreateServerCertificateWithCsrRequest
  * @return CreateServerCertificateWithCsrResponse
 */
async function createServerCertificateWithCsr(request: CreateServerCertificateWithCsrRequest): CreateServerCertificateWithCsrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateServerCertificateWithCsr', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubCACertificateRequest {
  algorithm: string(name='Algorithm', description='The type of the key algorithm of the intermediate CA. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC_256**: The signature algorithm is Sha256WithECDSA.
*   **SM2_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of an intermediate CA certificate must be consistent with the encryption algorithm of a root CA certificate. The length of the keys can be different. For example, if the key algorithm of the root CA certificate is **RSA_2048**, the key algorithm of the intermediate CA certificate must be **RSA_1024**, **RSA_2048**, or **RSA_4096**.

> You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/465954.html) operation to query the key algorithm of a root CA certificate.

This parameter is required.', example='RSA_2048', position='Query'),
  commonName: string(name='CommonName', description='The common name or abbreviation of the organization. The value can contain letters.

This parameter is required.', example='Aliyun', position='Query'),
  countryCode?: string(name='CountryCode', description='The code of the country or region in which the organization is located. You can enter an alpha-2 or alpha-3 code. For example, you can use **CN** to indicate China and use **US** to indicate the United States.

For more information about country codes, see the **"Country codes"** section in [Manage company profiles](https://help.aliyun.com/document_detail/198289.html).', example='CN', position='Query'),
  crlDay?: int32(name='CrlDay', description='CRL validity period: 1-365 days', example='30', position='Query'),
  enableCrl?: boolean(name='EnableCrl', description='Enable Crl Service.

- 0- No
- 1- Yes', example='1', position='Query'),
  extendedKeyUsages?: [ string ](name='ExtendedKeyUsages', description='The extended key usages of the certificate.', position='Query'),
  locality: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters.

This parameter is required.', example='Hangzhou', position='Query'),
  organization: string(name='Organization', description='The name of the organization that is associated with the intermediate CA certificate. You can enter the name of your enterprise or company. The value can contain letters.

This parameter is required.', example='Maizi Technology', position='Query'),
  organizationUnit: string(name='OrganizationUnit', description='The name of the department or branch in the organization. The value can contain letters.

This parameter is required.', example='Security', position='Query'),
  parentIdentifier: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate.

> You can call the [DescribeCACertificateList] operation to query the unique identifiers of all CA certificates.

This parameter is required.', example='1a83bcbb89e562885e40aa0108f5****', position='Query'),
  pathLenConstraint?: int32(name='PathLenConstraint', description='The path length constraint of the certificate. Default value: 0.', example='0', position='Query'),
  state: string(name='State', description='The name of the province or state in which the organization is located. The value can contain letters.

This parameter is required.', example='Zhejiang', position='Query'),
  years: int32(name='Years', description='The validity period of the intermediate CA certificate. Unit: years.

We recommend that you set this parameter to 5 to 10.

> The validity period of the intermediate CA certificate cannot exceed the validity period of the root CA certificate. You can call the [DescribeCACertificate]operation to query the validity period of a root CA certificate.

This parameter is required.', example='5', position='Query'),
}

model CreateSubCACertificateResponseBody = {
  certificate?: string(name='Certificate', description='The CA certificate in the PEM format.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the CA certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the sub CA certificate created in this request.', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of this call request is a unique identifier generated by Alibaba Cloud for the request, which can be used for troubleshooting and locating issues.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateSubCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubCACertificateResponseBody(name='body'),
}

/**
  * @description You can call this operation to issue an intermediate certificate authority (CA) certificate by using an existing root CA certificate. Intermediate CA certificates can be used to issue client certificates and server certificates.
  * Before you call this operation, make sure that you have issued a root CA certificate by calling the [CreateRootCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateSubCACertificate  CreateSubCACertificateRequest
  * @return CreateSubCACertificateResponse
 */
async function createSubCACertificate(request: CreateSubCACertificateRequest): CreateSubCACertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubCACertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClientCertificateRequest {
  identifier: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to delete. The status of the certificate must be **REVOKE**.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers and status of all client certificates and server certificates.

This parameter is required.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
}

model DeleteClientCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCertificateResponseBody(name='body'),
}

/**
  * @description Before you call this operation, you must call the [CreateRevokeClientCertificate](https://help.aliyun.com/document_detail/330876.html) operation to revoke a client certificate or a server certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DeleteClientCertificate  DeleteClientCertificateRequest
  * @return DeleteClientCertificateResponse
 */
async function deleteClientCertificate(request: DeleteClientCertificateRequest): DeleteClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteClientCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCACertificateRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the CA certificate that you want to query.

>  You can call the [DescribeCACertificateList](https://help.aliyun.com/document_detail/328095.html) operation to query the unique identifiers of all CA certificates.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
}

model DescribeCACertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate', description='The expiration date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
    algorithm?: string(name='Algorithm', description='The encryption algorithm of the CA certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The issuance date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
    caCertChain?: string(name='CaCertChain', description='CA certificate chain.', example='-----BEGIN CERTIFICATE-----
用户证书
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
中间证书
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
根证书
-----END CERTIFICATE-----'),
    certIssuedCount?: long(name='CertIssuedCount', description='The number of certificates issued by private CA instances.', example='10'),
    certRemainingCount?: long(name='CertRemainingCount', description='The remaining number of assignable certificate quotas.', example='30'),
    certTotalCount?: long(name='CertTotalCount', description='The total number of purchased certificate quotas.', example='40'),
    certificateType?: string(name='CertificateType', description='The type of the CA certificate. Valid values:

*   **ROOT**: root CA certificate
*   **SUB_ROOT**: intermediate CA certificate', example='SUB_ROOT'),
    commonName?: string(name='CommonName', description='The common name or abbreviation of the organization that is associated with the CA certificate.', example='Aliyun'),
    countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN'),
    crlDay?: int32(name='CrlDay', description='CRL validity period: 1-365 days.', example='90'),
    crlStatus?: string(name='CrlStatus', description='The status of the certificate revocation list (CRL) feature.', example='ACTIVE'),
    crlUrl?: string(name='CrlUrl', description='The address of the CRL.', example='https://crl-cn-publish.oss-cn-hangzhou.aliyuncs.com/pca/crl/1925647866611395/1ed40789-483f-6023-b6b8-29ddd3bb0a9a.crl'),
    identifier?: string(name='Identifier', description='The unique identifier of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
    keySize?: int32(name='KeySize', description='The key length of the CA certificate.', example='2048'),
    locality?: string(name='Locality', description='The name of the city in which the organization is located.', example='Hangzhou'),
    md5?: string(name='Md5', description='The MD5 fingerprint of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
    organization?: string(name='Organization', description='The name of the organization that is associated with the CA certificate.', example='Alibaba Cloud Computing Co., Ltd.'),
    organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization that is associated with the CA certificate.', example='Security'),
    parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate from which the CA certificate is issued.

>  This parameter is returned only if the value of the **CertificateType** parameter is **SUB_ROOT**. The value SUB_ROOT indicates an intermediate CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
    sans?: string(name='Sans', description='This parameter is deprecated.', example='1'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the CA certificate.', example='70e3b2566d92805173767869727fb92e****'),
    sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the CA certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
    signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the CA certificate.', example='SHA256WITHRSA'),
    state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located.', example='Zhejiang'),
    status?: string(name='Status', description='The status of the CA certificate. Valid values:

*   **ISSUE**: The CA certificate is issued.
*   **REVOKE**: The CA certificate is revoked.', example='ISSUE'),
    subjectDN?: string(name='SubjectDN', description='The user attribute of the CA certificate, which contains the following information:

*   **C**: the country code in which the organization is located
*   **O**: the name of the organization
*   **OU**: the name of the department or branch in the organization
*   **L**: the name of the city in which the organization is located
*   **ST**: the name of the province, municipality, or autonomous region in which the organization is located
*   **CN**: the common name or abbreviation of the organization', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
    x509Certificate?: string(name='X509Certificate', description='The content of the CA certificate.', example='-----BEGIN CERTIFICATE----- …… -----END CERTIFICATE-----'),
  }(name='Certificate', description='The details about the CA certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  years?: int32(name='Years', description='The validity period of the CA certificate. Unit: years.', example='10'),
}

model DescribeCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateResponseBody(name='body'),
}

/**
  * @description You can call the DescribeCACertificate operation to query the details about a root CA certificate or an intermediate CA certificate by using the unique identifier of the root CA certificate or intermediate CA certificate. The details include the serial number, user information, and content of a CA certificate.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeCACertificate  DescribeCACertificateRequest
  * @return DescribeCACertificateResponse
 */
async function describeCACertificate(request: DescribeCACertificateRequest): DescribeCACertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCACertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCACertificateCountRequest {
}

model DescribeCACertificateCountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', description='The number of created CA certificates, which includes root CA certificates and intermediate CA certificates.', example='2'),
}

model DescribeCACertificateCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateCountResponseBody(name='body'),
}

/**
  * @description You can call the DescribeCACertificateCount operation to query the number of created CA certificates, which includes root CA certificates and intermediate CA certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeCACertificateCount  DescribeCACertificateCountRequest
  * @return DescribeCACertificateCountResponse
 */
async function describeCACertificateCount(request: DescribeCACertificateCountRequest): DescribeCACertificateCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCACertificateCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCACertificateListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to revoke.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
  showSize?: int32(name='ShowSize', description='The number of CA certificates to return on each page. Default value: **20**.', example='20', position='Query'),
}

model DescribeCACertificateListResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate', description='The expiration date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
      algorithm?: string(name='Algorithm', description='The encryption algorithm of the CA certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: long(name='BeforeDate', description='The issuance date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
      certificateType?: string(name='CertificateType', description='The type of the CA certificate. Valid values:

*   **ROOT**: root CA certificate
*   **SUB_ROOT**: intermediate CA certificate', example='SUB_ROOT'),
      commonName?: string(name='CommonName', description='The common name or abbreviation of the organization that is associated with the CA certificate.', example='Aliyun'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN'),
      identifier?: string(name='Identifier', description='The unique identifier of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      keySize?: int32(name='KeySize', description='The key length of the CA certificate.', example='2048'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      organization?: string(name='Organization', description='The name of the organization that is associated with the CA certificate.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization that is associated with the CA certificate.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate from which the CA certificate is issued.

>  This parameter is returned only if the value of the **CertificateType** parameter is **SUB_ROOT**. The value SUB_ROOT indicates an intermediate CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
      sans?: string(name='Sans', description='This parameter is deprecated.', example='1'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the CA certificate.', example='70e3b2566d92805173767869727fb92e****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the CA certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the CA certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located.', example='Zhejiang'),
      status?: string(name='Status', description='The status of the CA certificate. Valid values:

*   **ISSUE**: The CA certificate is issued.
*   **REVOKE**: The CA certificate is revoked.', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The Distinguished Name (DN) attribute of the CA certificate, which indicates the user information of the certificate. The DN attribute contains the following information:

*   **C**: the country code in which the organization is located
*   **O**: the name of the organization
*   **OU**: the name of the department or branch in the organization
*   **L**: the name of the city in which the organization is located
*   **CN**: the common name or abbreviation of the organization', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
      x509Certificate?: string(name='X509Certificate', description='The content of the CA certificate.', example='-----BEGIN CERTIFICATE----- …… -----END CERTIFICATE-----'),
      years?: int32(name='Years', description='The validity period of the CA certificate. Unit: years.', example='3'),
    }
  ](name='CertificateList', description='An array that consists of the details about the CA certificate.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The number of returned pages.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of CA certificates returned per page.', example='20'),
  totalCount?: int32(name='TotalCount', description='The total number of root CA certificates and intermediate CA certificates that are returned.', example='2'),
}

model DescribeCACertificateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateListResponseBody(name='body'),
}

/**
  * @description You can call the DescribeCACertificateList operation to perform a paged query of the details about all CA certificates that you create. The details include the unique identifier, serial number, user information, and content of each root CA certificate or intermediate CA certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeCACertificateList  DescribeCACertificateListRequest
  * @return DescribeCACertificateListResponse
 */
async function describeCACertificateList(request: DescribeCACertificateListRequest): DescribeCACertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCACertificateList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertificatePrivateKeyRequest {
  encryptedCode: string(name='EncryptedCode', description='The password that is used to encrypt the private key. The password can contain letters, digits, and special characters, such as `, + - _ #`. The password can be up to 32 bytes in length.

**Warning** You must remember the password that you specify. The password is required to decrypt the encrypted private key. If you forget the password, the encrypted private key that is returned cannot be decrypted. You must call this operation again.

This parameter is required.', example='!QA@WS3ed', position='Query'),
  identifier: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to query.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.

This parameter is required.', example='bc37133bb7ed68c7938d928fd26d****', position='Query'),
}

model DescribeCertificatePrivateKeyResponseBody = {
  encryptedData?: string(name='EncryptedData', description='The content of the encrypted private key.', example='-----BEGIN ENCRYPTED PRIVATE KEY----- …… -----END ENCRYPTED PRIVATE KEY-----'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='09470F19-CEE8-5C63-BF2C-02B5E3F07A17'),
}

model DescribeCertificatePrivateKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCertificatePrivateKeyResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * You can call the DescribeCertificatePrivateKey operation to obtain the encrypted private key of a client certificate or a server certificate. The certificate is issued based on a system-generated certificate signing request (CSR). Before you call this operation, make sure that you have issued a client certificate or a server certificate by calling the following operation:
  * *   [CreateClientCertificate](https://help.aliyun.com/document_detail/330873.html)
  * *   [CreateServerCertificate](https://help.aliyun.com/document_detail/330877.html)
  * To ensure the security of private key transmission, the DescribeCertificatePrivateKey operation encrypts the private key by using the private key password that you specify and returns the encrypted private key. The private key password is a string that is used to encrypt the private key. After you obtain the encrypted private key of the certificate, you can use the following methods to decrypt the private key:
  * *   If the encryption algorithm of the certificate is RSA, you must run the `openssl rsa -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is ECC, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is SM2, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * >  You can call the [DescribeClientCertificate] operation to query the encryption algorithm type of a client certificate or a server certificate.
  * ## Limits
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeCertificatePrivateKey  DescribeCertificatePrivateKeyRequest
  * @return DescribeCertificatePrivateKeyResponse
 */
async function describeCertificatePrivateKey(request: DescribeCertificatePrivateKeyRequest): DescribeCertificatePrivateKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCertificatePrivateKey', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClientCertificateRequest {
  identifier: string(name='Identifier', description='The unique identifier of the client certificate or the server certificate that you want to query.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.

This parameter is required.', example='d3b95700998e47afc4d95f886579****', position='Query'),
}

model DescribeClientCertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate', description='The expiration date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
    algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The issuance date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
    certificateType?: string(name='CertificateType', description='The type of the certificate. Valid values:

*   **CLIENT**: client certificate
*   **SERVER**: server certificate', example='SERVER'),
    commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyun.com'),
    countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN'),
    days?: int32(name='Days', description='The validity period of the certificate. Unit: days.', example='365'),
    identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='d3b95700998e47afc4d95f886579****'),
    keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
    locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
    md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='d3b95700998e47afc4d95f886579****'),
    organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
    organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
    parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate certificate from which the client certificate is issued.', example='160ae6bb538d538c70c01f81dcf2****'),
    sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate. The value indicates additional information, including the additional domain names or IP addresses that are associated with the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='62b2b943a32d96883a6650e672ea0276****'),
    sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
    signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
    state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
    status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
    subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
    x509Certificate?: string(name='X509Certificate', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----  ...... -----END CERTIFICATE-----'),
  }(name='Certificate', description='The details about the client certificate or the server certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DescribeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClientCertificateResponseBody(name='body'),
}

/**
  * @description You can call the DescribeClientCertificate operation to query the details about a client certificate or a server certificate by using the unique identifier of the certificate. The details include the serial number, user information, content, and status of each certificate.
  * Before you call this operation, make sure that you have created a client certificate or a server certificate.
  * For more information about how to call an operation to create a client certificate, see the following topics:
  * *   [CreateClientCertificate](https://help.aliyun.com/document_detail/330873.html)
  * *   [CreateClientCertificateWithCsr](https://help.aliyun.com/document_detail/330875.html)
  * For more information about how to call an operation to create a server certificate, see the following topics:
  * *   [CreateServerCertificate](https://help.aliyun.com/document_detail/330877.html)
  * *   [CreateServerCertificateWithCsr](https://help.aliyun.com/document_detail/330878.html)
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeClientCertificate  DescribeClientCertificateRequest
  * @return DescribeClientCertificateResponse
 */
async function describeClientCertificate(request: DescribeClientCertificateRequest): DescribeClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClientCertificateStatusRequest {
  identifier: string(name='Identifier', description='The unique identifiers of the client certificates or server certificates that you want to query. Separate multiple unique identifiers with commas (,).

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.

This parameter is required.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
}

model DescribeClientCertificateStatusResponseBody = {
  certificateStatus?: [ 
    {
      revokeTime?: long(name='RevokeTime', description='The date on which the certificate was revoked.

>  This parameter is returned only when the value of the **Status** parameter is **revoked**. The value revoked indicates that the certificate is revoked.', example='2021-01-01T00:00Z'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='b67e53ebcea9b77d65b0c3236646d715****'),
      status?: string(name='Status', description='The status of the certificate. Valid values:

*   **good**: The certificate is not revoked.
*   **revoked**: The certificate is revoked.
*   **unknown**: The server cannot determine the status of the certificate.', example='good'),
    }
  ](name='CertificateStatus', description='An array that consists of the status information about the certificates.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DescribeClientCertificateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClientCertificateStatusResponseBody(name='body'),
}

/**
  * @description You can call the DescribeClientCertificateStatus operation to query the status information about multiple client certificates or server certificates at a time by using the unique identifiers of the certificates. For example, you can check whether a certificate is revoked.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DescribeClientCertificateStatus  DescribeClientCertificateStatusRequest
  * @return DescribeClientCertificateStatusResponse
 */
async function describeClientCertificateStatus(request: DescribeClientCertificateStatusRequest): DescribeClientCertificateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClientCertificateStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetCAInstanceStatusRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the private CA instance.

>  After you purchase a private CA instance by using the [SSL Certificates Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist), you can click **Details** for the private CA instance on the **Private Certificates** page to query the ID of the private CA instance.', example='cas-member-0hmi****', position='Query'),
}

model GetCAInstanceStatusResponseBody = {
  instanceStatusList?: [ 
    {
      afterTime?: long(name='AfterTime', description='The expiration date of the private CA certificate. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='1792944000000'),
      beforeTime?: long(name='BeforeTime', description='The issuance date of the private CA certificate. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='1635177600000'),
      certIssuedCount?: int32(name='CertIssuedCount', description='The number of certificates that are issued by using the private CA instance.', example='1'),
      certTotalCount?: int32(name='CertTotalCount', description='The number of certificates that can be issued by using the private CA instance.

For a private root CA instance whose **Type** is **ROOT**, this parameter indicates the number of intermediate CA certificates that can be issued.

For a private intermediate CA instance whose **Type** is **SUB_ROOT**, this parameter indicates the total number of client certificates and server certificates that can be issued', example='10'),
      identifier?: string(name='Identifier', description='The unique identifier of the private CA certificate.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='a7bb2dd212a2112128cd5cc9b753****'),
      instanceId?: string(name='InstanceId', description='The ID of the private CA instance.', example='cas-member-0hmi****'),
      status?: string(name='Status', description='The status of the private CA instance. Valid values:

*   **BUY**: The private CA instance is purchased but is not enabled.
*   **USED**: The private CA instance is enabled.
*   **REFUND**: The private CA instance is refunded.
*   **REVOKE**: The private CA instance is revoked.', example='USED'),
      type?: string(name='Type', description='The type of the private CA instance. Valid values:

*   **ROOT**: root CA instance
*   **SUB_ROOT**: intermediate CA instance', example='ROOT'),
      useExpireTime?: long(name='UseExpireTime', description='The expiration date of the private CA instance. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter corresponds to the duration that you select when you purchase the private CA instance. The duration indicates the subscription period of the Private Certificate Authority (PCA) service.', example='1637251200000'),
    }
  ](name='InstanceStatusList', description='The status information of the private CA instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25589516-2A56-5159-AB88-4A1D9824E183'),
}

model GetCAInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCAInstanceStatusResponseBody(name='body'),
}

/**
  * @description ## Usage notes
  * You can call the GetCAInstanceStatus operation to query the status information of a private CA instance by using the ID of the instance. The instance is purchased by using the SSL Certificates Service console. The status information includes the status of the private CA instance, the number of certificates that can be issued by using the private CA instance, and the number of issued certificates.
  * Before you call this operation, make sure that you have purchased a private CA by using the [SSL Certificates Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist). For more information, see [Create a private CA](https://help.aliyun.com/document_detail/208553.html).
  * @param request  the request parameters of GetCAInstanceStatus  GetCAInstanceStatusRequest
  * @return GetCAInstanceStatusResponse
 */
async function getCAInstanceStatus(request: GetCAInstanceStatusRequest): GetCAInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCAInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListClientCertificateRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or the server certificate that you want to query.

>  You can call the [ListClientCertificate](https://help.aliyun.com/document_detail/330884.html) operation to query the unique identifiers of all client certificates and server certificates.', example='190ae6bb538d538c70c01f81dcf2****', position='Query'),
  showSize?: int32(name='ShowSize', description='The number of certificates to return on each page. Default value: **20**.', example='20', position='Query'),
}

model ListClientCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate', description='The expiration date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
      algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: long(name='BeforeDate', description='The issuance date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
      certificateType?: string(name='CertificateType', description='The type of the certificate. Valid values:

*   **CLIENT**: client certificate
*   **SERVER**: server certificate', example='SERVER'),
      commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyundoc.com'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN'),
      days?: int32(name='Days', description='The validity period of the certificate. Unit: days.', example='365'),
      identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='d3b95700998e47afc4d95f886579****'),
      keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='d3b95700998e47afc4d95f886579****'),
      organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate certificate from which the client certificate is issued.', example='160ae6bb538d538c70c01f81dcf2****'),
      sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate. The value indicates additional information, including the additional domain names or IP addresses that are associated with the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='62b2b943a32d96883a6650e672ea0276****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
      status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
      x509Certificate?: string(name='X509Certificate', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----  ...... -----END CERTIFICATE-----'),
    }
  ](name='CertificateList', description='An array that consists of the details about all client certificates and server certificates.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of certificates that are returned per page.', example='20'),
  totalCount?: long(name='TotalCount', description='The number of client certificates and server certificates that are returned.', example='1'),
}

model ListClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificateResponseBody(name='body'),
}

/**
  * @description You can call the ListClientCertificate operation to perform a paged query of the details about all client certificates and server certificates that you create. The details include the unique identifier, serial number, user information, content, and status of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListClientCertificate  ListClientCertificateRequest
  * @return ListClientCertificateResponse
 */
async function listClientCertificate(request: ListClientCertificateRequest): ListClientCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClientCertificate', 'POST', '/', 'json', false, 'json', request);
}

model ListRevokeCertificateRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  showSize?: int32(name='ShowSize', description='The number of revoked certificates to return on each page. Default value: **20**.', example='20', position='Query'),
}

model ListRevokeCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: string(name='AfterDate', description='The expiration date of the certificate. The date is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-12-31T00:00Z` indicates December 31, 2021.', example='2021-12-31T00:00Z'),
      algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: string(name='BeforeDate', description='The issuance date of the certificate. The date is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-01-01T00:00Z` indicates January 1, 2021.', example='2021-01-01T00:00Z'),
      certificateType?: string(name='CertificateType', description='The type of the certificate.', example='SERVER'),
      commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyundoc.com'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](https://help.aliyun.com/document_detail/198289.html) topic.', example='CN'),
      identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='05e148d8d3ecc9976d9ecd2b2f25****'),
      keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='05e148d8d3ecc9976d9ecd2b2f25****'),
      organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The identifier of the root certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      revokeDate?: string(name='RevokeDate', description='The date on which the certificate was revoked. The value is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-09-01T00:00Z` indicates September 1, 2021.', example='2021-09-01T00:00Z'),
      sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='168b12c42e62339f8d2340ff530f9365****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='b60eff7e04323ff662f9ab5e6986f849f626a9c7bf2c59dcc752fa23779a****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
      status?: string(name='Status', description='The status.', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=ZheJiang,ST=HangZhou,CN=aliyundoc.com'),
    }
  ](name='CertificateList', description='An array that consists of the details about the revoked client certificates or server certificates.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of revoked certificates that are returned per page.', example='20'),
  totalCount?: long(name='TotalCount', description='The total number of revoked client certificates and server certificates that are returned.', example='1'),
}

model ListRevokeCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRevokeCertificateResponseBody(name='body'),
}

/**
  * @description You can call the ListRevokeCertificate operation to perform a paged query of the details about all revoked client certificates and server certificates. The details include the unique identifier, serial number, and revocation date of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListRevokeCertificate  ListRevokeCertificateRequest
  * @return ListRevokeCertificateResponse
 */
async function listRevokeCertificate(request: ListRevokeCertificateRequest): ListRevokeCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRevokeCertificate', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCACertificateStatusRequest {
  identifier: string(name='Identifier', description='The unique identifier of the CA certificate whose status you want to change.

>  You can call the [DescribeCACertificateList](https://help.aliyun.com/document_detail/328095.html) operation to query the unique identifiers of all CA certificates.

This parameter is required.', example='160ae6bb538d538c70c01f81dcf2****', position='Query'),
  status: string(name='Status', description='The state to which you want to change the CA certificate. Set to the value to **REVOKE**. After this operation is called, the status of the CA certificate is changed to **REVOKE**.

>  You can call this operation only if the status of a CA certificate is **ISSUE**. You can call the [DescribeCACertificate](https://help.aliyun.com/document_detail/328096.html) operation to query the status of a CA certificate.

This parameter is required.', example='REVOKE', position='Query'),
}

model UpdateCACertificateStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateCACertificateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCACertificateStatusResponseBody(name='body'),
}

/**
  * @description After a CA certificate is created, the CA certificate is in the ISSUE state by default. You can call the UpdateCACertificateStatus operation to change the status of a CA certificate from ISSUE to REVOKE. If a CA certificate is in the ISSUE state, the CA certificate can be used to issue certificates. If a CA certificate is in the REVOKE state, the CA certificate cannot be used to issue certificates, and the certificates that are issued from the CA certificate become invalid.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of UpdateCACertificateStatus  UpdateCACertificateStatusRequest
  * @return UpdateCACertificateStatusResponse
 */
async function updateCACertificateStatus(request: UpdateCACertificateStatusRequest): UpdateCACertificateStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCACertificateStatus', 'POST', '/', 'json', false, 'json', request);
}

