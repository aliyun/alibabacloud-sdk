/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-wulanchabu = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateClientCertificateRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the client certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the client certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the client certificate must be the same with the encryption algorithm of the intermediate certificate authority (CA) certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA\\_2048, the key algorithm of the client certificate must be RSA\\_1024, RSA\\_2048, or RSA\\_4096.

> You can call the [DescribeCACertificate] operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the client certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958'),
  commonName?: string(name='CommonName', description='The name of the client certificate user. In most cases, the user of a client certificate is an individual, a company, an organization, or an application. We recommend that you enter the common name of a user. Examples: Bob, Alibaba, Alibaba Cloud password platform, and Tmall Genie.', example='aliyun'),
  country?: string(name='Country', description='The country in which the organization is located. Default value: CN.', example='CN'),
  days?: int32(name='Days', description='The validity period of the client certificate. Unit: day. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters at the same time, the validity period of the client certificate is determined by the value of the **Days** parameter.

*   The validity period of the client certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](~~465954~~) operation to query the validity period of an intermediate CA certificate.', example='365'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou'),
  months?: int32(name='Months', description='The validity period of the client certificate. Unit: months.', example='1'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

> You can call the [DescribeCACertificateList] operation to query the unique identifier of an intermediate CA certificate.', example='273ae6bb538d538c70c01f81jh2****'),
  sanType?: int32(name='SanType', description='The type of the Subject Alternative Name (SAN) extension that is supported by the client certificate. Valid values:

*   **1**: an email address
*   **6**: a Uniform Resource Identifier (URI)', example='1'),
  sanValue?: string(name='SanValue', description='The content of the extension. You can specify multiple SAN extensions. If you want to specify multiple SAN extensions, separate them with commas (,).', example='somebody@example.com'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang'),
  years?: int32(name='Years', description='The validity period of the client certificate. Unit: years.', example='5'),
}

model CreateClientCertificateResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate.', example='190ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='8C467B38-3910-447D-87BC-AC049166F216'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate] operation and an intermediate CA certificate by calling the [CreateSubCACertificate] operation. Only intermediate CA certificates can issue client certificates.
  * ## QPS limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateClientCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateClientCertificateResponse
 */
async function createClientCertificateWithOptions(request: CreateClientCertificateRequest, runtime: Util.RuntimeOptions): CreateClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.afterTime)) {
    query['AfterTime'] = request.afterTime;
  }
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.months)) {
    query['Months'] = request.months;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.sanType)) {
    query['SanType'] = request.sanType;
  }
  if (!Util.isUnset(request.sanValue)) {
    query['SanValue'] = request.sanValue;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate] operation and an intermediate CA certificate by calling the [CreateSubCACertificate] operation. Only intermediate CA certificates can issue client certificates.
  * ## QPS limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateClientCertificateRequest
  * @return CreateClientCertificateResponse
 */
async function createClientCertificate(request: CreateClientCertificateRequest): CreateClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClientCertificateWithOptions(request, runtime);
}

model CreateClientCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the client certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the client certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the client certificate must be the same with the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA\\_2048, the key algorithm of the client certificate must be RSA\\_1024, RSA\\_2048, or RSA\\_4096.

>  You can call the [DescribeCACertificate](~~328096~~) operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the client certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958'),
  commonName?: string(name='CommonName', description='The common name of the certificate. The value can contain letters.

>  If you specify the **CsrPemString** parameter, the value of the **CommonName** parameter is determined by the **CsrPemString** parameter.', example='aliyundoc.com'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as **CN** and **US**.', example='CN'),
  csr?: string(name='Csr', description='The content of the CSR file. You can generate a CSR file by using the OpenSSL tool or Keytool. For more information, see [How do I create a CSR file?](~~42218~~) You can also create a CSR file in the Certificate Management Service console. For more information, see [Create a CSR](~~313297~~).', example='-----BEGIN CERTIFICATE REQUEST-----   ...... -----END CERTIFICATE REQUEST-----'),
  days?: int32(name='Days', description='The validity period of the client certificate. Unit: days. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters together, the validity period of the client certificate is determined by the value of the **Days** parameter.

*   The validity period of the client certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](~~328096~~) operation to query the validity period of an intermediate CA certificate.', example='365'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou'),
  months?: int32(name='Months', description='The validity period of the client certificate. Unit: months.', example='12'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud Computing Co., Ltd.'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='Security'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the client certificate is issued.

>  You can call the [DescribeCACertificateList](~~328095~~) operation to query the unique identifier of an intermediate CA certificate.', example='270ae6bb538d538c70c01f81fg3****'),
  sanType?: int32(name='SanType', description='The type of the Subject Alternative Name (SAN) extension that is supported by the client certificate. Valid values:

*   **1**: an email address
*   **6**: a Uniform Resource Identifier (URI)', example='1'),
  sanValue?: string(name='SanValue', description='The content of the extension. You can specify multiple SAN extensions. If you want to specify multiple SAN extensions, separate them with commas (,).', example='somebody@example.com'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang'),
  years?: int32(name='Years', description='The validity period of the client certificate. Unit: years.', example='1'),
}

model CreateClientCertificateWithCsrResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate.', example='200ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='31C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the client certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateClientCertificateWithCsrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateClientCertificateWithCsrResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue client certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateClientCertificateWithCsrRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateClientCertificateWithCsrResponse
 */
async function createClientCertificateWithCsrWithOptions(request: CreateClientCertificateWithCsrRequest, runtime: Util.RuntimeOptions): CreateClientCertificateWithCsrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.afterTime)) {
    query['AfterTime'] = request.afterTime;
  }
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.months)) {
    query['Months'] = request.months;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.sanType)) {
    query['SanType'] = request.sanType;
  }
  if (!Util.isUnset(request.sanValue)) {
    query['SanValue'] = request.sanValue;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateClientCertificateWithCsr',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue client certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateClientCertificateWithCsrRequest
  * @return CreateClientCertificateWithCsrResponse
 */
async function createClientCertificateWithCsr(request: CreateClientCertificateWithCsrRequest): CreateClientCertificateWithCsrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClientCertificateWithCsrWithOptions(request, runtime);
}

model CreateCustomCertificateRequest {
  apiPassthrough?: {
    extensions?: {
      criticals?: [ string ](name='Criticals', description='If it is a necessary parameter, the critical list contains the parameter name.'),
      extendedKeyUsages?: [ string ](name='ExtendedKeyUsages', description='The extended key usage.'),
      keyUsage?: {
        contentCommitment?: boolean(name='ContentCommitment', description='The original name of the parameter is NonRepudiation.', example='false'),
        dataEncipherment?: boolean(name='DataEncipherment', description='Specifies whether the key can be used for data encryption.', example='false'),
        decipherOnly?: boolean(name='DecipherOnly', description='Specifies whether the key can be used only for data decryption.', example='false'),
        digitalSignature?: boolean(name='DigitalSignature', description='Specifies whether the key can be used for digital signing. If you set this parameter to true, the private key of the certificate can be used to generate digital signatures, and the public key of the certificate can be used to verify digital signatures.', example='true'),
        encipherOnly?: boolean(name='EncipherOnly', description='Specifies whether the key can be used only for data encryption.', example='false'),
        keyAgreement?: boolean(name='KeyAgreement', description='Specifies whether the key can be used for key agreement.', example='false'),
        keyEncipherment?: boolean(name='KeyEncipherment', description='Specifies whether the key can be used for data encipherment.', example='false'),
        nonRepudiation?: boolean(name='NonRepudiation', description='Specifies whether the key can be used for non-repudiation. This parameter is renamed ContentCommitment in the X.509 standard.', example='false'),
      }(name='KeyUsage', description='The key usage.'),
      subjectAlternativeNames?: [ 
        {
          type?: string(name='Type', description='The type of the alias. Valid values:

*   rfc822Name: email address
*   dNSName: domain name
*   uniformResourceIdentifier: URI
*   iPAddress: IP address', example='dNSName'),
          value?: string(name='Value', description='The alias that meets the requirement of a specified type.', example='rfc822Name:
exmaple@certqa.cn

dNSName:
www.certqa.cn

uniformResourceIdentifier:
acs:ecs:regionid:15619224785*****:instance/i-bp1bzvz55uz27hf*****

iPAddress:
127.0.0.1'),
        }
      ](name='SubjectAlternativeNames', description='The aliases of the entities.'),
    }(name='Extensions', description='The extensions of the certificate.'),
    serialNumber?: string(name='SerialNumber', description='The serial number MUST be a positive integer assigned by the CA to each certificate.', example='16889526086333'),
    subject?: {
      commonName?: string(name='CommonName', description='The common name of the certificate user.', example='Bob'),
      country?: string(name='Country', description='The code of the country. The value is an alpha-2 country code that complies with the ISO 3166-1 standard. For more information about country codes, visit <https://www.iso.org/obp/ui/#search/code/>.', example='CN'),
      customAttributes?: [ 
        {
          objectIdentifier?: string(name='ObjectIdentifier', description='Custom attribute type as:

- 2.5.4.6 : country
- 2.5.4.10 : organization
- 2.5.4.11 : organizational unit
- 2.5.4.12 : title
- 2.5.4.3 : common name
- 2.5.4.9 : street
- 2.5.4.5 : serial number
- 2.5.4.7 : locality
- 2.5.4.8 : state
- 1.3.6.1.4.1.37244.1.1 : Matter Operational Certificate - Node ID
- 1.3.6.1.4.1.37244.1.5 : Matter Operational Certificate - Fabric ID
- 1.3.6.1.4.1.37244.2.1 : Matter Device Attestation Certificate Vender ID (VID)
- 1.3.6.1.4.1.37244.2.2 : Matter Device Attestation Certificate Product ID (PID).', example='2.5.4.3'),
          value?: string(name='Value', description='Custom attribute value.', example='Aliyun'),
        }
      ](name='CustomAttributes', description='Customize the Subject attributes of the certificate.'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters.', example='Hangzhou'),
      organization?: string(name='Organization', description='The name of the organization.', example='XXX company'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization.', example='XXX department'),
      state?: string(name='State', description='The name of the province or state in which the organization associated with the certificate is located.', example='Zhejiang'),
    }(name='Subject', description='The name of the entity that uses the certificate.'),
  }(name='ApiPassthrough', description='The passthrough parameters.'),
  csr?: string(name='Csr', description='The content of the CSR. You can generate a CSR by using the OpenSSL tool or the Keytool tool. For more information, see [How do I create a CSR file?](~~42218~~)', example='-----BEGIN CERTIFICATE REQUEST-----
MIIBczCCARgCAQAwgYoxFDASBgNVBAMMC2FsaXl1bi50ZXN0MQ0wCwYDVQQ
...
...
...
vbIgMQIhAKHDWD6/WAMbtezAt4bysJ/BZIDz1jPWuUR5GV4TJ/mS
-----END CERTIFICATE REQUEST-----'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1'),
  immediately?: int32(name='Immediately', description='Specifies whether to immediately issue the certificate. Valid values:

*   0: asynchronously issues the certificate.
*   1: immediately issues the certificate.
*   2: immediately issues the certificate and returns the certificate chain.', example='0'),
  parentIdentifier?: string(name='ParentIdentifier', description='The identifier of the certificate.', example='1ed4068c-6f1b-6deb-8e32-3f8439a851cb'),
  validity?: string(name='Validity', description='The validity period of the certificate. The value cannot exceed the validity period of the certificate instance. Relative time and absolute time are supported.

Units of relative time: year, month, and day.

*   Use y to specify years.
*   Use m to specify months.
*   Use d to specify days.

Absolute time: Use Greenwich Mean Time (GMT). Format: `yyyy-MM-dd\\"T\\"HH:mm:ss\\"Z\\"`

*   Format of the end time: $NotAfter
*   Format of the start time and end time: $NotBefore/$NotAfter', example='Relative time:
 ● 1y
 ● 3m
 ● 7d
Absolute time: 
● 2006-01-02T15:04:05Z 
● 2006-01-02T15:04:05Z/2023-03-09T17:48:13Z'),
}

model CreateCustomCertificateResponseBody = {
  certificate?: string(name='Certificate', description='The content of the certificate. This parameter is returned only if Immediately is set to 1 or 2.', example='-----BEGIN CERTIFICATE-----
MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/
...
...
...
KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==
-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the certificate. This parameter is returned only if Immediately is set to 2.', example='-----BEGIN CERTIFICATE-----
MIIBfzCCATGgAwIBAgIUfI5kSdcO2S0+LkpdL3b2VUJG10YwBQYDK2VwMDUxCzAJ
...
...
...
ZYYG
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIBczCCARgCAQAwgYoxFDASBgNVBAMMC2FsaXl1bi50ZXN0MQ0wCwYDVQQ
...
...
...
KL5cUmF
-----END CERTIFICATE-----'),
  identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The request ID.', example='12345678-1234-1234-1234-123456789ABC'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the certificate. This parameter is returned only if Immediately is set to 1 or 2.', example='084bde9cd233f0ddae33adc438cfbbbd****'),
}

model CreateCustomCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateCustomCertificateResponseBody(name='body'),
}

/**
  * By default, the name of the entity is obtained from the certificate signing request (CSR) of the certificate that you want to issue. If you specify a different name for the entity, the name of the entity in the CSR becomes invalid. The specified name is used to issue the certificate.
  * You must specify the key usage and extended key usage based on the certificate type. The following list describes common certificate types:
  * *   Server certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth
  * *   Client certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: clientAuth
  * *   Mutual Transport Layer Security (TLS) authentication certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth or clientAuth
  * *   Email certificate
  * Key usage: digitalSignature or contentCommitment
  * Extended key usage: emailProtection
  * Note: Compliant certificate authorities (CAs) are managed by third-party authorities. This operation is not supported for compliant CAs.
  *
  * @param request CreateCustomCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateCustomCertificateResponse
 */
async function createCustomCertificateWithOptions(request: CreateCustomCertificateRequest, runtime: Util.RuntimeOptions): CreateCustomCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiPassthrough)) {
    query['ApiPassthrough'] = request.apiPassthrough;
  }
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.validity)) {
    query['Validity'] = request.validity;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCustomCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * By default, the name of the entity is obtained from the certificate signing request (CSR) of the certificate that you want to issue. If you specify a different name for the entity, the name of the entity in the CSR becomes invalid. The specified name is used to issue the certificate.
  * You must specify the key usage and extended key usage based on the certificate type. The following list describes common certificate types:
  * *   Server certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth
  * *   Client certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: clientAuth
  * *   Mutual Transport Layer Security (TLS) authentication certificate
  * Key usage: digitalSignature or keyEncipherment
  * Extended key usage: serverAuth or clientAuth
  * *   Email certificate
  * Key usage: digitalSignature or contentCommitment
  * Extended key usage: emailProtection
  * Note: Compliant certificate authorities (CAs) are managed by third-party authorities. This operation is not supported for compliant CAs.
  *
  * @param request CreateCustomCertificateRequest
  * @return CreateCustomCertificateResponse
 */
async function createCustomCertificate(request: CreateCustomCertificateRequest): CreateCustomCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCustomCertificateWithOptions(request, runtime);
}

model CreateRevokeClientCertificateRequest {
  identifier?: string(name='Identifier', example='160ae6bb538d538c70c01f81dcf2****'),
}

model CreateRevokeClientCertificateResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateRevokeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRevokeClientCertificateResponseBody(name='body'),
}

async function createRevokeClientCertificateWithOptions(request: CreateRevokeClientCertificateRequest, runtime: Util.RuntimeOptions): CreateRevokeClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRevokeClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRevokeClientCertificate(request: CreateRevokeClientCertificateRequest): CreateRevokeClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRevokeClientCertificateWithOptions(request, runtime);
}

model CreateRootCACertificateRequest {
  algorithm?: string(name='Algorithm', description='The key algorithm of the root CA certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the root CA certificate must be consistent with the **encryption algorithm** of the private root CA instance that you purchase. For example, if the **encryption algorithm** of the private root CA instance that you purchase is **RSA**, the key algorithm of the root CA certificate must be **RSA\\_1024**, **RSA\\_2048**, or **RSA\\_4096**.', example='RSA_2048'),
  commonName?: string(name='CommonName', description='10', example='Alibaba'),
  countryCode?: string(name='CountryCode', description='The certificate chain of the root CA certificate.', example='CN'),
  locality?: string(name='Locality', description='The common name or abbreviation of the organization. The value can contain letters.', example='Hangzhou'),
  organization?: string(name='Organization', description='The validity period of the root CA certificate. Unit: years.

>  We recommend that you set this parameter to a value from 5 to 10.', example='The name of the organization that is associated with the root CA certificate. You can enter the name of your enterprise or company. The value can contain letters.'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the province, municipality, or autonomous region in which the organization is located. The value can contain letters.', example='Security'),
  state?: string(name='State', description='Alibaba', example='Zhejiang'),
  years?: int32(name='Years', description='The name of the department or branch in the organization. The value can contain letters.', example='10'),
}

model CreateRootCACertificateResponseBody = {
  certificate?: string(name='Certificate', description='The name of the city in which the organization is located. The value can contain letters.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', description='RSA_2048', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the root CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
  requestId?: string(name='RequestId', description='Zhejiang', example='6D9B4C5F-7140-5B41-924C-329181DC00C1'),
}

model CreateRootCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRootCACertificateResponseBody(name='body'),
}

/**
  * The root CA certificate in the PEM format.
  *
  * @param request CreateRootCACertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateRootCACertificateResponse
 */
async function createRootCACertificateWithOptions(request: CreateRootCACertificateRequest, runtime: Util.RuntimeOptions): CreateRootCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.countryCode)) {
    query['CountryCode'] = request.countryCode;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRootCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The root CA certificate in the PEM format.
  *
  * @param request CreateRootCACertificateRequest
  * @return CreateRootCACertificateResponse
 */
async function createRootCACertificate(request: CreateRootCACertificateRequest): CreateRootCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRootCACertificateWithOptions(request, runtime);
}

model CreateServerCertificateRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the server certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the server certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the server certificate must be the same as the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA\\_2048, the key algorithm of the server certificate must be RSA\\_1024, RSA\\_2048, or RSA\\_4096.

>  You can call the [DescribeCACertificate](~~328096~~) operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the server certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958'),
  commonName?: string(name='CommonName', description='The name of the certificate user. The user of a server certificate is a server. We recommend that you enter the domain name or IP address of the server.', example='www.example.com'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as CN or US.', example='CN'),
  days?: int32(name='Days', description='The validity period of the server certificate. Unit: days. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters together, the validity period of the server certificate is determined by the value of the **Days** parameter.

*   The validity period of the server certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](~~328096~~) operation to query the validity period of an intermediate CA certificate.', example='365'),
  domain?: string(name='Domain', description='The additional domain names and additional IP addresses of the server certificate. After you add additional domain names and additional IP addresses to a certificate, you can apply the certificate to the domain names and IP addresses.

Separate multiple domain names and multiple IP addresses with commas (,).', example='example.com'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou'),
  months?: int32(name='Months', description='The validity period of the server certificate. Unit: months.', example='12'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

>  You can call the [DescribeCACertificateList](~~328095~~) operation to query the unique identifier of an intermediate CA certificate.', example='271ae6bb538d538c70c01f81dg3****'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang'),
  years?: int32(name='Years', description='The validity period of the server certificate. Unit: years.', example='1'),
}

model CreateServerCertificateResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the server certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateServerCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerCertificateResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue server certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateServerCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateServerCertificateResponse
 */
async function createServerCertificateWithOptions(request: CreateServerCertificateRequest, runtime: Util.RuntimeOptions): CreateServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.afterTime)) {
    query['AfterTime'] = request.afterTime;
  }
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.months)) {
    query['Months'] = request.months;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue server certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateServerCertificateRequest
  * @return CreateServerCertificateResponse
 */
async function createServerCertificate(request: CreateServerCertificateRequest): CreateServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerCertificateWithOptions(request, runtime);
}

model CreateServerCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime', description='The expiration time of the server certificate. This value is a UNIX timestamp. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1665819958'),
  algorithm?: string(name='Algorithm', description='The key algorithm of the server certificate. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_384**: The signature algorithm is Sha256WithECDSA.
*   **ECC\\_512**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of the server certificate must be the same as the encryption algorithm of the intermediate CA certificate. The key length can be different. For example, if the key algorithm of the intermediate CA certificate is RSA\\_2048, the key algorithm of the server certificate must be RSA\\_1024, RSA\\_2048, or RSA\\_4096.

>  You can call the [DescribeCACertificate](~~328096~~) operation to query the key algorithm of an intermediate CA certificate.', example='RSA_2048'),
  beforeTime?: long(name='BeforeTime', description='The issuance time of the server certificate. This value is a UNIX timestamp. The default value is the time when you call this operation. Unit: seconds.

>  The **BeforeTime** and **AfterTime** parameters must be both empty or both specified.', example='1634283958'),
  commonName?: string(name='CommonName', description='The common name of the certificate. The value can contain letters.

>  If you specify the **CsrPemString** parameter, the value of the **CommonName** parameter is determined by the **CsrPemString** parameter.', example='mtcsq.com'),
  country?: string(name='Country', description='The code of the country in which the organization is located, such as **CN**.

>  This parameter is available and required only when the **RegistrantProfileId** parameter is not specified. In this case, you must specify this parameter. If this parameter is not specified, the domain name fails to be registered.', example='CN'),
  csr?: string(name='Csr', description='The content of the CSR file. You can generate a CSR file by using the OpenSSL tool or Keytool. For more information, see [How do I create a CSR file?](~~42218~~) You can also create a CSR file in the Certificate Management Service console. For more information, see [Create a CSR](~~313297~~).', example='-----BEGIN CERTIFICATE REQUEST-----   ...... -----END CERTIFICATE REQUEST-----'),
  days?: int32(name='Days', description='The validity period of the server certificate. Unit: days. You must specify at least one of the **Days**, **BeforeTime**, and **AfterTime** parameters. The **BeforeTime** and **AfterTime** parameters must be both empty or both specified. The following list describes how to specify these parameters:

*   If you specify the **Days** parameter, you can specify both the **BeforeTime** and **AfterTime** parameters or leave them both empty.********
*   If you do not specify the **Days** parameter, you must specify both the **BeforeTime** and **AfterTime** parameters.

> 

*   If you specify the **Days**, **BeforeTime**, and **AfterTime** parameters together, the validity period of the server certificate is determined by the value of the **Days** parameter.

*   The validity period of the server certificate cannot exceed the validity period of the intermediate CA certificate. You can call the [DescribeCACertificate](~~328096~~) operation to query the validity period of an intermediate CA certificate.', example='365'),
  domain?: string(name='Domain', description='The additional domain names or additional IP addresses of the server certificate. After you add additional domain names and additional IP addresses to a certificate, you can apply the certificate to the domain names and IP addresses.

You can specify multiple domain names and IP addresses. If you specify multiple domain names and IP addresses, separate them with commas (,).', example='example.com'),
  enableCrl?: long(name='EnableCrl', description='include the CRL address.

- 0- No
- 1- Yes', example='1'),
  immediately?: int32(name='Immediately', description='Specifies whether to return the certificate. Valid values:

*   **0**: does not return the certificate. This is the default value.
*   **1**: returns the certificate.
*   **2**: returns the certificate and the certificate chain of the certificate.', example='1'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters. The default value is the name of the city in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Hangzhou'),
  months?: int32(name='Months', description='The validity period of the server certificate. Unit: months.', example='12'),
  organization?: string(name='Organization', description='The name of the organization. Default value: Alibaba Inc.', example='Alibaba Cloud'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department. Default value: Aliyun CDN.', example='IT'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate CA certificate from which the server certificate is issued.

>  You can call the [DescribeCACertificateList](~~328095~~) operation to query the unique identifier of an intermediate CA certificate.', example='270oe6bb538d538c70c01f81hfd3****'),
  state?: string(name='State', description='The province, municipality, or autonomous region in which the organization is located. The value can contain letters. The default value is the name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate CA certificate from which the certificate is issued.', example='Zhejiang'),
  years?: int32(name='Years', description='The validity period of the server certificate. Unit: years.', example='1'),
}

model CreateServerCertificateWithCsrResponseBody = {
  certificateChain?: string(name='CertificateChain', description='The certificate chain of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', description='The unique identifier of the server certificate.', example='180ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', description='The ID of the request, which is used to locate and troubleshoot issues.', example='55C66C7B-671A-4297-9187-2C4477247A74'),
  serialNumber?: string(name='SerialNumber', description='The serial number of the server certificate.', example='0f29522da2dae7a1c4b6ab7132ad3c06'),
  x509Certificate?: string(name='X509Certificate', description='The content of the server certificate.', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
}

model CreateServerCertificateWithCsrResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateServerCertificateWithCsrResponseBody(name='body'),
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue server certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateServerCertificateWithCsrRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateServerCertificateWithCsrResponse
 */
async function createServerCertificateWithCsrWithOptions(request: CreateServerCertificateWithCsrRequest, runtime: Util.RuntimeOptions): CreateServerCertificateWithCsrResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.afterTime)) {
    query['AfterTime'] = request.afterTime;
  }
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.beforeTime)) {
    query['BeforeTime'] = request.beforeTime;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.country)) {
    query['Country'] = request.country;
  }
  if (!Util.isUnset(request.csr)) {
    query['Csr'] = request.csr;
  }
  if (!Util.isUnset(request.days)) {
    query['Days'] = request.days;
  }
  if (!Util.isUnset(request.domain)) {
    query['Domain'] = request.domain;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.immediately)) {
    query['Immediately'] = request.immediately;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.months)) {
    query['Months'] = request.months;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerCertificateWithCsr',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, make sure that you have created a root certificate authority (CA) certificate by calling the [CreateRootCACertificate](~~328093~~) operation and an intermediate CA certificate by calling the [CreateSubCACertificate](~~328094~~) operation. Only intermediate CA certificates can be used to issue server certificates.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateServerCertificateWithCsrRequest
  * @return CreateServerCertificateWithCsrResponse
 */
async function createServerCertificateWithCsr(request: CreateServerCertificateWithCsrRequest): CreateServerCertificateWithCsrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerCertificateWithCsrWithOptions(request, runtime);
}

model CreateSubCACertificateRequest {
  algorithm?: string(name='Algorithm', description='The type of the key algorithm of the intermediate CA. The key algorithm is in the `<Encryption algorithm>_<Key length>` format. Valid values:

*   **RSA\\_1024**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_2048**: The signature algorithm is Sha256WithRSA.
*   **RSA\\_4096**: The signature algorithm is Sha256WithRSA.
*   **ECC\\_256**: The signature algorithm is Sha256WithECDSA.
*   **SM2\\_256**: The signature algorithm is SM3WithSM2.

The encryption algorithm of an intermediate CA certificate must be consistent with the encryption algorithm of a root CA certificate. The length of the keys can be different. For example, if the key algorithm of the root CA certificate is **RSA\\_2048**, the key algorithm of the intermediate CA certificate must be **RSA\\_1024**, **RSA\\_2048**, or **RSA\\_4096**.

> You can call the [DescribeCACertificate](~~465954~~) operation to query the key algorithm of a root CA certificate.', example='RSA_2048'),
  commonName?: string(name='CommonName', description='The common name or abbreviation of the organization. The value can contain letters.', example='Aliyun'),
  countryCode?: string(name='CountryCode', description='The code of the country or region in which the organization is located. You can enter an alpha-2 or alpha-3 code. For example, you can use **CN** to indicate China and use **US** to indicate the United States.

For more information about country codes, see the **"Country codes"** section in [Manage company profiles](~~198289~~).', example='CN'),
  crlDay?: int32(name='CrlDay', description='CRL validity period: 1-365 days', example='30'),
  enableCrl?: boolean(name='EnableCrl', description='Enable Crl Service.

- 0- No
- 1- Yes', example='1'),
  extendedKeyUsages?: [ string ](name='ExtendedKeyUsages', description='The extended key usages of the certificate.'),
  locality?: string(name='Locality', description='The name of the city in which the organization is located. The value can contain letters.', example='Hangzhou'),
  organization?: string(name='Organization', description='The name of the organization that is associated with the intermediate CA certificate. You can enter the name of your enterprise or company. The value can contain letters.'),
  organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization. The value can contain letters.', example='Security'),
  parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate.

> You can call the [DescribeCACertificateList] operation to query the unique identifiers of all CA certificates.', example='1a83bcbb89e562885e40aa0108f5****'),
  pathLenConstraint?: int32(name='PathLenConstraint', description='The path length constraint of the certificate. Default value: 0.', example='0'),
  state?: string(name='State', description='The name of the province or state in which the organization is located. The value can contain letters.', example='Zhejiang'),
  years?: int32(name='Years', description='The validity period of the intermediate CA certificate. Unit: years.

We recommend that you set this parameter to 5 to 10.

> The validity period of the intermediate CA certificate cannot exceed the validity period of the root CA certificate. You can call the [DescribeCACertificate]operation to query the validity period of a root CA certificate.', example='5'),
}

model CreateSubCACertificateResponseBody = {
  certificate?: string(name='Certificate', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----'),
  certificateChain?: string(name='CertificateChain', example='-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\n......\\n-----END CERTIFICATE-----\\n'),
  identifier?: string(name='Identifier', example='160ae6bb538d538c70c01f81dcf2****'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model CreateSubCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubCACertificateResponseBody(name='body'),
}

/**
  * You can call this operation to issue an intermediate certificate authority (CA) certificate by using an existing root CA certificate. Intermediate CA certificates can be used to issue client certificates and server certificates.
  * Before you call this operation, make sure that you have issued a root CA certificate by calling the [CreateRootCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateSubCACertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateSubCACertificateResponse
 */
async function createSubCACertificateWithOptions(request: CreateSubCACertificateRequest, runtime: Util.RuntimeOptions): CreateSubCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.algorithm)) {
    query['Algorithm'] = request.algorithm;
  }
  if (!Util.isUnset(request.commonName)) {
    query['CommonName'] = request.commonName;
  }
  if (!Util.isUnset(request.countryCode)) {
    query['CountryCode'] = request.countryCode;
  }
  if (!Util.isUnset(request.crlDay)) {
    query['CrlDay'] = request.crlDay;
  }
  if (!Util.isUnset(request.enableCrl)) {
    query['EnableCrl'] = request.enableCrl;
  }
  if (!Util.isUnset(request.extendedKeyUsages)) {
    query['ExtendedKeyUsages'] = request.extendedKeyUsages;
  }
  if (!Util.isUnset(request.locality)) {
    query['Locality'] = request.locality;
  }
  if (!Util.isUnset(request.organization)) {
    query['Organization'] = request.organization;
  }
  if (!Util.isUnset(request.organizationUnit)) {
    query['OrganizationUnit'] = request.organizationUnit;
  }
  if (!Util.isUnset(request.parentIdentifier)) {
    query['ParentIdentifier'] = request.parentIdentifier;
  }
  if (!Util.isUnset(request.pathLenConstraint)) {
    query['PathLenConstraint'] = request.pathLenConstraint;
  }
  if (!Util.isUnset(request.state)) {
    query['State'] = request.state;
  }
  if (!Util.isUnset(request.years)) {
    query['Years'] = request.years;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to issue an intermediate certificate authority (CA) certificate by using an existing root CA certificate. Intermediate CA certificates can be used to issue client certificates and server certificates.
  * Before you call this operation, make sure that you have issued a root CA certificate by calling the [CreateRootCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateSubCACertificateRequest
  * @return CreateSubCACertificateResponse
 */
async function createSubCACertificate(request: CreateSubCACertificateRequest): CreateSubCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubCACertificateWithOptions(request, runtime);
}

model DeleteClientCertificateRequest {
  identifier?: string(name='Identifier', example='160ae6bb538d538c70c01f81dcf2****'),
}

model DeleteClientCertificateResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DeleteClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteClientCertificateResponseBody(name='body'),
}

async function deleteClientCertificateWithOptions(request: DeleteClientCertificateRequest, runtime: Util.RuntimeOptions): DeleteClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClientCertificate(request: DeleteClientCertificateRequest): DeleteClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientCertificateWithOptions(request, runtime);
}

model DescribeCACertificateRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the CA certificate that you want to query.

>  You can call the [DescribeCACertificateList](~~328095~~) operation to query the unique identifiers of all CA certificates.', example='160ae6bb538d538c70c01f81dcf2****'),
}

model DescribeCACertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate', description='The expiration date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
    algorithm?: string(name='Algorithm', description='The encryption algorithm of the CA certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The issuance date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
    certIssuedCount?: long(name='CertIssuedCount', description='The number of certificates issued by private CA instances.', example='10'),
    certRemainingCount?: long(name='CertRemainingCount', description='The remaining number of assignable certificate quotas.', example='30'),
    certTotalCount?: long(name='CertTotalCount', description='The total number of purchased certificate quotas.', example='40'),
    certificateType?: string(name='CertificateType', description='The type of the CA certificate. Valid values:

*   **ROOT**: root CA certificate
*   **SUB_ROOT**: intermediate CA certificate', example='SUB_ROOT'),
    commonName?: string(name='CommonName', description='The common name or abbreviation of the organization that is associated with the CA certificate.', example='Aliyun'),
    countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](~~198289~~) topic.', example='CN'),
    crlStatus?: string(name='CrlStatus', description='The status of the certificate revocation list (CRL) feature.', example='ACTIVE'),
    crlUrl?: string(name='CrlUrl', description='The address of the CRL.', example='https://crl-cn-publish.oss-cn-hangzhou.aliyuncs.com/pca/crl/1925647866611395/1ed40789-483f-6023-b6b8-29ddd3bb0a9a.crl'),
    identifier?: string(name='Identifier', description='The unique identifier of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
    keySize?: int32(name='KeySize', description='The key length of the CA certificate.', example='2048'),
    locality?: string(name='Locality', description='The name of the city in which the organization is located.', example='Hangzhou'),
    md5?: string(name='Md5', description='The MD5 fingerprint of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
    organization?: string(name='Organization', description='The name of the organization that is associated with the CA certificate.', example='Alibaba Cloud Computing Co., Ltd.'),
    organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization that is associated with the CA certificate.', example='Security'),
    parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate from which the CA certificate is issued.

>  This parameter is returned only if the value of the **CertificateType** parameter is **SUB_ROOT**. The value SUB_ROOT indicates an intermediate CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
    sans?: string(name='Sans', description='This parameter is deprecated.', example='1'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the CA certificate.', example='70e3b2566d92805173767869727fb92e****'),
    sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the CA certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
    signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the CA certificate.', example='SHA256WITHRSA'),
    state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located.', example='Zhejiang'),
    status?: string(name='Status', description='The status of the CA certificate. Valid values:

*   **ISSUE**: The CA certificate is issued.
*   **REVOKE**: The CA certificate is revoked.', example='ISSUE'),
    subjectDN?: string(name='SubjectDN', description='The user attribute of the CA certificate, which contains the following information:

*   **C**: the country code in which the organization is located
*   **O**: the name of the organization
*   **OU**: the name of the department or branch in the organization
*   **L**: the name of the city in which the organization is located
*   **ST**: the name of the province, municipality, or autonomous region in which the organization is located
*   **CN**: the common name or abbreviation of the organization', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
    x509Certificate?: string(name='X509Certificate', description='The content of the CA certificate.', example='-----BEGIN CERTIFICATE----- …… -----END CERTIFICATE-----'),
  }(name='Certificate', description='The details about the CA certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  years?: int32(name='Years', description='The validity period of the CA certificate. Unit: years.', example='10'),
}

model DescribeCACertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateResponseBody(name='body'),
}

/**
  * You can call the DescribeCACertificate operation to query the details about a root CA certificate or an intermediate CA certificate by using the unique identifier of the root CA certificate or intermediate CA certificate. The details include the serial number, user information, and content of a CA certificate.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCACertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCACertificateResponse
 */
async function describeCACertificateWithOptions(request: DescribeCACertificateRequest, runtime: Util.RuntimeOptions): DescribeCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the DescribeCACertificate operation to query the details about a root CA certificate or an intermediate CA certificate by using the unique identifier of the root CA certificate or intermediate CA certificate. The details include the serial number, user information, and content of a CA certificate.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCACertificateRequest
  * @return DescribeCACertificateResponse
 */
async function describeCACertificate(request: DescribeCACertificateRequest): DescribeCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateWithOptions(request, runtime);
}

model DescribeCACertificateCountResponseBody = {
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model DescribeCACertificateCountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateCountResponseBody(name='body'),
}

async function describeCACertificateCountWithOptions(runtime: Util.RuntimeOptions): DescribeCACertificateCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCACertificateCount',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCACertificateCount(): DescribeCACertificateCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateCountWithOptions(runtime);
}

model DescribeCACertificateListRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to revoke.

>  You can call the [ListClientCertificate](~~330884~~) operation to query the unique identifiers of all client certificates and server certificates.', example='160ae6bb538d538c70c01f81dcf2****'),
  showSize?: int32(name='ShowSize', description='The number of CA certificates to return on each page. Default value: **20**.', example='20'),
}

model DescribeCACertificateListResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate', description='The expiration date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
      algorithm?: string(name='Algorithm', description='The encryption algorithm of the CA certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: long(name='BeforeDate', description='The issuance date of the CA certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
      certificateType?: string(name='CertificateType', description='The type of the CA certificate. Valid values:

*   **ROOT**: root CA certificate
*   **SUB_ROOT**: intermediate CA certificate', example='SUB_ROOT'),
      commonName?: string(name='CommonName', description='The common name or abbreviation of the organization that is associated with the CA certificate.', example='Aliyun'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](~~198289~~) topic.', example='CN'),
      identifier?: string(name='Identifier', description='The unique identifier of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      keySize?: int32(name='KeySize', description='The key length of the CA certificate.', example='2048'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the CA certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      organization?: string(name='Organization', description='The name of the organization that is associated with the CA certificate.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department or branch in the organization that is associated with the CA certificate.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the root CA certificate from which the CA certificate is issued.

>  This parameter is returned only if the value of the **CertificateType** parameter is **SUB_ROOT**. The value SUB_ROOT indicates an intermediate CA certificate.', example='1a83bcbb89e562885e40aa0108f5****'),
      sans?: string(name='Sans', description='This parameter is deprecated.', example='1'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the CA certificate.', example='70e3b2566d92805173767869727fb92e****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the CA certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the CA certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located.', example='Zhejiang'),
      status?: string(name='Status', description='The status of the CA certificate. Valid values:

*   **ISSUE**: The CA certificate is issued.
*   **REVOKE**: The CA certificate is revoked.', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The Distinguished Name (DN) attribute of the CA certificate, which indicates the user information of the certificate. The DN attribute contains the following information:

*   **C**: the country code in which the organization is located
*   **O**: the name of the organization
*   **OU**: the name of the department or branch in the organization
*   **L**: the name of the city in which the organization is located

<props="china">- **ST**: the name of the province, municipality, or autonomous region in which the organization is located</props> <props="intl">- **ST**: the name of the province or state in which the organization is located</props>

*   **CN**: the common name or abbreviation of the organization', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
      x509Certificate?: string(name='X509Certificate', description='The content of the CA certificate.', example='-----BEGIN CERTIFICATE----- …… -----END CERTIFICATE-----'),
      years?: int32(name='Years', description='The validity period of the CA certificate. Unit: years.', example='3'),
    }
  ](name='CertificateList', description='An array that consists of the details about the CA certificate.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  pageCount?: int32(name='PageCount', description='The number of returned pages.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of CA certificates returned per page.', example='20'),
  totalCount?: int32(name='TotalCount', description='The total number of root CA certificates and intermediate CA certificates that are returned.', example='2'),
}

model DescribeCACertificateListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCACertificateListResponseBody(name='body'),
}

/**
  * You can call the DescribeCACertificateList operation to perform a paged query of the details about all CA certificates that you create. The details include the unique identifier, serial number, user information, and content of each root CA certificate or intermediate CA certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCACertificateListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCACertificateListResponse
 */
async function describeCACertificateListWithOptions(request: DescribeCACertificateListRequest, runtime: Util.RuntimeOptions): DescribeCACertificateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCACertificateList',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the DescribeCACertificateList operation to perform a paged query of the details about all CA certificates that you create. The details include the unique identifier, serial number, user information, and content of each root CA certificate or intermediate CA certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCACertificateListRequest
  * @return DescribeCACertificateListResponse
 */
async function describeCACertificateList(request: DescribeCACertificateListRequest): DescribeCACertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateListWithOptions(request, runtime);
}

model DescribeCertificatePrivateKeyRequest {
  encryptedCode?: string(name='EncryptedCode', description='The password that is used to encrypt the private key. The password can contain letters, digits, and special characters, such as `, + - _ #`. The password can be up to 32 bytes in length.

**

**Warning** You must remember the password that you specify. The password is required to decrypt the encrypted private key. If you forget the password, the encrypted private key that is returned cannot be decrypted. You must call this operation again.', example='!QA@WS3ed'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or server certificate that you want to query.

>  You can call the [ListClientCertificate](~~330884~~) operation to query the unique identifiers of all client certificates and server certificates.', example='bc37133bb7ed68c7938d928fd26d****'),
}

model DescribeCertificatePrivateKeyResponseBody = {
  encryptedData?: string(name='EncryptedData', description='The content of the encrypted private key.', example='-----BEGIN ENCRYPTED PRIVATE KEY----- …… -----END ENCRYPTED PRIVATE KEY-----'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='09470F19-CEE8-5C63-BF2C-02B5E3F07A17'),
}

model DescribeCertificatePrivateKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeCertificatePrivateKeyResponseBody(name='body'),
}

/**
  * ## Usage notes
  * You can call the DescribeCertificatePrivateKey operation to obtain the encrypted private key of a client certificate or a server certificate. The certificate is issued based on a system-generated certificate signing request (CSR). Before you call this operation, make sure that you have issued a client certificate or a server certificate by calling the following operation:
  * *   [CreateClientCertificate](~~330873~~)
  * *   [CreateServerCertificate](~~330877~~)
  * To ensure the security of private key transmission, the DescribeCertificatePrivateKey operation encrypts the private key by using the private key password that you specify and returns the encrypted private key. The private key password is a string that is used to encrypt the private key. After you obtain the encrypted private key of the certificate, you can use the following methods to decrypt the private key:
  * *   If the encryption algorithm of the certificate is RSA, you must run the `openssl rsa -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is ECC, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is SM2, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * >  You can call the [DescribeClientCertificate] operation to query the encryption algorithm type of a client certificate or a server certificate.
  * ## Limits
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCertificatePrivateKeyRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCertificatePrivateKeyResponse
 */
async function describeCertificatePrivateKeyWithOptions(request: DescribeCertificatePrivateKeyRequest, runtime: Util.RuntimeOptions): DescribeCertificatePrivateKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.encryptedCode)) {
    query['EncryptedCode'] = request.encryptedCode;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificatePrivateKey',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * You can call the DescribeCertificatePrivateKey operation to obtain the encrypted private key of a client certificate or a server certificate. The certificate is issued based on a system-generated certificate signing request (CSR). Before you call this operation, make sure that you have issued a client certificate or a server certificate by calling the following operation:
  * *   [CreateClientCertificate](~~330873~~)
  * *   [CreateServerCertificate](~~330877~~)
  * To ensure the security of private key transmission, the DescribeCertificatePrivateKey operation encrypts the private key by using the private key password that you specify and returns the encrypted private key. The private key password is a string that is used to encrypt the private key. After you obtain the encrypted private key of the certificate, you can use the following methods to decrypt the private key:
  * *   If the encryption algorithm of the certificate is RSA, you must run the `openssl rsa -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is ECC, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [OpenSSL](https://www.openssl.org/source/) or [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * *   If the encryption algorithm of the certificate is SM2, you must run the `openssl ec -in <Encrypted private key file> -passin pass:<Private key password> -out <Decrypted private key file>` command in the computer on which [BabaSSL](https://github.com/BabaSSL/BabaSSL) is installed.
  * >  You can call the [DescribeClientCertificate] operation to query the encryption algorithm type of a client certificate or a server certificate.
  * ## Limits
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeCertificatePrivateKeyRequest
  * @return DescribeCertificatePrivateKeyResponse
 */
async function describeCertificatePrivateKey(request: DescribeCertificatePrivateKeyRequest): DescribeCertificatePrivateKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificatePrivateKeyWithOptions(request, runtime);
}

model DescribeClientCertificateRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or the server certificate that you want to query.

>  You can call the [ListClientCertificate](~~330884~~) operation to query the unique identifiers of all client certificates and server certificates.', example='d3b95700998e47afc4d95f886579****'),
}

model DescribeClientCertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate', description='The expiration date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
    algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
    beforeDate?: long(name='BeforeDate', description='The issuance date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
    certificateType?: string(name='CertificateType', description='The type of the certificate. Valid values:

*   **CLIENT**: client certificate
*   **SERVER**: server certificate', example='SERVER'),
    commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyun.com'),
    countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](~~198289~~) topic.', example='CN'),
    days?: int32(name='Days', description='The validity period of the certificate. Unit: days.', example='365'),
    identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='d3b95700998e47afc4d95f886579****'),
    keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
    locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
    md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='d3b95700998e47afc4d95f886579****'),
    organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
    organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
    parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate certificate from which the client certificate is issued.', example='160ae6bb538d538c70c01f81dcf2****'),
    sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate. The value indicates additional information, including the additional domain names or IP addresses that are associated with the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
    serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='62b2b943a32d96883a6650e672ea0276****'),
    sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
    signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
    state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
    status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
    subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
    x509Certificate?: string(name='X509Certificate', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----  ...... -----END CERTIFICATE-----'),
  }(name='Certificate', description='The details about the client certificate or the server certificate.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DescribeClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClientCertificateResponseBody(name='body'),
}

/**
  * You can call the DescribeClientCertificate operation to query the details about a client certificate or a server certificate by using the unique identifier of the certificate. The details include the serial number, user information, content, and status of each certificate.
  * Before you call this operation, make sure that you have created a client certificate or a server certificate.
  * For more information about how to call an operation to create a client certificate, see the following topics:
  * *   [CreateClientCertificate](~~330873~~)
  * *   [CreateClientCertificateWithCsr](~~330875~~)
  * For more information about how to call an operation to create a server certificate, see the following topics:
  * *   [CreateServerCertificate](~~330877~~)
  * *   [CreateServerCertificateWithCsr](~~330878~~)
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeClientCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeClientCertificateResponse
 */
async function describeClientCertificateWithOptions(request: DescribeClientCertificateRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the DescribeClientCertificate operation to query the details about a client certificate or a server certificate by using the unique identifier of the certificate. The details include the serial number, user information, content, and status of each certificate.
  * Before you call this operation, make sure that you have created a client certificate or a server certificate.
  * For more information about how to call an operation to create a client certificate, see the following topics:
  * *   [CreateClientCertificate](~~330873~~)
  * *   [CreateClientCertificateWithCsr](~~330875~~)
  * For more information about how to call an operation to create a server certificate, see the following topics:
  * *   [CreateServerCertificate](~~330877~~)
  * *   [CreateServerCertificateWithCsr](~~330878~~)
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DescribeClientCertificateRequest
  * @return DescribeClientCertificateResponse
 */
async function describeClientCertificate(request: DescribeClientCertificateRequest): DescribeClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateWithOptions(request, runtime);
}

model DescribeClientCertificateStatusRequest {
  identifier?: string(name='Identifier', example='160ae6bb538d538c70c01f81dcf2****'),
}

model DescribeClientCertificateStatusResponseBody = {
  certificateStatus?: [ 
    {
      revokeTime?: long(name='RevokeTime', example='2021-01-01T00:00Z'),
      serialNumber?: string(name='SerialNumber', example='b67e53ebcea9b77d65b0c3236646d715****'),
      status?: string(name='Status', example='good'),
    }
  ](name='CertificateStatus'),
  requestId?: string(name='RequestId', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model DescribeClientCertificateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeClientCertificateStatusResponseBody(name='body'),
}

async function describeClientCertificateStatusWithOptions(request: DescribeClientCertificateStatusRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificateStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientCertificateStatus(request: DescribeClientCertificateStatusRequest): DescribeClientCertificateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateStatusWithOptions(request, runtime);
}

model GetCAInstanceStatusRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
  instanceId?: string(name='InstanceId', description='The ID of the private CA instance.

>  After you purchase a private CA instance by using the [SSL Certificates Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist), you can click **Details** for the private CA instance on the **Private Certificates** page to query the ID of the private CA instance.', example='cas-member-0hmi****'),
}

model GetCAInstanceStatusResponseBody = {
  instanceStatusList?: [ 
    {
      afterTime?: long(name='AfterTime', description='The expiration date of the private CA certificate. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='1792944000000'),
      beforeTime?: long(name='BeforeTime', description='The issuance date of the private CA certificate. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='1635177600000'),
      certIssuedCount?: int32(name='CertIssuedCount', description='The number of certificates that are issued by using the private CA instance.', example='1'),
      certTotalCount?: int32(name='CertTotalCount', description='The number of certificates that can be issued by using the private CA instance.

For a private root CA instance whose **Type** is **ROOT**, this parameter indicates the number of intermediate CA certificates that can be issued.

For a private intermediate CA instance whose **Type** is **SUB_ROOT**, this parameter indicates the total number of client certificates and server certificates that can be issued', example='10'),
      identifier?: string(name='Identifier', description='The unique identifier of the private CA certificate.

>  This parameter is returned only when the value of the **Status** parameter is **USED** or **REVOKE**. The value USED indicates that the private CA instance is enabled, and the value REVOKE indicates that the instance is revoked.', example='a7bb2dd212a2112128cd5cc9b753****'),
      instanceId?: string(name='InstanceId', description='The ID of the private CA instance.', example='cas-member-0hmi****'),
      status?: string(name='Status', description='The status of the private CA instance. Valid values:

*   **BUY**: The private CA instance is purchased but is not enabled.
*   **USED**: The private CA instance is enabled.
*   **REFUND**: The private CA instance is refunded.
*   **REVOKE**: The private CA instance is revoked.', example='USED'),
      type?: string(name='Type', description='The type of the private CA instance. Valid values:

*   **ROOT**: root CA instance
*   **SUB_ROOT**: intermediate CA instance', example='ROOT'),
      useExpireTime?: long(name='UseExpireTime', description='The expiration date of the private CA instance. This value is a UNIX timestamp. Unit: milliseconds.

>  This parameter corresponds to the duration that you select when you purchase the private CA instance. The duration indicates the subscription period of the Private Certificate Authority (PCA) service.', example='1637251200000'),
    }
  ](name='InstanceStatusList', description='The status information of the private CA instance.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25589516-2A56-5159-AB88-4A1D9824E183'),
}

model GetCAInstanceStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCAInstanceStatusResponseBody(name='body'),
}

/**
  * ## Usage notes
  * You can call the GetCAInstanceStatus operation to query the status information of a private CA instance by using the ID of the instance. The instance is purchased by using the SSL Certificates Service console. The status information includes the status of the private CA instance, the number of certificates that can be issued by using the private CA instance, and the number of issued certificates.
  * Before you call this operation, make sure that you have purchased a private CA by using the [SSL Certificates Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist). For more information, see [Create a private CA](~~208553~~).
  *
  * @param request GetCAInstanceStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetCAInstanceStatusResponse
 */
async function getCAInstanceStatusWithOptions(request: GetCAInstanceStatusRequest, runtime: Util.RuntimeOptions): GetCAInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCAInstanceStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## Usage notes
  * You can call the GetCAInstanceStatus operation to query the status information of a private CA instance by using the ID of the instance. The instance is purchased by using the SSL Certificates Service console. The status information includes the status of the private CA instance, the number of certificates that can be issued by using the private CA instance, and the number of issued certificates.
  * Before you call this operation, make sure that you have purchased a private CA by using the [SSL Certificates Service console](https://yundun.console.aliyun.com/?p=cas#/pca/rootlist). For more information, see [Create a private CA](~~208553~~).
  *
  * @param request GetCAInstanceStatusRequest
  * @return GetCAInstanceStatusResponse
 */
async function getCAInstanceStatus(request: GetCAInstanceStatusRequest): GetCAInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCAInstanceStatusWithOptions(request, runtime);
}

model ListClientCertificateRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  identifier?: string(name='Identifier', description='The unique identifier of the client certificate or the server certificate that you want to query.

>  You can call the [ListClientCertificate](~~330884~~) operation to query the unique identifiers of all client certificates and server certificates.', example='190ae6bb538d538c70c01f81dcf2****'),
  showSize?: int32(name='ShowSize', description='The number of certificates to return on each page. Default value: **20**.', example='20'),
}

model ListClientCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate', description='The expiration date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1665819958000'),
      algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: long(name='BeforeDate', description='The issuance date of the certificate. This value is a UNIX timestamp. Unit: milliseconds.', example='1634283958000'),
      certificateType?: string(name='CertificateType', description='The type of the certificate. Valid values:

*   **CLIENT**: client certificate
*   **SERVER**: server certificate', example='SERVER'),
      commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyundoc.com'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](~~198289~~) topic.', example='CN'),
      days?: int32(name='Days', description='The validity period of the certificate. Unit: days.', example='365'),
      identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='d3b95700998e47afc4d95f886579****'),
      keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='d3b95700998e47afc4d95f886579****'),
      organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The unique identifier of the intermediate certificate from which the client certificate is issued.', example='160ae6bb538d538c70c01f81dcf2****'),
      sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate. The value indicates additional information, including the additional domain names or IP addresses that are associated with the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='62b2b943a32d96883a6650e672ea0276****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='14dcc8afc7578e1fcec36d658f7e20de18f6957bbac42b373a66bc9de4e9****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
      status?: string(name='Status', description='The status of the certificate. Valid values:

*   **ISSUE**: issued
*   **REVOKE**: revoked', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=Hangzhou,ST=Zhejiang,CN=Aliyun'),
      x509Certificate?: string(name='X509Certificate', description='The content of the certificate.', example='-----BEGIN CERTIFICATE-----  ...... -----END CERTIFICATE-----'),
    }
  ](name='CertificateList', description='An array that consists of the details about all client certificates and server certificates.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of certificates that are returned per page.', example='20'),
  totalCount?: long(name='TotalCount', description='The number of client certificates and server certificates that are returned.', example='1'),
}

model ListClientCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListClientCertificateResponseBody(name='body'),
}

/**
  * You can call the ListClientCertificate operation to perform a paged query of the details about all client certificates and server certificates that you create. The details include the unique identifier, serial number, user information, content, and status of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListClientCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListClientCertificateResponse
 */
async function listClientCertificateWithOptions(request: ListClientCertificateRequest, runtime: Util.RuntimeOptions): ListClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the ListClientCertificate operation to perform a paged query of the details about all client certificates and server certificates that you create. The details include the unique identifier, serial number, user information, content, and status of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListClientCertificateRequest
  * @return ListClientCertificateResponse
 */
async function listClientCertificate(request: ListClientCertificateRequest): ListClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientCertificateWithOptions(request, runtime);
}

model ListRevokeCertificateRequest {
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Default value: **1**.', example='1'),
  showSize?: int32(name='ShowSize', description='The number of revoked certificates to return on each page. Default value: **20**.', example='20'),
}

model ListRevokeCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: string(name='AfterDate', description='The expiration date of the certificate. The date is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-12-31T00:00Z` indicates December 31, 2021.', example='2021-12-31T00:00Z'),
      algorithm?: string(name='Algorithm', description='The type of the encryption algorithm of the certificate. Valid values:

*   **RSA**: the Rivest-Shamir-Adleman (RSA) algorithm.
*   **ECC**: the elliptic curve cryptography (ECC) algorithm.
*   **SM2**: the SM2 algorithm, which is developed and approved by the State Cryptography Administration of China.', example='RSA'),
      beforeDate?: string(name='BeforeDate', description='The issuance date of the certificate. The date is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-01-01T00:00Z` indicates January 1, 2021.', example='2021-01-01T00:00Z'),
      certificateType?: string(name='CertificateType', description='The type of the certificate.', example='SERVER'),
      commonName?: string(name='CommonName', description='The common name of the certificate.', example='aliyundoc.com'),
      countryCode?: string(name='CountryCode', description='The code of the country in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.

For more information about country codes, see the **"Country codes"** section of the [Manage company profiles](~~198289~~) topic.', example='CN'),
      identifier?: string(name='Identifier', description='The unique identifier of the certificate.', example='05e148d8d3ecc9976d9ecd2b2f25****'),
      keySize?: int32(name='KeySize', description='The key length of the certificate.', example='4096'),
      locality?: string(name='Locality', description='The name of the city in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Hangzhou'),
      md5?: string(name='Md5', description='The MD5 fingerprint of the certificate.', example='05e148d8d3ecc9976d9ecd2b2f25****'),
      organization?: string(name='Organization', description='The name of the organization. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Alibaba Cloud Computing Co., Ltd.'),
      organizationUnit?: string(name='OrganizationUnit', description='The name of the department in the organization. The organization is associated with the intermediate certificate authority (CA) certificate from which the certificate is issued.', example='Security'),
      parentIdentifier?: string(name='ParentIdentifier', description='The identifier of the root certificate.', example='160ae6bb538d538c70c01f81dcf2****'),
      revokeDate?: string(name='RevokeDate', description='The date on which the certificate was revoked. The value is in the `yyyy-MM-ddT00:00Z` format. For example, the value `2021-09-01T00:00Z` indicates September 1, 2021.', example='2021-09-01T00:00Z'),
      sans?: string(name='Sans', description='The subject alternative name (SAN) extension of the certificate.

The value is a string that consists of JSON arrays. Each element in a JSON array is a JSON struct that corresponds to a SAN extension. A SAN extension struct contains the following parameters:

*   **Type**: the type of the extension. Data type: integer. Valid values:

    *   **1**: an email address
    *   **2**: a domain name
    *   **6**: a Uniform Resource Identifier (URI)
    *   **7**: an IP address

*   **Value**: the value of the extension. Data type: string.', example='[ {"Type": 7, "Value": "192.0.XX.XX"}, {"Type": 2, "Value": "www.aliyundoc.com"}, ]'),
      serialNumber?: string(name='SerialNumber', description='The serial number of the certificate.', example='168b12c42e62339f8d2340ff530f9365****'),
      sha2?: string(name='Sha2', description='The SHA-256 fingerprint of the certificate.', example='b60eff7e04323ff662f9ab5e6986f849f626a9c7bf2c59dcc752fa23779a****'),
      signAlgorithm?: string(name='SignAlgorithm', description='The signature algorithm of the certificate.', example='SHA256WITHRSA'),
      state?: string(name='State', description='The name of the province, municipality, or autonomous region in which the organization is located. The organization is associated with the intermediate certificate from which the certificate is issued.', example='Zhejiang'),
      status?: string(name='Status', description='The status.', example='ISSUE'),
      subjectDN?: string(name='SubjectDN', description='The distinguished name (DN) extension of the certificate, which indicates the user of the certificate. The DN extension includes the following information:

*   **C**: the country
*   **O**: the organization
*   **OU**: the department
*   **L**: the city
*   **ST**: the province, municipality, or autonomous region
*   **CN**: the common name', example='C=CN,O=Alibaba Cloud Computing Co., Ltd.,OU=Security,L=ZheJiang,ST=HangZhou,CN=aliyundoc.com'),
    }
  ](name='CertificateList', description='An array that consists of the details about the revoked client certificates or server certificates.'),
  currentPage?: int32(name='CurrentPage', description='The page number of the current page.', example='1'),
  pageCount?: int32(name='PageCount', description='The total number of pages returned.', example='1'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
  showSize?: int32(name='ShowSize', description='The number of revoked certificates that are returned per page.', example='20'),
  totalCount?: long(name='TotalCount', description='The total number of revoked client certificates and server certificates that are returned.', example='1'),
}

model ListRevokeCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRevokeCertificateResponseBody(name='body'),
}

/**
  * You can call the ListRevokeCertificate operation to perform a paged query of the details about all revoked client certificates and server certificates. The details include the unique identifier, serial number, and revocation date of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListRevokeCertificateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListRevokeCertificateResponse
 */
async function listRevokeCertificateWithOptions(request: ListRevokeCertificateRequest, runtime: Util.RuntimeOptions): ListRevokeCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.showSize)) {
    query['ShowSize'] = request.showSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRevokeCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call the ListRevokeCertificate operation to perform a paged query of the details about all revoked client certificates and server certificates. The details include the unique identifier, serial number, and revocation date of each certificate.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListRevokeCertificateRequest
  * @return ListRevokeCertificateResponse
 */
async function listRevokeCertificate(request: ListRevokeCertificateRequest): ListRevokeCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRevokeCertificateWithOptions(request, runtime);
}

model UpdateCACertificateStatusRequest {
  identifier?: string(name='Identifier', description='The unique identifier of the CA certificate whose status you want to change.

>  You can call the [DescribeCACertificateList](~~328095~~) operation to query the unique identifiers of all CA certificates.', example='160ae6bb538d538c70c01f81dcf2****'),
  status?: string(name='Status', description='The state to which you want to change the CA certificate. Set to the value to **REVOKE**. After this operation is called, the status of the CA certificate is changed to **REVOKE**.

>  You can call this operation only if the status of a CA certificate is **ISSUE**. You can call the [DescribeCACertificate](~~328096~~) operation to query the status of a CA certificate.', example='REVOKE'),
}

model UpdateCACertificateStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='15C66C7B-671A-4297-9187-2C4477247A74'),
}

model UpdateCACertificateStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCACertificateStatusResponseBody(name='body'),
}

/**
  * After a CA certificate is created, the CA certificate is in the ISSUE state by default. You can call the UpdateCACertificateStatus operation to change the status of a CA certificate from ISSUE to REVOKE. If a CA certificate is in the ISSUE state, the CA certificate can be used to issue certificates. If a CA certificate is in the REVOKE state, the CA certificate cannot be used to issue certificates, and the certificates that are issued from the CA certificate become invalid.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateCACertificateStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateCACertificateStatusResponse
 */
async function updateCACertificateStatusWithOptions(request: UpdateCACertificateStatusRequest, runtime: Util.RuntimeOptions): UpdateCACertificateStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.identifier)) {
    query['Identifier'] = request.identifier;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCACertificateStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * After a CA certificate is created, the CA certificate is in the ISSUE state by default. You can call the UpdateCACertificateStatus operation to change the status of a CA certificate from ISSUE to REVOKE. If a CA certificate is in the ISSUE state, the CA certificate can be used to issue certificates. If a CA certificate is in the REVOKE state, the CA certificate cannot be used to issue certificates, and the certificates that are issued from the CA certificate become invalid.
  * Before you call this operation, make sure that you have created a root CA by calling the [CreateRootCACertificate] operation or an intermediate CA certificate by calling the [CreateSubCACertificate] operation.
  * ## Limits
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateCACertificateStatusRequest
  * @return UpdateCACertificateStatusResponse
 */
async function updateCACertificateStatus(request: UpdateCACertificateStatusRequest): UpdateCACertificateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCACertificateStatusWithOptions(request, runtime);
}

