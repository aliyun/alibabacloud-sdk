/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-1 = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateCertificateWithExtensionRequest {
  afterTime?: long(name='AfterTime'),
  algorithmKeySize?: int32(name='AlgorithmKeySize'),
  aliasName?: string(name='AliasName'),
  appendCrl?: boolean(name='AppendCrl'),
  basicConstraintsCritical?: boolean(name='BasicConstraintsCritical'),
  beforeTime?: long(name='BeforeTime'),
  certType?: string(name='CertType'),
  commonName?: string(name='CommonName'),
  countryCode?: string(name='CountryCode'),
  csrPemString?: string(name='CsrPemString'),
  locality?: string(name='Locality'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  parentIdentifier?: string(name='ParentIdentifier'),
  sans?: string(name='Sans'),
  state?: string(name='State'),
}

model CreateCertificateWithExtensionResponseBody = {
  identifier?: string(name='Identifier'),
  requestId?: string(name='RequestId'),
}

model CreateCertificateWithExtensionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCertificateWithExtensionResponseBody(name='body'),
}

async function createCertificateWithExtensionWithOptions(request: CreateCertificateWithExtensionRequest, runtime: Util.RuntimeOptions): CreateCertificateWithExtensionResponse {
  Util.validateModel(request);
  var query = {};
  query["AfterTime"] = request.afterTime;
  query["AlgorithmKeySize"] = request.algorithmKeySize;
  query["AliasName"] = request.aliasName;
  query["AppendCrl"] = request.appendCrl;
  query["BasicConstraintsCritical"] = request.basicConstraintsCritical;
  query["BeforeTime"] = request.beforeTime;
  query["CertType"] = request.certType;
  query["CommonName"] = request.commonName;
  query["CountryCode"] = request.countryCode;
  query["CsrPemString"] = request.csrPemString;
  query["Locality"] = request.locality;
  query["Organization"] = request.organization;
  query["OrganizationUnit"] = request.organizationUnit;
  query["ParentIdentifier"] = request.parentIdentifier;
  query["Sans"] = request.sans;
  query["State"] = request.state;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateCertificateWithExtension',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCertificateWithExtension(request: CreateCertificateWithExtensionRequest): CreateCertificateWithExtensionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCertificateWithExtensionWithOptions(request, runtime);
}

model CreateClientCertificateRequest {
  afterTime?: long(name='AfterTime'),
  algorithm?: string(name='Algorithm'),
  beforeTime?: long(name='BeforeTime'),
  commonName?: string(name='CommonName'),
  days?: int32(name='Days'),
  parentIdentifier?: string(name='ParentIdentifier'),
  sanType?: int32(name='SanType'),
  sanValue?: string(name='SanValue'),
}

model CreateClientCertificateResponseBody = {
  identifier?: string(name='Identifier'),
  parentX509Certificate?: string(name='ParentX509Certificate'),
  requestId?: string(name='RequestId'),
  rootX509Certificate?: string(name='RootX509Certificate'),
  x509Certificate?: string(name='X509Certificate'),
}

model CreateClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClientCertificateResponseBody(name='body'),
}

async function createClientCertificateWithOptions(request: CreateClientCertificateRequest, runtime: Util.RuntimeOptions): CreateClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["AfterTime"] = request.afterTime;
  query["Algorithm"] = request.algorithm;
  query["BeforeTime"] = request.beforeTime;
  query["CommonName"] = request.commonName;
  query["Days"] = request.days;
  query["ParentIdentifier"] = request.parentIdentifier;
  query["SanType"] = request.sanType;
  query["SanValue"] = request.sanValue;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClientCertificate(request: CreateClientCertificateRequest): CreateClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClientCertificateWithOptions(request, runtime);
}

model CreateClientCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime'),
  beforeTime?: long(name='BeforeTime'),
  csr?: string(name='Csr'),
  days?: int32(name='Days'),
  parentIdentifier?: string(name='ParentIdentifier'),
  sanType?: int32(name='SanType'),
  sanValue?: string(name='SanValue'),
}

model CreateClientCertificateWithCsrResponseBody = {
  identifier?: string(name='Identifier'),
  parentX509Certificate?: string(name='ParentX509Certificate'),
  requestId?: string(name='RequestId'),
  rootX509Certificate?: string(name='RootX509Certificate'),
  x509Certificate?: string(name='X509Certificate'),
}

model CreateClientCertificateWithCsrResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClientCertificateWithCsrResponseBody(name='body'),
}

async function createClientCertificateWithCsrWithOptions(request: CreateClientCertificateWithCsrRequest, runtime: Util.RuntimeOptions): CreateClientCertificateWithCsrResponse {
  Util.validateModel(request);
  var query = {};
  query["AfterTime"] = request.afterTime;
  query["BeforeTime"] = request.beforeTime;
  query["Csr"] = request.csr;
  query["Days"] = request.days;
  query["ParentIdentifier"] = request.parentIdentifier;
  query["SanType"] = request.sanType;
  query["SanValue"] = request.sanValue;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateClientCertificateWithCsr',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createClientCertificateWithCsr(request: CreateClientCertificateWithCsrRequest): CreateClientCertificateWithCsrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClientCertificateWithCsrWithOptions(request, runtime);
}

model CreateRevokeClientCertificateRequest {
  identifier?: string(name='Identifier'),
}

model CreateRevokeClientCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRevokeClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRevokeClientCertificateResponseBody(name='body'),
}

async function createRevokeClientCertificateWithOptions(request: CreateRevokeClientCertificateRequest, runtime: Util.RuntimeOptions): CreateRevokeClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateRevokeClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRevokeClientCertificate(request: CreateRevokeClientCertificateRequest): CreateRevokeClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRevokeClientCertificateWithOptions(request, runtime);
}

model CreateRootCACertificateRequest {
  algorithm?: string(name='Algorithm'),
  commonName?: string(name='CommonName'),
  countryCode?: string(name='CountryCode'),
  locality?: string(name='Locality'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  state?: string(name='State'),
  years?: int32(name='Years'),
}

model CreateRootCACertificateResponseBody = {
  identifier?: string(name='Identifier'),
  requestId?: string(name='RequestId'),
}

model CreateRootCACertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRootCACertificateResponseBody(name='body'),
}

async function createRootCACertificateWithOptions(request: CreateRootCACertificateRequest, runtime: Util.RuntimeOptions): CreateRootCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Algorithm"] = request.algorithm;
  query["CommonName"] = request.commonName;
  query["CountryCode"] = request.countryCode;
  query["Locality"] = request.locality;
  query["Organization"] = request.organization;
  query["OrganizationUnit"] = request.organizationUnit;
  query["State"] = request.state;
  query["Years"] = request.years;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateRootCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRootCACertificate(request: CreateRootCACertificateRequest): CreateRootCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRootCACertificateWithOptions(request, runtime);
}

model CreateServerCertificateRequest {
  afterTime?: long(name='AfterTime'),
  algorithm?: string(name='Algorithm'),
  beforeTime?: long(name='BeforeTime'),
  commonName?: string(name='CommonName'),
  days?: int32(name='Days'),
  domain?: string(name='Domain'),
  parentIdentifier?: string(name='ParentIdentifier'),
}

model CreateServerCertificateResponseBody = {
  identifier?: string(name='Identifier'),
  parentX509Certificate?: string(name='ParentX509Certificate'),
  requestId?: string(name='RequestId'),
  rootX509Certificate?: string(name='RootX509Certificate'),
  x509Certificate?: string(name='X509Certificate'),
}

model CreateServerCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServerCertificateResponseBody(name='body'),
}

async function createServerCertificateWithOptions(request: CreateServerCertificateRequest, runtime: Util.RuntimeOptions): CreateServerCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["AfterTime"] = request.afterTime;
  query["Algorithm"] = request.algorithm;
  query["BeforeTime"] = request.beforeTime;
  query["CommonName"] = request.commonName;
  query["Days"] = request.days;
  query["Domain"] = request.domain;
  query["ParentIdentifier"] = request.parentIdentifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServerCertificate(request: CreateServerCertificateRequest): CreateServerCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerCertificateWithOptions(request, runtime);
}

model CreateServerCertificateWithCsrRequest {
  afterTime?: long(name='AfterTime'),
  beforeTime?: long(name='BeforeTime'),
  csr?: string(name='Csr'),
  days?: int32(name='Days'),
  domain?: string(name='Domain'),
  parentIdentifier?: string(name='ParentIdentifier'),
}

model CreateServerCertificateWithCsrResponseBody = {
  identifier?: string(name='Identifier'),
  parentX509Certificate?: string(name='ParentX509Certificate'),
  requestId?: string(name='RequestId'),
  rootX509Certificate?: string(name='RootX509Certificate'),
  x509Certificate?: string(name='X509Certificate'),
}

model CreateServerCertificateWithCsrResponse = {
  headers: map[string]string(name='headers'),
  body: CreateServerCertificateWithCsrResponseBody(name='body'),
}

async function createServerCertificateWithCsrWithOptions(request: CreateServerCertificateWithCsrRequest, runtime: Util.RuntimeOptions): CreateServerCertificateWithCsrResponse {
  Util.validateModel(request);
  var query = {};
  query["AfterTime"] = request.afterTime;
  query["BeforeTime"] = request.beforeTime;
  query["Csr"] = request.csr;
  query["Days"] = request.days;
  query["Domain"] = request.domain;
  query["ParentIdentifier"] = request.parentIdentifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateServerCertificateWithCsr',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createServerCertificateWithCsr(request: CreateServerCertificateWithCsrRequest): CreateServerCertificateWithCsrResponse {
  var runtime = new Util.RuntimeOptions{};
  return createServerCertificateWithCsrWithOptions(request, runtime);
}

model CreateSubCACertificateRequest {
  algorithm?: string(name='Algorithm'),
  commonName?: string(name='CommonName'),
  countryCode?: string(name='CountryCode'),
  locality?: string(name='Locality'),
  organization?: string(name='Organization'),
  organizationUnit?: string(name='OrganizationUnit'),
  parentIdentifier?: string(name='ParentIdentifier'),
  state?: string(name='State'),
  years?: int32(name='Years'),
}

model CreateSubCACertificateResponseBody = {
  identifier?: string(name='Identifier'),
  requestId?: string(name='RequestId'),
}

model CreateSubCACertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubCACertificateResponseBody(name='body'),
}

async function createSubCACertificateWithOptions(request: CreateSubCACertificateRequest, runtime: Util.RuntimeOptions): CreateSubCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Algorithm"] = request.algorithm;
  query["CommonName"] = request.commonName;
  query["CountryCode"] = request.countryCode;
  query["Locality"] = request.locality;
  query["Organization"] = request.organization;
  query["OrganizationUnit"] = request.organizationUnit;
  query["ParentIdentifier"] = request.parentIdentifier;
  query["State"] = request.state;
  query["Years"] = request.years;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateSubCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSubCACertificate(request: CreateSubCACertificateRequest): CreateSubCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubCACertificateWithOptions(request, runtime);
}

model DeleteClientCertificateRequest {
  identifier?: string(name='Identifier'),
}

model DeleteClientCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClientCertificateResponseBody(name='body'),
}

async function deleteClientCertificateWithOptions(request: DeleteClientCertificateRequest, runtime: Util.RuntimeOptions): DeleteClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteClientCertificate(request: DeleteClientCertificateRequest): DeleteClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClientCertificateWithOptions(request, runtime);
}

model DescribeCACertificateRequest {
  identifier?: string(name='Identifier'),
}

model DescribeCACertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate'),
    algorithm?: string(name='Algorithm'),
    beforeDate?: long(name='BeforeDate'),
    certificateType?: string(name='CertificateType'),
    commonName?: string(name='CommonName'),
    countryCode?: string(name='CountryCode'),
    identifier?: string(name='Identifier'),
    keySize?: int32(name='KeySize'),
    locality?: string(name='Locality'),
    md5?: string(name='Md5'),
    organization?: string(name='Organization'),
    organizationUnit?: string(name='OrganizationUnit'),
    parentIdentifier?: string(name='ParentIdentifier'),
    sans?: string(name='Sans'),
    serialNumber?: string(name='SerialNumber'),
    sha2?: string(name='Sha2'),
    signAlgorithm?: string(name='SignAlgorithm'),
    state?: string(name='State'),
    status?: string(name='Status'),
    subjectDN?: string(name='SubjectDN'),
    x509Certificate?: string(name='X509Certificate'),
    years?: int32(name='Years'),
  }(name='Certificate'),
  requestId?: string(name='RequestId'),
}

model DescribeCACertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCACertificateResponseBody(name='body'),
}

async function describeCACertificateWithOptions(request: DescribeCACertificateRequest, runtime: Util.RuntimeOptions): DescribeCACertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCACertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCACertificate(request: DescribeCACertificateRequest): DescribeCACertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateWithOptions(request, runtime);
}

model DescribeCACertificateCountResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCACertificateCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCACertificateCountResponseBody(name='body'),
}

async function describeCACertificateCountWithOptions(runtime: Util.RuntimeOptions): DescribeCACertificateCountResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'DescribeCACertificateCount',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCACertificateCount(): DescribeCACertificateCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateCountWithOptions(runtime);
}

model DescribeCACertificateListRequest {
  currentPage?: int32(name='CurrentPage'),
  showSize?: int32(name='ShowSize'),
}

model DescribeCACertificateListResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: long(name='BeforeDate'),
      certificateType?: string(name='CertificateType'),
      commonName?: string(name='CommonName'),
      countryCode?: string(name='CountryCode'),
      identifier?: string(name='Identifier'),
      keySize?: int32(name='KeySize'),
      locality?: string(name='Locality'),
      md5?: string(name='Md5'),
      organization?: string(name='Organization'),
      organizationUnit?: string(name='OrganizationUnit'),
      parentIdentifier?: string(name='ParentIdentifier'),
      sans?: string(name='Sans'),
      serialNumber?: string(name='SerialNumber'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
      state?: string(name='State'),
      status?: string(name='Status'),
      subjectDN?: string(name='SubjectDN'),
      x509Certificate?: string(name='X509Certificate'),
      years?: int32(name='Years'),
    }
  ](name='CertificateList'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCACertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCACertificateListResponseBody(name='body'),
}

async function describeCACertificateListWithOptions(request: DescribeCACertificateListRequest, runtime: Util.RuntimeOptions): DescribeCACertificateListResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["ShowSize"] = request.showSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCACertificateList',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCACertificateList(request: DescribeCACertificateListRequest): DescribeCACertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCACertificateListWithOptions(request, runtime);
}

model DescribeCertificatePrivateKeyRequest {
  encryptedCode?: string(name='EncryptedCode'),
  identifier?: string(name='Identifier'),
}

model DescribeCertificatePrivateKeyResponseBody = {
  encryptedData?: string(name='EncryptedData'),
  requestId?: string(name='RequestId'),
}

model DescribeCertificatePrivateKeyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertificatePrivateKeyResponseBody(name='body'),
}

async function describeCertificatePrivateKeyWithOptions(request: DescribeCertificatePrivateKeyRequest, runtime: Util.RuntimeOptions): DescribeCertificatePrivateKeyResponse {
  Util.validateModel(request);
  var query = {};
  query["EncryptedCode"] = request.encryptedCode;
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCertificatePrivateKey',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCertificatePrivateKey(request: DescribeCertificatePrivateKeyRequest): DescribeCertificatePrivateKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertificatePrivateKeyWithOptions(request, runtime);
}

model DescribeClientCertificateRequest {
  identifier?: string(name='Identifier'),
}

model DescribeClientCertificateResponseBody = {
  certificate?: {
    afterDate?: long(name='AfterDate'),
    algorithm?: string(name='Algorithm'),
    beforeDate?: long(name='BeforeDate'),
    certificateType?: string(name='CertificateType'),
    commonName?: string(name='CommonName'),
    countryCode?: string(name='CountryCode'),
    days?: int32(name='Days'),
    identifier?: string(name='Identifier'),
    keySize?: int32(name='KeySize'),
    locality?: string(name='Locality'),
    md5?: string(name='Md5'),
    organization?: string(name='Organization'),
    organizationUnit?: string(name='OrganizationUnit'),
    parentIdentifier?: string(name='ParentIdentifier'),
    sans?: string(name='Sans'),
    serialNumber?: string(name='SerialNumber'),
    sha2?: string(name='Sha2'),
    signAlgorithm?: string(name='SignAlgorithm'),
    state?: string(name='State'),
    status?: string(name='Status'),
    subjectDN?: string(name='SubjectDN'),
    x509Certificate?: string(name='X509Certificate'),
  }(name='Certificate'),
  requestId?: string(name='RequestId'),
}

model DescribeClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientCertificateResponseBody(name='body'),
}

async function describeClientCertificateWithOptions(request: DescribeClientCertificateRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientCertificate(request: DescribeClientCertificateRequest): DescribeClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateWithOptions(request, runtime);
}

model DescribeClientCertificateForSerialNumberRequest {
  serialNumber?: string(name='SerialNumber'),
}

model DescribeClientCertificateForSerialNumberResponseBody = {
  certificateList?: [ 
    {
      afterDate?: string(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: string(name='BeforeDate'),
      commonName?: string(name='CommonName'),
      countryCode?: string(name='CountryCode'),
      identifier?: string(name='Identifier'),
      keySize?: int32(name='KeySize'),
      locality?: string(name='Locality'),
      md5?: string(name='Md5'),
      organization?: string(name='Organization'),
      organizationUnit?: string(name='OrganizationUnit'),
      sans?: string(name='Sans'),
      serialNumber?: string(name='SerialNumber'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
      state?: string(name='State'),
      status?: string(name='Status'),
      subjectDN?: string(name='SubjectDN'),
      x509Certificate?: string(name='X509Certificate'),
      years?: int32(name='Years'),
    }
  ](name='CertificateList'),
  requestId?: string(name='RequestId'),
}

model DescribeClientCertificateForSerialNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientCertificateForSerialNumberResponseBody(name='body'),
}

async function describeClientCertificateForSerialNumberWithOptions(request: DescribeClientCertificateForSerialNumberRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateForSerialNumberResponse {
  Util.validateModel(request);
  var query = {};
  query["SerialNumber"] = request.serialNumber;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificateForSerialNumber',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientCertificateForSerialNumber(request: DescribeClientCertificateForSerialNumberRequest): DescribeClientCertificateForSerialNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateForSerialNumberWithOptions(request, runtime);
}

model DescribeClientCertificateStatusRequest {
  identifier?: string(name='Identifier'),
}

model DescribeClientCertificateStatusResponseBody = {
  certificateStatus?: [ 
    {
      revokeTime?: long(name='RevokeTime'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
    }
  ](name='CertificateStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeClientCertificateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientCertificateStatusResponseBody(name='body'),
}

async function describeClientCertificateStatusWithOptions(request: DescribeClientCertificateStatusRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificateStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientCertificateStatus(request: DescribeClientCertificateStatusRequest): DescribeClientCertificateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateStatusWithOptions(request, runtime);
}

model DescribeClientCertificateStatusForSerialNumberRequest {
  serialNumber?: string(name='SerialNumber'),
}

model DescribeClientCertificateStatusForSerialNumberResponseBody = {
  certificateStatus?: [ 
    {
      revokeTime?: long(name='RevokeTime'),
      serialNumber?: string(name='SerialNumber'),
      status?: string(name='Status'),
    }
  ](name='CertificateStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeClientCertificateStatusForSerialNumberResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClientCertificateStatusForSerialNumberResponseBody(name='body'),
}

async function describeClientCertificateStatusForSerialNumberWithOptions(request: DescribeClientCertificateStatusForSerialNumberRequest, runtime: Util.RuntimeOptions): DescribeClientCertificateStatusForSerialNumberResponse {
  Util.validateModel(request);
  var query = {};
  query["SerialNumber"] = request.serialNumber;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeClientCertificateStatusForSerialNumber',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeClientCertificateStatusForSerialNumber(request: DescribeClientCertificateStatusForSerialNumberRequest): DescribeClientCertificateStatusForSerialNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClientCertificateStatusForSerialNumberWithOptions(request, runtime);
}

model GetCAInstanceStatusRequest {
  instanceId?: string(name='InstanceId'),
}

model GetCAInstanceStatusResponseBody = {
  instanceStatusList?: [ 
    {
      afterTime?: long(name='AfterTime'),
      beforeTime?: long(name='BeforeTime'),
      certIssuedCount?: int32(name='CertIssuedCount'),
      certTotalCount?: int32(name='CertTotalCount'),
      identifier?: string(name='Identifier'),
      instanceId?: string(name='InstanceId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      useExpireTime?: long(name='UseExpireTime'),
    }
  ](name='InstanceStatusList'),
  requestId?: string(name='RequestId'),
}

model GetCAInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetCAInstanceStatusResponseBody(name='body'),
}

async function getCAInstanceStatusWithOptions(request: GetCAInstanceStatusRequest, runtime: Util.RuntimeOptions): GetCAInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'GetCAInstanceStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCAInstanceStatus(request: GetCAInstanceStatusRequest): GetCAInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCAInstanceStatusWithOptions(request, runtime);
}

model ListCACertificateLogRequest {
  identifier?: string(name='Identifier'),
}

model ListCACertificateLogResponseBody = {
  logList?: [ 
    {
      content?: string(name='Content'),
      createTime?: long(name='CreateTime'),
      identifier?: string(name='Identifier'),
      opType?: string(name='OpType'),
    }
  ](name='LogList'),
  requestId?: string(name='RequestId'),
}

model ListCACertificateLogResponse = {
  headers: map[string]string(name='headers'),
  body: ListCACertificateLogResponseBody(name='body'),
}

async function listCACertificateLogWithOptions(request: ListCACertificateLogRequest, runtime: Util.RuntimeOptions): ListCACertificateLogResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListCACertificateLog',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCACertificateLog(request: ListCACertificateLogRequest): ListCACertificateLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCACertificateLogWithOptions(request, runtime);
}

model ListClientCertificateRequest {
  currentPage?: int32(name='CurrentPage'),
  showSize?: int32(name='ShowSize'),
}

model ListClientCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: long(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: long(name='BeforeDate'),
      certificateType?: string(name='CertificateType'),
      commonName?: string(name='CommonName'),
      countryCode?: string(name='CountryCode'),
      days?: int32(name='Days'),
      identifier?: string(name='Identifier'),
      keySize?: int32(name='KeySize'),
      locality?: string(name='Locality'),
      md5?: string(name='Md5'),
      organization?: string(name='Organization'),
      organizationUnit?: string(name='OrganizationUnit'),
      parentIdentifier?: string(name='ParentIdentifier'),
      sans?: string(name='Sans'),
      serialNumber?: string(name='SerialNumber'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
      state?: string(name='State'),
      status?: string(name='Status'),
      subjectDN?: string(name='SubjectDN'),
      x509Certificate?: string(name='X509Certificate'),
    }
  ](name='CertificateList'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model ListClientCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ListClientCertificateResponseBody(name='body'),
}

async function listClientCertificateWithOptions(request: ListClientCertificateRequest, runtime: Util.RuntimeOptions): ListClientCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["ShowSize"] = request.showSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListClientCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listClientCertificate(request: ListClientCertificateRequest): ListClientCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listClientCertificateWithOptions(request, runtime);
}

model ListRevokeCertificateRequest {
  currentPage?: int32(name='CurrentPage'),
  showSize?: int32(name='ShowSize'),
}

model ListRevokeCertificateResponseBody = {
  certificateList?: [ 
    {
      afterDate?: string(name='AfterDate'),
      algorithm?: string(name='Algorithm'),
      beforeDate?: string(name='BeforeDate'),
      commonName?: string(name='CommonName'),
      countryCode?: string(name='CountryCode'),
      identifier?: string(name='Identifier'),
      keySize?: int32(name='KeySize'),
      locality?: string(name='Locality'),
      md5?: string(name='Md5'),
      organization?: string(name='Organization'),
      organizationUnit?: string(name='OrganizationUnit'),
      revokeDate?: string(name='RevokeDate'),
      sans?: string(name='Sans'),
      serialNumber?: string(name='SerialNumber'),
      sha2?: string(name='Sha2'),
      signAlgorithm?: string(name='SignAlgorithm'),
      state?: string(name='State'),
      subjectDN?: string(name='SubjectDN'),
    }
  ](name='CertificateList'),
  currentPage?: int32(name='CurrentPage'),
  pageCount?: int32(name='PageCount'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model ListRevokeCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: ListRevokeCertificateResponseBody(name='body'),
}

async function listRevokeCertificateWithOptions(request: ListRevokeCertificateRequest, runtime: Util.RuntimeOptions): ListRevokeCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["CurrentPage"] = request.currentPage;
  query["ShowSize"] = request.showSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ListRevokeCertificate',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listRevokeCertificate(request: ListRevokeCertificateRequest): ListRevokeCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRevokeCertificateWithOptions(request, runtime);
}

model UpdateCACertificateStatusRequest {
  identifier?: string(name='Identifier'),
  status?: string(name='Status'),
}

model UpdateCACertificateStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCACertificateStatusResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCACertificateStatusResponseBody(name='body'),
}

async function updateCACertificateStatusWithOptions(request: UpdateCACertificateStatusRequest, runtime: Util.RuntimeOptions): UpdateCACertificateStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["Identifier"] = request.identifier;
  query["Status"] = request.status;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCACertificateStatus',
    version = '2020-06-30',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCACertificateStatus(request: UpdateCACertificateStatusRequest): UpdateCACertificateStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCACertificateStatusWithOptions(request, runtime);
}

