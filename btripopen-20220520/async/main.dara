/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'btripOpen';
  @version = '2022-05-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AccessTokenRequest {
  appKey: string(name='app_key', description='应用的appKey', position='Query'),
  appSecret: string(name='app_secret', description='应用的appSecret', position='Query'),
}

model AccessTokenResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    expire?: long(name='expire', description='过期时间，单位ms，token在存储时，不要接近expire的时间，最好远小于expire'),
    token?: string(name='token', description='令牌'),
  }(name='data', description='请看module字段（作废）'),
  message?: string(name='message', description='错误信息'),
  module?: {
    expire?: long(name='expire', description='过期时间，单位ms，token在存储时，不要接近expire的时间，最好远小于expire'),
    start?: long(name='start', description='开始时间'),
    token?: string(name='token', description='令牌'),
  }(name='module', description='请看module字段（作废）'),
  requestId?: string(name='requestId'),
  traceId?: string(name='traceId'),
}

model AccessTokenResponse = {
  headers: map[string]string(name='headers'),
  body: AccessTokenResponseBody(name='body'),
}

async function accessToken(request: AccessTokenRequest): AccessTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AccessToken', 'GET', '/btrip-open-auth/v1/access-token/action/take', 'json', false, 'json', request);
}

model AddressGetRequest {
  actionType: int32(name='action_type', position='Query'),
  itineraryId?: string(name='itinerary_id', position='Query'),
  phone?: string(name='phone', position='Query'),
  type?: int32(name='type', position='Query'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model AddressGetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    url?: string(name='url'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model AddressGetResponse = {
  headers: map[string]string(name='headers'),
  body: AddressGetResponseBody(name='body'),
}

async function addressGet(request: AddressGetRequest): AddressGetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddressGet', 'GET', '/open/v1/address', 'json', false, 'json', request);
}

model AirportSearchRequest {
  keyword: string(name='keyword', description='搜索关键字', position='Query'),
  type?: int32(name='type', description='0国内机场，2国内机场+临近机场，3国际机场', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model AirportSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='��ע������ı�ע����Խ����˵��'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        distance?: int32(name='distance', description='与搜索城市距离，单位千米，只在邻近机场推荐有值'),
        name?: string(name='name'),
        travelName?: string(name='travel_name', description='邻近机场城市，只在邻近机场推荐有值'),
      }
    ](name='cities'),
    nearby?: boolean(name='nearby', description='是否为邻近城市'),
  }(name='module', description='����ֵ������˷��أ�û�н�������쳣�����ؿ�'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='�ɹ���ʶ���ɷ�������ã������쳣ʱΪfalse�����Ϊnull����Ϊfalse��'),
  traceId?: string(name='traceId'),
}

model AirportSearchResponse = {
  headers: map[string]string(name='headers'),
  body: AirportSearchResponseBody(name='body'),
}

async function airportSearch(request: AirportSearchRequest): AirportSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AirportSearch', 'GET', '/city/v1/airport', 'json', false, 'json', request);
}

model AllBaseCityInfoQueryRequest {
  xAcsBtripAccessToken: string(name='x-acs-btrip-access-token', position='Header'),
}

model AllBaseCityInfoQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    allCityBaseInfoList?: [ 
      {
        adcode?: string(name='adcode', description='城市行政区划编码'),
        cityCode?: string(name='city_code', description='城市区域编码'),
        cityLevel?: string(name='city_level', description='城市级别：2-地级市，3-县级市'),
        cityName?: string(name='city_name', description='所在城市名称'),
        cnNameTree?: string(name='cn_name_tree', description='城市级别全路径'),
        id?: long(name='id', description='主键id'),
        otherNameList?: [ string ](name='other_name_list', description='城市别名列表'),
      }
    ](name='all_city_base_info_list', description='全量城市信息列表'),
  }(name='module'),
  requestId?: string(name='requestId', description='Id of the request'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model AllBaseCityInfoQueryResponse = {
  headers: map[string]string(name='headers'),
  body: AllBaseCityInfoQueryResponseBody(name='body'),
}

async function allBaseCityInfoQuery(request: AllBaseCityInfoQueryRequest): AllBaseCityInfoQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AllBaseCityInfoQuery', 'GET', '/city/v1/code', 'json', false, 'json', request);
}

model ApplyAddRequest {
  budget?: long(name='budget', description='审批单总预算(分)', position='Body'),
  budgetMerge?: int32(name='budget_merge', description='多个申请单预算合并。', position='Body'),
  corpName?: string(name='corp_name', position='Body'),
  departId?: string(name='depart_id', position='Body'),
  departName?: string(name='depart_name', position='Body'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list', shrink='json', position='Body'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
    trainSeats?: string(name='train_seats'),
  }(name='external_traveler_standard', shrink='json', position='Body'),
  flightBudget?: long(name='flight_budget', description='审批单机票预算(分)', position='Body'),
  hotelBudget?: long(name='hotel_budget', description='审批单酒店预算(分)', position='Body'),
  hotelShare?: {
    param?: string(name='param', description='比例/固定金额'),
    type?: string(name='type', description='合住公式（HotelShareEnum.type）'),
  }(name='hotel_share', description='酒店合住规则', shrink='json', position='Body'),
  internationalFlightCabins?: string(name='international_flight_cabins', position='Query'),
  itineraryList?: [ 
    {
      arrCity: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code'),
      arrDate: string(name='arr_date'),
      costCenterId?: long(name='cost_center_id'),
      depCity: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code'),
      depDate: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId: string(name='itinerary_id'),
      needHotel?: boolean(name='need_hotel'),
      needTraffic?: boolean(name='need_traffic'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
      tripWay: int32(name='trip_way'),
    }
  ](name='itinerary_list', shrink='json', position='Body'),
  itineraryRule?: int32(name='itinerary_rule', description='申请单城市规则：
0出发&目的地一对一，按列表传行程 
1多选N个地点，城市集行程
不传默认为0
会根据商旅管理后台-通用差旅设置-行程城市规则中的设置，校验申请单本字段的值是否正确
当行程城市规则中设置的是“1对1行程”时，必须传0
当行程城市规则中设置的是“多对多城市集行程”时，必须传1
会根据此字段传入的值，校验行程传参是否正确
当申请单城市规则为0，itinerary_list行程列表必填
当申请单城市规则为1，城市集行程必填', position='Body'),
  itinerarySetList?: [ 
    {
      arrDate: string(name='arr_date', description='到达日期'),
      cityCodeSet: string(name='city_code_set', description='离抵城市code，多个城市请用中文“，”隔开
当允许预订的类目为1/3/7/9时，仅传行政区划citycode允许通过
当允许预订的类目为0/6时，仅传城市三字码允许通过
city_set和city_code_set必须一对一'),
      citySet: string(name='city_set', description='离抵城市名称，多个城市请用中文“，”隔开'),
      costCenterId?: long(name='cost_center_id', description='商旅成本中心id，和第三方成本中心id二者选择其一即可'),
      depDate: string(name='dep_date', description='出发日期'),
      invoiceId?: long(name='invoice_id', description='商旅发票id，和第三方发票Id二者选择其一即可'),
      itineraryId: string(name='itinerary_id', description='行程id'),
      projectCode?: string(name='project_code', description='项目编号'),
      projectTitle?: string(name='project_title', description='项目名称'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', description='第三方发票id，和商旅发票id二者选择其一即可'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', description='第三方成本中心id，和商旅成本中心id二者选择其一即可'),
      trafficType: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
    }
  ](name='itinerary_set_list', description='城市集行程列表', shrink='json', position='Body'),
  limitTraveler?: int32(name='limit_traveler', description='是否限制审批单的出行人', position='Body'),
  status?: int32(name='status', position='Body'),
  thirdpartApplyId: string(name='thirdpart_apply_id', position='Body'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', description='审批单的展示id', position='Body'),
  thirdpartDepartId?: string(name='thirdpart_depart_id', description='三方部门id
thirdpart_depart_id和depart_id中任意一个传值，以该字段为准
thirdpart_depart_id和depart_id均传值，以thirdpart_depart_id为准', position='Body'),
  togetherBookRule?: int32(name='together_book_rule', description='同时预订(机票&火车票)规则。1：就高；2：就低。', position='Body'),
  trainBudget?: long(name='train_budget', description='审批单火车票预算(分)', position='Body'),
  travelerList?: [ 
    {
      userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list', shrink='json', position='Body'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount'),
      economyDiscount?: int32(name='economy_discount'),
      firstDiscount?: int32(name='first_discount'),
      flightCabins?: string(name='flight_cabins'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_citys'),
      reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
      trainSeats?: string(name='train_seats'),
      userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
    }
  ](name='traveler_standard', shrink='json', position='Body'),
  tripCause: string(name='trip_cause', position='Body'),
  tripDay?: int32(name='trip_day', position='Body'),
  tripTitle: string(name='trip_title', position='Body'),
  type?: int32(name='type', position='Body'),
  unionNo?: string(name='union_no', description='关联单号', position='Body'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Body'),
  userName?: string(name='user_name', position='Body'),
  vehicleBudget?: long(name='vehicle_budget', description='审批单用车预算(分)', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ApplyAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyAddResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyAddResponseBody(name='body'),
}

async function applyAdd(request: ApplyAddRequest): ApplyAddResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyAdd', 'POST', '/apply/v1/biz-trip', 'json', true, 'form', request);
}

model ApplyApproveRequest {
  applyId: string(name='apply_id', description='外部申请单id', position='Body'),
  note?: string(name='note', description='备注', position='Body'),
  operateTime: string(name='operate_time', description='操作时间', position='Body'),
  status: int32(name='status', description='1已同意 2已拒绝 3已转交 4已取消', position='Body'),
  userId: string(name='user_id', description='审批人id（第三方用户Id），无userId时传缺省值superAdmin', position='Body'),
  userName?: string(name='user_name', description='审批人名字', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ApplyApproveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyApproveResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyApproveResponseBody(name='body'),
}

async function applyApprove(request: ApplyApproveRequest): ApplyApproveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyApprove', 'PUT', '/apply/v1/biz-trip/action/approve', 'json', true, 'form', request);
}

model ApplyListQueryRequest {
  allApply?: boolean(name='all_apply', description='所有申请单（含已报销的）', position='Query'),
  departId?: string(name='depart_id', position='Query'),
  endTime?: string(name='end_time', position='Query'),
  gmtModified?: string(name='gmt_modified', position='Query'),
  onlyShangLvApply?: boolean(name='only_shang_lv_apply', description='仅商旅申请单', position='Query'),
  page?: int32(name='page', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  startTime?: string(name='start_time', position='Query'),
  type?: int32(name='type', position='Query'),
  unionNo?: string(name='union_no', description='关联单号', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ApplyListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  moduleList?: [ 
    {
      applyShowId?: string(name='apply_show_id'),
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time'),
          order?: int32(name='order'),
          status?: int32(name='status'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      externalTravelerList?: [ 
        {
          userName?: string(name='user_name'),
        }
      ](name='external_traveler_list'),
      flowCode?: string(name='flow_code'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: string(name='arr_date'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depDate?: string(name='dep_date'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type'),
          tripWay?: int32(name='trip_way'),
        }
      ](name='itinerary_list'),
      itineraryRule?: int32(name='itinerary_rule', description='申请单城市规则：
0出发&目的地一对一，按列表传行程 
1多选N个地点，城市集行程
当申请单城市规则为0，itinerary_list行程列表必填
当申请单城市规则为1，itinerary_set_list行程列表必填'),
      itinerarySetList?: [ 
        {
          arrDate?: string(name='arr_date', description='到达日期'),
          cityCodeSet?: string(name='city_code_set', description='离抵城市code，多个城市用中文“，”隔开
'),
          citySet?: string(name='city_set', description='离抵城市名称，多个城市用中文“，”隔开'),
          costCenterName?: string(name='cost_center_name', description='成本中心名称'),
          depDate?: string(name='dep_date', description='出发日期'),
          invoiceName?: string(name='invoice_name', description='发票抬头'),
          itineraryId?: string(name='itinerary_id', description='行程id'),
          projectCode?: string(name='project_code', description='项目编号'),
          projectTitle?: string(name='project_title', description='项目名称'),
          trafficType?: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
        }
      ](name='itinerary_set_list', description='城市集行程列表'),
      status?: int32(name='status'),
      statusDesc?: string(name='status_desc'),
      thirdpartBusinessId?: string(name='thirdpart_business_id'),
      thirdpartId?: string(name='thirdpart_id'),
      travelerList?: [ 
        {
          userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
          userName?: string(name='user_name'),
        }
      ](name='traveler_list'),
      tripCause?: string(name='trip_cause'),
      tripDay?: int32(name='trip_day'),
      tripTitle?: string(name='trip_title'),
      type?: int32(name='type'),
      unionNo?: string(name='union_no'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module_list'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyListQueryResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyListQueryResponseBody(name='body'),
}

async function applyListQuery(request: ApplyListQueryRequest): ApplyListQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyListQuery', 'GET', '/apply/v1/biz-trips', 'json', false, 'json', request);
}

model ApplyModifyRequest {
  budget?: long(name='budget', description='审批单总预算(分)', position='Body'),
  budgetMerge?: int32(name='budget_merge', description='多个申请单预算合并。', position='Body'),
  corpName?: string(name='corp_name', position='Body'),
  departId?: string(name='depart_id', position='Body'),
  departName?: string(name='depart_name', position='Body'),
  externalTravelerList?: [ 
    {
      userName?: string(name='user_name'),
    }
  ](name='external_traveler_list', shrink='json', position='Body'),
  externalTravelerStandard?: {
    businessDiscount?: int32(name='business_discount'),
    economyDiscount?: int32(name='economy_discount'),
    firstDiscount?: int32(name='first_discount'),
    flightCabins?: string(name='flight_cabins'),
    hotelCitys?: [ 
      {
        cityCode?: string(name='city_code'),
        cityName?: string(name='city_name'),
        fee?: long(name='fee'),
      }
    ](name='hotel_citys'),
    reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
    trainSeats?: string(name='train_seats'),
  }(name='external_traveler_standard', shrink='json', position='Body'),
  flightBudget?: long(name='flight_budget', description='审批单机票预算(分)', position='Body'),
  hotelBudget?: long(name='hotel_budget', description='审批单酒店预算(分)', position='Body'),
  hotelShare?: {
    param?: string(name='param', description='比例/固定金额'),
    type?: string(name='type', description='合住公式（HotelShareEnum.type）'),
  }(name='hotel_share', description='酒店合住规则', shrink='json', position='Body'),
  itineraryList?: [ 
    {
      arrCity: string(name='arr_city'),
      arrCityCode?: string(name='arr_city_code'),
      arrDate: string(name='arr_date'),
      costCenterId?: long(name='cost_center_id'),
      depCity: string(name='dep_city'),
      depCityCode?: string(name='dep_city_code'),
      depDate: string(name='dep_date'),
      invoiceId?: long(name='invoice_id'),
      itineraryId: string(name='itinerary_id'),
      needHotel?: boolean(name='need_hotel'),
      needTraffic?: boolean(name='need_traffic'),
      projectCode?: string(name='project_code'),
      projectTitle?: string(name='project_title'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id'),
      trafficType: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
      tripWay: int32(name='trip_way'),
    }
  ](name='itinerary_list', shrink='json', position='Body'),
  itineraryRule?: int32(name='itinerary_rule', description='申请单城市规则：
0出发&目的地一对一，按列表传行程 
1多选N个地点，城市集行程
不传默认为0
会根据商旅管理后台-通用差旅设置-行程城市规则中的设置，校验申请单本字段的值是否正确
当行程城市规则中设置的是“1对1行程”时，必须传0
当行程城市规则中设置的是“多对多城市集行程”时，必须传1
会根据此字段传入的值，校验行程传参是否正确
当申请单城市规则为0，itinerary_list行程列表必填
当申请单城市规则为1，城市集行程必填', position='Body'),
  itinerarySetList?: [ 
    {
      arrDate?: string(name='arr_date', description='到达日期'),
      cityCodeSet?: string(name='city_code_set', description='离抵城市code，多个城市请用中文“，”隔开
当允许预订的类目为1/3/7/9时，仅传行政区划citycode允许通过
当允许预订的类目为0/6时，仅传城市三字码允许通过'),
      citySet?: string(name='city_set', description='离抵城市名称，多个城市请用中文“，”隔开'),
      costCenterId?: long(name='cost_center_id', description='商旅成本中心id，和第三方成本中心id二者选择其一即可'),
      depDate?: string(name='dep_date', description='出发日期'),
      invoiceId?: long(name='invoice_id', description='商旅发票id，和第三方发票Id二者选择其一即可'),
      itineraryId?: string(name='itinerary_id', description='行程id'),
      projectCode?: string(name='project_code', description='项目编号'),
      projectTitle?: string(name='project_title', description='项目名称'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id', description='第三方发票id，和商旅发票id二者选择其一即可'),
      thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', description='第三方成本中心id，和商旅成本中心id二者选择其一即可'),
      trafficType?: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
    }
  ](name='itinerary_set_list', shrink='json', position='Body'),
  limitTraveler?: int32(name='limit_traveler', description='是否限制审批单的出行人', position='Body'),
  status?: int32(name='status', position='Body'),
  thirdpartApplyId: string(name='thirdpart_apply_id', position='Body'),
  thirdpartBusinessId?: string(name='thirdpart_business_id', description='审批单的展示id', position='Body'),
  thirdpartDepartId?: string(name='thirdpart_depart_id', description='三方部门id
thirdpart_depart_id和depart_id中任意一个传值，以该字段为准
thirdpart_depart_id和depart_id均传值，以thirdpart_depart_id为准', position='Body'),
  togetherBookRule?: int32(name='together_book_rule', description='同时预订(机票&火车票)规则。1：就高；2：就低。', position='Body'),
  trainBudget?: long(name='train_budget', description='审批单火车票预算(分)', position='Body'),
  travelerList?: [ 
    {
      userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
      userName?: string(name='user_name'),
    }
  ](name='traveler_list', shrink='json', position='Body'),
  travelerStandard?: [ 
    {
      businessDiscount?: int32(name='business_discount'),
      economyDiscount?: int32(name='economy_discount'),
      firstDiscount?: int32(name='first_discount'),
      flightCabins?: string(name='flight_cabins'),
      hotelCitys?: [ 
        {
          cityCode?: string(name='city_code'),
          cityName?: string(name='city_name'),
          fee?: long(name='fee'),
        }
      ](name='hotel_citys'),
      reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
      trainSeats?: string(name='train_seats'),
      userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
    }
  ](name='traveler_standard', shrink='json', position='Body'),
  tripCause: string(name='trip_cause', position='Body'),
  tripDay?: int32(name='trip_day', position='Body'),
  tripTitle: string(name='trip_title', position='Body'),
  unionNo?: string(name='union_no', description='关联单号', position='Body'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Body'),
  userName?: string(name='user_name', position='Body'),
  vehicleBudget?: long(name='vehicle_budget', description='审批单用车预算(分)', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ApplyModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyModifyResponseBody(name='body'),
}

async function applyModify(request: ApplyModifyRequest): ApplyModifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyModify', 'PUT', '/apply/v1/biz-trip', 'json', true, 'form', request);
}

model ApplyQueryRequest {
  applyId?: int32(name='apply_id', position='Query'),
  applyShowId?: string(name='apply_show_id', position='Query'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', position='Query'),
  type?: int32(name='type', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyShowId?: string(name='apply_show_id'),
    approverList?: [ 
      {
        note?: string(name='note'),
        operateTime?: string(name='operate_time'),
        order?: int32(name='order'),
        status?: int32(name='status'),
        statusDesc?: string(name='status_desc'),
        userId?: string(name='user_id'),
        userName?: string(name='user_name'),
      }
    ](name='approver_list'),
    budget?: long(name='budget'),
    budgetMerge?: int32(name='budget_merge'),
    corpId?: string(name='corp_id'),
    corpName?: string(name='corp_name'),
    departId?: string(name='depart_id'),
    departName?: string(name='depart_name'),
    externalTravelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount'),
        economyDiscount?: int32(name='economy_discount'),
        firstDiscount?: int32(name='first_discount'),
        flightCabins?: string(name='flight_cabins'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_citys'),
        reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
        trainSeats?: string(name='train_seats'),
        userName?: string(name='user_name'),
      }
    ](name='external_traveler_list'),
    flightBudget?: long(name='flight_budget'),
    gmtCreate?: string(name='gmt_create'),
    gmtModified?: string(name='gmt_modified'),
    hotelBudget?: long(name='hotel_budget'),
    hotelShare?: {
      param?: string(name='param', description='比例/固定金额'),
      type?: string(name='type', description='合住公式（HotelShareEnum.type）'),
    }(name='hotel_share'),
    id?: long(name='id'),
    itineraryList?: [ 
      {
        arrCity?: string(name='arr_city'),
        arrCityCode?: string(name='arr_city_code'),
        arrDate?: string(name='arr_date'),
        costCenterName?: string(name='cost_center_name'),
        depCity?: string(name='dep_city'),
        depCityCode?: string(name='dep_city_code'),
        depDate?: string(name='dep_date'),
        invoiceName?: string(name='invoice_name'),
        itineraryId?: string(name='itinerary_id'),
        projectCode?: string(name='project_code'),
        projectTitle?: string(name='project_title'),
        trafficType?: int32(name='traffic_type'),
        tripWay?: int32(name='trip_way'),
      }
    ](name='itinerary_list'),
    itineraryRule?: int32(name='itinerary_rule', description='申请单城市规则：
0出发&目的地一对一，按列表传行程 
1多选N个地点，城市集行程
不传默认为0
会根据商旅管理后台-通用差旅设置-行程城市规则中的设置，校验申请单本字段的值是否正确
当行程城市规则中设置的是“1对1行程”时，必须传0
当行程城市规则中设置的是“多对多城市集行程”时，必须传1
会根据此字段传入的值，校验行程传参是否正确
当申请单城市规则为0，itinerary_list行程列表必填
当申请单城市规则为1，城市集行程必填'),
    itinerarySetList?: [ 
      {
        arrDate?: string(name='arr_date', description='到达日期'),
        cityCodeSet?: string(name='city_code_set', description='离抵城市code，多个城市用中文“，”隔开'),
        citySet?: string(name='city_set', description='离抵城市名称，多个城市用中文“，”隔开'),
        costCenterName?: string(name='cost_center_name', description='成本中心名称'),
        depDate?: string(name='dep_date', description='出发日期'),
        invoiceName?: string(name='invoice_name', description='发票抬头'),
        itineraryId?: string(name='itinerary_id', description='行程id'),
        projectCode?: string(name='project_code', description='项目编号'),
        projectTitle?: string(name='project_title', description='项目名称'),
        trafficType?: int32(name='traffic_type', description='交通方式： 0 飞机、酒店,  1 火车、酒店,  2 汽车、酒店,  3 酒店，5 不限，6 飞机，7 火车，9 飞机、火车、酒店'),
      }
    ](name='itinerary_set_list', description='城市集行程列表'),
    limitTraveler?: int32(name='limit_traveler'),
    status?: int32(name='status'),
    statusDesc?: string(name='status_desc'),
    thirdpartBusinessId?: string(name='thirdpart_business_id'),
    thirdpartId?: string(name='thirdpart_id'),
    togetherBookRule?: int32(name='together_book_rule'),
    trainBudget?: long(name='train_budget'),
    travelerList?: [ 
      {
        businessDiscount?: int32(name='business_discount'),
        economyDiscount?: int32(name='economy_discount'),
        firstDiscount?: int32(name='first_discount'),
        flightCabins?: string(name='flight_cabins'),
        hotelCitys?: [ 
          {
            cityCode?: string(name='city_code'),
            cityName?: string(name='city_name'),
            fee?: long(name='fee'),
          }
        ](name='hotel_citys'),
        reserveType?: int32(name='reserve_type', description='限制差标类型。0-不限差标，1-限制差标'),
        trainSeats?: string(name='train_seats'),
        userId?: string(name='user_id', description='无userId时传缺省值superAdmin'),
        userName?: string(name='user_name'),
      }
    ](name='traveler_list'),
    tripCause?: string(name='trip_cause'),
    tripDay?: int32(name='trip_day'),
    tripTitle?: string(name='trip_title'),
    type?: int32(name='type'),
    unionNo?: string(name='union_no'),
    userId?: string(name='user_id'),
    userName?: string(name='user_name'),
    vehicleBudget?: long(name='vehicle_budget'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyQueryResponseBody(name='body'),
}

async function applyQuery(request: ApplyQueryRequest): ApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ApplyQuery', 'GET', '/apply/v1/biz-trip', 'json', false, 'json', request);
}

model CarApplyAddRequest {
  cause: string(name='cause', description='出差事由', position='Body'),
  city: string(name='city', description='用车城市', position='Body'),
  date: string(name='date', description='用车时间', position='Body'),
  finishedDate?: string(name='finished_date', description='用车结束时间，为null时取date', position='Body'),
  projectCode?: string(name='project_code', description='审批单关联的项目code', position='Body'),
  projectName?: string(name='project_name', description='审批单关联的项目名', position='Body'),
  status: int32(name='status', description='0申请 1同意 2拒绝 3转交 4取消 5 修改已同意 6 撤销已同意 7 修改审批中 8 已同意(修改被拒绝)  9 撤销审批中n10 已同意(撤销被拒绝) 11 已同意(修改被取消) 12 已同意(撤销被取消)', position='Body'),
  thirdPartApplyId: string(name='third_part_apply_id', description='三方审批单ID', position='Body'),
  thirdPartCostCenterId: string(name='third_part_cost_center_id', description='审批单关联的三方成本中心ID', position='Body'),
  thirdPartInvoiceId: string(name='third_part_invoice_id', description='审批单关联的三方发票抬头ID', position='Body'),
  timesTotal: int32(name='times_total', description='申请单可用总次数', position='Body'),
  timesType: int32(name='times_type', description='次数类型 1:次数不限制 2、用户可指定次数 3、管理员限制次数', position='Body'),
  timesUsed: int32(name='times_used', description='申请单已用次数', position='Body'),
  title: string(name='title', description='审批单标题', position='Body'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarApplyAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: long(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarApplyAddResponse = {
  headers: map[string]string(name='headers'),
  body: CarApplyAddResponseBody(name='body'),
}

async function carApplyAdd(request: CarApplyAddRequest): CarApplyAddResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarApplyAdd', 'POST', '/apply/v1/car', 'json', true, 'form', request);
}

model CarApplyModifyRequest {
  operateTime?: string(name='operate_time', description='审批时间', position='Body'),
  remark?: string(name='remark', description='审批备注', position='Body'),
  status: int32(name='status', description='0申请 1同意 2拒绝 3转交 4取消 5 修改已同意 6 撤销已同意 7 修改审批中 8 已同意(修改被拒绝)  9 撤销审批中n10 已同意(撤销被拒绝) 11 已同意(修改被取消) 12 已同意(撤销被取消)', position='Body'),
  thirdPartApplyId: string(name='third_part_apply_id', position='Body'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarApplyModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarApplyModifyResponse = {
  headers: map[string]string(name='headers'),
  body: CarApplyModifyResponseBody(name='body'),
}

async function carApplyModify(request: CarApplyModifyRequest): CarApplyModifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarApplyModify', 'PUT', '/apply/v1/car', 'json', true, 'form', request);
}

model CarApplyQueryRequest {
  createdEndAt?: string(name='created_end_at', position='Query'),
  createdStartAt?: string(name='created_start_at', position='Query'),
  pageNumber?: int32(name='page_number', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  thirdPartApplyId?: string(name='third_part_apply_id', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarApplyQueryResponseBody = {
  applyList?: [ 
    {
      approverList?: [ 
        {
          note?: string(name='note'),
          operateTime?: string(name='operate_time'),
          order?: int32(name='order'),
          status?: int32(name='status'),
          statusDesc?: string(name='status_desc'),
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='approver_list'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      itineraryList?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrCityCode?: string(name='arr_city_code'),
          arrDate?: string(name='arr_date'),
          costCenterId?: long(name='cost_center_id'),
          costCenterName?: string(name='cost_center_name'),
          depCity?: string(name='dep_city'),
          depCityCode?: string(name='dep_city_code'),
          depDate?: string(name='dep_date'),
          invoiceId?: long(name='invoice_id'),
          invoiceName?: string(name='invoice_name'),
          itineraryId?: string(name='itinerary_id'),
          projectCode?: string(name='project_code'),
          projectTitle?: string(name='project_title'),
          trafficType?: int32(name='traffic_type'),
        }
      ](name='itinerary_list'),
      status?: int32(name='status'),
      statusDesc?: string(name='status_desc'),
      thirdpartId?: string(name='thirdpart_id'),
      tripCause?: string(name='trip_cause'),
      tripTitle?: string(name='trip_title'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='apply_list'),
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  total?: int32(name='total'),
  traceId?: string(name='traceId'),
}

model CarApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CarApplyQueryResponseBody(name='body'),
}

async function carApplyQuery(request: CarApplyQueryRequest): CarApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarApplyQuery', 'GET', '/apply/v1/car', 'json', false, 'json', request);
}

model CarBillSettlementQueryRequest {
  pageNo: int32(name='page_no', description='分页页数（第几页）', position='Query'),
  pageSize: int32(name='page_size', description='分页数量（每页多少条）', position='Query'),
  periodEnd: string(name='period_end', description='记账更新日期止 yyyy-MM-dd', position='Query'),
  periodStart: string(name='period_start', description='记账更新日期起 yyyy-MM-dd', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', description='类目'),
    corpId?: string(name='corp_id', description='企业id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', description='交易流水号'),
        applyId?: string(name='apply_id', description='审批单号'),
        arrCity?: string(name='arr_city', description='到达城市'),
        arrDate?: string(name='arr_date', description='到达日期'),
        arrLocation?: string(name='arr_location', description='到达地'),
        arrTime?: string(name='arr_time', description='到达时间'),
        billRecordTime?: string(name='bill_record_time', description='入账时间'),
        bookTime?: string(name='book_time', description='预定时间'),
        bookerId?: string(name='booker_id', description='预定人id'),
        bookerJobNo?: string(name='booker_job_no', description='预订人工号'),
        bookerName?: string(name='booker_name', description='预定人姓名'),
        businessCategory?: string(name='business_category', description='用车原因（中文）'),
        capitalDirection?: string(name='capital_direction', description='资金方向'),
        carLevel?: string(name='car_level', description='平台车型'),
        cascadeDepartment?: string(name='cascade_department', description='联级部门'),
        costCenter?: string(name='cost_center', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编号'),
        coupon?: double(name='coupon', description='优惠券'),
        couponPrice?: double(name='coupon_price', description='商旅优惠金额'),
        department?: string(name='department', description='末级部门'),
        departmentId?: string(name='department_id', description='部门编号'),
        deptCity?: string(name='dept_city', description='出发城市'),
        deptDate?: string(name='dept_date', description='出发日期'),
        deptLocation?: string(name='dept_location', description='出发地'),
        deptTime?: string(name='dept_time', description='出发时间'),
        estimateDriveDistance?: string(name='estimate_drive_distance', description='预估公里数'),
        estimatePrice?: double(name='estimate_price', description='预估金额'),
        feeType?: string(name='fee_type', description='费用类型'),
        index?: string(name='index', description='序号'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        memo?: string(name='memo', description='用车事由'),
        orderId?: string(name='order_id', description='订单id、福豆发放订单号'),
        orderPrice?: double(name='order_price', description='订单金额'),
        overApplyId?: string(name='over_apply_id', description='超标审批单号'),
        personSettleFee?: double(name='person_settle_fee', description='个人支付金额'),
        primaryId?: long(name='primary_id', description='主键id'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectName?: string(name='project_name', description='项目名称'),
        providerName?: string(name='provider_name', description='服务方'),
        realDriveDistance?: string(name='real_drive_distance', description='实际行驶公里数'),
        realFromAddr?: string(name='real_from_addr', description='实际上车点'),
        realToAddr?: string(name='real_to_addr', description='实际下车点'),
        remark?: string(name='remark', description='备注'),
        serviceFee?: double(name='service_fee', description='服务费'),
        settlementFee?: double(name='settlement_fee', description='结算金额'),
        settlementGrantFee?: double(name='settlement_grant_fee', description='结算金额--赠送部分'),
        settlementTime?: string(name='settlement_time', description='结算时间'),
        settlementType?: string(name='settlement_type', description='结算类型'),
        specialOrder?: string(name='special_order', description='特别关注订单'),
        specialReason?: string(name='special_reason', description='特别关注原因'),
        status?: int32(name='status', description='入账状态'),
        subOrderId?: string(name='sub_order_id', description='子订单id（目前用车有）'),
        travelerId?: string(name='traveler_id', description='出行人userId'),
        travelerJobNo?: string(name='traveler_job_no', description='出行人工号'),
        travelerName?: string(name='traveler_name', description='出行人名称'),
        userConfirmDesc?: string(name='user_confirm_desc', description='员工是否认可'),
        voucherType?: int32(name='voucher_type', description='票据类型'),
      }
    ](name='data_list', description='数据集合'),
    periodEnd?: string(name='period_end', description='记账日期止 yyyy-MM-dd'),
    periodStart?: string(name='period_start', description='记账日期起 yyyy-MM-dd'),
    totalNum?: long(name='total_num', description='总数量'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CarBillSettlementQueryResponseBody(name='body'),
}

async function carBillSettlementQuery(request: CarBillSettlementQueryRequest): CarBillSettlementQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarBillSettlementQuery', 'GET', '/car/v1/bill-settlement', 'json', false, 'json', request);
}

model CarOrderListQueryRequest {
  allApply?: boolean(name='all_apply', position='Query'),
  applyId?: long(name='apply_id', position='Query'),
  departId?: string(name='depart_id', position='Query'),
  endTime?: string(name='end_time', position='Query'),
  page?: int32(name='page', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  startTime?: string(name='start_time', position='Query'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', position='Query'),
  updateEndTime?: string(name='update_end_time', position='Query'),
  updateStartTime?: string(name='update_start_time', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id', description='商旅主审批单id'),
      applyShowId?: string(name='apply_show_id', description='审批单id'),
      btripTitle?: string(name='btrip_title', description='申请单名称'),
      businessCategory?: string(name='business_category', description='用车原因'),
      cancelTime?: string(name='cancel_time', description='取消时间'),
      carInfo?: string(name='car_info', description='车信息'),
      carLevel?: int32(name='car_level', description='车等级'),
      corpId?: string(name='corp_id', description='企业id'),
      corpName?: string(name='corp_name', description='企业名称'),
      costCenterId?: long(name='cost_center_id', description='成本中心ID'),
      costCenterName?: string(name='cost_center_name', description='成本中心名称'),
      costCenterNumber?: string(name='cost_center_number', description='成本中心代码'),
      deptId?: long(name='dept_id', description='部门id'),
      deptName?: string(name='dept_name', description='部门名称'),
      driverConfirmTime?: string(name='driver_confirm_time', description='司机确认到达时间'),
      estimatePrice?: double(name='estimate_price', description='预估金额'),
      fromAddress?: string(name='from_address', description='出发地'),
      fromCityName?: string(name='from_city_name', description='出发城市'),
      gmtCreate?: string(name='gmt_create', description='创建时间'),
      gmtModified?: string(name='gmt_modified', description='更新时间'),
      id?: long(name='id', description='自增ID'),
      invoiceId?: long(name='invoice_id', description='发票id'),
      invoiceTitle?: string(name='invoice_title', description='发票抬头'),
      isSpecial?: boolean(name='is_special', description='企业管理后台设置特殊用车条件 -> 员工用车下单 -> 用车订单同步到商旅侧时根据特殊用车条件为订单打标'),
      memo?: string(name='memo', description='用车事由'),
      orderStatus?: int32(name='order_status', description='订单状态'),
      passengerName?: string(name='passenger_name', description='乘客姓名'),
      payTime?: string(name='pay_time', description='支付时间'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          gmtCreate?: string(name='gmt_create'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          personPrice?: double(name='person_price'),
          price?: double(name='price'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list', description='价目信息'),
      projectCode?: string(name='project_code', description='项目编号'),
      projectId?: long(name='project_id', description='项目id'),
      projectTitle?: string(name='project_title', description='项目名称'),
      provider?: int32(name='provider', description='供应商'),
      publishTime?: string(name='publish_time', description='乘客发布用车时间（下单时间）'),
      realFromAddress?: string(name='real_from_address', description='真实出发地'),
      realFromCityName?: string(name='real_from_city_name', description='真实出发城市'),
      realToAddress?: string(name='real_to_address', description='真实到达地'),
      realToCityName?: string(name='real_to_city_name', description='真实到达城市'),
      serviceType?: int32(name='service_type', description='服务类型: 1出租车，2专车，3快车'),
      specialTypes?: [ string ](name='special_types', description='v_sp_t_1:用车里程'),
      takenTime?: string(name='taken_time', description='乘客上车时间（出发时间）'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='第三方申请单'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      toAddress?: string(name='to_address', description='到达地'),
      toCityName?: string(name='to_city_name', description='到达城市'),
      travelDistance?: double(name='travel_distance', description='行驶距离'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list'),
      userConfirm?: int32(name='user_confirm', description='用户确认状态'),
      userId?: string(name='user_id', description='用户Id（预定人钉钉ID）'),
      userName?: string(name='user_name', description='用户姓名（预定人姓名）'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', description='当前页'),
    pageSize?: int32(name='page_size', description='每页大小'),
    totalNumber?: int32(name='total_number', description='总记录数'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CarOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CarOrderListQueryResponseBody(name='body'),
}

async function carOrderListQuery(request: CarOrderListQueryRequest): CarOrderListQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarOrderListQuery', 'GET', '/car/v1/order-list', 'json', false, 'json', request);
}

model CarOrderQueryRequest {
  orderId?: long(name='order_id', position='Query'),
  subOrderId?: long(name='sub_order_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CarOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    carInfo?: {
      businessCategory?: string(name='business_category'),
      cancelTime?: long(name='cancel_time'),
      carInfo?: string(name='car_info'),
      carLevel?: int32(name='car_level'),
      driverConfirmTime?: long(name='driver_confirm_time'),
      estimatePrice?: long(name='estimate_price'),
      fromAddress?: string(name='from_address'),
      fromCityName?: string(name='from_city_name'),
      isSpecial?: boolean(name='is_special'),
      memo?: string(name='memo'),
      payTime?: long(name='pay_time'),
      publishTime?: long(name='publish_time'),
      realFromAddress?: string(name='real_from_address'),
      realFromCityName?: string(name='real_from_city_name'),
      realToAddress?: string(name='real_to_address'),
      realToCityName?: string(name='real_to_city_name'),
      serviceType?: int32(name='service_type'),
      specialTypes?: string(name='special_types'),
      takenTime?: long(name='taken_time'),
      toAddress?: string(name='to_address'),
      toCityName?: string(name='to_city_name'),
      travelDistance?: string(name='travel_distance'),
    }(name='car_info'),
    invoiceInfo?: {
      id?: long(name='id', description='发票id'),
      title?: string(name='title', description='发票抬头'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', description='申请单id'),
      btripCause?: string(name='btrip_cause', description='申请单-出行事由'),
      btripTitle?: string(name='btrip_title', description='申请单-出行标题'),
      corpId?: string(name='corp_id', description='企业id'),
      corpName?: string(name='corp_name', description='企业名称'),
      departId?: string(name='depart_id', description='部门id'),
      departName?: string(name='depart_name', description='部门名称'),
      gmtCreate?: long(name='gmt_create', description='订单创建时间'),
      gmtModified?: long(name='gmt_modified', description='订单更新时间'),
      itineraryId?: string(name='itinerary_id', description='行程单id'),
      orderId?: long(name='order_id', description='订单id'),
      orderStatus?: int32(name='order_status', description='订单状态 0: 初始化状态 1: 已超时 2: 派单成功 3: 派单失败 4: 已退款 5: 已支付 6: 已取消'),
      subOrderId?: long(name='sub_order_id', description='子订单id'),
      thirdDepartId?: string(name='third_depart_id', description='三方部门id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='三方申请单id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', description='三方行程单id'),
      userId?: string(name='user_id', description='预订人id'),
      userName?: string(name='user_name', description='预订人姓名'),
    }(name='order_base_info'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id', description='成本中心id'),
        costCenterName?: string(name='cost_center_name', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编码'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectId?: long(name='project_id', description='项目id'),
        projectTitle?: string(name='project_title', description='项目名称'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', description='第三方成本中心id'),
        thirdpartProjectId?: string(name='thirdpart_project_id', description='三方项目id'),
        userId?: string(name='user_id', description='出行人dingId'),
        userName?: string(name='user_name', description='出行人姓名'),
        userType?: int32(name='user_type', description='出行人类型 0:内部/1:外部'),
      }
    ](name='passenger_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', description='交易类目编码'),
        gmtCreate?: long(name='gmt_create'),
        payType?: int32(name='pay_type'),
        personPrice?: long(name='person_price'),
        price?: long(name='price'),
        tradeId?: string(name='trade_id'),
        type?: int32(name='type'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId', description='traceId'),
}

model CarOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CarOrderQueryResponseBody(name='body'),
}

async function carOrderQuery(request: CarOrderQueryRequest): CarOrderQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CarOrderQuery', 'GET', '/car/v1/order', 'json', false, 'json', request);
}

model CitySearchRequest {
  keyword: string(name='keyword', description='搜索关键字', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CitySearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='��ע������ı�ע����Խ����˵��'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        name?: string(name='name'),
        region?: int32(name='region'),
      }
    ](name='cities'),
  }(name='module', description='����ֵ������˷��أ�û�н�������쳣�����ؿ�'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='�ɹ���ʶ���ɷ�������ã������쳣ʱΪfalse�����Ϊnull����Ϊfalse��'),
  traceId?: string(name='traceId'),
}

model CitySearchResponse = {
  headers: map[string]string(name='headers'),
  body: CitySearchResponseBody(name='body'),
}

async function citySearch(request: CitySearchRequest): CitySearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CitySearch', 'GET', '/city/v1/city', 'json', false, 'json', request);
}

model CommonApplyQueryRequest {
  applyId: long(name='apply_id', position='Query'),
  bizCategory: int32(name='biz_category', description='业务类型', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CommonApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    bizCategory?: int32(name='biz_category'),
    cause?: string(name='cause'),
    corpId?: string(name='corp_id'),
    extendValue?: string(name='extend_value'),
    gmtCreate?: string(name='gmt_create'),
    status?: int32(name='status'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    thirdpartId?: string(name='thirdpart_id'),
    tripCause?: string(name='trip_cause'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CommonApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CommonApplyQueryResponseBody(name='body'),
}

async function commonApplyQuery(request: CommonApplyQueryRequest): CommonApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommonApplyQuery', 'GET', '/apply/v1/common', 'json', false, 'json', request);
}

model CommonApplySyncRequest {
  applyId: long(name='apply_id', position='Query'),
  bizCategory?: int32(name='biz_category', position='Query'),
  remark?: string(name='remark', position='Query'),
  status: int32(name='status', position='Query'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', position='Query'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CommonApplySyncResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model CommonApplySyncResponse = {
  headers: map[string]string(name='headers'),
  body: CommonApplySyncResponseBody(name='body'),
}

async function commonApplySync(request: CommonApplySyncRequest): CommonApplySyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CommonApplySync', 'GET', '/apply/v1/syn-common', 'json', false, 'json', request);
}

model CorpTokenRequest {
  appSecret?: string(name='app_secret', position='Query'),
  corpId: string(name='corp_id', description='企业id，值可以在开放平台中的关联企业查看。', position='Query'),
  type: int32(name='type', description='类型，0-自营 1-分销', position='Query'),
  xAcsBtripAccessToken?: string(name='x-acs-btrip-access-token', position='Header'),
}

model CorpTokenResponseBody = {
  code?: string(name='code', description='错误码'),
  data?: {
    expire?: long(name='expire', description='过期时间，单位ms，token在存储时，不要接近expire的时间，最好远小于expire'),
    token?: string(name='token', description='令牌'),
  }(name='data', description='请使用module字段（作废）'),
  message?: string(name='message', description='错误信息'),
  module?: {
    expire?: long(name='expire', description='过期时间，单位ms，token在存储时，不要接近expire的时间，最好远小于expire'),
    start?: long(name='start', description='开始时间'),
    token?: string(name='token', description='令牌'),
  }(name='module'),
  requestId?: string(name='requestId', description='pop请求id'),
  traceId?: string(name='traceId', description='traceId'),
}

model CorpTokenResponse = {
  headers: map[string]string(name='headers'),
  body: CorpTokenResponseBody(name='body'),
}

async function corpToken(request: CorpTokenRequest): CorpTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CorpToken', 'GET', '/btrip-open-auth/v1/corp-token/action/take', 'json', false, 'json', request);
}

model CostCenterDeleteRequest {
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CostCenterDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model CostCenterDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: CostCenterDeleteResponseBody(name='body'),
}

async function costCenterDelete(request: CostCenterDeleteRequest): CostCenterDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CostCenterDelete', 'DELETE', '/costcenter/v1/delete-costcenter', 'json', false, 'json', request);
}

model CostCenterModifyRequest {
  alipayNo?: string(name='alipay_no', description='绑定支付宝账号', position='Body'),
  number?: string(name='number', description='成本中心编号', position='Body'),
  scope: long(name='scope', description='适用范围: 1全员，2部分员工', position='Body'),
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Body'),
  title: string(name='title', description='成本中心名称', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CostCenterModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model CostCenterModifyResponse = {
  headers: map[string]string(name='headers'),
  body: CostCenterModifyResponseBody(name='body'),
}

async function costCenterModify(request: CostCenterModifyRequest): CostCenterModifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CostCenterModify', 'PUT', '/costcenter/v1/modify-costcenter', 'json', true, 'form', request);
}

model CostCenterQueryRequest {
  needOrgEntity?: boolean(name='need_org_entity', description='是否需要展示成员信息，当成本中心为部分人员适用的时候有返回', position='Query'),
  thirdpartId?: string(name='thirdpart_id', description='第三方成本中心id', position='Query'),
  title?: string(name='title', description='成本中心名称', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CostCenterQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: [ 
    {
      alipayNo?: string(name='alipay_no'),
      corpId?: string(name='corp_id'),
      entityDOS?: [ 
        {
          corpId?: string(name='corp_id'),
          entityId?: string(name='entity_id'),
          entityType?: string(name='entity_type'),
          name?: string(name='name'),
          userNum?: int32(name='user_num'),
        }
      ](name='entity_d_o_s'),
      id?: long(name='id'),
      number?: string(name='number'),
      ruleCode?: long(name='rule_code'),
      scope?: long(name='scope'),
      thirdpartId?: string(name='thirdpart_id'),
      title?: string(name='title'),
    }
  ](name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  morePage?: boolean(name='more_page', description='分页标识，由服务端设置，分页时是否有下一页更多数据。'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model CostCenterQueryResponse = {
  headers: map[string]string(name='headers'),
  body: CostCenterQueryResponseBody(name='body'),
}

async function costCenterQuery(request: CostCenterQueryRequest): CostCenterQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CostCenterQuery', 'GET', '/costcenter/v1/costcenter', 'json', false, 'json', request);
}

model CostCenterSaveRequest {
  alipayNo?: string(name='alipay_no', description='绑定支付宝账号', position='Body'),
  number?: string(name='number', description='第三方成本中心编号', position='Body'),
  scope: long(name='scope', description='适用范围:1全员，2部分人员', position='Body'),
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Body'),
  title: string(name='title', description='成本中心名称', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model CostCenterSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: {
    id?: long(name='id'),
  }(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model CostCenterSaveResponse = {
  headers: map[string]string(name='headers'),
  body: CostCenterSaveResponseBody(name='body'),
}

async function costCenterSave(request: CostCenterSaveRequest): CostCenterSaveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CostCenterSave', 'POST', '/costcenter/v1/save-costcenter', 'json', true, 'form', request);
}

model DepartmentSaveRequest {
  departList?: [ 
    {
      departId?: long(name='depart_id'),
      departName: string(name='depart_name'),
      departPid?: long(name='depart_pid'),
      managerIds?: string(name='manager_ids', description='部门主管id 以多个主管以|隔开'),
      status?: int32(name='status'),
      thirdDepartId?: string(name='third_depart_id'),
      thirdDepartPid?: string(name='third_depart_pid'),
    }
  ](name='depart_list', shrink='json', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model DepartmentSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model DepartmentSaveResponse = {
  headers: map[string]string(name='headers'),
  body: DepartmentSaveResponseBody(name='body'),
}

async function departmentSave(request: DepartmentSaveRequest): DepartmentSaveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DepartmentSave', 'POST', '/department/v1/department', 'json', true, 'form', request);
}

model EntityAddRequest {
  entityDOList?: [ 
    {
      entityId?: string(name='entity_id'),
      entityType?: string(name='entity_type'),
    }
  ](name='entity_d_o_list', description='员工/部门/角色信息列表', shrink='json', position='Body'),
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model EntityAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: {
    addNum?: int32(name='add_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model EntityAddResponse = {
  headers: map[string]string(name='headers'),
  body: EntityAddResponseBody(name='body'),
}

async function entityAdd(request: EntityAddRequest): EntityAddResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EntityAdd', 'POST', '/costcenter/v1/add-entity', 'json', true, 'form', request);
}

model EntityDeleteRequest {
  delAll: boolean(name='del_all', description='是否全部删除', position='Query'),
  entityDOList?: [ 
    {
      entityId: string(name='entity_id'),
      entityType: string(name='entity_type'),
    }
  ](name='entity_d_o_list', description='删除的成员信息列表,delAll为true时可不填', shrink='json', position='Body'),
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model EntityDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: {
    removeNum?: int32(name='remove_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  morePage?: boolean(name='more_page', description='分页标识，由服务端设置，分页时是否有下一页更多数据。'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model EntityDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: EntityDeleteResponseBody(name='body'),
}

async function entityDelete(request: EntityDeleteRequest): EntityDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EntityDelete', 'POST', '/costcenter/v1/entity/action/delete', 'json', true, 'form', request);
}

model EntitySetRequest {
  entityDOList?: [ 
    {
      entityId: string(name='entity_id'),
      entityType: string(name='entity_type'),
    }
  ](name='entity_d_o_list', description='人员信息列表', shrink='json', position='Body'),
  thirdpartId: string(name='thirdpart_id', description='第三方成本中心id', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model EntitySetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: {
    addNum?: int32(name='add_num'),
    removeNum?: int32(name='remove_num'),
    selectedUserNum?: int32(name='selected_user_num'),
  }(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  morePage?: boolean(name='more_page', description='分页标识，由服务端设置，分页时是否有下一页更多数据。'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model EntitySetResponse = {
  headers: map[string]string(name='headers'),
  body: EntitySetResponseBody(name='body'),
}

async function entitySet(request: EntitySetRequest): EntitySetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EntitySet', 'POST', '/costcenter/v1/set-entity', 'json', true, 'form', request);
}

model EstimatedPriceQueryRequest {
  arrCity: string(name='arr_city', description='目的地。', position='Query'),
  category: string(name='category', description='类目：
flight：机票
hotel：酒店
train：火车', position='Query'),
  depCity: string(name='dep_city', description='出发地点。', position='Query'),
  endTime: long(name='end_time', description='返程时间: 毫秒时间戳', position='Query'),
  itineraryId?: string(name='itinerary_id', description='行程ID。
企业内部应用，通过获取申请单列表接口获取。
第三方企业应用，通过获取申请单列表接口获取。', position='Query'),
  startTime: long(name='start_time', description='出发时间: 毫秒时间戳', position='Query'),
  userId: string(name='user_id', description='用户的userid', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model EstimatedPriceQueryResponseBody = {
  code?: int32(name='code'),
  message?: string(name='message'),
  module?: {
    hotelFeeDetail?: [ 
      {
        city?: string(name='city', description='城市'),
        criterion?: long(name='criterion', description='差旅标准，单位为分'),
        itineraryId?: string(name='itinerary_id', description='行程id'),
        total?: long(name='total', description='预估总价, 单位为分'),
        tripDays?: int32(name='trip_days', description='行程天数'),
      }
    ](name='hotel_fee_detail', description='酒店费用预估'),
    trafficFee?: {
      btripRoutes?: [ 
        {
          arrCity?: string(name='arr_city'),
          arrDate?: long(name='arr_date'),
          cheapest?: {
            arrTime?: string(name='arr_time'),
            depTime?: string(name='dep_time'),
            fee?: long(name='fee'),
            seatGrade?: string(name='seat_grade', description='座位等级，可表示飞机舱位或火车座位'),
            vehicleNo?: string(name='vehicle_no', description='交通工具编号，可表示航班号或火车车次'),
          }(name='cheapest'),
          depCity?: string(name='dep_city'),
          depDate?: long(name='dep_date'),
          errMsg?: string(name='err_msg'),
          itineraryId?: string(name='itinerary_id'),
          mostExpensive?: {
            arrTime?: string(name='arr_time'),
            depTime?: string(name='dep_time'),
            fee?: long(name='fee'),
            seatGrade?: string(name='seat_grade', description='座位等级，可表示飞机舱位或火车座位'),
            vehicleNo?: string(name='vehicle_no', description='交通工具编号，可表示航班号或火车车次'),
          }(name='most_expensive'),
          success?: boolean(name='success'),
        }
      ](name='btrip_routes', description='差旅行程费用预估详情'),
      errMsg?: string(name='err_msg', description='错误码'),
      maxFee?: long(name='max_fee', description='交通费用上限，单位为分'),
      minFee?: long(name='min_fee', description='交通费用下限，单位为分'),
      success?: boolean(name='success'),
    }(name='traffic_fee'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model EstimatedPriceQueryResponse = {
  headers: map[string]string(name='headers'),
  body: EstimatedPriceQueryResponseBody(name='body'),
}

async function estimatedPriceQuery(request: EstimatedPriceQueryRequest): EstimatedPriceQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'EstimatedPriceQuery', 'GET', '/costcenter/v1/estimated-price', 'json', false, 'json', request);
}

model ExceedApplySyncRequest {
  applyId: long(name='apply_id', position='Query'),
  bizCategory?: int32(name='biz_category', position='Query'),
  remark?: string(name='remark', position='Query'),
  status: int32(name='status', position='Query'),
  thirdpartyFlowId?: string(name='thirdparty_flow_id', position='Query'),
  userId: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ExceedApplySyncResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: boolean(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model ExceedApplySyncResponse = {
  headers: map[string]string(name='headers'),
  body: ExceedApplySyncResponseBody(name='body'),
}

async function exceedApplySync(request: ExceedApplySyncRequest): ExceedApplySyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExceedApplySync', 'GET', '/apply/v1/syn-exceed', 'json', false, 'json', request);
}

model FlightBillSettlementQueryRequest {
  pageNo: int32(name='page_no', description='分页页数（第几页）', position='Query'),
  pageSize: int32(name='page_size', description='分页数量（每页多少条）', position='Query'),
  periodEnd: string(name='period_end', description='记账更新日期止 yyyy-MM-dd', position='Query'),
  periodStart: string(name='period_start', description='记账更新日期起 yyyy-MM-dd', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model FlightBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', description='类目'),
    corpId?: string(name='corp_id', description='企业id'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day', description='提前预定天数'),
        airlineCorpCode?: string(name='airline_corp_code', description='航司二字码	新字段，khipu已落库'),
        airlineCorpName?: string(name='airline_corp_name', description='航司名称'),
        alipayTradeNo?: string(name='alipay_trade_no', description='交易流水号'),
        applyId?: string(name='apply_id', description='审批单号'),
        arrAirportCode?: string(name='arr_airport_code', description='到达机场三字码	新字段，供应链hsf接口有返回'),
        arrCity?: string(name='arr_city', description='到达城市'),
        arrDate?: string(name='arr_date', description='到达日期'),
        arrStation?: string(name='arr_station', description='到达机场名称'),
        arrTime?: string(name='arr_time', description='到达时间'),
        billRecordTime?: string(name='bill_record_time', description='入账时间'),
        bookTime?: string(name='book_time', description='预定时间'),
        bookerId?: string(name='booker_id', description='预定人id'),
        bookerJobNo?: string(name='booker_job_no', description='预订人工号'),
        bookerName?: string(name='booker_name', description='预定人姓名'),
        btripCouponFee?: double(name='btrip_coupon_fee', description='商旅价优惠金额'),
        buildFee?: double(name='build_fee', description='基建费'),
        cabin?: string(name='cabin', description='舱位代码'),
        cabinClass?: string(name='cabin_class', description='舱位等级'),
        capitalDirection?: string(name='capital_direction', description='资金方向'),
        cascadeDepartment?: string(name='cascade_department', description='联级部门'),
        changeFee?: double(name='change_fee', description='改签费'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', description='订单金额'),
        costCenter?: string(name='cost_center', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编号'),
        coupon?: double(name='coupon', description='优惠券'),
        depAirportCode?: string(name='dep_airport_code', description='起飞机场三字码	新字段，供应链hsf接口有返回'),
        department?: string(name='department', description='末级部门'),
        departmentId?: string(name='department_id', description='部门编号'),
        deptCity?: string(name='dept_city', description='起飞城市'),
        deptDate?: string(name='dept_date', description='起飞日期'),
        deptStation?: string(name='dept_station', description='起飞机场名称'),
        deptTime?: string(name='dept_time', description='起飞时间'),
        discount?: string(name='discount', description='折扣率'),
        feeType?: string(name='fee_type', description='费用类型'),
        flightNo?: string(name='flight_no', description='航班号'),
        index?: string(name='index', description='序号'),
        insuranceFee?: double(name='insurance_fee', description='保险费'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        itineraryNum?: string(name='itinerary_num', description='行程单号'),
        itineraryPrice?: double(name='itinerary_price', description='行程单金额'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', description='低价提醒（起飞时间）'),
        mostDifferenceDiscount?: string(name='most_difference_discount', description='低价提醒（折扣）'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', description='低价提醒(航班号)'),
        mostDifferencePrice?: double(name='most_difference_price', description='低价提醒(与最低价差额)'),
        mostDifferenceReason?: string(name='most_difference_reason', description='不选低价原因'),
        mostPrice?: double(name='most_price', description='低价航班价格	新字段，反算，暂不开放'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', description='协议价优惠金额'),
        oilFee?: double(name='oil_fee', description='燃油费'),
        orderId?: string(name='order_id', description='订单id、福豆发放订单号'),
        overApplyId?: string(name='over_apply_id', description='超标审批单号'),
        primaryId?: long(name='primary_id', description='主键id'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectName?: string(name='project_name', description='项目名称'),
        refundFee?: double(name='refund_fee', description='退票手续费'),
        refundUpgradeCost?: double(name='refund_upgrade_cost', description='改签退票手续费'),
        remark?: string(name='remark', description='备注'),
        repeatRefund?: string(name='repeat_refund', description='是否重复退'),
        sealPrice?: double(name='seal_price', description='销售价'),
        serviceFee?: double(name='service_fee', description='服务费'),
        settlementFee?: double(name='settlement_fee', description='结算金额'),
        settlementGrantFee?: double(name='settlement_grant_fee', description='结算金额--赠送部分'),
        settlementTime?: string(name='settlement_time', description='结算时间'),
        settlementType?: string(name='settlement_type', description='结算类型'),
        status?: int32(name='status', description='入账状态'),
        ticketId?: string(name='ticket_id', description='票号'),
        travelerId?: string(name='traveler_id', description='出行人userId'),
        travelerJobNo?: string(name='traveler_job_no', description='出行人工号'),
        travelerName?: string(name='traveler_name', description='出行人名称'),
        upgradeCost?: double(name='upgrade_cost', description='改签差价'),
        voucherType?: int32(name='voucher_type', description='票据类型'),
      }
    ](name='data_list', description='数据集合'),
    periodEnd?: string(name='period_end', description='记账日期止 yyyy-MM-dd'),
    periodStart?: string(name='period_start', description='记账日期起 yyyy-MM-dd'),
    totalNum?: long(name='total_num', description='总数量'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FlightBillSettlementQueryResponseBody(name='body'),
}

async function flightBillSettlementQuery(request: FlightBillSettlementQueryRequest): FlightBillSettlementQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlightBillSettlementQuery', 'GET', '/flight/v1/bill-settlement', 'json', false, 'json', request);
}

model FlightExceedApplyQueryRequest {
  applyId: long(name='apply_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model FlightExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDo?: {
      arrCity?: string(name='arr_city'),
      arrCityName?: string(name='arr_city_name'),
      arrTime?: string(name='arr_time'),
      cabin?: string(name='cabin'),
      cabinClass?: int32(name='cabin_class'),
      cabinClassStr?: string(name='cabin_class_str'),
      depCity?: string(name='dep_city'),
      depCityName?: string(name='dep_city_name'),
      depTime?: string(name='dep_time'),
      discount?: string(name='discount'),
      flightNo?: string(name='flight_no'),
      price?: long(name='price'),
      type?: int32(name='type'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FlightExceedApplyQueryResponseBody(name='body'),
}

async function flightExceedApplyQuery(request: FlightExceedApplyQueryRequest): FlightExceedApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlightExceedApplyQuery', 'GET', '/apply/v1/flight-exceed', 'json', false, 'json', request);
}

model FlightOrderListQueryRequest {
  allApply?: boolean(name='all_apply', position='Query'),
  applyId?: long(name='apply_id', position='Query'),
  departId?: string(name='depart_id', position='Query'),
  endTime?: string(name='end_time', position='Query'),
  page?: int32(name='page', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  startTime?: string(name='start_time', position='Query'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', position='Query'),
  updateEndTime?: string(name='update_end_time', position='Query'),
  updateStartTime?: string(name='update_start_time', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model FlightOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      arrAirport?: string(name='arr_airport'),
      arrCity?: string(name='arr_city'),
      btripTitle?: string(name='btrip_title', description='申请单名称'),
      cabinClass?: string(name='cabin_class'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      depAirport?: string(name='dep_airport'),
      depCity?: string(name='dep_city'),
      depDate?: string(name='dep_date'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      discount?: string(name='discount'),
      flightNo?: string(name='flight_no'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      insureInfoList?: [ 
        {
          insureNo?: string(name='insure_no'),
          name?: string(name='name'),
          status?: int32(name='status'),
        }
      ](name='insure_info_list'),
      invoice?: {
        id?: long(name='id'),
        title?: string(name='title'),
      }(name='invoice'),
      passengerCount?: int32(name='passenger_count'),
      passengerName?: string(name='passenger_name'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          changeFlightNo?: string(name='change_flight_no', description='改签航班号'),
          discount?: string(name='discount', description='折扣'),
          endTime?: string(name='end_time', description='结束时间'),
          gmtCreate?: string(name='gmt_create'),
          originalTicketNo?: string(name='original_ticket_no', description='改签前的票号'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          startTime?: string(name='start_time', description='开始时间'),
          ticketNo?: string(name='ticket_no', description='当前票号'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', description='项目code'),
      projectId?: long(name='project_id', description='项目id'),
      projectTitle?: string(name='project_title', description='项目名称'),
      retDate?: string(name='ret_date'),
      status?: int32(name='status'),
      thirdPartProjectId?: string(name='third_part_project_id', description='第三方项目id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='第三方申请单'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      tripType?: int32(name='trip_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list', description='出行人信息'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', description='当前页'),
    pageSize?: int32(name='page_size', description='每页大小'),
    totalNumber?: int32(name='total_number', description='总记录数'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FlightOrderListQueryResponseBody(name='body'),
}

async function flightOrderListQuery(request: FlightOrderListQueryRequest): FlightOrderListQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlightOrderListQuery', 'GET', '/flight/v1/order-list', 'json', false, 'json', request);
}

model FlightOrderQueryRequest {
  orderId: long(name='order_id', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model FlightOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    flightChangeTicketInfoList?: [ 
      {
        arrTime?: string(name='arr_time', description='改签票到达时间'),
        changeCabin?: string(name='change_cabin', description='改签舱位，如：V'),
        changeCabinLevel?: string(name='change_cabin_level', description='改签舱等，如：Y,Y:经济舱,C:公务舱,F:头等舱'),
        changeFee?: double(name='change_fee', description='机票改签费'),
        changeFlightNo?: string(name='change_flight_no', description='改签航班号'),
        changeOrderId?: long(name='change_order_id', description='改签单id'),
        changeReason?: string(name='change_reason', description='改签原因'),
        changeType?: int32(name='change_type', description='改签类型：0自愿/1非自愿'),
        depTime?: string(name='dep_time', description='改签票起飞时间'),
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='修改时间'),
        originTicketNo?: string(name='origin_ticket_no', description='改签原票号'),
        ticketNo?: string(name='ticket_no', description='改签票号'),
        upgradeFee?: double(name='upgrade_fee', description='机票升舱费'),
      }
    ](name='flight_change_ticket_info_list'),
    flightInfoList?: [ 
      {
        airlineCode?: string(name='airline_code', description='航司码，如：CA'),
        airlineName?: string(name='airline_name', description='航司名称 ，如：中国国航'),
        arrAirportCode?: string(name='arr_airport_code', description='到达机场三字码'),
        arrAirportName?: string(name='arr_airport_name', description='到达机场站名称'),
        arrCityCode?: string(name='arr_city_code', description='到达城市三字码'),
        arrCityName?: string(name='arr_city_name', description='到达城市名称'),
        arrTime?: string(name='arr_time', description='到达时间'),
        cabin?: string(name='cabin', description='舱位'),
        cabinLevel?: string(name='cabin_level', description='舱等'),
        depAirportCode?: string(name='dep_airport_code', description='出发机场三字码'),
        depAirportName?: string(name='dep_airport_name', description='出发机场名称'),
        depCityCode?: string(name='dep_city_code', description='出发城市三字码'),
        depCityName?: string(name='dep_city_name', description='出发城市名称，如：北京'),
        depTime?: string(name='dep_time', description='起飞时间'),
        flightMile?: int32(name='flight_mile', description='里程'),
        flightNo?: string(name='flight_no', description='航班号'),
      }
    ](name='flight_info_list'),
    flightRefundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='更新时间'),
        refundOrderId?: long(name='refund_order_id', description='退票单id'),
        refundReason?: string(name='refund_reason', description='退票原因'),
        refundTicketFee?: double(name='refund_ticket_fee', description='退票金额'),
        refundType?: int32(name='refund_type', description='退票类型：0自愿/1非自愿'),
        ticketNo?: string(name='ticket_no', description='退票票号'),
      }
    ](name='flight_refund_ticket_info_list'),
    flightTicketInfoList?: [ 
      {
        buildPrice?: double(name='build_price', description='燃油'),
        changed?: boolean(name='changed', description='是否改签'),
        discount?: int32(name='discount', description='折扣'),
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='更新时间'),
        oilPrice?: double(name='oil_price', description='燃油'),
        payType?: int32(name='pay_type', description='正票支付方式 1个人支付/2企业支付/3混付'),
        settlePrice?: double(name='settle_price', description='结算金额'),
        ticketNo?: string(name='ticket_no', description='票号'),
        ticketPrice?: double(name='ticket_price', description='票价'),
        ticketStatus?: string(name='ticket_status', description='票状态'),
        ticketStatusCode?: int32(name='ticket_status_code', description='票状态'),
        userId?: string(name='user_id', description='机票对应乘客dingId'),
      }
    ](name='flight_ticket_info_list'),
    insuranceInfoList?: [ 
      {
        amount?: double(name='amount', description='保险金额'),
        insuranceNo?: string(name='insurance_no', description='保险单号'),
        status?: int32(name='status', description='保险状态'),
        type?: string(name='type', description='保险类型'),
      }
    ](name='insurance_info_list'),
    invoiceInfo?: {
      id?: long(name='id', description='发票id'),
      title?: string(name='title', description='发票抬头'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', description='申请单id'),
      btripTitle?: string(name='btrip_title', description='申请单-出行事由'),
      contactName?: string(name='contact_name', description='联系人姓名'),
      corpId?: string(name='corp_id', description='企业id'),
      corpName?: string(name='corp_name', description='企业名称'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create', description='订单创建时间'),
      gmtModify?: string(name='gmt_modify', description='订单更新时间'),
      itineraryId?: string(name='itinerary_id', description='行程单id'),
      orderId?: long(name='order_id', description='订单号'),
      orderStatus?: int32(name='order_status', description='订单状态'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='三方申请单id'),
      thirdpartCorpId?: string(name='thirdpart_corp_id', description='三方企业id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', description='三方行程单id'),
      tripType?: int32(name='trip_type', description='航程类型：0单程  1往返 2中转'),
      userId?: string(name='user_id', description='下单人dingId'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', description='成本中心id'),
        costCenterName?: string(name='cost_center_name', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编码'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectId?: long(name='project_id', description='项目id'),
        projectTitle?: string(name='project_title', description='项目名称'),
        thirdpartProjectId?: string(name='thirdpart_project_id', description='三方项目id'),
        userId?: string(name='user_id', description='出行人dingId'),
        userName?: string(name='user_name', description='出行人姓名'),
        userType?: int32(name='user_type', description='出行人类型 0:内部/1:外部'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', description='交易类目编码'),
        gmtCreate?: string(name='gmt_create', description='流水创建时间'),
        passengerName?: string(name='passenger_name', description='乘机人'),
        payType?: int32(name='pay_type', description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存'),
        price?: double(name='price', description='交易金额'),
        tradeId?: string(name='trade_id', description='交易流水号'),
        type?: int32(name='type', description='资金流向,1:支出，2:收入'),
      }
    ](name='price_info_list'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model FlightOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  body: FlightOrderQueryResponseBody(name='body'),
}

async function flightOrderQuery(request: FlightOrderQueryRequest): FlightOrderQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FlightOrderQuery', 'GET', '/flight/v1/order', 'json', false, 'json', request);
}

model HotelBillSettlementQueryRequest {
  pageNo: int32(name='page_no', description='分页页数（第几页）', position='Query'),
  pageSize: int32(name='page_size', description='分页数量（每页多少条）', position='Query'),
  periodEnd: string(name='period_end', description='记账更新日期止 yyyy-MM-dd', position='Query'),
  periodStart: string(name='period_start', description='记账更新日期起 yyyy-MM-dd', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model HotelBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', description='类目'),
    corpId?: string(name='corp_id', description='企业id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', description='交易流水号'),
        applyId?: string(name='apply_id', description='审批单号'),
        billRecordTime?: string(name='bill_record_time', description='入账时间'),
        bookTime?: string(name='book_time', description='预定时间'),
        bookerId?: string(name='booker_id', description='预定人id'),
        bookerJobNo?: string(name='booker_job_no', description='预订人工号'),
        bookerName?: string(name='booker_name', description='预定人姓名'),
        capitalDirection?: string(name='capital_direction', description='资金方向'),
        cascadeDepartment?: string(name='cascade_department', description='联级部门'),
        checkInDate?: string(name='check_in_date', description='入住时间'),
        checkoutDate?: string(name='checkout_date', description='离店时间'),
        city?: string(name='city', description='入住城市'),
        cityCode?: string(name='city_code', description='城市编号	新字段，khipu已落库'),
        corpRefundFee?: double(name='corp_refund_fee', description='企业退款'),
        corpTotalFee?: double(name='corp_total_fee', description='企业支付合计'),
        costCenter?: string(name='cost_center', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编号'),
        department?: string(name='department', description='末级部门'),
        departmentId?: string(name='department_id', description='部门编号'),
        feeType?: string(name='fee_type', description='费用类型'),
        fees?: double(name='fees', description='杂费'),
        fuPointFee?: double(name='fu_point_fee', description='福豆支付	新字段，khipu链路缺失，先不开放'),
        hotelName?: string(name='hotel_name', description='酒店名称'),
        index?: string(name='index', description='序号'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        isNegotiation?: string(name='is_negotiation', description='是否协议价	新字段，供应链接口无返回'),
        isShareStr?: string(name='is_share_str', description='是否合住'),
        nights?: int32(name='nights', description='入住天数'),
        orderId?: string(name='order_id', description='订单id、福豆发放订单号'),
        orderPrice?: double(name='order_price', description='订单金额'),
        orderType?: string(name='order_type', description='订单类型'),
        overApplyId?: string(name='over_apply_id', description='超标审批单号'),
        personRefundFee?: double(name='person_refund_fee', description='个人退款'),
        personSettlePrice?: double(name='person_settle_price', description='个人支付超标及杂费'),
        primaryId?: long(name='primary_id', description='主键id'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectName?: string(name='project_name', description='项目名称'),
        promotionFee?: double(name='promotion_fee', description='优惠券'),
        remark?: string(name='remark', description='备注'),
        roomNumber?: int32(name='room_number', description='房间数	新字段，khipu已落库'),
        roomPrice?: double(name='room_price', description='房价'),
        roomType?: string(name='room_type', description='房型'),
        serviceFee?: double(name='service_fee', description='服务费'),
        settlementFee?: double(name='settlement_fee', description='结算金额'),
        settlementGrantFee?: double(name='settlement_grant_fee', description='结算金额--赠送部分'),
        settlementTime?: string(name='settlement_time', description='结算时间'),
        settlementType?: string(name='settlement_type', description='结算类型'),
        status?: int32(name='status', description='入账状态'),
        totalNights?: int32(name='total_nights', description='总间夜数	新字段，供应链接口无返回'),
        travelerId?: string(name='traveler_id', description='出行人userId'),
        travelerJobNo?: string(name='traveler_job_no', description='出行人工号'),
        travelerName?: string(name='traveler_name', description='出行人名称'),
        voucherType?: int32(name='voucher_type', description='票据类型'),
      }
    ](name='data_list', description='数据集合'),
    periodEnd?: string(name='period_end', description='记账日期止 yyyy-MM-dd'),
    periodStart?: string(name='period_start', description='记账日期起 yyyy-MM-dd'),
    totalNum?: long(name='total_num', description='总数量'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  body: HotelBillSettlementQueryResponseBody(name='body'),
}

async function hotelBillSettlementQuery(request: HotelBillSettlementQueryRequest): HotelBillSettlementQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotelBillSettlementQuery', 'GET', '/hotel/v1/bill-settlement', 'json', false, 'json', request);
}

model HotelExceedApplyQueryRequest {
  applyId: long(name='apply_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model HotelExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDo?: {
      checkIn?: string(name='check_in'),
      checkOut?: string(name='check_out'),
      cityCode?: string(name='city_code'),
      cityName?: string(name='city_name'),
      price?: long(name='price'),
      together?: boolean(name='together'),
      type?: int32(name='type'),
    }(name='apply_intention_info_do'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: HotelExceedApplyQueryResponseBody(name='body'),
}

async function hotelExceedApplyQuery(request: HotelExceedApplyQueryRequest): HotelExceedApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotelExceedApplyQuery', 'GET', '/apply/v1/hotel-exceed', 'json', false, 'json', request);
}

model HotelOrderListQueryRequest {
  allApply?: boolean(name='all_apply', position='Query'),
  applyId?: long(name='apply_id', position='Query'),
  departId?: string(name='depart_id', position='Query'),
  endTime?: string(name='end_time', position='Query'),
  page?: int32(name='page', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  startTime?: string(name='start_time', position='Query'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', position='Query'),
  updateEndTime?: string(name='update_end_time', position='Query'),
  updateStartTime?: string(name='update_start_time', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model HotelOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      btripTitle?: string(name='btrip_title', description='申请单名称'),
      checkIn?: string(name='check_in'),
      checkOut?: string(name='check_out'),
      city?: string(name='city'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      guest?: string(name='guest'),
      hotelName?: string(name='hotel_name'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', description='酒店发票类型'),
      id?: long(name='id'),
      invoice?: {
        id?: long(name='id'),
        invoiceType?: int32(name='invoice_type', description='发配类型：1 增值税普通发票，2 增值税专用发票'),
        title?: string(name='title'),
      }(name='invoice'),
      night?: int32(name='night'),
      orderStatus?: int32(name='order_status'),
      orderStatusDesc?: string(name='order_status_desc'),
      orderType?: int32(name='order_type'),
      orderTypeDesc?: string(name='order_type_desc'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          gmtCreate?: string(name='gmt_create'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          tradeId?: string(name='trade_id'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', description='项目code'),
      projectId?: long(name='project_id', description='项目id'),
      projectTitle?: string(name='project_title', description='项目名称'),
      roomNum?: int32(name='room_num'),
      roomType?: string(name='room_type'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='第三方申请单'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      thirdpartProjectId?: string(name='thirdpart_project_id', description='第三方项目id'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list', description='出行人信息'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', description='当前页'),
    pageSize?: int32(name='page_size', description='每页大小'),
    totalNumber?: int32(name='total_number', description='总记录数'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model HotelOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  body: HotelOrderListQueryResponseBody(name='body'),
}

async function hotelOrderListQuery(request: HotelOrderListQueryRequest): HotelOrderListQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotelOrderListQuery', 'GET', '/hotel/v1/order-list', 'json', false, 'json', request);
}

model HotelOrderQueryRequest {
  orderId: long(name='order_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model HotelOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    hotelInfo?: {
      checkIn?: long(name='check_in', description='入住时间'),
      checkOut?: long(name='check_out', description='离店时间'),
      city?: string(name='city', description='酒店所在城市'),
      hotelName?: string(name='hotel_name', description='酒店名称'),
      hotelSupportVatInvoiceType?: int32(name='hotel_support_vat_invoice_type', description='酒店开票支持类型'),
      night?: int32(name='night', description='间夜'),
      roomNum?: int32(name='room_num', description='房间数'),
      roomType?: string(name='room_type', description='房型'),
    }(name='hotel_info', description='酒店信息'),
    invoiceInfo?: {
      id?: long(name='id', description='发票id'),
      title?: string(name='title', description='发票抬头'),
    }(name='invoice_info', description='酒店发票数据'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', description='申请单id'),
      btripTitle?: string(name='btrip_title', description='申请单-出行事由'),
      corpId?: string(name='corp_id', description='企业id'),
      corpName?: string(name='corp_name', description='企业名称'),
      departId?: string(name='depart_id', description='部门id'),
      departName?: string(name='depart_name', description='部门名称'),
      gmtCreate?: long(name='gmt_create', description='订单创建时间'),
      gmtModified?: long(name='gmt_modified', description='订单更新时间'),
      id?: long(name='id', description='订单号'),
      itineraryId?: string(name='itinerary_id', description='行程单id'),
      orderStatus?: int32(name='order_status', description='订单状态'),
      orderType?: int32(name='order_type', description='订单类型'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='三方申请单id'),
      thirdpartDepartId?: string(name='thirdpart_depart_id', description='第三方部门id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', description='三方行程单id'),
      userId?: string(name='user_id', description='联系人userId'),
      userName?: string(name='user_name', description='联系人姓名'),
    }(name='order_base_info', description='订单基本信息'),
    passengerList?: [ 
      {
        costCenterId?: long(name='cost_center_id', description='成本中心id'),
        costCenterName?: string(name='cost_center_name', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编码'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectId?: long(name='project_id', description='项目id'),
        projectTitle?: string(name='project_title', description='项目名称'),
        thirdpartCostCenterId?: string(name='thirdpart_cost_center_id', description='第三方成本中心id'),
        thirdpartProjectId?: string(name='thirdpart_project_id', description='三方项目id'),
        userId?: string(name='user_id', description='出行人dingId'),
        userName?: string(name='user_name', description='出行人姓名'),
        userType?: int32(name='user_type', description='出行人类型 0:内部/1:外部'),
      }
    ](name='passenger_list', description='酒店入住人列表'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', description='交易类目编码'),
        gmtCreate?: long(name='gmt_create', description='流水创建时间'),
        payType?: int32(name='pay_type', description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存'),
        price?: double(name='price', description='交易金额'),
        tradeId?: string(name='trade_id', description='交易流水号'),
        type?: int32(name='type', description='资金流向,1:支出，2:收入'),
      }
    ](name='price_info_list', description='酒店订单费用列表'),
  }(name='module'),
  requestId?: string(name='requestId', description='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId', description='traceId'),
}

model HotelOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  body: HotelOrderQueryResponseBody(name='body'),
}

async function hotelOrderQuery(request: HotelOrderQueryRequest): HotelOrderQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'HotelOrderQuery', 'GET', '/hotel/v1/order', 'json', false, 'json', request);
}

model IeFlightBillSettlementQueryRequest {
  pageNo: int32(name='page_no', description='分页页数（第几页）', position='Query'),
  pageSize: int32(name='page_size', description='分页数量（每页多少条）', position='Query'),
  periodEnd: string(name='period_end', description='记账更新日期止 yyyy-MM-dd', position='Query'),
  periodStart: string(name='period_start', description='记账更新日期起 yyyy-MM-dd', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model IeFlightBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', description='类目'),
    corpId?: string(name='corp_id', description='企业id'),
    dataList?: [ 
      {
        advanceDay?: int32(name='advance_day', description='提前预定天数'),
        airlineCorpCode?: string(name='airline_corp_code', description='航司二字码	新字段，khipu已落库'),
        airlineCorpName?: string(name='airline_corp_name', description='航司名称'),
        alipayTradeNo?: string(name='alipay_trade_no', description='交易流水号'),
        applyId?: string(name='apply_id', description='审批单号'),
        arrAirportCode?: string(name='arr_airport_code', description='到达机场三字码	新字段，供应链hsf接口有返回'),
        arrCity?: string(name='arr_city', description='到达城市'),
        arrDate?: string(name='arr_date', description='到达日期'),
        arrStation?: string(name='arr_station', description='到达机场名称'),
        arrTime?: string(name='arr_time', description='到达时间'),
        billRecordTime?: string(name='bill_record_time', description='入账时间'),
        bookMode?: string(name='book_mode', description='预定类型'),
        bookTime?: string(name='book_time', description='预定时间'),
        bookerId?: string(name='booker_id', description='预定人id'),
        bookerJobNo?: string(name='booker_job_no', description='预订人工号'),
        bookerName?: string(name='booker_name', description='预定人姓名'),
        btripCouponFee?: double(name='btrip_coupon_fee', description='商旅价优惠金额'),
        cabin?: string(name='cabin', description='舱位代码'),
        cabinClass?: string(name='cabin_class', description='舱位等级'),
        capitalDirection?: string(name='capital_direction', description='资金方向'),
        cascadeDepartment?: string(name='cascade_department', description='联级部门'),
        changeFee?: double(name='change_fee', description='改签费'),
        corpPayOrderFee?: double(name='corp_pay_order_fee', description='订单金额'),
        costCenter?: string(name='cost_center', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编号'),
        coupon?: double(name='coupon', description='优惠券'),
        depAirportCode?: string(name='dep_airport_code', description='起飞机场三字码	新字段，供应链hsf接口有返回'),
        department?: string(name='department', description='末级部门'),
        departmentId?: string(name='department_id', description='部门编号'),
        deptCity?: string(name='dept_city', description='起飞城市'),
        deptDate?: string(name='dept_date', description='起飞日期'),
        deptStation?: string(name='dept_station', description='起飞机场名称'),
        deptTime?: string(name='dept_time', description='起飞时间'),
        discount?: string(name='discount', description='折扣率'),
        feeType?: string(name='fee_type', description='费用类型'),
        flightNo?: string(name='flight_no', description='航班号'),
        index?: string(name='index', description='序号'),
        insuranceFee?: double(name='insurance_fee', description='保险费'),
        insuranceNumber?: string(name='insurance_number', description='保单号'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        mostDifferenceDeptTime?: string(name='most_difference_dept_time', description='低价提醒（起飞时间）'),
        mostDifferenceDiscount?: string(name='most_difference_discount', description='低价提醒（折扣）'),
        mostDifferenceFlightNo?: string(name='most_difference_flight_no', description='低价提醒(航班号)'),
        mostDifferencePrice?: double(name='most_difference_price', description='低价提醒(与最低价差额)'),
        mostDifferenceReason?: string(name='most_difference_reason', description='不选低价原因'),
        mostPrice?: double(name='most_price', description='低价航班价格	新字段，反算，暂不开放'),
        negotiationCouponFee?: double(name='negotiation_coupon_fee', description='协议价优惠金额'),
        orderId?: string(name='order_id', description='订单id、福豆发放订单号'),
        orderStatusDesc?: string(name='order_status_desc', description='订单状态描述'),
        overApplyId?: string(name='over_apply_id', description='超标审批单号'),
        primaryId?: long(name='primary_id', description='主键id'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectName?: string(name='project_name', description='项目名称'),
        refundFee?: double(name='refund_fee', description='退票手续费'),
        remark?: string(name='remark', description='备注'),
        repeatRefund?: string(name='repeat_refund', description='是否重复退'),
        sealPrice?: double(name='seal_price', description='销售价'),
        segmentType?: string(name='segment_type', description='洲际、洲内'),
        serviceFee?: double(name='service_fee', description='服务费'),
        settlementFee?: double(name='settlement_fee', description='结算金额'),
        settlementGrantFee?: double(name='settlement_grant_fee', description='结算金额--赠送部分'),
        settlementTime?: string(name='settlement_time', description='结算时间'),
        settlementType?: string(name='settlement_type', description='结算类型'),
        status?: int32(name='status', description='入账状态'),
        subOrderId?: string(name='sub_order_id', description='子订单id（目前用车有）'),
        taxFee?: double(name='tax_fee', description='税费'),
        ticketId?: string(name='ticket_id', description='票号'),
        trade?: string(name='trade', description='行程'),
        travelerId?: string(name='traveler_id', description='出行人userId'),
        travelerJobNo?: string(name='traveler_job_no', description='出行人工号'),
        travelerName?: string(name='traveler_name', description='出行人名称'),
        voucherType?: int32(name='voucher_type', description='票据类型'),
      }
    ](name='data_list', description='数据集合'),
    periodEnd?: string(name='period_end', description='记账日期止 yyyy-MM-dd'),
    periodStart?: string(name='period_start', description='记账日期起 yyyy-MM-dd'),
    totalNum?: long(name='total_num', description='总数量'),
  }(name='module'),
  morePage?: boolean(name='more_page'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model IeFlightBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  body: IeFlightBillSettlementQueryResponseBody(name='body'),
}

async function ieFlightBillSettlementQuery(request: IeFlightBillSettlementQueryRequest): IeFlightBillSettlementQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'IeFlightBillSettlementQuery', 'GET', '/ie-flight/v1/bill-settlement', 'json', false, 'json', request);
}

model InvoiceAddRequest {
  address?: string(name='address', description='注册地址', position='Body'),
  bankName?: string(name='bank_name', description='开户行', position='Body'),
  bankNo?: string(name='bank_no', description='银行账号', position='Body'),
  taxNo: string(name='tax_no', description='税号', position='Body'),
  tel?: string(name='tel', description='公司电话', position='Body'),
  thirdPartId: string(name='third_part_id', description='第三方id', position='Body'),
  title: string(name='title', description='发票抬头', position='Body'),
  type: int32(name='type', description='类型，1:增值税普通发票,2:增值税专用发票', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model InvoiceAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model InvoiceAddResponse = {
  headers: map[string]string(name='headers'),
  body: InvoiceAddResponseBody(name='body'),
}

async function invoiceAdd(request: InvoiceAddRequest): InvoiceAddResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvoiceAdd', 'POST', '/invoice/v1/add-invoice', 'json', true, 'form', request);
}

model InvoiceDeleteRequest {
  thirdPartId: string(name='third_part_id', description='第三方发票id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model InvoiceDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model InvoiceDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: InvoiceDeleteResponseBody(name='body'),
}

async function invoiceDelete(request: InvoiceDeleteRequest): InvoiceDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvoiceDelete', 'DELETE', '/invoice/v1/invoice', 'json', false, 'json', request);
}

model InvoiceModifyRequest {
  address?: string(name='address', description='注册地址', position='Body'),
  bankName?: string(name='bank_name', description='开户行', position='Body'),
  bankNo?: string(name='bank_no', description='银行账号', position='Body'),
  taxNo: string(name='tax_no', description='税号', position='Body'),
  tel?: string(name='tel', description='公司电话', position='Body'),
  thirdPartId: string(name='third_part_id', description='第三方id', position='Body'),
  title: string(name='title', description='发票抬头', position='Body'),
  type: int32(name='type', description='类型，1:增值税普通发票,2:增值税专用发票', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model InvoiceModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model InvoiceModifyResponse = {
  headers: map[string]string(name='headers'),
  body: InvoiceModifyResponseBody(name='body'),
}

async function invoiceModify(request: InvoiceModifyRequest): InvoiceModifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvoiceModify', 'PUT', '/invoice/v1/invoice', 'json', true, 'form', request);
}

model InvoiceRuleSaveRequest {
  allEmploye: boolean(name='all_employe', description='是否全员适用', position='Body'),
  entities?: [ 
    {
      id?: string(name='id'),
      name?: string(name='name'),
      type?: int32(name='type'),
    }
  ](name='entities', description='当非全员时，启用该适用名单', shrink='json', position='Body'),
  thirdPartId: string(name='third_part_id', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model InvoiceRuleSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: {
    addNum?: int32(name='add_num'),
    removeNum?: int32(name='remove_num'),
  }(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model InvoiceRuleSaveResponse = {
  headers: map[string]string(name='headers'),
  body: InvoiceRuleSaveResponseBody(name='body'),
}

async function invoiceRuleSave(request: InvoiceRuleSaveRequest): InvoiceRuleSaveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvoiceRuleSave', 'POST', '/invoice/v1/invoice-rule', 'json', true, 'form', request);
}

model InvoiceSearchRequest {
  title?: string(name='title', position='Query'),
  userId?: string(name='user_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model InvoiceSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: [ 
    {
      id?: long(name='id'),
      thirdPartInvoiceId?: string(name='third_part_invoice_id'),
      title?: string(name='title'),
    }
  ](name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model InvoiceSearchResponse = {
  headers: map[string]string(name='headers'),
  body: InvoiceSearchResponseBody(name='body'),
}

async function invoiceSearch(request: InvoiceSearchRequest): InvoiceSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'InvoiceSearch', 'GET', '/invoice/v1/invoice', 'json', false, 'json', request);
}

model IsvUserSaveRequest {
  userList?: [ 
    {
      departId?: long(name='depart_id'),
      email?: string(name='email'),
      jobNo?: string(name='job_no'),
      leaveStatus?: int32(name='leave_status'),
      managerUserId?: string(name='manager_user_id'),
      phone?: string(name='phone'),
      position?: string(name='position'),
      positionLevel?: string(name='position_level'),
      realNameEn?: string(name='real_name_en'),
      thirdDepartId?: string(name='third_depart_id'),
      thirdDepartIdList?: [ string ](name='third_depart_id_list'),
      userId: string(name='user_id'),
      userName: string(name='user_name'),
    }
  ](name='user_list', shrink='json', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model IsvUserSaveResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model IsvUserSaveResponse = {
  headers: map[string]string(name='headers'),
  body: IsvUserSaveResponseBody(name='body'),
}

async function isvUserSave(request: IsvUserSaveRequest): IsvUserSaveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'IsvUserSave', 'POST', '/isvuser/v1/isvuser', 'json', true, 'form', request);
}

model MonthBillGetRequest {
  billMonth?: string(name='bill_month', description='YYYY-MM 出账月份', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model MonthBillGetResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: [ 
    {
      endDate?: string(name='end_date', description='结束时间'),
      startDate?: string(name='start_date', description='开始时间'),
      url?: string(name='url', description='数据地址'),
    }
  ](name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model MonthBillGetResponse = {
  headers: map[string]string(name='headers'),
  body: MonthBillGetResponseBody(name='body'),
}

async function monthBillGet(request: MonthBillGetRequest): MonthBillGetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'MonthBillGet', 'GET', '/open/v1/month-bill', 'json', false, 'json', request);
}

model ProjectAddRequest {
  code: string(name='code', description='项目代码', position='Body'),
  projectName: string(name='project_name', description='项目名称', position='Body'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', description='第三方成本中心id', position='Body'),
  thirdPartId: string(name='third_part_id', description='第三方项目id', position='Body'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', description='第三方发票id', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ProjectAddResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: long(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  morePage?: boolean(name='more_page', description='分页标识，由服务端设置，分页时是否有下一页更多数据。'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model ProjectAddResponse = {
  headers: map[string]string(name='headers'),
  body: ProjectAddResponseBody(name='body'),
}

async function projectAdd(request: ProjectAddRequest): ProjectAddResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ProjectAdd', 'POST', '/cost/v1/project', 'json', true, 'form', request);
}

model ProjectDeleteRequest {
  thirdPartId: string(name='third_part_id', description='第三方项目id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ProjectDeleteResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: boolean(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model ProjectDeleteResponse = {
  headers: map[string]string(name='headers'),
  body: ProjectDeleteResponseBody(name='body'),
}

async function projectDelete(request: ProjectDeleteRequest): ProjectDeleteResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ProjectDelete', 'DELETE', '/cost/v1/project', 'json', false, 'json', request);
}

model ProjectModifyRequest {
  code?: string(name='code', description='项目代码', position='Body'),
  projectName: string(name='project_name', description='项目名称', position='Body'),
  thirdPartCostCenterId?: string(name='third_part_cost_center_id', description='第三方成本中心id', position='Body'),
  thirdPartId: string(name='third_part_id', description='第三方项目id', position='Body'),
  thirdPartInvoiceId?: string(name='third_part_invoice_id', description='第三方发票id', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model ProjectModifyResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='备注，结果的备注，如对结果的说明'),
  module?: boolean(name='module', description='返回值，服务端返回，没有结果或发生异常都返回空'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='成功标识，由服务端设置，发生异常时为false。结果为null设置为false。'),
  traceId?: string(name='traceId'),
}

model ProjectModifyResponse = {
  headers: map[string]string(name='headers'),
  body: ProjectModifyResponseBody(name='body'),
}

async function projectModify(request: ProjectModifyRequest): ProjectModifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ProjectModify', 'PUT', '/cost/v1/project', 'json', true, 'form', request);
}

model SyncSingleUserRequest {
  email?: string(name='email', description='人员邮箱', position='Body'),
  jobNo?: string(name='job_no', description='工号', position='Body'),
  leaveStatus?: int32(name='leave_status', description='离职状态（0 在职 1 离职）', position='Body'),
  managerUserId?: string(name='manager_user_id', description='直属主管id', position='Body'),
  phone?: string(name='phone', description='人员电话', position='Body'),
  position?: string(name='position', description='职位 （eg：开发）', position='Body'),
  positionLevel?: string(name='position_level', description='职级', position='Body'),
  realNameEn?: string(name='real_name_en', description='用户名称EN', position='Body'),
  thirdDepartIdList?: [ string ](name='third_depart_id_list', description='第三方部门ID', shrink='json', position='Body'),
  userId: string(name='user_id', position='Body'),
  userName: string(name='user_name', description='用户名称', position='Body'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model SyncSingleUserResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: string(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model SyncSingleUserResponse = {
  headers: map[string]string(name='headers'),
  body: SyncSingleUserResponseBody(name='body'),
}

async function syncSingleUser(request: SyncSingleUserRequest): SyncSingleUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SyncSingleUser', 'POST', '/user/v1/single-user/action/sync', 'json', true, 'form', request);
}

model TrainBillSettlementQueryRequest {
  pageNo: int32(name='page_no', description='分页页数（第几页）', position='Query'),
  pageSize: int32(name='page_size', description='分页数量（每页多少条）', position='Query'),
  periodEnd: string(name='period_end', description='记账更新日期止 yyyy-MM-dd', position='Query'),
  periodStart: string(name='period_start', description='记账更新日期起 yyyy-MM-dd', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model TrainBillSettlementQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    category?: int32(name='category', description='类目'),
    corpId?: string(name='corp_id', description='企业id'),
    dataList?: [ 
      {
        alipayTradeNo?: string(name='alipay_trade_no', description='交易流水号'),
        applyId?: string(name='apply_id', description='审批单号'),
        arrDate?: string(name='arr_date', description='到达日期'),
        arrStation?: string(name='arr_station', description='到达站'),
        arrTime?: string(name='arr_time', description='到达时间'),
        billRecordTime?: string(name='bill_record_time', description='入账时间'),
        bookTime?: string(name='book_time', description='预定时间'),
        bookerId?: string(name='booker_id', description='预定人id'),
        bookerJobNo?: string(name='booker_job_no', description='预订人工号'),
        bookerName?: string(name='booker_name', description='预定人姓名'),
        capitalDirection?: string(name='capital_direction', description='资金方向'),
        cascadeDepartment?: string(name='cascade_department', description='联级部门'),
        changeFee?: double(name='change_fee', description='改签手续费'),
        costCenter?: string(name='cost_center', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编号'),
        coupon?: double(name='coupon', description='优惠券'),
        department?: string(name='department', description='末级部门'),
        departmentId?: string(name='department_id', description='部门编号'),
        deptDate?: string(name='dept_date', description='发车日期'),
        deptStation?: string(name='dept_station', description='发车站'),
        deptTime?: string(name='dept_time', description='发车时间'),
        feeType?: string(name='fee_type', description='费用类型'),
        index?: string(name='index', description='序号'),
        invoiceTitle?: string(name='invoice_title', description='发票抬头'),
        orderId?: string(name='order_id', description='订单id、福豆发放订单号'),
        orderPrice?: double(name='order_price', description='订单金额'),
        overApplyId?: string(name='over_apply_id', description='超标审批单号'),
        primaryId?: long(name='primary_id', description='主键id'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectName?: string(name='project_name', description='项目名称'),
        refundFee?: double(name='refund_fee', description='退票手续费'),
        remark?: string(name='remark', description='备注'),
        runTime?: string(name='run_time', description='运行时长'),
        seatNo?: string(name='seat_no', description='座位号'),
        seatType?: string(name='seat_type', description='坐席'),
        serviceFee?: double(name='service_fee', description='服务费'),
        settlementFee?: double(name='settlement_fee', description='结算金额'),
        settlementGrantFee?: double(name='settlement_grant_fee', description='结算金额--赠送部分'),
        settlementTime?: string(name='settlement_time', description='结算时间'),
        settlementType?: string(name='settlement_type', description='结算类型'),
        status?: int32(name='status', description='入账状态'),
        ticketNo?: string(name='ticket_no', description='票面票号'),
        ticketPrice?: double(name='ticket_price', description='票价'),
        trainNo?: string(name='train_no', description='车次'),
        trainType?: string(name='train_type', description='车次类型'),
        travelerId?: string(name='traveler_id', description='出行人userId'),
        travelerJobNo?: string(name='traveler_job_no', description='出行人工号'),
        travelerName?: string(name='traveler_name', description='出行人名称'),
        voucherType?: int32(name='voucher_type', description='票据类型'),
      }
    ](name='data_list', description='数据集合'),
    periodEnd?: string(name='period_end', description='记账日期止 yyyy-MM-dd'),
    periodStart?: string(name='period_start', description='记账日期起 yyyy-MM-dd'),
    totalNum?: long(name='total_num', description='总数量'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainBillSettlementQueryResponse = {
  headers: map[string]string(name='headers'),
  body: TrainBillSettlementQueryResponseBody(name='body'),
}

async function trainBillSettlementQuery(request: TrainBillSettlementQueryRequest): TrainBillSettlementQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainBillSettlementQuery', 'GET', '/train/v1/bill-settlement', 'json', false, 'json', request);
}

model TrainExceedApplyQueryRequest {
  applyId: long(name='apply_id', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model TrainExceedApplyQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    applyId?: long(name='apply_id'),
    applyIntentionInfoDO?: {
      arrCity?: string(name='arr_city'),
      arrCityName?: string(name='arr_city_name'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time'),
      depCity?: string(name='dep_city'),
      depCityName?: string(name='dep_city_name'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time'),
      price?: long(name='price'),
      seatName?: string(name='seat_name'),
      trainNo?: string(name='train_no'),
      trainTypeDesc?: string(name='train_type_desc'),
      type?: int32(name='type'),
    }(name='apply_intention_info_d_o'),
    btripCause?: string(name='btrip_cause'),
    corpId?: string(name='corp_id'),
    exceedReason?: string(name='exceed_reason'),
    exceedType?: int32(name='exceed_type'),
    originStandard?: string(name='origin_standard'),
    status?: int32(name='status'),
    submitTime?: string(name='submit_time'),
    thirdpartApplyId?: string(name='thirdpart_apply_id'),
    thirdpartCorpId?: string(name='thirdpart_corp_id'),
    userId?: string(name='user_id'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainExceedApplyQueryResponse = {
  headers: map[string]string(name='headers'),
  body: TrainExceedApplyQueryResponseBody(name='body'),
}

async function trainExceedApplyQuery(request: TrainExceedApplyQueryRequest): TrainExceedApplyQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainExceedApplyQuery', 'GET', '/apply/v1/train-exceed', 'json', false, 'json', request);
}

model TrainOrderListQueryRequest {
  allApply?: boolean(name='all_apply', position='Query'),
  applyId?: long(name='apply_id', position='Query'),
  departId?: string(name='depart_id', position='Query'),
  endTime?: string(name='end_time', position='Query'),
  page?: int32(name='page', position='Query'),
  pageSize?: int32(name='page_size', position='Query'),
  startTime?: string(name='start_time', position='Query'),
  thirdpartApplyId?: string(name='thirdpart_apply_id', position='Query'),
  updateEndTime?: string(name='update_end_time', position='Query'),
  updateStartTime?: string(name='update_start_time', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model TrainOrderListQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: [ 
    {
      applyId?: long(name='apply_id'),
      arrCity?: string(name='arr_city'),
      arrStation?: string(name='arr_station'),
      arrTime?: string(name='arr_time'),
      btripTitle?: string(name='btrip_title', description='申请单名称'),
      contactName?: string(name='contact_name'),
      corpId?: string(name='corp_id'),
      corpName?: string(name='corp_name'),
      costCenter?: {
        corpId?: string(name='corp_id'),
        id?: long(name='id'),
        name?: string(name='name'),
        number?: string(name='number'),
      }(name='cost_center'),
      depCity?: string(name='dep_city'),
      depStation?: string(name='dep_station'),
      depTime?: string(name='dep_time'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      gmtCreate?: string(name='gmt_create'),
      gmtModified?: string(name='gmt_modified'),
      id?: long(name='id'),
      invoice?: {
        id?: long(name='id'),
        title?: string(name='title'),
      }(name='invoice'),
      priceInfoList?: [ 
        {
          categoryCode?: int32(name='category_code'),
          categoryType?: int32(name='category_type'),
          endCity?: string(name='end_city', description='目的地'),
          endTime?: string(name='end_time', description='结束时间'),
          gmtCreate?: string(name='gmt_create'),
          originalTrainNo?: string(name='original_train_no', description='改签前车次号'),
          passengerName?: string(name='passenger_name'),
          payType?: int32(name='pay_type'),
          price?: double(name='price'),
          seatType?: string(name='seat_type', description='座位类型'),
          startCity?: string(name='start_city', description='始发地'),
          startTime?: string(name='start_time', description='开始时间'),
          tradeId?: string(name='trade_id'),
          trainNo?: string(name='train_no', description='火车车次号'),
          type?: int32(name='type'),
        }
      ](name='price_info_list'),
      projectCode?: string(name='project_code', description='项目code'),
      projectId?: long(name='project_id', description='项目id'),
      projectTitle?: string(name='project_title', description='项目名称'),
      riderName?: string(name='rider_name'),
      runTime?: string(name='run_time'),
      seatType?: string(name='seat_type'),
      status?: int32(name='status'),
      thirdPartProjectId?: string(name='third_part_project_id', description='第三方项目id'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='第三方申请单'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id'),
      ticketCount?: int32(name='ticket_count'),
      ticketNo12306?: string(name='ticket_no12306'),
      trainNumber?: string(name='train_number'),
      trainType?: string(name='train_type'),
      userAffiliateList?: [ 
        {
          userId?: string(name='user_id'),
          userName?: string(name='user_name'),
        }
      ](name='user_affiliate_list', description='出行人信息'),
      userId?: string(name='user_id'),
      userName?: string(name='user_name'),
    }
  ](name='module'),
  pageInfo?: {
    page?: int32(name='page', description='当前页'),
    pageSize?: int32(name='page_size', description='每页大小'),
    totalNumber?: int32(name='total_number', description='总记录数'),
  }(name='page_info'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainOrderListQueryResponse = {
  headers: map[string]string(name='headers'),
  body: TrainOrderListQueryResponseBody(name='body'),
}

async function trainOrderListQuery(request: TrainOrderListQueryRequest): TrainOrderListQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainOrderListQuery', 'GET', '/train/v1/order-list', 'json', false, 'json', request);
}

model TrainOrderQueryRequest {
  orderId: long(name='order_id', position='Query'),
  userId?: string(name='user_id', description='无userId时传缺省值superAdmin', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model TrainOrderQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    changeTicketInfoList?: [ 
      {
        changeCoachNo?: string(name='change_coach_no', description='改签车厢号'),
        changeGapFee?: double(name='change_gap_fee', description='改签差价'),
        changeHandlingFee?: double(name='change_handling_fee', description='改签手续费'),
        changeSeatNo?: string(name='change_seat_no', description='改签座位号'),
        changeSeatTypeName?: string(name='change_seat_type_name', description='改签车次类型'),
        changeServiceFee?: double(name='change_service_fee', description='改签服务费'),
        changeTrainNo?: string(name='change_train_no'),
        changeTrainTypeName?: string(name='change_train_type_name', description='改签座位类型'),
        checkInTime?: string(name='check_in_time', description='进站时间'),
        checkOutTime?: string(name='check_out_time', description='出站时间'),
        endTime?: string(name='end_time', description='改签票到达时间'),
        fromStationName?: string(name='from_station_name'),
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='修改时间'),
        originTicketNo?: string(name='origin_ticket_no', description='改签原票'),
        outTicketStatus?: string(name='out_ticket_status', description='12306票状态'),
        startTime?: string(name='start_time', description='改签票启程时间'),
        ticketNo?: string(name='ticket_no', description='改签票号'),
        toStationName?: string(name='to_station_name'),
      }
    ](name='change_ticket_info_list'),
    invoiceInfo?: {
      id?: long(name='id', description='发票id'),
      title?: string(name='title', description='发票抬头'),
    }(name='invoice_info'),
    orderBaseInfo?: {
      applyId?: string(name='apply_id', description='申请单id'),
      btripTitle?: string(name='btrip_title', description='申请单-出行事由'),
      contactName?: string(name='contact_name', description='联系人姓名'),
      corpId?: string(name='corp_id', description='企业id'),
      corpName?: string(name='corp_name', description='企业名称'),
      departId?: string(name='depart_id'),
      departName?: string(name='depart_name'),
      exceedApplyId?: string(name='exceed_apply_id'),
      exceedThirdPartApplyId?: string(name='exceed_third_part_apply_id'),
      gmtCreate?: string(name='gmt_create', description='订单创建时间'),
      gmtModify?: string(name='gmt_modify', description='订单更新时间'),
      itineraryId?: string(name='itinerary_id', description='行程单id'),
      orderId?: long(name='order_id', description='订单号'),
      orderStatus?: int32(name='order_status', description='订单状态'),
      thirdpartApplyId?: string(name='thirdpart_apply_id', description='三方申请单id'),
      thirdpartCorpId?: string(name='thirdpart_corp_id', description='三方企业id'),
      thirdpartItineraryId?: string(name='thirdpart_itinerary_id', description='三方行程单id'),
      tripType?: int32(name='trip_type', description='航程类型：0单程  1往返 2中转'),
      userId?: string(name='user_id', description='下单人dingId'),
    }(name='order_base_info'),
    passengerInfoList?: [ 
      {
        costCenterId?: long(name='cost_center_id', description='成本中心id'),
        costCenterName?: string(name='cost_center_name', description='成本中心名称'),
        costCenterNumber?: string(name='cost_center_number', description='成本中心编码'),
        projectCode?: string(name='project_code', description='项目编码'),
        projectId?: long(name='project_id', description='项目id'),
        projectTitle?: string(name='project_title', description='项目名称'),
        thirdpartProjectId?: string(name='thirdpart_project_id', description='三方项目id'),
        userId?: string(name='user_id', description='出行人dingId'),
        userName?: string(name='user_name', description='出行人姓名'),
        userType?: int32(name='user_type', description='出行人类型 0:内部/1:外部'),
      }
    ](name='passenger_info_list'),
    priceInfoList?: [ 
      {
        categoryCode?: int32(name='category_code', description='交易类目编码'),
        gmtCreate?: string(name='gmt_create', description='流水创建时间'),
        passengerName?: string(name='passenger_name', description='乘机人'),
        payType?: int32(name='pay_type', description='结算方式:1：个人现付，2:企业现付,4:企业月结，8、企业预存'),
        price?: double(name='price', description='交易金额'),
        tradeId?: string(name='trade_id', description='交易流水号'),
        type?: int32(name='type', description='资金流向,1:支出，2:收入'),
      }
    ](name='price_info_list'),
    refundTicketInfoList?: [ 
      {
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='修改时间'),
        refundFee?: double(name='refund_fee', description='退票金额'),
        refundServiceFee?: double(name='refund_service_fee', description='退票手续费'),
        ticketNo?: string(name='ticket_no', description='退票票号'),
      }
    ](name='refund_ticket_info_list'),
    ticketInfoList?: [ 
      {
        changed?: boolean(name='changed', description='是否改签'),
        checkInTime?: string(name='check_in_time', description='进站时间'),
        checkOutTime?: string(name='check_out_time', description='出站时间'),
        coachNo?: string(name='coach_no', description='车厢号'),
        endTime?: string(name='end_time', description='到达时间'),
        gmtCreate?: string(name='gmt_create', description='创建时间'),
        gmtModify?: string(name='gmt_modify', description='修改时间'),
        outTicketStatus?: string(name='out_ticket_status', description='12306票状态'),
        payType?: int32(name='pay_type', description='正票支付方式 1个人支付/2企业支付/3混付'),
        seatNo?: string(name='seat_no', description='座位号'),
        seatTypeName?: string(name='seat_type_name', description='座位类型'),
        serviceFee?: double(name='service_fee', description='预订服务费'),
        startTime?: string(name='start_time', description='启程时间'),
        ticketNo?: string(name='ticket_no', description='票号'),
        ticketPrice?: double(name='ticket_price', description='票价'),
        ticketStatus?: int32(name='ticket_status', description='票状态'),
        trainTypeName?: string(name='train_type_name', description='车次类型'),
        userId?: string(name='user_id', description='车票对应乘客dingId'),
      }
    ](name='ticket_info_list'),
    trainInfo?: {
      arrTime?: string(name='arr_time', description='到站时间'),
      depTime?: string(name='dep_time', description='发车时间'),
      fromStationName?: string(name='from_station_name', description='发车站名称'),
      runTime?: long(name='run_time', description='运行时长'),
      toStationName?: string(name='to_station_name', description='目的站名称'),
      trainNo?: string(name='train_no', description='车次编号'),
    }(name='train_info'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model TrainOrderQueryResponse = {
  headers: map[string]string(name='headers'),
  body: TrainOrderQueryResponseBody(name='body'),
}

async function trainOrderQuery(request: TrainOrderQueryRequest): TrainOrderQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainOrderQuery', 'GET', '/train/v1/order', 'json', false, 'json', request);
}

model TrainStationSearchRequest {
  keyword: string(name='keyword', description='搜索关键字', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model TrainStationSearchResponseBody = {
  code?: string(name='code'),
  message?: string(name='message', description='��ע������ı�ע����Խ����˵��'),
  module?: {
    cities?: [ 
      {
        code?: string(name='code'),
        name?: string(name='name'),
      }
    ](name='cities'),
  }(name='module', description='����ֵ������˷��أ�û�н�������쳣�����ؿ�'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success', description='�ɹ���ʶ���ɷ�������ã������쳣ʱΪfalse�����Ϊnull����Ϊfalse��'),
  traceId?: string(name='traceId'),
}

model TrainStationSearchResponse = {
  headers: map[string]string(name='headers'),
  body: TrainStationSearchResponseBody(name='body'),
}

async function trainStationSearch(request: TrainStationSearchRequest): TrainStationSearchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TrainStationSearch', 'GET', '/city/v1/train', 'json', false, 'json', request);
}

model UserQueryRequest {
  modifiedTimeGreaterOrEqualThan?: string(name='modified_time_greater_or_equal_than', position='Query'),
  pageSize?: int32(name='page_size', description='每页的最大数据记录数量；默认10，该值要求大于0且小于等于1000。', position='Query'),
  pageToken?: string(name='page_token', description='游标分页的游标值，用来标记当前分页的开始位置，第一次请求不填表示从头开始遍历；', position='Query'),
  thirdPartJobNo?: string(name='third_part_job_no', description='第三方员工工号，user.job_no', position='Query'),
  xAcsBtripSoCorpToken: string(name='x-acs-btrip-so-corp-token', position='Header'),
}

model UserQueryResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  module?: {
    hasMore?: boolean(name='has_more', description='是否还有更多数据项'),
    items?: [ 
      {
        employeeNick?: string(name='employee_nick', description='员工昵称，user.user_nick'),
        thirdPartEmployeeId?: string(name='third_part_employee_id', description='第三方员工ID，user.user_id'),
        thirdPartJobNo?: string(name='third_part_job_no', description='第三方员工工号，user.job_no'),
      }
    ](name='items'),
    pageToken?: string(name='page_token', description='连续翻页的分页标记，当has_more为true时，会同时返回新的page_token，否则不返回page_token'),
    total?: long(name='total', description='本次请求条件下的数据项总量'),
  }(name='module'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
  traceId?: string(name='traceId'),
}

model UserQueryResponse = {
  headers: map[string]string(name='headers'),
  body: UserQueryResponseBody(name='body'),
}

async function userQuery(request: UserQueryRequest): UserQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UserQuery', 'GET', '/user/v1/user', 'json', false, 'json', request);
}

